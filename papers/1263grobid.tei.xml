<?xml version="1.0" encoding="UTF-8"?>
<TEI xmlns="http://www.tei-c.org/ns/1.0" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
xsi:schemaLocation="http://www.tei-c.org/ns/1.0 /Users/atharsefid/Desktop/grobid-0.5.3/grobid-home/schemas/xsd/Grobid.xsd"
 xmlns:xlink="http://www.w3.org/1999/xlink">
	<teiHeader xml:lang="en">
		<encodingDesc>
			<appInfo>
				<application version="0.5.3" ident="GROBID" when="2020-09-29T01:51+0000">
					<ref target="https://github.com/kermitt2/grobid">GROBID - A machine learning software for extracting information from scholarly documents</ref>
				</application>
			</appInfo>
		</encodingDesc>
		<fileDesc>
			<titleStmt>
				<title level="a" type="main">Exploiting MISD Performance Opportunities in Multi-core Systems</title>
			</titleStmt>
			<publicationStmt>
				<publisher/>
				<availability status="unknown"><licence/></availability>
			</publicationStmt>
			<sourceDesc>
				<biblStruct>
					<analytic>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Patrick</forename><forename type="middle">G</forename><surname>Bridges</surname></persName>
							<affiliation key="aff0">
								<orgName type="department">Department of Computer Science</orgName>
								<orgName type="institution">University of New Mexico Albuquerque</orgName>
								<address>
									<postCode>87131</postCode>
									<region>NM</region>
								</address>
							</affiliation>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Donour</forename><surname>Sizemore</surname></persName>
							<affiliation key="aff0">
								<orgName type="department">Department of Computer Science</orgName>
								<orgName type="institution">University of New Mexico Albuquerque</orgName>
								<address>
									<postCode>87131</postCode>
									<region>NM</region>
								</address>
							</affiliation>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Scott</forename><surname>Levy</surname></persName>
							<affiliation key="aff0">
								<orgName type="department">Department of Computer Science</orgName>
								<orgName type="institution">University of New Mexico Albuquerque</orgName>
								<address>
									<postCode>87131</postCode>
									<region>NM</region>
								</address>
							</affiliation>
						</author>
						<title level="a" type="main">Exploiting MISD Performance Opportunities in Multi-core Systems</title>
					</analytic>
					<monogr>
						<imprint>
							<date/>
						</imprint>
					</monogr>
				</biblStruct>
			</sourceDesc>
		</fileDesc>
		<profileDesc>
			<abstract>
				<p>A number of important system services, particularly network system services, need strong scaling on multi-core systems, where a fixed workload is executed more quickly with increased core counts. Unfortunately , modern multiple-instruction/multiple-data (MIMD) approaches to multi-core OS design cannot exploit the fine-grained parallelism needed to provide such scaling. In this paper, we propose a replicated work approach to parallelizing network system services for multi-core systems based on a multiple-instruction/single-data (MISD) execution model. In particular, we discuss the advantages of this approach for scalable network system services and we compare past methods for addressing the challenges this approach presents. We also present preliminary results that examine the viability of the basic approach and the software abstractions needed to support it.</p>
			</abstract>
		</profileDesc>
	</teiHeader>
	<text xml:lang="en">
		<body>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="1">Introduction</head><p>A number of important system services need strong scaling, where a fixed workload is executed more quickly with increased core counts. This is particularly true for data-intensive, network-oriented system services because network interface card (NIC) line rates continue to increase but the individual cores that service them are not getting any faster. In cases like this, multiple cores must closely coordinate activities and multi-core system designs which rely on only intermittent synchronization will bottleneck on inter-core synchronization. As a consequence, the resulting system performance can be disappointing.</p><p>Recent research projects on multi-core system software designs propose a distributed systems-oriented approach, where data structures are replicated or segregated between processors <ref type="bibr" target="#b0">[1,</ref><ref type="bibr" target="#b1">2]</ref>. These designs use a multiple-instruction/multiple-data (MIMD) parallel execution model, and generally focus on services for which coarse-grained synchronization is sufficient. Because of this, such systems generally provide only weak scaling, where more cores can be used to handle a larger workload (e.g. more TCP/IP connections) but cannot make an existing workload (e.g. a single TCP/IP connection) run faster.</p><p>In this paper, we propose a replicated work approach based on a multiple-instruction/single-data (MISD) execution model to take advantage of unexploited parallelization opportunities in multi-core systems. This approach is particularly important in the network stack, as it is needed to enable strongly scalable network services. We begin by discussing example network applications and related system services that require strong scaling. We then discuss a replicated work execution model for building strongly-scalable network system services based on MISD parallelism, along with specific challenges that this execution mode presents, including consistency, scheduling, and programmability. Finally, we discuss initial experiments we have conducted on this approach and the infrastructure to support it.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2">Motivating Applications and Services</head><p>The combination of increasing network card line rates and plateauing single-core CPU speeds is driving the demand for scalable network services. The most obvious motivating example of this is high-speed network connectivity over TCP-based network connections. Traditional operating systems have difficulty saturating a 10Gbps Ethernet NIC using a single TCP connection <ref type="bibr" target="#b13">[14]</ref> without complex hardware assistance such as TCP offload engines. However, such hardware solutions present well-known challenges to system software design (e.g. packet filtering, security, portability). Past work has shown that providing scalable network connections in software is quite challenging <ref type="bibr" target="#b10">[11,</ref><ref type="bibr" target="#b13">14]</ref>. Perhaps as a result, recent work on scaling TCP/IP network stacks has focused primarily on scaling the number of connections or flows that can be supported rather than on the data rate of individual connections. Corey, for example, uses a private TCP network stack on each core <ref type="bibr" target="#b2">[3]</ref>, and RouteBricks segregates each IP flow to its own core <ref type="bibr" target="#b5">[6]</ref>. These approaches allow systems to scale to handle a large number of connections or flows, but limit the data rate achievable on each flow to well below the throughput of modern network cards.</p><p>One frequently attempted workaround to these problems is to use multiple parallel connections for these applications, turning a strong scaling problem into a weak scaling one. Unfortunately, this approach has numerous drawbacks. Most importantly, such approaches can break existing network resource allocation systems <ref type="bibr" target="#b12">[13]</ref>. It also places significant burden on application and library programmers for managing data ordering and reliability.</p><p>Without a scalable network service, a wide range of applications such as high-bandwidth file systems, databases, and content distribution systems, become difficult to deploy. For example, the performance of middleware systems that buffer, aggregate, and analyze data as it is streamed between data warehouse systems (e.g. Netezza, LexisNexis) and highend supercomputing systems (e.g. ADIOS <ref type="bibr" target="#b8">[9]</ref>) depends upon the availability of scalable network services.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3">Building Strongly Scalable System Services</head><p>The primary challenge in building strongly scalable networked system services is handling shared state. Current MIMD-based approaches to parallelizing system services for multi-core systems rely on relatively expensive synchronization mechanisms (e.g. messages, locks) that prevent the exploitation of finegrained parallelism. TCP/IP, for example, includes important shared state (e.g. sliding window state) that must be updated on each packet sent or received.</p><p>TCP also includes elements that can potentially be paralellized, for example data delivery, acknowledgment generation, and timer management. Unfortunately, explicit or implicit inter-core communication costs are too large compared to packet processing times to be successfully amortized away.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.1">MISD-Based Parallelism</head><p>We propose using a multiple instruction/single data (MISD) execution model (i.e. replicated work) to provide fine-grained data consistency between cores and to eliminate expensive inter-core interactions. In this approach, shown in <ref type="figure" target="#fig_1">Figure 1</ref>(a), state is replicated into domains on separate cores, and requests that modify shared state are broadcast to every domain using a ringbuffer-based channel abstraction. The first replica that dequeues a request becomes the primary replica for that request and is responsible for fully processing it, including any updates with globally visible side effects (e.g. data delivery, packet reconstruction, acknowledgment generation). Other replicas that process the request will, on the other hand, only partially process each request to maintain state consistency. This approach is particularly appropriate for many network services because it parallelizes expensive perbyte processing (e.g. data copies, encryption/decryption, and error correction) and replicates per-header processing costs that are known to be small <ref type="bibr" target="#b6">[7]</ref>. It also retains the reduced locking and caching costs of systems like Barrelfish <ref type="bibr" target="#b0">[1]</ref> while adding the ability to perform fine-grained updates to logically shared state. Finally, we note that this approach is similar to the execution model used in many group RPC systems <ref type="bibr" target="#b4">[5]</ref> To examine the potential for this approach compared to lock-based and atomic instruction-based MIMD approaches, we constructed a simple synthetic test. In this test, processing each request requires some amount of work that can be done by one core without synchronization or replication (i.e. parallelizable work), and some work that must be synchronized or replicated. Specifically, the parallelizable work is a set of memory updates done on per-core memory, while the synchronized work is the set of memory updates that must be performed: (a) on every replica; (b) while holding a shared lock; or (c) by using atomic memory update instructions. <ref type="figure" target="#fig_1">Figure 1(b)</ref> shows the potential performance advantages of this approach using a 10:1 ratio of parallelizable to replicated work; we chose this ratio based  on our our studies of production TCP/IP stacks. As can be seen, the lock-based model scales remarkably poorly and the atomic instruction approach is only slightly better. The replicated work approach, in contrast, scales well to 8 cores, the limit of the 2x4-core Intel Xeon machine on which we tested.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.2">Consistency Management</head><p>While this approach avoids the inter-core synchronization and communication costs of other approaches, it does introduce consistency management problems. Specifically, domains that subscribe to multiple broadcast channels, for example separate channels for incoming and outgoing packets are by default PRAM consistent-they see requests on the same channel in the same order, but may see different interleavings of the requests from the different channels.</p><p>If these consistency problems are not handled properly, inconsistency between replicas could result in both poor performance and incorrect behavior. In the networking context, for example, a replica could dequeue an incoming acknowledgement for a packet sent by another replica before it sees dequeues the request that generated the packet being acknowledged from the outgoing request channel.</p><p>There are a variety of approaches to handling these consistency management problems. The simplest solution is for each domain to route all requests through a single broadcast channel that supports multiple producers, resulting in sequential consistency between replicas-all replicas see the same requests in the same order-at the cost of extra synchronization when enqueuing requests on channels. A wide range of other well-known distributed consistency and message ordering techniques are also potentially applicable.</p><p>In addition, addressing consistency problems is in many ways simpler for network services than for other services. In particular, inconsistency between replicas in network services results in anomalous protocol behavior, and many network services must be able to tolerate unexpected protocol behaviors due to unusual network conditions. As a result, consistency management between replicas for these services need only focus on inconsistency that results in nonrecoverable behavior (e.g. spurious connection resets) or that significantly impacts performance and scalability.</p><p>We are taking an approach where each service manages its own consistency demands in three distinct ways. Most coarsely, each service implementation will determine how to use channels to route requests to domains, allowing it to determine which requests are sequentially consistent and which are PRAM consistent. At a finer granularity, each domain implements a channel scheduler which chooses from which chan-nel to dequeue the next request, based on examination of the head of each channel; this allows it to implement service-specific scheduling rules, such as: "process outgoing requests required to fill the congestion control window prior to processing incoming packets".</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.3">Scheduling</head><p>Using a bounded broadcast channel to provide MISD parallelism, as we propose, also raises a variety of inter-domain scheduling issues. In particular, domains that lag behind in processing requests can cause the channel to fill up, preventing new requests from being enqueued and slowing service. However, well-known gang scheduling and load balancing techniques can be used to address such issues. In addition, because every replica processes the same set of requests, it should be possible for a lagging replica to roll forward to the state of another replica that periodically saves a snapshot of its state in shared memory.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.4">Programmability</head><p>The new replicated work execution model described above also presents programmability challenges, an important factor to consider in new system software designs. This execution model, like a purely distributed one, avoids the need for complex locking protocols and read-copy-update mechanisms. It does, however, require replicas to segregate program execution into work that must be executed on every request (to maintain consistency) and work that must be executed when the replica is the primary on a request.</p><p>We believe that an event-based programming model <ref type="bibr" target="#b11">[12]</ref> is ideal for programming such services. Event-based programming provides a simple mechanism for directing execution based on whether or not the replica is the primary for a request (e.g. by raising separate events), and for reusing shared code between primary and non-primary processing paths. In addition, MISD-style execution preserves the event atomicity expected in event-based systems, and eventbased systems have been successfully used in a number of related distributed systems projects <ref type="bibr" target="#b7">[8]</ref>.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4">Implementation</head><p>We have begun implementing our proposed approach in a framework called Dominoes. As a first step, we  <ref type="figure">Figure 2</ref>: Replicated ring buffer channel performance on an 2x4-core 2.4GHz AMD Shanghai system have implemented a replicated ring buffer channel to broadcast requests to multiple domains. We have also begun porting network stacks to this framework.</p><p>The basic replicated ring buffer channel is a traditional single producer/single consumer ring buffer augmented with per-replica head pointers and a global per-entry reference count updated using an atomic decrement instruction. Upon dequeuing an entry, a replica advances its local head pointer and atomically decrements the entry's reference count. If the updated reference count is one less than the total number of replicas, the replica knows that it is the first to dequeue the request and is therefore responsible for fully processing it. On the other hand, if the updated reference count is zero the replica knows that it is the last to dequeue and it can advance the global head pointer, thereby freeing space in the ring buffer for new entries. We have also implemented a version that allows for multiple producers as opposed to a single producer. <ref type="figure">Figure 2</ref> shows the per-core and aggregate dequeue rates from a channel based on this data structure on a 2x4-core 2.4GHz AMD Shanghai system, where one core is dedicated to enqueueing elements and some number of the remaining cores dequeue elements. Even with 1500 byte packets, this service rate is sufficient at 4 replicas to handle data rates well in excess of 10 Gbps. In addition, more sophisticated reference counting techniques than the one used by this implementation (e.g. sloppy counters <ref type="bibr" target="#b2">[3]</ref>), could also potentially improve the scalability of this implementation.</p><p>In addition to this basic framework construction, we have also begun porting the Scout <ref type="bibr" target="#b9">[10]</ref> and the CTP <ref type="bibr" target="#b3">[4]</ref> networking frameworks to Dominoes. We have completed initial ports of the (essentially stateless) UDP and IP protocols, where preliminary scaling results are encouraging, and are currently working on a TCP protocol implementation. We have also begun adapting the Cactus framework <ref type="bibr" target="#b7">[8]</ref> used to implement CTP to provide an event-based programming model in Dominoes, and porting basic components of CTP to the resulting system.</p></div><figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_0"><head></head><label></label><figDesc>Comparison of lock, atomic instruction, and replicated-work par- alellization approaches</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_1"><head>Figure 1 :</head><label>1</label><figDesc>Figure 1: Architecture and basic performance of a replicated-work parallelization approach</figDesc></figure>

			<note place="foot">* This work was supported in part by gifts from Sun and Intel Corporations, a faculty sabbatical appointment at Sandia National Laboratories, and a grant from DOE Office of Science, Advanced Scientific Computing research, under award number DE-SC0005050, program manager Sonia Sachs.</note>
		</body>
		<back>
			<div type="references">

				<listBibl>

<biblStruct xml:id="b0">
	<analytic>
		<title level="a" type="main">The multikernel: a new OS architecture for scalable multicore systems</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Baumann</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><surname>Barham</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><forename type="middle">E</forename><surname>Dagand</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><surname>Harris</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Isaacs</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Peter</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><surname>Roscoe</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Schüpbach</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Singhania</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the ACM SIGOPS 22nd Symposium on Operating Systems Principles</title>
		<meeting>the ACM SIGOPS 22nd Symposium on Operating Systems Principles</meeting>
		<imprint>
			<publisher>ACM</publisher>
			<date type="published" when="2009" />
			<biblScope unit="page" from="29" to="44" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b1">
	<analytic>
		<title level="a" type="main">Corey: An Operating System for Many Cores</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Boyd-Wickizer</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">H</forename><surname>Chen</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Chen</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Y</forename><surname>Mao</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">F</forename><surname>Kaashoek</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Morris</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Pesterev</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">L</forename><surname>Stein</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Wu</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Y</forename><surname>Dai</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Y</forename><surname>Zhang</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Z</forename><surname>Zhang</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 8th USENIX Symposium on Operating Systems Design and Implementation</title>
		<meeting>the 8th USENIX Symposium on Operating Systems Design and Implementation</meeting>
		<imprint>
			<date type="published" when="2008" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b2">
	<analytic>
		<title level="a" type="main">An analysis of Linux scalability to many cores</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Boyd-Wickizer</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><forename type="middle">T</forename><surname>Clements</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Y</forename><surname>Mao</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Pesterev</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><forename type="middle">F</forename><surname>Kaashoek</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Morris</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">N</forename><surname>Zeldovich</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 2010 USENIX Symposium on Operating System Design and Implementation</title>
		<meeting>the 2010 USENIX Symposium on Operating System Design and Implementation</meeting>
		<imprint>
			<date type="published" when="2010" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b3">
	<analytic>
		<title level="a" type="main">A configurable and extensible transport protocol</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><forename type="middle">G</forename><surname>Bridges</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><forename type="middle">A</forename><surname>Hiltunen</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><forename type="middle">D</forename><surname>Schlichting</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">G</forename><forename type="middle">T</forename><surname>Wong</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Barrick</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">ACM/IEEE Transactions on Networking</title>
		<imprint>
			<biblScope unit="volume">15</biblScope>
			<biblScope unit="issue">6</biblScope>
			<biblScope unit="page" from="1254" to="1265" />
			<date type="published" when="2007" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b4">
	<analytic>
		<title level="a" type="main">A bibliography on multicast and group communications</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><forename type="middle">T</forename><surname>Chanson</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><forename type="middle">W</forename><surname>Neufeld</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">L</forename><surname>Liang</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">ACM Operating Systems Review</title>
		<imprint>
			<biblScope unit="volume">23</biblScope>
			<biblScope unit="issue">4</biblScope>
			<biblScope unit="page" from="20" to="25" />
			<date type="published" when="1989" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b5">
	<analytic>
		<title level="a" type="main">RouteBricks: Exploiting parallelism to scale software routers</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Dobrescu</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">N</forename><surname>Egi</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">K</forename><surname>Argyraki</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">B</forename><surname>Chun</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">K</forename><surname>Fall</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">G</forename><surname>Iannaccone</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Knies</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Manesh</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Ratnasamy</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 22nd ACM Symposium on Operating Systems Principles</title>
		<meeting>the 22nd ACM Symposium on Operating Systems Principles</meeting>
		<imprint>
			<date type="published" when="2009" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b6">
	<analytic>
		<title level="a" type="main">TCP performance re-visited</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Foong</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><surname>Huff</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">H</forename><surname>Hum</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Patwardhan</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">G</forename><surname>Regnier</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 2003 IEEE International Symposium on Performance Analysis of Systems and Software</title>
		<meeting>the 2003 IEEE International Symposium on Performance Analysis of Systems and Software</meeting>
		<imprint>
			<date type="published" when="2003" />
			<biblScope unit="page" from="70" to="79" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b7">
	<analytic>
		<title level="a" type="main">Real-time dependable channels: Customizing QoS attributes for distributed systems</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><forename type="middle">A</forename><surname>Hiltunen</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><forename type="middle">D</forename><surname>Schlichting</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">X</forename><surname>Han</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Cardozo</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Das</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE Transactions on Parallel and Distributed Systems</title>
		<imprint>
			<biblScope unit="volume">10</biblScope>
			<biblScope unit="issue">6</biblScope>
			<biblScope unit="page" from="600" to="612" />
			<date type="published" when="1999" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b8">
	<analytic>
		<title level="a" type="main">Adaptable, metadata rich IO methods for portable high performance IO</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Lofstead</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">F</forename><surname>Zhang</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Klasky</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">K</forename><surname>Schwan</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 2009 IEEE International Symposium on Parallel &amp; Distributed Processing (IPDPS&apos;09)</title>
		<meeting>the 2009 IEEE International Symposium on Parallel &amp; Distributed Processing (IPDPS&apos;09)<address><addrLine>Washington, DC, USA</addrLine></address></meeting>
		<imprint>
			<publisher>IEEE Computer Society</publisher>
			<date type="published" when="2009" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b9">
	<analytic>
		<title level="a" type="main">Making paths explicit in the Scout operating system</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Mosberger</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">L</forename><forename type="middle">L</forename><surname>Peterson</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 2nd USENIX Symposium on Operating Systems Design and Implementation</title>
		<meeting>the 2nd USENIX Symposium on Operating Systems Design and Implementation</meeting>
		<imprint>
			<date type="published" when="1996" />
			<biblScope unit="page" from="153" to="168" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b10">
	<analytic>
		<title level="a" type="main">Performance issues in parallelized network protocols</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">E</forename><forename type="middle">M</forename><surname>Nahum</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><forename type="middle">J</forename><surname>Yates</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><forename type="middle">F</forename><surname>Kurose</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Towsley</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the First Symposium on Operating Systems Design and Implementation</title>
		<meeting>the First Symposium on Operating Systems Design and Implementation</meeting>
		<imprint>
			<date type="published" when="1994-11" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b11">
	<analytic>
		<title level="a" type="main">Why threads are a bad idea (for most purposes)</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><forename type="middle">K</forename><surname>Ousterhout</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">1996 USENIX Technical Conference</title>
		<imprint>
			<date type="published" when="1996" />
		</imprint>
	</monogr>
	<note>Invited Talk</note>
</biblStruct>

<biblStruct xml:id="b12">
	<analytic>
		<title level="a" type="main">Modeling and performance analysis of bittorrent-like peer-to-peer networks</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Qiu</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Srikant</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 2004 conference on Applications, technologies, architectures, and protocols for computer communications</title>
		<meeting>the 2004 conference on Applications, technologies, architectures, and protocols for computer communications<address><addrLine>New York</addrLine></address></meeting>
		<imprint>
			<publisher>ACM Press</publisher>
			<date type="published" when="2004" />
			<biblScope unit="page" from="367" to="378" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b13">
	<analytic>
		<title level="a" type="main">An evaluation of network stack parallelization strategies in modern operating systems</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><surname>Willmann</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Rixner</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><forename type="middle">L</forename><surname>Cox</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the USENIX Annual Technical Conference</title>
		<meeting>the USENIX Annual Technical Conference</meeting>
		<imprint>
			<date type="published" when="2006-06" />
			<biblScope unit="page" from="91" to="96" />
		</imprint>
	</monogr>
</biblStruct>

				</listBibl>
			</div>
		</back>
	</text>
</TEI>
