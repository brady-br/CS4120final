<?xml version="1.0" encoding="UTF-8"?>
<TEI xmlns="http://www.tei-c.org/ns/1.0" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
xsi:schemaLocation="http://www.tei-c.org/ns/1.0 /Users/atharsefid/Desktop/grobid-0.5.3/grobid-home/schemas/xsd/Grobid.xsd"
 xmlns:xlink="http://www.w3.org/1999/xlink">
	<teiHeader xml:lang="en">
		<encodingDesc>
			<appInfo>
				<application version="0.5.3" ident="GROBID" when="2020-09-29T04:09+0000">
					<ref target="https://github.com/kermitt2/grobid">GROBID - A machine learning software for extracting information from scholarly documents</ref>
				</application>
			</appInfo>
		</encodingDesc>
		<fileDesc>
			<titleStmt>
				<title level="a" type="main">V0LTpwn: Attacking x86 Processor Integrity from Software V0LTpwn: Attacking x86 Processor Integrity from Software</title>
			</titleStmt>
			<publicationStmt>
				<publisher/>
				<availability status="unknown"><licence/></availability>
				<date>August 12-14, 2020</date>
			</publicationStmt>
			<sourceDesc>
				<biblStruct>
					<analytic>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Zijo</forename><surname>Kenjar</surname></persName>
							<email>zijo.kenjar@trust.tu-darmstadt.de</email>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Tommaso</forename><surname>Frassetto</surname></persName>
							<email>tommaso.frassetto@trust.tu-darmstadt.de</email>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">David</forename><surname>Gens</surname></persName>
							<email>dgens@uci.edu</email>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Michael</forename><surname>Franz</surname></persName>
							<email>franz@uci.edu</email>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Ahmad-Reza</forename><surname>Sadeghi</surname></persName>
							<email>ahmad.sadeghi@trust.tu-darmstadt.de</email>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Zijo</forename><surname>Kenjar</surname></persName>
							<affiliation key="aff2">
								<orgName type="institution">Technical University of Darmstadt</orgName>
								<address>
									<country key="DE">Germany</country>
								</address>
							</affiliation>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Tommaso</forename><surname>Frassetto</surname></persName>
							<affiliation key="aff2">
								<orgName type="institution">Technical University of Darmstadt</orgName>
								<address>
									<country key="DE">Germany</country>
								</address>
							</affiliation>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">David</forename><surname>Gens</surname></persName>
							<affiliation key="aff3">
								<orgName type="institution">University of California</orgName>
								<address>
									<settlement>Irvine</settlement>
								</address>
							</affiliation>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Michael</forename><surname>Franz</surname></persName>
							<affiliation key="aff3">
								<orgName type="institution">University of California</orgName>
								<address>
									<settlement>Irvine</settlement>
								</address>
							</affiliation>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Ahmad-Reza</forename><surname>Sadeghi</surname></persName>
							<affiliation key="aff2">
								<orgName type="institution">Technical University of Darmstadt</orgName>
								<address>
									<country key="DE">Germany</country>
								</address>
							</affiliation>
						</author>
						<author>
							<affiliation key="aff0">
								<orgName type="institution" key="instit1">Technische Universität Darmstadt</orgName>
								<orgName type="institution" key="instit2">University of California</orgName>
								<address>
									<settlement>Irvine</settlement>
								</address>
							</affiliation>
						</author>
						<author>
							<affiliation key="aff1">
								<orgName type="institution">Technische Universität Darmstadt</orgName>
							</affiliation>
						</author>
						<title level="a" type="main">V0LTpwn: Attacking x86 Processor Integrity from Software V0LTpwn: Attacking x86 Processor Integrity from Software</title>
					</analytic>
					<monogr>
						<title level="m">Proceedings of the 29th USENIX Security Symposium</title>
						<meeting>the 29th USENIX Security Symposium						</meeting>
						<imprint>
							<date type="published">August 12-14, 2020</date>
						</imprint>
					</monogr>
					<note>This paper is included in the Open access to the Proceedings of the 29th USENIX Security Symposium is sponsored by USENIX.</note>
				</biblStruct>
			</sourceDesc>
		</fileDesc>
		<profileDesc>
			<abstract>
				<p>Fault-injection attacks have been proven in the past to be a reliable way of bypassing hardware-based security measures, such as cryptographic hashes, privilege and access permission enforcement, and trusted execution environments. However, traditional fault-injection attacks require physical presence, and hence, were often considered out of scope in many real-world adversary settings. In this paper we show this assumption may no longer be justified on x86. We present V0LTpwn, a novel hardware-oriented but software-controlled attack that affects the integrity of computation in virtually any execution mode on modern x86 processors. To the best of our knowledge, this represents the first attack on the integrity of the x86 platform from software. The key idea behind our attack is to undervolt a physical core to force non-recoverable hardware faults. Under a V0LTpwn attack, CPU instructions will continue to execute with erroneous results and without crashes, allowing for exploitation. In contrast to recently presented side-channel attacks that leverage vulnerable speculative execution, V0LTpwn is not limited to information disclosure , but allows adversaries to affect execution, and hence, effectively breaks the integrity goals of modern x86 platforms. In our detailed evaluation we successfully launch software-based attacks against Intel SGX enclaves from a privileged process to demonstrate that a V0LTpwn attack can successfully change the results of computations within enclave execution across multiple CPU revisions.</p>
			</abstract>
		</profileDesc>
	</teiHeader>
	<text xml:lang="en">
		<body>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="1">Introduction</head><p>Modern hardware platforms have a long history that spans multiple decades. The need to ensure backwards compatibility and the constant tweaking of existing designs has burdened widely deployed hardware architectures with legacy components that have become highly complex, and far from flawless. In the recent past, we have seen how seemingly minor implementation bugs at the hardware level can have a severe impact on security <ref type="bibr" target="#b13">[14]</ref>. Attacks such as Meltdown <ref type="bibr" target="#b35">[36]</ref>, Spectre <ref type="bibr" target="#b32">[33]</ref>, Foreshadow <ref type="bibr" target="#b57">[58]</ref>, and RIDL <ref type="bibr" target="#b61">[62]</ref> demonstrate that attackers can exploit these bugs from software to bypass access permissions and extract secret data.</p><p>Furthermore, we have seen that the adverse effects of hardware vulnerabilities are not limited to confidentiality, but can also compromise integrity in principle: the infamous Rowhammer bug <ref type="bibr" target="#b31">[32]</ref> resulted in numerous exploits <ref type="bibr" target="#b5">[6,</ref><ref type="bibr" target="#b23">24,</ref><ref type="bibr" target="#b42">43,</ref><ref type="bibr" target="#b47">48,</ref><ref type="bibr" target="#b49">50,</ref><ref type="bibr" target="#b55">56,</ref><ref type="bibr" target="#b59">60,</ref><ref type="bibr" target="#b62">63,</ref><ref type="bibr" target="#b64">65]</ref> leveraging bit flips in flawed DRAM modules, which are deployed on practically all computer systems today. While initial defenses have been proposed to mitigate Rowhammer from software <ref type="bibr" target="#b4">[5,</ref><ref type="bibr" target="#b7">8]</ref>, fixing Rowhammer bugs ultimately requires deploying new hardware.</p><p>With recent feature sizes shrinking to single-digit nanometer scale, semiconductor companies face the growing problem of the so-called dark silicon. At run time large parts of the chip will have to be left powered-off, since the billions of transistors cannot be operated within the thermal constraints and power budget the platform was originally designed for. This prevented hardware designers from leveraging Dennard scaling <ref type="bibr" target="#b16">[17,</ref><ref type="bibr" target="#b52">53]</ref>; consequently, manufacturers have moved to more intelligent, on-demand thermal and voltage control on recent platforms. This means that critical operational aspects of the processor can now and are increasingly controlled from software during run time. Unfortunately, this development comes with severe consequences for computer security.</p><p>In 2017 Tang et al. <ref type="bibr" target="#b54">[55]</ref> showed that the intricacies of low-level and fine-grained power management on ARMbased mobile devices open up serious pitfalls, as they were able to induce faults in the processor of a Nexus 6 smartphone, allowing them to bypass the isolation boundary of TrustZone. So far, a similar scenario was deemed unlikely on x86-based systems for several reasons: (i) x86-based power management traditionally does not expose direct access to hardware regulators to software above the BIOS level, (ii) desktops and servers are typically not battery powered, and hence, feature less aggressive and more coarse-grained power management, and finally (iii) x86-based platforms deploy extensive safety measures and implement strict architectural defenses to prevent, detect, and recover from hardware faults at run time. We elaborate on the differences between our work and previous attacks in Section 8.</p><p>In this paper, we present V0LTpwn, the first softwarecontrolled fault-injection attack for x86-based platforms (together with concurrent work <ref type="bibr" target="#b37">[38,</ref><ref type="bibr" target="#b44">45]</ref>). Our attack is able to directly affect processor execution regardless of privilege level, execution mode, or hardware isolation. As a result, V0LTpwn is also able to compromise the integrity guarantees of Intel's Software Guard Extensions (SGX). SGX is a hardware security extension which Intel promotes in cloud-based scenarios where cloud providers should be considered untrusted <ref type="bibr" target="#b26">[27]</ref>.</p><p>The key idea behind our V0LTpwn attack is to undervolt the physical target core that executes the victim software (i.e., reduce its available voltage). We achieve this by exploiting software-exposed but obscure powermanagement interfaces of modern x86 platforms. We analyze a number of CPUs of different Intel generations and we show that all of them are prone to fault-injection attacks despite deploying dedicated counter measures. In particular, all of these processors feature an elaborate set of management and safety mechanisms collectively called Machine-Check Architecture (MCA) <ref type="bibr" target="#b27">[28]</ref>, providing detection and fallback routines for handling critical hardware events such as core, uncore, interconnect, bus, parity, and cache errors.</p><p>Processors leverage a number of model-specific registers to control and report such events across different hardware layers. These events can then be forwarded as machine-check exceptions to software handlers to store, process, and react to critical failures. However, we show that an adversary can still inject exploitable hardware faults by carefully driving processor execution into unstable voltage domains. We construct a proof-of-concept exploit in which the attacker injects such faults into a running SGX enclave entirely from software. We analyze, conduct, and evaluate this new attack through a number of tests across multiple Intel CPUs.</p><p>Contrary to recent hardware-oriented attacks such as Foreshadow <ref type="bibr" target="#b57">[58]</ref>, Spectre <ref type="bibr" target="#b32">[33]</ref>, RIDL <ref type="bibr" target="#b61">[62]</ref> and Meltdown <ref type="bibr" target="#b35">[36]</ref> -which are limited to extracting information through side channels -our attack enables an adversary to manipulate enclave execution and compromise its integrity. Through concurrent use of execution units and by leveraging power-intensive instructions we provoke resource contention which results in reliable and reproducible faults in our tests. For this, we leverage undocumented features, extending and customizing the available software tools to enable detailed probing and attacks on real-world code. Our findings show that the deployed defenses (MCA, SGX isolation) are insufficient in practice, leaving a large number of real-world system vulnerable to V0LTpwn.</p><p>To summarize, our contributions include the following:</p><p>• Novel attack against x86 processors: we present V0LTpwn, the first software-controlled faultinjection attack for the x86 platform. Through targeted undervolting from malicious software V0LTpwn is able to alter computational results and affect processor execution in victim software at run time. We introduce several new techniques, such as identifying fault-susceptible frequency settings, instruction patterns, and stressing the logical partner core to increase temperature and resource contention while undervolting.</p><p>• Real-world impact and responsible disclosure: we confirmed reproducible and exploitable faults for code running within user processes, kernel code, and SGX enclaves. Intel confirmed our findings and proof-of-concept attack, assigned a CVE <ref type="bibr" target="#b56">[57]</ref>, issued an advisory <ref type="bibr" target="#b29">[30]</ref>, and released a microcode update.</p><p>• Extensive evaluation and proof-of-concept implementation: we implement and demonstrate an end-to-end exploit against recent processors that support SGX, which is designed as a completely isolated and trusted execution environment in the presence of potentially malicious software running on the platform. By undervolting the processor while the SGX enclave runs we are able to manipulate its execution at run time and demonstrate manipulation of computation through software-induced faults. Our results show that we are able to induce and exploit faults on multiple processors of different micro-architectures despite extensive defensive measures to prevent, detect, and recover from such errors.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2">Background</head><p>In this section we explain the background information required for the understanding of the rest of the paper. First, we describe the principles of power management on modern x86 processors. Second, we explain undocumented software interfaces for overclocking. Third, we discuss Intel's Machine Check Architecture. Finally, we briefly cover the basics of Intel SGX.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.1">Dynamic Voltage and Frequency Scaling on the x86 platform</head><p>The performance and power consumption of processors depends on frequency and voltage settings. For different software workloads, modern processors incorporate technologies for Dynamic Voltage and Frequency Scaling (DVFS). In this context, processor vendors often define performance states (P-states), which represent distinct pairs of voltage level and clock frequency. On recent Intel processors, DVFS techniques are included in its Enhanced Intel Speedstep Technology (EIST). EIST implements hardware control of P-states and considers workload, sensor measurements, power constraints as well as software hints when selecting P-states at run time. For configuration and hints, a software interface is provided using Model-Specific-Registers (MSR) <ref type="bibr" target="#b25">[26]</ref>, which require supervisor privileges. Hardware control of P-states can be deactivated, for instance, to allow an operating system driver to manually transition the platform to a different P-state. In Intel's Software-Developer Manual <ref type="bibr" target="#b25">[26]</ref>, a P-state is called a ratio, i.e., an 8-bit value determining the frequency when multiplied with a base clock of (typically) 100 Mhz. In this paper, we will refer to P-states with the hexadecimal representation of the ratio. For instance, P-state 0x20 (i.e., decimal value 32) represents a frequency of 3200 MHz.</p><p>Since the Skylake microarchitecture Intel introduced Hardware-Controlled Performance States (HWP). HWP offers a more fine-grained interface, i.e., the OS can define operation ranges for high-performance and energy-saving phases. In general, P-state definitions are model-specific as the matching core voltage for a particular frequency is defined by the hardware and may also be adjusted dynamically by the voltage regulators of the processor at run time.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.2">Overclocking Interfaces</head><p>Overclocking is a common operation used to maximize processor performance on x86 processors. For the enthusiast market, manufacturers release custom unlocked processor models. Paired with a suitable mainboard, users are able to adjust settings like clock multiplier, voltage levels and power limits via the interfaces of the BIOS/UEFI implementation.</p><p>As a recent development, Intel has exposed traditional BIOS features to the operating system to enable real-time overclocking. For instance, Intel's Extreme Tuning Utility (XTU) as well as ThrottleStop allow users to adjust overclocking settings like voltage levels without a reboot of the system under Microsoft Windows. Reverse engineering has revealed the use of MSR OC Mailbox (0x150) by these applications. Interestingly, the official documen- tation does not disclose this functionality. However, we find references in drivers <ref type="bibr" target="#b0">[1]</ref>, presentations <ref type="bibr" target="#b45">[46]</ref> and many mainboard manuals. We assume Intel keeps this functionality undocumented, because voltage manipulation can easily damage the hardware, and hence, requires extreme caution when applied from software.</p><p>To the best of our knowledge, MSR OC Mailbox (0x150) has the structure depicted in <ref type="figure" target="#fig_0">Figure 1</ref>. Bit <ref type="bibr" target="#b62">[63]</ref> is fixed and must be set to 1 in all writes to this MSR. Bits <ref type="bibr">[42:40]</ref> represent a hardware domain which is addressed by the command in bits <ref type="bibr">[39:32]</ref>. The lower 32 bits have a variable structure and contain the command payload. An important feature of MSR 0x150 is the ability to modify voltages. For instance, a voltage offset can be applied to the base voltage of a P-state. We found this feature to be available on all recent Intel processors. The actual voltage can be changed with 5 mV granularity. This behavior conforms to voltage regulator specifications <ref type="bibr" target="#b48">[49]</ref>, in which the voltages requests from the processor to the regulator unit are encoded in 5 mV steps. We verified this experimentally. The available set of commands appears to be dependent on the microarchitecture <ref type="bibr" target="#b45">[46]</ref>. An extended description of commands is provided in Appendix A.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.3">Intel's Machine-Check Architecture</head><p>Semiconductor manufacturers achieve feature sizes within single-digit nanometer scales while continuously decreasing power-consumption per transistor to scale up performance of the chip. Unfortunately, this also causes these platforms to be increasingly sensitive to environmental conditions, such as heat and electro-magnetic radiation. This means that random hardware errors are expected given sufficient uptime of a running system <ref type="bibr" target="#b34">[35]</ref>. For this reason, modern processor hardware features a set of intricate error-handling mechanisms to detect, correct, and potentially recover from such situations. One of these mechanisms is the Machine-Check Architecture (MCA), which was introduced by Intel starting with the P5 architecture. MCA continuously monitors individual hardware elements, such as cores, caches, interconnects and buses, integrated controllers, etc., in real-time and logs and reports any hardware-level error conditions to a set of well-defined registers. MCA offers a programmable interface which enables system software to configure and handle trigger events based on the generated alerts. Since serious error conditions may not allow system software to conduct any recovery (e.g., through controlled shutdown), MCA supports additional recovery options through external devices. However, since this mode of operation requires additional, nonstandard setup we focus on system-level recovery using MCA in this paper. In the case of Linux and Windows the OS incorporates a driver that interfaces with the MCA registers and error handlers. Error conditions can then be logged, reported, and handled through a particular class of software interrupts, called Machine-Check Exceptions (MCEs). Throughout our experiments we leveraged MCEs to aid in identifying and reverse engineering vulnerable code patterns. It is noteworthy to mention that V0LTpwn injects non-recoverable error conditions which cannot be corrected from system software, and hence, bypasses MCA.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.4">Intel Software Guard Extensions</head><p>Intel's Software Guard Extensions (SGX) <ref type="bibr" target="#b26">[27]</ref> allow developers to design hardware-protected areas, known as enclaves, that contain sensitive code. Access to enclaves is only allowed through specific entry points, known as ecalls. Unauthorized access to SGX memory, known as Enclave Page Cache, is disallowed by the processor. Bus snooping attacks, which consist in physically monitoring the memory bus to extract memory values, are mitigated through the use of memory encryption and memory integrity techniques. SGX offers local and remote attestation services.</p><p>SGX does not address side-channel attacks by design, leaving to the developer the burden of developing sidechannel resilient code. Consequently, there have been a number of works on side-channel and micro-architectural attacks <ref type="bibr" target="#b8">[9,</ref><ref type="bibr" target="#b20">21,</ref><ref type="bibr" target="#b21">22,</ref><ref type="bibr" target="#b36">37,</ref><ref type="bibr" target="#b58">59,</ref><ref type="bibr" target="#b63">64]</ref>, and side-channel defenses <ref type="bibr" target="#b3">[4,</ref><ref type="bibr" target="#b6">7,</ref><ref type="bibr" target="#b10">11,</ref><ref type="bibr" target="#b22">23,</ref><ref type="bibr" target="#b46">47,</ref><ref type="bibr" target="#b51">52,</ref><ref type="bibr" target="#b53">54]</ref>. Critically, SGX does not protect against undervolting attacks either, thus allowing V0LTpwn.</p><p>To the best of our knowledge, no previous work managed to violate the integrity of computation in an SGX enclave without resorting to software vulnerabilities.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3">The V0LTpwn Attack</head><p>In this Section we present the main principles of our V0LTpwn attack, which injects faults in SGX enclaves by undervolting the processor.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.1">Adversary Model and Assumptions</head><p>Our adversary model and assumptions are consistent with the SGX threat model. We assume:</p><p>Root access The attacker has control over a user process with root privileges. This also enables an adversary to query the target system, e.g., to learn the exact model number of the processor.</p><p>DVFS The attacker has access to software-controlled dynamic frequency scaling; all recent Intel x86 processors support it using EIST <ref type="bibr" target="#b25">[26]</ref> (see Section 2.1). Moreover, we require the firmware to allow access to MSR 0x150, which was the case for all machines we tested.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Target binary</head><p>The attacker has a copy of the intended victim program binary for offline testing. This is a common scenario in attacks against a well-known program or algorithm (e.g., crypto).</p><p>Unlike traditional fault-injection attacks, V0LTpwn requires no physical access to the target machine. Finally, V0LTpwn does not rely on any software vulnerabilities, and hence we do not need to make any specific assumption about the security of the code running on the platform (all code can be protected by defenses such as control-flow <ref type="bibr" target="#b2">[3]</ref> and data-flow integrity <ref type="bibr" target="#b9">[10]</ref>, or even formally verified).</p><p>The goal of the attacker in this setting is to tamper with the integrity of the code executing inside an SGX enclave. While loading attacker-controlled code by corrupting SGX's setup process might be viable, we note that the impact of malicious enclaves is actually limited since enclaves are completely isolated from each other. Hence, influencing execution of benign enclaves might often be more valuable for an adversary.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.2">Challenges</head><p>To implement V0LTpwn, we face the following challenges:</p><p>Symmetric Architecture Commodity multi-core processors from Intel maintain a single voltage domain that is shared between all physical cores of the system, unlike ARM cores which can be regulated independently. As a result, undervolting the core where the victim code executes also undervolts the core running the exploit, leading to potential faults in the exploit code as well. We tackle this challenge in V0LTpwn by partitioning cores and minimizing noise throughout the system (see Section 4.1).</p><p>Processor Diversity Intel's x86 processors are available for different markets ranging from laptops up to high performance server systems. Although the microarchitecture is the same, these processor models are operated with different voltage levels. We address this challenge in V0LTpwn by conducting a dedicated, offline analysis phase, for which we developed a reproducible lab setup that allows us  to apply attack parameters inferred from a different (but similar) physical machine to the victim machine (see Section 4.2).</p><p>Error Correction Unlike ARM processors, Intel processors integrate the Machine Check Architecture (MCA), which is able to correct errors which occur due to undervolting <ref type="bibr" target="#b40">[41]</ref>, as explained in Section 2.3. Our attack bypasses MCA by generating non-recoverable faults (see Section 4.3).</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Undocumented Interfaces</head><p>The hardware interfaces to adjust the voltage (Section 2.2) are undocumented. To use them, we had to rely on third-party reverse-engineered partial documentation and piece it together to develop a real-world setup running on our systems.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.3">Attack Workflow</head><p>As mentioned before, the goal of the attacker is to exploit hardware glitches in an undervolted processor to influence the execution of an SGX enclave in a controlled way. For this, the attacker needs information about the victim's binary as well as the response to undervolting of the target processor model. Both of them can be collected offline, without interacting with the target system (Phase 1 in <ref type="figure" target="#fig_1">Figure 2</ref>). Afterwards, the attacker needs to collect information about the physical cores in the target system, to detect which core is more prone to faults (Phase 2 in <ref type="figure" target="#fig_1">Figure 2</ref>). With the information from Phases 1 and 2, the attacker can choose the most appropriate core in the system and mount the attack (Phase 3 ). We will explain these phases in the following.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Phase 1: Offline Analysis</head><p>The attacker aims to determine a voltage level low enough to generate glitches without completely disrupting the operation of the CPU (exploitable voltage window). In order to determine an exploitable voltage window, the attacker progressively reduces voltage levels until faults occur, but the system does not freeze yet. During this test, the machine is likely to freeze or crash multiple times, which might be detected, if the test is performed on the target machine directly. Since the exploitable voltage window is very similar between processors of the same model, the attacker can acquire another processor of the same model and perform these initial tests on it. Moreover, the attacker should minimize the duration of undervolting to prevent crashes on the target machine. Hence, the attacker analyzes the target binary, in order to identify parts of the code most vulnerable to faults. To this end, the attacker can scan the binary for instances of known vulnerable patterns, which we describe in Section 4.3. Next, the attacker observes the execution of the target program on the attacker's identical processor, in order to estimate at which point of the execution the binary will run the fault-prone code and for how long.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Phase 2: Online Core Fault Analysis</head><p>In Phase 2, the attacker sets up the target system for undervolting and then probes each available core, one at a time, to determine the specific fault patterns of that core. As an example, the attacker can check how frequently the core under test experiences faults under various test conditions. This test must be done on the actual target machine, since every physical core produces different glitches while undervolted.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Phase 3: Attack</head><p>In the previous phases, the attacker has learned which code can be faulted and which system conditions are required to induce the fault. The attacker is now able to use this knowledge to set up the system, start the target enclave, and undervolt the processor while the enclave is running the desired code to provoke glitches in the data, thus violating the integrity of the execution.</p><p>Target System Setup The target platform needs to be configured in a fault-prone configuration, using the safe undervolting levels learned in Phase 1. Besides controlling the voltage, the attacker needs to limit all sources of noise, since the attack requires carefully balancing the voltage level slightly above the critical threshold to push it into fault-inducing territory at the right moment in time. Since unexpected events during this critical period can easily result in crashes or freezes, we organize processes such that the victim enclave is running alone on a core and disable various automatic management features of the hardware (as we describe in Section 4.1). This way, the victim enclave runs alone, with minimal interference, on a core of the attacker's choice, e.g., the most fault-prone.</p><p>Moreover, the attacker can further tweak the configuration of the processor to improve the performance of the attack. One option is to vary the temperature of the core, e.g., by running stressing code until the desired temperature is reached. Additionally, the attacker can run especially crafted code (stressor) on the logical partner of the core where the victim is executing, in order to maximize resource contention.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4">Implementation</head><p>This section presents our systematic approach to identify vulnerable conditions on Intel processors. First, we outline the testing procedure we developed to test for software-inducible faults on recent x86 platforms. Then we present how we identified vulnerable code patterns that yield reproducible bit flips on both Kaby Lake and Coffee Lake processors we tested in our lab.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.1">Attack Setup</head><p>To ensure reproducible results and prevent interference from the run-time environment (i.e., noise) we first establish a setup in which disturbances from hardware and software are reduced to a minimum (or ideally, completely disabled). In the following, we explain the individual steps to achieve that.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Controlling Voltage and Frequency</head><p>On Intel processors, the voltage and frequency are determined by the selected P-state of the cores. As the attacker, we can control them via the EIST or HWP interfaces (see Section 2.1). As a first step, we disable the operating system drivers which communicate with them. For Linux this means disabling the modules acpi_cpufreq and intel_pstate.</p><p>Second, we disable automatic hardware-based selection of P-states. In EIST, we have to set bit 0 of MSR 0x1AA to 1, which enables us to set the P-state directly using MSR 0x199. A P-state can alternatively be enforced using HWP instead of EIST (e.g., if the firmware enables it). This can then be achieved by setting the minimal, maximal, and desired P-state in MSR 0x774 to the same value. Once a P-state is set, all cores of the system are running at the same voltage level and clock frequency. Small differences are measurable because the on-die power regulation conducts small adjustments based on sensor feedback and workload <ref type="bibr" target="#b1">[2]</ref>. Having fixed a P-state, we are now able to control the voltage levels by sending commands via MSR 0x150 (OC Mailbox). Core Partitioning and Noise Reduction To ensure that the targeted core only runs the target application -with minimal interference -we partition all logical cores into two groups, attack and victim <ref type="figure" target="#fig_2">(Fig- ure 3</ref>). This can be performed using the control group feature on Linux via the cset user-space management utility. We assign one core to the attack group, while putting all the remaining physical cores in the victim group. We then migrate all running processes to the attack group to minimize noise on the cores of the victim group. This will not always result in perfect idle situations, since migration can fail, e.g., for kernel threads. This means individual cores of the victim group may still contain more than one thread.</p><p>Reducing Hardware Interference Intel processors have mechanisms deployed to ensure that thermal limits and power constraints are obeyed. In general, these mechanisms play an active role in high-performance situations by reducing the P-state. To prevent interference at higher P-states, we disable them in our setup. Specifically, we disable the Thermal Control Circuit, Thermal Interrupt Control, PP0 and PP1 power limits as well as the package counterparts in the respective MSRs <ref type="bibr" target="#b25">[26]</ref>.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.2">Undervolting x86 Processors</head><p>In the undervolting process the attacker searches for fault-prone voltage levels. Due to the shared voltage domain on x86-based platforms, we cannot target individual cores which makes containing faults within one core challenging (as opposed to, e.g., ARM-based platforms where fine-grained DVFS allows undervolting physical cores within their own voltage domain <ref type="bibr" target="#b43">[44,</ref><ref type="bibr" target="#b54">55]</ref>). Hence, our implementation makes use of a software-based approach which relies on two principles: core isolation and selective probing. Core isolation is established through our system setup as explained in the previous section. Selective probing means that only one test core is executing </p><note type="other">; 7 if ( reference != result ){ 8 print_difference ( reference , result ); 9 exit; 10 } 11 } Listing 1: Pseudo-code of our automated testing procedure. 1 _loop : 2 push % r10 ; 3 vpsllq % xmm3 , % xmm4 , % xmm6 4 vpsllq % xmm3 , % xmm5 , % xmm7 5 pop % r10 ; 6 jmp _loop ;</note><p>Listing 2: Code of our most effective stressor.</p><p>candidate programs while the system core increasingly undervolts and collects information about possible fault occurrences. Moreover, our setup establishes temperature differences between the cores. The idle cores have the lowest temperature. As the victim core is constantly executing code, it has the highest temperature. Additionally, we use stressors on the logical partner core to further increase the temperature. The temperature of the attack core is lower than the victim core; since we want to keep it as low as possible, the logical partner of the attack core is kept idle.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Test Programs</head><p>We developed a set of test programs, which are based on the concept in Listing 1. The idea is to have conditional checks on deterministic results which stop execution when a deviation has been detected. First, we deterministically compute a reference result on Line 2. This step is conducted at normal operation voltage. Next, we execute the same computation but in a loop and using an undervolting setup. In each iteration we compare the reference output with the output of the previous iteration. Since the input is fixed and the target instructions perform deterministic operations on that input, any differences from the reference results indicates that a fault has corrupted the result.</p><p>Stressors In order to stress the undervolted components of the CPU, we looked for instruction sequences to execute on the logical partner of the target core. While the faults still happen frequently without stressors and even with hyperthreading disabled, we find that a good stressor improves the likelihood of faults. The best- performing stressor we found is in Listing 2. This stressor was deployed and running in all of our experiments.</p><p>Fault Detection In addition to the test programs, we relied on two more sources that indicated to us, when a fault occurred. First, the Machine Check Architecture (MCA), which delivers meta information about corrected and uncorrected faults in MSR. During our testing we monitored the respective MSR with existing tools like mcelog. For information about uncorrected errors, we were required to edit the MCE handler, either by dynamically instrumenting it or by compiling our own kernel. Second, we monitor the operating system for processor exceptions like Invalid Opcode or General Protection. These exceptions might for instance be raised if the induced fault tampers with instruction decoding and therefore leads to the processor executing instructions that are not part of the correct code.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.3">Bit flips in SIMD Memory Transfer</head><p>In <ref type="figure" target="#fig_4">Figure 4</ref>, we depict the observed behavior of the processor while it undergoes undervolting. As the voltage decreases, the processor starts to experience some errors that the MCA is able to correct <ref type="bibr">(Corrected Er- rors)</ref>. At a lower voltage, the system becomes unstable; the processor starts encountering hardware exceptions in interrupt handlers. However, between these two re-gions we encounter an exploit window, i.e., a voltage level where the processor experiences uncorrected bit flips that the MCA does not detect, but the system is still stable enough. In order to explore the exploit window, we implemented the concept in Listing 1 with common encryption algorithms like AES and Twofish. The programs continuously encrypt the same buffer and do not lead to faults under nominal voltage conditions. In our test setup, we executed the programs at different P-states while undervolting the core domain. We found some of the programs to be susceptible to faults when reaching specific voltage levels. This means that the comparison on Line 7 of Listing 1 revealed a difference in the computed results due to flipped bits in the output buffer. As depicted in <ref type="figure" target="#fig_4">Figure 4</ref>, the exploitable voltage level is located approximately 5 mV above the point, where the system starts to become unstable (e.g., due to exceptions in the kernel).</p><p>By manually analyzing the programs, we found the fault to affect two particular code patterns of SSE/AVX instructions:</p><p>VP1 a parallel logic (e.g., xor) operation, followed by a move instruction from a vector register to memory, and VP2 a parallel add operation, followed by a move instruction from a vector register to memory. An instance of the pattern VP1 is presented in Listing 3. On Line 2 of Listing 3, the exclusive OR (XOR) of registers xmm1 and xmm2 is computed and the result is stored in register xmm3. On Line 4 the value of this register is moved to memory, which in this case is indirectly addressed by a pointer in the register rsp.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5">Attacking SGX Enclaves</head><p>In the following we describe two different attack scenarios: first, our initial proof-of-concept attack that exploits bit flips induced through undervolting in an enclave. Second, we present an attack against a real-world SGX crypto library developed by Intel.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5.1">From Bitflips to Attacks in SGX</head><p>We will now discuss how we leveraged the bit flips we discussed in Section 4.3 for the V0LTpwn attack. To illustrate the impact of bit flips on an SGX enclave, we start by considering some simple example code which first processes some input in memory and then branches execution based on the result. We provide a stripped down version of the relevant parts of the code in Listing 4, highlighting the most important parts in the form of inline assembly for clarity. In our example, the variables a, b, and r represent 128-bit vectors encoding a particular 1 unsigned long a <ref type="bibr" target="#b1">[2]</ref>={ ULLONG_MAX , ULLONG_MAX }; 2 unsigned long b <ref type="bibr" target="#b1">[2]</ref>={ ULLONG_MAX , ULLONG_MAX }; 3 4 unsigned long r <ref type="bibr" target="#b1">[2]</ref>; 5 6 __asm__ __volatile__ ( 7 " vmovdqu %1 , %% xmm10 ;" 8 " vmovdqu %2 , %% xmm11 ;" 9 " vpand %% xmm10 , %% xmm11 , %% xmm12 ;" 10 " vmovdqu %% xmm12 , %0; " 11 :: "m" (* r) , "m" (* a), "m" (* b) 12</p><p>: "% xmm10 " ,"% xmm11 " ,"% xmm12 " , " memory " ); program value (in this case ULLONG_MAX which causes every bit to be set to 1).</p><p>First, the enclave loads the two values a and b from memory into registers xmm10 and xmm11 respectively. The enclave then performs a logical AND of the values a and b through the instruction on Line 9. It copies the result back to memory (i.e., variable r) on Line 10. Next, enclave execution checks the result against the ULLONG_MAX value on Line 14. In theory, this means that control flow should never reach Line 17 in this particular example. We would like to reiterate that this example code does not suffer from any software bugs and under normal circumstances enclave execution will always take the if branch on Line 15. However, using our fault injection attack we were able to force enclave execution into taking the else branch on Line 17 instead. We were able to perform this attack with up to 99% success rate: we provide detailed evaluation results about fault-inducing parameters and reliability of this particular exploit scenario in Section 6.3. Next, we are going to demonstrate how bit flips can be exploited in real-world SGX code.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5.2">Attacking Real-World SGX Code</head><p>Implementation of multiple cryptographic ciphers are prone to our fault injection attacks, including OpenSSL and the crypto API of the Linux kernel. Hence, we demonstrate the feasibility of real-world V0LTpwn attacks by targeting an enclave running Intel's OpenSSL SGX library, which represents real-world crypto code that is specifically designed and intended to run inside an SGX enclave. We linked its latest <ref type="bibr">Linux</ref>   <ref type="table">Table 1</ref>: Success rates of our attack to the OpenSSL HMAC implementation. We ran every test 5 times and report the average number of successes per 10 000 tries and the related standard deviation (σ), for every core and payload size. In addition to absolute voltage levels, we present the offsets applied to MSR 0x150. We found that required voltage offsets can vary slightly, as base voltage depends on a number of factors, such as active C-states, workload, as well as temperature. authentication code (HMAC) using the cryptographic hash function SHA256. We evaluated this attack on a Core i7-7700K and a Core i7-8700K processor. The microarchitecture of the former is Kaby Lake, that of the latter is Coffee Lake. We evaluated different message sizes and physical cores, while running the stressor from Listing 2 on the logical partner core. The results are summarized in <ref type="table">Table 1</ref>, which reports the expected number of successes per 10 000 tries and the related standard deviation. For every core we conducted five independent test runs with two different message sizes (32B and 1KB). The adversary can reliably induce faults during hash computation on at least one physical core for each processor (namely core 1 for the 7700K and core 0 for the 8700K). An attacker utilizing these cores is able to induce faults in up to 34% of the HMAC validations on the 7700K and up to 99% on the 8700K. The other cores on the 7700K are unable to function at the same low voltage as core 1, while faults are rare at higher voltages. On the 8700K, cores 2 and 4 can function at the same low voltage as core 1 or even lower, but they only have a success rate of up to 30% and 16% respectively.</p><p>All in all, this shows that benign, real-world enclave code is susceptible to faults that can be provoked from software. This can be especially devastating from a security perspective during secret key generation. Since the computational security of public-key cryptography relies on the assumption that some mathematical problem is computationally hard, flipping a bit in one of the intermediate results could potentially weaken the security of the underlying cipher to enable real-world brute-forcing attacks. <ref type="bibr" target="#b1">2</ref> Further, a number of recent works leverage TEEs to implement higher-level smart contract protocols <ref type="bibr" target="#b11">[12,</ref><ref type="bibr" target="#b12">13]</ref> or multi-party computation <ref type="bibr" target="#b17">[18,</ref><ref type="bibr" target="#b41">42]</ref>. Both of these use cases depend heavily on cryptography and we expect them to be highly affected by the V0LTpwn attack.</p><p>In this section, we evaluate our V0LTpwn attack. In particular, we analyze at which voltage levels faults occur, how they manifest in memory (e.g., with respect to locality), and how reliably bit flips can be exploited within SGX.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="6.1">Tested Platforms and Configurations</head><p>For the evaluation we used multiple Intel processors from different generations. In detail, we used the i7-7700 and i7-7700K with the Kaby Lake microarchitecture and the i7-8700K from the Coffee Lake generation 3 .</p><p>We conducted preliminary testing on these platforms which we found to be prone to non-recoverable, softwareinduced processor faults due to undervolting. Our platforms are running the official Intel SGX SDK, PSW and drivers in version 2.5 released in May 2019 for Ubuntu 18.04 (minimal installation).</p><p>We created an example SGX enclave which we build in Hardware-PreRelease mode.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="6.2">Fault-Inducing Voltage Level</head><p>To demonstrate that bit flips can be reproduced at arbitrary P-states, we evaluated the set {0x8, 0x10, 0x1B, 0x20, 0x24, 0x2A} on our test processors. We used the same setup as described in Section 4 and executed a program containing the vulnerable code pattern (Listing 3) on every core. For every run, we measured the earliest fault-prone voltage level. In <ref type="table" target="#tab_3">Table 2</ref>, we present the results for the i7-7700K processors. In general, we observe that every P-state has custom fault-prone voltage levels. Depending on the P-state, the voltage offset, which has to be applied to MSR 0x150, ranges between 250 mV and 300 mV. For every P-state, we measure differences of 5 to 10 mV between the cores.</p><p>Repeating the same procedure on the other processors yields the same observations. However, every processor model has individual fault-prone voltage levels. We assume the cause lies in variations in the manufacturing process and source materials. Regarding the V0LTpwn attack, the result implicate that an attacker has to adapt the attack parameters for every target processor.   <ref type="figure">Figure 6</ref>: Reliability results of our proof-of-concept on the i7-7700K processor: success rate of the PoC exploit in Listing 4.</p><note type="other">0x1B 45°C 0x20 50°C 0x24 53°C 0x1B 43°C Core 0, Twofish stressor Core 1, Twofish stressor Core 2, Twofish stressor Core 3, Twofish stressor Core 0, Listing 2 stressor Core 1, Listing 2 stressor Core 2, Listing 2 stressor Core 3, Listing 2 stressor</note></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="6.3">Evaluation of the Control-flow Deviation PoC</head><p>We evaluated our proof-of-concept control flow deviation exploit (described in Section 5.1) on all cores of our i7-7700K processor, spanning the whole range of available P-states. We created an SGX enclave which runs the code in Listing 4 10 000 times. We then tried running the enclave in various undervolted environments for 100 000 times. <ref type="figure">Figure 6</ref> shows the success rate of the attack, i.e., the percentage of runs in which the different branch was executed in Listing 4. We tested two different stressors: the stressor from Listing 2 and an AVX implementation of the Twofish cipher <ref type="bibr" target="#b24">[25]</ref>. The best-performing stressor is the code from Listing 2; while using this stressor, cores 1, 2, and 3 achieved success rates of 99%, 96% and 99% respectively at 700 mV and P-state 0x1B. Using the Twofish code as a stressor, we could only achieve up to 8% success rate on core 1 at P-state 0x1B, 6% at P-state 0x20, and 2.5% on P-state 0x24. Cores 2 and 3</p><note type="other">0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15</note><p>Byte in a 128-bit word 7700, c0 7700, c1 7700, c2 7700, c3 7700K, c0 7700K, c1 7700K, c2 7700K, c3 8700K, c0 8700K, c1 8700K, c2 8700K, c3 8700K, c4 8700K, c5</p><p>Processor model and core id <ref type="table" target="#tab_3">102  1  990  2  15  3  34  1  49  93  269  12  975  11  16  12  4  141  1  8  92  9  833  724  94  16  12  908  6  206  42  7  913  153  10  1000  6  2  33  151  915  16  4  999  2  999  10  59  26  3  998  998  998  998  1000  998  998  998  998  998  998  998  998  998  998  998  72  218  4  816  15  1  11  477  2  1000  1  7  499  912  16  1  196  10</ref>  reached a success rate of 2.5%. Core 0 did not show a significant number of faults.</p><p>We could only obtain faults in P-states between 0x1B (2700 MHz) and 0x24 (3600 MHz). Lower P-states yield practically no successful attacks but only lead to recoverable errors. This is reasonable, since a lower P-state effectively means that the processor is running at a lower frequency (e.g., 800 MHz for P-state 0x8 and 1600 MHz for P-state 0x10), and hence, requires overall less power to execute instructions. Therefore, lowering the voltage supply is not an effective measure to produce faults on the lower frequency domain -at least not within the limits available from software. Pushing the system towards the high frequency limits did not produce better exploit reliability after a certain point. While perhaps counter-intuitive at first, this can be explained by two facts: first, higher frequency domains naturally require higher voltage levels. This means that the base voltage that is supplied to the cores in that state will be higher. However, the voltage offset the attacker is able to set to reduce the voltage supply from software is limited to a fixed range, and hence, affecting core voltage from software in this way is less effective in the higher frequency domain. Second, it has been known for a long time that hardware becomes generally less stable as clock frequency increases <ref type="bibr" target="#b50">[51]</ref>. This means, any physical effect interfering with normal processor execution has more severe consequences for the overall system at higher clock frequencies. For instance, in our tests we observed that the system will more easily produce a hard crash than issue machine-check exceptions in the higher frequency domain. <ref type="table" target="#tab_3">i7-7700   0  905  83  12  1  709  199  92  2  405  444  151  3  855  122  23   i7-7700K   0  934  66  0  1  988  7  5  2  912  67  21  3</ref>   <ref type="table">Table 3</ref>: Breakdown of 1000 faults on various cores and processors: for every core, the table shows how many faults led to one bit flip, two bit flips, and three or more bit flips</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Processor Core 1 BF 2 BF 3+ BF</head></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="6.4">Fault Manifestation</head><p>Being able to induce faults in a reproducible way from software allowed us to study the behavior and details behind the generated faults. We analyzed the faults with regards to their position on our three processors: i7-7700, i7-7700K, and i7-8700K. We made several interesting observations: first, all faults we observed manifested as bit flips in the result of computation or memory transfers. Second, bit flips affected different byte positions within the respective 128-bit word used by the faulting instructions ( <ref type="figure">Figure 7)</ref>. Since the minimal, vulnerable instruction patterns VP1 and VP2 utilize vector operations, we focused on 128-bit words used by AVX instructions in our subsequent analysis. Our tests show that faults are significantly more likely for certain byte positions, while other locations were never affected. The affected bytes are different for each physical core we tested: for instance, on core 3 of the 8700K faults were heavily localized within byte 4, while the remaining cores were affected by bit flips throughout several different byte positions. In contrast to this, core 1 was affected by bit flips within all byte position. Interestingly, the number of bit flips produced per fault also varied between cores (Table 3). On the 7700K, physical cores were likely to yield only a single bit flip, while on the 7700 we observed a larger number of multi-bit errors. On the 8700K, we observed both single-bit and multi-bit faults.</p><p>Perhaps most crucially, the affected byte locations remained stable for a given physical core: the bit flip positions were reproducible on each core at different times and also consistent across different P-states.</p><p>Being able to compromise the integrity of computations is a powerful tool in the hands of software adversaries. So far, we were able to confirm successful fault-injection attacks from software against certain vulnerable code patterns, which have to be part of the victim code (Listing 3). These susceptible pieces of code we identified are naturally used in many implementations, e.g., to optimize the performance using SIMD instructions.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="7.1">Fault-Susceptible Instructions</head><p>We also conducted another series of tests using nontemporal instructions, such as movnti and movntq followed by an sfence instruction as replacement. These non-temporal instructions bypass the caches and access memory directly. Our results showed that we still were able to achieve reproducible bit flips and the patterns did not change due to non-temporal move instructions. We conclude that bit flips in the result must have been introduced by the physical core as opposed to one of the caching structures, e.g., execution units, the register file, read or write buffers, or possibly one of the buses.</p><p>In our analysis we identified the respective, susceptible vector operations in many real-world implementations of cryptographic algorithms. As we demonstrate, we were able to exploit these fault-susceptible instruction patterns to achieve memory corruption in the absence of software vulnerabilities by undervolting the processor.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="7.2">Other Attack Scenarios</head><p>In this paper we demonstrated attacks against SGX enclaves, however, other attack scenarios might be viable within our threat model. For instance, an adversary might try to break Mandatory Access Control on <ref type="bibr">SELinux [39]</ref> or other LSMs, which restrict and separate privileged user-space access from kernel access, or System Management Mode (SMM) code, which runs at a even higher privilege level than the kernel. Further, during our testing we noticed that the voltage setting through MSR 0x150 remains in place after rebooting the system (i.e., through warm reset). This opens up the possibility of targeting bootloader code, which typically represents the root of trust on modern platforms.</p><p>Another interesting aspect is that we occasionally observed the Invalid Opcode processor exception while undervolting our testing code. This exception is usually raised if the processor encounters a malformed instruction. However, since our testing code only contained valid, well-formed instructions, this exception must have been introduced by our undervolting. The MCA logs confirmed this observations by reporting instruction decode corrected errors, leading us to conclude that it is possible to tamper with instruction decoding through undervolting in principle. However, we leave an in-depth investigation of this to future work.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="7.3">Mitigations</head><p>We responsibly disclosed our findings to Intel, which developed and recently released a mitigation against malicious CPU voltage setting modification, consisting of two parts: (1) a BIOS patch that includes a setting to enable or disable the overclocking mailbox interface configuration, and (2) a microcode update that adds the current state of this setting to the SGX TCB attestation. As a result, Intel's Attestation Service will only accept updated platforms with access to MSR 0x150 disabled.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="7.4">Other Platforms</head><p>Currently, our attack focuses on Intel processors (which support SGX) and we did not test or evaluate our attack on AMD systems. While confidentiality of Intel processors has been attacked in many prior publications, V0LTpwn is -together with concurrent work <ref type="bibr" target="#b37">[38,</ref><ref type="bibr" target="#b44">45]</ref> the first successful attack on processor integrity for the x86 platform.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="8">Related Work</head><p>Related attacks have been demonstrated against ARMbased devices previously <ref type="bibr" target="#b43">[44,</ref><ref type="bibr" target="#b54">55]</ref> and a number hardwareoriented side-channel attacks were published recently for x86 which do not involve fault injection. Further, concurrently to our work, Murdock et. al. and Qiu et. al present similar attacks, Plundervolt <ref type="bibr" target="#b37">[38]</ref>, and the SGX version of VoltJockey <ref type="bibr" target="#b44">[45]</ref>, both of which also abuse the MSR 0x150 to inject faults in SGX enclaves. They describe faults in the integer multiplication and AES instructions, while our work describes faults in vector instructions (which we suspect are the root cause for the AES faults). While both focus on confidentiality by leaking cryptographic key material, V0LTpwn demonstrates control-flow deviation during enclave execution. Moreover, we analyzed desktop processors, while these works focus on laptop processors. Finally, neither Plundervolt nor VoltJockey investigate the effect of stressors, temperature, or spatial locality of bit flips.</p><p>In this Section we first elaborate how V0LTpwn compares to related attacks that were presented previously. Second, we present a quick overview of the related tools and methods for conducting fault-injection attacks from software.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="8.1">Hardware-Oriented Exploits</head><p>For a direct comparison, we only focus on hardware attacks that are within the scope of our threat model, i.e., attacks that do not require physical presence but can be launched remotely from software.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="8.1.1">Software-Controlled Fault Injection</head><p>The CLKScrew <ref type="bibr" target="#b54">[55]</ref> attack first demonstrated that sophisticated power-management APIs on some ARM-based devices allow an adversary to induce faults in the processor entirely remotely. These findings were recently reproduced independently by the TrustZone version of VoltJockey <ref type="bibr" target="#b43">[44]</ref>. In both cases, the authors were able to break the TrustZone isolation boundary on a Nexus 6 smartphone. Unfortunately, the techniques used to conduct undervolting attacks on ARM are not transferable to x86-based platforms for several reasons: first, both Tang et al. and Qiu et al. found core voltage and frequency to be exposed directly to software, with practically no limitations or restrictions imposed by the ARM architecture besides root access. This means, the attacker is able to freely choose practically arbitrary combinations of frequency and voltage pairs, allowing them to construct and apply utterly unsafe settings entirely from software to conduct their attack. By contrast, the x86 platform offers only a fixed, pre-defined list of selected P-states that are extensively tested for their safety margins and common operating conditions by the manufacturer prior to release. Hence, the attacker is constrained to use one of these hand-picked frequency voltage pair definitions to conduct a V0LTpwn.</p><p>Second, Intel deploys the Machine-Check Architecture to explicitly check for and recover from hardware faults at run time. Since Machine-Check Exceptions originating from any core are broadcast to all cores, certain hard glitches can effectively be converted into soft errors onthe-fly on x86 and our evaluation shows that the attacker has to push the victim core beyond a certain threshold to ensure successful faults and exploitation. Further, individual hardware components such as the caches and the core have to be undervolted in lock-step for any changes to take effect on x86. This means that faults generated from any other of these other components contribute to the early warning mechanism employed by the Machine-Check Architecture. No such safety net exists on ARM, significantly facilitating reliability of faults and reproducible exploit scenarios.</p><p>Third, the core pinning technique introduced by Tang et al. <ref type="bibr" target="#b54">[55]</ref> ensures that faults are contained within a chosen physical core, making it straightforward to launch attacks against a target core from one of the running system cores as an attacker. This technique works since each core can effectively operate in its own P-state on ARM. On x86 all physical cores operate within the same P-state, which means that the same voltage settings apply to the attacker as well as the victim core, and hence, faults cannot simply be contained to any given core. This is why we introduce several novel techniques to ensure an overall stable system while being able to force the victim core into a fault-provoking power domain on x86.</p><p>Lastly, since power-management is one of the key driving factors on mobile devices the related low-level APIs and involved hardware mechanisms are extensively documented and tooling is readily available, or even built into the existing platform software <ref type="bibr" target="#b43">[44,</ref><ref type="bibr" target="#b54">55]</ref>. On x86 practically no official documentation regarding lowlevel power management of the platform exists, making it hard to develop custom tools and even conducting simple tests usually involves costly reverse engineering of microarchitectural features, which can also differ between the many processor generations.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="8.1.2">Rowhammer</head><p>Rowhammer attacks <ref type="bibr" target="#b31">[32]</ref> are similar in nature to CLKScrew <ref type="bibr" target="#b54">[55]</ref> and V0LTpwn in so far as they generate hardware faults from software that are also exploitable <ref type="bibr" target="#b5">[6,</ref><ref type="bibr" target="#b23">24,</ref><ref type="bibr" target="#b30">31,</ref><ref type="bibr" target="#b42">43,</ref><ref type="bibr" target="#b47">48,</ref><ref type="bibr" target="#b49">50,</ref><ref type="bibr" target="#b55">56,</ref><ref type="bibr" target="#b59">60,</ref><ref type="bibr" target="#b62">63]</ref>. However, the main difference from our work is that Rowhammer affects DRAM, which is widely used for implementing the memory modules on off-the-shelve computing hardware. This means Rowhammer attacks cannot affect memory inside the processor, such as cached memory and register values. In contrast to this we show that V0LTpwn directly impacts in-processor values and can also divert control flow. Additionally, while several countermeasures <ref type="bibr" target="#b4">[5,</ref><ref type="bibr" target="#b7">8,</ref><ref type="bibr" target="#b55">56,</ref><ref type="bibr" target="#b60">61]</ref> have been proposed to mitigate Rowhammer from software, no defenses currently exist to counter processor-based fault injection attacks.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="8.1.3">Speculative Execution</head><p>Recently, several works independently demonstrated that speculative execution (a processor feature to speed up execution by increasing instruction-level parallelism) could be exploited from software on certain platforms to extract information through a side channel <ref type="bibr" target="#b32">[33,</ref><ref type="bibr" target="#b35">36,</ref><ref type="bibr" target="#b57">58,</ref><ref type="bibr" target="#b61">62]</ref>. Unlike attacks based on speculative execution remote-fault injection attacks are not limited to information disclosure, but directly affects the systems integrity, allowing an adversary to manipulate data as well as execution.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="8.2">Analyzing x86 Internals</head><p>Earlier work by Pandit et al. <ref type="bibr" target="#b39">[40]</ref> analyzed voltage offsets with regards to safe operation limits, with a focus towards increased processor performance. In that context, they analyzed error handling of the Machine Check Architecture on AMD processors and found that during undervolting they were able to operate it beyond safe operation points. They also observed corrected machine check errors when reaching a threshold voltage offset and showed an increased error rate at higher CPU utilization.</p><p>Another study by <ref type="bibr">Papadimitriou et al. [41]</ref> investigated voltage offsets on mobile and desktop processors from Intel. They used standard benchmarks to stress cores while applying voltage offsets with Intel's XTU application and found that voltage can be decreased up to 15% while keeping the system in an overall stable condition. They observed differences in safe voltage offsets for the analyzed processor models and calculated that safe undervolting can lead to an increased energy-efficiency of up to 20% and temperature reductions of up to 25%.</p><p>More recently, Koppe et al. <ref type="bibr" target="#b33">[34]</ref> presented a framework to analyze as well as synthesize x86 microcode on certain (older) platforms. Christopher Domas presented initial results on reverse engineering the x86 hardware platform and published several tools <ref type="bibr" target="#b14">[15,</ref><ref type="bibr" target="#b15">16]</ref> to automatically uncover certain aspects and features (including undocumented MSRs). Domas also discovered hardware backdoors through hidden modes on certain VIA x86 processors using those tools.</p><p>Researchers from Positive Technologies achieved remote code execution on Intel's Converged Security and Management Engine (Intel CSME) in 2018 <ref type="bibr" target="#b18">[19]</ref>. Intel CSME runs on a separate physical chip from the host CPU (but is located within the SoC package) and remains powered on and connected to the systems peripherals even when the main CPU is in deep sleep. Intel CSME has full platform access, drives all security-related tasks on modern Intel SoCs (including SGX, TXT, AMT) and was recently found to include a logic analyzer dubbed Intel VISA <ref type="bibr" target="#b19">[20]</ref>, revealing how Intel patches hardware vulnerabilities in microcode. A recently disclosed boot ROM bug in CSME-enabled chips prior to Ice Lake allows for escalation of privilege, denial of service, and information disclosure <ref type="bibr" target="#b28">[29]</ref>.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="9">Conclusions</head><p>In this paper we introduced V0LTpwn, a novel softwarecontrolled fault-injection attack that leverages frequency and voltage control interfaces to compromise the integrity of x86 processors. We find and discuss multiple code patterns that are prone to bit flips and are commonly used in crypto code. We show that V0LTpwn can generate faults in real-world OpenSSL code running in an SGX enclave with a success rate of up to 99%. We analyze the success rate of V0LTpwn over a variety of parameters.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>A OC Mailbox Interface</head><p>In <ref type="table">Table 4</ref> we list the possible domain and command encodings that are known to us. Not all x86 platforms are designed for overclocking, so the commands may not be available on all systems. However, we found the voltage read/write commands 0x10/0x11 to be present in all newer mobile and desktop platforms. The write command is used to modify the voltage of the domain unit and is present in the two modes offset (0x) and static (0x1), which can be selected by bit <ref type="bibr" target="#b19">[20]</ref> of the payload. The offset mode applies the offset value located in the bits <ref type="bibr">[31:21]</ref> to the voltage of the domain. The offset is encoded as an 11 bit signed value, allowing a theoretical offset range from -1024 mV to 1023 mV. For the domain Core (0x0), the offset is applied to the base Domain <ref type="bibr">[42:40]</ref> Command <ref type="bibr">[39:32]</ref> 0x0 Cores 0x10 Read Voltage Change 0x1 Core GPU 0x11 Write Voltage 0x2 LLC/Ring 0x3 System Agent <ref type="table">Table 4</ref>: Relevant domain and command encodings for using MSR OC Mailbox (0x150) from software.</p><p>voltage of every P-state. As an example, writing the value 0x80000011f3800000 to the OC Mailbox MSR, will apply an offset of -100 (0xf38) mV to every P-state.</p><p>In static mode, the domain voltage can be set to a fixed value that is encoded in the bits <ref type="bibr">[19:8]</ref> of the payload. This 11 bit unsigned value is divided by 1024 by the hardware, allowing to set a static voltage from 0 to 2V. In the rest of the paper, only the offset mode is used to control the voltage. When we use the term undervolting we mean applying a negative offset via this command through the MSR OC Mailbox (0x150). We would like to emphasize again that any details related to MSRs can in principle depend on the micro-architectural generation and model version of the processor.</p></div><figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_0"><head>Figure 1 :</head><label>1</label><figDesc>Figure 1: MSR OC Mailbox (0x150) is used to adjust voltage levels from software, including applications such as Intel's Extreme Tuning Utility (XTU) and ThrottleStop.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_1"><head>Figure 2 :</head><label>2</label><figDesc>Figure 2: Overview of the V0LTpwn attack.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_2"><head>Figure 3 :</head><label>3</label><figDesc>Figure 3: Core partitioning for V0LTpwn, in order to minimize noise and maximize resource contention on the target program.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_4"><head>Figure 4 :</head><label>4</label><figDesc>Figure 4: Processor behavior when exposed to reduced voltage. The voltage levels are only for illustrative purposes, since they vary according to processor model and P-state. 1 // logical vector operation 2 vpxor % xmm1 , % xmm2 , % xmm3 3 // data transfer to memory 4 vmovdqu % xmm3 , (% rsp ) Listing 3: An instance of the vulnerable pattern VP1.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_5"><head></head><label></label><figDesc>Listing 4: The enclave code used in our control-flow deviation PoC.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_6"><head>Figure 5 :</head><label>5</label><figDesc>Figure 5: Success rate of our OpenSSL HMAC attack on various cores. The top graph refers to a payload size of 32B, the bottom one 1KB.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_7"><head>449 887 Figure 7 :</head><label>4498877</label><figDesc>Figure 7: Heat map of the location of bit flips inside a 128-bit word, for 1000 faults on each core of each processors.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_1" validated="false"><head></head><label></label><figDesc>library version 1 against an enclave that validates a hash-based message</figDesc><table>Processor Core 

Target core start 
temperature (°C) 

Voltage 
(V) 

Offset 
(mV) 
32B payload 
1KB payload 

i7-7700K 

0 
40 
0.705 
-245 
24.8 (σ=24.4) 
0.0 (σ=0.0) 
1 
40 
0.700 
-250 
1795.6 (σ=1096.5) 1983.8 (σ=364.2) 
2 
40 
0.710 
-240 
821.2 (σ=321.0) 
745.2 (σ=148.8) 
3 
40 
0.710 
-240 
283.6 (σ=119.9) 
235.2 (σ=51.6) 

i7-8700K 

0 
47 
0.760 
-245 
9621.6 (σ=146.7) 9548.7 (σ=314.4) 
1 
47 
0.765 
-275 
35.2 (σ=15.9) 
1320.2 (σ=243.3) 
2 
47 
0.755 
-285 
2675.6 (σ=195.1) 
119.4 (σ=28.2) 
3 
47 
0.765 
-270 
0.0 
(σ=0.0) 
4.6 (σ=9.2) 
4 
47 
0.760 
-275 
1496.8 (σ=148.1) 
1552.8 (σ=189.5) 
5 
47 
0.765 
-245 
57.4 (σ=114.3) 
0.0 (σ=0.0) 

</table></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_3" validated="false"><head>Table 2 :</head><label>2</label><figDesc></figDesc><table>Fault-prone voltage levels (V) for different P-
states and cores of i7-7700K processor. 

700 
725 
750 
775 
800 
825 
850 
Core voltage (mV) 

0% 

20% 

40% 

60% 

80% 

100% 

Success rate 

</table></figure>

			<note place="foot" n="1"> Branch lin_2.5_1.1.1c of the repository at https://github. com/intel/intel-sgx-ssl.</note>

			<note place="foot" n="2"> Further attack possibilities include denial of service when encrypting data, such that decryption becomes impossible due to a faulty key being used by the enclave.</note>

			<note place="foot" n="3"> Intel uses Stepping codes to differentiate between different revisions of a microarchitecture. Our Kaby Lake processor has Stepping 9 and our Coffee Lake has Stepping 10.</note>
		</body>
		<back>

			<div type="acknowledgement">
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Acknowledgements</head><p>We would like to thank Mike Polowski and the entire Intel Product Security Incident Response team for swift and efficient coordination of the issue. Intel assigned a CVE <ref type="bibr" target="#b56">[57]</ref> and released an advisory <ref type="bibr" target="#b29">[30]</ref> regarding software-based undervolting attacks via MSR 0x150 as described in this paper.</p><p>This work was partially funded by the Deutsche Forschungsgemeinschaft <ref type="figure">(</ref> </p></div>
			</div>

			<div type="references">

				<listBibl>

<biblStruct xml:id="b0">
	<monogr>
		<title level="m" type="main">Intel turbo boost max technology 3.0 legacy (non HWP) enumeration driver</title>
		<ptr target="https://github.com/torvalds/linux/blob/master/drivers/platform/x86/intel_turbo_max_3.c" />
		<imprint>
			<date type="published" when="2018-09" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b1">
	<monogr>
		<title level="m" type="main">Skylake (client) -microarchitectures -Intel</title>
		<ptr target="https://en.wikichip.org/wiki/intel/microarchitectures/skylake_(client" />
		<imprint>
			<date type="published" when="2019-05" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b2">
	<monogr>
		<title level="m" type="main">Control-flow integrity</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Abadi</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Budiu</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">U</forename><surname>Erlingsson</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Ligatti</surname></persName>
		</author>
		<imprint>
			<biblScope unit="page" from="340" to="353" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b3">
	<analytic>
		<title level="a" type="main">Obfuscuro: A commodity obfuscation engine on Intel SGX</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Ahmad</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">B</forename><surname>Joe</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Y</forename><surname>Xiao</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Y</forename><surname>Zhang</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">I</forename><surname>Shin</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Lee</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">B</forename></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Annual Network and Distributed System Security Symposium</title>
		<imprint>
			<date type="published" when="2019" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b4">
	<analytic>
		<title level="a" type="main">Anvil: Software-based protection against next-generation Rowhammer attacks</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Z</forename><forename type="middle">B</forename><surname>Aweke</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><forename type="middle">F</forename><surname>Yitbarek</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Qiao</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Das</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Hicks</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Y</forename><surname>Oren</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Austin</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the Twenty-First International Conference on Architectural Support for Programming Languages and Operating Systems</title>
		<meeting>the Twenty-First International Conference on Architectural Support for Programming Languages and Operating Systems</meeting>
		<imprint>
			<publisher>ACM</publisher>
			<date type="published" when="2016" />
			<biblScope unit="page" from="743" to="755" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b5">
	<analytic>
		<title level="a" type="main">Dedup est machina: Memory deduplication as an advanced exploitation vector</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">E</forename><surname>Bosman</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">K</forename><surname>Razavi</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">H</forename><surname>Bos</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><surname>Giuffrida</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">37th IEEE Symposium on Security and Privacy</title>
		<imprint>
			<date type="published" when="2016" />
		</imprint>
	</monogr>
	<note>S&amp;P</note>
</biblStruct>

<biblStruct xml:id="b6">
	<analytic>
		<title level="a" type="main">Automated and adjustable side-channel protection for SGX using data location randomization</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">F</forename><surname>Brasser</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Capkun</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Dmitrienko</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><surname>Frassetto</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">K</forename><surname>Kostiainen</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A.-R</forename><forename type="middle">Dr</forename><surname>Sadeghi</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Sgx</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">35th Annual Computer Security Applications Conference (ACSAC)</title>
		<imprint>
			<date type="published" when="2019-12" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b7">
	<analytic>
		<title level="a" type="main">Can&apos;t touch this: Software-only mitigation against Rowhammer attacks targeting kernel memory</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">F</forename><surname>Brasser</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">L</forename><surname>Davi</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Gens</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><surname>Liebchen</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A.-R</forename><surname>Sadeghi</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 26th USENIX Security Symposium</title>
		<meeting>the 26th USENIX Security Symposium<address><addrLine>Vancouver, BC, Canada; Sec</addrLine></address></meeting>
		<imprint>
			<date type="published" when="2017" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b8">
	<analytic>
		<title level="a" type="main">Software grand exposure: SGX cache attacks are practical</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">F</forename><surname>Brasser</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">U</forename><surname>Müller</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Dmitrienko</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">K</forename><surname>Kostiainen</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Capkun</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A.-R</forename><surname>Sadeghi</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">USENIX Workshop on Offensive Technologies</title>
		<imprint>
			<date type="published" when="2017" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b9">
	<monogr>
		<title level="m" type="main">Securing software by enforcing data-flow integrity</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Castro</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Costa</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Harris</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename></persName>
		</author>
		<imprint>
			<biblScope unit="page" from="147" to="160" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b10">
	<analytic>
		<title level="a" type="main">Detecting privileged side-channel attacks in shielded execution with Déjà Vu</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Chen</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">X</forename><surname>Zhang</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><forename type="middle">K</forename><surname>Reiter</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Y</forename><surname>Zhang</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">ACM Symposium on Information, Computer and Communications Security</title>
		<imprint>
			<date type="published" when="2017" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b11">
	<analytic>
		<title level="a" type="main">Ekiden: A platform for confidentiality-preserving, trustworthy, and performant smart contracts</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Cheng</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">F</forename><surname>Zhang</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Kos</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">W</forename><surname>He</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">N</forename><surname>Hynes</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">N</forename><surname>Johnson</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Juels</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Miller</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Song</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">2019 IEEE European Symposium on Security and Privacy</title>
		<imprint>
			<publisher>EuroS&amp;P</publisher>
			<date type="published" when="2019" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b12">
	<analytic>
		<title level="a" type="main">Practical smart contracts on Bitcoin</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><surname>Das</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">L</forename><surname>Eckey</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><surname>Frassetto</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Gens</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">K</forename><surname>Hostáková</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><surname>Jauernig</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Faust</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A.-R</forename><surname>Sadeghi</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Fastkitten</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">28th USENIX Security Symposium</title>
		<imprint>
			<date type="published" when="2019-08" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b13">
	<analytic>
		<title level="a" type="main">Hardfails: insights into software-exploitable hardware bugs</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">G</forename><surname>Dessouky</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Gens</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><surname>Haney</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">G</forename><surname>Persyn</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Kanuparthi</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">H</forename><surname>Khattri</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><forename type="middle">M</forename><surname>Fung</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A.-R</forename><surname>Sadeghi</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Rajendran</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 28th USENIX Security Symposium</title>
		<meeting>the 28th USENIX Security Symposium<address><addrLine>Santa Clara, CA, USA; Sec</addrLine></address></meeting>
		<imprint>
			<date type="published" when="2019" />
			<biblScope unit="page" from="213" to="230" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b14">
	<monogr>
		<title level="m" type="main">Sandsifter: The x86 processor fuzzer</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><surname>Domas</surname></persName>
		</author>
		<ptr target="https://github.com/xoreaxeaxeax/sandsifter" />
		<imprint>
			<date type="published" when="2017" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b15">
	<monogr>
				<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><surname>Domas</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Rosenbridge</surname></persName>
		</author>
		<ptr target="https://github.com/xoreaxeaxeax/rosenbridge" />
		<title level="m">Hardware backdoors in some x86 cpus</title>
		<imprint>
			<date type="published" when="2018" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b16">
	<analytic>
		<title level="a" type="main">Dark silicon and the end of multicore scaling</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">H</forename><surname>Esmaeilzadeh</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">E</forename><surname>Blem</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><forename type="middle">S</forename><surname>Amant</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">K</forename><surname>Sankaralingam</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Burger</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">38th Annual international symposium on computer architecture (ISCA)</title>
		<imprint>
			<publisher>IEEE</publisher>
			<date type="published" when="2011" />
			<biblScope unit="page" from="365" to="376" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b17">
	<analytic>
		<title level="a" type="main">Secure and private function evaluation with Intel SGX</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Felsen</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Á</forename><surname>Kiss</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><surname>Schneider</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><surname>Weinert</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">CCSW 2019 -The ACM Cloud Computing Security Workshop</title>
		<imprint>
			<date type="published" when="2019-11" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b18">
	<monogr>
		<title level="m" type="main">How to hack a turned-off computer, or running unsigned code in Intel management engine</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Goryachy</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Ermolov</surname></persName>
		</author>
		<ptr target="https://www.blackhat.com/docs/eu-17/materials/eu-17-" />
		<imprint>
			<date type="published" when="2018" />
		</imprint>
		<respStmt>
			<orgName>Goryachy-How-To-Hack-A-Turned-Off-Computer-OrRunning-Unsigned-Code-In-Intel-Management-Engine.pdf</orgName>
		</respStmt>
	</monogr>
</biblStruct>

<biblStruct xml:id="b19">
	<monogr>
		<title level="m" type="main">Intel VISA: Through the rabbit hole</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Goryachy</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Ermolov</surname></persName>
		</author>
		<ptr target="https://i.blackhat.com/asia-19/Thu-March-28/bh-asia-Goryachy-Ermolov-Intel-Visa-Through-the-Rabbit-Hole.pdf" />
		<imprint>
			<date type="published" when="2019" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b20">
	<monogr>
		<title level="m" type="main">Cache attacks on Intel SGX</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Götzfried</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Eckert</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Schinzel</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><surname>Müller</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2017" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b21">
	<monogr>
		<title level="m" type="main">Translation leak-aside buffer: Defeating cache side-channel protections with TLB attacks</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">B</forename><surname>Gras</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">K</forename><surname>Razavi</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">H</forename><surname>Bos</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><surname>Giuffrida</surname></persName>
		</author>
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b22">
	<analytic>
		<title level="a" type="main">Strong and efficient cache sidechannel protection using hardware transactional memory</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Gruss</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Lettner</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">F</forename><surname>Schuster</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">O</forename><surname>Ohrimenko</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">I</forename><surname>Haller</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Costa</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">26th USENIX Security Symposium</title>
		<imprint>
			<date type="published" when="2017" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b23">
	<analytic>
		<title level="a" type="main">js: A remote software-induced fault attack in JavaScript</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Gruss</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><surname>Maurice</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Mangard</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Rowhammer</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">International Conference on Detection of Intrusions and Malware, and Vulnerability Assessment</title>
		<imprint>
			<publisher>Springer</publisher>
			<date type="published" when="2016" />
			<biblScope unit="page" from="300" to="321" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b24">
	<analytic>
		<title level="a" type="main">Fast software encryption with SIMD</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Götzfried</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><surname>Müller</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the Sixth European Workshop on System Security</title>
		<meeting>the Sixth European Workshop on System Security</meeting>
		<imprint>
			<date type="published" when="2013" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b25">
	<monogr>
		<title level="m" type="main">Intel 64 and IA-32 architectures software developer&apos;s manual</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Intel</surname></persName>
		</author>
		<ptr target="http://www-ssl.intel.com/content/www/us/en/processors/architectures-software-developer-manuals.html" />
		<imprint>
			<date type="published" when="2015" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b26">
	<monogr>
		<title level="m" type="main">Intel software guard extensions (intel SGX</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Intel</surname></persName>
		</author>
		<ptr target="https://software.intel.com/en-us/sgx" />
		<imprint>
			<date type="published" when="2016" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b27">
	<monogr>
		<title level="m" type="main">Intel 64 and IA-32 architectures software developer&apos;s manual, combined volumes 3A, 3B, and 3C: System programming guide</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Intel</surname></persName>
		</author>
		<ptr target="https://www.intel.de//content/dam/www/public/us/en/documents/manuals/64-ia-32-architectures-software-developer-vol-3b-part-2-manual.pdf" />
		<imprint>
			<date type="published" when="2019" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b28">
	<monogr>
				<ptr target="https://www.intel.com/content/www/us/en/security-center/advisory/intel-sa-00213.html" />
		<title level="m">Intel Corporation. Intel CSME, intel SPS, intel TXE, intel DAL, and intel AMT 2019.1 QSR advisory</title>
		<imprint>
			<date type="published" when="2019" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b29">
	<monogr>
		<title level="m" type="main">Intel processors voltage settings modification advisory</title>
		<ptr target="https://www.intel.com/content/www/us/en/security-center/advisory/intel-sa-00289.html" />
		<imprint>
			<date type="published" when="2019" />
		</imprint>
	</monogr>
	<note>Intel Corporation</note>
</biblStruct>

<biblStruct xml:id="b30">
	<analytic>
		<title level="a" type="main">Locking down the processor via Rowhammer attack</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Y</forename><surname>Jang</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Lee</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Lee</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Kim</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><surname>Sgx-Bomb</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 2nd Workshop on System Software for Trusted Execution</title>
		<meeting>the 2nd Workshop on System Software for Trusted Execution</meeting>
		<imprint>
			<publisher>ACM</publisher>
			<date type="published" when="2017" />
			<biblScope unit="page">5</biblScope>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b31">
	<analytic>
		<title level="a" type="main">Flipping bits in memory without accessing them: An experimental study of DRAM disturbance errors</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Y</forename><surname>Kim</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Daly</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Kim</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><surname>Fallin</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><forename type="middle">H</forename><surname>Lee</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Lee</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><surname>Wilkerson</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">K</forename><surname>Lai</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">O</forename><surname>Mutlu</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">In ACM SIGARCH Computer Architecture News</title>
		<imprint>
			<biblScope unit="volume">42</biblScope>
			<biblScope unit="page" from="361" to="372" />
			<date type="published" when="2014" />
			<publisher>IEEE Press</publisher>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b32">
	<monogr>
		<title/>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><surname>Kocher</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Horn</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Fogh</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Genkin</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Gruss</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Haas</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">W</forename><surname>Hamburg</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Lipp</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Mangard</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Prescher</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><surname>Schwarz</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Yarom</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Y</forename></persName>
		</author>
		<imprint/>
	</monogr>
	<note>Spectre attacks: Exploiting speculative execution</note>
</biblStruct>

<biblStruct xml:id="b33">
	<analytic>
		<title level="a" type="main">Reverse engineering x86 processor microcode</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><surname>Koppe</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">B</forename><surname>Kollenda</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Fyrbiak</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><surname>Kison</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Gawlik</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><surname>Paar</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><surname>Holz</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">26th USENIX Security Symposium</title>
		<imprint>
			<date type="published" when="2017" />
			<biblScope unit="page" from="1163" to="1180" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b34">
	<monogr>
		<title level="m" type="main">Platform-level error handling strategies for Intel systems</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><forename type="middle">B</forename><surname>Lim</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">E</forename><forename type="middle">D</forename><surname>Heaton</surname></persName>
		</author>
		<ptr target="https://www.intel.com/content/dam/www/public/us/en/documents/white-papers/platform-level-error-strategies-paper.pdf" />
		<imprint>
			<date type="published" when="2011" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b35">
	<monogr>
				<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Lipp</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Schwarz</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Gruss</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><surname>Prescher</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">W</forename><surname>Haas</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Fogh</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Horn</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Mangard</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><surname>Kocher</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Genkin</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Y</forename><surname>Yarom</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Hamburg</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Meltdown</surname></persName>
		</author>
		<title level="m">Reading kernel memory from user space</title>
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b36">
	<monogr>
		<title level="m" type="main">CacheZoom: How SGX amplifies the power of cache attacks</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Moghimi</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">G</forename><surname>Irazoqui</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><surname>Eisenbarth</surname></persName>
		</author>
		<idno type="arXiv">arXiv:1703.06986</idno>
		<imprint>
			<date type="published" when="2017" />
		</imprint>
	</monogr>
<note type="report_type">Tech. rep.</note>
	<note>cs.CR</note>
</biblStruct>

<biblStruct xml:id="b37">
	<analytic>
		<title level="a" type="main">Plundervolt: Software-based fault injection attacks against Intel SGX</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">K</forename><surname>Murdock</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Oswald</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">F</forename><forename type="middle">D</forename><surname>Garcia</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Van Bulck</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Gruss</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">F</forename><surname>Piessens</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 41st IEEE Symposium on Security and Privacy (S&amp;P&apos;20</title>
		<meeting>the 41st IEEE Symposium on Security and Privacy (S&amp;P&apos;20</meeting>
		<imprint>
			<date type="published" when="2020" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b38">
	<analytic>
		<title/>
	</analytic>
	<monogr>
		<title level="j">National Security Agency. Security-enhanced Linux</title>
		<imprint/>
	</monogr>
	<note>SELinux</note>
</biblStruct>

<biblStruct xml:id="b39">
	<analytic>
		<title level="a" type="main">Effectiveness of machine checks for error diagnostics</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">N</forename><surname>Pandit</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Z</forename><surname>Kalbarczyk</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><forename type="middle">K</forename><surname>Iyer</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">IEEE/IFIP International Conference on Dependable Systems &amp; Networks</title>
		<imprint>
			<publisher>IEEE</publisher>
			<date type="published" when="2009" />
			<biblScope unit="page" from="578" to="583" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b40">
	<analytic>
		<title level="a" type="main">Voltage margins identification on commercial x86-64 multicore microprocessors</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">G</forename><surname>Papadimitriou</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Kaliorakis</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Chatzidimitriou</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><surname>Magdalinos</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Gizopoulos</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">2017 IEEE 23rd International Symposium on On-Line Testing and Robust System Design (IOLTS</title>
		<imprint>
			<publisher>IEEE</publisher>
			<date type="published" when="2017" />
			<biblScope unit="page" from="51" to="56" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b41">
	<analytic>
		<title level="a" type="main">Secure multiparty computation from SGX</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">B</forename><surname>Portela</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Barbosa</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">G</forename><surname>Scerri</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">B</forename><surname>Warinschi</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Bahmani</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">F</forename><surname>Brasser</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A.-R</forename><surname>Sadeghi</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Financial Cryptography and Data Security</title>
		<imprint>
			<date type="published" when="2017-04" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b42">
	<analytic>
		<title level="a" type="main">A new approach for Rowhammer attacks</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Qiao</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Seaborn</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">IEEE International Symposium on Hardware Oriented Security and Trust (HOST) (2016), HOST</title>
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b43">
	<analytic>
		<title level="a" type="main">Breaching trustzone by software-controlled voltage manipulation over multi-core frequencies</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><surname>Qiu</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Wang</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Y</forename><surname>Lyu</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">G</forename><surname>Qu</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Voltjockey</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 2019 ACM SIGSAC Conference on Computer and Communications Security</title>
		<meeting>the 2019 ACM SIGSAC Conference on Computer and Communications Security</meeting>
		<imprint>
			<publisher>ACM</publisher>
			<date type="published" when="2019" />
			<biblScope unit="page" from="195" to="209" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b44">
	<analytic>
		<title level="a" type="main">Breaking SGX by software-controlled voltage-induced hardware faults</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><surname>Qiu</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Wang</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Y</forename><surname>Lyu</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">G</forename><surname>Qu</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Voltjockey</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Asian Hardware Oriented Security and Trust Symposium (AsianHOST)</title>
		<imprint>
			<date type="published" when="2019" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b45">
	<monogr>
		<title level="m" type="main">Overclocking 6th generation Intel® Core™ processors!</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Ragland</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">N</forename><surname>Shih</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><surname>Brix</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2015" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b46">
	<analytic>
		<title level="a" type="main">Raccoon: Closing digital side-channels through obfuscated execution</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Rane</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><surname>Lin</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Tiwari</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">USENIX Security Symposium</title>
		<imprint>
			<date type="published" when="2015" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b47">
	<analytic>
		<title level="a" type="main">Flip feng shui: Hammering a needle in the software stack</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">K</forename><surname>Razavi</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">B</forename><surname>Gras</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">E</forename><surname>Bosman</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">B</forename><surname>Preneel</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><surname>Giuffrida</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">H</forename><surname>Bos</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">25th USENIX Security Symposium</title>
		<meeting><address><addrLine>Sec</addrLine></address></meeting>
		<imprint>
			<date type="published" when="2016" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b48">
	<monogr>
		<title level="m" type="main">Dual Channel PWM Controller for IMVP8 CPU CorePower Supply</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Richtek</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2018-08" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b49">
	<monogr>
		<title level="m" type="main">Exploiting the DRAM Rowhammer bug to gain kernel privileges</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Seaborn</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><surname>Dullien</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2015" />
			<publisher>Black Hat</publisher>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b50">
	<analytic>
		<title level="a" type="main">Energyefficient processor design using multiple clock domains with dynamic voltage and frequency scaling</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">G</forename><surname>Semeraro</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">G</forename><surname>Magklis</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Balasubramonian</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><forename type="middle">H</forename><surname>Albonesi</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Dwarkadas</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><forename type="middle">L</forename><surname>Scott</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings Eighth International Symposium on High Performance Computer Architecture</title>
		<meeting>Eighth International Symposium on High Performance Computer Architecture</meeting>
		<imprint>
			<publisher>IEEE</publisher>
			<date type="published" when="2002" />
			<biblScope unit="page" from="29" to="40" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b51">
	<analytic>
		<title level="a" type="main">Enabling address space layout randomization for SGX programs</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Seo</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">B</forename><surname>Lee</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Kim</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M.-W</forename><surname>Shih</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">I</forename><surname>Shin</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Han</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Kim</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><surname>Sgx-Shield</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Annual Network and Distributed System Security Symposium</title>
		<imprint>
			<date type="published" when="2017" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b52">
	<analytic>
		<title level="a" type="main">The EDA challenges in the dark silicon era: Temperature, reliability, and variability perspectives</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Shafique</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Garg</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Henkel</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Marculescu</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 51st Annual Design Automation Conference</title>
		<meeting>the 51st Annual Design Automation Conference</meeting>
		<imprint>
			<publisher>ACM</publisher>
			<date type="published" when="2014" />
			<biblScope unit="page" from="1" to="6" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b53">
	<analytic>
		<title level="a" type="main">Eradicating controlled-channel attacks against enclave programs</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M.-W</forename><surname>Shih</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Lee</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><surname>Kim</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Peinado</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>T-Sgx</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Annual Network and Distributed System Security Symposium</title>
		<imprint>
			<date type="published" when="2017" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b54">
	<analytic>
		<title level="a" type="main">CLKSCREW: exposing the perils of security-oblivious energy management</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Tang</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Sethumadhavan</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Stolfo</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">USENIX Security Symposium</title>
		<imprint>
			<date type="published" when="2017" />
			<biblScope unit="page" from="1057" to="1074" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b55">
	<analytic>
		<title level="a" type="main">Throwhammer: Rowhammer attacks over the network and defenses</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Tatar</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Krishnan</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">E</forename><surname>Athanasopoulos</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><surname>Giuffrida</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">H</forename><surname>Bos</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Razavi</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">K</forename></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">2018 USENIX Annual Technical Conference</title>
		<imprint>
			<date type="published" when="2018" />
		</imprint>
	</monogr>
	<note>USENIX Association</note>
</biblStruct>

<biblStruct xml:id="b56">
	<monogr>
				<ptr target="https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2019-11157" />
		<title level="m">The MITRE Corporation. Cve-2019-11157</title>
		<imprint>
			<date type="published" when="2019" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b57">
	<analytic>
		<title level="a" type="main">Extracting the keys to the Intel SGX kingdom with transient out-of-order execution</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Van Bulck</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">F</forename><surname>Piessens</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Strackx</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Foreshadow</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">USENIX Security Symposium</title>
		<imprint>
			<date type="published" when="2018" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b58">
	<analytic>
		<title level="a" type="main">Telling your secrets without page faults: Stealthy page table-based attacks on enclaved execution</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Van Bulck</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">N</forename><surname>Weichbrodt</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Kapitza</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">F</forename><surname>Piessens</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Strackx</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">26th USENIX Security Symposium</title>
		<imprint>
			<date type="published" when="2017" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b59">
	<analytic>
		<title level="a" type="main">Drammer: Deterministic rowhammer attacks on commodity mobile platforms</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">V</forename><surname>Van Der Veen</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Y</forename><surname>Fratantonio</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Lindorfer</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Gruss</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><surname>Maurice</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">G</forename><surname>Vigna</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">H</forename><surname>Bos</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">K</forename><surname>Razavi</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><surname>Giuffrida</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">ACM SIGSAC Conference on Computer and Communications Security</title>
		<imprint>
			<date type="published" when="2016" />
		</imprint>
	</monogr>
	<note>CCS</note>
</biblStruct>

<biblStruct xml:id="b60">
	<analytic>
		<title level="a" type="main">Practical mitigation of DMA-based Rowhammer attacks on ARM</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">V</forename><surname>Van Der Veen</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Lindorfer</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Y</forename><surname>Fratantonio</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">H</forename><forename type="middle">P</forename><surname>Pillai</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">G</forename><surname>Vigna</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><surname>Kruegel</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">H</forename><surname>Bos</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">K</forename><surname>Razavi</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Guardion</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">International Conference on Detection of Intrusions and Malware, and Vulnerability Assessment</title>
		<imprint>
			<publisher>Springer</publisher>
			<date type="published" when="2018" />
			<biblScope unit="page" from="92" to="113" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b61">
	<analytic>
		<title level="a" type="main">RIDL: Rogue in-flight data load</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Van Schaik</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Milburn</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Österlund</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><surname>Frigo</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">G</forename><surname>Maisuradze</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">K</forename><surname>Razavi</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">H</forename><surname>Bos</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><surname>Giuffrida</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">40th IEEE Symposium on Security and Privacy</title>
		<imprint>
			<publisher>IEEE</publisher>
			<date type="published" when="2019" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b62">
	<analytic>
		<title level="a" type="main">One bit flips, one cloud flops: Cross-VM Row Hammer attacks and privilege escalation</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Y</forename><surname>Xiao</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">X</forename><surname>Zhang</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Y</forename><surname>Zhang</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Teodorescu</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">USENIX Security Symposium</title>
		<imprint>
			<date type="published" when="2016" />
			<biblScope unit="page" from="19" to="35" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b63">
	<analytic>
		<title level="a" type="main">Controlled-channel attacks: Deterministic side channels for untrusted operating systems</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Y</forename><surname>Xu</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">W</forename><surname>Cui</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Peinado</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">IEEE Symposium on Security and Privacy</title>
		<imprint>
			<date type="published" when="2015" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b64">
	<analytic>
		<title level="a" type="main">It&apos;s hammer time: how to attack (Rowhammer-based) DRAM-PUFs</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Zeitouni</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Gens</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A.-R</forename><surname>Sadeghi</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 55th Annual Design Automation Conference</title>
		<meeting>the 55th Annual Design Automation Conference</meeting>
		<imprint>
			<publisher>ACM</publisher>
			<date type="published" when="2018" />
			<biblScope unit="page">65</biblScope>
		</imprint>
	</monogr>
</biblStruct>

				</listBibl>
			</div>
		</back>
	</text>
</TEI>
