<?xml version="1.0" encoding="UTF-8"?>
<TEI xmlns="http://www.tei-c.org/ns/1.0" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
xsi:schemaLocation="http://www.tei-c.org/ns/1.0 /Users/atharsefid/Desktop/grobid-0.5.3/grobid-home/schemas/xsd/Grobid.xsd"
 xmlns:xlink="http://www.w3.org/1999/xlink">
	<teiHeader xml:lang="en">
		<encodingDesc>
			<appInfo>
				<application version="0.5.3" ident="GROBID" when="2020-09-29T03:00+0000">
					<ref target="https://github.com/kermitt2/grobid">GROBID - A machine learning software for extracting information from scholarly documents</ref>
				</application>
			</appInfo>
		</encodingDesc>
		<fileDesc>
			<titleStmt>
				<title level="a" type="main">Improving Flash Storage Performance by Caching Address Mapping Table in Host Memory</title>
			</titleStmt>
			<publicationStmt>
				<publisher/>
				<availability status="unknown"><licence/></availability>
			</publicationStmt>
			<sourceDesc>
				<biblStruct>
					<analytic>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Wookhan</forename><surname>Jeong</surname></persName>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Yongmyung</forename><surname>Lee</surname></persName>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Hyunsoo</forename><surname>Cho</surname></persName>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Jaegyu</forename><surname>Lee</surname></persName>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Songho</forename><surname>Yoon</surname></persName>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Jooyoung</forename><surname>Hwang</surname></persName>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Donggi</forename><surname>Lee</surname></persName>
						</author>
						<author>
							<affiliation key="aff0">
								<orgName type="institution">S/W Development Team</orgName>
								<address>
									<addrLine>Memory Business</addrLine>
								</address>
							</affiliation>
						</author>
						<author>
							<affiliation key="aff1">
								<orgName type="institution">Samsung Electronics Co</orgName>
								<address>
									<settlement>Ltd</settlement>
								</address>
							</affiliation>
						</author>
						<title level="a" type="main">Improving Flash Storage Performance by Caching Address Mapping Table in Host Memory</title>
					</analytic>
					<monogr>
						<imprint>
							<date/>
						</imprint>
					</monogr>
				</biblStruct>
			</sourceDesc>
		</fileDesc>
		<profileDesc>
			<abstract>
				<p>NAND flash memory based storage devices use Flash Translation Layer (FTL) to translate logical addresses of I/O requests to corresponding flash memory addresses. Mobile storage devices typically have RAM with constrained size, thus lack in memory to keep the whole mapping table. Therefore, mapping tables are partially retrieved from NAND flash on demand, causing random read performance degradation. In order to improve random read performance, we propose HPB (Host Performance Booster) which uses host system memory as a cache for FTL mapping table. By using HPB, FTL data can be read from host memory faster than from NAND flash memory. We define trans-actional protocols between host device driver and storage device to manage the host side mapping cache. We implement HPB on Galaxy S7 smartphone with UFS device. HPB is shown to have a performance improvement of 58-67% for random read workload.</p>
			</abstract>
		</profileDesc>
	</teiHeader>
	<text xml:lang="en">
		<body>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="1.">Introduction</head><p>Flash memory based storage devices are widely used in mobile devices, desktop PCs, enterprise servers, and data centers. Flash memory has operational limitations such as erase-before-write and sequential write on memory blocks. Flash Translation Layer (FTL) software manages such constraints and abstracts flash memory chips as a block device.</p><p>FTL maintains its mapping table to perform address translation from logical addresses (block numbers) to physical addresses (flash memory block and page numbers). FTL mapping methods can be classified into three types <ref type="bibr" target="#b4">[8]</ref>: block mapping, page mapping, and hybrid mapping. The size of mapping table depends on the type of mapping scheme. Since block mapping <ref type="bibr">[1]</ref> scheme provides mapping at the granularity of flash memory's block, it needs a relatively small mapping table. However, its random write performance is poor, because a large number of pages in a block are copied to a new memory block to update a page in the memory block. In contrast, page mapping <ref type="bibr">[2]</ref> appends every updated page in a log block and maintains page granularity mapping. Hybrid mapping is an extension of block mapping to improve random writes <ref type="bibr">[3,</ref><ref type="bibr">4,</ref><ref type="bibr" target="#b1">5,</ref><ref type="bibr" target="#b2">6]</ref>. It keeps a smaller mapping table than page mapping while its performance can be competitive to that of page mapping for workloads with substantial access locality.</p><p>Among the three types of mapping, page mapping performs most efficiently, but it requires a large mapping table (typically 1/1024 of device size when using 4Bytes mapping entry for 4KiB sized page). If the whole mapping table cannot fit into device's memory, FTL loads a part of the table on demand <ref type="bibr" target="#b3">[7]</ref>, which may increase latency and hence degrade the performance of random read I/O.</p><p>Random read performance has become more important as computing power is enhanced with the rise of rich OS features (e.g. multi-window in Android N) and applications (MSFT office packages for mobile). However, flash storage for mobile devices still suffer from limited memory resources due to its constraints on power consumption and form factors. Properly managing the size of mapping table is a serious concern as device density increases.</p><p>In this paper, we propose Host Performance Booster (HPB), a new method of caching mapping table to host memory without additional hardware support in mobile storage devices, to address the mapping table size problem. We show design and implementation of HPB on a smartphone with UFS (Universal Flash Storage) which is a new generation mobile storage using SCSI command set. We describe the transaction protocol to exchange mapping table information between device driver and UFS device. Experimental results show that random read performance is improved up to 67% by HPB.</p><p>Section 2 describes the background of FTL operations and overviews HPB. Section 3 explains the details of HPB implementation. We show experimental results and related works in Section 4 and Section 5, respectively, and conclude in Section 6.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.">Design Overview</head></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.1.">FTL operation background</head><p>FTL maintains Logical-to-Physical (L2P) mapping table in NAND flash memory. In general, flash memory devices used for mobile systems do not have DRAM, but SRAM of limited size in storage controller, where FTL caches recently used L2P mapping entries. On receiving a read request, FTL looks up the map cache to retrieve a corresponding mapping entry, or loads the mapping from flash memory in case of cache miss. Cache miss penalty is significant for small chunk random reads. For example, to process a 4KB size read request, two read operations (one for map and one for data) are required in case of L2P cache miss. The overall procedure of processing a read request is depicted in <ref type="figure" target="#fig_1">Figure 1</ref>. Device fetches a read request, looks up its L2P cache in device SRAM. On L2P cache miss (Case1), L2P in flash memory is loaded, which takes hundreds of microseconds. On cache hit (Case2), L2P entry is retrieved from device SRAM.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.2.">HPB Overview</head><p>The key idea of HPB is that host device driver caches L2P mapping in host memory (DRAM) and sends the corresponding L2P information piggybacked in an I/O request to device whether the L2P entry is cached in host memory. Since the L2P information is provided by the host in the request, device does not have to load L2P entry from flash memory even on its internal L2P cache miss (Case3 in <ref type="figure" target="#fig_1">Figure 1</ref>). Device investigates the host provided L2P to protect data against possible corruption of L2P metadata. In the following, we describe the HPB in more detail.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.2.1.">L2P Cache Initialization</head><p>At boot time, HPB device driver allocates kernel memory for L2P cache, requests L2P information to device, and populates the L2P cache.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.2.2.">Device to Host L2P information delivery</head><p>In HPB, L2P information is delivered from device to host driver in two ways. First, host driver can fetch a chunk of L2P entries by sending a command, implemented via SCSI READ_BUFFER command <ref type="bibr" target="#b8">[11]</ref>  <ref type="figure" target="#fig_0">(Fig- ure 2(a)</ref>). This command can be issued only when the storage device is idle to avoid any impact on normal I/O performance. Second, device piggybacks L2P information in response packets of normal I/O requests <ref type="bibr">(Fig- ure 2(b)</ref>). While this does not incur command overhead, the size of information that can be contained in a response packet is limited. Both methods are used to synchronize the host side L2P cache with device's L2P mapping table, which is explained more in 2.2.4.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.2.3.">Host to Device L2P information delivery</head><p>HPB driver includes L2P information in an I/O request if host side cache has a corresponding L2P entry ( <ref type="figure" target="#fig_0">Figure  2</ref>(c)). On receiving a read request with L2P information, device verifies if the given L2P has been published by itself, and checks whether that entry is up-to-date. If the given L2P passes those inspections, device uses it without loading the entry from flash memory. This will be described in more detail in 2.2.5.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.2.4.">L2P Cache Consistency</head><p>L2P mapping entries in device are updated not only by host's writes but also by FTL's internal operations such as wear leveling (WL), which is required to avoid block wear-outs, or garbage collection (GC), which is re-  quired to reclaim free space. HPB device notifies host of L2P change events by raising a flag in a response packet, then HPB driver fetches up-to-date L2P entries from device.</p><p>As shown in <ref type="figure" target="#fig_0">Figure 2</ref>(d), device maintains a bitmap to keep track of address ranges that have L2P change(s). Since this bitmap should reside in device memory, small bitmap is preferred. To reduce the bitmap size, we have a single bit which represents a group of consecutive pages. Device notifies host of which group has updated L2P entries, and then the host driver issues a READ_BUFFER command to fetch L2P entries for the group.</p><p>HPB device checks if given L2P is up-to-date by referring to the dirty bitmap, and ignores it if the group, to which the requested page belongs, is dirty. Since the group of page is large, a small change to the group may deteriorate performance. To keep the host side L2P cache consistent as early as possible, HPB device returns updated L2P entries in a response packet for normal I/O. Most of flash devices have an internal write buffer, so the requested data may not have been persisted when a write I/O request is completed. Therefore, it should be noted that the L2P information for a write request may be delivered in response packet of other requests later.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.2.5.">L2P information verification</head><p>As previously mentioned, since L2P map is critical to data integrity, HPB device verifies the L2P information given by the host before using it. Host side L2P cache may be modified by malicious software or kernel defects. HPB driver checks if the L2P entry has been published by itself. To do so, HPB device makes a signature using LBA and PPN, encrypts L2P entry using random seed and the signature as shown in <ref type="figure">Figure 3</ref>. Since encryption key is not provided to host, host cannot decrypt it. HPB device can detect whether the L2P entry has been tampered while in host memory by decrypting the entry and checking the signature. We do not implement the verification scheme in this work because the device used in our experiment does not have an encryption/decryption hardware engine.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.">Implementation</head><p>This section describes our implementation of HPB on a Galaxy S7 <ref type="bibr" target="#b9">[12]</ref> smartphone with an UFS device <ref type="bibr">[13]</ref> in order to prove the concept of HPB.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.1.">Host-Device Protocol on UFS</head><p>Here we describe the interface between HPB driver and HPB device for HPB operation. <ref type="figure">Figure 4</ref> shows how a Linux host and UFS device communicate. UFS storage stack is a layered architecture consisting of application layer and transport layer. CDB (Command Descriptor Block) and UPIU (UFS Protocol Information Unit) are the main structures in the application layer and the transport layer, respectively. CDB is a structure for a client to send a command to a SCSI device. UPIU is a data structure used to transfer information between UFS host and device. CDB is included in a "command" UPIU. Data is exchanged within "data" UPIUs. We explain our implementation using CDB and UPIU in the following.</p><p>1) As shown in <ref type="figure" target="#fig_2">Figure 5</ref>, we redefine the 8 byte LBA field of READ16 command's CDB in order to contain 4 byte LBA and 4 byte L2P entry.</p><p>2) UFS driver issues a READ_BUFFER command, containing a group number as shown in <ref type="figure" target="#fig_2">Figure 5</ref>, to  3) UFS device notifies host of dirty group using a flag in device information field of a response UPIU. If the flag is clear, for example, dirty group number is contained in the response UPIU. Then, HPB driver issues a READ_BUFFER command for the dirty group. On the other hand, if the flag is set, the latest L2P entry is included in Data segment in Response UPIU. <ref type="figure" target="#fig_2">Figure 5</ref> shows CDB and UPIU fields mentioned above.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.2.">Device side L2P management</head><p>HPB device maintains a L2P dirty bitmap in its memory to manage L2P cache consistency to keep track of the dirty page groups. The whole LBA range is divided into several groups and one bit is assigned to each group. The size of group affects the overall performance of HPB because if there is any L2P change to a page in a group, device ignores L2P information of all pages belonging to the group. In our implementation, a group consists of 4096 pages.</p><p>HPB device marks a bit of the L2P dirty bitmap for a group when it processes host writes, GC, and WL operations. It clears the bit when host HPB driver fetches the latest L2P information via READ_BUFFER command or response UPIU.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.3.">Device Driver</head><p>One of our major design goals for HPB driver is to be transparent to the upper layer, including file system. HPB driver initializes during the initialization phase of UFS driver. It allocates kernel virtual memory for L2P cache and data structures to manage the cache. HPB driver performs the following three operations. 1) If UFS device sends L2P map entries in response UPIU, HPB driver writes these entries to its L2P cache.</p><p>2) If UFS device sends a dirty L2P group number in response UPIU, HPB driver issues the READ_BUFFER request with the group number, which is executed during device idle time to avoid impact on normal I/O. HPB driver updates its L2P cache using the data delivered as per the request.</p><p>3) When the upper layer requests a read to the UFS driver, HPB driver finds a corresponding physical address with its logical address and issues the read command which includes the physical address using READ16 command format.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.4">Multi-page Read Request Handling</head><p>The implementation in this paper has a limitation that only one L2P entry can be transmitted in to a READ16 CDB. With this constraint, if the physical chunk corresponding to the logical address of the request is physically contiguous, the PPN information of the entire chunk of the request is transmitted with only one PPN transmission. Transmitting additional information can be supported by using extra header segment, which is under discussion in JEDEC for possible inclusion in the next UFS 3.0 standard. If extra header is supported, we do not need to change READ16 CDB fields as well.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.">Performance Results</head><p>On Galaxy S7 with UFS, we performed a series of micro benchmarks to analyze the HPB performance.</p><p>Random read performance: HPB performance benefit is expected to be more significant under smaller chunk random read requests, because the workload accesses L2P map frequently. To see the benefit for small random read requests, we use tiobench <ref type="bibr" target="#b10">[14]</ref> that measures I/O performance using multiple threads. We configure tiobench to set 4KB record size on 1GB address range and use 1, 2, 4, 8 and 16 threads. As shown in <ref type="figure" target="#fig_4">Figure 6</ref>, HPB shows 59 ~ 67% of random read performance improvement, as the cache hit rate is 100% in the Hostside L2P Cache.  shows there is no performance improvement in sequential read because the searching time for L2P map occupies only a small portion of the overall time. In addition, HPB does not affect write performance because there is no difference between HPB driver and normal driver under write workload.</p><p>Mixed workload: We tested read and write mixed workload to see HPB performance when L2P mapping changes due to host writes and host updates its L2P cache accordingly as described in 2.2.2. As shown in <ref type="figure" target="#fig_7">Figure 8</ref>, HPB achieves 8 ~ 43% performance improvements for various mix ratio. Even in highly write intensive load (read 10%, write 90%), HPB still gives 8% performance improvement.</p><p>Multi-page chunk read test: <ref type="figure" target="#fig_8">Figure 9</ref> shows the result of random read workloads with various chunk sizes (4KB to 512KB). We tested with tiobench and set the test parameters to 1GB address range, 195MB I/O size, and 8 threads. As mentioned in 3.4, HPB driver delivers L2P entry if the requested chunk is physically contiguous. The performance gain of HPB becomes smaller as the chunk size increases because the elapsed time to load the L2P entry from flash memory becomes smaller compared to the time to read data.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5.">Related Works</head><p>The concept of using the host-side memory to improve the performance of the device was proposed in NVMe Host Memory Buffer (NVMe HMB) <ref type="bibr" target="#b6">[9]</ref> and UFS Unified Memory Extension (UFS UME) <ref type="bibr" target="#b7">[10]</ref>. UFS UME requires additional hardware design for device to access host memory. Uboldface FS device operates as a bus slave so it cannot access host-side memory by itself. Accordingly, additional interconnection interface is required for the UFS UME, which increases the hardware cost. In addition, UFS UME requires allocation of contiguous physical memory. In contrast, HPB offers significantly enhanced operational flexibility because it uses virtual memory allocated by device driver. The memory allocated for L2P cache can be returned to kernel and re-allocated for the HPB driver.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="6.">Conclusions and Future Works</head><p>In this paper, we propose HPB (Host Performance Booster), a method of caching Logical-to-Physical (L2P) mapping table in host-side memory to improve random read performance for storage devices that have not enough memory to keep the whole L2P mapping table in device's RAM. We implemented HPB on a Galaxy S7 with UFS (Universal Flash Storage) storage device. Experimental results show that HPB improves performance by 58 ~ 67% for random read workloads and 8 ~ 43% for read/write mixed workloads.</p><p>To our knowledge, our work is the first study on design and implementation of host managed L2P map caching. We hope our approach opens a variety of interesting research directions. Our future works include host-side L2P cache replacement algorithm and optimization of the L2P cache consistency protocol to reduce the L2P cache synchronization overheads. We also plan to implement HPB on NVMe SSDs and compare with the NVMe HMB. [4] Sang-Won Lee, Dong-Joo Park, Tae-Sun Chung, Dong-Ho Lee, Sangwon Park, and Ha-Joo Song. A log buffer-based flash translation layer using fully-  </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="7.">Reference</head></div><figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_0"><head>Figure 2 :</head><label>2</label><figDesc>Figure 2: HPB related host-device interface</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_1"><head>Figure 1 : Legacy mobile storage operation as per read request.</head><label>1</label><figDesc>Figure 1: Legacy mobile storage operation as per read request. tR means the latency of reading a flash memory page.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_2"><head>Figure 5 :</head><label>5</label><figDesc>Figure 5: UPIU examples in HPB</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_3"><head>Figure 4 :Figure 3 :</head><label>43</label><figDesc>Figure 4: UFS protocol overview</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_4"><head>Figure 6 :</head><label>6</label><figDesc>Figure 6: tiobench 4KB RR (Random Read) performance</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_5"><head>Figure 7</head><label>7</label><figDesc>Figure 7 shows there is no performance improvement in sequential read because the searching time for L2P map occupies only a small portion of the overall time. In addition, HPB does not affect write performance because there is no difference between HPB driver and normal driver under write workload.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_6"><head>[ 1 ]</head><label>1</label><figDesc>A. Ban. Flash file system, April 4 1995. US Patent 5,404,485. [2] A. Ban. Flash file system optimized for page-mode flash technologies, August 10 1999. US Patent 5,937,425. [3] Jesung Kim, Jong Min Kim, S.H. Noh, Sang Lyul Min, and Yookun Cho. A space efficient flash translation layer for CompactFlash systems. Con- sumer Electronics, IEEE Transactions on, 48(2):366-375, May 2002.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_7"><head>Figure 8 :</head><label>8</label><figDesc>Figure 8: Mixed pattern performance (4KB record size, 1GB I/O issue, 16 threads). In RW(x:y), x is read portion and y is write portion.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_8"><head>Figure 9 :</head><label>9</label><figDesc>Figure 9: Performance for various chunk sizes.</figDesc></figure>
		</body>
		<back>
			<div type="references">

				<listBibl>

<biblStruct xml:id="b0">
	<analytic>
		<title/>
	</analytic>
	<monogr>
		<title level="j">ACM Trans. Embed. Comput. Syst</title>
		<imprint>
			<biblScope unit="volume">6</biblScope>
			<biblScope unit="issue">3</biblScope>
			<biblScope unit="page">18</biblScope>
			<date type="published" when="2007" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b1">
	<analytic>
		<title level="a" type="main">A SuperblockBased Flash Translation Layer for NAND Flash Memory</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J.-U</forename><surname>Kang</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">H</forename><surname>Jo</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J.-S</forename><surname>Kim</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Lee</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 6th ACM &amp; IEEE International conference on Embedded software (EMSOFT &apos;08)</title>
		<meeting>the 6th ACM &amp; IEEE International conference on Embedded software (EMSOFT &apos;08)<address><addrLine>Seoul, Korea</addrLine></address></meeting>
		<imprint>
			<date type="published" when="2006-08" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b2">
	<analytic>
		<title level="a" type="main">LAST: Locality-Aware Sector Translation for NAND Flash Memory-Based Storage Systems</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Lee</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Shin</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Y.-J</forename><surname>Kim</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Kim</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the International Workshop on Storage and I/O Virtualization, Performance, Energy, Evaluation and Dependability (SPEED2008)</title>
		<meeting>the International Workshop on Storage and I/O Virtualization, Performance, Energy, Evaluation and Dependability (SPEED2008)</meeting>
		<imprint>
			<date type="published" when="2008-02" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b3">
	<analytic>
		<title level="a" type="main">DFTL: a Flash Translation Layer Employing DemandBased Selective Caching of Page-Level Address Mappings</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Gupta</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Y</forename><surname>Kim</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">B</forename><surname>Urgaonkar</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 14th International Conference on Architectural Support for Programming Languages and Operating Systems (ASPLOS XIV)</title>
		<meeting>the 14th International Conference on Architectural Support for Programming Languages and Operating Systems (ASPLOS XIV)<address><addrLine>Washington, DC</addrLine></address></meeting>
		<imprint>
			<date type="published" when="2009-03" />
			<biblScope unit="page" from="229" to="240" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b4">
	<monogr>
		<title/>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T.-S</forename><surname>Chung</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D.-J</forename><surname>Park</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Park</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D.-H</forename><surname>Lee</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S.-W</forename></persName>
		</author>
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b5">
	<analytic>
		<title level="a" type="main">System Software for Flash Memory: A Survey</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">H.-J</forename><surname>Lee</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Song</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 5th International conference on Embedded and Ubiquitous Computing (EUC &apos;06)</title>
		<meeting>the 5th International conference on Embedded and Ubiquitous Computing (EUC &apos;06)</meeting>
		<imprint>
			<publisher>August</publisher>
			<date type="published" when="2006" />
			<biblScope unit="page" from="394" to="404" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b6">
	<monogr>
				<ptr target="http://www.nvmexpress.org/specifications/" />
		<title level="m">NVMe specifications 1.21a</title>
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b7">
	<monogr>
		<title/>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Jedec Jesd220-1a</forename></persName>
		</author>
		<ptr target="https://www.jedec.org/" />
		<imprint/>
		<respStmt>
			<orgName>Universal Flash Storage (UFS) Unified Memory Extension</orgName>
		</respStmt>
	</monogr>
</biblStruct>

<biblStruct xml:id="b8">
	<monogr>
		<title level="m" type="main">Universal Flash Storage (UFS), Version 2</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Jedec</forename><surname>Jesd220c</surname></persName>
		</author>
		<ptr target="https://www.jedec.org/" />
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b9">
	<monogr>
				<ptr target="http://www.samsung.com/us/explore/galaxy-s7-features-and-specs/" />
		<title level="m">Samsung Galaxy S7</title>
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b10">
	<monogr>
		<title/>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">I/O</forename><surname>Threaded</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Tester</surname></persName>
		</author>
		<ptr target="https://sourceforge.net/projects/tiobench/" />
		<imprint/>
	</monogr>
</biblStruct>

				</listBibl>
			</div>
		</back>
	</text>
</TEI>
