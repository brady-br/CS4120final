<?xml version="1.0" encoding="UTF-8"?>
<TEI xmlns="http://www.tei-c.org/ns/1.0" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
xsi:schemaLocation="http://www.tei-c.org/ns/1.0 /Users/atharsefid/Desktop/grobid-0.5.3/grobid-home/schemas/xsd/Grobid.xsd"
 xmlns:xlink="http://www.w3.org/1999/xlink">
	<teiHeader xml:lang="en">
		<encodingDesc>
			<appInfo>
				<application version="0.5.3" ident="GROBID" when="2020-09-29T02:49+0000">
					<ref target="https://github.com/kermitt2/grobid">GROBID - A machine learning software for extracting information from scholarly documents</ref>
				</application>
			</appInfo>
		</encodingDesc>
		<fileDesc>
			<titleStmt>
				<title level="a" type="main">Towards Pre-Deployment Detection of Performance Failures in Cloud Distributed Systems</title>
			</titleStmt>
			<publicationStmt>
				<publisher/>
				<availability status="unknown"><licence/></availability>
			</publicationStmt>
			<sourceDesc>
				<biblStruct>
					<analytic>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Riza</forename><forename type="middle">O</forename><surname>Suminto</surname></persName>
							<affiliation key="aff0">
								<orgName type="institution" key="instit1">University of Chicago</orgName>
								<orgName type="institution" key="instit2">Surya University</orgName>
							</affiliation>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Agung</forename><surname>Laksono</surname></persName>
							<affiliation key="aff0">
								<orgName type="institution" key="instit1">University of Chicago</orgName>
								<orgName type="institution" key="instit2">Surya University</orgName>
							</affiliation>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Anang</forename><forename type="middle">D</forename><surname>Satria</surname></persName>
							<affiliation key="aff0">
								<orgName type="institution" key="instit1">University of Chicago</orgName>
								<orgName type="institution" key="instit2">Surya University</orgName>
							</affiliation>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Thanh</forename><surname>Do</surname></persName>
							<affiliation key="aff0">
								<orgName type="institution" key="instit1">University of Chicago</orgName>
								<orgName type="institution" key="instit2">Surya University</orgName>
							</affiliation>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Haryadi</forename><forename type="middle">S</forename><surname>Gunawi</surname></persName>
							<affiliation key="aff0">
								<orgName type="institution" key="instit1">University of Chicago</orgName>
								<orgName type="institution" key="instit2">Surya University</orgName>
							</affiliation>
						</author>
						<title level="a" type="main">Towards Pre-Deployment Detection of Performance Failures in Cloud Distributed Systems</title>
					</analytic>
					<monogr>
						<imprint>
							<date/>
						</imprint>
					</monogr>
					<note>โก Microsoft Gray Systems Lab</note>
				</biblStruct>
			</sourceDesc>
		</fileDesc>
		<profileDesc>
			<abstract/>
		</profileDesc>
	</teiHeader>
	<text xml:lang="en">
		<body>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="1">Introduction</head><p>Modern distributed systems ("cloud systems") have emerged as a dominant backbone for many today's applications. They come in different forms such as scale-out file systems, key-value stores, computing frameworks, synchronization and cluster management services. As these systems collectively become the "cloud operating system", users expect high dependability including performance stability. Unfortunately, the complexity of the software and environment in which they must run has outpaced existing testing and debugging tools. Cloud systems must run at scale with different topologies, execute complex distributed protocols, face load fluctuations and a wide range of hardware faults, and serve users with diverse job characteristics.</p><p>One type of important failures is performance failures, a situation where a system (e.g., Hadoop) does not deliver the expected performance (e.g., a job takes 10x longer time than usual). Conversation with cloud engineers reflects that performance stability is often more important than performance optimization; when performance failures happen, users are frustrated, systems waste and underutilize resources, and long debugging efforts are required to find and fix the problems. Sadly, performance failures are still common; our previous work shows that 22% of vital issues reported by cloud system developers relate to performance bugs <ref type="bibr" target="#b11">[12]</ref>.</p><p>In this paper, our focus is to answer the following three questions: What is the root-cause anatomy of performance bugs that appear in cloud systems? What is missing within the state of the art of detecting performance bugs? What are new novel directions that can prevent performance failures to happen in the field?</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="1.1">Anatomy of Performance Bugs</head><p>There exists many reports of performance bugs found in deployed distributed systems, but most of them are described in an ad-hoc manner. To dissect root-cause anatomy of performance failures, we perform an in-depth study of performance bugs in Hadoop.</p><p>Our finding shows that root causes of performance bugs are complex deployment scenarios that the system failed to anticipate. From this, we build a root-cause anatomy ( <ref type="table" target="#tab_2">Table 2</ref>) that shows some of the scenario types (e.g., DSR) and specific conditions (e.g., DSR 1 ) that can happen in deployment. For example, with regards to data source selection (DSR), some tasks of a job can read from the same datanode (DSR 1 ) or different datanodes (DSR 2 ). In terms of data locality (DLC), a task can read from a local disk or a remote node. Different hardware faults (FTY) such as slow node or network can occur. Hardware faults can happen on different places (FPL) such as data, map, and reduce nodes. <ref type="table" target="#tab_2">Table 2</ref> forms the basis on which we characterize the scenario root causes of performance bugs. That is, a performance bug typically appears in a specific scenario. For example, a performance bug surfaces only when an original task and the backup task read from the same slow remote datanode (scenario:</p><formula xml:id="formula_0">DSR 1 &amp; FTY 1 &amp; FPL 1 &amp; DLC 1 ).</formula><p>If one of the conditions is not true, the bug might not surface.</p><p>The anatomy and the example above are sample illustrations. The anatomy in <ref type="table" target="#tab_2">Table 2</ref> is far from complete but it is a first step to characterize performance bugs systematically. Later in Section 2, we will present more bug examples and the required scenarios. These examples point to the fact that performance anomalies are hard to find and reproduce. Large-scale cloud systems make many non-deterministic choices (e.g., task placement, data source selection) that depend on deployment conditions. On top of that, external conditions such as hardware faults can happen in different forms and places. The challenge is clear: to unearth performance bugs, we need to exercise the target system against many possible deployment scenarios.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="1.2">State of the Art</head><p>We ask a simple question: Why do performance bugs keep appearing? Many times similar bugs re-appear ( ยง2). To answer this, we review literature in distributed systems that touch issues related to performance bugs. <ref type="table">Table  1</ref> shows the summary of the state of the art.</p><p>First, many of existing work focus on in-deployment and post-mortem tracing, monitoring, debugging, and analysis <ref type="bibr" target="#b1">[2,</ref><ref type="bibr" target="#b3">4,</ref><ref type="bibr" target="#b8">9,</ref><ref type="bibr" target="#b9">10,</ref><ref type="bibr" target="#b21">22,</ref><ref type="bibr" target="#b22">23,</ref><ref type="bibr" target="#b25">26]</ref>. Arguably, they rep- resent the popular approach but they suffer from one important limitation: passivity. In-deployment and postmortem approaches are passive approaches as they react after performance bugs surface, but they cannot unearth performance bugs prior to deployment.</p><p>In terms offline performance testing, one of the standards is running benchmarks <ref type="bibr" target="#b4">[5]</ref>, which is unfortunately far from simulating real deployment environments. To exercise more scenarios, one can simultaneously run benchmarks and simulate certain environments such as hardware slowdowns in different places, which we did in our previous work <ref type="bibr" target="#b7">[8]</ref> and it took hours to observe the result from each experiment (as we must wait to see the impact). In short, performance benchmarking is time consuming and has small coverage.</p><p>Regarding to exercising deployment scenarios, there exists many work <ref type="bibr" target="#b12">[13,</ref><ref type="bibr" target="#b26">27]</ref>, including ours <ref type="bibr" target="#b10">[11,</ref><ref type="bibr" target="#b14">15,</ref><ref type="bibr" target="#b19">20]</ref>, that permute certain conditions directly on the target system (i.e., "distributed system model checkers"). The downside here is that they primarily focus on reliability but not on performance; they are typically specialized to check classical safety properties. They do not translate well to time-based performance verification which requires more time to check; applying the same approaches for performance verification can take weeks to get the result. MacePC <ref type="bibr" target="#b16">[17]</ref> is the closest to our work, but it only checks systems written in Mace languages and only permutes timings of concurrent events but not other deployment scenarios such as the ones listed in <ref type="table" target="#tab_2">Table 2</ref>.</p><p>What we believe missing is fast, pre-deployment detection of performance bugs in distributed systems. One viable approach is the use of formal modeling tools such as Colored Petri Nets (CPN) <ref type="bibr" target="#b24">[25]</ref>, TLA+/PlusCal <ref type="bibr" target="#b17">[18]</ref>. Recently, such an approach is used for verifying cloud systems (e.g., Amazon DynamoDB+PlusCal <ref type="bibr" target="#b13">[14,</ref><ref type="bibr" target="#b20">21]</ref>) but reliability is still the focus (although such tools fit for performance verification). Another downside is that models are "hand-made" in practice; developers must manually model the system logic and scenarios to permute. As an implication, the resulting model may not be a good representation of the real system.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="1.3">System Performance Verifier</head><p>The journey to highly dependable cloud systems (including performance stability) is ongoing. The use of PlusCal at Amazon hints the need for formal modeling tools to help verify the ever growing complexity of distributed systems. The "hand-made" process is however a major drawback. Therefore, we propose a new advancement: System Performance Verifier (SPV), a framework that takes real system code (e.g., Hadoop in Java) and automatically generates the model, environment, and scenarios to permute. The model is based on a modeling tool of choice (e.g., CPN) that has performance verification capability.</p><p>To the best of our knowledge, our work is the first that addresses the following question: How to detect performance bugs in real distributed systems code and do so prior to deployment and in a fast and complete manner? There are several challenges to address including making the target code amenable for analysis, building a generic system-to-model compiler (Java-to-CPN in our case), optimizing the verification process, and many others (Section 3). Within the last 18 months, we have addressed many of the challenges. A preliminary evaluation of our prototype is given in Section 3.4. In the next section, we first present more examples of complex performance bugs to motivate our vision.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2">Deep Performance Bugs</head><p>Using our Cloud Bug Study (CBS) database <ref type="bibr" target="#b11">[12]</ref>, we further study performance bugs and select the ones that involve buggy logic unearthed in certain deployment scenarios. <ref type="bibr" target="#b0">1</ref> There are 89 performance bugs (in Hadoop, HBase, and HDFS) that we study carefully, 28 out of which are found in production, while the rest does not have a clear indicator. For brevity, we describe some of the Hadoop performance bugs. We label each bug with a scenario (e.g.,</p><formula xml:id="formula_1">DSR 1 &amp; DLC 3 &amp; FTY 2 &amp; FPL 1 )</formula><p>representing the set of conditions (as shown in <ref type="table" target="#tab_2">Table 2</ref>) that must be true to hit the bug. If one of the conditions is not true, the bug might not surface.</p><p>โข Untriggered speculative execution. The heart of tail tolerant systems is speculative execution. When it is not triggered properly, job performance suffers. We find numerous cases where speculative execution is not triggered, resulting in significant job slowdowns. For example, in our previous work <ref type="bibr" target="#b7">[8]</ref>, we find several flaws in Hadoop speculative execution. The first flaw (scenario:  original task and the backup task read from the same</p><formula xml:id="formula_2">DSR 1 &amp; FTY 1 &amp; FPL 1 &amp; DLC 1 )</formula><formula xml:id="formula_3">(DSR 1 ) slow (FTY 1 &amp; FPL 1 ) remote (DLC 1 ) datanode.</formula><p>The second flaw (scenario:</p><formula xml:id="formula_4">JCH 1 &amp; TPL 1 &amp; FTY 1 &amp; FPL 2 )</formula><p>comes up when all reducers must read from a mapper (JCH 1 ) remotely (TPL 1 ) and the mapper is slow (FTY 1 &amp; FPL 2 ); because all reducers are slowly pulling data from the slow mapper, there is "no" straggler. But, if the scenario changes (e.g., the job is all-to-many; JCH 2 ), speculative execution is triggered correctly.</p><p>In MR-5533 (scenario:</p><formula xml:id="formula_5">FTY 2 &amp; FPL 3 &amp; TPL 2 )</formula><p>, progress-status heartbeats from disconnected reducers (FTY 2 &amp; FPL 3 ) do not reach the Application Manager (AM). Here, AM does not trigger backup tasks. In this bug, speculative execution is triggered based on the presence of progress status changes, but not the absence.</p><p>The problem of untriggered speculative execution has appeared since the early days of Hadoop (e.g., MR-562).</p><p>โข O(n) recovery. When a single failure happens, ideally the recovery should be O(1), but in unexpected situations, buggy recovery logic can be O(n) long. For example, in MR-5251 (scenario:</p><formula xml:id="formula_6">FTY 3 &amp; FPL 3 &amp; FTM 1 )</formula><p>, a reducer receives a disk-out-of-space error <ref type="bibr">(FTY 3 &amp; FPL 3</ref> ) during the shuffling phase (FTM 1 ) and reports it to AM which incorrectly treats the exception as a connection problem between the mapper and reducer. Here, AM always "blames" the mapper and runs a new mapper which will communicate with the out-of-space reducer again which then repeats the recovery process n times where n is the configured number of retries.</p><p>Another O(n) recovery is in MR-5060 (scenario:</p><formula xml:id="formula_7">TPL 1 &amp; TPL 3 &amp; FTY 1 &amp; FPL 2 )</formula><p>where a reducer remotely reads (TPL 1 ) from many mappers (e.g., M1..Mn) that reside in the same node <ref type="bibr">(TPL 3</ref> ). Here, Hadoop only makes one connection between the reducer and the map node; the reducer will read from each mapper at a time. If the map node is extremely slow (FTY 1 &amp; FPL 2 ), the reducer only reports to AM about the flaky mapper (e.g., M1) and then continues reading from the next mapper (e.g., M2), ineffectively serializing the recovery of the mappers. Recovery is O(n) where n is the maximum number of mappers that can reside in a node; the number can be large in high-end nodes.</p><p>O(n) recovery dated back to early years of Hadoop. For example, in MR-1800 (scenario:</p><formula xml:id="formula_8">TPL 1 &amp; TPL 4 &amp; FTY 4 &amp; TOP 1 )</formula><p>, the mappers and reducers are placed in different racks (TPL 1 &amp; TPL 4 ) with slow inter-rack switch (FTY 4 ) which Hadoop does not monitor. Hadoop incorrectly blacklists the map nodes and re-runs the mappers in the same mapper rack (due to data locality). The recovery repeats n times where n is the number nodes in the mapper rack. Interestingly, the problem is not as severe if the number of nodes per rack is small (TOP 2 ).</p><p>โข Long halt from long lock contention. Sometimes certain operations can be halted unintentionally and must wait for a "big" lock held by other time-consuming operations. For example, in MR-4749, a job operation is holding a lock while cleaning up large temporary data (JSZ 1 ) while another operation from the same job needs to process a job-commit message. As the commit message is not processed, the job completion is delayed until the background cleaning operation completes.</p><p>Similarly, in an earlier bug, MR-1247, a task localization process that downloads big jar files (JSZ 1 ) holds a lock that prevents the TaskTracker to send heartbeat messages to the JobTracker. The TaskTracker is considered dead, and the corresponding tasks are re-run in another node and hits the same long localization problem repeatedly. Unintentional long lock contention occasionally appears in Hadoop development (e.g., MR-2209, MR-2364, MR-4576, MR-4813).</p><p>In summary, performance bugs continue to re-appear with different root causes. There are many more possible scenarios beyond what we list in <ref type="table" target="#tab_2">Table 2</ref>. With the anatomy, we manage to describe performance bugs systematically. Our bug descriptions highlight that in order to catch performance bugs prior to deployment, a wide range of deployment scenarios must be exercised. To do so with speed and good coverage is a major challenge.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3">Towards a New Solution</head><p>The previous sections paint the need for a performance verification framework that achieves four goals: (1) fast, (2) complete, covering many possible deployment scenarios, (3) runs in pre-deployment, and most importantly (4) directly checks implementation-level code. To the best of our knowledge, there is no framework that achieves all of the four goals.</p><p>To further clarify our goals, we are interested in detecting performance failures (e.g., a job takes 5x longer time to finish than expected) along with their root causes, which what we imply as "performance verification". Our focus is not in finding performance sub-optimizations (e.g., opportunities to increase job completion time by 10%).</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.1">Formal Modeling Tools</head><p>To achieve the first three goals, one promising way is to adopt formal modeling tools (e.g., CPN, PlusCal). In our work, we chose Colored Petri Nets (CPN) as it is popular in the modeling community and brings significant advantages in performance verification.</p><p>First, CPN is generic. One can model almost any system with such tools <ref type="bibr" target="#b5">[6,</ref><ref type="bibr" target="#b23">24]</ref> by simply creating "places", "transitions", and "arcs" containing user-defined functions in Standard ML. Most importantly, CPN incorporates the notion of logical time, allowing us to inject slowdowns, express the expected performance, measure the observed performance, and compare the two.</p><p>Second, CPN is fast. It executes the model in logical steps and thus alleviates the cost of setup and cleanup time in testing real distributed systems (e.g., preparing input files, bootstrapping nodes) which can take seconds per experiment <ref type="bibr" target="#b7">[8,</ref><ref type="bibr" target="#b10">11,</ref><ref type="bibr" target="#b19">20]</ref>. Furthermore, Section 2 highlights that many performance bugs surface when there is some hardware slowdown ("limpware" <ref type="bibr" target="#b7">[8]</ref>). In direct performance testing, slowdown must be injected in wallclock time and incurs orders of magnitude longer testing time. With CPN, slowdown can be simulated in logical time and the model "moves forward" rapidly.</p><p>Finally, CPN is formal. It has a built-in model checker that can permute all non-deterministic events. We write assertions (e.g., error if a job takes more than 100 steps) and CPN can permute all the defined conditions ( <ref type="table" target="#tab_2">Table  2</ref>). Note that we do not change deterministic policies in the target code, but whenever some policies use randomness, CPN can permute them.</p><p>To make sure this is the right adoption, we manually create CPN models of several protocols (speculative execution, read/write, etc.) that are relevant to surface 18 performance bugs in Hadoop, 2 in HBase, and 2 in HDFS. We then let CPN permute some conditions such as fault placement (FPL), data source (DSR), and many others. CPN model checker provides the result (replayable paths leading to the assertion violations) in just less than 5 minutes. This satisfactory result proves that CPN is powerful enough for our purpose, achieving the first three goals mentioned above. But now, we must face the hardest challenge: achieving the 4th goal.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.2">Challenges</head><p>Although formal modeling tools are powerful, there is little adoption within the systems community. Two biggest reasons are that developers must build models manually and the resulting hand-made models do not reflect the real complexity of the systems. Thus, to achieve our 4th goal, we need to build a system-to-model compiler that can automatically parse real distributed systems code including their protocols, states, and communications into checkable models. In our case, we need to convert systems written in Java to CPN models. However, these two worlds have different programming paradigms. There are deep challenges both from the programming language as well as the system perspectives.</p><p>โข Imperative vs. Functional: Java is an imperative language while CPN is based on functional language. Developers often write big Java functions as direct changes to stack and heap are easy. Functional language typically requires smaller modular functions. This implies big functions must be re-written into smaller modular functions for direct parsing.</p><p>โข Object Oriented vs. Sets: Systems in Java use objects and a variety of data structures (hash table, list, etc.). CPN represents data only with multisets (sets of key-values where the values can also be sets). For straightforward Java-to-CPN conversion, data representations should be converted into flat data structures</p><p>โข By Reference vs. By Value: Java is all about references, while CPN does not have the same support. In CPN, changing states require writing new key-values to the appropriate set.</p><p>โข Complex Dataflow vs. Simple Transition: One major challenge from the systems side involves complex dataflows and system constructs such as threads, RPCs, heartbeats, queues, locks and condition variables. CPN on the other hand only understands places, transitions, and arcs. Thus, the compiler must convert high-level system constructs into simpler constructs.</p><p>โข Wall-clock Time vs. Logical Steps: Distributed protocols operate on wall-clock time (e.g., timeouts), but CPN works based on logical steps.</p><p>Although we specifically discuss Java-to-CPN, we believe the challenges and our solution are applicable to many other system-to-model conversions.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.3">A Prototype of SPV</head><p>We propose System Performance Verifier (SPV), a new framework that takes real system code (e.g., Hadoop in Java) and automatically generates the model, environment, and scenarios to permute. As part of SPV, we have built SysJava-to-CPN compiler in 5305 lines on top of WALA <ref type="bibr" target="#b0">[1]</ref>. SysJava implies that the target system must be converted into "SysJava style" as described below. We do not convert arbitrary Java programs to CPN, which is hard to achieve and no such tool exists today. Below, we briefly discuss our high-level methodologies and how we have addressed many of the aforementioned challenges. Due to space constraints, we omit the detailed descriptions of how CPN and SPV work.</p><p>โข SysJava: Our goal is to build a generic compiler that can take any Java-based distributed systems without a single change in the compiler. Because of the massive challenges mentioned in the previous section, the compiler cannot simply take vanilla code. Instead, the target system must be re-structured and annotated into a "friendlier" code for the compiler. However, we do not change the program logic. For ease of reference, we name this "SysJava". We have created methodologies to convert Java-based distributed systems into SysJava style, methodologies such as state annotations, flattening object-oriented classes to database key-value styles, code refactoring big functions into CRUD (create-readupdate-delete) functions, and many others. This is the main effort that developers need to do to integrate SPV. This process can be potentially simplified if declarative data-centric languages are adopted in the future <ref type="bibr" target="#b2">[3]</ref>.</p><p>โข SysJava-to-CPN compiler: With SysJava programs ready, the compiler can generate a representative model. Our compiler will parse data flows, function calls, RPC calls, threads, user-defined functions, and all other forms of structures and data communications. For annotated computations and I/Os, the compiler can add logical time (e.g., 1 step). The compiler also marks I/Os that can be delayed and how long (e.g., 20 steps) and treat them as inputs for the model checker.</p><p>โข CPN model checker: Checking the generated model is as simple as clicking a "play button" in CPN. Before that, we easily setup external configurations such as how many nodes to run, how many tasks per job, etc.The compiler already provides to the model checker the scenario types and possible values as shown in <ref type="table" target="#tab_2">Table 2</ref>.</p><p>Just like any other compiler and verification tools, we note that SPV contains many complex functionalities not fully described in this paper. The complexity is a must as we move the burden from the developers (e.g., manual modeling) into SPV which then results in an overall process that is fast, complete, and automated.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.4">Preliminary Evaluation</head><p>We modified Hadoop MapReduce 1.2.1 in 1067 LOC to convert it into SysJava style. These changes only involve speculation-related components such as job tracker, task tracker, scheduler, and launcher, map and reduce tasks, along with the message communications. We consider the changes minimal as we only re-structure the code but not the logic. Our compiler automatically generates 307 places, 165 transitions, and 733 arcs, collectively 20x larger than our earlier hand-made model. Our SPV can currently permute TPL (with 8 conditions), DSR (3), DLC (2), DSR (3), FTY (1), and FPL (1), with a total of 34 scenarios exercised. We run the CPN model checker with three nodes and one job with two tasks. (In the future, we will scale up the evaluation). The model checker explores 277,847 states and 415,986 arcs and finish with 30 assertion violations that unearth the four performance bugs we inserted. This process initially ran for 1.5 hour but we found interesting optimization opportunities that can significantly reduce the checking time. Overall, SPV is orders of magnitude faster and more complete than performance testing with slowdown injections <ref type="bibr" target="#b7">[8]</ref>.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4">Conclusion</head><p>The complexity of cloud distributed systems and their deployment environments have outpaced existing testing and debugging tools <ref type="bibr" target="#b11">[12,</ref><ref type="bibr" target="#b18">19]</ref>. The use of formal methods has become necessary <ref type="bibr" target="#b13">[14]</ref>, but the gap between real systems code and hand-made models is still wide. We propose a research direction that bridges the two worlds. We have addressed many important challenges and shown a successful prototype for Hadoop. To show the generality of SPV, we are integrating it into HBase and HDFS. In this work, we focus on performance bugs, but we believe SPV can solve many other deep problems such as distributed deadlock and scheduling problems <ref type="bibr" target="#b11">[12]</ref>.</p></div><figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_1" validated="false"><head>is uncovered when an</head><label></label><figDesc></figDesc><table>Scenario Type 

Possible Conditions 

DLC: Data Locality 
(1) Read from remote disk, (2) read from local disk, ... 
DSR: Data Source 
(1) Some tasks read from same datanode, (2) all tasks read from different datanodes, ... 
JCH: Job Characteristic 
Map-reduce is (1) many-to-all, (2) all-to-many, (3) large fan-in, (4) large fan-out, ... 
JSZ: Job Size 
(1) 1 GB jar file, (2) 1 MB jar file, ... 
LSZ: Load Size 
(1) Thousands of tasks, (2) small number of tasks, ... 
FTY: Fault Type 
(1) Slow node/NIC, (2) Node disconnect/packet drop, (3) Disk error/out of space, (4) Rack switch, ... 
FPL: Fault Placement 
Slowdown fault injection at the (1) source datanode, (2) mapper, (3) reducer, ... 
FGR: Fault Granularity 
(1) Single disk/NIC, (2) single node (deadnode), (3) entire rack (network switch), ... 
FTM: Fault Timing 
(1) During shuffling, (2) during 95% of task completion, ... 
TOP: Topology Scenario (1) 30 nodes per rack, (2) 3 nodes per rack, ... 
TPL: Task Placement 
(1) Mappers and reducers are in different nodes, (2) AM and reducers in different nodes, (3) Mappers 
are in the same node, (4) Most of reducers placed in the same rack, ... 

</table></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_2" validated="false"><head>Table 2 :</head><label>2</label><figDesc></figDesc><table>Anatomy of scenario root causes of performance bugs. The table lists scenario types and conditions that 

appeared in the 89 performance bugs that we studied. 

</table></figure>

			<note place="foot" n="1"> The bugs covered here were reported between 2009-2013. We study the discussions and patches and ignore &quot;easy&quot; performance bugs (e.g., misuse of Java classes and libraries). The bugs that we cite in this paper contain hyperlinks (e.g., MR-5533).</note>
		</body>
		<back>

			<div type="acknowledgement">
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5">Acknowledgments</head><p>We thank the anonymous reviewers for their tremendous feedback and comments. This material is based upon work supported by the NSF (grant Nos. CCF-1321958, CCF-1336580, and CNS-1350499) and generous supports from NetApp.</p></div>
			</div>

			<div type="annex">
<div xmlns="http://www.tei-c.org/ns/1.0"><head>A Discussion Topics for the Workshop</head><p>Below are the discussion points that we hope to bring up at the workshop:</p><p>โข Is it time for pre-deployment detection of performance bugs? For decades, the state of the art of debugging distributed systems performance is by tracing, monitoring and post-mortem analysis. As distributed systems become the backbone of cloud computing, is it time to find revolutionary approaches that find the problems prior to deployment? Is it a big priority for cloud practitioners? Is performance stability as important as availability?</p><p>โข Bridging systems code and formal methods. Are cloud engineers and practitioners willing to adopt formal methods for verifying performance stability? The Amazon DynamoDB team clearly spent deep efforts in adopting PlusCal <ref type="bibr" target="#b13">[14]</ref>; it is important because their database is the core of many Amazon services. Are other cloud architects willing to do the same? Is our approach attractive? Is more research in this space needed, where we bridge the big gap between the two worlds of real systems code and formal methods?</p><p>โข Future of data-centric languages. A key to make our approach simple is if the target systems are written in data-centric languages (e.g., <ref type="bibr" target="#b2">[3]</ref>). What do cloud practitioners see in terms of the future of data-centric languages?</p><p>โข Beyond Hadoop. Distributed systems are not just about Hadoop. Many people build their own distributed services on top of resources in private and public clouds. In addition, with more "software" in the networking area (e.g., SDN), we believe the concept of finding performance bugs in distributed systems will be widely applicable beyond Big Data systems.</p><p>โข Root Cause Anatomy of Performance Bugs. We believe we have successfully created a structured anatomy of root causes behind performance bugs. Some are depicted in <ref type="table">Table 2</ref>. We would like to hear more interesting anecdotes from cloud practitioners whether such anatomy is useful.</p><p>โข Beyond Performance Bugs. What kind of other complex distributed system bugs that can be detected by extending SPV?</p></div>			</div>
			<div type="references">

				<listBibl>

<biblStruct xml:id="b0">
	<monogr>
				<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><forename type="middle">J</forename><surname>Watson</surname></persName>
		</author>
		<ptr target="http://wala.sourceforge.net/wiki/index.php/Main_Page" />
		<title level="m">Libraries for Analysis (WALA</title>
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b1">
	<analytic>
		<title level="a" type="main">Performance Debugging for Distributed Systems of Black Boxes</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Marcos</forename><forename type="middle">K</forename><surname>Aguilera</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Jeffrey</forename><forename type="middle">C</forename><surname>Mogul</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Janet</forename><forename type="middle">L</forename><surname>Wiener</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Patrick</forename><surname>Reynolds</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Athicha</forename><surname>Muthitacharoen</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 19th ACM Symposium on Operating Systems Principles (SOSP)</title>
		<meeting>the 19th ACM Symposium on Operating Systems Principles (SOSP)</meeting>
		<imprint>
			<date type="published" when="2003" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b2">
	<analytic>
		<title level="a" type="main">BOOM Analytics: Exploring Data-Centric, Declarative Programming for the Cloud</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Peter</forename><surname>Alvaro</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Tyson</forename><surname>Condie</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Neil</forename><surname>Conway</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Khaled</forename><surname>Elmeleegy</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Joseph</forename><forename type="middle">M</forename><surname>Hellerstein</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Russell</forename><forename type="middle">C</forename><surname>Sears</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 2010 EuroSys Conference (EuroSys)</title>
		<meeting>the 2010 EuroSys Conference (EuroSys)</meeting>
		<imprint>
			<date type="published" when="2010" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b3">
	<analytic>
		<title level="a" type="main">Using Magpie for request extraction and workload modelling</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Paul</forename><surname>Barham</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Austin</forename><surname>Donnelly</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Rebecca</forename><surname>Isaacs</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Richar</forename><surname>Mortier</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 6th Symposium on Operating Systems Design and Implementation (OSDI)</title>
		<meeting>the 6th Symposium on Operating Systems Design and Implementation (OSDI)</meeting>
		<imprint>
			<date type="published" when="2004" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b4">
	<analytic>
		<title level="a" type="main">Benchmarking Cloud Serving Systems with YCSB</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Brian</forename><surname>Cooper</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Adam</forename><surname>Silberstein</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Erwin</forename><surname>Tam</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Raghu</forename><surname>Ramakrishnan</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Russell</forename><surname>Sears</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 1st ACM Symposium on Cloud Computing (SoCC)</title>
		<meeting>the 1st ACM Symposium on Cloud Computing (SoCC)</meeting>
		<imprint>
			<date type="published" when="2010" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b5">
	<analytic>
		<title level="a" type="main">From Code to Coloured Petri Nets: Modelling Guide</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Anna</forename><surname>Dedova</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Laure</forename><surname>Petrucci</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">International Workshop on Petri Nets and Software Engineering (PNSE)</title>
		<imprint>
			<date type="published" when="2012" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b6">
	<analytic>
		<title/>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Ankush</forename><surname>Desai</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Vivek</forename><surname>Gupta</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Ethan</forename><surname>Jackson</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Shaz</forename><surname>Qadeer</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Sriram</forename><surname>Rajamani</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Damien</forename><surname>Zufferey</surname></persName>
		</author>
		<ptr target="http://research.microsoft.com/pubs/177118/tr.pdf" />
	</analytic>
	<monogr>
		<title level="j">P: Safe Asynchronous Event-Driven Programming</title>
		<imprint>
			<date type="published" when="2012" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b7">
	<analytic>
		<title level="a" type="main">Limplock: Understanding the Impact of Limpware on Scale-Out Cloud Systems</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Thanh</forename><surname>Do</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Mingzhe</forename><surname>Hao</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Tanakorn</forename><surname>Leesatapornwongsa</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Tiratat</forename><surname>Patana-Anake</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Haryadi</forename><forename type="middle">S</forename><surname>Gunawi</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 4th ACM Symposium on Cloud Computing (SoCC)</title>
		<meeting>the 4th ACM Symposium on Cloud Computing (SoCC)</meeting>
		<imprint>
			<date type="published" when="2013" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b8">
	<analytic>
		<title level="a" type="main">Extensible Distributed Tracing from Kernels to Clusters</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Ulfar</forename><surname>Erlingsson</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Marcus</forename><surname>Peinado</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Simon</forename><surname>Peter</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Mihai</forename><surname>Budiu</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Fay</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 23rd ACM Symposium on Operating Systems Principles (SOSP)</title>
		<meeting>the 23rd ACM Symposium on Operating Systems Principles (SOSP)</meeting>
		<imprint>
			<date type="published" when="2011" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b9">
	<analytic>
		<title level="a" type="main">X-Trace: A Pervasive Network Tracing Framework</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Rodrigo</forename><surname>Fonseca</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">George</forename><surname>Porter</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Randy</forename><forename type="middle">H</forename><surname>Katz</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Scott</forename><surname>Shenker</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Ion</forename><surname>Stoica</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 4th Symposium on Networked Systems Design and Implementation (NSDI)</title>
		<meeting>the 4th Symposium on Networked Systems Design and Implementation (NSDI)</meeting>
		<imprint>
			<date type="published" when="2007" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b10">
	<analytic>
		<title level="a" type="main">FATE and DESTINI: A Framework for Cloud Recovery Testing</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Haryadi</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Thanh</forename><surname>Gunawi</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Pallavi</forename><surname>Do</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Peter</forename><surname>Joshi</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Joseph</forename><forename type="middle">M</forename><surname>Alvaro</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Andrea</forename><forename type="middle">C</forename><surname>Hellerstein</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Arpaci-Dusseau</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">H</forename><surname>Remzi</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Koushik</forename><surname>Arpaci-Dusseau</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Dhruba</forename><surname>Sen</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Borthakur</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 8th Symposium on Networked Systems Design and Implementation (NSDI)</title>
		<meeting>the 8th Symposium on Networked Systems Design and Implementation (NSDI)</meeting>
		<imprint>
			<date type="published" when="2011" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b11">
	<analytic>
		<title level="a" type="main">What Bugs Live in the Cloud? A Study of 3000+ Issues in Cloud Systems</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Haryadi</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Mingzhe</forename><surname>Gunawi</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Tanakorn</forename><surname>Hao</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Tiratat</forename><surname>Leesatapornwongsa</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Thanh</forename><surname>Patana-Anake</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Jeffry</forename><surname>Do</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Adityatama</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Kurnia</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Agung</forename><surname>Eliazar</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Jeffrey</forename><forename type="middle">F</forename><surname>Laksono</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Vincentius</forename><surname>Lukman</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Anang</forename><surname>Martin</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Satria</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 5th ACM Symposium on Cloud Computing (SoCC)</title>
		<meeting>the 5th ACM Symposium on Cloud Computing (SoCC)</meeting>
		<imprint>
			<date type="published" when="2014" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b12">
	<analytic>
		<title level="a" type="main">Practical Software Model Checking via Dynamic Interface Reduction</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Huayang</forename><surname>Guo</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Ming</forename><surname>Wu</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Lidong</forename><surname>Zhou</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Gang</forename><surname>Hu</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Junfeng</forename><surname>Yang</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Lintao</forename><surname>Zhang</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 23rd ACM Symposium on Operating Systems Principles (SOSP)</title>
		<meeting>the 23rd ACM Symposium on Operating Systems Principles (SOSP)</meeting>
		<imprint>
			<date type="published" when="2011" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b13">
	<monogr>
				<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">James</forename><surname>Hamilton</surname></persName>
		</author>
		<ptr target="http://goo.gl/PBF1VK" />
		<title level="m">Challenges in Designing at Scale: Formal Methods in Building Robust Distributed Systems</title>
		<imprint>
			<date type="published" when="2014" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b14">
	<analytic>
		<title level="a" type="main">PREFAIL: A Programmable Tool for Multiple-Failure Injection</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Pallavi</forename><surname>Joshi</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Haryadi</forename><forename type="middle">S</forename><surname>Gunawi</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Koushik</forename><surname>Sen</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 26th Annual ACM SIGPLAN Conference on Object-Oriented Programming, Systems, Languages, and Applications (OOPSLA)</title>
		<meeting>the 26th Annual ACM SIGPLAN Conference on Object-Oriented Programming, Systems, Languages, and Applications (OOPSLA)</meeting>
		<imprint>
			<date type="published" when="2011" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b15">
	<analytic>
		<title level="a" type="main">Catch Me If You Can: Performance Bug Detection in the Wild</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Milan</forename><surname>Jovic</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Andrea</forename><surname>Adamoli</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Matthias</forename><surname>Hauswirth</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 26th Annual ACM SIGPLAN Conference on Object-Oriented Programming, Systems, Languages, and Applications (OOPSLA)</title>
		<meeting>the 26th Annual ACM SIGPLAN Conference on Object-Oriented Programming, Systems, Languages, and Applications (OOPSLA)</meeting>
		<imprint>
			<date type="published" when="2011" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b16">
	<analytic>
		<title level="a" type="main">Finding latent performance bugs in systems implementations</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Charles</forename><surname>Killian</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Karthik</forename><surname>Nagaraj</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Salman</forename><surname>Pervez</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Ryan</forename><surname>Braud</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">James</forename><forename type="middle">W</forename><surname>Anderson</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Ranjit</forename><surname>Jhala</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the Eighteenth ACM SIGSOFT International Symposium on Foundations of Software Engineering</title>
		<meeting>the Eighteenth ACM SIGSOFT International Symposium on Foundations of Software Engineering</meeting>
		<imprint>
			<date type="published" when="2010" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b17">
	<monogr>
		<title level="m" type="main">Specifying Systems: The TLA+ Language and Tools for Hardware and Software Engineers</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Leslie</forename><surname>Lamport</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2002" />
			<publisher>Addison-Wesley</publisher>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b18">
	<analytic>
		<title level="a" type="main">The Case for Drill-Ready Cloud Computing</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Tanakorn</forename><surname>Leesatapornwongsa</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Haryadi</forename><forename type="middle">S</forename><surname>Gunawi</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 5th ACM Symposium on Cloud Computing (SoCC)</title>
		<meeting>the 5th ACM Symposium on Cloud Computing (SoCC)</meeting>
		<imprint>
			<date type="published" when="2014" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b19">
	<analytic>
		<title level="a" type="main">SAMC: Semantic-Aware Model Checking for Fast Discovery of Deep Bugs in Cloud Systems</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Tanakorn</forename><surname>Leesatapornwongsa</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Mingzhe</forename><surname>Hao</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Pallavi</forename><surname>Joshi</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Jeffrey</forename><forename type="middle">F</forename><surname>Lukman</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Haryadi</forename><forename type="middle">S</forename><surname>Gunawi</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 11th Symposium on Operating Systems Design and Implementation (OSDI)</title>
		<meeting>the 11th Symposium on Operating Systems Design and Implementation (OSDI)</meeting>
		<imprint>
			<date type="published" when="2014" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b20">
	<monogr>
		<title level="m" type="main">Use of Formal Methods at Amazon Web Services</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Chris</forename><surname>Newcombe</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Tim</forename><surname>Rath</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Fan</forename><surname>Zhang</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Bogdan</forename><surname>Munteanu</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Marc</forename><surname>Brooker</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Michael</forename><surname>Deardeuff</surname></persName>
		</author>
		<ptr target="http://research.microsoft.com/en-us/um/people/lamport/tla/formal-methods-amazon.pdf" />
		<imprint>
			<date type="published" when="2014" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b21">
	<analytic>
		<title level="a" type="main">Pip: Detecting the unexpected in distributed systems</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Patrick</forename><surname>Reynolds</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Janet</forename><forename type="middle">L</forename><surname>Wiener</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Jeffrey</forename><forename type="middle">C</forename><surname>Mogul</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Mehul</forename><forename type="middle">A</forename><surname>Shah</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Charles</forename><surname>Killian</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Amin</forename><surname>Vahdat</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 3rd Symposium on Networked Systems Design and Implementation (NSDI)</title>
		<meeting>the 3rd Symposium on Networked Systems Design and Implementation (NSDI)</meeting>
		<imprint>
			<date type="published" when="2006" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b22">
	<analytic>
		<title level="a" type="main">Diagnosing Performance Changes by Comparing Request Flows</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Raja</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Alice</forename><forename type="middle">X</forename><surname>Sambasivan</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Michael</forename><forename type="middle">De</forename><surname>Zheng</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Elie</forename><surname>Rosa</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Spencer</forename><surname>Krevat</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Michael</forename><surname>Whitman</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">William</forename><surname>Stroucken</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Lianghong</forename><surname>Wang</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Gregory</forename><forename type="middle">R</forename><surname>Xu</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Ganger</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 8th Symposium on Networked Systems Design and Implementation (NSDI)</title>
		<meeting>the 8th Symposium on Networked Systems Design and Implementation (NSDI)</meeting>
		<imprint>
			<date type="published" when="2011" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b23">
	<analytic>
		<title level="a" type="main">Gadara: Dynamic Deadlock Avoidance for Multithreaded Programs</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Yin</forename><surname>Wang</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Terence</forename><surname>Kelly</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Manjunath</forename><surname>Kudlur</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Stephane</forename><surname>Lafortune</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Scott</forename><surname>Mahlke</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 8th Symposium on Operating Systems Design and Implementation (OSDI)</title>
		<meeting>the 8th Symposium on Operating Systems Design and Implementation (OSDI)</meeting>
		<imprint>
			<date type="published" when="2008" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b24">
	<monogr>
		<title level="m" type="main">Verifying Parallel Algorithms and Programs Using Coloured Petri Nets</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Michael</forename><surname>Westergaard</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2012" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b25">
	<analytic>
		<title level="a" type="main">Detecting Large-Scale System Problem Detection by Mining Console Logs</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Wei</forename><surname>Xu</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Ling</forename><surname>Huang</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Armando</forename><surname>Fox</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">David</forename><surname>Patterson</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Michael</forename><surname>Jordan</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 22nd ACM Symposium on Operating Systems Principles (SOSP)</title>
		<meeting>the 22nd ACM Symposium on Operating Systems Principles (SOSP)</meeting>
		<imprint>
			<date type="published" when="2009" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b26">
	<analytic>
		<title level="a" type="main">MODIST: Transparent Model Checking of Unmodified Distributed Systems</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Junfeng</forename><surname>Yang</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Tisheng</forename><surname>Chen</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Ming</forename><surname>Wu</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Zhilei</forename><surname>Xu</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Xuezheng</forename><surname>Liu</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Haoxiang</forename><surname>Lin</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Mao</forename><surname>Yang</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Fan</forename><surname>Long</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Lintao</forename><surname>Zhang</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Lidong</forename><surname>Zhou</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 6th Symposium on Networked Systems Design and Implementation (NSDI)</title>
		<meeting>the 6th Symposium on Networked Systems Design and Implementation (NSDI)</meeting>
		<imprint>
			<date type="published" when="2009" />
		</imprint>
	</monogr>
</biblStruct>

				</listBibl>
			</div>
		</back>
	</text>
</TEI>
