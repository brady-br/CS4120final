<?xml version="1.0" encoding="UTF-8"?>
<TEI xmlns="http://www.tei-c.org/ns/1.0" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
xsi:schemaLocation="http://www.tei-c.org/ns/1.0 /Users/atharsefid/Desktop/grobid-0.5.3/grobid-home/schemas/xsd/Grobid.xsd"
 xmlns:xlink="http://www.w3.org/1999/xlink">
	<teiHeader xml:lang="en">
		<encodingDesc>
			<appInfo>
				<application version="0.5.3" ident="GROBID" when="2020-09-29T02:54+0000">
					<ref target="https://github.com/kermitt2/grobid">GROBID - A machine learning software for extracting information from scholarly documents</ref>
				</application>
			</appInfo>
		</encodingDesc>
		<fileDesc>
			<titleStmt>
				<title level="a" type="main">Concurrency Attacks</title>
			</titleStmt>
			<publicationStmt>
				<publisher/>
				<availability status="unknown"><licence/></availability>
			</publicationStmt>
			<sourceDesc>
				<biblStruct>
					<analytic>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Junfeng</forename><surname>Yang</surname></persName>
							<affiliation key="aff0">
								<orgName type="department">Department of Computer Science</orgName>
								<orgName type="institution">Columbia University</orgName>
							</affiliation>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Ang</forename><surname>Cui</surname></persName>
							<affiliation key="aff0">
								<orgName type="department">Department of Computer Science</orgName>
								<orgName type="institution">Columbia University</orgName>
							</affiliation>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Sal</forename><surname>Stolfo</surname></persName>
							<affiliation key="aff0">
								<orgName type="department">Department of Computer Science</orgName>
								<orgName type="institution">Columbia University</orgName>
							</affiliation>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Simha</forename><surname>Sethumadhavan</surname></persName>
							<affiliation key="aff0">
								<orgName type="department">Department of Computer Science</orgName>
								<orgName type="institution">Columbia University</orgName>
							</affiliation>
						</author>
						<title level="a" type="main">Concurrency Attacks</title>
					</analytic>
					<monogr>
						<imprint>
							<date/>
						</imprint>
					</monogr>
				</biblStruct>
			</sourceDesc>
		</fileDesc>
		<profileDesc>
			<abstract>
				<p>Just as errors in sequential programs can lead to security exploits, errors in concurrent programs can lead to concurrency attacks. Questions such as whether these attacks are feasible and what characteristics they have remain largely unknown. In this paper, we present a preliminary study of concurrency attacks and the security implications of real world concurrency errors. Our study yields several interesting findings. For instance, we observe that the exploitability of a concurrency error depends on the duration of the timing window within which the error may occur. We further observe that attackers can increase this window through carefully crafted inputs. We also find that four out of five commonly used sequential defenses become unsafe when applied to concurrent programs. Based on our findings, we propose new defense directions and fixes to existing defenses.</p>
			</abstract>
		</profileDesc>
	</teiHeader>
	<text xml:lang="en">
		<body>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="1">Introduction</head><p>Concurrent programs have become pervasive and critical because of the move to multicore processors and deployment of large-scale distributed systems. These programs continue to remain difficult to write, test, and debug than sequential versions <ref type="bibr" target="#b18">[23,</ref><ref type="bibr" target="#b26">31]</ref>, and this impediment has led to subtle and serious errors in concurrent programs <ref type="bibr" target="#b20">[25]</ref>. Just as errors in sequential programs can lead to security exploits, concurrency errors may lead to concurrency attacks which allow attackers to violate confidentiality, integrity and availablity of systems. To defend against these attacks, we need to better understand concurrency errors and how they can or have been exploited. Prior work <ref type="bibr" target="#b20">[25]</ref> has studied properties of many concurrency errors, but it focused on general concurrency errors, not the exploitable ones, which our study reveals to have different properties.</p><p>In this paper, we present a study of concurrency attacks and the security implications of concurrency errors. We focus on four questions: ยง Do concurrency attacks occur in the wild? In theory any bug-concurrent or sequential-may be exploited to compromise security but we want to know if real-world concurrency bugs have been exploited in practice. If concurrency attacks are not practicable we need not worry about them. (Section 2). ยง What factors make concurrency errors easy to exploit? If attackers have to jump through hoops to exploit any concurrency error, they will likely go after other low-hanging errors. (Section 3). ยง Can we leverage these factors to improve the effectiveness of existing concurrency error detection techniques? (Section 4). ยง How do concurrency attacks weaken existing defenses such as taint tracking and intrusion detection and how can we fix them? (Section 5).</p><p>Our study yields several interesting findings. We find that concurrency attacks are indeed viable as evidenced by numerous exploitable concurrency errors in the CVE database <ref type="bibr" target="#b2">[3]</ref>. Interestingly, few of these errors have appeared in prior studies or race detection literature, suggesting that the research communities may not be aware their existence or impact. We observe that ability to exploit a concurrency error depends on the size of the timing window within which the error may occur which we call the vulnerability window. Further, an attacker can expand this window through carefully crafted inputs. Our study shows that many common mechanisms in existing defenses will not work against concurrency attacks. We propose fixes to some of these weaknesses and also propose new defense directions.</p><p>We hope that our initial work on concurrency attacks will further stress the importance of ongoing work on better programming languages and specifications <ref type="bibr" target="#b7">[12,</ref><ref type="bibr" target="#b15">20]</ref>, runtime systems <ref type="bibr" target="#b4">[9,</ref><ref type="bibr" target="#b5">10,</ref><ref type="bibr" target="#b11">16,</ref><ref type="bibr" target="#b12">17,</ref><ref type="bibr" target="#b19">24]</ref>, and tools <ref type="bibr" target="#b13">[18,</ref><ref type="bibr" target="#b17">22,</ref><ref type="bibr" target="#b21">26,</ref><ref type="bibr" target="#b31">36,</ref><ref type="bibr" target="#b33">38]</ref> for concurrent programs.</p><p>In addition, we hope that it will raise awareness of concurrency attacks and motivate fellow researchers to work on preventing them. The raw data including URLs to the concurrency errors and sometimes their exploits and our detailed categorization of the errors studied are available at http://systems. cs.columbia.edu/archive/pub/2012/06/ concurrency-attacks.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2">Concurrency Attacks Are Real</head><p>To construct concurrency attacks, we initially tried exploiting concurrency errors in existing benchmarks <ref type="bibr" target="#b16">[21,</ref><ref type="bibr" target="#b20">25]</ref>. Unfortunately, quite a few of these errors cannot be triggered without manually injecting sleep() calls. Moreover, many, such as the errors in SPLASH2, are practically harmless from a security perspective. The worst ones tend to cause only program crashes, not the security exploits we want.</p><p>We then turned to the race section of the CVE database <ref type="bibr" target="#b2">[3]</ref>, which fortunately lists many exploitable concurrency errors besides the familiar file system Timeof-Check-to-Time-of-Use (TOCTOU) races <ref type="bibr" target="#b22">[27,</ref><ref type="bibr" target="#b27">32,</ref><ref type="bibr" target="#b28">33,</ref><ref type="bibr" target="#b30">35]</ref>. We also examined the bug databases of popular software. From these sources, we collected concurrency errors that are exploitable and have detailed description, such as a well-written error report, sample exploit code, or a source patch. We then carefully inspected these materials to understand the cause of the errors and how they can be exploited. Although collecting these errors is not difficult, understanding, categorizing, and sometimes reproducing them absorbed most of our effort. These errors range across four main OS environments, including Windows, MacOS X, Linux, and Apple iOS. These errors are from a diverse set of 23 real-world programs, including kernels such as the Linux, system libraries such as GNU Libc, and user-space programs such as KDE, Apache, and Chrome. We hope this diversity increases the coverage and value of our dataset.</p><p>In the remaining of this section, we present five examples of exploitable concurrency errors.</p><p>Linux. <ref type="figure" target="#fig_0">Figure 1</ref> shows an example concurrency error that corrupts pointer data in the Linux kernel. This violation is quite serious: a working exploit of this violation enables a local user to gain root access or execute arbitrary code within ring 0 <ref type="bibr">[6,</ref><ref type="bibr" target="#b24">29]</ref>. Specifically, this violation occurs as follows. To load a shared library in ELF format, a process issues system call uselib(), which subsequently calls function load elf binary() <ref type="figure" target="#fig_0">(Figure 1</ref>). This function correctly holds the semaphore mmap sem the first time it modifies the current process's memory map structures (line 2-4). However, when it modifies these data structures the second time by calling do brk() (line 7), it does not hold the right semaphore. Thus, another thread  // signal all threads on list to set user id.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5">:</head><p>// a thread is represented as a stack 6 : list for each (runp, &amp;stack used) 7 :</p><formula xml:id="formula_0">{ 8 : struct pthread *t = list entry (runp, struct pthread, list); 9 : if (t == self) 10: continue; 11:</formula><p>setxid signal thread (cmdp, t); 12: } 13: lll unlock (stack cache lock); 14: // ERROR: does not wait for other threads to acknowledge 15: } 16: allocate stack(. . .) { // called when a new thread is created 17: lll lock (stack cache lock); 18: list add (&amp;pdโ&gt;list, &amp;stack used); 19: lll unlock (stack cache lock); 20: } <ref type="figure">Figure 2</ref>: Glibc setuid race.</p><p>in the same process may be modifying the memory map structures concurrently while this do brk() call is running, causing kernel memory corruption.</p><p>Glibc. <ref type="figure">Figure 2</ref> shows a concurrency error that corrupts the user identities, and allows privilege escalation attacks <ref type="bibr" target="#b3">[4]</ref>. This bug is caused by Glibc's default thread library, nptl, not handling setuid() atomically. In Linux, each kernel thread has its own set of user identities (user ID, effective user ID, etc). However, POSIX standards require that all other threads in the same process have identical user identities. Thus, when one thread calls setuid(), nptl has to ensure that all threads in the current process call setuid(). It does so using function nptl setxid() in <ref type="figure">Figure 2</ref>, which iterates through a list of all threads and signals each thread to call setuid() (line 6-12). However, this function releases the lock stack cache lock protecting the thread list, before it waits for all threads to finish setting their identi- fiers. A new thread may be created, and still have the old user identifiers. Since setuid() is often called to drop privileges, a thread skipping setuid() can thus result in privilege escalation.</p><p>Moonlight. <ref type="figure" target="#fig_2">Figure 3</ref> shows an atomicity error <ref type="bibr">[7]</ref> that allows an attacker to silently violate type safety in Moonlight, a Silverlight browser plugin implementation of the Mono open-source .NET framework. To speed up the array copying process, the FastCopy() method first checks that the types of the destination element and the source element are compatible (line 3-5) and, if so, performs a fast element-wise memcpy() instead of a slow copy implemented as CLR instructions. However, the type check and the copy are not implemented as one atomic step, allowing an attacker to change the destination array after the type check, compromising type safety. For instance, the attacker can create a new type with the same field layout, except that all fields in this new type are public, thus gaining access to the private fields in the original object.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>MSIE.</head><p>Another example is the MSIE R6025 exploit <ref type="bibr" target="#b1">[2]</ref> which allows an attacker to launch a code injection attack to Microsoft Internet Explorer (IE) through a malicious webpage. Specifically, when IE opens the malicious page in multiple windows, the Javascript code in the page calls the appendChild() method to append a DHTML element of one window to an element of another. A race in appendChild() can corrupt a function pointer in the heap. To reliably exploit this function pointer corruption, the attacker sprays the heap by repeatedly invoking the DHTML createComments() function, before calling appendChild().</p><p>iOS. Our study also reveals physical proximity attacks, a unique class of attacks carried out in humantime. Such attacks typically exploit concurrency errors in the user interface (UI) logic. There have been several demonstrated vulnerabilities in the UI logic of Apple's iOS that allow attackers to bypass the passcode protection screen by executing a timed sequence of physical Figure 4: Our study suggests a likely tri-modal distribution of the duration of the vulnerable window for all concurrency attacks. Intuitively, this distribution can be broken into at least three distinguishable ranges, corresponding to concurrency errors culminating in memory, file, and physical proximity based exploit.</p><p>actions. Consider the latest vulnerability in iOS version 4. When presented with a passcode screen, an attacker can hit the "Emergency Call" button, enter a malformed phone number such as "###", and then quickly hit the screen lock button to bypass the passcode screen. Several other physical proximity attacks which exploit UI race conditions have been identified <ref type="bibr" target="#b0">[1,</ref><ref type="bibr">5,</ref><ref type="bibr">8]</ref>.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3">Observations of Concurrency Attacks</head><p>Vulnerable window duration heavily affects exploitability. In our analysis, we find that the exploitability of a concurrency error heavily depends on the duration of its vulnerable window-the timing window in which the concurrency error may occur. <ref type="figure">Figure 4</ref> shows a tri-modal distribution of the vulnerable window duration suggested by our study.</p><p>Out of the 46 concurrency errors we studied, three allow physical proximity attacks. These errors have vulnerable windows measured in human time. Exploiting them is easy because attackers simply need to manually trigger a sequence of UI events. Of the 46 errors we studied, 13 allow file system TOCTOU attacks. These races have vulnerability windows measured in quanta of disk access time. This relatively large vulnerable window duration makes file races also easy to exploit: attackers typically re-run a command a few times (possibly using a shell script). Majority of the studied errors allow memory data to be corrupted or inconsistently exposed. The vulnerable windows of these errors are measured in quanta of memory access time. These errors are harder to exploit than the previous two classes of errors because attackers have to make the offending events occur within small timing windows. In addition, hardware cache leases or CPU time slices are often larger than these small windows, masking the errors.</p><p>Nonetheless, our study shows that the third class of errors can also be exploited using two styles of attacks.</p><p>First, an attacker can retry many times to increase the probability of success. The MSIE error described in the previous section falls into this category, whose exploit repeatedly triggers the racing appendChild() calls in different threads. However, an excessive number of retires may be detected using, for instance, anomaly detectors, so we expect that this style of attack may not be as dangerous as the second style of attack, where attackers can use carefully crafted input to enlarge the vulnerability window. For instance, the exploit of the moonlight error in <ref type="figure" target="#fig_2">Figure 3</ref> enlarges the vulnerability window by copying a large array, increasing the number of iterations of the type check loop (line 3-5). As another example, the exploit of the Linux error in <ref type="figure" target="#fig_0">Figure 1</ref> enlarges the vulnerable window by triggering blocking operations such as disk access. Specifically, do brk calls kmem cache alloc to allocate memory. In normal case when there is free memory, kmem cache alloc returns immediately, and the vulnerability window (line 10-15) is small. However, the exploit of this error allocates a large amount of memory to drive the system into low memory state, so that the call to kmem cache alloc has to swap used memory to disk to make room for this new allocation request. The vulnerable window thus lasts as long as a disk access, making it highly likely to corrupt the memory map.</p><p>Concurrency errors in API methods are particularly prone to concurrency attacks. The reasons are two fold. First, an API, such as the system call interface or the Silverlight runtime interface, often coincides with a protection boundary. That is, the application code often cannot access sensitive data directly. Instead, it has to do so through the API methods. To corrupt this sensitive data, an attacker has to exploit the errors in the API methods. The Linux and the moonlight errors are two examples illustrating this point. Second, an API is typically provided to support third-party, potentially untrusted programs. Leveraging this support, attackers can carefully craft malicious code of her choice to run on top of and programmatically exploit the buggy API. The Linux, the moonlight, and the MSIE errors are examples illustrating this point; their exploits were carefully crafted to retry an attack or force events to occur in a dangerous temporal order.</p><p>Concurrency attacks are more than just TOCTOU attacks. Our goal is to bring attention to general concurrency attacks that target errors in concurrent programs. These attacks are much broader than the TOCTOU attacks studied by previous work <ref type="bibr" target="#b22">[27,</ref><ref type="bibr" target="#b27">32,</ref><ref type="bibr" target="#b28">33,</ref><ref type="bibr" target="#b30">35]</ref>. The reasons are threefold.</p><p>First, the TOCTOU attacks in previous work target primarily the file system interface. This interface allows users to check file permissions and use file data but does not directly support transactions that make the check and the use atomic. An attacker may thus exploit this limitation to gain illegal file accesses. In contrast, the concurrency attacks we study target many different programming interfaces such as a language runtime interface or the load/store memory interface, corrupt not just file data but general shared program data, and lead to effects more serious than illegal file accesses.</p><p>Second, the TOCTOU races in previous work exhibit one specific interleaving pattern: atomicity violations where the check and the use is not atomic. In contrast, our study reveals simple read-write or write-write races, or execution order violations <ref type="bibr" target="#b20">[25]</ref> where a set of accesses is supposed to occur in a fixed order, but no synchronizations enforce the order.</p><p>Third, as a natural fallout of the first two reasons, techniques proposed by previous TOCTOU work are too specific to detect or prevent general concurrency attacks. For instance, while launching a TOCTOU attack requires concurrent executions, the vulnerable program may be purely sequential, so TOCTOU detectors (e.g., <ref type="bibr" target="#b30">[35]</ref>) may not need to reason about concurrency at all. Similarly, TOCTOU detectors may mediate all file system calls without high runtime overhead (e.g., <ref type="bibr" target="#b28">[33]</ref>), but it would be prohibitive to mediate all load or store instructions to detect memory races.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4">Implications on Detection Techniques</head><p>It is unfortunate that existing concurrency-error detection techniques have not reached the maturity of sequential tools. Dynamic detectors are not good for detecting security vulnerabilities because they tend to cover only the executions or code run. Static detectors tend to give many false positives burying the true errors.</p><p>Fortunately, leveraging the observations we made in the previous section, we can improve the effectiveness of these detection techniques. One idea is to prioritize detection towards the API methods at protection boundaries. These API methods must correctly protect sensitive data in face of abuses from arbitrarily malicious programs. In addition, errors in the API methods may have particularly bad impact as they may be used by a wide range of programs. A related idea is to prioritize detection toward sensitive data, such as user identities (corrupted by the glibc error), function pointers (MSIE), type data (Moonlight), process memory map <ref type="bibr">(Linux)</ref>.</p><p>Another idea is to rank the error reports of static detectors based on the vulnerable window duration so that developers priortize inspection of errors that are more dangerous, i.e., easier to exploit. For instance, if a vulnerable window of code may block, such as issuing as a disk or network I/O, or may loop an input-dependent number of iterations, then the corresponding error should be ranked high. Identifying code that may block is rel- atively straightforward: we can annotate the leaf operations that may block, then flag any function that may transitively call these operations as blocking. To identify input-dependent loop bounds, we may use taint analysis or symbolic execution to track where user inputs flow.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5">Implications on Defense Techniques</head><p>Security researchers have developed many defenses that prevent security exploits at runtime. However, they tend to assume only sequential programs. We thus want to understand (1) which defense techniques are still effective against concurrency attacks and (2) for those that are ineffective, how to fix them.</p><p>In this section, we attempt to answer these questions by analyzing a plethora of defense techniques <ref type="bibr" target="#b6">[11,</ref><ref type="bibr" target="#b9">14,</ref><ref type="bibr" target="#b10">15,</ref><ref type="bibr" target="#b14">19]</ref> from the research literature. Instead of describing how each of these defenses is weakened, we first extract five common mechanisms that underlie many of these defense tools such as memory safety tools, taint trackers, and intrusion detection systems. We then analyze how each mechanism is affected by concurrency.</p><p>Metadata tracking. Techniques such as taint tracking or memory safety enforcement track program data with metadata, such as taint tags or array bounds. If the tracked program has a data race, the race may manifest on the metadata owned by the defense technique, rendering it unsafe. <ref type="figure" target="#fig_4">Figure 5</ref> illustrates this problem using a contrived example. The original code has a race on variable x: thread t1 assigns a tainted bad value to x and thread t2 assigns a untainted good value to x. The interleaving in the figure can cause the taint tag of x to be inconsistent with the value of x. That is, at the end of the execution, the tag of x indicates that x is untainted, but the value of x is bad.</p><p>Software checks. Many techniques rely on software checks to validate untrusted data. For instance, a taint tracker checks that a piece of data is untainted before using it in a dangerous operation; a memory safety tool checks that a pointer is within bounds before deferencing it; and a type checker ensures type safety (such the fast copy type check in <ref type="figure" target="#fig_2">Figure 3</ref>). These techniques, if unaware of concurrency, are prone to general TOCTOU attacks if the check and the use are not made atomic against concurrently running code. Software checks on stack data are typically not affected by concurrency errors because stack data is rarely shared.</p><p>Anomaly detection. Typical anomaly detection systems work by learning normal program behaviors, then detect deviations from the learned behaviors. Complications arise at both steps for concurrency attacks. For instance, if an anomaly detector learns behaviors only with respect to a single thread in a multithreaded system, it may miss anomalies involving multiple threads. On the flip side, if the anomaly detector models behaviors of all threads, the model may become overly complex and noisy. For instance, multiple threads may issue concurrent system calls, making the n-gram model <ref type="bibr" target="#b14">[19]</ref> too noisy. In other words, we lack simple and accurate models for the behaviors of concurrent programs. (Contentbased anomaly detection techniques <ref type="bibr" target="#b25">[30]</ref> may still work.)</p><p>Hardware checks. Some techniques rely on hardware checks. For instance, several defense techniques prevent code injection attacks by marking pages nonexecutable via the NX bit. These techniques should work in concurrent models because the check is performed atomically by the hardware at the time of use.</p><p>Randomization. Address Space Randomization or instruction set randomization work by hindering the impact step. They should be equally effective for both concurrency and sequential attacks.</p><p>To summarize, three out of the five mechanisms discussed above are weakened by concurrency. Although fixing anomaly detection for concurrent programs may be difficult, fixing metadata tracking and software checks appear viable using standard approaches. For instance, a defense technique can use locks to enforce atomicity; it can also make a local copy of a piece of shared data, then perform the check and the use on the local data for atomicity. However, these fixes may introduce high performance overhead, and how to make them practical remains an open research challenge.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="6">Related Work</head><p>Since we have discussed related work on attacks and defenses throughout this paper, this section focuses on related empirical studies of software errors and attacks. Previous work studied a large number of operating system errors <ref type="bibr" target="#b8">[13]</ref>. The study focuses on sequential errors detected by an automated static analysis tool. Recently, Lu et al. studied many concurrency errors from real software such as MySQL and Apache <ref type="bibr" target="#b20">[25]</ref>. Their analysis focuses on interleaving and memory access characteristics of concurrency errors, whereas ours focuses on the security, exploit, and defense aspects of the concurrency errors. Jalbert et al. created the RADBench concurrency error suite and proposed an approach to make them easy to reproduce <ref type="bibr" target="#b16">[21]</ref>.</p><p>Watson presented a specific concurrency attack against system call interposition <ref type="bibr" target="#b29">[34]</ref>. Sender and Vidergar presented a toy example of concurrency attacks in web applications in Blackhat '08 <ref type="bibr" target="#b23">[28]</ref>. These studies are not based on real concurrency errors; nor did they analyze broadly the detection and defense implications of the concurrency attacks.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="7">Discussion</head><p>In this paper we catalogued concurrency attacks in the wild and presented their characteristics. We studied 46 different types of exploits and categorized them based on the duration of the vulnerabilities. We also observed that the risk of concurrency attacks is proportional to the duration of the vulnerability window, and further that attackers may be able to dilate the vulnerability windows to facilitate attack. Our study of concurrency attacks and existing defenses inspire us to look for new, effective defense techniques. The reasons are three-fold. First, we note that some existing defense techniques such as taint tracking may fail to work in the presence of concurrency errors. Second, there are very few effective defense techniques for concurrency attacks that corrupt scalar data. Finally, based on our analysis of the wide spectrum of the concurrency-error exploits, a single mechanism is unlikely to defend against all types of concurrency attacks.</p><p>Consequently, two challenging research questions arise from our study. First, can we develop defense mechanisms which can mitigate all concurrency errors regardless of vulnerability window duration? Second, given an arbitrary program, can we identify, with some confidence, the most likely type of concurrency vulnerability to exist in a region of the program, assuming that a vulnerability does exist?</p><p>An important requirement is that defense mechanisms against concurrency attacks should not require a priori knowledge of the existence of particular concurrency errors. Traditionally, randomization techniques have been used to successfully mitigate unknown errors. For instance, address space randomization and instruction set randomization are often the "universal last resort" to mitigate many traditional sequential attacks. We believe that timing randomization techniques may be able to defend against unknown concurrency attacks.</p></div><figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_0"><head>Figure 1 :</head><label>1</label><figDesc>Figure 1: Linux kernel memory map corruption.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_2"><head>1Figure 3 :</head><label>3</label><figDesc>Figure 3: Moonlight fast array copy race.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_3"><head></head><label></label><figDesc>Frequency of Exploits Duration of Vulnerable Window Mem-Race Vulns (ns) File-Race Vulns (ms) Physical-Proximity-Race Vulns (seconds)</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_4"><head>Figure 5 :</head><label>5</label><figDesc>Figure 5: Data race renders taint tracking unsafe.</figDesc></figure>
		</body>
		<back>

			<div type="acknowledgement">
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Acknowledgement</head><p>We thank Madan Musuvathi and the anonymous reviewers for providing many helpful comments. John Gallagher helped in the initial stages of this work <ref type="bibr" target="#b32">[37]</ref>. This work was supported in part by AFRL FA8650-11-C-7190 (DARPA MRC), FA8650-10-C-7024, and FA8750-10-2-0253 (DARPA CRASH); NSF CNS-1117805, CNS-1054906 (CAREER), CCF-1054844 (CAREER), CNS-1012633, and CNS-0905246; ONR N00014-12-1-0166; and a Sloan fellowship. This paper's opinions, findings, conclusions, and recommendations are those of the authors and do not necessarily reflect the views of the US Government.</p></div>
			</div>

			<div type="references">

				<listBibl>

<biblStruct xml:id="b0">
	<monogr>
		<title/>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Cve-</forename></persName>
		</author>
		<ptr target="http://www.cvedetails.com/cve/CVE-2010-1754" />
		<imprint>
			<date type="published" when="1754" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b1">
	<monogr>
				<ptr target="http://www.exploit-db.com/exploits/1079" />
		<title level="m">MSIE javaprxy.dll COM object exploit</title>
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b2">
	<monogr>
		<title level="m" type="main">Common vulnerabilities and exposures database</title>
		<ptr target="http://cvedetails.com" />
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b3">
	<monogr>
		<title/>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Rhba-2009</forename></persName>
		</author>
		<ptr target="http://rhn.redhat.com/errata/RHBA-2009-1634.html" />
		<imprint>
			<biblScope unit="page" from="1634" to="1635" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b4">
	<analytic>
		<title level="a" type="main">CoreDet: a compiler and runtime system for deterministic multithreaded execution</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><surname>Bergan</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">O</forename><surname>Anderson</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Devietti</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">L</forename><surname>Ceze</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Grossman</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Fifteenth International Conference on Architecture Support for Programming Languages and Operating Systems (ASPLOS &apos;10)</title>
		<imprint>
			<date type="published" when="2010" />
			<biblScope unit="page" from="53" to="64" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b5">
	<analytic>
		<title level="a" type="main">Grace: Safe and efficient concurrent programming</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">E</forename><surname>Berger</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><surname>Yang</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><surname>Liu</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Krishnan</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Novark</surname></persName>
		</author>
		<idno>OOP- SLA &apos;09</idno>
	</analytic>
	<monogr>
		<title level="m">Conference on Object-Oriented Programming Systems, Languages, and Applications</title>
		<imprint>
			<date type="published" when="2009" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b6">
	<analytic>
		<title level="a" type="main">Address obfuscation: an efficient approach to combat a broad range of memory error exploits</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">E</forename><surname>Bhatkar</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><forename type="middle">C</forename><surname>Duvarney</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Sekar</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 12th USENIX Security Symposium</title>
		<meeting>the 12th USENIX Security Symposium</meeting>
		<imprint>
			<date type="published" when="2003" />
			<biblScope unit="page" from="105" to="120" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b7">
	<analytic>
		<title level="a" type="main">X10: an object-oriented approach to non-uniform cluster computing</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><surname>Charles</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><surname>Grothoff</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">V</forename><surname>Saraswat</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><surname>Donawa</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Kielstra</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">K</forename><surname>Ebcioglu</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><surname>Von Praun</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">V</forename><surname>Sarkar</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Conference on Object-Oriented Programming Systems, Languages, and Applications (OOPSLA &apos;05)</title>
		<imprint>
			<date type="published" when="2005" />
			<biblScope unit="page" from="519" to="538" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b8">
	<analytic>
		<title level="a" type="main">An empirical study of operating systems errors</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Chou</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Yang</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">B</forename><surname>Chelf</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Hallem</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Engler</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 18th ACM Symposium on Operating Systems Principles (SOSP &apos;01)</title>
		<meeting>the 18th ACM Symposium on Operating Systems Principles (SOSP &apos;01)</meeting>
		<imprint>
			<date type="published" when="2001-11" />
			<biblScope unit="page" from="73" to="88" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b9">
	<analytic>
		<title level="a" type="main">StackGuard: automatic adaptive detection and prevention of buffer-overflow attacks</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><surname>Cowan</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><surname>Pu</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Maier</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">H</forename><surname>Hintony</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Walpole</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><surname>Bakke</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Beattie</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Grier</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><surname>Wagle</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Q</forename><surname>Zhang</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the Seventh USENIX Security Symposium</title>
		<meeting>the Seventh USENIX Security Symposium</meeting>
		<imprint>
			<date type="published" when="1998" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b10">
	<analytic>
		<title level="a" type="main">PointGuard: Protecting pointers from buffer overflow vulnerabilities</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><surname>Cowan</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Beattie</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Johansen</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><surname>Wagle</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 12th USENIX Security Symposium</title>
		<meeting>the 12th USENIX Security Symposium</meeting>
		<imprint>
			<date type="published" when="2003" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b11">
	<analytic>
		<title level="a" type="main">Stable deterministic multithreading through schedule memoization</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">H</forename><surname>Cui</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Wu</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C.-C</forename><surname>Tsai</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Yang</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the Ninth Symposium on Operating Systems Design and Implementation (OSDI &apos;10)</title>
		<meeting>the Ninth Symposium on Operating Systems Design and Implementation (OSDI &apos;10)</meeting>
		<imprint>
			<date type="published" when="2010-10" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b12">
	<analytic>
		<title level="a" type="main">Efficient deterministic multithreading through schedule relaxation</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">H</forename><surname>Cui</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Wu</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Gallagher</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">H</forename><surname>Guo</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Yang</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 23rd ACM Symposium on Operating Systems Principles (SOSP &apos;11)</title>
		<meeting>the 23rd ACM Symposium on Operating Systems Principles (SOSP &apos;11)</meeting>
		<imprint>
			<date type="published" when="2011-10" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b13">
	<analytic>
		<title level="a" type="main">Effective data-race detection for the kernel</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Erickson</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Musuvathi</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Burckhardt</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">K</forename><surname>Olynyk</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the Ninth Symposium on Operating Systems Design and Implementation (OSDI &apos;10)</title>
		<meeting>the Ninth Symposium on Operating Systems Design and Implementation (OSDI &apos;10)</meeting>
		<imprint>
			<date type="published" when="2010-10" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b14">
	<analytic>
		<title level="a" type="main">A sense of self for unix processes</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Forrest</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><forename type="middle">A</forename><surname>Hofmeyr</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Somayaji</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><forename type="middle">A</forename><surname>Longstaff</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 1996 IEEE Symposium on Security and Privacy (SP &apos;96)</title>
		<meeting>the 1996 IEEE Symposium on Security and Privacy (SP &apos;96)</meeting>
		<imprint>
			<date type="published" when="1996" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b15">
	<monogr>
				<title level="m">ISO. C++0x Standards, ISO/IEC 14882</title>
		<imprint>
			<date type="published" when="2011" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b16">
	<analytic>
		<title level="a" type="main">Radbench: a concurrency bug benchmark suite</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">N</forename><surname>Jalbert</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><surname>Pereira</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">G</forename><surname>Pokam</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">K</forename><surname>Sen</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 3rd USENIX conference on Hot topic in parallelism (HOTPAR &apos;11)</title>
		<meeting>the 3rd USENIX conference on Hot topic in parallelism (HOTPAR &apos;11)</meeting>
		<imprint>
			<date type="published" when="2011" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b17">
	<analytic>
		<title level="a" type="main">Automated atomicity-violation fixing</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">G</forename><surname>Jin</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">L</forename><surname>Song</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">W</forename><surname>Zhang</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Lu</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">B</forename><surname>Liblit</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the ACM SIGPLAN 2011 Conference on Programming Language Design and Implementation (PLDI &apos;11)</title>
		<meeting>the ACM SIGPLAN 2011 Conference on Programming Language Design and Implementation (PLDI &apos;11)</meeting>
		<imprint>
			<date type="published" when="2011" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b18">
	<analytic>
		<title level="a" type="main">The problem with threads</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">E</forename><forename type="middle">A</forename><surname>Lee</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Computer</title>
		<imprint>
			<biblScope unit="volume">39</biblScope>
			<biblScope unit="issue">5</biblScope>
			<biblScope unit="page" from="33" to="42" />
			<date type="published" when="2006" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b19">
	<analytic>
		<title level="a" type="main">DTHREADS: efficient deterministic multithreading</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><surname>Liu</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><surname>Curtsinger</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">E</forename><forename type="middle">D</forename><surname>Berger</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 23rd ACM Symposium on Operating Systems Principles (SOSP &apos;11)</title>
		<meeting>the 23rd ACM Symposium on Operating Systems Principles (SOSP &apos;11)</meeting>
		<imprint>
			<date type="published" when="2011" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b20">
	<analytic>
		<title level="a" type="main">Learning from mistakes: a comprehensive study on real world concurrency bug characteristics</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Lu</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Park</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">E</forename><surname>Seo</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Y</forename><surname>Zhou</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Thirteenth International Conference on Architecture Support for Programming Languages and Operating Systems (AS-PLOS &apos;08)</title>
		<imprint>
			<date type="published" when="2008" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b21">
	<analytic>
		<title level="a" type="main">Iterative context bounding for systematic testing of multithreaded programs</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Musuvathi</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Qadeer</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the ACM SIGPLAN 2007 Conference on Programming Language Design and Implementation (PLDI &apos;07)</title>
		<meeting>the ACM SIGPLAN 2007 Conference on Programming Language Design and Implementation (PLDI &apos;07)</meeting>
		<imprint>
			<date type="published" when="2007" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b22">
	<analytic>
		<title level="a" type="main">Protecting applications against TOCTTOU races by user-space caching of file metadata</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Payer</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><forename type="middle">R</forename><surname>Gross</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the Eighth International Conference on Virtual Execution Environments (VEE &apos;12)</title>
		<meeting>the Eighth International Conference on Virtual Execution Environments (VEE &apos;12)</meeting>
		<imprint>
			<date type="published" when="2012" />
			<biblScope unit="page" from="215" to="226" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b23">
	<monogr>
				<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Sender</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Vidergar</surname></persName>
		</author>
		<title level="m">Concurrency attacks in web applications. Blackhat &apos;08</title>
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b24">
	<monogr>
		<title level="m" type="main">uselib() privilege elevation</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><surname>Starzetz</surname></persName>
		</author>
		<ptr target="http://www.isec.pl/vulnerabilities/isec-0021-uselib.txt" />
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b25">
	<analytic>
		<title level="a" type="main">A comparative evaluation of two algorithms for windows registry anomaly detection</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><forename type="middle">J</forename><surname>Stolfo</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">F</forename><surname>Apap</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">E</forename><surname>Eskin</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">K</forename><surname>Heller</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Hershkop</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Honig</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">K</forename><surname>Svore</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">J. Comput. Secur</title>
		<imprint>
			<biblScope unit="volume">13</biblScope>
			<biblScope unit="page" from="659" to="693" />
			<date type="published" when="2005-07" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b26">
	<analytic>
		<title level="a" type="main">Software and the concurrency revolution</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">H</forename><surname>Sutter</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Larus</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">ACM Queue</title>
		<imprint>
			<biblScope unit="volume">3</biblScope>
			<biblScope unit="issue">7</biblScope>
			<biblScope unit="page" from="54" to="62" />
			<date type="published" when="2005" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b27">
	<analytic>
		<title level="a" type="main">Portably solving file TOCTTOU races with hardness amplification</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Tsafrir</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><surname>Hertz</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Wagner</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><forename type="middle">Da</forename><surname>Silva</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Sixth USENIX conference on File and Storage Technologies(FAST &apos;08)</title>
		<imprint>
			<date type="published" when="2008" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b28">
	<analytic>
		<title level="a" type="main">Dynamic detection and prevention of race conditions in file accesses</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">E</forename><surname>Tsyrklevich</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">B</forename><surname>Yee</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 12th USENIX Security Symposium</title>
		<meeting>the 12th USENIX Security Symposium</meeting>
		<imprint>
			<date type="published" when="2003" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b29">
	<analytic>
		<title level="a" type="main">Exploiting concurrency vulnerabilities in system call wrappers</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><forename type="middle">N M</forename><surname>Watson</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the first USENIX workshop on Offensive Technologies (WOOT &apos;07)</title>
		<meeting>the first USENIX workshop on Offensive Technologies (WOOT &apos;07)</meeting>
		<imprint>
			<date type="published" when="2007" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b30">
	<analytic>
		<title level="a" type="main">TOCTTOU vulnerabilities in UNIX-style file systems: an anatomical study</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Wei</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><surname>Pu</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Fourth USENIX conference on File and Storage Technologies(FAST &apos;05)</title>
		<imprint>
			<date type="published" when="2005" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b31">
	<analytic>
		<title level="a" type="main">Sound and precise analysis of parallel programs through schedule specialization</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Wu</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Y</forename><surname>Tang</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">G</forename><surname>Hu</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">H</forename><surname>Cui</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Yang</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the ACM SIGPLAN 2012 Conference on Programming Language Design and Implementation (PLDI &apos;12)</title>
		<meeting>the ACM SIGPLAN 2012 Conference on Programming Language Design and Implementation (PLDI &apos;12)</meeting>
		<imprint>
			<date type="published" when="2012" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b32">
	<monogr>
		<title level="m" type="main">Concurrency attacks</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Yang</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Cui</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Gallagher</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Stolfo</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Sethumadhavan</surname></persName>
		</author>
		<idno>CUCS-028-11</idno>
		<imprint/>
		<respStmt>
			<orgName>Columbia University</orgName>
		</respStmt>
	</monogr>
<note type="report_type">Technical Report</note>
</biblStruct>

<biblStruct xml:id="b33">
	<analytic>
		<title level="a" type="main">ConSeq: detecting concurrency bugs through sequential errors</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">W</forename><surname>Zhang</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Lim</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Olichandran</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Scherpelz</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">G</forename><surname>Jin</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Lu</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><surname>Reps</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Sixteenth International Conference on Architecture Support for Programming Languages and Operating Systems (ASPLOS &apos;11)</title>
		<imprint>
			<date type="published" when="2011" />
			<biblScope unit="page" from="251" to="264" />
		</imprint>
	</monogr>
</biblStruct>

				</listBibl>
			</div>
		</back>
	</text>
</TEI>
