<?xml version="1.0" encoding="UTF-8"?>
<TEI xmlns="http://www.tei-c.org/ns/1.0" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
xsi:schemaLocation="http://www.tei-c.org/ns/1.0 /Users/atharsefid/Desktop/grobid-0.5.3/grobid-home/schemas/xsd/Grobid.xsd"
 xmlns:xlink="http://www.w3.org/1999/xlink">
	<teiHeader xml:lang="en">
		<encodingDesc>
			<appInfo>
				<application version="0.5.3" ident="GROBID" when="2020-09-29T03:08+0000">
					<ref target="https://github.com/kermitt2/grobid">GROBID - A machine learning software for extracting information from scholarly documents</ref>
				</application>
			</appInfo>
		</encodingDesc>
		<fileDesc>
			<titleStmt>
				<title level="a" type="main">Real Time Network Policy Checking using Header Space Analysis</title>
			</titleStmt>
			<publicationStmt>
				<publisher/>
				<availability status="unknown"><licence/></availability>
			</publicationStmt>
			<sourceDesc>
				<biblStruct>
					<analytic>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Peyman</forename><surname>Kazemian</surname></persName>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Michael</forename><surname>Chang</surname></persName>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Hongyi</forename><surname>Zeng</surname></persName>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">George</forename><surname>Varghese</surname></persName>
							<email>‡varghese@cs.ucsd.edu</email>
							<affiliation key="aff1">
								<orgName type="institution" key="instit1">UC San Diego &amp; Microsoft Research</orgName>
								<orgName type="institution" key="instit2">§ Google Inc. †</orgName>
							</affiliation>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Nick</forename><surname>Mckeown</surname></persName>
							<email>nickm@stanford.edu</email>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Scott</forename><surname>Whyte</surname></persName>
							<email>§swhyte@google.com</email>
						</author>
						<author>
							<affiliation key="aff0">
								<orgName type="institution">Stanford University</orgName>
							</affiliation>
						</author>
						<title level="a" type="main">Real Time Network Policy Checking using Header Space Analysis</title>
					</analytic>
					<monogr>
						<imprint>
							<date/>
						</imprint>
					</monogr>
				</biblStruct>
			</sourceDesc>
		</fileDesc>
		<profileDesc>
			<abstract>
				<p>Network state may change rapidly in response to customer demands, load conditions or configuration changes. But the network must also ensure correctness conditions such as isolating tenants from each other and from critical services. Existing policy checkers cannot verify compliance in real time because of the need to collect &quot;state&quot; from the entire network and the time it takes to analyze this state. SDNs provide an opportunity in this respect as they provide a logically centralized view from which every proposed change can be checked for compliance with policy. But there remains the need for a fast compliance checker. Our paper introduces a real time policy checking tool called NetPlumber based on Header Space Analysis (HSA) [8]. Unlike HSA, however, NetPlumber incre-mentally checks for compliance of state changes, using a novel set of conceptual tools that maintain a dependency graph between rules. While NetPlumber is a natural fit for SDNs, its abstract intermediate form is conceptually applicable to conventional networks as well. We have tested NetPlumber on Google&apos;s SDN, the Stanford backbone and Internet 2. With NetPlumber, checking the compliance of a typical rule update against a single policy on these networks takes 50-500μs on average.</p>
			</abstract>
		</profileDesc>
	</teiHeader>
	<text xml:lang="en">
		<body>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="1">Introduction</head><p>Managing a network today manually is both cumbersome and error-prone. For example, network administrators must manually login to a switch to add an accesscontrol rule blocking access to a server. In a recent survey <ref type="bibr" target="#b11">[15]</ref>, network administrators reported that configuration errors are very common in their networks.</p><p>The problem is that several entities can modify the forwarding rules: in addition to manual configuration, distributed protocols (e.g. OSPF, spanning tree, BGP) write entries into forwarding tables. There is no single location where all of the state is observable or controllable, leaving network administrators to use ad-hoc tools like ping and traceroute to indirectly probe the current state of the forwarding rules. * Peyman Kazemian was an intern at Google while doing this work.</p><p>Recently, there has been growing interest in automating network control using software-defined networks (SDNs). SDN separates the control plane from the forwarding plane; a well-defined interface such as OpenFlow <ref type="bibr" target="#b8">[11]</ref> lets the control plane write &lt;match, action&gt; rules to switches. The controller controls the forwarding state because it decides which rules to write to the switches; and it observes the forwarding state because it was the sole creator. SDNs therefore present an opportunity to automate the verification of correct forwarding behavior. This is the premise of recent work on automatic analysis of forwarding state for SDNs <ref type="bibr" target="#b5">[8,</ref><ref type="bibr" target="#b7">10,</ref><ref type="bibr" target="#b10">14]</ref>. The basic idea is that if we can analyze the forwarding state-either as it is written to switches, or after it has been written-then we can check against a set of invariants/policies and catch bugs before or soon after they take place.</p><p>Our paper describes a verification tool called NetPlumber for SDNs and conventional networks. In SDNs, NetPlumber sits in line with the control plane, and observes state changes (e.g. OpenFlow messages) between the control plane and the switches <ref type="figure">(Figure 1</ref>). NetPlumber checks every event, such as installation of a new rule, removal of a rule, port or switch up and down events, against a set of policies and invariants. Upon detecting a violation, it calls a function to alert the user or block the change. In conventional networks, NetPlumber can get state change notifications through SNMP traps or by frequently polling switches. Our evaluations use a large SDN (Google WAN) and two medium sized IP networks (Internet2 and the Stanford Network).</p><p>NetPlumber can detect simple invariant violations such as loops and reachability failures. It can also check more sophisticated policies that reflect the desires of human operators such as: "Web traffic from A to B should never pass through waypoints C or D between 9am and 5pm." Our NetPlumber prototype introduces a new formal language (similar to FML <ref type="bibr" target="#b4">[6]</ref>) to express policy checks, and is fast enough to perform real-time checks each time a controller adds a new rule. In experiments with the Stanford backbone, Google's WAN, and Internet2's backbone, NetPlumber typically verifies a rule change in less than 1ms, and a link-up or link-down event in a few seconds.</p><p>NetPlumber's speed easily exceeds the requirements for an enterprise network where configuration state changes infrequently-say once or twice per day. But in modern multi-tenant data centers, fast programmatic interfaces to the forwarding plane allow control programs to rapidly change the network configuration -perhaps thousands of times per second. For example, we may move thousands of virtual machines (VMs) to balance load, with each change requiring a tenant's virtual network to be reconfigured.</p><p>NetPlumber builds on our earlier work on Header Space Analysis (HSA) <ref type="bibr" target="#b5">[8]</ref>. HSA models networks using a geometric model that is much easier to reason about than the vendor-specific interfaces on switches and routers. NetPlumber improves upon HSA in two ways. First, by running HSA checks incrementally, NetPlumber enables real-time checking of updates; this in turn can prevent bugs from occurring. Second, NetPlumber provides a flexible way to express and check complex policy queries without writing new ad hoc code for each policy check, as was required by HSA.</p><p>The four contributions of this paper are:</p><p>1. NetPlumber (section 3): NetPlumber is our realtime policy checking tool with sub-millisecond average run time per rule update.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.">Flexible Policy Query Mechanism (section 4):</head><p>NetPlumber introduces a flexible way to express complex policy queries in an extensible, regularexpression-based language called FlowExp. 3. Distributed NetPlumber (section 5): We show how to scale NetPlumber to large networks using a distributed implementation. 4. Evaluation at Scale (section 6): We evaluate NetPlumber on three production networks, including Google's global WAN carrying inter-datacenter traffic.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2">Header Space Analysis</head><p>NetPlumber uses HSA <ref type="bibr" target="#b5">[8]</ref> as a foundation. HSA provides a uniform, vendor-independent and protocolagnostic model of the network using a geometric model of packet processing. A header is a point (and a flow is a region) in a {0, 1} L space, called the header space, where each bit corresponds to one dimension of this space and L is an upper bound on header length (in bits). Networking boxes are modeled using a Switch Transfer Function T , which transforms a header h received on input port p to a set of packet headers on one or more output ports:</p><formula xml:id="formula_0">T : (h, p) → {(h 1 , p 1 ), (h 2 , p 2 ), ...}.</formula><p>Each transfer function consists of an ordered set of rules R. A typical rule consists of a set of physical input ports, a match wildcard expression, and a set of actions to be performed on packets that match the wildcard ex-  <ref type="figure">Figure 1</ref>: Deploying NetPlumber as a policy checker in <ref type="bibr">SDNs.</ref> pression. Examples of actions include: forward to a port, drop, rewrite, encapsulate, and decapsulate. Network topology is modeled using a Topology Transfer Function, Γ. If port p src is connected to p dst using a link, then Γ will have a rule that transfers (h, p src ) to (h, p dst ).</p><p>HSA computes reachability from source A, via switches X, Y, ... to destination B as follows. First, create a header space region at A representing the set of all possible packets A could send: the all-wildcard flow with L wildcard bits and covering the entire L-dimensional space. Next, apply switch X's transfer function to the all-wildcard flow to generate a set of regions at its output ports, which in turn are fed to Y 's switch transfer function. The process continues until a subset of the flows that left A reach B. While the headers may have been transformed in the journey, the original headers sent by A can be recovered by applying the inverse transfer function. Despite considerable optimization, the Pythonbased implementation called Hassel described in <ref type="bibr" target="#b5">[8]</ref> requires tens of seconds to compute reachability.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3">NetPlumber</head><p>NetPlumber is much faster than Hassel at update time because instead of recomputing all the transformations each time the network changes, it incrementally updates only the portions of those transfer function results affected by the change. Underneath, NetPlumber still uses HSA. Thus, it inherits from HSA the ability to verify a wide range of policies-including reachability between ports, loop-freedom, and isolation between groupswhile remaining protocol agnostic. <ref type="figure">Figure 1</ref> shows NetPlumber checking policies in an SDN. An agent sits between the control plane and switches and sends every state update (installation or removal of rules, link up or down events) to NetPlumber which in turn updates its internal model of the network; if a violation occurs, NetPlumber performs a user-defined action such as removing the violating rule or notifying the administrator.</p><p>The heart of NetPlumber is the plumbing graph which captures all possible paths of flows 1 through the network. Nodes in the graph correspond to the rules in the network and directed edges represent the next hop dependency of these rules:</p><p>• A rule is an OpenFlow-like &lt;match, action&gt; tuple where the action can be forward, 2 rewrite, encapsulate, decapsulate, etc.</p><p>• Rule A has a next hop dependency to rule B if 1) there is a physical link from rule A's box to rule B's box; and 2) the domain of rule B has an intersection with range of rule A. The domain of a rule is the set of headers that match on the rule and the range is the region created by the action transformation on the rule's domain.</p><p>Initialization: NetPlumber is initialized by examining the forwarding tables to build the plumbing graph. Then it computes reachability by computing the set of packets from source port s, that can reach destination port d by injecting an"all-wildcard flow" at s and propagating it along the edges of the plumbing graph. At each rule node, the flow is filtered by the match part of the rule and then transformed by the action part of the rule. The resulting flow is then propagated along the outgoing edges to the next node. The portion of the flow, if any, that reaches d is the set of all packets from s that can reach d. To speed up future calculations, whenever a rule node transforms a flow, it remembers the flow. This caching lets NetPlumber quickly update reachability results every time a rule changes.</p><p>Operation: In response to insertion or deletion of rules in switches, NetPlumber adds or removes nodes and updates the routing of flows in the plumbing graph. It also re-runs those policy checks that need to be updated.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.1">The Plumbing Graph</head><p>The nodes of the plumbing graph are the forwarding rules, and directed edges represent the next-hop dependency of these rules. We call these directed edges pipes because they represent possible paths for flows. A pipe from rule a to b has a pipe filter which is the intersection of the range of a and the domain of b. When a flow passes through a pipe, it is filtered by the pipe filter. Conceptually the pipe filter represents all packet headers at the output of rule a that can be processed by b.</p><p>A rule node corresponds to a rule in a forwarding table in some switch. Forwarding rules have priorities; when a packet arrives to the switch it is processed by the highest priority matching rule. Similarly, the plumb-ing graph needs to consider rule priorities when deciding which rule node will process a flow. For computational efficiency, each rule node keeps track of higher priority rules in the same table. It calculates the domain of each higher priority rule, subtracting it from its own domain. We refer to this as intra-table dependency of rules. <ref type="figure" target="#fig_1">Figure 2</ref> shows an example network and its corresponding plumbing graph. </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.2">Source and Sink Nodes</head><p>NetPlumber converts policy and invariants to equivalent reachability assertions. To compute reachability, it inserts flow from the source port into the plumbing graph and propagates it towards the destination. This is done using a "flow generator" or source node. Just like rule nodes, a source node is connected to the plumbing graph using directed edges (pipes), but instead of processing and forwarding flows, it generates flow.</p><p>Continuing our example, we compute reachability between port 1 and 10 in <ref type="figure" target="#fig_2">Figure 3</ref> by connecting a source node, generating the all-wildcard flow, to port 1. We have also connected a special node called a probe node to port 10. Probe nodes will be discussed in the next section. The flow generated by the source node first reaches rules 1.1, 1.2 and 1.3. Rule 1.1 and 1.2 are not affected by any higher priority rules and don't rewrite flows. Therefore the input flow is simply forwarded to the pipes connecting them to rule 2.2 (i.e. 1010xxxx and 10001xxx flows reach rule 2.2). However rule 1.3 has an intra-table dependency to rule 1.1 and 1.2. This means that from the incoming 10xxxxxx flow, only 10xxxxxx − (1010xxxx ∪ 10001xxx) should be processed by rule 1.3. The remainder has already been processed by higher priority rules. Rule 1.3 is a simple forward rule and will forward the flow, unchanged, to rule 3.1. However, when this flow passes through the pipe filter between rule 1.3 and        <ref type="table" target="#tab_3">Table 2</ref> match: 101xxxxx in-port: 6, out-port: 7 <ref type="table" target="#tab_12">Table 3</ref> match: xxxxx010 in-port: 8, out-port: 10 match: 1010xxxx in-port: 9, out-port: 10  3.1 (101xxxxx), it shrinks to 101xxxxxx − 1010xxxx. <ref type="bibr" target="#b2">3</ref> The flows which reach rule 2.2 continue propagating through the plumbing graph until they reach the probe node (P), as depicted in <ref type="figure" target="#fig_2">Figure 3</ref>. However the other flow that has reached rule 3.1 does not propagate any further as it cannot pass through the pipe connecting rule 3.1 to rule 4.2. This is because the intersection of the flow <ref type="bibr">(101xxxxxx − 1010xxxx = 1011xxxx</ref>) and pipe filter (1010xxxx) is empty.</p><p>Sink Nodes: Sink nodes are the dual of source nodes. A sink node absorbs flows from the network. Equivalently, a sink node generates "sink flow" which traverses the plumbing graph in the reverse direction. When reaching a rule node, a sink flow is processed by the inverse of the rule. <ref type="bibr" target="#b3">4</ref> Reachability can be computed using sink nodes: if a sink node is placed at the destination port D, then the sink flow at source port S gives us the set of packet headers from S that will reach D. Sink nodes do not increase the expressive power of NetPlumber; they only simplify or optimize some policy checks (see section 4).</p><formula xml:id="formula_1">3 [10xxxxxx − (1010xxxx ∪ 10001xxx)] ∩ 101xxxxx = 101xxxxx − 1010xxxx. 4</formula><p>The inverse of a rule gives us all input flows that can generate a given flow at the output of that rule <ref type="bibr" target="#b5">[8]</ref>.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.3">Probe Nodes</head><p>A fourth type of node called a probe node is used to check policy or invariants. Probe nodes can be attached to appropriate locations of the plumbing graph, and can be used to check the path and header of the received flows for violations of expected behavior. In section 4, we discuss how to check a policy using a source (sink) and probe node. As a simple example, if in our toy example of <ref type="figure" target="#fig_1">Figure 2</ref> the policy is "port 1 and 10 can only talk using packets matching xxxxx010", then we place a source node at port 1 (S), a probe node at port 10 (P ) and configure P to check whether all flows received from S match xxxxx010 ( <ref type="figure" target="#fig_2">Figure 3</ref>).</p><p>Probe nodes can be of two types: source probe nodes and sink probe nodes. The former check constraints on flows generated by source nodes, and the latter check flows generated by sink nodes. We refer to both as probe nodes.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.4">Updating NetPlumber State</head><p>As events occur in the network, NetPlumber needs to update its plumbing graph and re-route the flows. There are 6 events that NetPlumber needs to handle:</p><p>Adding New Rules: When a new rule is added, NetPlumber first creates pipes from the new rule to all po-tential next hop rules, and from all potential previous hop rules to the new rule. It also needs to find all intratable dependencies between the new rule and other rules within the same table. In our toy example in <ref type="figure" target="#fig_4">Figure 4</ref>, a new rule is added at the 2nd position of table 1. This creates three new pipes to rules 2.1, 2.2 and the source node, and one intra-table dependency for rule 1.4.</p><p>Next, NetPlumber updates the routing of flows. To do so, it asks all the previous hop nodes to pass their flows on the newly created pipes. The propagation of these flows then continues normally through the plumbing graph. If the new rule has caused any intra-table dependency for lower priority rules, we need to update the flows passing through those lower priority rules by subtracting their domain intersection from the flow. Back to the example in <ref type="figure" target="#fig_4">Figure 4</ref>, after adding the new rule, the new flows highlighted in bold propagate through the network. Also, the intra-table dependency of the new rule on rule 1.4 is subtracted from the flow received by rule 1.4. This shrinks the flow to the extent that it cannot pass through the pipe connecting it to rule 3.1 (empty flow on the bottom path).</p><p>Deleting Rules: Deleting a rule causes all flows which pass through that rule to be removed from the plumbing graph. Further, if any lower priority rule has any intratable dependency on the deleted rule, the effect should be added back to those rules. <ref type="figure" target="#fig_6">Figure 5</ref> shows the deletion of rule 1.1 in our toy example. Note that deleting this rule causes the flow passing through rule 1.3 to propagate all the way to the probe node, because the influence of the deleted rule is now added back.</p><p>Link Up: Adding a new link to the network may cause additional pipes to be created in the plumbing graph, because more rules will now have physical connections between them (first condition for creating a pipe). The nodes on the input side of these new pipes must propagate their flows on the new pipes, and then through the plumbing graph as needed. Usually adding a new link creates a number of new pipes, making a Link Up event slower to process than a rule update.</p><p>Link Down: When a link goes down, all the pipes created on that link are deleted from the plumbing graph, which in turn removes all the flows that pass through those pipes.</p><p>Adding <ref type="table">New Tables: When a new table (or switch)</ref> is discovered, the plumbing graph remains unchanged. Changes occur only when new rules are added to the new table.</p><p>Deleting <ref type="table">Tables: A table is</ref> deleted from NetPlumber by deleting all the rules contained in that table.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.5">Complexity Analysis</head><p>The complexity of NetPlumber for the addition of a single rule is O(r + spd), where r is the number of entries in each table and s is the number of source (sink) nodes attached to the plumbing graph (which is roughly proportional to the number of policies we want to check), p is the number of pipes to and from the rule and d is the diameter of the network.</p><p>The run time complexity arises as follows: when a new rule is added, we need to first find intra-table dependencies. These require intersecting the match portion of the new rule with the match of all the other rules in the same table. We also need to create new pipes by doing O(r) intersections of the range of the new rule with the domain of rules in the neighboring tables (O(r) such rules).</p><p>Next, we need to route flows. Let us use the term previous nodes to denote the set of rules which have a pipe to the new rule. First, we need to route the flows at previous nodes to the new rule. There are O(s) flows on each of these previous nodes because each source (sink) node that is connected to NetPlumber can add a flow. We need to pass these flows through O(p) pipes to route them to the new rule. This is O(sp) work. With a linear fragmentation 5 argument similar to <ref type="bibr" target="#b5">[8]</ref>, there will be O(s) flows that will survive this transformation through the pipes 6 (and not O(sp)). The surviving flows will be routed in the same manner through the plumbing graph, requiring the same O(sp) work at each node in the routing path. Since the maximum path length is the diameter d, the overall run time of this phase is O(spd).</p><p>We also need to take care of intra-table dependencies between this rule and lower priority rules, and subtract the domain intersection from the flows received by lower priority rules. This subtraction is done lazily and is therefore much faster than flow routing; hence we ignore its contribution to overall run time.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4">Checking Policies and Invariants</head><p>A probe node monitors flows received on a set of ports. In the plumbing graph, it is attached to the output of all the rules sending out flows on those ports. Each probe node is configured with a filter flow expression and a test flow expression. A flow expression or flowexp for short, is a regular expression specifying a set of conditions on the path and the header of the flows. The filter flowexp constrains the set of flows that should be examined by the probe node, and the test flowexp is the constraint that   <ref type="table" target="#tab_3">Table 2</ref> match: 101xxxxx in-port: 6, out-port: 7 <ref type="table" target="#tab_12">Table 3</ref> match: xxxxx010 in-port: 8, out-port: 10 match: 1010xxxx in-port: 9, out-port: 10 </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>New flows</head><p>Intra-table dep.       is checked on the matching flows. Probe nodes can be configured in two modes: existential and universal. A probe fires when its corresponding predicate is violated. An existential probe fires if none of the flows examined by the probe satisfy the test flow expression. By contrast, a universal probe fires when a single flow is received that does not satisfy the test constraint. More formally: (Universal) ∀{f | f ∼ f ilter} : f ∼ test. All flows f which satisfy the filter expression, satisfy the test expression as well.</p><p>(Existential) ∃{f | f ∼ f ilter} : f ∼ test. There exist a flow f that satisfies both the filter and test expressions.</p><p>Using flow expressions described via the flowexp language, probe nodes are capable of expressing a wide range of policies and invariants. Section 4.1 will introduce the flowexp language. Sections 4.2 and 4.3 discuss techniques for checking for loops, black holes and other reachability-related policies.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.1">Flowexp Language</head><p>Each flow at any point in the plumbing graph, carries its complete history: it has a pointer to the corresponding flow at the previous hop (node). By traversing these pointers backward, we can examine the entire history of the flow and all the rules that have processed this flow  <ref type="bibr">[ ˆ ]</ref> (Source/Sink node) | End of Path <ref type="bibr">[ $ ]</ref> (Probe node); along the path. The flow history always begins at the generating source (or sink) node and ends at the probe node checking the condition. Flowexp is a regular expression language designed to check constraints on the history of flows received by probe nodes. <ref type="table" target="#tab_2">Table 1</ref> shows the grammar of flowexp in a standard BNF syntax. Flowexp consists of logical operations (i.e. and, or and not) on constraints enforced on the Path or Header of flows received on a probe node.</p><formula xml:id="formula_2">Constraint → True | False | ! Constraint | (Constraint | Constraint) | (Constraint &amp; Constraint) | P athConstraint | HeaderConstraint; P athConstraint → list( P athlet ); P athlet → Port Specifier [p ∈ {P i }] |</formula><formula xml:id="formula_3">HeaderConstraint → H received ∩ H constraint � = φ | H received ⊂ H constraint | H received == H constraint ;</formula><p>A PathConstraint is used to specify constraints on the path taken by a flow. It consists of an ordered list of pathlets that are checked sequentially on the path of the flow. For example a flow that originates from source S, with the path S → A → B → C → P to probe P , will match on flowexp " ˆ(p = A)", because port A comes immediately after the source node. It also matches on "(p = A).(p = C)" because the flow passes through exactly one intermediate port from A to C. A HeaderConstraint can check if 1) The received header has any intersection with a specified header; this is useful when we want to ensure that some packets of a specified type can reach the probe. 2) The received header is a subset of a specific header; this is useful when we wish to limit the set of headers that can reach the probe.</p><p>3) The received header is exactly equal to a specified header; this is useful to check whether the packets received at the probe are exactly what we expect.</p><p>Since flowexp is very similar to (but much simpler than) standard regular expression language, any standard regexp checking technique can be used at probe nodes.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.2">Checking Loops and Black Holes</head><p>As flows are routed through the plumbing graph, each rule by default (i.e., without adding probe nodes for this purpose) checks received flows for loops and black holes. To check for a loop, each rule node examines the flow history to determine if the flow has passed through the current table before. If it has, a loop-detected callback function is invoked <ref type="bibr" target="#b5">7</ref> .</p><p>Similarly, a black hole is automatically detected when a flow is received by a non-drop-rule R that cannot pass through any pipes emanating from R. In this case, a black-hole-detected callback function is invoked.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.3">Checking Reachability Policies</head><p>In this section, we describe how to express reachabilityrelated policies and invariants such as the isolation of two ports, reachability between two ports, reachability via a middle box and a constraint on the maximum number of hops in a path. We express and check for such reachability constraints by attaching one or more source (or sink) nodes and one or more probe nodes in appropriate locations in the plumbing graph. The probe nodes are configured to check the appropriate filter and test flowexp constraints as shown below.</p><p>Basic Reachability Policy: Suppose we wish to ensure that a server port S should not be reachable from guest machine ports {G 1 , ...G k }.</p><p>Solution using a source probe: Place a source node that generates a wildcarded flow at each of the guest <ref type="bibr" target="#b5">7</ref> The callback function can optionally check to see if the loop is infinite or not; an algorithm to check for infinite loops is described in <ref type="bibr" target="#b5">[8]</ref>.</p><p>ports. Next, place a source probe node on port S and configure it to check for the flow expression: ∀f : f.path ∼ ![ ˆ (p ∈ {G 1 , ...G k })] -i.e., a universal probe with no filter constraint and a test constraint that checks that the source node in the path is not a guest port.</p><p>If, instead, the policy requires S to be reachable from {G 1 , ...G k }, we could configure the probe node as follows: ∃f : f.path ∼ [ ˆ (p ∈ {G 1 , ...G k })] . Intuitively, this states that there exists some flow that can travel from guest ports to the server S. Note that the server S is not specified in the flow expression because the flow expression is placed at S.</p><p>Dual Solution using a sink probe: Alternately, we can put a sink node at port S and a sink probe node in each of the G i ports. We also configure the probes with Flowexp ∀f :</p><formula xml:id="formula_4">f.path ∼ [ ˆ (p ∈ {S})].</formula><p>Reachability via a Waypoint: Next, suppose we wish to ensure that all traffic from port C to port S must pass through a "waypoint" node M .</p><p>Solution: Put a source node at C that generates a wildcarded flow and a probe node at S. Configure the probe node with the flow expression:</p><formula xml:id="formula_5">∀{f | f.path ∼ [ ˆ (p ∈ {C})]} : f.path ∼ [ ˆ . * (t = M )]</formula><p>. This is a universal probe which filters flows that originate from C and verifies that they pass through the waypoint M .</p><p>Path length constraint: Suppose we wish to ensure that no flow from port C to port S should go through more than 3 switches. This is a policy that was desired for the Stanford network for which we found violations. The following specification does the job assuming that each switch has one table.</p><p>Solution: Place a probe at S and a source node at C as in the previous example. Configure the probe node with the following constraint:</p><formula xml:id="formula_6">∀{f | f.path ∼ [ ˆ (p ∈ {C})]} : f.path ∼ [ ˆ .$ | ˆ ..$ | ˆ ...$ ].</formula><p>The filter expression ensures that the check is done only for flows from C, and the test expression only accepts a flow if it is one, two or three hops away from the source.</p><p>Source probes versus Sink probes: Roughly speaking, if a policy is checking something at the destination regardless of where the traffic comes from, then using sink probes is more efficient. For example, suppose a manager wishes to specify that all flows arriving at a server S pass through waypoint M . Using source probes would require placing one source probe at every potential source. This can be computationally expensive as the run time of NetPlumber grows linearly with number of source or sink nodes. On the other hand, if the policy is about checking a condition for a particular sourcesuch as computer C should be able to communicate with all other nodes -then using a source probe will be more efficient. Intuitively, we want to minimize the amount of flow in the plumbing graph required to check a given policy, as generating flow is computationally expensive.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.4">Policy translator</head><p>So far we have described a logical language called flowexp which is convenient for analysis and specifying precisely how flows are routed within the network. Flowexp is, however, less appropriate as a language for network managers to express higher level policy. Thus, for higher level policy specification, we decided to reuse the policy constructs proposed in the Flow-based Management Language (FML) <ref type="bibr" target="#b4">[6]</ref>, a high-level declarative language for expressing network-wide policies about a variety of different management tasks. FML essentially allows a manager to specify predicates about groups of users (e.g., faculty, students), and specifies which groups can communicate. FML also allows additional predicates on the types of communication allowed such as the need to pass through waypoints.</p><p>Unfortunately, the current FML implementation is tightly integrated with an OpenFlow controller, and so cannot be easily reused in NetPlumber. We worked around this by encoding a set of constructs inspired by FML in Prolog. Thus, network administrators can use Prolog as the frontend language to declare various bindings inspired by FML, such as hosts, usernames, groups and addresses. Network administrators can also use Prolog to specify different policies. For example, the following policy describes 1) the guest and server groups, and 2) a policy: "Traffic should go through firewall if it flows from a guest to a server". guest(sam). guest(michael). server(webserver). waypoint(HostSrc, HostDst, firewall):-guest(HostSrc), server(HostDst).</p><p>We have written a translator that converts such high level policy specifications written in Prolog to 1) the placement of source nodes, 2) the placement of probe nodes, and 3) the filter and test expressions for each probe node. In the example above, the translator generates two source nodes at Sam and Michael's ports and one probe node at the web server's port. The waypoint keyword is implemented by flowexp: .*(t=firewall).</p><p>The output of the translator is, in fact, a C++ struct that lists all source, sink, and probe nodes. The source probes and sink probes are encoded in flowexp syntax using ASCII text. Finally, NetPlumber translates flowexp into C++ code that it executes.</p><p>Note that because FML is not designed to declare path constraints that can be expressed in flowexp, we found it convenient to make the translator extensible. For example, two new policy constructs we have built-in beyond the FML-inspired constructs are "at most N hops" and Rule Node Duplicated Rule Node Source Node Probe Node <ref type="figure">Figure 6</ref>: A typical plumbing graph consists of clusters of highly dependent rules corresponding to FECs in network. There may be rules whose dependency edges cross clusters. By replicating those rules, we can create clusters without dependencies and run each cluster as an isolated NetPlumber instance running on a different machine.</p><p>"immediately followed by"-but it is easy to add further constructs.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5">Distributed NetPlumber</head><p>NetPlumber is memory-intensive because it maintains considerable data about every rule and every flow in the plumbing graph. For very large networks, with millions of rules and a large number of policy constraints, NetPlumber's memory requirements can exceed that of a single machine. Further, as shown in section 3.5, the run time of NetPlumber grows linearly with the size of the tables. This can be potentially unacceptable for very large networks. Thus, a natural approach is to run parallel instances of NetPlumber, each verifying a subset of the network and each small enough to fit into the memory of a single machine. Finally, a collector can be used to gather the check results from every NetPlumber instance and produce the final result.</p><p>One might expect to parallelize based on switches: i.e., each NetPlumber instance creates a plumbing graph for a subset of switches in the network (vertical distribution). This can address the memory bottleneck, but need not improve performance, as the NetPlumber instances can depend on each other. In the worst case, an instance may not be able to start its job unless the previous instance is done. This technique can also require considerable communication between different instances.</p><p>A key observation is that in every practical network we have seen, the plumbing graph looks like <ref type="figure">Figure 6</ref>: there are clusters of highly dependent rules with very few dependencies between rules in different clusters. This is caused by forwarding equivalence classes (FECs) that are routed end-to-end in the network with possible aggregation. The rules belonging to a forwarding equivalence class have a high degree of dependency among each other. For example, 10.1.0.0/16 subnet traffic might be a FEC in a network. There might be rules that further divide this FEC into smaller subnets (such as 10.1.1.0/24, 10.1.2.0/24), but there are very few rules outside this range that has any interaction with rules in this FEC (an exception is the default 0.0.0.0/0 rule).</p><p>Our distributed implementation of NetPlumber is based on this observation. Each instance of NetPlumber is responsible for checking a subset of rules that belong to one cluster (i.e. a FEC). Rules that belong to more than one cluster will be replicated on all the instances they interact with (see <ref type="figure">Figure 6</ref>). Probe nodes are replicated on all instances to ensure global verification. The final probe result is the aggregate of results generated by all the probes-i.e., all probe nodes should meet their constraints in order for the constraint to be verified. The instances do not depend on each other and can run in parallel. The final result will be ready after the last instance is done with its job.</p><p>The run time of distributed NetPlumber, running on n instances for a single rule update, is O(m avg (r/n + spd/m)) where m is the number of times that rule get replicated and m avg is the average replication factor for all rules. This is because on each replica, the size of tables are O(m avg r/n) and the number of pipes to a rule that is replicated m times is O(m avg p/m). Note that if we increase n too much, most rules will be replicated across many instances (m, m avg → n,) and the additional parallelism will not add any benefit.</p><p>How should we cluster rules? Graph clustering is hard in general; however for IP networks we generated natural clusters heuristically as follows. We start by creating two clusters based on the IP address of the network we are working with; if the IP address of hosts in the network belong to subnet 10.1.0.0/16, create two clusters: one for rules that match this subnet, and one for the rest (i.e. 10.1.0.0/16 and 0.0.0.0/0 -10.1.0.0/16 subnets). Next, divide the first cluster into two clusters based on bit 17 of the destination IP address. If one of the resulting clusters is much larger than the other, we divide the larger cluster based on the next bit in IP destination address. If two clusters are roughly the same size, we divide both clusters further. This process continues until division does not reduce cluster size further (because of replication) or the specified number of clusters is reached.</p><p>Note that while we introduced the plumbing graph originally to facilitate incremental computation, the plumbing graph also allows us to decompose the computation much more effectively than the naive decomposition by physical nodes.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="6">Evaluation</head><p>In this section we evaluate the performance and functionality of our C++ based implementation 8 of NetPlumber on 3 real world networks: the Google inter-8 source code available at <ref type="bibr">[5]</ref>.  datacenter WAN, Stanford's backbone network and the Internet 2 nationwide network. All the experiments are run on Ubuntu machines, with 6 cores, hyper-threaded Intel Xeon processors, a 12MB L2-cache and 12GB of DRAM.</p><p>To feed the snapshot data from these networks into NetPlumber, we wrote 3 parsers capable of parsing Cisco IOS, Juniper Junos and OpenFlow dumps in protobuf <ref type="bibr">[12]</ref> format. We used a json-rpc based client to feed this data into NetPlumber. NetPlumber has the jsonrpc server capability and can receive and process updates from a remote source.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="6.1">Our data set</head><p>Google WAN: This is a software-defined network, consisting of OpenFlow switches distributed across the globe. It connects Google data centers world-wide. <ref type="figure" target="#fig_7">Fig- ure 7</ref> shows the topology of this network. Overall there are more than 143,000 OpenFlow rules installed in these switches. Google WAN is one of the largest SDNs deployed today; therefore we stress-test NetPlumber on this network to evaluate its scalability.</p><p>Stanford University Backbone Network. With a population of over 15,000 students, 2,000 faculty, and five /16 IPv4 subnets, Stanford represents a mid-size enterprise network. There are 14 operational zone (OZ) Cisco routers connected via 10 Ethernet switches to 2  backbone Cisco routers that in turn connect Stanford to the outside world ( <ref type="figure" target="#fig_8">Figure 8)</ref>. Overall, the network has more than 757,000 forwarding entries, 100+ VLANs and 1,500 ACL rules. Data plane configurations are collected through CLI. Stanford has made the entire configuration rule set public and it can be found in <ref type="bibr">[5]</ref>. Internet2 is a nationwide backbone network with 9 Juniper T1600 routers and 100 Gb/s interfaces, supporting over 66,000 institutions in United States. There are about 100,000 IPv4 forwarding rules. All Internet2 configurations and FIBs of the core routers are publicly available <ref type="bibr" target="#b5">[7]</ref>, with the exception of ACL rules, which are removed for security reasons. We only use the IPv4 network of Internet 2 in this paper.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="6.2">All-pair connectivity of Google WAN</head><p>As an internal, inter-datacenter WAN for Google, the main goal of Google WAN is to ensure connectivity between different data centers at all times. Therefore in our first experiment, we checked for the all-pair connectivity policy between all 52 leaf nodes (i.e. data center switches). We began by loading a snapshot of all the OpenFlow rules of Google WAN -taken at the end of July 2012 -into NetPlumber. NetPlumber created the initial plumbing graph in 33.39 seconds (an average perrule runtime of 230μs). We then attach one probe and one source node at each leaf of the network and set up the probes to look for one flow from each of the sources. If no probes fire, it means that all data centers are reachable from each other. The initial all-pair connectivity test took around 60 seconds. Note that the above run times, are for the one-time initialization of NetPlumber. Once NetPlumber is initialized, it can incrementally update check results much faster when changes occur. Note that the all-pair reachability check in Google WAN corresponds to 52 2 or more than 2600 pair-wise reachability checks.</p><p>Next, we used a second snapshot taken 6 weeks later. We found the diff of the two snapshots and applied them to simulate incremental updates. The diff includes both insertion and deletion of rules. Since we did not have timing information for the individual updates, we knew the set of updates in the difference but not the sequence of updates. So we simulated two different orders. In the first ordering, we applied all the rule insertions before the rule deletions. In the second ordering, we applied all deletions before all insertions.</p><p>As expected, the all-pair connectivity policy was maintained during the first ordering of update events, because new reachable paths are created before old reachable paths are removed. However the second ordering resulted in violations of the all-pair connectivity constraint during the rule deletion phase. Of course, this does not mean that the actual Google WAN had reachability problems because the order we simulated is unlikely to have been the actual order of updates. At the end of both orderings, the all-pair connectivity constraint was met.</p><p>NetPlumber was able to check the compliance of each insertion or deletion rule in an average time of 5.74ms with a median time of 0.77ms. The average run time is much higher than the median because there are a few rules whose insertion and deletion takes a long time (about 1 second). These are the default forwarding rules that have a large number of pipes and dependencies from/to other rules. Inserting and deleting default rules require significant changes to the plumbing graph and routing of flows. The solid line in <ref type="figure" target="#fig_9">Figure 9</ref> shows the run time CDF for these updates.</p><p>To test the performance of distributed NetPlumber we repeated the same experiment in distributed mode. We simulated 9 the running of NetPlumber on 2−8 machines and measured the update times (dashed lines in <ref type="figure" target="#fig_9">Figure 9</ref>). <ref type="table" target="#tab_3">Table 2</ref> summarizes the mean and median run times. This suggests that most of the benefits of distribution is achieved when the number of instances is 5. This is because in the plumbing graph of the Google WAN, there are about 5 groups of FECs whose rules do not influence each other. Trying to put these rules in more than 5 clusters will result in duplication of rules; the added benefit will be minimal.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="6.3">Checking policy in Stanford network</head><p>Unlike the Google WAN, there are a number of reachability restrictions enforced in the Stanford network by different ACLs. Examples of such policies include isolation of machines belonging to a particular research group from the rest of the network, or limitation on the type of traffic that can be sent to a server IP address. For example, all TCP traffic to the computer science department is blocked except for those destined to particular IP addresses or TCP port numbers. In addition, there is a global reachability goal that every edge router be able to communicate to the outside world via the uplink of a specified router called bbra rtr. Finally, due to the topology of the network, the network administrators desired that all paths between any two edge ports be no longer than 3 hops long to minimize network latency.</p><p>In this experiment we test all these policies. To do so, we connect 16 source nodes, one to each router in the plumbing graph. To test the maximum-3-hop constraint, we connected 14 probe nodes, one to each OZ router. We also placed a probe node at a router called yoza rtr to check reachability policies at the computer science department. NetPlumber took 0.5 second to create the initial plumbing graph and 36 seconds to generate the initial check results. We found no violation of the reachability policies of the computer science department. However NetPlumber did detect a dozen un-optimized routes, whose paths take 4 hops instead of 3. We also found 10 loops, similar to the ones reported in <ref type="bibr" target="#b5">[8]</ref>  <ref type="bibr" target="#b7">10</ref> .</p><p>We then tested the per-update run time of NetPlumber by randomly selecting 7% of rules in the Stanford network, deleting them and then adding them back. <ref type="figure" target="#fig_9">Figure 9</ref> shows the distribution of the per-update run time. Here, the median runtime is 50μs and the mean is 2.34ms. The huge difference between the mean and the median is due to a few outlier default rules which take a long time to get inserted and deleted into NetPlumber.  more independent policies, each of which require adding a new source node. <ref type="bibr" target="#b8">11</ref> We provide such a unit run time benchmark for NetPlumber running on all three data sets: Google WAN, Stanford and Internet 2.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="6.4">Performance benchmarking</head><p>To obtain this benchmark, we connect a single source node at one of the edge ports in the plumbing graph of each of our 3 networks. Then we load NetPlumber with 90% of the rules selected uniformly at random. Finally, we add the last 10% and measure the update time. We then repeated the same experiment by choosing links in the network that are in the path of injected flows, deleting them and then adding them back and measuring the time to incorporate the added link. The results are summarized in <ref type="table" target="#tab_12">Table 3</ref>. As the table suggests, link up events take much longer (seconds) to incorporate. This is in fact expected and acceptable, because when a link is added, a potentially large number of pipes will be created which changes routing of flows significantly. Fortunately, since the link up/down event should be rare, this run time appears acceptable.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="7">Discussion</head><p>Conventional Networks: Conceptually, NetPlumber can be used with conventional networks as long as we implement a notification mechanism for getting updated state information. One way to do this is through SNMP traps; every time a forwarding entry or link state changes, NetPlumber gets a notification. The drawback of such a mechanism is resource consumption at the switch.</p><p>Handling Transient Violations: Sometimes, during a sequence of state updates, transient policy violations may be acceptable (e.g. a black hole is acceptable while installing a path in a network). NetPlumber probes can be turned off during the transition and turned on when the update sequence is complete.</p><p>Handling Dynamic Policies: In multi-tenant data centers, the set of policies might change dynamically upon VM migration. NetPlumber can handle dynamic policy changes easily. In the plumbing graph, if we attach a source node to every edge port (as we did in the case of Google WAN), we can update policies by changing the locations and test conditions of probe nodes. This update is fast as long as the structure of the plumbing graph and routing of flows doesn't change.</p><p>Limitations of NetPlumber: NetPlumber, like HSA relies on reading the state of network devices and therefore cannot model middleboxes with dynamic state. To handle such dynamic boxes, the notion of "flow" should be extended to include other kind of state beyond header and port. Another limitation of NetPlumber is its greater processing time for verifying link updates. As a result, it is not suitable for networks with a high rate of link up/down events such as energy-proportional networks.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="8">Related Work</head><p>Recent work on network verification, especially on troubleshooting SDNs, focuses on the following directions.</p><p>Programming foundations: Frenetic [3] provides high-level abstractions to achieve per-packet and perflow consistency during network updates <ref type="bibr" target="#b9">[13]</ref>. NetPlumber, on the other hand, verifies forwarding policies.</p><p>Offline checking: rcc <ref type="bibr" target="#b1">[2]</ref> verifies BGP configurations. NICE <ref type="bibr" target="#b0">[1]</ref> applies model checking techniques to find bugs in OpenFlow control programs. HSA <ref type="bibr" target="#b5">[8]</ref> checks data plane correctness against invariants. Anteater <ref type="bibr" target="#b7">[10]</ref> uses boolean expressions and SAT solvers for network modeling and checking. However, offline checking cannot prevent bugs from damaging the network until the periodic check runs.</p><p>Online monitoring: Several tools help troubleshoot network programs at run-time. <ref type="bibr">OFRewind [14]</ref> captures and reproduces the sequence of problematic OpenFlow command sequence. ATPG <ref type="bibr" target="#b12">[16]</ref> systematically generates test packets against router configurations, and monitors network health by perioidically sending these tests packets. NDB <ref type="bibr" target="#b3">[4]</ref> is a network debugger. These tools complement but not replace the need for real-time policy verification.</p><p>VeriFlow <ref type="bibr" target="#b6">[9]</ref> is the work most closely related to NetPlumber. VeriFlow also verifies the compliance of network updates with specified policies in real time. It uses a trie structure to search rules based on equivalence classes (ECs), and upon an update, determines the affected ECs and updates the forwarding graph for that class. This in turn triggers a rechecking of affected policies. NetPlumber and VeriFlow offer similar runtime performance. While both systems support verification of forwarding actions, NetPlumber additionally can verify arbitrary header modifications, including rewriting and encapsulation. NetPlumber is also protocolindependent.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="9">Conclusions</head><p>This paper introduces NetPlumber as a real-time policy checker for networks. Unlike earlier work that checks periodic snapshots of the network, NetPlumber is fast enough to validate every update in real time. Users can express a wide range of policies to be checked using an extensible regular-expression like language, called Flowexp. Since Flowexp might be too low-level for administrators to use, we implemented a higher level policy language (inspired by FML) implemented in Prolog.</p><p>The fundamental idea of the dependency graph formalized as a plumbing graph benefits us in three ways. First, it allows incremental computation by allowing only the (smaller) dependency subgraph to be traversed when a new rule is added. Second, it naturally leads us to generalize to probe nodes that can be configured to check for new policies-without the ad hoc programming effort required by Hassel. Third, clustering the graph to minimize inter-cluster edges provides a powerful way to parallelize computation.</p><p>NetPlumber is useful as a foundation that goes beyond static policy checking. For example, it can be used in ATPG <ref type="bibr" target="#b12">[16]</ref> to allow the suite of ATPG tests packets to be updated swiftly when the configuration changes. Also NDB <ref type="bibr" target="#b3">[4]</ref> may benefit from NetPlumber. Like GDB, NDB allows setting break points in the system when a specified condition is met. To achieve this goal, NDB adds a "postcard generating action" that captures and sends samples of matching packets to a central database. NetPlumber can be used to notify NDB when a rule that requires postcard action is about to be added to the network. While these are only two examples, we believe that the ability to incrementally and quickly do header space analysis will be a fundamental building block for network verification tools going forward.</p></div><figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_1"><head>Figure 2 :</head><label>2</label><figDesc>Figure 2: Plumbing graph of a simple network consisting of 4 switches each with one table. Arrows represent pipes. Pipe filters are shown on the arrows. Dashed lines indicate intra-table dependency of rules. The intersecting domain and input port is shown along the dashed lines.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_2"><head>Figure 3 :</head><label>3</label><figDesc>Figure 3: Finding reachability between S and P. Source node S is generating all-wildcard flow and inserting it into the plumbing graph. The solid lines show the path of flow from the source to the destination. Flow expressions are shown along the flows.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_4"><head>Figure 4 :</head><label>4</label><figDesc>Figure 4: Adding rule 1.2 (shaded in green) to table 1. As a result a) 3 pipes are created connecting rule 1.2 to rule 2.1 and 2.2 and to the source node. b) rule 1.4 will have an intra-table dependency to the new rule (1011xxxx,1). c) The flows highlighted in bold will be added to the plumbing graph. Also the flow going out of rule 1.4 is updated to empty.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_5"><head></head><label></label><figDesc>񮽙 񮽙񮽙 񮽙񮽙 񮽙 񮽙 񮽙 񮽙񮽙񮽙񮽙񮽙񮽙񮽙111xx010񮽙 i 񮽙 񮽙񮽙 񮽙񮽙 񮽙 񮽙1 0 1 0 x x x x 񮽙 1110x010 񮽙񮽙 񮽙񮽙 񮽙񮽙 񮽙 񮽙 0 񮽙񮽙񮽙񮽙 񮽙񮽙񮽙 񮽙 11 10 x0 10 񮽙񮽙 񮽙񮽙񮽙 񮽙 񮽙 񮽙 񮽙񮽙 񮽙񮽙񮽙 񮽙 񮽙 񮽙 xxx xxx xxxxxx xx 񮽙񮽙񮽙񮽙񮽙񮽙 񮽙 񮽙 P 񮽙񮽙񮽙񮽙񮽙񮽙񮽙</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_6"><head>Figure 5 :</head><label>5</label><figDesc>Figure 5: Deleting rule 1.1 in table 1 causes the flow which passes through it to be removed from the plumbing graph. Also since the intra-table dependency of rule 1.3 to this rule is removed, the flow passing through 1.3 through the bottom path is updated.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_7"><head>Figure 7 :</head><label>7</label><figDesc>Figure 7: Google inter-datacenter WAN network.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_8"><head>Figure 8 :</head><label>8</label><figDesc>Figure 8: Stanford backbone network.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_9"><head>Figure 9 :</head><label>9</label><figDesc>Figure 9: CDF of the run time of NetPlumber per update, when checking the all-pair reachability constraint in Google WAN with 1-5 instances and in Stanford backbone with a single instance. #instances: 1 2 3 4 5 8 median (ms) 0.77 0.35 0.23 0.2 0.185 0.180 mean (ms) 5.74 1.81 1.52 1.44 1.39 1.32</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_2" validated="false"><head>Table 1</head><label>1</label><figDesc></figDesc><table>match: 1011xxxx 
rw: 10101xxx 
in-port: 4, out-port: 5 

match: 10xxxxxx 
rw: 111xxxxx 
in-port: 4, out-port: 5 

</table></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_3" validated="false"><head>Table 2 2</head><label>2</label><figDesc></figDesc><table>4 

match: 101xxxxx 
in-port: 6, out-port: 7 

</table></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_5" validated="true"><head>Table 4 5</head><label>4</label><figDesc></figDesc><table>8 

7 
9 

10 
</table></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_6" validated="false"><head>Table 1</head><label>1</label><figDesc></figDesc><table>match: 1011xxxx 
rewrite: 10101xxx 
in-port: 4, out-port: 5 

match: 10xxxxxx 
rewrite: 111xxxxx 
in-port: 4, out-port: 5 

</table></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_7" validated="false"><head>Table</head><label></label><figDesc></figDesc><table></table></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_8" validated="false"><head>Table 1</head><label>1</label><figDesc></figDesc><table>match: 1011xxxx 
rewrite: 10101xxx 
in-port: 4, out-port: 5 

match: 10xxxxxx 
rewrite: 111xxxxx 
in-port: 4, out-port: 5 

</table></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_9" validated="true"><head>Table 4</head><label>4</label><figDesc></figDesc><table>101xxxx x -1010xxx x 
-1011xxx x = empty 

Flow: 
xxxxxxxx 

񮽙񮽙 
</table></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_10" validated="false"><head>Table 1</head><label>1</label><figDesc></figDesc><table>match: 1011xxxx 
rewrite: 10101xxx 
in-port: 4, out-port: 5 

match: 10xxxxxx 
rewrite: 111xxxxx 
in-port: 4, out-port: 5 

</table></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_11" validated="false"><head>Table 2</head><label>2</label><figDesc></figDesc><table>match: 101xxxxx 
in-port: 6, out-port: 7 

</table></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_12" validated="false"><head>Table 3</head><label>3</label><figDesc></figDesc><table>match: xxxxx010 
in-port: 8, out-port: 10 

match: 1010xxxx 
in-port: 9, out-port: 10 

</table></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_13" validated="false"><head>Table</head><label></label><figDesc></figDesc><table></table></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_14" validated="false"><head>Table Specifier [t ∈ {T i }] | Skip Next Hop [.] | Skip Zero or More Hops [. * ] | Beginning of Path</head><label>Specifier</label><figDesc></figDesc><table></table></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_15" validated="false"><head>Table 1 : Flowexp language grammar</head><label>1</label><figDesc></figDesc><table></table></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_16" validated="false"><head>Table 2 :</head><label>2</label><figDesc></figDesc><table>Average and median run time of distributed Net-
Plumber, checking all-pair connectivity policy on Google 
WAN. 

</table></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_18" validated="false"><head>Table 3 : Average and median run time of NetPlumber, for a single rule and link update, when only one source node is con</head><label>3</label><figDesc></figDesc><table>-
</table></figure>

			<note place="foot" n="1"> In what follows, a flow corresponds to any region of header space. 2 A drop rule is a special case of forward rule with empty set of output ports.</note>

			<note place="foot" n="5"> This assumption states that if we have R flows at the output of a transfer function, and we apply these flow to the next hop transfer functions with R rules per transfer function, we will get cR flows at the output where c &lt;&lt; R is a constant. This assumption is based on the observation that flows are routed end-to-end in networks. They are usually aggregated, and not randomly fragmented in the core of the network. 6 An alternate way to reach the same conclusion is as follows: the new rule, after insertion will look like any other rule in the network, and should on average have O(s) flows.</note>

			<note place="foot" n="1"> Run Time of NetPlumber (ms) F(x) Google: 1 instance Google: 2 instances Google: 3 instances Google: 4 instances Google: 5 instances Stanford</note>

			<note place="foot" n="9"> To simulate, we run the the instances in serial on the same machine and collected the results from each run. For each rule insertion/deletion, we reported the run time as the maximum run time across all instances, because the overall job will be done only when the last instance is done.</note>

			<note place="foot">The previous two experiments demonstrated the scalability and functionality of NetPlumber when checking actual policies and invariants of two production networks. However, the performance of NetPlumber depends on s, the number of sources in the network which is a direct consequences of the quantity and type of policies specified by each network. Thus it seems useful to have a metric that is per source node and even per policy, so we can extrapolate how run time will change as we add 10 We used the same snapshots.</note>

			<note place="foot" n="11"> By contrast, dependent policies can be checked using a single source node.</note>
		</body>
		<back>

			<div type="acknowledgement">
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="10">Acknowledgements</head><p>We would like to thank our shepherd, Brad Karp, and the anonymous reviewers for their valuable comments. We thank Faro Rabe (Google) for providing the snapshots of Google WAN and Urs Hölzle and Stephen Stuart (Google) for internal review of this work. This research was sponsored by Google Summer Internship program, Stanford CS Undergraduate Research Internship (CURIS) program and NSF grant CNS-0855268.</p></div>
			</div>

			<div type="references">

				<listBibl>

<biblStruct xml:id="b0">
	<analytic>
		<title level="a" type="main">A NICE way to test openflow applications</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Canini</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Venzano</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><surname>Perešíni</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Kosti´ckosti´c</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Rexford</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of NSDI&apos;12</title>
		<meeting>NSDI&apos;12</meeting>
		<imprint>
			<date type="published" when="2012" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b1">
	<analytic>
		<title level="a" type="main">Detecting BGP configuration faults with static analysis</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">N</forename><surname>Feamster</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">H</forename><surname>Balakrishnan</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of NSDI&apos;05</title>
		<meeting>NSDI&apos;05</meeting>
		<imprint>
			<date type="published" when="2005" />
			<biblScope unit="page" from="43" to="56" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b2">
	<analytic>
		<title level="a" type="main">Frenetic: a network programming language</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">N</forename><surname>Foster</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Harrison</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><forename type="middle">J</forename><surname>Freedman</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><surname>Monsanto</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Rexford</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Story</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Walker</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">SIGPLAN Not</title>
		<imprint>
			<biblScope unit="volume">46</biblScope>
			<biblScope unit="issue">9</biblScope>
			<biblScope unit="page" from="279" to="291" />
			<date type="published" when="2011-09" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b3">
	<analytic>
		<title level="a" type="main">Where is the debugger for my softwaredefined network?</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">N</forename><surname>Handigol</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">B</forename><surname>Heller</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">V</forename><surname>Jeyakumar</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Maziéres</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">N</forename><surname>Mckeown</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of HotSDN &apos;12</title>
		<meeting>HotSDN &apos;12</meeting>
		<imprint>
			<date type="published" when="2012" />
			<biblScope unit="page" from="55" to="60" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b4">
	<analytic>
		<title level="a" type="main">Practical declarative network management</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><forename type="middle">L</forename><surname>Hinrichs</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">N</forename><forename type="middle">S</forename><surname>Gude</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Casado</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><forename type="middle">C</forename><surname>Mitchell</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Shenker</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of WREN &apos;09</title>
		<meeting>WREN &apos;09</meeting>
		<imprint>
			<date type="published" when="2009" />
			<biblScope unit="page" from="1" to="10" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b5">
	<analytic>
		<title level="a" type="main">Header space analysis: static checking for networks</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><surname>Kazemian</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">G</forename><surname>Varghese</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">N</forename><surname>Mckeown</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of NSDI&apos;12</title>
		<meeting>NSDI&apos;12</meeting>
		<imprint>
			<date type="published" when="2012" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b6">
	<analytic>
		<title level="a" type="main">Veriflow: verifying network-wide invariants in real time</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Khurshid</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">X</forename><surname>Zou</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">W</forename><surname>Zhou</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Caesar</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><forename type="middle">B</forename><surname>Godfrey</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of NSDI&apos;13</title>
		<meeting>NSDI&apos;13</meeting>
		<imprint>
			<date type="published" when="2013" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b7">
	<analytic>
		<title level="a" type="main">Debugging the data plane with anteater</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">H</forename><surname>Mai</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Khurshid</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Agarwal</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Caesar</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><forename type="middle">B</forename><surname>Godfrey</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><forename type="middle">T</forename><surname>King</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of SIGCOMM &apos;11</title>
		<meeting>SIGCOMM &apos;11</meeting>
		<imprint>
			<date type="published" when="2011" />
			<biblScope unit="page" from="290" to="301" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b8">
	<monogr>
		<title level="m" type="main">OpenFlow: enabling innovation in campus networks</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">N</forename><surname>Mckeown</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><surname>Anderson</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">H</forename><surname>Balakrishnan</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">G</forename><surname>Parulkar</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">L</forename><surname>Peterson</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Rexford</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Shenker</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Turner</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">; Sig-Comm Ccr</forename></persName>
		</author>
		<imprint>
			<date type="published" when="2008-03" />
			<biblScope unit="volume">38</biblScope>
			<biblScope unit="page" from="69" to="74" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b9">
	<analytic>
		<title level="a" type="main">Abstractions for network update</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Reitblatt</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">N</forename><surname>Foster</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Rexford</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><surname>Schlesinger</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Walker</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of SIGCOMM &apos;12</title>
		<meeting>SIGCOMM &apos;12</meeting>
		<imprint>
			<date type="published" when="2012" />
			<biblScope unit="page" from="323" to="334" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b10">
	<analytic>
		<title level="a" type="main">OFRewind: enabling record and replay troubleshooting for networks</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Wundsam</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Levin</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Seetharaman</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Feldmann</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of USENIX-ATC&apos;11</title>
		<meeting>USENIX-ATC&apos;11</meeting>
		<imprint>
			<date type="published" when="2011" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b11">
	<monogr>
		<title level="m" type="main">A Survey on Network Troubleshooting</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">H</forename><surname>Zeng</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><surname>Kazemian</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">G</forename><surname>Varghese</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">N</forename><surname>Mckeown</surname></persName>
		</author>
		<idno>- port Stanford/TR12-HPNG-061012</idno>
		<imprint>
			<date type="published" when="2012-06" />
		</imprint>
		<respStmt>
			<orgName>Stanford University</orgName>
		</respStmt>
	</monogr>
<note type="report_type">Technical Re</note>
</biblStruct>

<biblStruct xml:id="b12">
	<analytic>
		<title level="a" type="main">Automatic Test Packet Generation</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">H</forename><surname>Zeng</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><surname>Kazemian</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">G</forename><surname>Varghese</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">N</forename><surname>Mckeown</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of CoNEXT</title>
		<meeting>CoNEXT<address><addrLine>Nice, France</addrLine></address></meeting>
		<imprint>
			<date type="published" when="2012-12" />
		</imprint>
	</monogr>
</biblStruct>

				</listBibl>
			</div>
		</back>
	</text>
</TEI>
