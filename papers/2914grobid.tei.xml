<?xml version="1.0" encoding="UTF-8"?>
<TEI xmlns="http://www.tei-c.org/ns/1.0" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
xsi:schemaLocation="http://www.tei-c.org/ns/1.0 /Users/atharsefid/Desktop/grobid-0.5.3/grobid-home/schemas/xsd/Grobid.xsd"
 xmlns:xlink="http://www.w3.org/1999/xlink">
	<teiHeader xml:lang="en">
		<encodingDesc>
			<appInfo>
				<application version="0.5.3" ident="GROBID" when="2020-09-29T02:55+0000">
					<ref target="https://github.com/kermitt2/grobid">GROBID - A machine learning software for extracting information from scholarly documents</ref>
				</application>
			</appInfo>
		</encodingDesc>
		<fileDesc>
			<titleStmt>
				<title level="a" type="main">Evaluation of Codes with Inherent Double Replication for Hadoop</title>
			</titleStmt>
			<publicationStmt>
				<publisher/>
				<availability status="unknown"><licence/></availability>
			</publicationStmt>
			<sourceDesc>
				<biblStruct>
					<analytic>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><forename type="middle">Nikhil</forename><surname>Krishnan</surname></persName>
							<affiliation key="aff0">
								<orgName type="institution">Indian Institute of Science</orgName>
								<address>
									<settlement>Bangalore</settlement>
								</address>
							</affiliation>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">N</forename><surname>Prakash</surname></persName>
							<affiliation key="aff0">
								<orgName type="institution">Indian Institute of Science</orgName>
								<address>
									<settlement>Bangalore</settlement>
								</address>
							</affiliation>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">V</forename><surname>Lalitha</surname></persName>
							<affiliation key="aff0">
								<orgName type="institution">Indian Institute of Science</orgName>
								<address>
									<settlement>Bangalore</settlement>
								</address>
							</affiliation>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Birenjith</forename><surname>Sasidharan</surname></persName>
							<affiliation key="aff0">
								<orgName type="institution">Indian Institute of Science</orgName>
								<address>
									<settlement>Bangalore</settlement>
								</address>
							</affiliation>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><forename type="middle">Vijay</forename><surname>Kumar</surname></persName>
							<affiliation key="aff0">
								<orgName type="institution">Indian Institute of Science</orgName>
								<address>
									<settlement>Bangalore</settlement>
								</address>
							</affiliation>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Srinivasan</forename><surname>Narayanamurthy</surname></persName>
							<affiliation key="aff1">
								<orgName type="institution">NetApp Inc</orgName>
							</affiliation>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Ranjit</forename><surname>Kumar</surname></persName>
							<affiliation key="aff1">
								<orgName type="institution">NetApp Inc</orgName>
							</affiliation>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Siddhartha</forename><surname>Nandi</surname></persName>
							<affiliation key="aff1">
								<orgName type="institution">NetApp Inc</orgName>
							</affiliation>
						</author>
						<title level="a" type="main">Evaluation of Codes with Inherent Double Replication for Hadoop</title>
					</analytic>
					<monogr>
						<imprint>
							<date/>
						</imprint>
					</monogr>
				</biblStruct>
			</sourceDesc>
		</fileDesc>
		<profileDesc>
			<abstract>
				<p>In this paper, we evaluate the efficacy, in a Hadoop setting , of two coding schemes, both possessing an inherent double replication of data. The two coding schemes belong to the class of regenerating and locally regenerating codes respectively, and these two classes are representative of recent advances made in designing codes for the efficient storage of data in a distributed setting. In comparison with triple replication, double replication permits a significant reduction in storage overhead, while delivering good MapReduce performance under moderate work loads. The two coding solutions under evaluation here, add only moderately to the storage overhead of double replication, while simultaneously offering reliability levels similar to that of triple replication. One might expect from the property of inherent data duplication that the performance of these codes in executing a MapReduce job would be comparable to that of double replication. However, a second feature of this class of code comes into play here, namely that under both coding schemes analyzed here, multiple blocks from the same coded stripe are required to be stored on the same node. This concentration of data belonging to a single stripe negatively impacts MapReduce execution times. However, much of this effect can be undone by simply adding a larger number of processors per node. Further improvements are possible if one tailors the Map task scheduler to the codes under consideration. We present both experimental and simulation results that validate these observations.</p>
			</abstract>
		</profileDesc>
	</teiHeader>
	<text xml:lang="en">
		<body>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="1">Introduction</head><p>Hadoop <ref type="bibr" target="#b0">[1]</ref> is an open-source platform dealing with distributed storage whose file system is known as the Hadoop distributed file system (HDFS). The primary objective is to store a collection of files in such a way that distributed computation on the stored data can be carried out efficiently under the MapReduce (MR) <ref type="bibr" target="#b1">[2]</ref> paradigm. Any file that needs to be stored is divided into blocks, typically of size 64 âˆ’ 256 MB and these blocks are replicated and are stored across the distributed storage network, such that no two replicas of the same block are stored in the same storage node.</p><p>Replication of data, in addition to providing resiliency against irrecoverable data loss, supports efficient MR computation in two ways. Firstly, it ensures availability of data during transient node failures. Such failures, which do not cause data loss, are the norm <ref type="bibr" target="#b2">[3]</ref> in largescale storage systems, and hence minimizing the number of repairs carried out to handle transient failures, can result in significant savings in network bandwidth <ref type="bibr" target="#b3">[4]</ref>. Secondly, replication helps to increase data locality for MR computation. A Hadoop node can typically perform 2 to 8 map tasks in parallel, depending on the number of processor cores available to it. As a result, in a system which is expected to handle multiple compute jobs simultaneously, the presence of replicas will increase the chance that any given map task can be assigned to a node which contains the data block required by the task. Such a task is called a local task. A non-local or remote task needs data to be fetched across the network to the node where the task is to be executed, leading to increased delay in job execution as well as increased network bandwidth usage <ref type="bibr" target="#b1">[2]</ref>.</p><p>Triple replication is often used in a Hadoop system as it provides the desired level of resiliency as well as availability of data. In comparison with triple replication, while double replication permits a significant reduction in storage overhead, and can potentially deliver good MapReduce performance under moderate work loads, it leaves the system vulnerable to irrecoverable data loss in the event of some patterns of two-node failure. In an effort to avoid the large overheads associated with triple replication, storage-efficient erasure codes such as ReedSolomon (RS) codes and some variants have recently been employed in Facebook's Hadoop clusters <ref type="bibr" target="#b4">[5]</ref>, <ref type="bibr" target="#b3">[4]</ref>. These codes store only a single copy of the data file and use parity blocks, as in RAID, to offer protection against failures. Application of these codes is thus limited to the storage of cold data, i.e., data on which MR jobs are rarely carried out.</p><p>In this paper, we evaluate the efficacy, in a Hadoop setting, of two coding schemes, both possessing an inherent double replication of data. The two coding schemes are described in Section 2. Performance analysis of metrics like storage overhead and mean time to data loss (MTTDL), and also simulation results showing data locality for map tasks are presented in Section 3. Details of the experimental set-up used for MR performance evaluation, and the associated findings can be found in Section 4. Conclusions and future work are presented in Section 5 and an overview of the related literature is presented in Section 6.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2">The Two Coding Schemes</head></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.1">Pentagon Code</head><p>The first code which we refer to here as the pentagon code, is a simple instance of a family of codes known as repair-by-transfer minimum-bandwidth regenerating codes <ref type="bibr" target="#b5">[6]</ref>. In the pentagon code, 9 data blocks are encoded 1 into 20 coded blocks and stored in 5 nodes with 4 blocks assigned to each node. Given the 9 data blocks, a 10 th block which is an XOR parity of these 9 blocks is first computed; the resulting 10 blocks are replicated once more and stored in 5 nodes as shown in <ref type="figure" target="#fig_0">Fig. 1(a)</ref>. To explain the distribution of the blocks among the 5 nodes, consider a fully connected graph with the 5 target nodes as its vertices. Note that there are 5 2 = 10 edges in this graph. Place each of the 10 distinct blocks on the 10 edges of this graph. The blocks stored in a node are then simply those associated to the edges that are incident on the particular node. An important point to note here is that the pentagon code stores multiple blocks of a coded stripe in the same node. Such codes, in general, are known as array codes. It can be readily verified that the contents of any 3 nodes suffice to recover all 9 data blocks and thus the code is resilient to 2-node failure. Single-node repair is accomplished, simply by transferring to the replacement of the failed node, the blocks shared in common by the failed node with each of the remaining 4 nodes. In the case of two node failures, nodes N 1 and N 2 say, 8 blocks have to be recovered in all, out of which 6 can be recovered just by copying the replicas of these blocks present in the remaining 3 nodes. For the recovery of block 4, nodes N 3 , N 4 and N 5 internally compute the partial parities P 3 = 3 + 6 + P, P 4 = 2 + 8 + 9 and P 5 = 1 + 5 + 7, respectively and transfer these partial parities to the first replacement node. The replacement node computes P 3 + P 4 + P 5 and recovers block 4, which is then copied to the second replacement node as well. Thus, the overall network data transfer incurred in repairing the two nodes (also known as repair bandwidth) is 10 blocks. The repair bandwidth savings arising from the usage of partial parties is an intrinsic advantage possessed by array codes.</p><p>The construction of the pentagon code, suggests that a third coding scheme be included for comparison. Under this scheme, given 9 data blocks, one computes a 10 th parity block as above and then duplicates each coded block to obtain a total of 20 blocks. These 20 blocks are then stored across 20 different nodes of the network. This scheme is termed in the literature <ref type="bibr" target="#b6">[7]</ref> as a RAID+mirroring scheme. The code itself is termed as a (10, 9) RAID+m code. The performance comparison we present in Section 3, includes comparison with the RAID+m scheme.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.2">Heptagon-Local Code</head><p>The heptagon-local code is built on top of a heptagoncode, which is the analogue of the pentagon code for 7 nodes. The heptagon code encodes 20 data blocks into 42 blocks and stores them in 7 nodes, with each node hosting 6 blocks following a placement rule similar to that applied in the case of the pentagon code. The storage overhead of the heptagon code is less than that of the pentagon code; however it has a lower level of resiliency (see <ref type="table">Table 1</ref>).</p><p>The heptagon-local code, is an instance of a family of codes known as locally regenerating codes <ref type="bibr" target="#b7">[8]</ref>. This family presents a simple way to increase the resiliency of the heptagon code, at the cost of a moderate increase in storage overhead. In this code, 40 data blocks are encoded into 86 blocks and stored in 15 nodes, as follows: (1) The 40 data blocks are first split into two sets of 20 each, which are then individually encoded by two instances of the heptagon code taking care to ensure that the 7 nodes chosen for the first heptagon are distinct from those chosen for the second heptagon. (2) Two global parity blocks are computed as functions of all 40 data blocks, and are placed in an additional global parity node. This computation involves Galois field arithmetic as in the case of RAID-6. In this code, the individual heptagon codes themselves are referred to as local codes. In a rack-aware HDFS implementation, the two heptagons and the global parity node would be placed in three different racks.</p><p>The heptagon-local code can recover from any pattern of 3 node erasures. The failure of 1 or 2 nodes lying within a heptagon, can be handled locally, i.e., by accessing other nodes within the same heptagon. In the case where 3 nodes belonging to a single heptagon fail, the recovery will involve accessing the contents of the second heptagon as well as the contents of the global parity node. Here again, the repair bandwidth can be reduced by making use of partial parities. An important advantage of the proposed codes is the smaller value of their code length for a given value of storage overhead, in comparison with the corresponding RAID+m scheme. The code length specifies the number of data nodes over which a coded stripe is distributed. For instance, both the pentagon and the (10, 9) RAID+m code have a storage overhead of 2.22; clearly between the two codes, only the pentagon code is feasible in a Hadoop system possessing just 20 nodes. The length of the RAID+m solution can be decreased below 20 only at the expense of increased storage overhead. For larger systems, the heptagon-local code turns out to be an attractive choice in terms of all three performance metrics.</p><p>The pentagon and heptagon-local codes also are efficient in terms of the repair-bandwidth needed during on-the-fly repair of a lost data block, during an MR computation. Imagine a situation where the two nodes which store the two replicas of a particular block are temporarily down, and a map task is initiated on this particular block. While the (10, 9) RAID+m solution needs a repair bandwidth of 9 blocks, a repair bandwidth of 3 blocks suffices in the case of the pentagon code, arising from the pentagon code's ability to compute and make use of partial parities. Typically, in Hadoop, repair jobs themselves are performed as MR jobs and in such a case, computation of the partial parities can be incorporated into the MR-job through the use of "combine" functions 2 .</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.2">Data Locality of Map Tasks</head><p>We evaluate here the data locality under Map tasks of the pentagon and heptagon local codes in a moderatelyloaded Hadoop system. We quantify the notion of load as follows (with an example): A 100-node system that handles 250 map tasks, with 4 map slots per node, is said to be operating under a load of <ref type="bibr">250</ref> (4Ã—100) Ã— 100 = 62.5%. By moderately loaded, we mean that the system is most of the time, operating on a â‰¤ 100% load.</p><p>The map-task-assignment problem can be modeled as a maximum-matching problem on a bipartite graph, with the tasks on one side and the nodes on the other. The edges on this graph indicate the nodes where the replicas of the blocks reside. We note that the choice of a particular coding solution essentially determines the manner in which the edges are incident on the vertices lying to the right, i.e., the nodes (see <ref type="figure" target="#fig_2">Fig. 2</ref>). From a practical point of view, maximum-matching algorithms are computationally intensive. Hadoop uses instead, a simple algorithm called delay scheduling for task assignment <ref type="bibr" target="#b8">[9]</ref>.  To compare the data locality of the various codes, we simulated the delay-scheduling algorithm in a 25-node system, under various load conditions. The maximummatching algorithm was also simulated as a benchmark. Simulation results are presented for the 2-rep, pentagon and the heptagon codes, for the cases of 2, 4 and 8 map slots per node (see <ref type="figure" target="#fig_3">Fig. 3</ref>). We note that the data locality of the heptagon-local code will be similar to that of the heptagon code, since the global parity node does not play a role in task assignment. Also, the locality of the 2-rep systems is indicative of the locality of any of the RAID+m solutions. We see from the plots that there is a significant loss in data locality with 2 map slots per node, for the proposed coding schemes, with respect to double replication. This is an artifact of the fact that under both coding schemes analyzed here, multiple blocks from the same coded stripe are required to be stored on the same node (see <ref type="figure" target="#fig_2">Fig. 2</ref>). This concentration of data belonging to a single stripe negatively impacts MapReduce execution times. Also, since the heptagon code has a greater concentration of data blocks in comparison with the pentagon code, it suffers more in this respect. However, as seen from the simulations, the loss in locality decreases with increasing number of map slots per node. For instance, both the pentagon and heptagon-local codes have locality greater than 90% at 100% load, with 8 map slots. The plots also suggest that there is scope for improvement in locality by using task assignment algorithms, other than the delay scheduler.</p><p>A simple algorithm known as the peeling algorithm was proposed in <ref type="bibr" target="#b9">[10]</ref>, for task-assignment problems. Appropriate modifications to this algorithm allows it to be used in pentagon or heptagon-coded Hadoop systems. A simulation using the modified peeling algorithm, for the case of 4 map slots per node is also shown in <ref type="figure" target="#fig_3">Fig. 3</ref>; the performance gains in locality are clearly evident.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4">Experimental Set-up and Evaluation</head><p>An implementation of the pentagon and the heptagon codes was carried out in HDFS, taking Facebook's opensource HDFS-RAID <ref type="bibr" target="#b4">[5]</ref> module (hadoop-0.20) as the baseline software. The main challenge in the implementation was in handling the array-nature of these codes, as they necessitate the logical grouping of blocks within a node. Preliminary experiments, to ascertain MR performance, were conducted on two different Hadoop systems, which were chosen to have different numbers of processor cores per Hadoop node.</p><p>Set-up 1 (2 map slots): This set-up had 25 data nodes and the hardware used for each of these nodes was a dualcore IBM laptop, having 3 GB of RAM and 150 GB of hard disk space. The Hadoop data block size was set to 128 MB. Also, each node was configured with 2 map and 1 reduce slots. We tested the pentagon and the heptagon codes in this set-up.</p><p>Set-up 2 (4 map slots): This had 9 data nodes and each of these nodes was a server class machine having 4 processor cores per node, 24 GB of RAM and 2 TB of hard disk space. The Hadoop data block size was set to 512 MB. Also, each node was configured with 4 map and 2 reduce slots. We tested the pentagon code in this set-up.</p><p>In both the set-ups, an additional master node was used to host all the controllers namely NameNode, JobTracker and RaidNode. All machines ran Ubuntu 12.04 for their operating system. Also, all nodes were configured to be part of a single rack and shared a private 10 Gbps Ethernet LAN.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.1">MapReduce Performance</head><p>The Terasort job was executed at various load points (from 25% to 100%) and under various coding schemes.</p><p>We calculate values of data locality, job execution time and network traffic during job execution, averaged over multiple runs. We use Hadoop's inbuilt delay-scheduling algorithm for map-task assignment, with the delay set such that every node has a chance to assign two (four) local map tasks in the first (second) set-up. Features such as cap-based load management and speculative execution were turned off.</p><p>The measurements are shown in <ref type="figure" target="#fig_4">Fig. 4</ref> and 5, respectively for the cases of the first and second set-up. The following conclusions can be drawn from the plots: (i) At moderate loads, the performance of 2-rep is very close to that of 3-rep. (ii) The data locality curves, in both the set-ups, exhibit the same trend as seen in the simulations curves in <ref type="figure" target="#fig_3">Fig. 3. (</ref>iii) It can be verified that the excess network traffic for either the pentagon or the heptagon code with respect to 2-rep is almost entirely due to the corresponding loss in data locality. (iv) Also, as expected, there is a substantial loss in performance in the case of 2 processor cores; however with 4 cores, we see that the pentagon code has performance very close to that of the 2-rep code even at a load of 75%.   </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5">Conclusions and Future Work</head><p>In this work, we have implemented in Hadoop two coding schemes having inherent double replication of data, and have carried out a preliminary MR performanceevaluation under this coded system. Our measurements suggest that under moderate work loads, with an increased number of processors per node, the MR performance is comparable to that of double replication. In the next phase of our work, we plan to enhance the current implementation in two ways: (i) Implement the heptagon-local code, and (ii) implement the modified peeling algorithm, which was simulated (see <ref type="figure" target="#fig_3">Fig. 3</ref>), as an alternative to delay scheduler for map task assignment. We also plan to measure MR performance on a variety of work loads, for the enhanced system. Other important metrics, like encoding duration and MR performance in the presence of node failures (with the usage of partial parities) also need to be ascertained.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="6">Related Work</head><p>Regenerating codes and locally repairable codes are respectively introduced in <ref type="bibr" target="#b10">[11]</ref> and <ref type="bibr" target="#b11">[12]</ref>. The authors of <ref type="bibr" target="#b3">[4]</ref> describe an implementation of locally repairable codes in HDFS and evaluate the savings in network traffic during node repairs, with these codes. A study of locally repairable codes in the context of Windows Azure storage can be found in <ref type="bibr" target="#b12">[13]</ref>, where it is shown that these codes are better choices than Reed-Solomon codes, in terms of their reliability vs storage overhead performance. Regenerating codes have been implemented in a multiple-cloud system in <ref type="bibr" target="#b13">[14]</ref>, and for HDFS in <ref type="bibr" target="#b14">[15]</ref>. Both works focus on the problem of decreasing repair bandwidth. Statistics regarding node failures in Hadoop clusters with thousands of nodes have been reported in <ref type="bibr" target="#b3">[4]</ref>, <ref type="bibr" target="#b15">[16]</ref>. A class of erasure codes for minimizing I/O during recovery and degraded reads with application to cloud-file systems has been proposed in <ref type="bibr" target="#b16">[17]</ref>.</p></div><figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_0"><head>Figure 1 :</head><label>1</label><figDesc>Figure 1: Codes with inherent double replication of data.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_1"><head>All</head><label></label><figDesc>blocks in the same pentagon node are mapped to the same data node</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_2"><head>Figure 2 :</head><label>2</label><figDesc>Figure 2: The manner in which tasks are mapped onto nodes in the case of the pentagon code is shown here.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_3"><head>Figure 3 :</head><label>3</label><figDesc>Figure 3: Percentage data locality with 2-rep, pentagon and heptagon-local codes, as a function of job load on a system, for the cases of Âµ = 2, 4, 8 map slots per node. Also shown, is the improvement in locality obtained over the delay scheduler via the modified peeling algorithm, for the case of Âµ = 4.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_4"><head>Figure 4 :</head><label>4</label><figDesc>Figure 4: Network traffic, data locality and job time for the Terasort job in set-up 1, having 2 map-slots per node.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_6"><head>Figure 5 :</head><label>5</label><figDesc>Figure 5: Network traffic and data locality for the Terasort job in set-up 2, having 4 map-slots per node.</figDesc></figure>

			<note place="foot" n="1"> In case, the file to be encoded is larger than 9 blocks, the file is striped into sets of 9 blocks each and each stripe is separately encoded.</note>

			<note place="foot" n="2"> Combine function is a mechanism, while performing MR jobs, to consolidate the outputs of the various map tasks which are performed on the same Hadoop node.</note>
		</body>
		<back>

			<div type="acknowledgement">
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Acknowledgements</head><p>The research of P. Vijay Kumar is supported in part by the National Science Foundation under Grant 0964507 and in part by the NetApp Faculty Fellowship. The works of V. Lalitha and Birenjith Sasidharan are supported by a TCS Research Scholarship.</p></div>
			</div>

			<div type="references">

				<listBibl>

<biblStruct xml:id="b0">
	<monogr>
		<title level="m" type="main">Hadoop</title>
		<ptr target="http://hadoop.apache.org" />
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b1">
	<analytic>
		<title level="a" type="main">Mapreduce: simplified data processing on large clusters</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Dean</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Ghemawat</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Communications of the ACM</title>
		<imprint>
			<biblScope unit="volume">51</biblScope>
			<biblScope unit="issue">1</biblScope>
			<biblScope unit="page" from="107" to="113" />
			<date type="published" when="2008" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b2">
	<analytic>
		<title level="a" type="main">Availability in globally distributed storage systems</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Ford</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">F</forename><surname>Labelle</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">F</forename><forename type="middle">I</forename><surname>Popovici</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Stokely</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">V.-A</forename><surname>Truong</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">L</forename><surname>Barroso</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><surname>Grimes</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Quinlan</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">OSDI</title>
		<imprint>
			<date type="published" when="2010" />
			<biblScope unit="page" from="61" to="74" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b3">
	<analytic>
		<title level="a" type="main">Xoring elephants: Novel erasure codes for big data</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Sathiamoorthy</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Asteris</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Papailiopoulos</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><forename type="middle">G</forename><surname>Dimakis</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Vadali</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Chen</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Borthakur</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. of the VLDB Endowment</title>
		<meeting>of the VLDB Endowment</meeting>
		<imprint>
			<date type="published" when="2013" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b4">
	<monogr>
		<title level="m" type="main">HDFS RAID</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Borthakur</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Schmit</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Vadali</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Chen</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><surname>Kling</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2010" />
			<publisher>Yahoo Developer Network</publisher>
		</imprint>
	</monogr>
<note type="report_type">Tech talk</note>
</biblStruct>

<biblStruct xml:id="b5">
	<analytic>
		<title level="a" type="main">Distributed Storage Codes With Repair-by-Transfer and Nonachievability of Interior Points on the Storage-Bandwidth Tradeoff</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">N</forename><forename type="middle">B</forename><surname>Shah</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">K</forename><forename type="middle">V</forename><surname>Rashmi</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><forename type="middle">V</forename><surname>Kumar</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">K</forename><surname>Ramchandran</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE Trans. Inf. Theory</title>
		<imprint>
			<biblScope unit="volume">58</biblScope>
			<biblScope unit="issue">3</biblScope>
			<biblScope unit="page" from="1837" to="1852" />
			<date type="published" when="2012-03" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b6">
	<analytic>
		<title level="a" type="main">Reliability mechanisms for very large storage systems</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Q</forename><surname>Xin</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">E</forename><forename type="middle">L</forename><surname>Miller</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><surname>Schwarz</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><forename type="middle">D</forename><surname>Long</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><forename type="middle">A</forename><surname>Brandt</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">W</forename><surname>Litwin</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">IEEE MSST</title>
		<imprint>
			<date type="published" when="2003" />
			<biblScope unit="page" from="146" to="156" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b7">
	<monogr>
		<title level="m" type="main">Codes with Local Regeneration</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">G</forename><forename type="middle">M</forename><surname>Kamath</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">N</forename><surname>Prakash</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">V</forename><surname>Lalitha</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><forename type="middle">Vijay</forename><surname>Kumar</surname></persName>
		</author>
		<idno type="arXiv">arXiv:1211.1932</idno>
		<imprint>
			<date type="published" when="2012" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b8">
	<analytic>
		<title level="a" type="main">Delay scheduling: a simple technique for achieving locality and fairness in cluster scheduling</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Zaharia</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Borthakur</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Sen</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">K</forename><surname>Sarma</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Elmeleegy</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">I</forename><surname>Shenker</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Stoica</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">ACM Eurosys</title>
		<imprint>
			<date type="published" when="2010" />
			<biblScope unit="page" from="265" to="278" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b9">
	<analytic>
		<title level="a" type="main">Degree-guided map-reduce task assignment with data locality constraint</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Q</forename><surname>Xie</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Y</forename><surname>Lu</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">IEEE ISIT</title>
		<imprint>
			<date type="published" when="2012" />
			<biblScope unit="page" from="985" to="989" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b10">
	<analytic>
		<title level="a" type="main">Network coding for distributed storage systems</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Dimakis</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><surname>Godfrey</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Y</forename><surname>Wu</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Wainwright</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">K</forename><surname>Ramchandran</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE Trans. Inf. Theory</title>
		<imprint>
			<biblScope unit="volume">56</biblScope>
			<biblScope unit="issue">9</biblScope>
			<biblScope unit="page" from="4539" to="4551" />
			<date type="published" when="2010-09" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b11">
	<analytic>
		<title level="a" type="main">On the Locality of Codeword Symbols</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><surname>Gopalan</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><surname>Huang</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">H</forename><surname>Simitci</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Yekhanin</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE Trans. Inf. Theory</title>
		<imprint>
			<biblScope unit="volume">58</biblScope>
			<biblScope unit="issue">11</biblScope>
			<biblScope unit="page" from="6925" to="6934" />
			<date type="published" when="2012-11" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b12">
	<analytic>
		<title level="a" type="main">Erasure coding in windows azure storage</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><surname>Huang</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">H</forename><surname>Simitci</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Y</forename><surname>Xu</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Ogus</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">B</forename><surname>Calder</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><surname>Gopalan</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Li</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Yekhanin</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">USENIX ATC</title>
		<imprint>
			<date type="published" when="2012" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b13">
	<analytic>
		<title level="a" type="main">NCCloud: applying network coding for the storage repair in a cloud-of-clouds</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Y</forename><surname>Hu</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">H</forename><surname>Chen</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><surname>Lee</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Y</forename><surname>Tang</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">USENIX FAST</title>
		<imprint>
			<date type="published" when="2012" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b14">
	<analytic>
		<title level="a" type="main">CORE: Augmenting Regenerating-CodingBased Recovery for Single and Concurrent Failures in Distributed Storage Systems</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><forename type="middle">P C L</forename><surname>Li</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Jian</forename><surname>Lin</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">IEEE MSST</title>
		<imprint>
			<date type="published" when="2013" />
		</imprint>
	</monogr>
	<note>Short paper</note>
</biblStruct>

<biblStruct xml:id="b15">
	<analytic>
		<title level="a" type="main">A Solution to the Network Challenges of Data Recovery in Erasure-coded Distributed Storage Systems: A Study on the Facebook Warehouse Cluster</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">K</forename><forename type="middle">V</forename><surname>Rashmi</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">N</forename><forename type="middle">B</forename><surname>Shah</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Gu</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">H</forename><surname>Kuang</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Borthakur</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">K</forename><surname>Ramchandran</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">USENIX HotStorage</title>
		<imprint>
			<date type="published" when="2013" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b16">
	<analytic>
		<title level="a" type="main">Rethinking erasure codes for cloud file systems: Minimizing i/o for recovery and degraded reads</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">O</forename><surname>Khan</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Burns</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Plank</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">W</forename><surname>Pierce</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><surname>Huang</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">USENIX FAST</title>
		<imprint>
			<date type="published" when="2012" />
		</imprint>
	</monogr>
</biblStruct>

				</listBibl>
			</div>
		</back>
	</text>
</TEI>
