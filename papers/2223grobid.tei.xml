<?xml version="1.0" encoding="UTF-8"?>
<TEI xmlns="http://www.tei-c.org/ns/1.0" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
xsi:schemaLocation="http://www.tei-c.org/ns/1.0 /Users/atharsefid/Desktop/grobid-0.5.3/grobid-home/schemas/xsd/Grobid.xsd"
 xmlns:xlink="http://www.w3.org/1999/xlink">
	<teiHeader xml:lang="en">
		<encodingDesc>
			<appInfo>
				<application version="0.5.3" ident="GROBID" when="2020-09-29T02:32+0000">
					<ref target="https://github.com/kermitt2/grobid">GROBID - A machine learning software for extracting information from scholarly documents</ref>
				</application>
			</appInfo>
		</encodingDesc>
		<fileDesc>
			<titleStmt>
				<title level="a" type="main">BugBox : A Vulnerability Corpus for PHP Web Applications</title>
			</titleStmt>
			<publicationStmt>
				<publisher/>
				<availability status="unknown"><licence/></availability>
			</publicationStmt>
			<sourceDesc>
				<biblStruct>
					<analytic>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Gary</forename><surname>Nilson</surname></persName>
							<affiliation key="aff0">
								<orgName type="department" key="dep1">Computer Science Department</orgName>
								<orgName type="department" key="dep2">Computer Science Department</orgName>
								<orgName type="department" key="dep3">Computer Science Department</orgName>
								<orgName type="department" key="dep4">Computer Science Department</orgName>
								<orgName type="institution" key="instit1">University of Maryland</orgName>
								<orgName type="institution" key="instit2">University of Maryland</orgName>
								<orgName type="institution" key="instit3">University of Maryland</orgName>
								<orgName type="institution" key="instit4">University of Maryland</orgName>
							</affiliation>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Kent</forename><surname>Wills</surname></persName>
							<affiliation key="aff0">
								<orgName type="department" key="dep1">Computer Science Department</orgName>
								<orgName type="department" key="dep2">Computer Science Department</orgName>
								<orgName type="department" key="dep3">Computer Science Department</orgName>
								<orgName type="department" key="dep4">Computer Science Department</orgName>
								<orgName type="institution" key="instit1">University of Maryland</orgName>
								<orgName type="institution" key="instit2">University of Maryland</orgName>
								<orgName type="institution" key="instit3">University of Maryland</orgName>
								<orgName type="institution" key="instit4">University of Maryland</orgName>
							</affiliation>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Jeffrey</forename><surname>Stuckman</surname></persName>
							<affiliation key="aff0">
								<orgName type="department" key="dep1">Computer Science Department</orgName>
								<orgName type="department" key="dep2">Computer Science Department</orgName>
								<orgName type="department" key="dep3">Computer Science Department</orgName>
								<orgName type="department" key="dep4">Computer Science Department</orgName>
								<orgName type="institution" key="instit1">University of Maryland</orgName>
								<orgName type="institution" key="instit2">University of Maryland</orgName>
								<orgName type="institution" key="instit3">University of Maryland</orgName>
								<orgName type="institution" key="instit4">University of Maryland</orgName>
							</affiliation>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">James</forename><surname>Purtilo</surname></persName>
							<affiliation key="aff0">
								<orgName type="department" key="dep1">Computer Science Department</orgName>
								<orgName type="department" key="dep2">Computer Science Department</orgName>
								<orgName type="department" key="dep3">Computer Science Department</orgName>
								<orgName type="department" key="dep4">Computer Science Department</orgName>
								<orgName type="institution" key="instit1">University of Maryland</orgName>
								<orgName type="institution" key="instit2">University of Maryland</orgName>
								<orgName type="institution" key="instit3">University of Maryland</orgName>
								<orgName type="institution" key="instit4">University of Maryland</orgName>
							</affiliation>
						</author>
						<title level="a" type="main">BugBox : A Vulnerability Corpus for PHP Web Applications</title>
					</analytic>
					<monogr>
						<imprint>
							<date/>
						</imprint>
					</monogr>
				</biblStruct>
			</sourceDesc>
		</fileDesc>
		<profileDesc>
			<abstract>
				<p>Web applications are a rich source of vulnerabilities due to their high exposure, diversity, and popularity. Accordingly , web application vulnerabilities are useful subjects for empirical security research. Although some information on vulnerabilities is publicly available, there are no publicly available datasets that couple vulnerabilities with their source code, metadata, and exploits through an executable test environment. We describe BugBox, a corpus and exploit simulation environment for PHP web application vulnerabilities. BugBox provides a test environment and a packaging mechanism that allows for the distribution and sharing of vulnerability data. The goal is to facilitate empirical vulnerability studies, security tool evaluation, and security metrics research. In addition , the framework promotes developer education by demonstrating exploits and providing a sandbox where they can be run safely. BugBox and its modules are open-source and available online, and new modules may be contributed by community members.</p>
			</abstract>
		</profileDesc>
	</teiHeader>
	<text xml:lang="en">
		<body>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="1">Introduction</head><p>PHP web applications are subject to a wide variety of exploit types, such as cross-site scripting (XSS), cross-site request forgery (CSRF), buffer overflow, and SQL injection. A recent study by White Hat Security <ref type="bibr" target="#b17">[20]</ref> analyzed seven web application platforms: ASP, ASPX, ColdFusion, Struts, JSP, PHP, and Perl, concluding that, on average, PHP applications had one of the highest numbers of serious vulnerabilities relative to the application's attack surface.</p><p>A variety of approaches can be taken to mitigate vulnerabilities. Simple developer education can address many issues before they occur. Also, various software tools and approaches exist like vulnerability scanners, specially hardened platforms or libraries, and software metrics for risk estimation. All of these approaches can be enhanced with data gleaned from past vulnerabilities, bringing a greater empirical assurance that the technique works as intended. For example, developers can gain insights on security by experimenting on vulnerabilities that occurred in the past, while tool developers use historical defect data to evaluate their tools and motivate future improvements <ref type="bibr" target="#b18">[21]</ref>. In our own research in security metric evaluation <ref type="bibr" target="#b15">[18]</ref>, we observed that existing sources of vulnerability data did not supply the necessary structure or metadata to evaluate them completely. This motivated us to build a corpus of executable vulnerabilities that is linked to an automated exploit and test mechanism, allowing for exploits to be observed and instrumented at any point during the data collection and experimentation process.</p><p>BugBox is a framework that streamlines the collection and sharing of vulnerability data, facilitates cyber security experiments, and furthers education on security vulnerabilities. It allows users to identify a vulnerability in a web application, quickly develop an exploit script, and collect execution traces of vulnerability data. The results are packaged into a structured format that facilitates sharing and collaboration. Exploits can also be demonstrated by displaying a live web browser visualization that shows the exploit being performed from the attacker's perspective.</p><p>Security researchers and tool developers can use BugBox to evaluate vulnerability mitigation techniques and perform large-scale experiments in an environment that can easily be guarded from contamination. The framework also facilitates the generation of vulnerability runtime data and measurements tailored to specific uses, supporting efforts to characterize malicious traffic and validate security metrics. Developers and system administrators could also use BugBox to learn about vulnerabilities or aid in evaluation of intrusion detection or prevention techniques. Finally, the BugBox framework and its vulnerability modules are freely available, facilitating future, collaborative development of additional modules or the framework itself.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2">Related work</head><p>The vulnerability modules for BugBox leverage existing databases of exploits and vulnerabilities, such as the National Vulnerability Database <ref type="bibr">[10]</ref>, the Open Source Vulnerability Database <ref type="bibr" target="#b10">[12]</ref>, and the Exploit Database <ref type="bibr" target="#b9">[11]</ref>. While these databases are easy to access and contain significant details of the vulnerability, they do not provide a structured collection of vulnerable code that can support statistical analysis and hypothesis testing. By supplying this corpus and an associated test environment, BugBox compliments these databases by aggregating exploit procedures and data on a subset of the vulnerabilities they contain. Another complimentary project, the SAMATE reference dataset <ref type="bibr" target="#b8">[9]</ref>, provides vulnerability data for the evaluation of vulnerability discovery methods. BugBox covers a smaller number of vulnerabilities than SAMATE in greater detail, coupling each vulnerability to an automated exploit environment and guaranteeing that the full source code for each application is present.</p><p>Other efforts such as SecuriBench <ref type="bibr" target="#b7">[8]</ref> and WebGoat <ref type="bibr" target="#b11">[13]</ref> collect vulnerable software for research or educational purposes, although the vulnerabilities are not in the form of a structured corpus. Metasploit <ref type="bibr">[14]</ref>, a framework for building and packaging exploits, is used internally by some BugBox modules to exploit their associated vulnerability, although Metasploit modules themselves do not contain vulnerable applications or other vulnerability metadata. Various other non-security bug prediction research efforts <ref type="bibr" target="#b3">[4,</ref><ref type="bibr" target="#b19">22]</ref> also aggregate various metadata or source code from past defects.</p><p>A corpus of vulnerabilities coupled to a test mechanism, such as BugBox, could benefit various kinds of security research. Static and dynamic analysis tools for discovering vulnerabilities <ref type="bibr" target="#b1">[2,</ref><ref type="bibr" target="#b0">1]</ref> can be evaluated against previously discovered vulnerabilities <ref type="bibr" target="#b6">[7]</ref>, which BugBox provides for web applications. Attack prevention techniques relying on runtime detection of exploits, such as <ref type="bibr" target="#b16">[19]</ref> and our own ongoing research in dynamic decentralized intrusion detection, would be especially suitable for evaluation with BugBox, as the test mechanism and automated exploit scripts are leveraged in these cases.</p><p>Finally, the corpus of vulnerabilities provided by BugBox can facilitate observational studies of vulnerabilities <ref type="bibr" target="#b5">[6]</ref> and empirical evaluations of metrics for vulnerability prediction <ref type="bibr" target="#b12">[15,</ref><ref type="bibr" target="#b15">18]</ref>. The process of computing metrics against a corpus was explored in more detail in our previous wiki corpus research <ref type="bibr" target="#b13">[16]</ref>. In these cases, having the entire source code of vulnerable applications is essential, as the application's vulnerable code must be compared with the application's entire code base.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3">An overview of BugBox</head><p>At the core of BugBox is a packaging system that wraps vulnerabilities, vulnerable applications, and their exploits into redistributable modules. These modules are automatically installed in an isolated chroot environment, that allows for the user to execute the exploit without manually installing the application or risking contaminating a live system. Because only one application is deployed in the target environment at any given time, BugBox remains scalable as new modules are developed and installed.</p><p>Modules also contain metadata that encodes properties of the vulnerability, including an identifier associating each exploit with its entry in one of the public vulnerability databases. The included exploits are in the form of scripts that automatically execute the exploit against the application installed in the local target environment. Because vulnerability installation and exploitation is automated through Python modules, large-scale automated security experiments can be run by calling the relevant functions in the provided API. The collection of exploit execution traces is also automated, easing the process of localizing vulnerabilities and exploits to particular sections of source code.</p><p>The exploit modules can also display the web browser during exploitation, depicting the actions taken by the Selenium driver through Firefox. This feature has been useful for debugging exploits, and has led to quicker turn-around in exploit development. This also allows for demonstrations that teach others the principles behind web vulnerabilities. Such a setup could entail showing a live feed of tcpdump and Apache logs on one screen, while one Firefox window shows the actions taken by an attacker posting a malicious script on a forum, and another Firefox window shows how an unsuspecting administrator can activate a CSRF exploit and execute the script.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.1">Application packaging and the chroot environment</head><p>A key function of BugBox is to manage packaged vulnerable applications in an automated way. BugBox provides an environment for the applications by creating an operating system, a web server, and other dependencies. Preconfigured applications can then be automatically copied in this environment, so their prerequisites are guaranteed to be present and they are in a state that is exploitable. These environments are constructed by setting up chroot jails on a Debian Linux host machine, providing a virtual environment with less overhead than a full VM (virtual machine). A chroot jail supplies an isolated operating system installation (sharing the kernel of the host), allowing for applications, libraries, and configurations to be customized and discarded as needed. These characteristics are important for BugBox, as some applications have conflicting dependencies, and exploits could corrupt the host environment. We create a chroot environment by running the debbootstrap utility supplied by Debian which generates a fresh installation from the official distribution repositories. Because this environment can be based on any Debian release, different versions of the application dependencies can coexist on a single host machine. These dependencies include software such as Apache, PHP, and MYSQL, and their dependant system libraries from a variety of vintages, as some older versions of applications depend on older releases of this dependant software.</p><p>The chroot jail meets BugBox's needs for isolation and state management in a more lightweight manner than creating a full VM. The operating system virtualization features provided by VMs are not needed, as PHP web applications (and most of their vulnerabilities) are typically platform independent. While VMs have superior capabilities for creating system snapshots and performing state recovery, they consume considerable RAM resources, and starting, stopping, and managing them is more cumbersome. Backing up and periodically cleaning up the environment with rsync was found to be adequate for restoring the system to its unadulterated state, eliminating the need for VM snapshots.</p><p>Debootstrap and related tools allow the BugBox environments to be distributed as a set of scripts, allowing users to build the whole environment from a single set of scripts. The scripts automatically install the necessary Debian packages from an official mirror, and they perform the necessary configuration so the environment is ready to run the web applications. Each environment is a single folder which contains a complete Debian installation. The environment can be maintained by using basic file IO operations, allowing scripts to install and remove vulnerabilities by copying and deleting files and avoiding the delays that would be associated with rebooting and rolling back a VM. Although multiple vulnerabilities cannot be concurrently installed in a single BugBox environment, removing one application and installing another can be accomplished quickly and automatically.</p><p>Because BugBox hosts applications containing known vulnerabilities, it is recommended for it to be deployed in an environment isolated from the internet. This ensures the security of the system and that any measurements taken are free from the influence of external traffic. If such an environment is not readily available, BugBox can be installed on a single VM, which can have its internet-facing network interfaces removed after installation. As several BugBox chroot jails can coexist on one VM, an existing VM can be used for this purpose if one is available.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.2">Exploit and vulnerability packaging</head><p>Applications that are installed in the BugBox environment are packaged in Python modules called target modules. Target modules include the vulnerable application's PHP files, the application's database, and metadata on the target's dependencies. The BugBox framework loads the target module into a chroot environment by identifying a Debian version that satisfies the module's dependencies, mounting the module into the environment's filesystem, and running the database scripts against the local MySQL installation. Modules are removed by removing the module's files from the environment. Because we load a clean application into the chroot jail every time a new test is run, there is no corruption of the original web application, providing reproducible results when testing.</p><p>A second kind of BugBox module, the exploit module, contains information on a vulnerability and a scripted exploit. Developing BugBox-specific exploit scripts is considerably simpler than writing general-purpose exploits, because applications in BugBox are installed in a predictable environment which is repeatedly reset to its original state. These attributes serve to document the module's exploit and associated vulnerability. They are also used by the BugBox framework to perform batch processes across all available exploits, such as displaying information about exploits meeting certain criteria. These processes can be extended by scripts calling the BugBox API, grabbing collections of exploit instances based on regular expressions matching the attributes.</p><p>Scripted exploits are implemented as methods in exploit modules. These scripts leverage Selenium, a scriptable application that drives and automates web browsers such as Firefox. Selenium integrates with the framework through stable and well-documented Python bindings, providing demonstration/visualization capabilities, JavaScript support, and easy interaction with HTML objects. The exploit code interacts with Selenium to per-form pre-exploitation checks of the target and executes the exploit by automating a browser.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.3">Collection of traces and vulnerability localization</head><p>An important activity associated with empirical vulnerability research is representing which functionality, or section of code, accounts for the vulnerable aspect of the program. We refer to this task as vulnerability localization, and BugBox is designed to collect structured trace data that assists in the localization process. The BugBox environment includes an execution trace collector supported by XDebug, which automatically traces the PHP application's execution while the exploit takes place. We categorize the vulnerability representations previously used in research as being line-based, run-based, or trace-based. A line-based approach for vulnerability representation associates particular lines of a program with a vulnerability. This data can easily be collected by mining vulnerability data from program patches <ref type="bibr" target="#b4">[5]</ref>; however, there can be multiple ways to fix a vulnerability, and a patch represents only one of those ways and may contain irrelevant changes. Run-based representations and signatures <ref type="bibr" target="#b2">[3]</ref> characterize vulnerabilities by describing the inputs that may exploit them, rather than the lines of code that were faulty.</p><p>We are developing a third, trace-based approach for localizing vulnerabilities. Execution traces of individual requests are classified by a regular language as potentially exploitative or non-exploitative. This approach allows for representations to be crafted that include the source code artifacts that were invoked during exploitative runs, capturing each opportunity where sanitization or other defensive programming could have prevented the attack. By collecting execution traces of exploits, BugBox facilitates the construction of run-based or trace-based representations.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4">Adding vulnerabilities to BugBox</head><p>To add a new vulnerability to the corpus, several artifacts must be compiled. A new exploit script and metadata are always required. If a module does not yet exist for the target application, a new target module must also be developed. Although the BugBox corpus compiles vulnerabilities from open-source applications, it is sometimes hard to obtain the vulnerable versions of an application. Therefore, creating the target module may involve hunting down application versions from third-party website or searching through the branches of a source repository. Once the application has been obtained, a manual execution of the exploit is performed to verify the vulnerability report's claims and that the exploit mechanism is fully understood. Subsequently, the exploit script is written so that the entire process can be recorded in an entry in the corpus. As a final step, the exploit is run against the target while the debugger collects the execution trace of the program, which is then added the corpus.</p><p>Some vulnerable applications require old versions of dependencies (such as PHP or Apache) not present in the target environment, necessitating a new operating system instance. Because, as we have verified, some older Linux distributions can run under a newer kernel, this can be accomplished by simply creating a new chroot environment. Because most PHP web applications do not have a wide range of system dependencies, the application targets will only require a handful of different OS environments.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5">An Example Execution of BugBox</head><p>The following Python scripts illustrate two use cases for the BugBox framework. Both of these examples show ways to make use of vulnerability metadata to perform different tasks. In the first example, all XSS vulnerabilities in the the corpus are sequentially exploited, and execution traces are collected for analysis: <ref type="bibr" target="#b0">1</ref> import config 2 from framework import Query , Engine 3 4</p><p>for Exploit in Query (). get_by_type (... Here, instead of collecting traces for all vulnerabilities of the same type, we are interested in running all exploits across all versions of a given application (for example, to test an intrusion detection system which was installed in the test environment before running this process):</p><p>1 import config 2 from framework import Query , Engine 3 4 for Exploit 5 in Query (). get_by_re (... For simple tasks where the focus of study is a single vulnerability or vulnerable application, the application can be managed from the command line. Some basic commands are provided in the bbmanage.py utility with the following options:   The corpus is composed of exploits, chroot jails, target applications, and associated plugins for target applications. Exploits and chroot jails are under control of the engine, and the exploits interact directly with the target application (during exploitation) through the Selenium Server or libraries such as urllib. All databases associated with the target applications are hosted directly on the host environment, and the database server is under control of the engine. Except for the host environment, each of the five major components are represented directly in BugBox as either a Python module or a package.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="6.1">Engine</head><p>It is the job of the Engine to match exploits with target modules and actually perform setup, configuration, and teardown work. The Engine will prepare a chroot environment by mounting target operating system and web application folders under the environment, load a stored MySQL database, install the appropriate XDebug PHP debugger configuration file, start the web server, and eventually perform cleanup operations associated with these steps.</p><p>To illustrate the role of the engine, the following lines in the first use case are relevant:</p><p>Line 5 engine = Engine(Exploit(), config)</p><p>A new engine instance is constructed with an exploit instance and system configuration as arguments.</p><p>Line 6 engine.startup() The engine creates a chroot environment on the host system to which the target application is copied. The choice of application is determined by the 'Target' attribute in the exploit instance. The engine can modify the state of the trace collection in X Debug to ensure that only the trace pertinent to the exploitation is collected.</p><p>Line 10 engine.shutdown() This cleanup code unmounts the chroot environment and returns the corpus environment back to an un-altered state.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="6.2">Target module</head><p>The Target module contains logic relevant to deploying the application target that the exploit may be applied to. More specifically, an application target is a specific version of a PHP web application such as WordPress. A copy of the target application with a typical configuration is always loaded before any exploit script is run. For each application, an initialization script is written to provide the Engine with the proper details for the installation; for example: Some large web applications, such as WordPress, have many plugins that have vulnerabilities themselves. Therefore, Target modules also allow for the inclusion of plugins in the exploit framework. Both targets and target plugins are resolved against the exploit attributes by the Engine during the setup process.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="6.3">Exploit class</head><p>The Exploit class is the superclass for each exploit in the corpus, defining interfaces and attributes that the engine uses to manage the environment and exploitation. The Exploit class is structured such that exploits can be written with concise code functions. Each exploit is simply a subclass of Exploit residing in its own Python file. This class ensures that the Selenium driver is properly initialized and bound to each exploit, and that each exploit script can define actions to take upon installation.</p><p>The separation between targets and exploits allows for those unfamiliar with the framework to develop exploits without being concerned with the application or environment setup process, allowing BugBox to be extended without having to learn the intricacies of the entire framework.</p><p>Metadata for the exploit module is provided by its attribute dictionary. In it, we declare the name, description, references, target, type, and wiki page for the exploit. The name is the identifier specified in one of the online databases of vulnerabilities mentioned earlier in this paper. The description is a brief statement of what the exploit is supposed to do, because the name is typically does not describe what type of exploit is being applied. The Target is the web application module which is being used for the exploit. The type is the type of exploit being conducted (such as XSS). The wiki page directs a user to a page where auxiliary information about the exploit or script is recorded. The Query module, also part of BugBox, allows for this metadata queried across all exploits (as described in the use cases).</p><p>Here is an example body of an exploit procedure used for a simple XSS attack. Scripting the exploit only requires instantiating the Selenium driver and submitting a request on the WordPress site with the payload: 1 payload = " &lt;a href =\"#\" title =\" XSS \ 2 http : " // example . com / \ 3 onmouseover = eval ( " \ 4</p><p>" unescape (/%61%6 c %65% " \ 5 " 7 2 % 7 4 % 2 8 % 3 1 % 2 9 % 3 b %61 " \ 6 " %6 c % 6 5% 72 %7 4 %2 8% 32 "</p><formula xml:id="formula_0">\ 7 " %29%3 b %61%6 c %65%72 " \ 8 " %7 4%28%33% 29%3 b /. " \ 9</formula><p>" source ))//\ " &gt; XSS &lt;/ a &gt; " 10 11 driver = self . c r e a t e _ s e l e n i u m _ d r i v e r () 12 13 driver . get (...</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>14</head><p>" http :// localhost / wordpress /? p =1 " ) 15 get = driver . f i n d _ e l e m e n t _ b y _ i d 16 get ( " author " ). send_keys (...</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>17</head><p>" selenium script " ) 18 get ( " email " ). send_keys (...</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>19</head><p>" se le n iu m@ py t ho n . org " ) 20 get ( " url " ). send_keys ( " www . python . org " ) 21 get ( " comment " ). send_keys ( payload ) 22 get ( " submit " ). click ()</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="6.4">Cleanup and maintenance</head><p>Functionality that performs cleanup and maintenance are included in BugBox to ensure that results based on the framework are reproducible. There are many changes that occur in the system over the course of the exploit cycle that will potentially need to be eliminated. Even changes that would normally seem innocuous, like recording events to a log file, have the potential to at some point change program behaviour.</p><p>Since the chroot environments on the host machine are represented as directories in the host filesystem, simple scripts are used to maintain them. Scripts using rsync are employed to periodically overwrite the chroot jails with fresh copies to maintain the integrity of their operating systems. Exploit scripts are also responsible for removing their own side-effects from the target application. For instance, many exploits upload an arbitrary file to be executed by the webserver. The exploit classes can implement a cleanup method which has direct access to the target filesystem, allowing for the environment to be restored to its pre-exploitation state.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="7">Lessons learned</head><p>In developing BugBox, we learned four key lessons, involving: the need for multiple versions of environments, the utility of visual aids to speed up exploit script development, the importance of representative sampling, and the benefits of building a modular system.</p><p>Being able to install web applications onto multiple operating system environments is a critical factor in corpus development. When creating a corpus, a wide variety of examples is required, including web application versions that are outdated. Some of these outdated applications have dependencies on older software versions, which are only included with obsolete Linux distributions. For this reason, we ensured that BugBox supported the use of multiple environments with different Linux distributions.</p><p>Exploit script development is a repetitive and necessary process. We found that the instant feedback provided by the Selenium visual framework allowed us to more rapidly create exploit scripts. Being able to visually monitor the execution of the scripts allows developers to efficiently pinpoint errors, streamlining script generation.</p><p>Originally, when collecting samples for our corpus, we failed to focus on collecting a representative sample across independent variables such as vulnerability type and age. Having a proper sample is important when evaluating exploit prevention techniques <ref type="bibr" target="#b14">[17]</ref> or analyzing source code metrics, to ensure that the result is fair and representative. We will remediate this by collect-ing new vulnerabilities and stratifying the sample across these variables, and we recommend that future teams collecting vulnerability data apply proper sampling procedures as early in the process as possible.</p><p>In our original implementation of this framework, each vulnerability was permanently installed on a separate virtual machine image. We found that introducing new processes which affected the entire corpus (such as beginning to collect execution traces) required large amounts of labor, repeating the process for each VM. The BugBox framework automatically installs vulnerable applications onto a test environment which can be customized at any time, speeding up these tasks. Repetitive research tasks are further facilitated by the use of Python as a layer of abstraction above the target environment, target application, and exploits.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="7.1">Ethical Considerations</head><p>BugBox is a powerful tool for researchers which could potentially provide a foundation for a fully automated attack platform for malicious attackers. With this in mind, we implemented measures to decrease the potential for malicious use of our system through two rules:</p><p>First, no zero-day exploits will be added or accepted to the main distribution of BugBox. Because BugBox is used for research and education, it is sufficient to limit the scope of BugBox to historical vulnerabilities which are already cataloged in any well-known vulnerability or exploit database. Next, all new exploits created or accepted for the framework will only include functionality necessary to test the vulnerability in the BugBox environment and will not contain code that is tailored toward a general-purpose attack. This provides more overhead for an attacker considering using this tool maliciously. Significant modification would be required for an exploit script to carry an actual malicious payload or target vulnerable applications in an unpredictable, real-life environment. Although it is not practical to prevent any user from maliciously using an exploit repository, including our own, by implementing these measures, we seek to limit the audience of malicious users.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="8">Future work</head><p>We plan to implement additional features for controlling trace collection through cookie manipulation via XDebug. This will reduce the collection of insignificant interactions (such as pre-exploit setup requests) and provide a more refined break-down of the exploitation process, as traces would be grouped by HTTP request.</p><p>The exploits in the corpus have no standard method for selecting the payload which will used in the attack.</p><p>Since studies on intrusion detection or prevention systems may be sensitive to the payload type and encoding, researchers may desire finer-grained control over this property. The Metasploit Framework has a robust system for managing exploits along with their payloads and encodings, serving as a model for implementing this if needed.</p><p>More information on obtaining BugBox for research use is available from our website: http://seam.cs. umd.edu/Projects/BugBox/. BugBox is designed to work on the Debian GNU/Linux and compatible distributions. The framework can be obtained in the form of a package which can be installed on an existing system. The system must have sufficient storage (roughly 4 GB per OS environment, and up to 2 GB for the application, engine, and exploit sources) with access rights to use run Linux chroot jails. Dependencies for the BugBox host system include MySQL, Selenium Server, and debootstrap. Community contributions will be key to building a corpus of sufficient size, therefore, community members may contribute BugBox exploit and target modules as described on the website. The framework is distributed under an open-source license. Because the corpus is composed entirely of open-source applications, target modules will be distributed under the application's respective license.</p></div><figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_2"><head>5 Figure 1 :</head><label>51</label><figDesc>Figure 1: System Diagram</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_3"><head>Figure 6 illustrates</head><label>6</label><figDesc>Figure 6 illustrates the structure of the BugBox system, with arrows representing lines of control or communication. The framework contains five components: Host Environment (the physical or virtual machine running BugBox), Engine, Target Environment (the chroot environment), Target Module, and Exploit Module. The corpus is composed of exploits, chroot jails, target applications, and associated plugins for target applications. Exploits and chroot jails are under control of the engine, and the exploits interact directly with the target application (during exploitation) through the Selenium Server or libraries such as urllib. All databases associated with the target applications are hosted directly on the host environment, and the database server is under control of the engine. Except for the host environment, each of the five major components are represented directly in BugBox as either a Python module or a package.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_4"><head></head><label></label><figDesc>Lines 7 &amp; 9 engine.xdebug autotrace on() engine.xdebug autotrace on()</figDesc></figure>
		</body>
		<back>

			<div type="acknowledgement">
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Acknowledgments</head><p>The authors thank the United States Office of Naval Research for its support for this research under contract N000141210147.</p></div>
			</div>

			<div type="references">

				<listBibl>

<biblStruct xml:id="b0">
	<analytic>
		<title level="a" type="main">Comparing the effectiveness of penetration testing and static code analysis on the detection of sql injection vulnerabilities in web services</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Antunes</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">N</forename><surname>And</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Vieira</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of PRDC&apos;09: 15th IEEE Pacific Rim International Symposium on Dependable Computing</title>
		<meeting>PRDC&apos;09: 15th IEEE Pacific Rim International Symposium on Dependable Computing</meeting>
		<imprint>
			<publisher>IEEE</publisher>
			<date type="published" when="2009" />
			<biblScope unit="page" from="301" to="306" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b1">
	<analytic>
		<title level="a" type="main">One technique is not enough: A comparison of vulnerability discovery techniques</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Austin</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>And</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Williams</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">L</forename></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of Empirical Software Engineering and Measurement (ESEM), International Symposium on</title>
		<meeting>Empirical Software Engineering and Measurement (ESEM), International Symposium on</meeting>
		<imprint>
			<date type="published" when="2011-09" />
			<biblScope unit="page" from="97" to="106" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b2">
	<analytic>
		<title level="a" type="main">Theory and techniques for automatic generation of vulnerability-based signatures. Dependable and Secure Computing</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Brumley</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Newsome</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Song</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Wang</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">H</forename><surname>And</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Jha</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE Transactions on</title>
		<imprint>
			<biblScope unit="volume">5</biblScope>
			<biblScope unit="page" from="224" to="241" />
			<date type="published" when="2008-12" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b3">
	<analytic>
		<title level="a" type="main">An extensive comparison of bug prediction approaches</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D&amp;apos;</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Ambros</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Lanza</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>And</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Robbes</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of Mining Software Repositories (MSR), 7th IEEE Working Conference on</title>
		<meeting>Mining Software Repositories (MSR), 7th IEEE Working Conference on</meeting>
		<imprint>
			<publisher>IEEE</publisher>
			<date type="published" when="2010" />
			<biblScope unit="page" from="31" to="41" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b4">
	<analytic>
		<title level="a" type="main">Mapping software faults with web security vulnerabilities</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Fonseca</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>And</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Vieira</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of IEEE DSN &apos;08 Conference on Dependable Systems and Networks</title>
		<meeting>IEEE DSN &apos;08 Conference on Dependable Systems and Networks</meeting>
		<imprint>
			<date type="published" when="2008" />
			<biblScope unit="page" from="257" to="266" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b5">
	<analytic>
		<title level="a" type="main">An empirical investigation into open source web applications implementation vulnerabilities</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Huynh</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><surname>And Miller</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Empirical Software Engineering</title>
		<imprint>
			<biblScope unit="volume">15</biblScope>
			<biblScope unit="page" from="556" to="576" />
			<date type="published" when="2010" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b6">
	<analytic>
		<title level="a" type="main">A buffer overflow benchmark for software model checkers</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">K</forename><forename type="middle">U</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">K</forename><surname>Hart</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><forename type="middle">E</forename><surname>Chechik</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>And</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Lie</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename></persName>
		</author>
		<idno>ASE &apos;07</idno>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the twenty-second IEEE/ACM international conference on Automated software engineering</title>
		<meeting>the twenty-second IEEE/ACM international conference on Automated software engineering<address><addrLine>New York, NY, USA</addrLine></address></meeting>
		<imprint>
			<publisher>ACM</publisher>
			<date type="published" when="2007" />
			<biblScope unit="page" from="389" to="392" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b7">
	<analytic>
		<title level="a" type="main">Defining a set of common benchmarks for web application security</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Livshits</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">B</forename></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Workshop on Defining the State of the Art in Software Security Tools</title>
		<meeting><address><addrLine>Baltimore</addrLine></address></meeting>
		<imprint>
			<publisher>Citeseer</publisher>
			<date type="published" when="2005-08" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b8">
	<monogr>
		<title/>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Nist</forename><surname>Samate</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Dataset</surname></persName>
		</author>
		<ptr target="http://samate.nist.gov/SRD/" />
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b9">
	<monogr>
		<title/>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Offensive</forename><forename type="middle">Exploit</forename><surname>Security</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Db</surname></persName>
		</author>
		<ptr target="http://www.exploit-db.com/" />
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b10">
	<monogr>
				<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Offensive</forename><surname>Security</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Osvdb</surname></persName>
		</author>
		<ptr target="http://www.osvdb.org/" />
		<title level="m">The open source vulnerability database</title>
		<imprint>
			<date type="published" when="2013" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b11">
	<monogr>
		<title/>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Owasp</forename><surname>Webgoat</surname></persName>
		</author>
		<ptr target="https://code.google.com/p/webgoat/" />
		<imprint>
			<date type="published" when="2013" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b12">
	<analytic>
		<title level="a" type="main">Evaluating complexity, code churn, and developer activity metrics as indicators of software vulnerabilities. Software Engineering</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Shin</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Y</forename><surname>Meneely</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Williams</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">L</forename><surname>And</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Osborne</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><forename type="middle">A</forename></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE Transactions on</title>
		<imprint>
			<biblScope unit="volume">37</biblScope>
			<biblScope unit="page" from="772" to="787" />
			<date type="published" when="2011" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b13">
	<analytic>
		<title level="a" type="main">Analyzing the wikisphere: Methodology and data to support quantitative wiki research</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Stuckman</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>And</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Purtilo</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Journal of the American Society for Information Science and Technology</title>
		<imprint>
			<biblScope unit="volume">62</biblScope>
			<biblScope unit="page" from="1564" to="1576" />
			<date type="published" when="2011" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b14">
	<analytic>
		<title level="a" type="main">A testbed for the evaluation of web intrusion prevention systems</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Stuckman</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>And</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Purtilo</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of MetriSec: International Workshop on Security Measurements and Metrics</title>
		<meeting>MetriSec: International Workshop on Security Measurements and Metrics</meeting>
		<imprint>
			<publisher>IEEE</publisher>
			<date type="published" when="2011-09" />
			<biblScope unit="page" from="66" to="75" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b15">
	<analytic>
		<title level="a" type="main">Comparing and applying attack surface metrics</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Stuckman</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>And</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Purtilo</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of MetriSec: International Workshop on Security Measurements and Metrics</title>
		<meeting>MetriSec: International Workshop on Security Measurements and Metrics</meeting>
		<imprint>
			<date type="published" when="2012" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b16">
	<analytic>
		<title level="a" type="main">The essence of command injection attacks in web applications</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><forename type="middle">U</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Z</forename><surname>And</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Wassermann</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">G</forename></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Conference record of POPL &apos;06: The 33rd ACM SIGPLAN-SIGACT symposium on Principles of programming languages</title>
		<meeting><address><addrLine>New York, NY, USA</addrLine></address></meeting>
		<imprint>
			<publisher>ACM</publisher>
			<date type="published" when="2006" />
			<biblScope unit="page" from="372" to="382" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b17">
	<monogr>
		<title level="m" type="main">Website security statistic report 9th edition</title>
		<ptr target="https://www.whitehatsec.com/assets/WPstats_spring10_9th.pdf" />
		<imprint>
			<date type="published" when="2010" />
		</imprint>
		<respStmt>
			<orgName>WHITEHAT</orgName>
		</respStmt>
	</monogr>
</biblStruct>

<biblStruct xml:id="b18">
	<analytic>
		<title level="a" type="main">Automatic mining of source code repositories to improve bug finding techniques. Software Engineering</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Williams</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><surname>And</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Hollingsworth</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE Transactions on</title>
		<imprint>
			<biblScope unit="volume">31</biblScope>
			<biblScope unit="issue">6</biblScope>
			<biblScope unit="page" from="466" to="480" />
			<date type="published" when="2005-06" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b19">
	<analytic>
		<title level="a" type="main">Predicting defects for eclipse</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Zimmermann</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><surname>Premraj</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>And</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Zeller</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of PROMISE&apos;07: ICSE Workshop on Predictor Models in Software Engineering</title>
		<meeting>PROMISE&apos;07: ICSE Workshop on Predictor Models in Software Engineering</meeting>
		<imprint>
			<date type="published" when="2007-05" />
			<biblScope unit="page">9</biblScope>
		</imprint>
	</monogr>
</biblStruct>

				</listBibl>
			</div>
		</back>
	</text>
</TEI>
