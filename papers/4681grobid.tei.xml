<?xml version="1.0" encoding="UTF-8"?>
<TEI xmlns="http://www.tei-c.org/ns/1.0" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
xsi:schemaLocation="http://www.tei-c.org/ns/1.0 /Users/atharsefid/Desktop/grobid-0.5.3/grobid-home/schemas/xsd/Grobid.xsd"
 xmlns:xlink="http://www.w3.org/1999/xlink">
	<teiHeader xml:lang="en">
		<encodingDesc>
			<appInfo>
				<application version="0.5.3" ident="GROBID" when="2020-09-29T04:28+0000">
					<ref target="https://github.com/kermitt2/grobid">GROBID - A machine learning software for extracting information from scholarly documents</ref>
				</application>
			</appInfo>
		</encodingDesc>
		<fileDesc>
			<titleStmt>
				<title level="a" type="main">Shattered Trust: When Replacement Smartphone Components Attack</title>
			</titleStmt>
			<publicationStmt>
				<publisher/>
				<availability status="unknown"><licence/></availability>
			</publicationStmt>
			<sourceDesc>
				<biblStruct>
					<analytic>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Omer</forename><surname>Shwartz</surname></persName>
							<affiliation key="aff0">
								<orgName type="institution">Gurion University of the Negev</orgName>
							</affiliation>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Amir</forename><surname>Cohen</surname></persName>
							<affiliation key="aff0">
								<orgName type="institution">Gurion University of the Negev</orgName>
							</affiliation>
						</author>
						<author role="corresp">
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Asaf</forename><surname>Shabtai</surname></persName>
							<email>shabtaia@bgu.ac.il</email>
							<affiliation key="aff0">
								<orgName type="institution">Gurion University of the Negev</orgName>
							</affiliation>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Oren</forename><surname>Yossi</surname></persName>
							<affiliation key="aff0">
								<orgName type="institution">Gurion University of the Negev</orgName>
							</affiliation>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Ben</surname></persName>
							<affiliation key="aff0">
								<orgName type="institution">Gurion University of the Negev</orgName>
							</affiliation>
						</author>
						<title level="a" type="main">Shattered Trust: When Replacement Smartphone Components Attack</title>
					</analytic>
					<monogr>
						<imprint>
							<date/>
						</imprint>
					</monogr>
				</biblStruct>
			</sourceDesc>
		</fileDesc>
		<profileDesc>
			<abstract>
				<p>Phone touchscreens, and other similar hardware components such as orientation sensors, wireless charging controllers , and NFC readers, are often produced by third-party manufacturers and not by the phone vendors themselves. Third-party driver source code to support these components is integrated into the vendor&apos;s source code. In contrast to &quot;pluggable&quot; drivers, such as USB or network drivers, the component driver&apos;s source code implicitly assumes that the component hardware is authentic and trustworthy. As a result of this trust, very few integrity checks are performed on the communications between the component and the device&apos;s main processor. In this paper, we call this trust into question, considering the fact that touchscreens are often shattered and then replaced with aftermarket components of questionable origin. We analyze the operation of a commonly used touchscreen controller. We construct two standalone attacks, based on malicious touchscreen hardware , that function as building blocks toward a full attack: a series of touch injection attacks that allow the touchscreen to impersonate the user and exfiltrate data, and a buffer overflow attack that lets the attacker execute privileged operations. Combining the two building blocks, we present and evaluate a series of end-to-end attacks that can severely compromise a stock Android phone with standard firmware. Our results make the case for a hardware-based physical countermeasure.</p>
			</abstract>
		</profileDesc>
	</teiHeader>
	<text xml:lang="en">
		<body>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="1">Introduction</head><p>Mobile phones are often dropped, shattering their screens. According to a 2015 study, more than 50% of global smartphone owners have damaged their phone screen at least once, and 21% of global smartphone owners are currently using a phone with a cracked or shattered screen <ref type="bibr" target="#b0">[1]</ref>. While phones suffering from fractured screens may be repaired at phone vendor-operated facilities such as Apple Stores, it is often more convenient and cost-effective for phone users to use third-party repair shops. Some technically savvy users may even purchase touchscreen replacement kits from online marketplaces such as eBay and perform the repair themselves. These types of unofficial repairs tend to include the cheapest possible components, and thus may introduce, knowingly or unknowingly, counterfeit or unbranded components into the phone.</p><p>Phone touchscreens, and other similar hardware components such as orientation sensors, wireless charging controllers, and near-field communications (NFC) readers, are seldom produced by the phone vendors themselves. Instead, original equipment manufacturers (OEMs) such as Synaptics, MediaTek and Maxim Integrated provide these components, as well as the device driver source code, to phone vendors who integrate the components into their phones. The vendors then proceed to integrate this code into their own source code, making minor adjustments to account for minor differences between device models, such as memory locations, I/O bus identifiers, etc. These minor tweaks and modifications make the process of creating and deploying patches for such device drivers a very difficult endeavor, as we discuss further in Section 2. The example in <ref type="figure" target="#fig_0">Figure 1</ref> illustrates this setting. The smartphone's main logic board runs a specific OEM code (the device driver) that communicates with the touchscreen over the internal bus using a simple, common interface. Even hardened, secure, or encrypted phones, such as those used by governmental and law enforcement agencies, often use commercial operating systems and a driver architecture that follows the same paradigm <ref type="bibr" target="#b1">[2]</ref>.</p><p>The key insight of this paper starts with the observation that the device drivers (written by the OEMs and slightly modified by the phone vendors) exist inside the phone's trust boundary. In contrast with drivers for "pluggable" peripherals such as USB accessories, these OEM drivers assume that the internal components they communicate with are also inside the phone's trust boundary. However, we observe that these internal components are quite emphatically outside the smartphone's trust boundary. Indeed, there are some hundreds of millions of smartphones with untrusted replacement screens. Our research question was therefore: How might a malicious replacement peripheral abuse the trust given to it by its device driver? How can we defend against this form of abuse?</p><p>Hardware replacement is traditionally considered a strong attack model, under which almost any attack is possible. Uniquely in our case, we add an important restriction to this model: we assume only a specific component, with an extremely limited hardware interface, is malicious. Furthermore, we assume that the repair technician installing the component is uninvolved. Hundreds of millions of devices satisfying this assumption exist in the wild. One can assume that these limitations make this attack vector weaker than complete hardware replacement; we show that it is not.</p><p>In this work we highlight the risk of counterfeit or malicious components in the consumer setting, where the target is the user's privacy, personal assets, and trust. We show how a malicious touchscreen can record user activity, take control of the phone and install apps, direct the user into phishing websites and exploit vulnerabilities in the operating system kernel in order to gain privileged control over the device. Since the attack is carried out by malicious code running out of the CPU's main code space, the result is a fileless attack, which cannot be detected by anti-virus software, leaves no lasting footprint and surviving firmware updates and factory resets.</p><p>Our paper makes the following contributions:</p><p>1. We survey the risk of malicious peripheral attacks on consumer devices and argue that this avenue of attack is both practical and effective.</p><p>2. We introduce the design and architecture of touchscreen assemblies and touch controllers, along with their communication protocols, limiting our scope to smartphones and their screens. In addition, we analyze the operation of a commonly used touch controllers (Synaptics S3718) and their communications with the device driver.</p><p>3. We describe two attack building blocks that can be used in a larger attack: a touch injection attack that allows the touchscreen to impersonate the user, and a buffer overflow attack that lets the attacker execute privileged operations.</p><p>4. Combining the two building blocks, we present a series of end-to-end attacks that can severely compromise a stock Android phone with standard firmware. We implement and evaluate three different attacks, using an experimental setup based on a low-cost (a) Impersonate the user -By injecting touch events into the communication bus, an attacker can perform any activity representing the user. This includes installing software, granting permissions and modifying the device configuration.</p><p>(b) Compromise the user -An attacker can log touch events related to sensitive operations such as lock screen patterns, credentials or passwords. An attacker can also cause the phone to enter a different state than the one expected by the user by injecting touch events. For example, we show an attack that waits until a user enters a URL for a website and then stealthily modifies the touches to enter a URL of a phishing website, thereby causing the user surrender his or her private information.</p><p>(c) Compromise the phone -By sending crafted data to the phone over the touch controller interface, an attacker can exploit vulnerabilities within the device driver and gain kernel execution capabilities.</p><p>5. To demonstrate the generality of our attack method, we show how we ported our attack to another device (Atmel T641) using similar techniques and tools.</p><p>Throughout the relatively short history of smartphones, both malware and protection mechanisms have evolved drastically to fit this emerging platform. Android malware in particular has been shown to utilize privilege escalation, siphon private user data and enlist phones into botnets <ref type="bibr" target="#b2">[3]</ref>. Bickford et al. <ref type="bibr" target="#b3">[4]</ref> address the topic of smartphone rootkits, defining a rootkit as "a toolkit of techniques developed by attackers to conceal the presence of malicious software on a compromised system". Malicious activities performed by rootkits include wiretapping into phone calls, exfiltration of positioning information and battery exhaustion denial of service. Hardware interfaces have recently been a subject of concern for security researchers in the personal computer setting, due to their involvement in highly privileged processes <ref type="bibr" target="#b4">[5]</ref>. Hardware components enjoying Direct Memory Access (DMA) such as the Graphics Processing Unit (GPU) can implant malware within the kernel memory <ref type="bibr" target="#b5">[6]</ref>. Ladakis el al. <ref type="bibr" target="#b6">[7]</ref> demonstrate a GPU based keylogger where the GPU abuses its DMA capabilities for monitoring the keyboard buffer inside the kernel memory and saving keystroke information to the GPU memory. Brocker et al. <ref type="bibr" target="#b7">[8]</ref> used the firmware update functionality of a MacBook iSight camera for installing malicious firmware on the camera. Using their firmware, the authors show the ability of taking discrete photos or videos without turning on the indicator light that informs the user about the usage of the camera. Additionally, the authors use their firmware for enumerating the camera as a USB keyboard and present the ability of the device to escape virtual machine confinement.</p><p>Most of the existing works dealing with hardware interfaces focus on hardware components that can either be updated by the user or easily replaced. Smartphones are more monolithic by design than PCs, their hardware inventory is static and components can only replaced with matching substitutes. The smartphone operating system contains device firmwares that can only be updated alongside the operating system. Thus, there is far less of a research focus on smartphone hardware, based on the assumption that it cannot be easily replaced or updated and is therefore less exposed to the threats discussed above. We challenge this assumption, noting that smartphone components are actually being replaced quite frequently and often with non genuine parts, as we show in Section 3.</p><p>The troubles that may come with counterfeit components had not been completely ignored by the mobile industry. An example is the "error 53" issue experienced by some iPhone users after replacing their fingerprint sensors with off-brand ones and failing validity checks <ref type="bibr" target="#b8">[9]</ref>. However, it seems like these kind of validity checks are not widely accepted, since counterfeit replacements usually pass unnoticed. The risk of counterfeit components had also been raised in the national security setting in a National Institute of Standards (NIST) draft, putting emphasis on supply chains <ref type="bibr">[10]</ref>.</p><p>Zhou et al. <ref type="bibr" target="#b10">[11]</ref> performed a systematic study of the security hazards in Android device customizations. The authors designed a tool, ADDICTED, that detects customization hazards. The authors raised the concern that the customizations performed by vendors can potentially undermine Android security. In a previous work <ref type="bibr" target="#b11">[12]</ref> we focused on driver customizations, reviewing the source code of 26 Android phones and mapping the device drivers that are embedded in the kernel of their operating system. Our survey found a great deal of diversity in OEMs and device drivers. Each phone contained different driver software, and there were few common device drivers between the tested phones. This landscape makes it difficult to patch, test and distribute fixes for vulnerabilities found in driver code.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3">Our Attack Model</head><p>Counterfeit components have been in existence ever since the dawn of the industrial age. Their effectiveness as attack vectors is also well known. What, then, is unique about the particular setting of a smartphone? We argue that our specific attack model is a unique restriction the hardware replacement attack model: we assume only a specific component, with an extremely limited hardware interface, is malicious, while the rest of the phone (both hardware and software) can still be trusted. Furthermore, we assume that the repair technician installing the component is not malicious, and will perform no additional operations other than replacing the original component with a malicious one. Hundreds of millions of devices satisfying this attack model exist in the wild. One can assume that these limitations make this attack vector weaker than complete hardware replacement; we show that it is not. On the contrary, the nature of the smartphone ecosystem makes this attack model both practical and effective.</p><p>The pervasiveness of untrusted components in the smartphone supply chain was investigated in September 2016 by Underwriters Laboratories <ref type="bibr" target="#b13">[14]</ref>. UL researchers obtained 400 iPhone charging adapters from multiple sources in eight different countries around the world, including the U.S., Canada, Colombia, China, Thailand and Australia, and discovered that nearly all of them were counterfeited and contained sub-standard hardware. Similarly, in October 2016 Apple filed a lawsuit against Amazon.com supplier Mobile Star LLC, claiming that "Apple [...] has purchased well over 100 iPhone devices, Apple power products, and Lightning cables sold as gen- <ref type="figure">Figure 2</ref>: The ratio of patched Android CVEs that occur in drivers out of all patched Android CVEs. The figure was compiled using information from the Android security bulletin <ref type="bibr" target="#b12">[13]</ref>.</p><p>uine by sellers on Amazon.com <ref type="bibr">[...and]</ref> revealed almost 90% of these products are counterfeit." <ref type="bibr" target="#b14">[15]</ref>. Considering the condition of the third-party marketplace, one can assume with high confidence that unless a phone has been repaired at a vendor-operated facility such as an Apple Store, it is likely to contain counterfeit components.</p><p>Conservative estimates assume that there are about 2 billion smartphones in circulation today. Assuming that 20% of these smartphones have undergone screen replacement <ref type="bibr" target="#b0">[1]</ref>, there are on the order of 400 million smartphones with replacement screens in the world. An attack which compromises even a small fraction of these smartphones through malicious components will have a rank comparable to that of the largest PC-based botnets.</p><p>Let us next assume that a malicious peripheral, such as a touchscreen, has made it into a victim's smartphone. What sort of damage can it cause?</p><p>As stated in <ref type="bibr" target="#b11">[12]</ref>, attacks based on malicious hardware can be divided into two different classes. First-order attacks use the standard interaction modes of the component, but do so without the user's knowledge or consent. In the specific case of a malicious touchscreen, the malicious peripheral may log the user's touch activity or impersonate user touch events in order to impersonate the user for malicious purposes. We demonstrate some of these attacks in Subsection 5.2 Second order attacks go beyond exchanging properly-formed data, and attempt to cause a malfunction in the device driver and compromise the operating system kernel. Such an attack requires that the peripheral send malformed data to the CPU, causing the device driver to malfunction and thereby compromising the operating system kernel. Once the kernel is compromised, it is possible to disable detection and prevention of suspicious system activity, eavesdrop on sensors and on other applications, and most significantly operate on systems where only a partial software stack had been loaded, such as a device in charging, standby or even turned off state <ref type="bibr" target="#b15">[16,</ref><ref type="bibr" target="#b16">17,</ref><ref type="bibr" target="#b10">11,</ref><ref type="bibr" target="#b17">18,</ref><ref type="bibr" target="#b18">19]</ref>.</p><p>While first order attacks require no software vulnerability and can be performed by any peripheral contained in consumer electronics, second order attacks require a vulnerability to be exploited. The ability of malicious pluggable peripherals to compromise the smartphone is very well demonstrated. A review of 1077 Android CVEs (Common Vulnerabilities and Exposures) patched between August 2015 and April 2017 shows that at least 29.5% (318 items) take place in the device driver context <ref type="bibr" target="#b12">[13]</ref>. <ref type="figure">Figure 2</ref> shows the growth in driver related CVEs. The fact that device driver vulnerabilities are often detected in the pluggable setting, combined with a general lack of attention to the internal component setting, indicated that to us that it was very likely that internal components might be used to trigger vulnerabilities just like pluggable components. In this paper we describe two such vulnerabilities we found in common touchscreen drivers (Synaptics S3718 and Atmel T641).</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4">Reverse Engineering a Touch Screen</head><p>Even though touchscreen assemblies have different functions, capabilities and physical properties according to the phone model that houses them, most of these assemblies have a similar general design. In this Subsection we introduce the key components of the touchscreen assembly and their functions with a focus on the workings of the Huawei Nexus 6P smartphone touchscreen assembly containing the Synaptics S3718 touch controller. In Subsection 7 we extend our analysis to another phone model. Information regarding the Nexus 6P's touchscreen functionality was obtained by reviewing the open source code for the Synaptics device driver available in the Google MSM kernel repository <ref type="bibr" target="#b19">[20]</ref> and by physical disassembly of a phone, followed by reverse engineering the communication protocol using a Saleae logic analyzer.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.1">Touchscreen Assembly</head><p>A touchscreen assembly most essentially contains a display device, such as an Liquid Crystal Display (LCD) or an Organic Light-Emitting Diode Display (OLED). Layered on top of the display is a thin, transparent capacitive or resistive sensing surface allowing accurate positioning of physical events. The sensing functionality is managed by a touch controller, an integrated circuit (IC) responsible for analyzing the signals generated by the sensing surface and translating them into digital data. The touch controller typicaly resides on a daughter printed circuit board (PCB), together with other ICs responsible for other display-related tasks. The daughter board also includes a connector to the main phone board. In many cases, including the Nexus 6P touchscreen assembly, there are multiple daughter boards, one of which is entirely dedicated to the touch capabilities.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.2">Touch Controller Communications</head><p>In most smartphones, the touch controller communicates with the device driver residing on the host processor via a dedicated Inter Integrated Circuit (I 2 C) bus <ref type="bibr" target="#b20">[21]</ref>, a general purpose, low speed bus designed for cost effective communication between Integrated Circuits (ICs). The I 2 C bus behaves as a physical layer between master and slave devices, where master devices are allowed to read and write from and to registers in the slave device's memory. By manipulating these registers, the device driver (acting as master) can control the behavior of the touch controller (acting as slave); by populating the appropriate registers and triggering an interrupt, the touch controller can send events to the device driver. On top of this low-level communication interface, the device driver typically defines a proprietary layer required for the instrumentation and operation of the touch controller.</p><p>In the Nexus 6P phone, the Synaptics S3718 touch controller daughter board has I 2 C connections on contacts SCL and SDA as seen in Sub- <ref type="figure" target="#fig_2">Figure 3b</ref>. It has an additional contact for generating an interrupt notifying the host processor of touch-related events. The I 2 C bus communicates at the rate of 400 Kbps.</p><p>A basic mapping of the shared touch controller registers and functions was extracted from the open source device driver made available by Google. Additional reverse engineering and observation provided a fuller picture of the protocol.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.2.1">Boot up process</head><p>During the boot up process, the device driver probes <ref type="table" target="#tab_0">Table 1</ref>. After probing and querying for the functions, the device driver checks the installed firmware against the firmware file embedded in the kernel memory and triggers a firmware update if necessary. Eventually, the device driver enables the appropriate handlers for all function specific interrupts and writes the configuration data to the relevant functions.</p><note type="other">the touch controller memory and learns which functions the controller possesses. A controller function or capability is reported through a 6 byte function descriptor. The function descriptor contains four register addresses used for manipulating the function along with an interrupt count that signifies the number of interrupt types the function generates. A map of several controller functions can be seen in</note></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.2.2">Touch reporting</head><p>In order to generate a touch event, the touch controller electrically pulls the interrupt line towards the ground and thus notifies the device driver of an incoming event.</p><p>The device driver in turn reads the interrupt register 0x06 and deduces which of the touch controller functions generated the interrupt. In the case of a normal touch event this will be function 0x12. The device driver continues to read a bitmap of the fingers involved in this event from register 0x0C and eventually reads register 0x08 for a full inventory of the touch event.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5">Attack Building Blocks</head><p>This section describes two basic attacks that severely compromise the phone. The first attack allows the attacker to record, intercept, and inject touch events. The second attack leverages vulnerabilities discovered in the operating system kernel and executes privileged arbitrary code. Our attack assumes that the phone's touch controller had been replaced with a malicious component, but that the rest of the hardware and software on the phone is authentic and trusted.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5.1">Attack Setup</head><p>The attacks were demonstrated on a Huawei Nexus 6P smartphone running the Android 6.0.1 operating system, build MTC19X. The phone is operating with stock manufacturer firmware and has been restored to factory state with a memory wipe using the "factory data reset" feature in the settings menu.   The touch screen assembly was separated from the rest of the phone and the touch controller daughter board was located, as seen in <ref type="figure" target="#fig_2">Figure 3a</ref>. Using a hot air blower on the connection between the touch controller daughter board and the main assembly daughter board we were able to separate the boards and access the copper pads. The copper pads were soldered to thin enameled copper wire that was attached to a prototyping board. Using this setup, we were able to simulate a chip-in-the-middle scenario in which a benign touchscreen has been embedded with a malicious integrated chip that manipulates the communication bus. A high-resolution image of our attack setup can be found in the Appendix.</p><p>Our attack used a commonly available Arduino platform <ref type="bibr" target="#b21">[22]</ref> based on the ATmega328 micro-controller for our attack. A setup such as the one described above can easily be minimized in a factory or a skilled shop in order to fit on the touchscreen assembly daughter board. ATmega328, the programmable micro-controller used in our attacks, is available in packages as small as 4 x 4 x 1 mm <ref type="bibr" target="#b22">[23]</ref>. Other, more powerful micro-controllers are available in smaller footprints of 1.47 x 1.58 x 0.4 mm and less <ref type="bibr" target="#b23">[24]</ref>. Since the data sent by our attack fully conforms to the layer 2 and layer 1 parts of the I 2 C specification, it can also be implemented in the firmware of the malicious peripheral's internal micro-controller, removing the need for additional hardware altogether.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5.2">Touch Logging and Touch Injection</head><p>In this attack, the malicious micro-controller eavesdrops on user touch events (touch logging) and injects generated touch events into the communication bus (touch injection). The micro-controller software behind the phishing attack is built of three components: two state machines, one maintaining a keyboard mode and the other maintaining a typing state; and a database that maps screen regions to virtual keyboard buttons. The state machine holding the keyboard modes changes state when a keyboard mode switch key had been pressed. The basic Nexus 6P keyboard has four modes: English characters, symbols, numbers, and emoji. The typing state machine is used for tracking the typed characters and matching them to specified trigger events (such as typing in a URL). Complex context information, such as keyboard orientation, language and activity, has been shown to be detectable from low-level touch events by other authors <ref type="bibr" target="#b24">[25]</ref>. When the required trigger event is reached, touch injection is triggered and a set of generated touch events is sent on the communication line. Our current hardware is capable of creating touch events at a rate of approximately 60 taps per second.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5.3">Arbitrary Code Execution</head><p>This attack exploits vulnerabilities in the touch controller device driver embedded within the operating system kernel in order to gain arbitrary code execution within the privileged kernel context. A chain of logical manipulations on performed by the malicious micro-controller causes a heap overflow in the device driver that is further exploited to perform a buffer overflow.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5.3.1">Design</head><p>As a part of the boot procedure, the device driver queries the functionality of the touch controller. We discovered that by crafting additional functionality information we can cause the device driver to discover more interrupts than its internal data structure can contain, causing a heap overflow. Using the heap overflow we were able to further increase the amount of available interrupts by overrunning the integer holding that value. Next, an interrupt was triggered causing the device driver to request an irregularly-large amount of data and cause a buffer overflow. The buffer overflow was exploited using a Return Oriented Programming (ROP) <ref type="bibr" target="#b25">[26]</ref> chain designed for the ARM64 architecture.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5.3.2">Implementation</head><p>When triggered, the malicious micro-controller shuts down power to the touch controller and begins imitating normal touch controller behavior. During boot, the malicious micro-controller emulates the memory register image of the touch controller and responds in the same way to register writes using a state machine. When probed for function descriptors in addresses higher than 0x500 that normally do not exist within the touch controller, the micro-controller responds with a set of crafted function descriptors designed to cause the interrupt register map to exceed its boundaries. Within the device driver, a loop iterates over the interrupt register map and writes values outside the bounds of an interrupt enable map, causing the integer holding the number of interrupt sources to be overwritten. After waiting 20 seconds for the boot procedure to complete, the micro-controller initiates an interrupt by pulling the interrupt line towards the ground. The device driver which should then read up to four interrupt registers, instead reads 210 bytes, causing a buffer overflow. Within the 210 bytes requested from the touch controller that are sent reside a ROP chain that calls the Linux kernel function mem_text_write_ker-nel_word() that writes over protected kernel memory with a chosen payload. <ref type="table" target="#tab_1">Table 2</ref> contains additional information about the ROP chain.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5.3.3">Evaluation</head><p>Four different payloads were mounted on top of the ROP chain described above and tested in attack scenarios on a phone with stock firmware and factory-restored settings and data.</p><p>Each of the four payloads succeeded in compromising the phones security or data integrity. A list of the tested payloads is as follows:</p><p>• Disable all user capability checks in setuid() and setgid() system calls. This allows any user and app to achieve root privileges with a simple system-call.</p><p>• Silently incapacitate the Security Enhanced Linux (SELinux) <ref type="bibr" target="#b26">[27]</ref> module. While SELinux will still report blocking suspicious activity, it will not actually be blocked.</p><p>• Create a user exploitable system-wide vulnerability. The buffer check is disabled for all user buffers on system calls, resulting in many different vulnerabilities exploitable through many techniques.</p><p>• Create a hidden vulnerability within the kernel. A specific kernel vulnerability is generated, functioning as a backdoor for a knowledgeable attacker while remaining hidden.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="6">End-to-End Attacks</head><p>While each of the attacks described in Section 5 poses a threat on their own, a combination of these attacks can lead to an even more powerful attack. We summarize the attacks presented in this Section in <ref type="table" target="#tab_2">Table 3</ref>, complete with demonstration videos, and describe each of the attacks below.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="6.1">User Impersonation and User Compromise</head><p>The basis for the user impersonation and compromise parts of this attack are the touch logging and injection capabilities described in Subsection 5.2. These capabilities can be extended and used for a variety of malicious activities. Since our attack model assumes a malicious touchscreen assembly, the attacker can turn off power to the display panel while a malicious action is performed, allowing most attacks to be carried out stealthily.</p><p>The first attack we demonstrate is the malicious software installation attack. As illustrated in the video, this attack installs and starts an app from the Google Play Store. By using Android's internal search functionality, the attacker can type in the name of the Play Store app instead of searching for it onscreen, making our attack more resilient to users who customize their home Assign X2 := X19; Load arguments from stack to registers X19 and X20 3 mov x0, x19 ; mov x1, x20 ; blr x2 ; ldp x19, x20, [sp, #0x10] ; ldr x21, <ref type="bibr">[sp, #0x20]</ref> ; ldp x29, x30, [sp], #0x30 ; ret;</p><p>Assign X0 := X19; Assign X1 := X20; Call X2(X0, X1) screens. It is important to note that the attack can install an app with arbitrary rights and permissions, since the malicious touchscreen can confirm any secrity prompt posed by the operating system. This attack takes less than 30 seconds, and can be performed when the phone is unattended and when the screen is powered off. Next, we show how the malicious touchscreen can take a picture of the phone's owner and send it to the attacker via email. As seen in the video, this attack activates the camera and sends a 'selfie' to the attacker. This attack also takes less than 30 seconds, and can be performed while the display is turned off, allowing the attack to be carried out without the user's knowledge.</p><p>Our third attack shows how the malicious screen can stealthily replace a hand-typed URL with a phishing URL. As the video shows, this attack waits for the user to type a URL, then quickly replaces it with a matching phishing URL. The confused user can then be enticed to type in his or her credentials, assuming that a handtyped URL is always secure. This attack takes less than 1 second, but uniquely requires the screen to be turned on and the user present, thus risking discovery. We note that our current attack setup has a typing rate of over 60 characters per second.</p><p>Our fourth attack shows how the malicious screen can log and exfiltrate the user's screen unlock pattern to an online whiteboard website. The video demonstrates how the attack records the user's unlock pattern and draws it over a shared online whiteboard, which is shared via the Internet with the attacker's PC. This attack demonstrates both the collection and the infiltration abilities of the attack vector. This attack also takes less than 30 seconds, and its exfiltration step can also be performed while the screen is turned off.</p><p>Our final attack completely compromises the phone, disables SELinux, and opens a reverse shell connected to a remote attacker. This attack is unique in that it requires an exploitable bug in the third-party device driver code. We describe this attack in more detail in the following Subsection.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="6.2">Phone Compromise</head><p>To completely compromise the phone, we use a combination of touch events and driver exploits, as illustrated in <ref type="figure" target="#fig_3">Figure 4</ref>: First, the attacker uses touch injection to install an innocent-looking app from the Google Play app market. The next time the phone restarts, the malicious microcontroller initiates kernel exploitation during the boot sequence and creates a vulnerability in the kernel that is exploitable by user app. Once the phone completes booting, the previously installed app uses the vulnerability created by the micro-controller to take control of the system and perform malicious activity. The malicious app then reboots the phone and the now-compromised phone resumes normal activity.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="6.2.1">Implementation</head><p>For this demonstration, a user app was created and uploaded to the Google Play app market. The app starts when the phone boots up and performs a series of system calls by writing to the pesudo-file "/prof/self/clear_refs". While the phone is in a normal state, these system calls cause no issues and should raise no suspicion. During the exploitation of the kernel by the malicious micro-controller, the actions of the pesudo-file "/prof/self/clear_refs" are modified, and a vulnerability is introduced to it. This causes a change in the behavior of the app which is now able to exploit that vulnerability and execute code in kernel context. We note that since the app is designed to exploit a vulnerability that is nonexistent under normal conditions, it appears completely benign when a malicious screen is not present. This enabled our app to overcome malware filters and detectors, including Google Play's gatekeeper, Google Bouncer.</p><p>Once the app has gained the ability of executing commands with kernel permissions, it elevates privileges to root, deactivates the SELinux protection module, exfiltrates application private data and authentication tokens and submits the data to an online server, and finally creates of a root shell enabling an attacker to gain remote access. A video demonstration of the attack is available at https://youtu.be/Z_esD1Z78Ms</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="7">Attacking Additional Devices</head><p>While the main attack demonstrated here is crafted to the Nexus 6P phone, many more phones use similar device drivers <ref type="bibr" target="#b11">[12]</ref>. A small scale review performed by the authors on three additional phones that contain a Synaptics touch controller (Samsung Galaxy S5, LG Nexus 5x, LG Nexus 5) shows similar vulnerabilities to the ones exploited in the attack described here.</p><p>To further demonstrate the generality of our attack method, we extended it to another target device with a different hardware architecture. The device we investigated as an LG G Pad 7.0 (model v400) tablet. This devce runs the Android 5.0.2 operating system and contains a different touchscreen controller than the Nexus 6P phone. </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="7.1">Tablet Hardware</head><p>The LG v400 tablet employs an Atmel T641 touchscreen controller. The screen assembly is designed similarly to other devices such as the Nexus 6P and is built of a main display motherboard and a smaller touch controller daughter board. The display assembly boards are attached with Board-To-Board connectors and can be separated for maintenance. The PCBs belonging to the display module can be seen in <ref type="figure" target="#fig_4">Figure 5</ref>.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="7.2">Similarities to the Synaptics Touchscreen Controller</head><p>While the touchscreen controllers of the LG v400 and Nexus 6P were designed and produced by different vendors, there are shared similarities among the controllers and their device drivers. In the hardware aspect it is notable that both controllers communicate via an I 2 C bus in 400 kHz Fast-mode and both controllers signal of incoming events using a designated interrupt line. The protocols used by both controllers utilize an entitybased framework where specific controller functionalities are accessed via an entity. The information about entities contained within the controller is retrieved on every phone boot from the touchscreen controller by the device driver.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="7.3">Attaching the Malicious Hardware</head><p>Enameled copper wires were soldered to the Board-ToBoard connector of the display assembly motherboard, a Saleae logic analyzer was connected to the wires and normal touchscreen controller behavior was recorded.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="7.4">Attacking the device driver</head><p>An STM32L432 micro-controller module was connected to the communication lines belonging to the touch controller and the original touch controller daughter board was disconnected. The micro-controller was programmed to replay previously recorded responses of a genuine touch controller. Inspection of the device driver revealed unsafe buffer handling in numerous locations. By falsely reporting an irregularly large entity, the malicious micro-controller was able to cause the device driver to read 2048 bytes from the bus into an 80-byte global array. The buffer overflow affected kernel memory and resulted in the overrun of various internal pointers and eventually a crash. While the attack shown in this section is not complete, these preliminary results show how the complete attacks shown in sections 5 and 6 can be implemented on additional devices with different peripherals.</p><p>In addition, the similarity in different peripheral implementation makes adapting existing attacks to new peripherals easier. For example, after reverse engineering the touch reporting mechanism of the Atmel touch controller, the Synaptics touch injection attack can be copied over to devices with an Atmel touch controller, even without discovering any vulnerability in the Atmel device driver.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="8">Discussion</head></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="8.1">Toward Low-Cost Active Fault Attacks</head><p>Many studies have tried to compromise the integrity of code running on the secure system's CPU via softwareoriented attack methods (such as buffer overflows, return-oriented programming and so on). The advantage of a software-oriented attack is its ease of execution -an attacker does not need physical access to the device under attack, only code execution privileges, making it possible to mount attacks remotely and at scale. However, the widespread prevalence of software-based attack methods lead to a serious effort to protect CPUs from this direction of attack using countermeasures such as sandboxing, user and root privilege separation, and hardware-assisted trusted execution environments. Despite the original delivery vector, our attack is still software oriented in nature.</p><p>On the other extreme of the attack spectrum, studies have also attempted to use hardware-based active fault attacks to compromise the main CPU's integrity using invasive methods such as laser fault injection, FIBbased circuit editing and side-channel attacks. These attacks can effectively deal with software-based countermeasures, for example by disabling various securityoriented parts of the secure device or by exposing additional sources of secret information that can assist in device compromise. The downside of such an attack is its high cost and effort for the attacker -in most cases, these attacks require that the attacker have complete physical control over the device under attack, and that the attacker furthermore has a considerable degree of budget and technical expertise. This makes the threat of active fault attacks less relevant in many attack models.</p><p>The concept of attacking secure devices via malicious replacement units may allow an interesting trade-off between the two methods of software-oriented attacks and active fault attacks. This is because it provides an attacker with a low-risk method of getting "up close and personal" to the main CPU's hardware interfaces, while at the same time requiring very little of the attacker in terms of attack cost or time spent. This, in turn, makes it possible to carry out active fault attacks without a dedicated effort from the attacker. Moreover, compromise of such a device might be done in a way which cannot be detected by the main CPU by leaving no software traces.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="8.2">The Case for Hardware-Based Countermeasures</head><p>The unique attack model we discuss in our paper allows us to "fight hardware with hardware". In order to protect the phone from a malicious replacement screen, we propose implementing a low-cost, hardware-based solution in the form of I 2 C interface proxy firewall. Such a firewall can monitor the communication of the I 2 C interfaces and protect the device from attacks originating from the malicious screen. Placing this device on the motherboard means that it will not be affected by malicious component replacement. The use of a hardware countermeasure allows for protection against both added malicious components and modified firmware attacks. It may also detect malicious behavior of firmware code that was modified by an insider and may be officially signed or encrypted. Since it does not require any changes on the CPU or component side, this solution should be much faster to implement than cryptographically-based approaches such as I 2 C encryption or device authentication.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="8.3">Responsible Disclosure</head><p>The authors followed responsible disclosure practices by disclosing the Synaptics device driver vulnerabilities to <ref type="bibr">Google on Feb. 16, 2017</ref>. The disclosure includes the details necessary for understanding, reproducing, and fixing of the issues discovered during the research. Google acknowledged the reported issues and issued a CVE (CVE-2017-0650) with critical severity. The vulnerabilities discovered in the Atmel device driver are being compiled into a responsible disclosure report at the time of submitting this paper.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="8.4">Future Work</head><p>While this paper shows critical issues with smartphone software and hardware infrastructure, it mainly focuses on one phone model. Performing a wider analysis on multiple phone models and peripherals will help understand how vulnerable are the majority of phones used worldwide.</p><p>A root-cause analysis on the vulnerabilities found can shed light on which of the vendor's design and implementation processes contributed to the forming of such vulnerabilities. Such insights can help in development of techniques for design flaw mitigation and might yield recommendations for efficient and secure design of hardware and software elements. Additional techniques can be attempted for exploitation by malicious peripherals such as replacing the firmware in an embedded component and creating an attack without the use of external components.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="8.5">Conclusions</head><p>The threat of a malicious peripheral existing inside consumer electronics should not be taken lightly. As this paper shows, attacks by malicious peripherals are feasible, scalable, and invisible to most detection techniques. A well motivated adversary may be fully capable of mounting such attacks in a large scale or against specific targets. System designers should consider replacement components to be outside the phone's trust boundary, and design their defenses accordingly. </p></div><figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_0"><head>Figure 1 :</head><label>1</label><figDesc>Figure 1: The smartphone, its touch screen, and its associated device driver software.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_1"><head>(</head><label></label><figDesc>a) The Nexus 6P touchscreen assembly flex printed circuit board, located on the back side of the touchscreen. (b) The connection between the touch controller daughter board and the main touchscreen assembly daughter board of an assembly for the Nexus 6P. Marked: relevant pinout for the communication bus.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_2"><head>Figure 3</head><label>3</label><figDesc>Figure 3</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_3"><head>Figure 4 :</head><label>4</label><figDesc>Figure 4: Fully compromising the phone using a malicious touchscreen.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_4"><head>Figure 5 :</head><label>5</label><figDesc>Figure 5: The LG v400 display assembly PCBs, showing the motherboard with a flex cable connector and an Atmel T641 touchscreen controller mounted on a daughter board. Also visible: 0.1mm thick wires soldered to the connector between the boards.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_5"><head>Figure 6 :</head><label>6</label><figDesc>Figure 6: The complete attack setup. The figure shows an exposed touch controller interface wired to a prototyping board embedded with auxiliary electronics and connected to an Arduino micro-controller module. The prototyping board is also connected to an STM32L432 micro-controller module which is used for debugging purposes. Inset: wires soldered onto the touch controller communication connection</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_0" validated="true"><head>Table 1 : Partial index of the main Synaptics S3718 functions and their purpose</head><label>1</label><figDesc></figDesc><table>Function 
ID 0x01 
0x3F 
0x36 
0x14 
0x06 
General control and status of the touch 
controller 
0x12 
0x5C 
0x00 
0x1B 
0x08 
Reporting of simple touch events, 
including multi-finger touches 
0x51 
0x04 
0x00 
0x00 
0x00 
Firmware update interface 

</table></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_1" validated="true"><head>Table 2 : ROP chain designed for the ARM64 architecture. This chain results in a call to a predefined function with two arguments.</head><label>2</label><figDesc></figDesc><table>Gadget 
Order 

Gadget Code 
Relevant Pseudocode 

1 
ldp x19, x20, [sp, #0x10] ; ldp x29, x30, [sp], #0x20 ; ret; 
Load arguments from stack to registers 
X19 and X20 
2 
mov x2, x19 ; mov x0, x2 ; ldp x19, x20, [sp, #0x10] ; ldp x29, 
x30, [sp], #0x30 ; ret; 

</table></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_2" validated="true"><head>Table 3 : A summary of our demonstrated attacks.</head><label>3</label><figDesc></figDesc><table>Attack 
Time to execute Screen Blanked? 
Video Demo 

Malicious Software Installation 
21 seconds 
Yes 
https://youtu.be/83VMVrcEOCM 
Take Picture and Send Via Email 
14 seconds 
Yes 
https://youtu.be/WS4NChPjaaY 
Replace URL with phishing URL 
&lt;1 second 
No 
https://youtu.be/XZujd42eYek 
Log and exfiltrate screen unlock pattern 
16 seconds 
Yes 
https://youtu.be/fY58zoadqMA 
Complete Phone Compromise 
65 seconds 
Yes 
https://youtu.be/sDfD5fJfiNc 

</table></figure>
		</body>
		<back>

			<div type="acknowledgement">
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Acknowledgements</head><p>This research was supported by Israel Science Foundation grants 702/16 and 703/16.</p></div>
			</div>

			<div type="references">

				<listBibl>

<biblStruct xml:id="b0">
	<monogr>
		<title level="m" type="main">Cracked screens and broken hearts -the 2015 motorola global shattered screen survey</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Motorola</forename><surname>Mobility</surname></persName>
		</author>
		<ptr target="https://community.motorola.com/blog/cracked-screens-and-broken-hearts" />
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b1">
	<monogr>
		<title level="m" type="main">Defense Information Systems Agency. The Department of Denfense Approved Products List</title>
		<ptr target="https://aplits.disa.mil/processAPList" />
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b2">
	<analytic>
		<title level="a" type="main">Dissecting android malware: Characterization and evolution</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Yajin</forename><surname>Zhou</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Xuxian</forename><surname>Jiang</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">2012 IEEE Symposium on Security and Privacy</title>
		<imprint>
			<publisher>IEEE</publisher>
			<date type="published" when="2012" />
			<biblScope unit="page" from="95" to="109" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b3">
	<analytic>
		<title level="a" type="main">Rootkits on smart phones: attacks, implications and opportunities</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Jeffrey</forename><surname>Bickford</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">O&amp;apos;</forename><surname>Ryan</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Arati</forename><surname>Hare</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Vinod</forename><surname>Baliga</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Liviu</forename><surname>Ganapathy</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Iftode</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the eleventh workshop on mobile computing systems &amp; applications</title>
		<meeting>the eleventh workshop on mobile computing systems &amp; applications</meeting>
		<imprint>
			<publisher>ACM</publisher>
			<date type="published" when="2010" />
			<biblScope unit="page" from="49" to="54" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b4">
	<monogr>
		<title level="m" type="main">Linux Device Drivers: Where the Kernel Meets the Hardware</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Jonathan</forename><surname>Corbet</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Alessandro</forename><surname>Rubini</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Greg</forename><surname>Kroah-Hartman</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2005" />
			<publisher>Reilly Media, Inc</publisher>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b5">
	<analytic>
		<title level="a" type="main">Dark side of the shader: Mobile gpu-aided malware delivery</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Janis</forename><surname>Danisevskis</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Marta</forename><surname>Piekarska</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Jeanpierre</forename><surname>Seifert</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">International Conference on Information Security and Cryptology</title>
		<imprint>
			<publisher>Springer</publisher>
			<date type="published" when="2013" />
			<biblScope unit="page" from="483" to="495" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b6">
	<analytic>
		<title level="a" type="main">You can type, but you can&apos;t hide: A stealthy gpu-based keylogger</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Evangelos</forename><surname>Ladakis</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Lazaros</forename><surname>Koromilas</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Giorgos</forename><surname>Vasiliadis</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 6th European Workshop on System Security (EuroSec)</title>
		<meeting>the 6th European Workshop on System Security (EuroSec)</meeting>
		<imprint>
			<date type="published" when="2013" />
		</imprint>
	</monogr>
	<note>Michalis Polychronakis, and Sotiris Ioannidis</note>
</biblStruct>

<biblStruct xml:id="b7">
	<analytic>
		<title level="a" type="main">iseeyou: Disabling the macbook webcam indicator led</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Matthew</forename><surname>Brocker</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Stephen</forename><surname>Checkoway</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">USENIX Security</title>
		<imprint>
			<date type="published" when="2014" />
			<biblScope unit="page" from="337" to="352" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b8">
	<analytic>
		<title/>
		<ptr target="https://support.apple.com/en-il/HT205628" />
	</analytic>
	<monogr>
		<title level="j">Apple Inc. Error</title>
		<imprint>
			<biblScope unit="volume">53</biblScope>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b9">
	<monogr>
		<title level="m" type="main">Cybersecurity Framework v1.1 -Draft</title>
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b10">
	<analytic>
		<title level="a" type="main">The peril of fragmentation: Security hazards in android device driver customizations</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Xiaoyong</forename><surname>Zhou</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Yeonjoon</forename><surname>Lee</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Nan</forename><surname>Zhang</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Muhammad</forename><surname>Naveed</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Xiaofeng</forename><surname>Wang</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">2014 IEEE Symposium on Security and Privacy</title>
		<imprint>
			<publisher>IEEE</publisher>
			<date type="published" when="2014" />
			<biblScope unit="page" from="409" to="423" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b11">
	<analytic>
		<title level="a" type="main">From smashed screens to smashed stacks: Attacking mobile phones using malicious aftermarket parts</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Omer</forename><surname>Shwartz</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Guy</forename><surname>Shitrit</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Asaf</forename><surname>Shabtai</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Yossi</forename><surname>Oren</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Workshop on Security for Embedded and Mobile Systems</title>
		<imprint>
			<date type="published" when="2017" />
		</imprint>
	</monogr>
	<note>SEMS 2017</note>
</biblStruct>

<biblStruct xml:id="b12">
	<analytic>
		<title/>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Google</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Android Security Bulletin</title>
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b13">
	<monogr>
		<title level="m" type="main">UL. Counterfeit iphone adapters</title>
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b14">
	<analytic>
		<title level="a" type="main">Apple: Nearly 90counterfeit</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Amit</forename><surname>Chowdhry</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Forbes.com</title>
		<imprint>
			<date type="published" when="2016" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b15">
	<analytic>
		<title level="a" type="main">Protecting commodity operating system kernels from vulnerable device drivers</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Shakeel</forename><surname>Butt</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Vinod</forename><surname>Ganapathy</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Michael</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Chih-Cheng</forename><surname>Swift</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Chang</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Computer Security Applications Conference, 2009. ACSAC&apos;09. Annual</title>
		<imprint>
			<publisher>IEEE</publisher>
			<date type="published" when="2009" />
			<biblScope unit="page" from="301" to="310" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b16">
	<monogr>
		<title level="m" type="main">Penetration testing for android smartphones</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Cc Okolie</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Oladeji</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Benjamin</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">O</forename><surname>Ha Alakiri</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Olisa</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2013" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b17">
	<analytic>
		<title level="a" type="main">Joker: Trusted detection of kernel rootkits in android devices via jtag interface</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Mordechai</forename><surname>Guri</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Yuri</forename><surname>Poliak</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Bracha</forename><surname>Shapira</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Yuval</forename><surname>Elovici</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Trustcom/BigDataSE/ISPA, 2015 IEEE</title>
		<imprint>
			<publisher>IEEE</publisher>
			<date type="published" when="2015" />
			<biblScope unit="volume">1</biblScope>
			<biblScope unit="page" from="65" to="73" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b18">
	<analytic>
		<title level="a" type="main">Evolution, detection and analysis of malware for smart devices</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Guillermo</forename><surname>Suarez-Tangil</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Juan</forename><forename type="middle">E</forename><surname>Tapiador</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Pedro</forename><surname>Peris-Lopez</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Arturo</forename><surname>Ribagorda</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE Communications Surveys &amp; Tutorials</title>
		<imprint>
			<biblScope unit="volume">16</biblScope>
			<biblScope unit="issue">2</biblScope>
			<biblScope unit="page" from="961" to="987" />
			<date type="published" when="2014" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b19">
	<monogr>
		<title level="m" type="main">Android Kernel tree for Qualcomm chipsets</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Google</surname></persName>
		</author>
		<ptr target="https://android.googlesource.com/kernel/msm.git" />
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b20">
	<monogr>
		<title level="m" type="main">I2C-bus specification and user manual</title>
		<ptr target="http://www.nxp.com/documents/user_manual/UM10204.pdf" />
		<imprint>
			<date type="published" when="2014-04" />
		</imprint>
		<respStmt>
			<orgName>NXP</orgName>
		</respStmt>
	</monogr>
</biblStruct>

<biblStruct xml:id="b21">
	<monogr>
		<title/>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Arduino</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Arduino Home</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Page</surname></persName>
		</author>
		<ptr target="https://www.arduino.cc" />
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b22">
	<monogr>
				<ptr target="http://www.atmel.com/images/atmel-8271-8-bit-avr-microcontroller-atmega48a-48pa-88a-88pa-168a-168pa-328-328p_datasheet_summary.pdf" />
		<title level="m">Atmel Corporation. ATmega Datasheet, November 2015</title>
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b23">
	<monogr>
		<title level="m" type="main">PSoC 4000 Family Datasheet</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Cypress</surname></persName>
		</author>
		<ptr target="http://www.cypress.com/file/138646/download" />
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b24">
	<analytic>
		<title level="a" type="main">Touchalytics: On the applicability of touchscreen input as a behavioral biometric for continuous authentication</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Mario</forename><surname>Frank</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Ralf</forename><surname>Biedert</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Eugene</forename><surname>Ma</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE Trans. Information Forensics and Security</title>
		<imprint>
			<biblScope unit="volume">8</biblScope>
			<biblScope unit="issue">1</biblScope>
			<biblScope unit="page" from="136" to="148" />
			<date type="published" when="2013" />
		</imprint>
	</monogr>
	<note>Ivan Martinovic, and Dawn Song</note>
</biblStruct>

<biblStruct xml:id="b25">
	<analytic>
		<title level="a" type="main">Return-oriented rootkits: Bypassing kernel code integrity protection mechanisms</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Ralf</forename><surname>Hund</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Thorsten</forename><surname>Holz</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Felix C</forename><surname>Freiling</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">USENIX Security Symposium</title>
		<imprint>
			<date type="published" when="2009" />
			<biblScope unit="page" from="383" to="398" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b26">
	<analytic>
		<title level="a" type="main">Implementing selinux as a linux security module</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Stephen</forename><surname>Smalley</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Chris</forename><surname>Vance</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Wayne</forename><surname>Salamon</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">NAI Labs Report</title>
		<imprint>
			<biblScope unit="volume">1</biblScope>
			<biblScope unit="issue">43</biblScope>
			<biblScope unit="page">139</biblScope>
			<date type="published" when="2001" />
		</imprint>
	</monogr>
</biblStruct>

				</listBibl>
			</div>
		</back>
	</text>
</TEI>
