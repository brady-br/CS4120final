<?xml version="1.0" encoding="UTF-8"?>
<TEI xmlns="http://www.tei-c.org/ns/1.0" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
xsi:schemaLocation="http://www.tei-c.org/ns/1.0 /Users/atharsefid/Desktop/grobid-0.5.3/grobid-home/schemas/xsd/Grobid.xsd"
 xmlns:xlink="http://www.w3.org/1999/xlink">
	<teiHeader xml:lang="en">
		<encodingDesc>
			<appInfo>
				<application version="0.5.3" ident="GROBID" when="2020-09-29T02:55+0000">
					<ref target="https://github.com/kermitt2/grobid">GROBID - A machine learning software for extracting information from scholarly documents</ref>
				</application>
			</appInfo>
		</encodingDesc>
		<fileDesc>
			<titleStmt>
				<title level="a" type="main">Non-Linear Compression: Gzip Me Not!</title>
			</titleStmt>
			<publicationStmt>
				<publisher/>
				<availability status="unknown"><licence/></availability>
			</publicationStmt>
			<sourceDesc>
				<biblStruct>
					<analytic>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Michael</forename><forename type="middle">F</forename><surname>Nowlan</surname></persName>
							<affiliation key="aff0">
								<orgName type="institution">Yale University</orgName>
							</affiliation>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Bryan</forename><surname>Ford</surname></persName>
							<affiliation key="aff0">
								<orgName type="institution">Yale University</orgName>
							</affiliation>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Ramakrishna</forename><surname>Gummadi</surname></persName>
							<affiliation key="aff0">
								<orgName type="institution">Yale University</orgName>
							</affiliation>
						</author>
						<title level="a" type="main">Non-Linear Compression: Gzip Me Not!</title>
					</analytic>
					<monogr>
						<imprint>
							<date/>
						</imprint>
					</monogr>
				</biblStruct>
			</sourceDesc>
		</fileDesc>
		<profileDesc>
			<abstract>
				<p>Most compression algorithms used in storage systems today are based on an increasingly outmoded sequential processing model. Systems wishing to decompress blocks out-of-order or in parallel must reset the compres-sor&apos;s state before each block, reducing adaptiveness and limiting compression ratios. To remedy this situation, we present Non-Linear Compression, a novel compression model enabling systems to impose an arbitrary partial order on inter-block dependencies. Mutually unordered blocks may be compressed and decompressed out-of-order or in parallel, and a compressor can adaptively compress each block based on all causally prior blocks. This graph structure captures the system&apos;s data dependencies explicitly and completely, enabling the compres-sor to adapt using long-lived state without the constraint of sequential processing. Preliminary experiences with a simple Huffman compressor suggest that non-linear compression fits a diverse set of storage applications.</p>
			</abstract>
		</profileDesc>
	</teiHeader>
	<text xml:lang="en">
		<body>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="1">Introduction</head><p>Data compression <ref type="bibr" target="#b14">[17]</ref> algorithms have improved over the years <ref type="bibr" target="#b11">[14,</ref><ref type="bibr" target="#b22">26]</ref>, and are now an integral part of storage systems. Examples include data compression and deduplication for virtual machines, snapshots, backups and archivals <ref type="bibr" target="#b13">[16,</ref><ref type="bibr" target="#b18">22]</ref> and remote access, synchronization and version control <ref type="bibr">[12,</ref><ref type="bibr">18,</ref><ref type="bibr" target="#b21">25,</ref><ref type="bibr" target="#b23">27]</ref>. Other application domains such as audio/video storage and playback <ref type="bibr" target="#b0">[2]</ref> and network protocols <ref type="bibr" target="#b1">[3,</ref><ref type="bibr" target="#b6">8]</ref> use compression extensively.</p><p>Modern compression schemes are adaptive, and, hence, inherently stateful. Most algorithms assume their state evolution is linear: the compressor may use any information derived from bytes 1 through n to compress byte n + 1; the decompressor must typically also process bytes 1 through n before it can decode byte n + 1. An application can reset the compressor's state completely at application-defined block boundaries to make blocks independently decompressible, but the compressor is then unable to build or utilize any long-lived state across block boundaries. Many modern applications, however, require parallel or out-of-order compression or decompression of limited-size blocks, such as: versioned or deduplicating file systems that must support random block access <ref type="bibr" target="#b13">[16,</ref><ref type="bibr" target="#b18">22]</ref>; distributed revision control systems that must compress and merge often small deltas from independent sources <ref type="bibr">[12,</ref><ref type="bibr">18]</ref>; collaborative editing systems needing to compress and interchange many small but mutually-interacting document "transforms" <ref type="bibr" target="#b7">[9,</ref><ref type="bibr" target="#b17">21]</ref>; and network protocols desiring both data/header compression <ref type="bibr" target="#b1">[3,</ref><ref type="bibr" target="#b6">8]</ref> and out-of-order delivery <ref type="bibr" target="#b9">[11,</ref><ref type="bibr" target="#b12">15]</ref>. Even in storage applications for which large blocks are suitable, linear compression can limit the system's ability to exploit multicore CPUs or new parallel I/O devices <ref type="bibr" target="#b4">[6]</ref> and media <ref type="bibr" target="#b20">[24]</ref>.</p><p>To address this significant constraint, we propose a new Non-Linear Compressor (NLC) abstraction. It structures the complete compression state as a Directed Acyclic Graph (DAG) of individual state nodes. An NLC state node supports three operations: forking a child node, compressing a block of data, and merging with another node. Forking copies compression state, while merging joins two compression states into one. This fork/merge model enables the application to express a dependency graph structured as an arbitrary partial order, thereby allowing the compression algorithm to build and adapt using long-term state across blocks, while allowing sibling nodes anywhere in the DAG to be processed independently (Section 3.3).</p><p>We developed a proof-of-concept prototype implementing this abstraction, which supports compression using Adaptive Huffman coding. Our early experiences indicate that NLC should be attractive to current and emerging storage systems and architectures.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2">Motivation</head><p>We motivate NLC by exploring popular storage systems currently using compression. The nature and requirements of these systems suggest they could benefit from a non-linear model of compression.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.1">Deduplicating File Systems</head><p>Deduplicating file systems identify redundant chunks of data, replacing identical instances with a single copy <ref type="bibr" target="#b18">[22]</ref>, and often delta-encoding similar, but not identical, blocks <ref type="bibr" target="#b13">[16]</ref>. This delta-encoding produces small compressed blocks (e.g., &lt;1KB) that are logically paired to much larger blocks of data. Naturally, a set of similar files forms a cluster of compressed blocks and a file system may contain any number of such logical "partitions". Lastly, these systems must support random access to compressed blocks. The properties of small blocks and random access make these systems ill-suited for traditional linear compressors. A deduplicating file system using a linear compressor is forced to tradeoff access time with compression ratio. The system can either use a single compressor, compressing and decompressing all data for each request, or reset compression state for each block. The first option increases processing overhead while the second option hurts compression ratios, especially for small block sizes (Section 3.1).</p><p>Our insight here is that often blocks are related to some other blocks, but not usually all. By leveraging a more selective (i.e., shorter) dependency graph, NLC aims to enable random access for small block sizes without sacrificing the compression ratio within related blocks.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.2">Other Applications</head><p>There are many applications that process data with distinct logical boundaries that could benefit from (or require) random access.</p><p>Distributed SCM. Distributed Source Control Management systems <ref type="bibr">[12,</ref><ref type="bibr">18]</ref> are conceptually similar to deduplication systems. SCM users often proactively fork and merge development branches, and groups of users may collaborate from geographically diverse areas. These systems also use delta-encoding compression to improve ratios for a file's versioned history. The potential for small deltas between versions and the requirement for independent processing by edge users suggest that an adaptive compressor supporting random access could be very useful.</p><p>Collaborative Editing. Operational Transform Collaboration systems such as Google Wave <ref type="bibr" target="#b9">[1]</ref> and others <ref type="bibr" target="#b7">[9,</ref><ref type="bibr" target="#b17">21]</ref> use a DAG to represent disjoint state transitions between a server and a client in a shared statespace. Local actions are transmitted to the remote destination, where the receiver "transforms", or modifies, the action to account for its own local actions that have occurred in the interim, and then applies the received action locally. For high-traffic collaborations, compression can significantly lower the overall bandwidth use. Specifically, incremental updates are often small and may come from many disjoint users, suggesting predictable longlived state with random access.</p><p>Network Protocols. Google's SPDY <ref type="bibr" target="#b1">[3]</ref> protocol compresses HTTP headers and multiplexes multiple streams onto a single TCP connection. Although TCP does not deliver data out-of-order (i.e., random access), other protocols such as uTCP <ref type="bibr" target="#b12">[15]</ref> and UDP <ref type="bibr" target="#b19">[23]</ref> can deliver datagrams out-of-order. Unfortunately, pairing SPDY with one of these unordered protocols would not offer lower latency due to the in-order requirement of SPDY's linear compressor (i.e., gzip). Figure 1: Resetting compression state to enable random access of data blocks limits the compression ratio for small block sizes.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3">Towards Non-Linear Compression</head><p>We present Non-Linear Compression as a system abstraction and API, independent of any particular compression scheme or implementation. We first motivate NLC by exploring the limitations of linear schemes in modern systems.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.1">Linear Compression Limitations</head><p>Storage and transmission systems compressing data and/or metadata, typically face a tradeoff between compressor effectiveness and the granularity at which data is independently decompressible. There are two main compression modes: stream mode and block mode, each of which has significant limitations, as explained below.</p><p>In stream-oriented use, an application treats the compressor as a sequential filter, feeding in an arbitrarily large file or other data object incrementally and storing compressed output as the compressor produces it. This mode enables the compressor to build up state gradually over the entire input and eliminate redundancy at large scales, but requires decompression to proceed in the same fashion and limits potential processing parallelism at the compressor or decompressor.</p><p>In block-oriented use, in contrast, an application processes data one block or "application data unit" <ref type="bibr" target="#b5">[7]</ref> at a time, resetting the compressor to a fresh initial state before each block. Each block can then be decompressed independently of other blocks, providing random-access or out-of-order decompression and benefiting more fully from parallelism on modern multicore hardware <ref type="bibr" target="#b8">[10]</ref>.</p><p>Block-oriented use limits the effectiveness of advanced compression algorithms depending on block size, however. <ref type="figure">Figure 1</ref> illustrates this limitation by comparing the effectiveness of popular compressors when run with a variety of block sizes on a large text file. As the block size decreases, the compression ratio, defined as output size to input size, becomes higher. The loss of compression history at each block reduces compression effectiveness significantly because the compressor's history identifies redundancy only within the given block.</p><p>Linear compressors excel at compressing huge amounts of data, but for systems wishing to exploit random or unordered access without compromising the compression ratio, a new abstraction is needed.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.2">Non-Linear Compression Overview</head><p>The key idea underlying non-linear compression (NLC) is to eliminate the current "all-or-nothing" choice between deriving a given data block's compression state from all prior data in a linear sequence, or no prior information. Instead, the application specifies to an NLC compressor explicitly, via an arbitrary directed acyclic graph (DAG), which previously-compressed blocks a given compressed block depends on. The NLC decompressor likewise assumes that to decompress a given block, the application will have already decompressed the "prior" blocks it specified as dependencies. As a result, decompression of incomparable blocks in the DAG are independent and fully parallelizable.</p><p>The DAG thus imposes a partial ordering relation on data blocks compressed by the DAG nodes. Two nodes in the graph are either ordered according to an ancestordescendant relationship, or not. Unordered nodes and associated data can be processed completely independently, during both compression and decompression. This DAG representation provides three main benefits. First, a non-linear compressor offers a single abstraction to applications with multiple logical streams, avoiding the burden of maintaining multiple compressors. Second, independent branch paths can be processed concurrently, parallelizing I/O operations reading and writing compressed data, or processing packets from unordered network protocols <ref type="bibr" target="#b12">[15]</ref>. Thus, NLC represents a natural progression in compression in line with the industry's overall "serial-to-parallel" shift. Third, adaptive techniques can localize compression state within DAG branches, allowing logically distinct branches to have different probability distributions.</p><p>Although nominally similar, graph or tree-based compression schemes <ref type="bibr" target="#b2">[4,</ref><ref type="bibr" target="#b3">5,</ref><ref type="bibr" target="#b10">13]</ref>, are fundamentally different from NLC. Whereas these approaches compress data structured as a tree (e.g., web graphs) using linear compression, NLC structures the actual compression state as a graph.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.3">A Non-Linear Compression API</head><p>Applications will often compress data as an "application data unit" (ADU), which is a logically contiguous chunk of data. NLC gives applications fine-grained control of how to structure dependencies between consecutive ADUs, whether linear or not. The NLC API provides four main operations. The first operation creates a node, while the other operate on a node.</p><p>Initialize. Initialization creates a single state node with fresh internal compression state and no dependencies (i.e., no parent nodes). The state node represents an independent compression point at the top of DAG. The application can create multiple such nodes.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Compress. A state node compresses variable-length</head><p>ADUs. NLC guarantees that a given ADU will be decompressible "as a unit" once all causually prior ADUs in the DAG have been processed. NLC compressors may-but are not required to-support stream-oriented, incremental or partial decompression within ADUs. Naturally, two independent state nodes in the DAG can compress or decompress in parallel. Repeatedly compressing ADUs with only a single state node forms a linear chain of dependent compressed ADUs, much like regular sequential compressors. A state node can compress zero or more ADUs. For adaptive schemes, compressing an ADU modifies a node's internal state.</p><p>Fork. Forking enables a state node to create a child node with identical internal compression state. The parent copies its internal state at the time of forking, which may or may not be the same as the state the parent initially possessed. This enables nodes to compress an ADU and then pass the resulting state on to a child.</p><p>A child maintains a dependency on its parent and all of its parent's ancestors, but not on any siblings (i.e., other children of the same parent). A parent that forks two children in succession creates a divergent path in the DAG similar to logically distinct streams. Forking a child node locks the parent state node, preventing future calls to "Compress", but the locked node can still fork children.</p><p>Merge. Merging combines the internal state of two nodes and returns a new node with this combined state. The new node has a dependency on both parent nodes, as well as the union of their ancestors. Merging creates a new node, and locks each parent state node (as in Fork). Merging effectively aggregates the compression state, such as frequency tables or dictionaries, accumulated along all paths from the root to these nodes.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4">An NLC Prototype</head><p>The previous section outlines our general NLC framework, but many specific compression schemes could potentially implement this API. We now present one simple proof-of-concept implementation based on Huffman coding, and explore several alternative heuristics to improve NLC's unique Merge behavior. The techniques below are simplistic and merely intended as starting points for designing future, more mature compression algorithms in the NLC framework.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.1">Adaptive Huffman Compression</head><p>Our current early prototype builds on simple adaptive Huffman coding. The compressor's inter-ADU state consists of a 256-entry frequency table, describing the number of times a given input byte ("symbol") has appeared in causally "prior" ADUs in the DAG. For each ADU, the compressor first builds a Huffman coding tree based on the initial frequency table summarizing all prior ADUs. The compressor then encodes each symbol in the current block using the Huffman tree. As the compressor processes each symbol, it updates its internal frequency count to reflect this input, while leaving the Huffman code unmodified throughout the block. The compressor thus adapts at block boundaries, enabling better compression of future ADUs-although not the current ADU-using shorter codes for more common symbols.</p><p>To enable the encoding of all input bytes/symbols a priori using Huffman coding, the frequency count for each input symbol must be greater than zero. Blocks with no predecessors in the DAG are "compressed" with trivial frequency tables in which all symbols have a count of 1, yielding no compression in such "initial" blocks. Thus, all compression in our current prototype derives from inter-block adaptivity. The current prototype also makes no provisions for compressing repeated byte sequences or context-sensitive frequency modeling; hence we have no expectation that this scheme would compete "head-to-head" with a mature linear compressor in typical (e.g., large-file) scenarios.</p><p>The Fork operation in our prototype simply copies the frequency counts of data objects from the parent to the new child state. Merge, in contrast, can be done in many ways and involves tradeoffs discussed next.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.2">Merging Behavior</head><p>Merging combines the frequency counts of two nodes. Early indications are that the Merge operation improves adaption of compression state and offers a convenient synchronization mechanism for applications. We continue to investigate the usefulness of various merge heuristics such as: complete history traversal to accrue frequency counts; simple adding, or compounding, of frequency counts; and taking the maximum count between two children. Frequency counts directly influence the construction of the Huffman coding tree, thus, more accurate frequency counts produce better compression. In practice, the forking and merging behavior of the application determines whether a complete heuristic is needed, or whether a simpler approach (i.e., addition) is accurate "enough". We hope that more experience using the Merge operation will better elucidate its utility. </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.3">Preliminary Results</head><p>Using our first-cut NLC implementation, we ran several experiments to see how NLC behaves with different application behaviors. We make no claim that our design is optimal, or even that our Adaptive Huffman implementation is competitive with real-world compressors such as gzip that combine Adaptive Huffman coding with dictionary methods. Rather, we explore different behaviors and present these results as suggestive of the outcomes when using NLC. <ref type="figure" target="#fig_1">Figure 2</ref> shows three different application behaviors using green and red arrows to represent Fork and Merge operations, respectively. Blue circles and numbered circles represent compression state and compressed data blocks, respectively. Part (a) exploits NLC for simple parallel compression. This behavior initializes a window, w, of base state nodes (or a single base state and its w − 1 children). Treating this window of nodes as individual compressors, each node compresses a logical stream of ADUs independently. This behavior does not use the API's merge functionality.</p><p>Behavior (b) models a potential version control system, where the base state forks children to be used in compressing different files. Periodically, the children nodes merge back with the base state, collecting compression state. The base state can then fork new children with adapted compression state for each file.</p><p>Lastly, behavior (c) models how a network application might use a sliding window of state nodes to compress ADUs for use with an out-of-order protocol. The receiver of a compressed ADU can always decompress it, provided that the compressed ADU is no more than w ADUs beyond the last successful decompression.</p><p>We wrote a simple application to test (a) and (c) above by compressing a contiguous data stream into independent ADUs of 128 bytes. <ref type="figure" target="#fig_2">Figure 3</ref> shows the average compression rate for different stream sizes. As expected, the overall compression rates are worse than those in <ref type="figure">Fig- ure 1</ref> because our NLC prototype currently uses only Huffman coding (without a deduplication algorithm). The "simple parallel" and "simple windowed" data series use a window of w = 3. Note that streams less than or equal to 3x ADU experience no compression, since the first w ADUs are compressed independently before any adaptation takes place. The figure also shows "normal linear", which uses a single state node to repeatedly compress ADUs. Each of these ADUs is dependent on the previous ADU.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.4">Next Steps</head><p>Experiences with our early prototype suggest the importance of several design decisions that we plan to explore further. For compression, our prototype uses Adaptive Huffman coding, which operates by assigning shorter code words to more frequently occurring data objects (e.g., bytes). Adaptive Arithmetic coding <ref type="bibr" target="#b22">[26]</ref> also uses frequency counts and should be an easy addition. LZWstyle <ref type="bibr" target="#b15">[19]</ref> deduplication uses word dictionaries, but is conceptually similar for Fork and Merge operations.</p><p>Other considerations include "code spaces", or multibyte data objects, as our current prototype only operates on a byte granularity. Furthermore, probabilistic models <ref type="bibr" target="#b16">[20]</ref> for code spaces introduce new possibilities for automatically detecting application-specific data objects. We also plan to investigate a "decay" model, phasingout frequency counts and/or code spaces in order to react more quickly to a changing source. Related to decay is garbage collecting obsolete state nodes; our prototype performs no special garbage collection. Lastly, our prototype assumes the application names or identifies compression state nodes itself, but could, in the future, support some naming scheme.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5">Conclusion</head><p>Storage systems today often use linear compression algorithms that cannot fully exploit modern parallel processors and protocols. To alleviate this tension, Non-Linear Compression allows applications to structure data dependencies in an arbitrary, hierarchical graph.</p></div><figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_1"><head>Figure 2 :</head><label>2</label><figDesc>Figure 2: NLC state growth for various applications: (a) Simple parallel compression, (b) Version control with individual branches for files or users, (c) Parallel windowing for out-of-order network protocols.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_2"><head>Figure 3 :</head><label>3</label><figDesc>Figure 3: NLC compresses small ADUs independently based on the forking and merging strategy.</figDesc></figure>
		</body>
		<back>

			<div type="acknowledgement">
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Acknowledgments</head><p>We thank Jana Iyengar, Avi Silberschatz, Rob Ross and the reviewers for their valuable feedback. This research was sponsored by NSF grants CNS-0916413 and CNS-0916678 and the ASEE-NDSEG program.</p></div>
			</div>

			<div type="references">

				<listBibl>

<biblStruct xml:id="b0">
	<monogr>
		<title level="m" type="main">The moving picture experts group</title>
		<ptr target="http://mpeg.chiariglione.org/" />
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b1">
	<monogr>
		<title level="m" type="main">SPDY: An Experimental Protocol For a Faster Web</title>
		<ptr target="http://www.chromium.org/spdy/spdy-whitepaper" />
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b2">
	<analytic>
		<title level="a" type="main">Towards compressing web graphs</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Adler</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Mitzenmacher</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Data Compression Conference</title>
		<imprint>
			<date type="published" when="2001" />
			<biblScope unit="page" from="203" to="212" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b3">
	<analytic>
		<title level="a" type="main">Compact representations of separable graphs</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><forename type="middle">K</forename><surname>Blandford</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">G</forename><forename type="middle">E</forename><surname>Blelloch</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">I</forename><forename type="middle">A</forename><surname>Kash</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the fourteenth annual ACM-SIAM symposium on Discrete algorithms, SODA &apos;03</title>
		<meeting>the fourteenth annual ACM-SIAM symposium on Discrete algorithms, SODA &apos;03</meeting>
		<imprint>
			<date type="published" when="2003" />
			<biblScope unit="page" from="679" to="688" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b4">
	<analytic>
		<title level="a" type="main">Understanding intrinsic characteristics and system implications of flash memory based solid state drives</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">F</forename><surname>Chen</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><forename type="middle">A</forename><surname>Koufaty</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">X</forename><surname>Zhang</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. of the eleventh international joint conference on Measurement and modeling of computer systems, SIGMETRICS &apos;09</title>
		<meeting>of the eleventh international joint conference on Measurement and modeling of computer systems, SIGMETRICS &apos;09</meeting>
		<imprint>
			<date type="published" when="2009" />
			<biblScope unit="page" from="181" to="192" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b5">
	<analytic>
		<title level="a" type="main">Architectural considerations for a new generation of protocols</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><forename type="middle">D</forename><surname>Clark</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><forename type="middle">L</forename><surname>Tennenhouse</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">SIGCOMM</title>
		<imprint>
			<date type="published" when="1990" />
			<biblScope unit="page" from="200" to="208" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b6">
	<analytic>
		<title level="a" type="main">The transport layer security (TLS) protocol version 1.2</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><surname>Dierks</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">E</forename><surname>Rescorla</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">RFC</title>
		<imprint>
			<biblScope unit="volume">5246</biblScope>
			<date type="published" when="2008-08" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b7">
	<analytic>
		<title level="a" type="main">Concurrency control in groupware systems</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><forename type="middle">A</forename><surname>Ellis</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><forename type="middle">J</forename><surname>Gibbs</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">SIGMOD Rec</title>
		<imprint>
			<biblScope unit="volume">18</biblScope>
			<biblScope unit="page" from="399" to="407" />
			<date type="published" when="1989-06" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b8">
	<monogr>
		<title level="m" type="main">Parallel data compression with bzip2</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><forename type="middle">G</forename><surname>Elytra</surname></persName>
		</author>
		<ptr target="http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10" />
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b9">
	<analytic>
		<title level="a" type="main">Structured streams: a new transport abstraction</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">B</forename><surname>Ford</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">SIGCOMM</title>
		<imprint>
			<date type="published" when="2007-08" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b10">
	<analytic>
		<title level="a" type="main">A fast general methodology for information-theoretically optimal encodings of graphs</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">X</forename><surname>He</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M.-Y</forename><surname>Kao</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">H.-I</forename><surname>Lu</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">SIAM J. Comput</title>
		<imprint>
			<biblScope unit="volume">30</biblScope>
			<biblScope unit="issue">3</biblScope>
			<biblScope unit="page" from="838" to="846" />
			<date type="published" when="2000" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b11">
	<analytic>
		<title level="a" type="main">A method for the construction of minimum-redundancy codes</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Huffman</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the IRE</title>
		<meeting>the IRE</meeting>
		<imprint>
			<date type="published" when="1952-09" />
			<biblScope unit="volume">40</biblScope>
			<biblScope unit="page" from="1098" to="1101" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b12">
	<monogr>
		<title level="m" type="main">Minion: Unordered delivery wire-compatible with TCP and TLS</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Iyengar</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><forename type="middle">O</forename><surname>Amin</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><forename type="middle">F</forename><surname>Nowlan</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">N</forename><surname>Tiwari</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">B</forename><surname>Ford</surname></persName>
		</author>
		<idno type="arXiv">arXiv:1103.0463</idno>
		<imprint>
			<date type="published" when="2012-04" />
		</imprint>
	</monogr>
	<note>To appear</note>
</biblStruct>

<biblStruct xml:id="b13">
	<analytic>
		<title level="a" type="main">Redundancy elimination within large collections of files</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><surname>Kulkarni</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">USENIX</title>
		<imprint>
			<date type="published" when="2004-06" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b14">
	<analytic>
		<title level="a" type="main">Data compression</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><forename type="middle">A</forename><surname>Lelewer</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><forename type="middle">S</forename><surname>Hirschberg</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">ACM Computing Surveys</title>
		<imprint>
			<biblScope unit="volume">19</biblScope>
			<biblScope unit="page" from="261" to="296" />
			<date type="published" when="1987-09" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b15">
	<monogr>
		<title level="m" type="main">LZW data compression. Dr. Dobb&apos;s Journal</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Nelson</surname></persName>
		</author>
		<imprint>
			<date type="published" when="1989-10" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b16">
	<monogr>
		<title level="m" type="main">Arithmetic coding + statistical modeling = data compression</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Nelson</surname></persName>
		</author>
		<ptr target="http://marknelson.us/1991/02/01/arithmetic-coding-statistical-modeling-data-compression/" />
		<imprint>
			<date type="published" when="1991-02" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b17">
	<analytic>
		<title level="a" type="main">High-latency, lowbandwidth windowing in the jupiter collaboration system</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><forename type="middle">A</forename><surname>Nichols</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><surname>Curtis</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Dixon</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Lamping</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 8th annual ACM symposium on User interface and software technology, UIST &apos;95</title>
		<meeting>the 8th annual ACM symposium on User interface and software technology, UIST &apos;95</meeting>
		<imprint>
			<date type="published" when="1995" />
			<biblScope unit="page" from="111" to="120" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b18">
	<analytic>
		<title level="a" type="main">Alternatives for detecting redundancy in storage systems data</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><surname>Policroniades</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">USENIX</title>
		<imprint>
			<date type="published" when="2004-06" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b19">
	<monogr>
		<title level="m" type="main">User datagram protocol</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Postel</surname></persName>
		</author>
		<imprint>
			<date type="published" when="1980-08" />
		</imprint>
	</monogr>
	<note>RFC 768</note>
</biblStruct>

<biblStruct xml:id="b20">
	<monogr>
		<title level="m" type="main">Scalable high performance main memory system using phase-change memory technology. ISCA &apos;09</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><forename type="middle">K</forename><surname>Qureshi</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">V</forename><surname>Srinivasan</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><forename type="middle">A</forename><surname>Rivers</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2009" />
			<biblScope unit="page" from="24" to="33" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b21">
	<monogr>
		<title level="m" type="main">Efficient Algorithms for Sorting and Synchronization</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename></persName>
		</author>
		<imprint>
			<date type="published" when="2000-04" />
		</imprint>
		<respStmt>
			<orgName>Australian National University</orgName>
		</respStmt>
	</monogr>
<note type="report_type">PhD thesis</note>
</biblStruct>

<biblStruct xml:id="b22">
	<analytic>
		<title level="a" type="main">Arithmetic coding for data compression</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">I</forename><forename type="middle">H</forename><surname>Witten</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><forename type="middle">M</forename><surname>Neal</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><forename type="middle">G</forename><surname>Cleary</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Commun. ACM</title>
		<imprint>
			<biblScope unit="volume">30</biblScope>
			<biblScope unit="page" from="520" to="540" />
			<date type="published" when="1987-06" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b23">
	<monogr>
		<title level="m" type="main">The secure shell (SSH) authentication protocol</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><surname>Ylonen</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><surname>Lonvick</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Ed</forename></persName>
		</author>
		<imprint>
			<date type="published" when="2006-01" />
		</imprint>
	</monogr>
	<note>RFC 4252</note>
</biblStruct>

				</listBibl>
			</div>
		</back>
	</text>
</TEI>
