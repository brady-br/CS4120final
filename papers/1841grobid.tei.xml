<?xml version="1.0" encoding="UTF-8"?>
<TEI xmlns="http://www.tei-c.org/ns/1.0" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
xsi:schemaLocation="http://www.tei-c.org/ns/1.0 /Users/atharsefid/Desktop/grobid-0.5.3/grobid-home/schemas/xsd/Grobid.xsd"
 xmlns:xlink="http://www.w3.org/1999/xlink">
	<teiHeader xml:lang="en">
		<encodingDesc>
			<appInfo>
				<application version="0.5.3" ident="GROBID" when="2020-09-29T02:13+0000">
					<ref target="https://github.com/kermitt2/grobid">GROBID - A machine learning software for extracting information from scholarly documents</ref>
				</application>
			</appInfo>
		</encodingDesc>
		<fileDesc>
			<titleStmt>
				<title level="a" type="main">Secure Deduplication of General Computations Secure Deduplication of General Computations</title>
			</titleStmt>
			<publicationStmt>
				<publisher/>
				<availability status="unknown"><licence/></availability>
				<date>July 8-10. 2015</date>
			</publicationStmt>
			<sourceDesc>
				<biblStruct>
					<analytic>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Yang</forename><surname>Tang</surname></persName>
							<affiliation key="aff0">
								<orgName type="institution" key="instit1">Columbia University</orgName>
								<orgName type="institution" key="instit2">Columbia University</orgName>
							</affiliation>
						</author>
						<author role="corresp">
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Junfeng</forename><surname>Yang</surname></persName>
							<email>junfeng@cs.columbia.edu</email>
							<affiliation key="aff0">
								<orgName type="institution" key="instit1">Columbia University</orgName>
								<orgName type="institution" key="instit2">Columbia University</orgName>
							</affiliation>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Yang</forename><surname>Tang</surname></persName>
							<affiliation key="aff0">
								<orgName type="institution" key="instit1">Columbia University</orgName>
								<orgName type="institution" key="instit2">Columbia University</orgName>
							</affiliation>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Junfeng</forename><surname>Yang</surname></persName>
							<affiliation key="aff0">
								<orgName type="institution" key="instit1">Columbia University</orgName>
								<orgName type="institution" key="instit2">Columbia University</orgName>
							</affiliation>
						</author>
						<title level="a" type="main">Secure Deduplication of General Computations Secure Deduplication of General Computations</title>
					</analytic>
					<monogr>
						<title level="m">Proceedings of the 2015 USENIX Annual Technical Conference (USENIC ATC &apos;15)</title>
						<meeting>the 2015 USENIX Annual Technical Conference (USENIC ATC &apos;15) <address><addrLine>Santa Clara, CA, USA</addrLine></address>
						</meeting>
						<imprint>
							<biblScope unit="page">319</biblScope>
							<date type="published">July 8-10. 2015</date>
						</imprint>
					</monogr>
					<note>This paper is included in the Open access to the Proceedings of the 2015 USENIX Annual Technical Conference (USENIX ATC &apos;15) is sponsored by USENIX. https://www.usenix.org/conference/atc15/technical-session/presentation/tang USENIX Association</note>
				</biblStruct>
			</sourceDesc>
		</fileDesc>
		<profileDesc>
			<abstract>
				<p>The world&apos;s fast-growing data has become highly concentrated on enterprise or cloud storage servers. Data deduplication reduces redundancy in this data, saving storage and simplifying management. While existing systems can deduplicate computations on this data by memoizing and reusing computation results, they are insecure , not general, or slow. This paper presents UNIC, a system that securely dedu-plicates general computations. It exports a cache service that allows applications running on behalf of mutually distrusting users on local or remote hosts to memoize and reuse computation results. Key in UNIC are three new ideas. First, through a novel use of code attestation, UNIC achieves both integrity and secrecy. Second, it provides a simple yet expressive API that enables applications to deduplicate their own rich computations. This design is much more general and flexible than existing systems that can deduplicate only specific types of computations. Third, UNIC explores a cross-layer design that allows the underlying storage system to expose data deduplication information to the applications for better performance. Evaluation of UNIC on four popular open-source applications shows that UNIC is easy to use, fast, and with little storage overhead.</p>
			</abstract>
		</profileDesc>
	</teiHeader>
	<text xml:lang="en">
		<body>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="1">Introduction</head><p>The world's data has been fast exploding for many years. It is estimated that in 2011 alone, 1.8 zettabytes of data were created, and the overall data will grow by 50× by 2020 <ref type="bibr" target="#b18">[21]</ref>. This massive amount of data comes in greatly varying forms, ranging from personal photos and videos, to office documents and web pages, to source files, binary programs, and virtual machine images, and to data collected from user clicks or physical sensors.</p><p>Meanwhile, the storage of this data has become highly concentrated. It is common practice for enterprises to store data on centralized, powerful storage servers for ease of management <ref type="bibr" target="#b31">[34]</ref>. The cloud computing paradigm has migrated data into the cloud so that the computations can be closer to the data. For instance, several organizations have put 56 public data sets totaling 761.2TB onto Amazon Web Services <ref type="bibr" target="#b1">[2]</ref>. Even consumers are beginning to aggregate their personal data into the cloud for convenience. For instance, Google, Dropbox, Amazon, and Microsoft all provide the option for users to automatically upload pictures and videos shot using their mobile devices. Facebook stores over 260 billion personal photos <ref type="bibr" target="#b5">[6]</ref>.</p><p>This highly concentrated, massive data poses challenges for storage provisioning and management. Fortunately, prior work has shown that a significant portion of the data is redundant <ref type="bibr" target="#b19">[22]</ref> and that data deduplication can hugely reduce the storage needed to hold the data and simplify management <ref type="bibr" target="#b10">[13]</ref>. For instance, file deduplication detects when multiple files have the same data and stores the unique data only once <ref type="bibr" target="#b7">[8]</ref>. This scheme is particularly useful when the same file is copied, such as when a user makes a copy of her friend's shared video on Dropbox. Block deduplication breaks files down to variable <ref type="bibr" target="#b17">[20,</ref><ref type="bibr" target="#b21">24]</ref> or fixed <ref type="bibr" target="#b32">[36]</ref> size blocks and stores each unique block of data once. This scheme is particularly useful for files that are similar but not exactly identical, such as different versions of a document and virtual machine images built from the same OS family. These deduplication schemes have been long prevalent in enterprise storage servers <ref type="bibr" target="#b10">[13]</ref>. With the trend of moving consumer data into the cloud, these schemes have also become popular among cloud storage providers such as <ref type="bibr">Dropbox [31]</ref>.</p><p>Not only can data be redundant, the computations on top of the data can also be redundant. For instance, a user may scan her Dropbox files for viruses, while another user runs the same virus scanner on a similar set of files. Different users may be doing the same computations on the public data sets in AWS, such as building an inverted index for the web pages in CommonCrawl <ref type="bibr" target="#b8">[11]</ref>. Given the same input data, the same deterministic computation always produces the same result. Thus, if the computation is slow, it is typically more efficient to memoize <ref type="bibr" target="#b20">[23]</ref> and reuse the result than redoing the computation. We term this technique computation deduplication.</p><p>Several prior systems deduplicate computations (e.g., <ref type="bibr">[9,</ref><ref type="bibr" target="#b12">15]</ref>). However, three main challenges prevent these systems from effectively deduplicating computations in today's cloud or enterprise environments:</p><p>First, how can we deduplicate computations done by mutually distrusting users? Storage providers such as Dropbox aggregate data from many users who do not necessarily trust each other. Even in an enterprise setting, users frequently have different data access permissions. One na¨ıvena¨ıve approach is to memoize computation results in a cache every user can read or write, but this approach provides neither integrity or security. A malicious user can easily poison the cache, by for instance marking files that contain viruses safe. She can also read results in the cache even though she has no permission to access the actual data in the results. Although this challenge may be solved with information flow tracking or access control systems, these systems are known to be difficult to configure and use.</p><p>Second, how can we deduplicate general computations? Prior systems deduplicate computations purely at the system level, assuming no cooperation from application developers. As a result, they handle only specific computations. For instance, ccache <ref type="bibr">[9]</ref> deduplicates only the compilations of C/C++ programs, and Nectar <ref type="bibr" target="#b12">[15]</ref> deduplicates the computations of programs written only in DryadLINQ <ref type="bibr" target="#b31">[35]</ref>, a specially designed language for large scale data-parallel workloads. However, the computations that users want to do on their data can be extremely rich, and it is unrealistic to require storage providers to understand all of them. For instance, while it may be feasible for Amazon to run some basic virus scanning software on the files it hosts, it is impossible for Amazon to understand every advanced virus scanner, every compression tool, and every image/video manipulation utility users want to run on their data.</p><p>Third, how can we effectively deduplicate computations on top of deduplicated data? Prior systems rely on custom methods to detect that data is redundant. For instance, ccache computes a hash of a preprocessed C/C++ source file and uses this hash to search its compilation cache. These methods incur unnecessary overhead when the data is deduplicated because the underlying storage system already knows what data is redundant.</p><p>This paper presents UNIC, 1 a system that securely deduplicates general computations. It exports a cache service that allows applications running on behalf of mutually distrusting users on local or remote hosts to memoize and reuse computation results. Key in UNIC are three new ideas:</p><p>First, through a novel use of code attestation, a classic primitive to attest what code is running to a (remote) party <ref type="bibr" target="#b26">[29,</ref><ref type="bibr" target="#b27">30]</ref>, UNIC achieves both integrity and secrecy. To insert or query the result cache that UNIC maintains, UNIC generates a secure, non-forgeable key that attests to both the application code and the input data. This key strongly isolates applications from each other in the result cache. For instance, if a malicious user modifies the code of a virus scanner in attempt to poison the cached results of this virus scanner, the attempt would fail because the modified code leads to a different key. In addition, since this key is not forgeable, a malicious user cannot query UNIC's cache without already knowing the application code and the input. Since the user knows the code and input already, she can already compute the result by herself.</p><p>Second, UNIC provides a simple yet expressive API that enables applications to deduplicate their own rich computations. From a high level, this API supports an application to (1) insert input → result to the result cache UNIC maintains; and (2) query the cache with input and get back the cached result if any. This application-level computation deduplication design is much more general and flexible than prior system-level designs.</p><p>Third, UNIC explores a cross-layer design that allows the underlying storage system to expose data deduplication information to the applications for speed. Applications thus do not need to re-detect whether the input data is redundant. For instance, suppose two files A and B are identical so the filesystem deduplicates them, and UNIC exposes this data deduplication information to the applications. After a virus scanner scans file A, it can immediately skip file B without reading any data from B, significantly increasing its scanning speed.</p><p>Our implementation of UNIC stores cached results in Redis, a fast, scalable, replicated key-value store <ref type="bibr" target="#b24">[27]</ref>. UNIC implements code attestation in a dynamically loadable Linux kernel module and considers the kernel to be trusted. It implements the computation deduplication API as a library, which applications link with. UNIC leverages ZFS <ref type="bibr" target="#b32">[36]</ref>, a file system that supports both file and block deduplication, to detect when data is deduplicated on behalf of the applications running with UNIC.</p><p>Evaluation of UNIC on four popular open-source applications shows that (1) it is easy to use (to support each application, we needed to change fewer than 1% lines of source code); (2) it is fast (it sped up applications by up to 21.4×); and (3) it incurs little storage overhead (it needed only 3.45% additional storage to cache the results).</p><p>The remainder of this paper is organized as follows. </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2">Security Model and Design</head><p>We begin with UNIC's assumptions, threat model, and the design of UNIC's protocol.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.1">Assumptions and Non-assumptions</head><p>First, UNIC relies on a code attestation mechanism for integrity and secrecy of the cached results. It leverages this mechanism to bind a result to the code and input data that together produce the result. This mechanism can be implemented in multiple ways with different security strengths. For instance, UNIC could use TPM and isolation technologies such as Intel TXT <ref type="bibr" target="#b15">[18]</ref> to realize code attestation, but doing so would incur both deployment and runtime overhead, negating our goal of being easy to use and fast. Therefore, for practical reasons, UNIC assumes that the OS is trusted and provides a function to attest the application code, and that the user does not have superuser privileges to interfere with that mechanism. This assumption matches well with many of today's mobile devices that run Chrome OS <ref type="bibr" target="#b11">[14]</ref>, iOS, and Android. Second, UNIC assumes correct application code. For instance, when using UNIC, an application developer should use UNIC's API correctly. She should only memoize computations with deterministic results. UNIC also assumes that the application is free of vulnerabilities such as buffer overflows. We note that this assumption is common to almost all prior code attestation work.</p><p>Third, UNIC assumes that its underlying storage system provides reasonable security guarantees. To reuse results across sessions, UNIC persists them in an underlying storage system such as a file system. UNIC assumes that this storage system is properly configured such that an attacker cannot access the data stored without going through UNIC. This guarantee and UNIC's security mechanisms described in §2.3 together ensure the integrity and secrecy of its cache of computation results.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.2">Threats</head><p>UNIC enables deduplicating computation among mutually distrusting users. Two attacks are particularly serious for UNIC: cache poisoning attacks UNIC's integrity, and query forging attacks UNIC's secrecy.</p><p>Cache poisoning. A malicious user may write a new application or modify an existing application in an attempt to poison the result cache. Her application may attempt to insert or overwrite entries belonging to a legitimate application. UNIC prevents this attack by isolating applications in the result cache: it guarantees that the cached data for one application can never be accessed by another application. Specifically, UNIC securely binds the computation code and the input data to the computation result leveraging a code attestation mechanism.</p><p>Query forging. A malicious user may write a new application or modify an existing application in attempt to query entries in the result cache that she cannot access, and gain information. UNIC prevents this attack again by isolating applications. When an application queries the cache, UNIC generates a search key that attests to both the code and the input data that generate the query. This key is unique to each application. One application thus cannot query entries of another application.</p><p>Several other attacks are possible, some of which can be prevented using simple mechanisms such as ratelimiting queries sent to UNIC. We briefly describe how they can be prevented in §7, and leave the implementation for future work.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.3">Design</head><p>UNIC novelly leverages code attestation to cryptographically bind the result with the code and the input that produced the result, preventing cache poisoning and query forging attacks.</p><p>UNIC assumes a trusted OS that securely computes SHA-1 hash and HMAC. A secret key K is shared among trusted OSes. (Existing work <ref type="bibr" target="#b27">[30]</ref> details how to distribute this key. We use symmetric key for efficiency; however asymmetric key works, too.) An attacker cannot forge HMAC(data, K) without knowing K.</p><p>UNIC leverages code attestation to bind result to code and input that produced result. Specifically, it uses code attestation to compute two things:</p><formula xml:id="formula_0">(1) result = code(input) // Run code on input to compute result. (2) sig = HMAC(hash(code)||hash(input)||result, K)</formula><p>// Bind code, input, and result. We use || as the concatenation operator.</p><p>The assumptions on trusted OS, unprivileged user, and correct application code together guarantee that result is the correct result of running code on input. This code attestation mechanism further guarantees that (a) sig cryptographically attests that result is indeed produced by running code on input, which anyone with access to code, input, result, and K can verify; and (b) sig cannot be forged. UNIC protocol. The UNIC cache is a mapping of</p><formula xml:id="formula_1">hash(code)||hash(input) → result</formula><p>Since the hash function is collision resistant, the cache space for different computations are isolated.</p><p>When an application wants to compute code(input), it sends hash(code)||hash(input) to the UNIC cache. If cache exists <ref type="figure">(Figure 1a</ref>), UNIC sends back result. If cache does not exist <ref type="figure">(Figure 1b)</ref>, the application computes both result and sig, and sends hash(code)||hash(input), result, and sig to the UNIC cache.</p><p>The UNIC cache validates that sig is indeed HMAC(hash(code)||hash(input)||result, K), and updates the cache.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.4">Security Analysis</head><p>The design of UNIC prevents cache poisoning as follows. Suppose an attacker replaces result with bad result when inserting into UNIC. Because of code attestation, she cannot forge sig, so UNIC cannot validate sig. Suppose she modifies code into bad code and computes bad result to poison the cache. Because UNIC validates sig, she can only insert hash(bad code)||hash(input) → bad result which cannot affect the cache entry of hash(code)||hash(input). To avoid a malicious client from polluting the cache space, UNIC can employ a quota mechanism to limit the cache space for each client application.</p><p>This design also prevents an attacker from forging a query to steal result. To query cache, she must send hash(code)||hash(input), so she must already have code and input because otherwise she would not be able to compute the hashes. Once an attacker has code and input, she can already compute result simply by running code on input herself. Thus, she cannot gain additional information with this query other than whether there is a result in the cache. §7 further discusses its implications.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3">UNIC API and Usage</head><p>UNIC provides a simple yet expressive API for applications to deduplicate their own rich computations. We first motivate our API design through an example, and then formally describe its interface.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.1">Example</head><p>We motivate the design of UNIC API through a step-bystep example showing how a simple virus scanning application could use memoization to deduplicate computation. Conceptually, the application works like <ref type="figure" target="#fig_1">Figure 2</ref>. It reads the file content into a buffer, executes virus scanning algorithm on the buffer, and outputs the result.</p><p>In this piece of code, line 2 reads the file content from disk, potentially a time-consuming I/O operation. Line 3 performs some CPU-bound virus signature matching algorithm, potentially another time-consuming operation. Line 4 prints the result, which is relatively fast because the length of the scanning result (e.g., "no virus found") is much smaller than the original file content. Therefore, we want to improve the performance on lines 2 and 3.</p><p>Memoizing Computations. We first examine how to use memoization to avoid duplicate computation on line 3. Since scan signature() is a deterministic function over the input buffer and the signature-scanning options, if we could memoize the result the first time we perform the computation, we would be able to safely reuse the result later on the same input. To do so, we modify the application into <ref type="figure" target="#fig_2">Figure 3</ref>, using three functions that UNIC provides: exists(), get(), and put(). It first checks if the computation for the given buffer and options exists in the result cache (line 3). If so, it simply gets the memoized result (line 4). Otherwise, it performs the computation as before (line 6) and then puts the result into the cache (line 7).</p><p>As discussed in §2.3, the cache is not merely a mapping from the input to the result, but binds the computation code together with them. UNIC internally computes 1 : void simple virus scanner(file, options) { 2 : buffer = read(file); 3 :</p><p>if (exists(scan signature, buffer, options)) { 4 : result = get(scan signature, buffer, options); 5 :</p><p>} else { 6 : result = scan signature(buffer, options); 7 :</p><p>put(scan signature, buffer, options, result); 8 :</p><formula xml:id="formula_2">} 9 :</formula><p>print <ref type="formula">(</ref> a non-forgeable authentication code that guarantees that the result (result) is indeed generated by the computation code (scan signature()) over the input (buffer and options). The result cache is updated only if it can verify this authentication code.</p><p>Reducing I/O Operations. Memoizing the computation is good, but it would be better if we could also eliminate the need of reading the file content on line 2. This is not trivial because if we did not read the file in the first place, we would never know if the signature scanning is performed on the same content. Fortunately, it is possible if the file is stored on a deduplication-enabled storage.</p><p>A deduplication-enabled filesystem, such as ZFS <ref type="bibr" target="#b32">[36]</ref>, stores all files with the same content as a single copy. It does so by identifying the file content using a cryptographically collision-resistant hash (e.g., SHA-256), and mapping all files with the same content to the same hash. These hashes are stored on the filesystem metadata, separate from the actual file content. Therefore, it creates a perfect opportunity for our application to tell if the file contents are the same without actually reading them. <ref type="figure" target="#fig_3">Figure 4</ref> shows the final version of the application. Instead of reading the file content up front, it now gets the unique hash of the file directly from the filesystem metadata using UNIC's get file hash() function (line 2), and uses the hash to identify the memoization (lines 3, 4, and 8). Since getting the hash is much faster than reading the whole file, we have further avoided the slow I/O operation when reusing a previously cached computation.</p><p>In practice, when using UNIC, the application developer does not need to worry whether the storage has deduplication enabled or not -she should always follow the final version in <ref type="figure" target="#fig_3">Figure 4</ref> and use hash to identify the memoization. This is because UNIC transparently leverages storage deduplication information. Where such information is absent, UNIC computes and caches the hash by itself. This process is detailed in §4.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.2">The API</head><p>The previous example illustrates the usage of the UNIC API which we now formally describe. It wraps OS- and filesystem-specific details by exporting the following functions:</p><p>• init() initializes UNIC.</p><p>• get file hash(file) returns the hash of a file, where file can be the name of a file, a file descriptor, or an inode number. If the underlying filesystem has deduplication enabled (e.g., ZFS), it gets the hash of the file from the filesystem metadata without reading the file content. Otherwise, it computes the hash from the file content using libcrypto.</p><p>• get block hash(file, block) is similar as above, but returns the hash of a block of a file, where block specifies the block number. This is particularly useful if the application's computation is based on blocks, such as a bzip2 compression. The application should decide whether to use getfile hash() or get block hash() based on its own logic, which is discussed in §4.</p><p>• exists(computation, hash, id) checks if a given computation and input exists in the result cache. The parameter hash is the hash of input data. The parameter id is an optional string identifier defined by the application, used for differentiating multiple computations performed on the same input. For example, the virus scanning application may let id be the signature-scanning options.</p><p>• get(computation, hash, id) gets the result of a given computation and input from the result cache.</p><p>• put(computation, hash, id, result, ttl) puts an entry of computation, input, and result into the result cache. An optional ttl specifies its time-to-live in seconds, and the result cache automatically deletes the entry upon expiration.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4">Leveraging Storage Deduplication</head><p>UNIC explores a cross-layer design allowing underlying storage system to expose data deduplication information to the applications.</p><p>Typically, a deduplication-enabled filesystem maintains the hash of each file as its metadata. Since UNIC also uses hash to identify the memoization input, it is both convenient and efficient to leverage such filesystem metadata. Therefore, when an application needs to get a hash, UNIC automatically detects the underlying storage system type, and returns the hash directly from the metadata if the filesystem has enabled deduplication. If not, UNIC reads the file content and computes the hash itself. In this way, UNIC provides a consolidated interface for both scenarios, making the storage system details transparent to the applications.</p><p>Furthermore, the application does not need to know whether the underlying storage system is file-level or block-level deduplicated. It should decide whether to use get file hash() or get block hash() solely based on the application's own logic. Generally, if the application's computation works with the file on a block-byblock basis, such as the bzip2 compression algorithm, it should use get block hash(). Otherwise, if the application's computation uses the file as a whole or randomly accesses the file, such as an anti-virus program, it should use get file hash().</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5">Implementation</head><p>We now describe UNIC's components and implementation details. <ref type="figure" target="#fig_4">Figure 5</ref> shows the architecture of UNIC. It is deployed on a network of multiple hosts. Each user can log into multiple hosts, and each host can have many users logged in. Because of UNIC's security design ( §2), different users do not need to mutually trust each other.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5.1">UNIC Components</head><p>The UNIC module on each host handles application's memoization requests. Since memoization works best when the reuses of computations are frequent, reading data from the result cache should be more common than writing data to it. In light of this, we design UNIC to make read operations as fast as possible. A trusted master cache server handles all write operations. It can be either standalone or co-located with the enterprise's storage (e.g., NFS) server. Each host has an optional readonly slave cache, which periodically syncs from the master cache server. If the slave cache is present, all read operations happen locally. For security, all network communications are encrypted with SSL/TLS. To reduce the handshake latency, the UNIC module on each host establishes a connection with the master cache server when the host boots up, and keeps the connection alive.</p><p>Because data updates on the slave caches happen asynchronously, it is possible that a host does not have the latest cached results. However, we point out that memoized computations are deterministic ( §2.1), therefore the consistency on the slave caches should not affect the integrity of computations. The only contingency would be that an application may not be able to leverage recently cached results but have to compute on its own. UNIC inserts a kernel module into the Linux kernel as a virtual device for computing hash(code) and sig. It represents code by the image of the executable process, with all libraries statically linked. The secret key K is inaccessible to the user space. The user-space application talks to the kernel module via ioctl. For improved performance, the kernel module internally caches hash(code) for each caller.</p><p>UNIC uses a modified Redis key-value store <ref type="bibr" target="#b24">[27]</ref> as the result cache. It modifies Redis to support UNIC's protocol ( §2.3), and removes nonessential functions (such as KEYS which can list all cache entries) from Redis for security. Therefore, users cannot access the result cache except through UNIC.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5.2">Opportunistic Memoization</head><p>When using UNIC, the application developer needs to judge the best opportunity to use memoization because of two reasons. First, memoizing an already-fast computation may not justify the overhead of accessing the result cache. Second, abusing memoization for lowredundancy computations could result in exceeded overhead for entries that are never reused later. However, making the optimal decision at compile time is usually hard because input data cannot be predicted. Therefore, UNIC provides an optimization to opportunistically enable memoization only when the computation is slow and its reuse happens to be frequent at runtime.</p><p>To do so, UNIC internally has a model of T put (result size) and T get (result size), meaning how long it would take to put and get a certain size of result, respectively. This model is independent of the actual content of the result, and it can be learned from a microbenchmark upon the installation of UNIC (see §6.2.1 for our evaluation). UNIC also maintains an accumulator t save for each computation, initialized to 0, for the total time that could have been saved for the future.</p><p>UNIC further provides two functions for an application to mark the boundary of a computation. An application calls begin() to indicate that a computation starts, and UNIC records the current timestamp as t begin . An application calls end() to indicate that the computation has finished, and UNIC records the current timestamp as t end . When put() is called, UNIC does not put the data into the result cache immediately, but updates t save to be</p><formula xml:id="formula_3">t save = t save + t end − t begin − T get (result size)</formula><p>Therefore, the slower and the more frequent a computation is, the larger t save becomes. UNIC only performs the put() operation when t save is greater than T put (result size), i.e., the time that could have been saved from a computation is greater than the time that would be spent for memoizing the computation. In the case that t save &lt; T put (result size), UNIC ignores the put() request, and simply updates t save .</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="6">Evaluation</head><p>We evaluated UNIC on a workstation with an Intel Core i7-2600 CPU and 32GB RAM, running <ref type="bibr">Fedora</ref>  </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="6.1">Application Adaptation Effort</head><p>To evaluate whether UNIC is easy to use, we picked four popular open-source applications that we use daily: (1) clamav-0.98.1, an anti-virus software that scans a directory for viruses <ref type="bibr">[10]</ref>; (2) pbzip2-1.1.8, a multi-threaded compression utility that compresses a single file <ref type="bibr" target="#b22">[25]</ref>; (3) grep-2.18, a tool that searches for a regular expression within one or many files; and (4) the compiler gcc-4.8.3. We adapted them to use UNIC's API 2 . We used file-level memoization for grep, clamav, and gcc, and blocklevel memoization for grep and pbzip2. <ref type="bibr" target="#b1">2</ref> Our adaptation of gcc is based on ccache <ref type="bibr">[9]</ref>.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Application</head><p>Total  <ref type="table">Table 1</ref>: Lines of code changed for each application. Parenthesis indicates whether the adaptation uses file-level or blocklevel memoization. The numbers for gcc are based on ccache. <ref type="table">Table 1</ref> shows the lines of changed code for each application to use UNIC's APIs. Changing dozens of lines (&lt;1% of total lines) suffices for all these applications.</p><p>To further illustrate, we next present how we adapted grep, the application with the most code changes.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="6.1.1">Case Study: grep</head><p>GNU grep is a line-based pattern searching utility. To invoke grep, the user specifies a search pattern and the path to a file or directory. Then grep iterates through all files in the directory and search for the pattern.</p><p>Common to all applications, the first step is to add a call to init() at the beginning of main() in order to initialize UNIC. For grep specifically, there are two design choices: we can memoize either at file-level or at block-level. Memoizing at file-level is faster when the whole file is unchanged, whereas memoizing at blocklevel can exploit sub-file similarities for different files. Next we discuss each of them.</p><p>File-level Memoization. Adapting grep for file-level memoization is relatively straightforward. When grep works on a new file, we call get file hash() to get the hash of the file from ZFS and call exists() to check if there is a corresponding entry in the result cache. If so, we call get() to retrieve the memoized result, output it, and move on to the next file. If not, we follow the original algorithm and call put() to memoize whatever is output. We also call put() to memoize the number of matched lines in the current file, which grep uses for internal bookkeeping purposes.</p><p>Block-level Memoization. Adapting grep to memoize at block-level requires tighter integration with its workflow. For each file, grep reads its content in 32KB chunks, and performs pattern searching one chunk at a time. However, since the searching is line-based (delimited by '\n'), it is possible that lines are not well-aligned with chunk boundaries. For example, one line may span across the end of the previous chunk and continue at the following chunk. In this case, grep adjusts its chunk boundary to include the residue of the line in the previous chunk and exclude the partial line at the end of current chunk, as shown in the shaded region in <ref type="figure" target="#fig_5">Figure 6</ref>. Unfortunately, this poses a challenge to using UNIC directly, because ZFS keeps hash metadata only for entire aligned 32KB disk blocks. On the other hand, we cannot simply use the hash of the unadjusted chunk to address the cache, because this would err if two chunks were the same but their residues in the previous chunk differed. Our solution is to combine the hash of all chunks from the beginning of the residue until the current chunk. Note that this may lose the rare opportunity of reusing memoized results for chunks who only differ at the last partial line, but it preserves correctness nevertheless.</p><p>Our experience with adapting the other three applications were straightforward. Overall, we found UNIC easy to use and the adaptation effort was generally little.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="6.2">Performance</head><p>To understand the performance of UNIC, we first use microbenchmarks to evaluate the throughput of UNIC's basic operations. We then run UNIC on four real-world applications to see how UNIC reduces application running time. Next, we study how UNIC is able to reuse previous computation results for some evolving data. Finally, we study how UNIC performs with a group of multiple users whose data are similar yet different.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="6.2.1">Microbenchmark</head><p>We first use microbenchmarks to evaluate the throughput of the get() and put() operations. We wrote a program that calls put() 10,000 times followed by calling get() 10,000 times. The hashes of the 10,000 entries are all different, and we varied the result size from 1KB to 1MB. <ref type="figure" target="#fig_6">Figure 7</ref> shows the results, where each data point is an average of 10 individual experiments with an error bar showing the maximum and minimum value in the 10 experiments. The x-axis is the size of the memoized result. The y-axis is the total time in performing the 10,000 operations. The solid line is for put() and the dashed line is for put(). From the results we find that the time for an operation is on the order of ten microseconds when the memoized result is small in size (&lt;10KB), which is mostly the case (see §6.3). Even if the memoized result is as large as 1MB, the time to get a memoized entry is only 0.33ms, which is normally much faster than doing real computation on that size of data. Therefore, UNIC's basic operations are sufficiently fast for doing useful caching of computations.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="6.2.2">Application Performance</head><p>We next show how real-world applications benefit from UNIC, and how storage deduplication further helps. We conducted the following experiments. (1) We used clamav to scan for viruses on two data sets. The first is the linux-3.12 kernel source code tree. The second is the Dropbox folder for one of the co-authors, which contains 10.8GB of documents, music, pictures, videos, and applications. (2) We used pbzip2 to compress linux-3.12.tar into linux-3.12.tar.bz2. (3) We ran grep on two data sets. The first is the linux-3.12 kernel source code tree, which consists of 47,336 small files totaling 508MB. The second is the tags file of the linux-3.12 kernel source code generated by ctags -R, which is a single text file of 250MB. For each data set, we ran a simple query ('void') and a complex query ('^\s*struct\s+\w+\s+\**\s*\w+\s*=\s*\w+\((\ w+(,)*)+\);' for the source code tree, which matches declaring and initializing a structure pointer to the return value of a function, such as "struct taskstruct *task = get proc task(inode);", and '/[A-Za-z]+\.c.*d.*file' for the tags file, which matches a specific type of tag). (4) We used gcc to compile linux-3.12 kernel with the allnoconfig configuration. Because gcc has a nontrivial way to represent input dependencies for cache reusability rather than a file hash, our adaptation does not leverage storage deduplication information. All data files are on a freshly-formatted ZFS disk with cold buffer cache.   <ref type="figure">Figure 8</ref>: Relative running time of applications. The y-axis is the running time relative to the original application. For each cluster, the first bar is cache-miss execution without FS deduplication, the second bar is cache-hit execution without FS deduplication, the third bar is cache-miss execution with FS deduplication, and the fourth bar is cache-hit execution with FS deduplication. The dashed line at 100% shows the running time for the original application.</p><note type="other">( L in u x ) c la m a v ( D r o p b o x ) p b z ip 2 g r e p li n u x ( s im p le ) g r e p li n u x ( c o m p le x ) g r e p t a g s ( s im p le ) g r e p t a g s ( c o m p le x ) g c</note><p>For each application, we compared the running time (1) without UNIC (the baseline), (2) with UNIC but without filesystem deduplication (the first and second bars on <ref type="figure">Figure 8</ref>), and (3) with both UNIC and filesystem deduplication support (the third and fourth bars). For experiments with UNIC, we further compared the running time (1) for execution on an initially empty result cache, causing cache misses and thus putting entries to the cache (the first and third bars), and (2) for execution when the result cache had already been pre-populated, causing cache hits (the second and fourth bars). <ref type="figure">Figure 8</ref> shows the running time for each experiment. Each number is an average of 10 individual runs. Although running applications on an empty result cache incurs an average overhead of 68.2%, running them on a warm result cache gives an average speedup of 2.39×. If filesystem deduplication is available, the average overhead of cache-miss execution drops to 59.3% and the average speedup with memoization increases to 7.58×. Furthermore, complex computations (e.g., scanning for viruses or compressing a file) benefit the most from memoization (up to 21.4× speedup), while simple computations (e.g., searching for a short string) suffer more from the cache-miss overhead. Therefore, opportunistically enabling memoization would be the best practice. With our strategy described in §5.2, memoization is enabled at the second occurrence of put() for one application ("grep tags" with simple query), and at the first occurrence for all other applications.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="6.2.3">Effectiveness with Evolving Data</head><p>The previous evaluation focused on the memoization benefit on exactly the same computation. Next we show the effectiveness of memoization if the input data is evolving, i.e., if UNIC has memoized computation on an old version of data, how it can speed up computation on a new version of the data. We used grep to search for 'void' on thirteen major versions of the Linux kernel source code, from v3.0 to v3.12. All files are on a freshly-formatted deduplicationenabled ZFS disk with cold buffer cache. We performed three sets of experiments. The first one used the original grep without UNIC. In the second experiment, we first populated the result cache when running grep on v3.0, and then measured the time for running grep on each version based on the same memoization of v3.0. In the third experiment, we ran grep on each version in a "rolling" manner, i.e., each execution was based on the memoization of the immediate previous version, which resembles a more practical scenario. <ref type="figure" target="#fig_8">Figure 9</ref> shows the running time for all executions, where each number is an average of 10 runs. With a single memoization of v3.0, the speedup is significant for running on v3.1 (1.61×), but diminishes along the increment of version number, and eventually becomes ineffective after v3.8, because the source code differs significantly from the memoized version and the cache hit rate drops below 0.3. On the other hand, when memoized the immediate previous version, the speedup is almost constant, with an average of 1.50×. The reason is that the amount of source code difference is almost constant between each two consecutive versions, and many mem- oized results can be reused (hit rates are between 0.73 and 0.81). Therefore, UNIC is more effective when the divergence of the actual input data from the memoized data is small, which is likely true in a practical scenario.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="6.2.4">Effectiveness with Multiple Users</head><p>We next evaluate the memoization effectiveness for multiple users with similar yet different data. We took the project directories of seven groups of students in a graduate-level operating system course offered by our university. The average size of each directory is 1.6GB. We performed two executions on each group's directory:</p><p>(1) use grep to search for 'void', and (2) use clamav to scan for viruses. This resembles the enterprise setting where multiple people working on the same project have similar data and perform common computing tasks such as virus scanning. The result cache was originally empty, and was gradually filled by UNIC during the process. <ref type="figure" target="#fig_9">Figure 10</ref> shows the breakdown of each application's running time on each group. The trend is that the original application takes almost the same amount of time for all groups. With UNIC, although the first group takes longer time to execute (24.1% for grep and 51.9% for clamav), all subsequent groups consistently take a much shorter time (5.17× speedup for grep and 5.57× speedup for clamav). This is because for the first group, all computations are new and UNIC needs to insert them to the result cache. Once this is done, all subsequent groups can benefit from it. The overall speedups for the executions on all seven groups are 2.94× for grep and 2.71× for clamav. We foresee that with more number of groups the overall speedup should be even higher. Therefore, UNIC is practical for a group of users working together or doing similar tasks.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="6.3">Storage Space</head><p>We now evaluate the storage overhead of UNIC. For each application we used for the performance evaluation in §6.2.2, we examined the number of entries in the result cache. To study the total space used for memoization, we also let Redis dump a snapshot of all data and measured the size of the dump file. <ref type="table" target="#tab_5">Table 2</ref> shows the results. Column (a) is the number of input files. Column (b) is the total size of input files. Column (c) is the number of entries in the result cache. Column (d) is the size of the Redis dump file. The relative storage overhead is thereby Column (d) divided by Column (b), which is shown in Column (e). The results depict that the average overhead of the memoization storage for all applications is 3.45%, negligible compared with the storage of all file data. Therefore, UNIC incurs little storage overhead.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="7">Discussion and Limitations</head><p>We discuss UNIC's security implications and limitations.</p><p>Denial-of-service attacks. A malicious user may issue a large number of put requests on manufactured inputs, and pollute the result cache with useless results. Several approaches can be used to defend against it. For example, UNIC may rate-limit puts to the result cache, employ a quota mechanism to limit the cache space for each client application, or enforce time-to-live limits on cached results. We argue that even if the result cache is full, the worst outcome would be that future computations cannot be memoized and have to be recomputed, yet the secrecy and integrity of computations are not violated.</p><p>Side-channel information leakage. A malicious user may enumerate through a large set of inputs on an application, and observe if some executions are significantly faster than others. Based on the observed timings, she may infer what computations have been done by other users and what have not. While defending against this side-channel attack is out of the scope of this paper, we note that the application developers may defend against it by rate-limiting queries to the result cache or randomly forcing cache misses even if the result exists in the cache.</p><p>Brute-force attacks. A malicious user may enumerate through all possible hash values of the application code and input, in hopes of getting cached results. We argue that the possibility for an unprivileged user to get a valid hash is minimal. Even if she manages to get an entry, she only knows the result, but she cannot generate the original code and input from the hash. In the example of virus scanning, she might brute-force a hash and discover the result of scanning some file, but she cannot determine the original content of that file. Again, UNIC  may defend against this attack by rate-limiting queries to the result cache. Furthermore, if the result is sensitive by itself (e.g., cat), the application developer may encrypt it before putting it to the result cache, or the system administrator may disable UNIC for such applications.</p><p>Application bugs. Ensuring bug-free code is a hard problem orthogonal to UNIC and code attestation. If the application contains a bug such as buffer overflow, a malicious user may exploit the bug to poison the result cache. Existing systems such as baggy bounds checking <ref type="bibr" target="#b0">[1]</ref> and AddressSanitizer <ref type="bibr" target="#b25">[28]</ref> can prevent many memory access bugs. Other countermeasures include letting the application rerun the computation and verify the cached result periodically, and purging the result cache when a bug is found. In addition, using hardwareenforced isolation mechanisms such as Intel TXT <ref type="bibr" target="#b15">[18]</ref> with TPM, or Intel SGX <ref type="bibr" target="#b4">[5,</ref><ref type="bibr" target="#b14">17]</ref> may avoid this issue.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="8">Related Work</head><p>Storage deduplication. Storage deduplication reduces data redundancy at either file-level <ref type="bibr" target="#b19">[22]</ref> or blocklevel <ref type="bibr" target="#b9">[12,</ref><ref type="bibr" target="#b29">32]</ref>. ZFS <ref type="bibr" target="#b32">[36]</ref> is a widely used cross-platform filesystem that does block deduplication at the time data is written. These works are orthogonal to UNIC, and UNIC's cross-layer design allows it to transparently leverage storage deduplication information.</p><p>Ad-hoc caching. Many applications use ad-hoc caching to improve performance, but they either trust all users, or simply disallow cross-user caching. For example, ccache <ref type="bibr">[9]</ref> caches compiler outputs on the local filesystem, but the cache can be easily exploited or poisoned by any user. On the other hand, clamav <ref type="bibr">[10]</ref> only caches virus scanning results within a single session, rendering cross-session and cross-user caching impossible. UNIC improves the status quo with strong security guarantees.</p><p>Memoization. Memoization <ref type="bibr" target="#b16">[19,</ref><ref type="bibr" target="#b20">23,</ref><ref type="bibr" target="#b23">26]</ref> is a technique that reuses prior computation results of functions with-out side effects. Vesta <ref type="bibr" target="#b13">[16]</ref> uses memoization for software configuration management. Nectar <ref type="bibr" target="#b12">[15]</ref> memoizes intermediate results from <ref type="bibr">DryadLINQ [35]</ref> programs. Incoop <ref type="bibr" target="#b6">[7]</ref> uses memoization to build a MapReduce framework for incremental computations. However, these systems handle only specific computations, and it is nontrivial to generalize their use cases. UNIC can be used to deduplicate general computations.</p><p>Code attestation. Many code attestation techniques exist to provide integrity of computations. For example, result-checking <ref type="bibr" target="#b30">[33]</ref> verifies the result produced by a program by computing it in two ways. Secure boot mechanisms <ref type="bibr" target="#b2">[3,</ref><ref type="bibr" target="#b3">4]</ref> verify the integrity of the software stack after booting. BIND <ref type="bibr" target="#b27">[30]</ref> ties the proof of what computation has been run to the result that the computation has produced. Pioneer <ref type="bibr" target="#b26">[29]</ref> provides code integrity guarantees for running software on an untrusted system. UNIC makes novel use of the code attestation mechanism to protect the secrecy and integrity of memoization.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="9">Conclusion</head><p>We presented UNIC, a general system for applications to securely deduplicate their rich computations. It uses code attestation mechanism to achieve both secrecy and integrity. It explores a cross-layer design that allows applications to leverage storage deduplication information for speed. Evaluation results show that UNIC is easy to use, speeds up applications by up to 21.4×, and incurs little storage overhead.</p></div><figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_0"><head></head><label></label><figDesc>Figure 1: UNIC protocol.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_1"><head>Figure 2 :</head><label>2</label><figDesc>Figure 2: A simple virus scanning application.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_2"><head>Figure 3 :</head><label>3</label><figDesc>Figure 3: First step: memoize the computation result.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_3"><head>Figure 4 :</head><label>4</label><figDesc>Figure 4: Final version: use filesystem metadata to further reduce I/O operations.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_4"><head>Figure 5 :</head><label>5</label><figDesc>Figure 5: UNIC architecture. Additional hosts each have the same architecture as Host 1, and are omitted here due to limited space.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_5"><head>Figure 6 :</head><label>6</label><figDesc>Figure 6: Misalignment between line and chunk boundaries in grep. Shaded region is the adjusted chunk for computation.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_6"><head>Figure 7 :</head><label>7</label><figDesc>Figure 7: Throughput of put() and get() operations. The xaxis is the size of memoized result. The y-axis is the total time in performing 10,000 put() (solid line) and get() (dashed line) operations.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_8"><head>Figure 9 :</head><label>9</label><figDesc>Figure 9: Effectiveness of memoization with evolving data. Solid line is the original grep without memoization. Dashed line has the result cache populated with v3.0. Dotted line has the result cache populated with the immediate previous version.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_9"><head>Figure 10 :</head><label>10</label><figDesc>Figure 10: Effectiveness of memoization across users. For each cluster, the first bar is the original application, and the second bar is the application modified to use UNIC. Each bar shows the breakdown of running time on each group, the number on top showing the total time.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_0" validated="false"><head>The next section discusses the security model and UNIC's design. §3 describes UNIC's API and usage. §4 presents how UNIC leverages deduplicated data. §5 describes the implementation. §6 shows evaluation results. §7 dis- cusses UNIC's security implications, §8 describes related work, and §9 concludes.</head><label>The</label><figDesc></figDesc><table></table></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_1" validated="false"><head>1 Is UNIC easy to use? §6.2 Does UNIC reduce computation time? §6.3 What is UNIC's storage overhead?</head><label></label><figDesc>20 with Linux 3.16.2. The cache server was running Redis 2.6.17. Our goal is to show that UNIC significantly im- proves performance with memoization while requiring minimal developers' effort and storage space. The rest of this section focuses on three questions: §6.</figDesc><table></table></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_5" validated="false"><head>Table 2 :</head><label>2</label><figDesc></figDesc><table>Storage overhead. Columns are: (a) the number of input files, (b) total size of input files, (c) number of entries in the result 
cache, (d) size of the Redis dump file, and (e) relative storage overhead. 

</table></figure>

			<note place="foot" n="1"> We name our system UNIC (pronounced &quot;unique&quot;) because it is conceptually similar to the Unix uniq utility applied to computations.</note>

			<note place="foot" n="3"> Not all files are used for compilation due to our experiment configuration.</note>
		</body>
		<back>

			<div type="acknowledgement">
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Acknowledgments</head><p>We thank Yinzhi Cao, Gang Hu, David Williams-King, Xi Wang (our shepherd), and the anonymous reviewers for their valuable comments. This work was supported in part by AFRL FA8650-11-C-7190 and FA8750-10-2-0253; ONR N00014-12-1-0166; NSF CCF-1162021, CNS-1054906; an NSF CAREER award; an AFOSR YIP award; and a Sloan Research Fellowship.</p></div>
			</div>

			<div type="references">

				<listBibl>

<biblStruct xml:id="b0">
	<analytic>
		<title level="a" type="main">Baggy bounds checking: an efficient and backwards-compatible defense against out-ofbounds errors</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><surname>Akritidis</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Costa</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Castro</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Hand</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 18th conference on USENIX security symposium, SSYM&apos;09</title>
		<meeting>the 18th conference on USENIX security symposium, SSYM&apos;09</meeting>
		<imprint>
			<date type="published" when="2009" />
			<biblScope unit="page" from="51" to="66" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b1">
	<analytic>
		<title/>
		<ptr target="http://aws.amazon.com/datasets" />
	</analytic>
	<monogr>
		<title level="j">Amazon Web Services. Public data sets</title>
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b2">
	<analytic>
		<title level="a" type="main">A secure and reliable bootstrap architecture</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">W</forename><forename type="middle">A</forename><surname>Arbaugh</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><forename type="middle">J</forename><surname>Farber</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><forename type="middle">M</forename><surname>Smith</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 1997 IEEE Symposium on Security and Privacy, SP &apos;97</title>
		<meeting>the 1997 IEEE Symposium on Security and Privacy, SP &apos;97</meeting>
		<imprint>
			<date type="published" when="1997" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b3">
	<monogr>
		<title level="m" type="main">Automated recovery in a secure bootstrap process</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">W</forename><forename type="middle">A</forename><surname>Arbaugh</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><forename type="middle">D</forename><surname>Keromytis</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><forename type="middle">J</forename><surname>Farber</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><forename type="middle">M</forename><surname>Smith</surname></persName>
		</author>
		<imprint>
			<date type="published" when="1998" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b4">
	<analytic>
		<title level="a" type="main">Shielding applications from an untrusted cloud with Haven</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Baumann</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Peinado</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">G</forename><surname>Hunt</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the Eleventh Symposium on Operating Systems Design and Implementation (OSDI &apos;14)</title>
		<meeting>the Eleventh Symposium on Operating Systems Design and Implementation (OSDI &apos;14)</meeting>
		<imprint>
			<date type="published" when="2014-10" />
			<biblScope unit="page" from="267" to="283" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b5">
	<analytic>
		<title level="a" type="main">Finding a needle in haystack: Facebook&apos;s photo storage</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Beaver</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Kumar</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">H</forename><forename type="middle">C</forename><surname>Li</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Sobel</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><surname>Vajgel</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 9th USENIX Conference on Operating Systems Design and Implementation, OSDI&apos;10</title>
		<meeting>the 9th USENIX Conference on Operating Systems Design and Implementation, OSDI&apos;10</meeting>
		<imprint>
			<date type="published" when="2010" />
			<biblScope unit="page" from="1" to="8" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b6">
	<analytic>
		<title level="a" type="main">Incoop: Mapreduce for incremental computations</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><surname>Bhatotia</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Wieder</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Rodrigues</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">U</forename><forename type="middle">A</forename><surname>Acar</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Pasquin</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 2Nd ACM Symposium on Cloud Computing, SOCC &apos;11</title>
		<meeting>the 2Nd ACM Symposium on Cloud Computing, SOCC &apos;11</meeting>
		<imprint>
			<date type="published" when="2011" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b7">
	<analytic>
		<title level="a" type="main">Single instance storage in windows</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">W</forename><forename type="middle">J</forename><surname>Bolosky</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Corbin</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Goebel</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><forename type="middle">R</forename><surname>Douceur</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 4th Conference on USENIX Windows Systems Symposium</title>
		<meeting>the 4th Conference on USENIX Windows Systems Symposium</meeting>
		<imprint>
			<date type="published" when="2000" />
			<biblScope unit="volume">4</biblScope>
			<biblScope unit="page">0</biblScope>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b8">
	<monogr>
		<title/>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Commoncrawl</surname></persName>
		</author>
		<ptr target="http://commoncrawl.org/" />
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b9">
	<analytic>
		<title level="a" type="main">Hydrastor: A scalable secondary storage</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><surname>Dubnicki</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">L</forename><surname>Gryz</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">L</forename><surname>Heldt</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Kaczmarczyk</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">W</forename><surname>Kilian</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><surname>Strzelczak</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Szczepkowski</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><surname>Ungureanu</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Welnicki</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proccedings of the 7th Conference on File and Storage Technologies, FAST &apos;09</title>
		<meeting>cedings of the 7th Conference on File and Storage Technologies, FAST &apos;09</meeting>
		<imprint>
			<date type="published" when="2009" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b10">
	<monogr>
		<title level="m" type="main">Key considerations as deduplication evolves into primary storage</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">L</forename><surname>Dubois</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Amaldas</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">E</forename><surname>Sheppard</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2011-03" />
		</imprint>
	</monogr>
	<note>White Paper 223310</note>
</biblStruct>

<biblStruct xml:id="b11">
	<monogr>
		<title/>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Google</forename><surname>Chrome</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">O</forename><forename type="middle">S</forename></persName>
		</author>
		<ptr target="http://www.google.com/chromeos/index.html" />
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b12">
	<analytic>
		<title level="a" type="main">Nectar: Automatic management of data and computation in datacenters</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><forename type="middle">K</forename><surname>Gunda</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">L</forename><surname>Ravindranath</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><forename type="middle">A</forename><surname>Thekkath</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Y</forename><surname>Yu</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">L</forename><surname>Zhuang</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 9th USENIX Conference on Operating Systems Design and Implementation, OSDI&apos;10</title>
		<meeting>the 9th USENIX Conference on Operating Systems Design and Implementation, OSDI&apos;10</meeting>
		<imprint>
			<date type="published" when="2010" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b13">
	<analytic>
		<title level="a" type="main">Caching function calls using precise dependencies</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Heydon</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Levin</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Y</forename><surname>Yu</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the ACM SIGPLAN 2000 Conference on Programming Language Design and Implementation, PLDI &apos;00</title>
		<meeting>the ACM SIGPLAN 2000 Conference on Programming Language Design and Implementation, PLDI &apos;00</meeting>
		<imprint>
			<date type="published" when="2000" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b14">
	<monogr>
		<title level="m" type="main">Software guard extensions programming reference</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Intel</surname></persName>
		</author>
		<ptr target="https://software.intel.com/sites/default/files/329298-001.pdf" />
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b15">
	<monogr>
		<title level="m" type="main">Intel trusted execution technology: White paper</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Intel</surname></persName>
		</author>
		<ptr target="http://www.intel.com/content/www/us/en/trusted-execution-technology/trusted-execution-technology-security-paper.html" />
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b16">
	<analytic>
		<title level="a" type="main">Static caching for incremental computation</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Y</forename><forename type="middle">A</forename><surname>Liu</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><forename type="middle">D</forename><surname>Stoller</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><surname>Teitelbaum</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">ACM Transactions on Programming Languages and Systems (TOPLAS)</title>
		<imprint>
			<biblScope unit="volume">20</biblScope>
			<biblScope unit="issue">3</biblScope>
			<biblScope unit="page" from="546" to="585" />
			<date type="published" when="1998-05" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b17">
	<analytic>
		<title level="a" type="main">Finding similar files in a large file system</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">U</forename><surname>Manber</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the USENIX Winter 1994 Technical Conference, WTEC&apos;94</title>
		<meeting>the USENIX Winter 1994 Technical Conference, WTEC&apos;94</meeting>
		<imprint>
			<date type="published" when="1994" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b18">
	<monogr>
		<title level="m" type="main">World&apos;s data will grow by 50x in next decade</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">L</forename><surname>Mearian</surname></persName>
		</author>
		<ptr target="http://www.computerworld" />
		<imprint/>
	</monogr>
	<note>IDC study predicts</note>
</biblStruct>

<biblStruct xml:id="b19">
	<analytic>
		<title level="a" type="main">A study of practical deduplication</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><forename type="middle">T</forename><surname>Meyer</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">W</forename><forename type="middle">J</forename><surname>Bolosky</surname></persName>
		</author>
		<idno>14:1-14:20</idno>
	</analytic>
	<monogr>
		<title level="j">ACM Transactions on Storage (TOS)</title>
		<imprint>
			<biblScope unit="volume">7</biblScope>
			<biblScope unit="issue">4</biblScope>
			<date type="published" when="2012-01" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b20">
	<analytic>
		<title level="a" type="main">memo&quot; functions and machine learning</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Michie</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Nature</title>
		<imprint>
			<biblScope unit="volume">218</biblScope>
			<biblScope unit="page" from="19" to="22" />
			<date type="published" when="1968-04" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b21">
	<analytic>
		<title level="a" type="main">A low-bandwidth network file system</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Muthitacharoen</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">B</forename><surname>Chen</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Mazieres</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 18th ACM Symposium on Operating Systems Principles (SOSP &apos;01)</title>
		<meeting>the 18th ACM Symposium on Operating Systems Principles (SOSP &apos;01)</meeting>
		<imprint>
			<date type="published" when="2001" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b22">
	<monogr>
				<ptr target="http://compression.ca/pbzip2/" />
		<title level="m">PBZIP2. Parallel BZIP2 (PBZIP2</title>
		<imprint>
			<date type="published" when="2011" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b23">
	<analytic>
		<title level="a" type="main">Incremental computation via function caching</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">W</forename><surname>Pugh</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><surname>Teitelbaum</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 16th ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages, POPL &apos;89</title>
		<meeting>the 16th ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages, POPL &apos;89</meeting>
		<imprint>
			<date type="published" when="1989" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b24">
	<monogr>
		<title/>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Redis</surname></persName>
		</author>
		<ptr target="http://redis.io/" />
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b25">
	<analytic>
		<title level="a" type="main">AddressSanitizer: A fast address sanity checker</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">K</forename><surname>Serebryany</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Bruening</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Potapenko</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Vyukov</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the USENIX Annual Technical Conference (USENIX &apos;12)</title>
		<meeting>the USENIX Annual Technical Conference (USENIX &apos;12)</meeting>
		<imprint>
			<date type="published" when="2012" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b26">
	<analytic>
		<title level="a" type="main">Pioneer: Verifying code integrity and enforcing untampered code execution on legacy systems</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Seshadri</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Luk</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">E</forename><surname>Shi</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Perrig</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">L</forename><surname>Van Doorn</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><surname>Khosla</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 20th ACM Symposium on Operating Systems Principles (SOSP &apos;05)</title>
		<meeting>the 20th ACM Symposium on Operating Systems Principles (SOSP &apos;05)</meeting>
		<imprint>
			<date type="published" when="2005" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b27">
	<analytic>
		<title level="a" type="main">BIND: a finegrained attestation service for secure distributed systems</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">E</forename><surname>Shi</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Perrig</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">L</forename><surname>Van Doorn</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Security and Privacy, 2005 IEEE Symposium on</title>
		<imprint>
			<date type="published" when="2005-05" />
			<biblScope unit="page" from="154" to="168" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b28">
	<monogr>
		<title level="m" type="main">How Dropbox sacrifices user privacy for cost savings</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><surname>Soghoian</surname></persName>
		</author>
		<ptr target="http://paranoia.dubfire.net/2011/04/how-dropbox-sacrifices-user-privacy-for.html" />
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b29">
	<analytic>
		<title level="a" type="main">Hydrafs: A high-throughput file system for the hydrastor content-addressable storage system</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><surname>Ungureanu</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">B</forename><surname>Atkin</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Aranya</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Gokhale</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Rago</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">G</forename><surname>Calkowski</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><surname>Dubnicki</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Bohra</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 8th USENIX Conference on File and Storage Technologies, FAST&apos;10</title>
		<meeting>the 8th USENIX Conference on File and Storage Technologies, FAST&apos;10</meeting>
		<imprint>
			<date type="published" when="2010" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b30">
	<analytic>
		<title level="a" type="main">Software reliability via run-time result-checking</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">H</forename><surname>Wasserman</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Blum</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Journal of the ACM (JACM)</title>
		<imprint>
			<biblScope unit="volume">44</biblScope>
			<biblScope unit="issue">6</biblScope>
			<biblScope unit="page" from="826" to="849" />
			<date type="published" when="1997-11" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b31">
	<analytic>
		<title level="a" type="main">Dryadlinq: A system for general-purpose distributed data-parallel computing using a high-level languag</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Y</forename><surname>Yu</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Isard</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Fetterly</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Budiu</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">U</forename><surname>Erlingsson</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><forename type="middle">K</forename><surname>Gunda</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Currey</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the Eighth Symposium on Operating Systems Design and Implementation (OSDI &apos;08)</title>
		<meeting>the Eighth Symposium on Operating Systems Design and Implementation (OSDI &apos;08)</meeting>
		<imprint>
			<date type="published" when="2008-12" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b32">
	<monogr>
				<ptr target="http://www.sun.com/2004-0914/feature/" />
		<title level="m">ZFS: the last word in file systems</title>
		<imprint/>
	</monogr>
</biblStruct>

				</listBibl>
			</div>
		</back>
	</text>
</TEI>
