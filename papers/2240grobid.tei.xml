<?xml version="1.0" encoding="UTF-8"?>
<TEI xmlns="http://www.tei-c.org/ns/1.0" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
xsi:schemaLocation="http://www.tei-c.org/ns/1.0 /Users/atharsefid/Desktop/grobid-0.5.3/grobid-home/schemas/xsd/Grobid.xsd"
 xmlns:xlink="http://www.w3.org/1999/xlink">
	<teiHeader xml:lang="en">
		<encodingDesc>
			<appInfo>
				<application version="0.5.3" ident="GROBID" when="2020-09-29T02:32+0000">
					<ref target="https://github.com/kermitt2/grobid">GROBID - A machine learning software for extracting information from scholarly documents</ref>
				</application>
			</appInfo>
		</encodingDesc>
		<fileDesc>
			<titleStmt>
				<title level="a" type="main">Experimental Study of Fuzzy Hashing in Malware Clustering Analysis</title>
			</titleStmt>
			<publicationStmt>
				<publisher/>
				<availability status="unknown"><licence/></availability>
			</publicationStmt>
			<sourceDesc>
				<biblStruct>
					<analytic>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Yuping</forename><surname>Li</surname></persName>
							<email>ypli@ksu.edu</email>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Sathya</forename><forename type="middle">Chandran</forename><surname>Sundaramurthy</surname></persName>
							<email>sathya@ksu.edu</email>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Xin</forename><surname>Hu</surname></persName>
							<email>huxin@us.ibm.com</email>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Jiyong</forename><surname>Jang</surname></persName>
							<email>jjang@us.ibm.com</email>
						</author>
						<author>
							<affiliation key="aff0">
								<orgName type="institution" key="instit1">Kansas State University</orgName>
								<orgName type="institution" key="instit2">Kansas State University</orgName>
								<address>
									<settlement>Alexandru G. Bardas</settlement>
								</address>
							</affiliation>
						</author>
						<author>
							<affiliation key="aff1">
								<orgName type="institution" key="instit1">Kansas State University Xinming Ou</orgName>
								<orgName type="institution" key="instit2">Kansas State University</orgName>
								<address>
									<country>Doina Caragea</country>
								</address>
							</affiliation>
						</author>
						<author>
							<affiliation key="aff2">
								<orgName type="institution" key="instit1">Kansas State University</orgName>
								<orgName type="institution" key="instit2">IBM Research</orgName>
								<orgName type="institution" key="instit3">IBM Research</orgName>
							</affiliation>
						</author>
						<title level="a" type="main">Experimental Study of Fuzzy Hashing in Malware Clustering Analysis</title>
					</analytic>
					<monogr>
						<imprint>
							<date/>
						</imprint>
					</monogr>
				</biblStruct>
			</sourceDesc>
		</fileDesc>
		<profileDesc>
			<abstract>
				<p>Malware triaging is the process of analyzing malicious software applications&apos; behavior to develop detection signatures. This task is challenging, especially due to the enormous number of samples received by the vendors with limited amount of analyst time. Triaging usually starts with an analyst classifying samples into known and unknown malware. Recently, there have been various attempts to automate the process of grouping similar mal-ware using a technique called fuzzy hashing-a type of compression functions for computing the similarity between individual digital files. Unfortunately, there has been no rigorous experimentation or evaluation of fuzzy hashing algorithms for malware similarity analysis in the research literature. In this paper, we perform extensive study of existing fuzzy hashing algorithms with the goal of understanding their applicability in clustering similar malware. Our experiments indicate that current popular fuzzy hashing algorithms suffer from serious limitations that preclude them from being used in similarity analysis. We identified novel ways to construct fuzzy hashing algorithms and experiments show that our algorithms have better performance than existing algorithms.</p>
			</abstract>
		</profileDesc>
	</teiHeader>
	<text xml:lang="en">
		<body>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="1">Introduction</head><p>Security companies receive a huge number of malware samples every day. For instance, Cisco <ref type="bibr" target="#b9">[10]</ref> states in their annual security report that they are processing daily around 400,000 malware samples. Various limitations (e.g., time and resources) call for systematic prioritization of incoming samples. Existing triage processes, which start with binary analysis, then move into dynamic sandbox analysis, and finally end up in the hands of a human researcher, can be viewed as having an associated cost in terms of time and resources. Thus the effectiveness of binary analysis techniques is vital to minimize the cost, as the overall cost function is heavily influenced by time and resource costs of both sandboxing and human analysis.</p><p>Fuzzy hashing algorithms, also known as fuzzy hash functions, similarity preserving hash functions or similarity digest, are a type of compression functions for computing the similarity between individual digital files. In this paper, for consistency purposes, we use the term fingerprint as the output of a fuzzy hash function. Different from traditional cryptographic hash algorithms such as MD5 or SHA1, which are designed to be sensitive to small input modifications and can only determine if the inputs are exactly the same or not, fuzzy hash functions hold a certain tolerance for changes and can tell how different two files are by comparing the similarity of their fingerprints. This property is desirable for clustering malware because campaigns often use multiple variants from the same family that perform the exact same set of behaviors and use the same command and control, but have different cryptographic hashes.</p><p>There are numerous attempts to apply fuzzy hashing to malware analysis. For instance, ShadowServer <ref type="bibr" target="#b0">[1]</ref> started to use fuzzy hash functions for malware similarity analysis in 2007. Around 2012, VirusTotal <ref type="bibr" target="#b1">[2]</ref> started to generate an ssdeep <ref type="bibr" target="#b17">[18]</ref> hash value for each submitted malware sample. Unfortunately, these attempts have not been rigorously validated, even though several blog posts talk about failing to apply fuzzy hashing algorithms in detecting similar executable samples <ref type="bibr" target="#b11">[12]</ref>. So far, there has not been a rigorous evaluation and experimentation effort on the applicability of using fuzzy hash functions for malware analysis.</p><p>Intuitively, since fuzzy hashing algorithms can be used for document similarity analysis, it could be applied for malware clustering analysis, e.g., by using a fuzzy hash function as a customized distance function for a hierarchical clustering algorithm. This combination could potentially allow us to find a better malware clustering approach and validate it on different datasets. In this way we can evaluate the overall effectiveness of different fuzzy hash functions, and compare them with existing static malware clustering attempts, e.g., BitShred <ref type="bibr" target="#b16">[17]</ref>.</p><p>Furthermore, existing static clustering algorithms may also provide certain guidances on how to design a more effective fuzzy hash function. For instance, according to our experiments the feature hashing technique leveraged in BitShred is more effective than using Bloom filters for feature encoding (utilized in some of the fuzzy hashing functions). The contributions of our work are:</p><p>• We identify a key design flaw -asymmetric distance computation -within some of existing block-based fuzzy hash functions which prevents them from being used in malware clustering. To address this issue, we design a new block-based distance computation algorithm.</p><p>• We propose a novel way to build a fuzzy hash function inspired from current fuzzy hashing algorithms and the state-of-the-art malware clustering approaches. Moreover, we show that our function performs better than existing fuzzy hash functions.</p><p>• We design and implement a generic experimentation framework for evaluating the effectiveness of different fuzzy hash functions in malware clustering.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2">Background</head><p>Initial fuzzy hash functions (e.g., ssdeep) are built on top of spam detection algorithms, which are used to determine if an email is "similar" to certain known spam emails. Fuzzy hashing algorithms are also utilized during forensic investigations when malware analysts want to compare unknown files with known malware samples. For instance, ModSecurity <ref type="bibr" target="#b3">[4]</ref> introduces a new operator <ref type="bibr" target="#b2">[3]</ref> that uses fuzzy hashing to identify web-based malware in web attachment uploads. Using fuzzy hash functions for malware clustering has a particular appeal due to its ability to calculate a similarity score between two different samples. Primary use cases involve identifying existing malware families with updated offensive capabilities, thus requiring a review and potential update of the countermeasures.</p><p>In general, a complete fuzzy hash function consists of two parts: (1) fingerprint generation and (2) fingerprint comparison. The fingerprint generation includes a feature extraction and a feature encoding procedure. All of the existing fuzzy hashing algorithms extract the features from binary input sequences. Based on how the fuzzy hash functions encode the features and compute the final fingerprint, one can categorize existing fuzzy hash algorithms into the following two types. Context-triggered piecewise hashing (CTPH): This type of functions split the input sequence into pieces based on the existence of special contexts, called trigger points, within the data object. A context (small input sequence) is considered to be a trigger point if it matches a certain property, e.g., a small byte sequence whose checksum is equal to a predefined value. The function computes a hash value (e.g., cryptographic hash) for the individual split-pieces and concatenates them into a final fingerprint string. ssdeep <ref type="bibr" target="#b17">[18]</ref>, FKSum <ref type="bibr" target="#b8">[9]</ref>, and SimFD <ref type="bibr" target="#b23">[24]</ref> belong to this category. Block-based hashing (BBH): This category of fuzzy hash functions generate one small block of the final fingerprint after a certain amount of input has been processed. The final fingerprint results from the concatenation of all the generated small block results e.g., , dcfldd <ref type="bibr" target="#b13">[14]</ref>, SimHash <ref type="bibr" target="#b22">[23]</ref>, sdhash <ref type="bibr" target="#b20">[21]</ref>, mvHash-B <ref type="bibr" target="#b4">[5]</ref>, etc.</p><p>In this paper, we analyze and evaluate the following three fuzzy hashing algorithms: ssdeep, sdhash, mvHash-B. ssdeep is probably the most popular application for computing CTPH for individual files and is based on a spam detector called spamsum <ref type="bibr" target="#b25">[26]</ref>. The basic idea behind it is to split an input into chunks, hash each chunk independently and concatenate the chunk hashes to a final fingerprint. Specifically, the algorithm identifies trigger points (chunk boundaries) via a rolling hash algorithm. Two similar files will have similar trigger points and similar fingerprints. sdhash is a BBH function. It relies on entropy estimates and a sizeable empirical study to pick out the features that are most likely unique to a data object. It then hashes the selected features with the cryptographic hash function SHA-1 and inserts them into multiple Bloom filters. The concatenation of the resulting Bloom filters constitutes the final fingerprint. mvHash-B also belongs to the BBH category. It is an improved version of mvhash and bbHash <ref type="bibr" target="#b5">[6]</ref>. This algorithm is based on the idea of majority voting in conjunction with run length encoding used to compress the input data and leverages Bloom filters to produce the fingerprint. According to the feature inserting procedure as described in <ref type="bibr" target="#b4">[5]</ref>, the Bloom filters of mvHash-B are fixed-size bit vectors (e.g., 2048 bits).</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3">Limitations of Existing Fuzzy Hash Functions</head><p>Roussev <ref type="bibr" target="#b20">[21]</ref> identified a limitation in ssdeep due to its fixed size fingerprint. A fixed size fingerprint means that a smaller file and a relatively larger file cannot be meaningfully compared as they would have different compression rates. We further identified two new problems in existing fuzzy hashing algorithms, which make them inefficient or even unsuitable for similarity analysis.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.1">Asymmetric distance computation</head><p>We identified an asymmetric distance computation problem in sdhash and mvHash-B. For these two block-based fuzzy hash algorithms, the final distance score is non-deterministic when the order of inputs changes. Specifically, the procedure to compute the distance between two fingerprints A and B in mvHash-B is as follows: (a) if A is longer than B swaps A and B, (b) compare each block A i in A against each block B i in B, (c) select the minimum distance for each A i and name it as a candidate distance, and (d) average the selected distances as a final distance score. However, when two fingerprints have the same lengths, it may happen that distance (A,B) = distance (B,A) , because the selected candidate distances are the local minimum values for the first input. Asymmetric distance computation is critical because if we are not aware of the problem within fuzzy hashing algorithm we will end up with inconsistent results. Consequently, we will not be able to conduct consistent evaluations with regard to algorithm accuracy.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.1.1">New Distance Computation Algorithm</head><p>We propose a new generic block based distance computation algorithm to address the asymmetric distance computation problem and use it to evaluate the effectiveness of different block based fingerprint generation algorithms. It is noteworthy to mention that the new algorithm targets only distance computation and it assumes the fuzzy hash function fingerprint is a sequence of fixed size small blocks, such as the Bloom filters fingerprint (used in sdhash and mvHash-B), or the bitvector fingerprint generated by nextGen-hash-multiblock to be introduced later. Thus for the evaluation of sdhash and mvHash-B, we replace their finger print distance computation algorithm with our new one but still using the same fingerprint generation algorithms designed in sdhash and mvHash-B. Please refer to <ref type="bibr" target="#b20">[21]</ref> and <ref type="bibr" target="#b4">[5]</ref> for more details.</p><p>The new distance computation algorithm is shown in Algorithm 1. Assuming a single block in a multi-block fingerprint is a fixed-size bit vector (e.g., 2048 bits), the new block based distance computation algorithm is designed as follows: 1) compute all the pairwise distances between the blocks of the two input fingerprints BFS1 and BFS2, store the distance results in an m by n array; 2) greedily select m global minimum distance results with no overlapping fingerprints as final candidates; 3) compute the average value of the selected candidates to represent the best match between BFS1 and part of BFS2. To further account for the difference in the lengths of the two inputs, the final distance value is a weighted average of the m smallest distance values and a term n − m which accounts for the difference in the two inputs' lengths. All the pair-wise block distances and the final fingerprint distance are values between 0 and 1.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.2">Results interpretation</head><p>Apart from similarity analysis, many fuzzy hash algorithms (e.g., sdhash and ssdeep) also specifically mention that the algorithm can be used for fragment identification, in which the algorithms try to compare two fingerprints with dramatically different sizes and check how much of the smaller size fingerprint is contained in the larger fingerprint. This usage scenario would be in conflict with similarity analysis. Suppose that there are two fingerprints "abc" and "abcdef." Apparently "abc" is 100% contained in fingerprint "abcdef" (first interpretation), but their overall similarity is definitely not 100% (second interpretation). Fuzzy hash functions can only choose one of the two interpretations. Therefore, it should be clearly stated which interpretation was chosen and users should be informed about whether it can be used for overall similarity analysis.</p><p>Data: Fingerprints: </p><formula xml:id="formula_0">BFS1 = b f 1 , b f 2 , ..., b f m and Fingerprint BFS2 = b f 1 , b f 2 , ..., b f n Result: Distance score d if m &gt; n then Switch BFS1 and BFS2; end /* Initialize a m*n distance array D and a size m vector S */ for i ← 1 to m do for j ← 1 to n do D[i][j] = hamming distance(b f i , b f j );</formula></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4">Insights on Designing a Better Fuzzy</head><p>Hashing Algorithm</p><p>Code section vs whole binary: We observed that current fuzzy hashing algorithms do not take into consideration the structure of the input data. They consider the whole binary file as a data unit. Prior work on malware clustering, such as BitShred <ref type="bibr" target="#b16">[17]</ref>, extracted features from the code section of malware samples yielding good results. This led us to consider whether fuzzy hashing algorithms should extract their features only from code section of the malware samples.</p><p>Semantic vs low level features: Current fuzzy hashing algorithms extract features from low level binary input sequences. This is partially because the algorithms have no knowledge about the input file structure. However, it is very hard to derive meaningful information from low level features. High level semantic features, on the other hand, such as disassembled instruction sequences, are more meaningful in comparing malware <ref type="bibr" target="#b14">[15]</ref>.</p><p>Bloom filters vs feature hashing: A Bloom filter is a bit array of m bits, all initialized to 0. Bloom filter feature encoding approach maps each feature to multiple bits in the bit array. Jang et al. showed in their work <ref type="bibr" target="#b16">[17]</ref> that the Bloom filter feature encoding approach will bring in more noise and saturate the final fingerprint more quickly, thereby generating poor results. They proposed another feature encoding approach, called "feature hashing," which maps each feature into exactly one bit in the bit array.</p><p>Single vs multiple block fingerprint: Currently most of block-based fuzzy hashing algorithms are using multiple small blocks to represent the final fingerprint instead of one large block. It is referred to as "Bloom filters" in the algorithms. Each "Bloom filter" handles an input sequence and the results are concatenated together into the final fingerprint. We also observe that BitShred maps all the features into one large block -a 16KB bit array. Therefore, we also want to know which fingerprint representation would be more effective for comparing similarity. However, since the fingerprint formats are different, we have to also use different distance computation algorithms for this comparison.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5">New Fuzzy Hashing Algorithm Design</head><p>In order to verify our insights, we designed a new fuzzy hashing algorithm and implemented it in python. The algorithm extracts 5-grams from the code section of a malware sample, uses feature hashing to encode them into a bit array as final fingerprint. We use 16KB as the size of the fingerprint for a given malware sample. Similarity between the fingerprints is computed using bitwise Jaccard distance function. We call this algorithm nextGenhash. We then implemented the following variations of our algorithm to effectively test our insights.</p><p>nextGen-hash-imp is a fuzzy hashing algorithm similar to nextGen-hash. The main difference is that nextGenhash-imp analyzes the executable structures, extracts "import table entries" from header part of each executable as features, and then applies feature hashing to generate a bitvector as fingerprint. It also uses bitwise Jaccard function to compute the similarity between two fingerprints. In particular, we set the fingerprint to be 16KB.</p><p>nextGen-hash-bf is a fuzzy hashing algorithm similar to nextGen-hash. The main difference between nextGenhash-bf and nextGen-hash is how the features are encoded into the fingerprint. It also analyzes the executable structures, and uses 5-gram binary sequences from the code section as features but applies a Bloom filter approach (one feature is mapped to multiple bits in the fingerprint) to map features into a large bitvector. Specifically, we compute a SHA1 hash for each 5-gram feature.</p><p>Next we split the hash output into 5 equal length smaller hash values to simulate 5 different hash functions so we can set the corresponding bits in the fingerprint. The algorithm uses bitwise Jaccard distance function to compute the similarity of two fingerprints, and the fingerprint size is set to 16KB.</p><p>nextGen-hash-multiblock is a fuzzy hashing algorithm which uses a different fingerprint format and distance computation function. The program also analyzes the executable structures, extracts 5-gram features from code section sequence, and then applies the feature hashing technique to map every 1500 features into a 2048-bit bitvector. The final fingerprint is the concatenation of all of the small bitvectors. Therefore the length of the final fingerprint is dynamic (multiple of 2048 bits), and the fingerprint consists of variable number of small blocks. The value of 2048 is chosen because both sdHash and mvHash-B set their single block to be 2048 bits. We use the new block based distance computation algorithm introduced in section 3.1.1 to compute the similarity of two fingerprints.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="6">Evaluation Framework</head><p>In order to verify the previously identified fuzzy hashing limitations and evaluate their effectiveness for malware similarity analysis, we designed and implemented a modularized framework as shown in <ref type="figure" target="#fig_1">Figure 1</ref>. We combine fuzzy hashing and clustering analysis together, and use fuzzy hash function as customized distance function for agglomerative hierarchical clustering (with average linkage). In the beginning, each fingerprint is in a cluster of its own. The clusters with shortest distance are then sequentially combined into larger clusters until the distance between two clusters are greater than user specified threshold. For average linkage clustering, the distance between any two clusters is defined as the mean distance between all fingerprints of each cluster. The clustering algorithm we used is fastcluster <ref type="bibr" target="#b10">[11]</ref>. As shown in <ref type="figure" target="#fig_1">Figure 1</ref>, fingerprint generation and distance computation are abstracted as public interfaces for clustering analysis, so that we can support arbitrary fuzzy hash functions. Optionally, certain fuzzy hash functions will need a pre-processing component, which may involve unpacking malware samples, decompiling and extracting code section sequences. The main advantage of the framework is that it can be used as a platform for ver-ifying the applicability of fuzzy hashing algorithms in clustering analysis. We validated our insights and findings regarding the effectiveness of fuzzy hashing functions in malware analysis using the framework. </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="7">Data preparation</head><p>The accuracy of cluster analysis may depend on the data set used. To create reliable ground truth, it is desirable to prepare accurately labeled malware samples. In this research, we start with one archived data set from VirusShare <ref type="bibr" target="#b19">[20]</ref>.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="7.1">Filter packed malware samples</head><p>Executable packing is to compress an executable file and combine the compressed data with decompression code into a single executable, which is commonly seen in most modern malware. Since there are hundreds of different packers available, it is almost impossible to precisely unpack all of the samples. Compressed executables may present a completely different binary sequence and bring in noise for the analysis. In our evaluation, we filter out the packed samples from the data set and conduct cluster analysis only on unpacked samples.</p><p>1. Malware packers classification model: By applying machine learning techniques, Perdisci et al. <ref type="bibr" target="#b18">[19]</ref> proposed a malware classification model for automatically distinguishing between packed and unpacked samples with high accuracy. We adopt their feature extraction tool together with their training data set (5498 training points), and conduct the classification analysis on Weka <ref type="bibr" target="#b12">[13]</ref> platform to get the unpacked samples.</p><p>2. Static signature based matching: We also use PEiD <ref type="bibr" target="#b24">[25]</ref> with 28307 different signatures to detect common packers, cryptors and compilers for PE files. PEiD is one of the most widely used packer detectors among malware analysts. The drawbacks are that it is relatively easy to evade the static signatures used by the software, it is almost impossible to cover all of the new packers, and one PE sample can be matched with multiple signatures. PEiD is used as an auxiliary step to filter the packed samples.</p><p>3. Other heuristic packing filters: Since there is no guarantee that after the previous two steps all packed samples have been removed from the input, we also apply several heuristic filters. First we analyze the section names of the PE executables and remove those with non-standard section names. Second, we submit the file hash to VirusTotal and extract the corresponding labels returned by different anti-virus companies, and then remove those samples with "packers," "packed," "obfuscators," "themida," which can be viewed as strong indicators of packed samples.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="7.2">Reliable malware family information</head><p>We make use of VirusTotal to obtain more reliable family label information. After extracting the keywords from the VirusTotal returned scan labels and removing the less informative ones (such as malicious, agent, malware, Trojan etc.), we collect the count information of all unique keywords. We then choose the majority keyword as the family name with the requirement that at least 40% of all anti-virus companies have flagged the sample as malicious, and at least 75% of those with positive flags contain the same label keyword in their scanning results. The above unpacking and family name assigning processes are combined to create a highly reliable data set. To prevent potentially biased or skewed distribution of clusters, we limit the size of each malware family to be less than or equal to 300, and discard those families that only have less than 10 samples. Eventually, we end up with 1146 samples from 17 different malware families. The family statistics of the selected malware samples are shown in <ref type="table">Table 1</ref> </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="8">Evaluation</head><p>Instead of comparing the performance of the algorithms with respect to computational and space complexity <ref type="bibr" target="#b7">[8]</ref>, we evaluate the "correctness" of algorithm results by leveraging clustering analysis. We believe evaluating correctness is more helpful as the computational performance depends highly on algorithm implementation specifics and the programming language used. We use precision and recall to measure the accuracy of clustering results. Assume we have n malware samples from m different families; the ground truth reference set can be represented as F = F 1 , F 2 , ..., F m . For a specific threshold the algorithm separates the samples into t clusters. The results can be represented as C = C 1 ,C 2 , ...,C t . Formally, the precision P and recall R are defined as:</p><formula xml:id="formula_1">P = 1 n ∑ t i=1 max(|C i ∩ F 1 |, |C i ∩ F 2 |, ..., |C i ∩ F m |) R = 1 n ∑ m j=1 max(|F j ∩C 1 |, |F j ∩C 2 |, .</formula><p>.., |F j ∩C t |) Precision is to measure the purity of clustering analysis results and check how well the clustering algorithm assigns samples of different families to different clusters. Recall is to check how well the malware samples from same family are grouped into the same cluster by the algorithm. Precision P would be 1 when each cluster in C is completely pure, that is, the members of each cluster belong to the same family; likewise, recall would be 1 if every family group of the reference set is a subset of one cluster in C, an extreme case is when C only contain one cluster. Usually, optimizing only one measurement will inevitably sacrifice the other one. Therefore, we take the intersection of the two metrics as a balance point between precision and recall, and use it as the measurement of clustering performance.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="8.1">Effects of considering underlying data structure</head><p>Algorithms: ssdeep, sdhash, mvHash-B In this experiment, we use whole binary sample as one input set, then analyze each sample and extract the code section from the same samples as another input set, then apply three existing fuzzy hash functions and our newly designed function to generate fingerprints and compare their clustering results. As described previously in Section 3, sdhash and mvHash-B have the asymmetric distance computation problem, we use the new block based distance computation algorithm to evaluate the effectiveness of sdhash and mvHash-B fingerprint generation algorithm. <ref type="figure" target="#fig_2">Figure 2</ref> shows that for all fuzzy hash algorithms, code section as input can always generate more accurate clustering results, <ref type="table" target="#tab_1">Table 2</ref> is the detailed clustering results, each entry in the table is the intersection point between precision and recall. This verifies our first insight in section 4. This might be because: except for code section content, whole binary also includes almost similar PE header and other structural information which result in overestimated similarity.   </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="8.2">Effects of higher level semantic features</head><p>Algorithms: nextGen-hash, nextGen-hash-imp In this experiment, we evaluate the performance differences brought by different level of features of the same malware data set. Specifically, nextGen-hash firstly analyzes the executable structure and extracts n-gram sequences (from code section of samples) as features; while nextGen-hash-imp firstly analyzes the executable structure and extracts import table entries as features. By comparing their clustering performances on the same malware dataset, we could check the effects brought by higher level semantic features. As presented in <ref type="figure" target="#fig_3">Figure 3</ref>, nextGen-hash-imp actually generates slightly better results than nextGen-hash, their intersection points between precision and recall were 0.919, 0.924, respectively. This verifies our second insight in Section 4. Usually, the number of "import table </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="8.3">Effects of different feature encoding strategy</head><p>Algorithms: nextGen-hash, nextGen-hash-bf We evaluate the performance differences brought by different feature encoding strategy in this experiment.</p><p>The only difference between nextGen-hash and nextGenhash-bf is feature encoding strategy: for nextGen-hash, each feature is mapped to a single bit in a 16KB fingerprint (feature hashing approach); while for nextGenhash-bf, each feature is mapped to 5 bits in a 16KB fingerprint (Bloom filter approach). By comparing their clustering performances on the same malware dataset, we could check the effects introduced by different feature encoding strategy. As shown in <ref type="figure" target="#fig_4">Figure 4</ref>, nextGenhash provided better results than nextGen-hash-bf, and their precision and recall intersection were 0.919, 0.894. It verifies the third insights described in Section 4. This observation has already been discussed and analyzed in <ref type="bibr" target="#b16">[17]</ref>. </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="8.4">Effects of different fingerprint format</head><p>Algorithms: nextGen-hash, nextGen-hash-multiblock To check the effects of different fingerprint format, we compared the clustering performances of nextGen-hash and nextGen-hash-multiblock. They are both using the same 5-gram features and the same feature encoding strategy, but with different fingerprint formats. The fingerprint of nextGen-hash is one big block (16KB bit vector), while the fingerprint of nextGen-hash-multiblock is the concatenation of multiple small size blocks (2048 bit each). We use the new block based distance computation algorithm to compare the similarity of nextGenhash-multiblock fingerprints. As illustrated in <ref type="figure" target="#fig_5">Figure 5</ref>, the intersection of precision and recall for nextGenhash (0.919) was higher than nextGen-hash-multiblock (0.907). One potential explanation for the results is that the fingerprint of nextGen-hash-multiblock is usually more compact and smaller in size compared with the fingerprint generated by nextGen-hash, thus for nextGenhash-multiblock, features will have more chances to encounter collisions since they are mapped to smaller space.  <ref type="bibr" target="#b7">[8]</ref> proposed a framework to test the efficiency, sensitivity, and robustness of similarity hashing. Furthermore, Breitinger et al. <ref type="bibr" target="#b6">[7]</ref> introduced an automated evaluation of fuzzy hash tools by using longest common substrings as ground truth results. Static-based malware similarity analysis: Jacob et al. <ref type="bibr" target="#b15">[16]</ref> proposed a static, packer-agnostic filter to detect similar malware samples. Researchers also explored static features for malware clustering. Based on static code reuse analysis, Jang et al. <ref type="bibr" target="#b16">[17]</ref> built the BitShred system to extract direct n-gram features from the code section sequence of the malware samples, then applied the feature hashing &amp; winnowing techniques to dramatically reduce feature spaces into fixed length bit-vector, and applied bit-wise Jaccard distance to compute pairwise distance. Hu et al. <ref type="bibr" target="#b14">[15]</ref> designed and implemented a system, called MutantX-S, that can extract n-gram features from sequences of opcodes to represent the original binary program. It is noteworthy to mention that MutantX-S included a generic malware unpacking algorithm to handle usually obfuscated samples which made their system more applicable to practical usage. Applying fuzzy hashing algorithms for malware clustering is more close to static-based clustering analysis, and malware packing is also considered as an orthogonal problem. Our research is different from previous work in that: we are focused on the effectiveness of fuzzy hashing algorithms in malware clustering analysis. To the best of our knowledge, our work is the first work that systematically evaluates the effectiveness and limitations of existing fuzzy hashing algorithms in malware clustering.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="10">Conclusion</head><p>In this research, we conduct a comprehensive evaluation of existing fuzzy hashing algorithms with the goal of studying their applicability in malware similarity analysis. Apart from problems that have been raised before, we find a asymmetric distance computation design flaw within several existing block-based fuzzy hashing algorithms, which make them unsuitable for practical use. We designed a new distance computation algorithm to address the asymmmetricity problem in block based fuzzy hashing algorithms. We also developed key insights based on literature study of existing malware similarity analysis algorithms and use them to develop a new fuzzy hashing algorithm. We designed and developed a modularized framework for evaluating different fuzzy hashing algorithms. Evaluation of our algorithm was performed on a public malware dataset using the framework. The results indicate that fuzzy hashing algorithms can indeed be used in malware similarity analysis provided they are designed based on our insights.</p></div><figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_0"><head></head><label></label><figDesc>end end /* Greedily find m smallest candidates from distance array D, require that each row and each column only has one value selected. */ for k ← 1 to m do Let D[x][y] be the current smallest value in D; S[k] = D[x][y]; Remove row x and colum y from D end Temporary distance d = sum(S)/m; /* Adjust distance score with input lengths information */ Final distance d = (d * m + (n − m))/n Algorithm 1: New block based distance computation algorithm</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_1"><head>Figure 1 :</head><label>1</label><figDesc>Figure 1: Fuzzy Hash Evaluation Overview</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_2"><head>Figure 2 :</head><label>2</label><figDesc>Figure 2: Effects of considering underlying data structure</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_3"><head>Figure 3 :</head><label>3</label><figDesc>Figure 3: Effects of higher level semantic features entries" is significantly smaller than the total number of n-gram sequences for a single malware sample. This experiment shows "import table entries" features are more representative and efficient compared with low level ngram features when comparing overall similarity.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_4"><head>Figure 4 :</head><label>4</label><figDesc>Figure 4: Effects of different feature encoding strategy</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_5"><head>Figure 5 :</head><label>5</label><figDesc>Figure 5: Effects of different fingerprint format</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_0" validated="false"><head>.</head><label></label><figDesc></figDesc><table>Family 
Count 
Family 
Count 
Viking 
32 
Vilsel 
185 
Fesber 
57 
Jeefo 
36 
Neshta 
39 
Turkojan 
22 
Skintrim 
41 
Bettersurf 
300 
Ramnit 
38 
Koutodoor 
30 
Zenosearch 
99 
Zbot 
22 
Hupigon 
28 
Fosniw 
22 
Domaiq 
147 
Wabot 
27 
Xpaj 
22 

Table 1: Malware Family Statistics 

</table></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_1" validated="true"><head>Table 2 also</head><label>2</label><figDesc>shows that our newly designed algorithm can generate better results if using code section sequence as input.</figDesc><table>Algorithm 
Whole sample Code section 
ssdeep 
0.797 
0.872 
sdHash 
0.807 
0.877 
mvHash-B 
0.792 
0.893 
nextGen-hash 
0.791 
0.919 

</table></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_2" validated="false"><head>Table 2 : Fuzzy Hash Clustering Performance</head><label>2</label><figDesc></figDesc><table></table></figure>
		</body>
		<back>

			<div type="acknowledgement">
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="11">Acknowledgement</head><p>We would like to thank Marc Eisenbarth and Arbor Networks for providing the initial malware samples that started this research. This material is based upon work supported by U.S. National Science Foundation under award no. 0954138 and 1314925, and by the Air Force Office of Scientific Research award FA9550-12-1-0106. Any opinions, findings and conclusions or recommendations expressed in this material are those of the authors and do not necessarily reflect the views of the above agencies.</p></div>
			</div>

			<div type="references">

				<listBibl>

<biblStruct xml:id="b0">
	<monogr>
				<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Shadowserver -Fuzzy</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Clarity</surname></persName>
		</author>
		<ptr target="http://tinyurl.com/ol9ld8u" />
		<title level="m">Using Fuzzy Hashing Techniques to Identify Malicious Code</title>
		<imprint>
			<date type="published" when="2007" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b1">
	<monogr>
		<title/>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Virustotal</surname></persName>
		</author>
		<ptr target="https://www.virustotal.com" />
		<imprint>
			<date type="published" when="2014" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b2">
	<monogr>
				<ptr target="https://tinyurl.com/kd4twln" />
		<title level="m">ModSecurity Advanced Topic of the Week: Detecting Malware with Fuzzy Hashing</title>
		<imprint>
			<date type="published" when="2015" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b3">
	<monogr>
		<title level="m" type="main">ModSecurity: Open Source Web Application Firewall</title>
		<ptr target="https://www.modsecurity.org/" />
		<imprint>
			<date type="published" when="2015" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b4">
	<analytic>
		<title level="a" type="main">mvHash-B -A New Approach for Similarity Preserving Hashing</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">F</forename><surname>Breitinger</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">K</forename><forename type="middle">P</forename><surname>Astebol</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">H</forename><surname>Baier</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><surname>Busch</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">IEEE IMF</title>
		<imprint>
			<date type="published" when="2013" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b5">
	<analytic>
		<title level="a" type="main">A fuzzy hashing approach based on random sequences and hamming distance</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">F</forename><surname>Breitinger</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">H</forename><surname>Baier</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the Conf. on Digital Forensics, Security and Law</title>
		<meeting>the Conf. on Digital Forensics, Security and Law</meeting>
		<imprint>
			<date type="published" when="2012" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b6">
	<analytic>
		<title level="a" type="main">Automated Evaluation of Approximate Matching Algorithms on Real Data</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">F</forename><surname>Breitinger</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">V</forename><surname>Roussev</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Digital Investigation Journal</title>
		<imprint>
			<date type="published" when="2014" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b7">
	<analytic>
		<title level="a" type="main">FRASH: A Framework to Test Algorithms of Similarity Hashing</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">F</forename><surname>Breitinger</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">G</forename><surname>Stivaktakis</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">H</forename><surname>Baier</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Digital Investigation Journal</title>
		<imprint>
			<date type="published" when="2013" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b8">
	<analytic>
		<title level="a" type="main">An Efficient Piecewise Hashing Method for Computer Forensics</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">L</forename><surname>Chen</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">G</forename><surname>Wang</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">IEEE WKDD</title>
		<imprint>
			<date type="published" when="2008" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b9">
	<monogr>
		<title/>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Cisco</surname></persName>
		</author>
		<ptr target="http://tinyurl.com/kzzs95a" />
		<imprint>
			<date type="published" when="2014" />
		</imprint>
	</monogr>
<note type="report_type">Annual Security Report</note>
</biblStruct>

<biblStruct xml:id="b10">
	<analytic>
		<title level="a" type="main">fastcluster: Fast hierarchical, agglomerative clustering routines for r and python</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Daniel</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">J. Stat. Softw</title>
		<imprint>
			<date type="published" when="2013" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b11">
	<monogr>
				<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>French</surname></persName>
		</author>
		<ptr target="http://tinyurl.com/6q97d6y" />
		<title level="m">Fuzzy Hashing Against Different Types of Malware</title>
		<imprint>
			<date type="published" when="2011" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b12">
	<analytic>
		<title level="a" type="main">The WEKA Data Mining Software: An Update</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Hall</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">E</forename><surname>Frank</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">G</forename><surname>Holmes</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">B</forename><surname>Pfahringer</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><surname>Reutemann</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">I</forename><forename type="middle">H</forename><surname>Witten</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">ACM SIGKDD Explorations Newsletter</title>
		<imprint>
			<date type="published" when="2009" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b13">
	<monogr>
		<title level="m" type="main">Dcfldd -Defense Computer Forensics Lab</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">N</forename><surname>Harbour</surname></persName>
		</author>
		<ptr target="http://dcfldd.sourceforge.net/" />
		<imprint>
			<date type="published" when="2002" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b14">
	<analytic>
		<title level="a" type="main">MutantX-S: Scalable Malware Clustering Based on Static Features</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">X</forename><surname>Hu</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">K</forename><forename type="middle">G</forename><surname>Shin</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Bhatkar</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">K</forename><surname>Griffin</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">USENIX ATC</title>
		<imprint>
			<date type="published" when="2013" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b15">
	<analytic>
		<title level="a" type="main">A Static, Packer-agnostic Filter to Detect Similar Malware Samples</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">G</forename><surname>Jacob</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><forename type="middle">M</forename><surname>Comparetti</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Neugschwandtner</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><surname>Kruegel</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">G</forename><surname>Vigna</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Detection of Intrusions and Malware, and Vulnerability Assessment</title>
		<imprint>
			<publisher>Springer</publisher>
			<date type="published" when="2013" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b16">
	<analytic>
		<title level="a" type="main">Bitshred: Feature Hashing Malware for Scalable Triage and Semantic Analysis</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Jang</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Brumley</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Venkataraman</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">ACM CCS</title>
		<imprint>
			<date type="published" when="2011" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b17">
	<analytic>
		<title level="a" type="main">Identifying Almost Identical Files Using Context Triggered Piecewise Hashing</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Kornblum</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Digital Investigation Journal</title>
		<imprint>
			<date type="published" when="2006" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b18">
	<analytic>
		<title level="a" type="main">Classification of Packed Executables for Accurate Computer Virus Detection</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Perdisci</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Lanzi</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">W</forename><surname>Lee</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Pattern Recognition Letters</title>
		<imprint>
			<publisher>Elsevier</publisher>
			<date type="published" when="2008" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b19">
	<monogr>
		<title/>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><forename type="middle">M</forename><surname>Roberts</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Virusshare</surname></persName>
		</author>
		<ptr target="http://virusshare.com/" />
		<imprint>
			<date type="published" when="2014" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b20">
	<analytic>
		<title level="a" type="main">Data Fingerprinting with Similarity Digests</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">V</forename><surname>Roussev</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Advances in Digital Forensics VI</title>
		<imprint>
			<publisher>Springer</publisher>
			<date type="published" when="2010" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b21">
	<monogr>
		<title level="m" type="main">An Evaluation of Forensic Similarity Hashes. Elsevier</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">V</forename><surname>Roussev</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2011" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b22">
	<monogr>
		<title level="m" type="main">Simhash: Hash-based Similarity Detection</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><surname>Sadowski</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">G</forename><surname>Levin</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2007" />
			<pubPlace>Google</pubPlace>
		</imprint>
	</monogr>
<note type="report_type">Technical report</note>
</biblStruct>

<biblStruct xml:id="b23">
	<analytic>
		<title level="a" type="main">Detecting Similar Files Based on Hash and Statistical Analysis for Digital Forensic Investigation</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">K</forename><surname>Seo</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">K</forename><forename type="middle">S</forename><surname>Lim</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Choi</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">K</forename><surname>Chang</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Lee</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">IEEE CSA</title>
		<imprint>
			<date type="published" when="2009" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b24">
	<monogr>
		<title/>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Qwerton</forename><surname>Snaker</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Jibz</forename><surname>Pe</surname></persName>
		</author>
		<ptr target="https://tuts4you.com/download.php?view.398" />
		<imprint>
			<date type="published" when="2008" />
		</imprint>
	</monogr>
	<note>PEiD</note>
</biblStruct>

<biblStruct xml:id="b25">
	<monogr>
		<title/>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Tridgell</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Spamsum</surname></persName>
		</author>
		<ptr target="http://tinyurl.com/qf89mgu" />
		<imprint>
			<date type="published" when="2002" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b26">
	<analytic>
		<title level="a" type="main">Reconciling Malware Labeling Discrepancy Via Consensus Learning</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><surname>Wang</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">X</forename><surname>Hu</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Meng</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Sailer</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">IEEE ICDEW</title>
		<imprint>
			<date type="published" when="2014" />
		</imprint>
	</monogr>
</biblStruct>

				</listBibl>
			</div>
		</back>
	</text>
</TEI>
