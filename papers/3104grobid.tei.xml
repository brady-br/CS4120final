<?xml version="1.0" encoding="UTF-8"?>
<TEI xmlns="http://www.tei-c.org/ns/1.0" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
xsi:schemaLocation="http://www.tei-c.org/ns/1.0 /Users/atharsefid/Desktop/grobid-0.5.3/grobid-home/schemas/xsd/Grobid.xsd"
 xmlns:xlink="http://www.w3.org/1999/xlink">
	<teiHeader xml:lang="en">
		<encodingDesc>
			<appInfo>
				<application version="0.5.3" ident="GROBID" when="2020-09-29T03:00+0000">
					<ref target="https://github.com/kermitt2/grobid">GROBID - A machine learning software for extracting information from scholarly documents</ref>
				</application>
			</appInfo>
		</encodingDesc>
		<fileDesc>
			<titleStmt>
				<title level="a" type="main">NVMOVE: Helping Programmers Move to Byte-Based Persistence</title>
			</titleStmt>
			<publicationStmt>
				<publisher/>
				<availability status="unknown"><licence/></availability>
			</publicationStmt>
			<sourceDesc>
				<biblStruct>
					<analytic>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Himanshu</forename><surname>Chauhan</surname></persName>
							<affiliation key="aff0">
								<orgName type="department">Pratap Subrahmanyam VMware</orgName>
								<orgName type="laboratory" key="lab1">VMware Research Group</orgName>
								<orgName type="laboratory" key="lab2">UT Austin Eric Schkufza VMware Research Group</orgName>
								<address>
									<settlement>Austin</settlement>
								</address>
							</affiliation>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Irina</forename><surname>Calciu</surname></persName>
							<affiliation key="aff0">
								<orgName type="department">Pratap Subrahmanyam VMware</orgName>
								<orgName type="laboratory" key="lab1">VMware Research Group</orgName>
								<orgName type="laboratory" key="lab2">UT Austin Eric Schkufza VMware Research Group</orgName>
								<address>
									<settlement>Austin</settlement>
								</address>
							</affiliation>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Vijay</forename><surname>Chidambaram</surname></persName>
							<affiliation key="aff0">
								<orgName type="department">Pratap Subrahmanyam VMware</orgName>
								<orgName type="laboratory" key="lab1">VMware Research Group</orgName>
								<orgName type="laboratory" key="lab2">UT Austin Eric Schkufza VMware Research Group</orgName>
								<address>
									<settlement>Austin</settlement>
								</address>
							</affiliation>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Onur</forename><surname>Mutlu</surname></persName>
							<affiliation key="aff0">
								<orgName type="department">Pratap Subrahmanyam VMware</orgName>
								<orgName type="laboratory" key="lab1">VMware Research Group</orgName>
								<orgName type="laboratory" key="lab2">UT Austin Eric Schkufza VMware Research Group</orgName>
								<address>
									<settlement>Austin</settlement>
								</address>
							</affiliation>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Eth</forename><surname>Zürich</surname></persName>
							<affiliation key="aff0">
								<orgName type="department">Pratap Subrahmanyam VMware</orgName>
								<orgName type="laboratory" key="lab1">VMware Research Group</orgName>
								<orgName type="laboratory" key="lab2">UT Austin Eric Schkufza VMware Research Group</orgName>
								<address>
									<settlement>Austin</settlement>
								</address>
							</affiliation>
						</author>
						<title level="a" type="main">NVMOVE: Helping Programmers Move to Byte-Based Persistence</title>
					</analytic>
					<monogr>
						<imprint>
							<date/>
						</imprint>
					</monogr>
				</biblStruct>
			</sourceDesc>
		</fileDesc>
		<profileDesc>
			<abstract>
				<p>Programmers can utilize the upcoming non-volatile memory (NVM) technology in various ways. One appealing way is to directly store critical application data structures in NVM instead of serializing them to block-storage. Changing legacy code to achieve this, however, is laborious and prone to bugs. We present NVMOVE, a tool that simplifies this transition by analyzing the source code and automatically identifying persistent types, types that are serialized and persisted. Aided by this tool, programmers can modify their applications to allocate such persistent types on the non-volatile memory heap. Upon analyzing Redis, a key-value store with 122 struct types, NVMOVE identifies 25 types as persistent , with no false negatives and 11 false positives. We evaluate the benefits of NVMOVE by moving the identified persistent types in Redis onto a non-volatile memory heap. Redis modified in this manner offers full persistence of data, and performs within 78% of Redis with no persistence, achieving more than 2× the performance of Redis that performs logging on SSDs.</p>
			</abstract>
		</profileDesc>
	</teiHeader>
	<text xml:lang="en">
		<body>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="1">Introduction</head><p>Non-Volatile Memory (NVM) provides byte-addressable and low-latency access, enabled by technologies such as Phase Change Memory <ref type="bibr" target="#b11">[12,</ref><ref type="bibr" target="#b13">14,</ref><ref type="bibr" target="#b14">15,</ref><ref type="bibr" target="#b15">16,</ref><ref type="bibr" target="#b29">31]</ref>, Memristors <ref type="bibr" target="#b26">[27]</ref> and Spin-Transfer-Torque MRAM <ref type="bibr" target="#b10">[11]</ref>. NVM promises to provide fast, cheap, non-volatile storage at near-DRAM latencies, blurring the line between memory and storage <ref type="bibr" target="#b19">[20]</ref>. Moreover, NVM is expected to be available commercially soon, raising the question on how to best leverage this technology. Programmers have the choice to use NVM as a drop-in replacement for traditional storage. Currently, applications persist data using a block-based interface to storage. They first serialize the in-memory data and then write the serialized form to storage; we term this Block-based Persistence (BLP). BLP suffers from three problems: (a) the performance overhead of serialization, (b) the additional complexity (and resulting bugs) from maintaining both inmemory and in-storage data formats <ref type="bibr" target="#b23">[24,</ref><ref type="bibr" target="#b24">25]</ref>, and (c) the performance overhead of system calls that invoke * Work performed as an intern at VMware Research Group. the kernel <ref type="bibr" target="#b1">[2,</ref><ref type="bibr" target="#b19">20]</ref>. Alternatively, a new programming model for persistence can access NVM via loads and stores <ref type="bibr" target="#b19">[20,</ref><ref type="bibr" target="#b27">29,</ref><ref type="bibr" target="#b28">30]</ref>. Thus, in-memory data structures can be persisted in-place without the need for serialization, assuming some mechanism exists for consistent updates <ref type="bibr" target="#b28">[30]</ref>. We term this Byte-based Persistence (BYP) ( § 2).</p><p>Researchers have tackled the problem of writing new applications for NVM using the BYP model <ref type="bibr" target="#b28">[30]</ref>. However, few projects address the conversion of existing applications from the BLP model to the BYP model. To convert a BLP program 1 programmers first need to identify the data structures that are serialized and persisted. Next, they need to allocate such structures on the nonvolatile heap, and make sure the structures are updated in a crash-consistent manner. Performing this conversion manually is laborious and prone to bugs, and may take a long time. For example, the open-source project porting the key-value store Redis to NVM has been active for over a year, and it still only supports strings for keys <ref type="bibr" target="#b0">[1]</ref>.</p><p>As a first step towards tackling this problem, we present NVMOVE, a tool that uses static analysis techniques to automatically analyze the source code of a BLP application, and identify the user-defined types that are persisted to storage. The key observation behind NVMOVE is that any persistent data structure needs to be instantiated and initialized from persistent storage when the application starts or when it recovers from a crash. We make the following contributions:</p><p>• We describe our experience in designing and implementing NVMOVE, and discuss the trade-offs between different design approaches ( § 3).</p><p>• We evaluate NVMOVE on Redis <ref type="bibr" target="#b18">[19,</ref><ref type="bibr" target="#b31">33]</ref>. When compared against a manual port of Redis to NVM, NVMOVE correctly identifies all persistent types, with no false negatives ( § 4.1).</p><p>• Using the analysis results from NVMOVE, we emulate transforming Redis into a BYP program with full durability (no data loss on crash), and show that this program outperforms Redis with synchronous logging by up to 2.2× ( § 4.2).</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2">Block-based and Byte-based Persistence</head><p>Traditionally, programmers use the BLP model to persist data in two steps: 1) serializing in-memory data, 2) using systems calls such as write to persist the serialized form of data. Consider the code example in <ref type="figure" target="#fig_0">Figure 1c</ref>.</p><p>It shows a sample program in the BLP model that updates and persists a simple structure: record. Note how only line 2 actually updates the record; lines 4-9 serialize the record into a temporary buffer buf, and persist it using system calls. <ref type="figure" target="#fig_0">Figure 1c</ref> omits the code required to recover to a consistent state in the event of a crash. The block-based persistence model is a poor fit for NVM for two reasons. First, the block-based interface is optimized to hide the high latencies of block-storage devices, and has inherent software overheads that can cause large performance issues with NVM <ref type="bibr" target="#b1">[2,</ref><ref type="bibr" target="#b19">20]</ref>. The performance overhead of providing persistence via the block interface causes programmers to trade-off safety for performance by reducing persistence frequency. This strategy is not only vulnerable to possible loss of valuable data, but also causes problems in program recovery 2 . Second, using the block interface forces serialization of in-memory data into a different format. Maintaining two versions of the same data structure leads to additional complexity and bugs <ref type="bibr" target="#b23">[24,</ref><ref type="bibr" target="#b24">25]</ref>. Both of these problems can be avoided by persisting to NVM using the BYP model.</p><p>The code example of <ref type="figure" target="#fig_0">Figure 1d</ref> shows a BYP program that provides similar functionality as the BLP program in <ref type="figure" target="#fig_0">Figure 1c</ref>. The BYP program persists the updated state of record directly in NVM. For this program, the tag @persistent in struct declaration (at line 1 in <ref type="figure" target="#fig_0">Figure 1b</ref>) is needed to indicate that each instance of struct record should be allocated on the non-volatile heap. For any instance of record, updating and persisting its state is as simple as directly updating the instance's field in line 2, and flushing the cache (not shown). Note that a separate mechanism, e.g., transactions, is still needed to guarantee crash consistency <ref type="bibr" target="#b25">[26,</ref><ref type="bibr" target="#b28">30]</ref>.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3">NVMOVE</head><p>NVMOVE analyzes a given application, and identifies user-defined types -structs for C programs -that represent semantically persistent state. The types that represent the persistent state may be different from the types that are syntactically persisted. For example, in <ref type="figure" target="#fig_0">Fig- ure 1c</ref>, we would like to identify record as the persistent type, and not char* (the type of buf). NVMOVE achieves this goal via static analysis of the source code.</p><p>Analyzing Recovery Code. We observe that an application that persists state must restore it during initialization or recovery after a crash. This leads to the main insight of NVMOVE: any user-defined type that is created or updated in the recovery/initialization phase must be persisted. NVMOVE requires the programmer to provide the name(s) of the top-level source function(s) that initializes the in-memory application state by reading the previously persisted state. 3 Such functions are called load functions. This implies that the programmer needs some knowledge of the application, but this knowledge is minimal. Without NVMOVE, the programmer still needs to identify the load functions when manually porting the code to NVM. A programmer could manually follow this approach to identify semantically persistent types, but the effort is prone to errors and takes significant time. For example, our optimized implementation of NVMOVE visits 62 functions in Redis, and parses thousands of lines of code.</p><p>We restrict our focus to applications that implement the recovery/initialization mechanism in static code and currently do not support applications that initialize their state using function pointers that are dynamically followed.</p><p>NVMOVE starts the static analysis with an empty set T s used to store the types that are candidates for persistence, and a FIFO queue F q that stores the function names to visit. At startup, it prompts the programmer to provide the name(s) of the load function, and inserts it in F q . It then performs the following steps in a loop until F q is empty: it scans the source, and finds the definition of the function f at the head of the queue F q . It then collects all the variables in f that are assigned or modified through assignment operators, or library calls such as memcpy/memmove. For each such variable, it inspects its type t and adds it to T s if and only if t is defined in the application source. If t was already present in the set T s , then it does not need to be added again. NVMOVE then removes f from F q , and goes to the beginning of the loop. This analysis is guaranteed to terminate as the application source is finite. Upon termination, T s contains all the types defined in the application program that NVMOVE identifies as candidates for persistence.</p><p>Note that marking all the types that are created/modified during initialization is likely to overestimate the persistent variables and may lead to sub-optimal performance. We want to focus on correctness, and hence compromise on performance. We optimize this approach by: (a) not parsing through application source functions that either accept no arguments, or accept only nonpointer built-in types, (b) using our knowledge of libc API and treating strcpy/memcpy/memmove and similar functions as assignment operations, (c) not visiting bodies of functions defined in libc API (fopen/fclose for example) whose results and side-effects are known to us, (d) analyzing each function body only once.</p><p>Back-tracking from Writes. An alternative approach is to statically identify all the system calls that write to the block-device <ref type="bibr" target="#b3">4</ref> and follow the data flow backwards to the persistent data structures. The steps of this method are as follows. First, system calls can be easily found by parsing the code. Next, the intermediate buffers used to serialize the data can be retrieved from the arguments of the system calls. <ref type="bibr" target="#b4">5</ref> Using the knowledge of library functions, such as sprintf (and its variants), we can then back-track through the source-code -recursively visiting caller function definitions -to identify the structures that were serialized into such buffers. This approach identifies struct record as persistent in <ref type="figure" target="#fig_0">Figure 1c</ref>. However, programmers use write calls not only for serializing data to block-devices, but also for logging debug and error messages, writing to pipes, and network sock-4 e.g., write, fwrite, pwrite. 5 In <ref type="figure" target="#fig_0">Figure 1c</ref>, buf would be identified as the argument that was persisted.</p><p>ets. Therefore, this solution produces a large number of false positives for real applications.</p><p>NVMOVE is implemented using Clang <ref type="bibr" target="#b12">[13]</ref> and it currently works on C programs. However, Clang supports many C-like languages, and thus our approach could be extended to programs in other languages.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4">Evaluation</head><p>We evaluate NVMOVE on the source code of Redis <ref type="bibr" target="#b18">[19,</ref><ref type="bibr" target="#b31">33]</ref> (version 3.2.0, 64-bit), a widely-used fast data-structure store that persists its data to block storage. The Redis codebase currently has ≈ 50K lines of code.</p><p>We seek to answer the following questions: • How effective is NVMOVE in identifying user-defined types that should be persistent? • How is Redis performance affected if all the types identified by NVMOVE are persisted in NVM?</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.1">Type Identification</head><p>Running NVMOVE on Redis source code takes five minutes on average, which suggests that NVMOVE can easily handle large code bases. Apart from pointing out the load function (rdbLoad), we did not provide NVMOVE with any other information about the code base.</p><p>To see how effective NVMOVE is at identifying persistent types, we compare the results of NVMOVE with a manual port of Redis performed by an independent industrial team of developers. They provided us with a list of structs that they treat as persistent in their ported NVM-compatible version of Redis. <ref type="table">Table 1</ref>  Without any in-built knowledge of Redis source code, NVMOVE identifies all persistent types, and produces no false negatives. Among the 11 false positives, four are iterators over persistent types, another four are variants of the same type with different data alignments. We believe that results produced by NVMOVE can be of significant value to programmers, as they would be able to prune out these false positives upon closer examination.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.2">Emulated Performance</head><p>We evaluate the performance impact of transforming Redis to a BYP program, by emulating non-volatile memory latencies when accessing persistent variables identified by NVMOVE. The transformed program offers full persistence 6 , but does not have any mechanism for crash consistency. For full persistence, every NVM write must be followed by a cache line flush (clwb instruction) as well as a PCOMMIT instruction, as described in Intel's recent ISA extensions <ref type="bibr" target="#b9">[10]</ref>.</p><p>We consider two primary NVM technologies: (1) Phase-Change Memory (PCM) representing slower NVM with a read/write latency of 300ns; and (2) SpinTransfer-Torque MRAM (STT-RAM) representing fast NVM with read/write latency of 100 ns. We set the PCOMMIT latency to 500 ns for PCM and 200 ns for STT-RAM. The latency of clwb is kept constant at 40 ns. These latencies are per cache-line, and based on recent literature <ref type="bibr" target="#b30">[32]</ref>.</p><p>We simulate these delays by injecting configurable delay functions in Redis source code after each read/write operation of candidate variables. This is done by an automated source-to-source transformation using Clang. Overall, roughly around 4000 delay calls are injected in the source. Our emulation indicates the worst-case performance. We expect that performance would be better using real hardware for the following reasons. First, many reads can be served from the cache, but our emulation assumes that all PCM reads are served from main memory. Second, writes to the same cache line often need to incur only the cost of a single cache line flush, whereas in our evaluation every write incurs a cache line flush. Third, multiple cache lines written together often only need to incur the cost of a single PCOMMIT. Finally, the latencies of non-volatile memory reads and writes can be overlapped better by a memory controller that performs intelligent scheduling <ref type="bibr" target="#b16">[17,</ref><ref type="bibr" target="#b21">22,</ref><ref type="bibr" target="#b32">34]</ref>, which we do not model. Our emulation is conservative in these regards and provides an estimated performance that errs towards the worst-case.</p><p>We consider two scenarios for performance comparison as Redis provides two modes of persistence: Redis Database (RDB): RDB files are point-in-time snapshots of data at specified intervals. Redis forks a background process to perform serialization of data to storage. Redis does not allow sub-second intervals for this mode and thus can lose one second worth of data. Append Only File (AOF): Redis appends every write command received by the server to the end of a log. The log is played at startup to reconstruct the original data. <ref type="bibr" target="#b5">6</ref> On a crash, only the last write in progress could be lost.</p><p>We first obtain practical upper bounds on performance by running Redis with both of these modes disabled (InMemory Redis). We then run Redis in a RDB-only mode that takes a snapshot every second. Next, we disable RDB and run it with AOF that logs every write command and flushes it immediately to block storage (by calling fsync). Finally, we disable both RDB and AOF and run Redis under the two NVM emulation settings listed above. We report the throughput results on a machine with 56 Intel Xeon (2.2GHz) cores, and 500 GB DRAM. In the interest of space, we show baseline results with only SSD block-storage (throughput of AOF with a hard-disk is around one-third of that with SSDs). For each experiment, we report mean values of five runs. Results on YCSB. <ref type="figure" target="#fig_1">Figure 2</ref> compares the throughput of Redis when run under the above configurations on the Yahoo Cloud Serving Benchmark (YCSB) <ref type="bibr" target="#b5">[6]</ref>. The three workloads tested are: read-heavy (90% reads, 10% updates), balanced (50% reads, 50% updates), and writeheavy (10% reads, 90% updates). Each run first inserts one million records (of 1 KB each) in an empty database before starting throughput computations. The speedup in the plot is the ratio of throughput for each setting divided by the throughput of our baseline, which uses the AOF mode on SSD, for the same workload. The actual values (in operations/second) of baseline SSD throughputs are: 27946 for read-heavy, 17612 for balanced, and 6605 for write-heavy workload. As expected, Redis without persistence gives the highest throughput. RDB mode performance is close to optimal since checkpointing is triggered once every second at the most. However, RDB mode could lose at least 46 MB (read-heavy), 47 MB (balanced), and 27 MB (write-heavy) of data due to its coarse-granularity approach to persistence. Also, for many runs, the background process saving the snapshot takes more than ten seconds to save the final snapshot after the client disconnects. Hence, in case of a crash/power-outage the size of lost data can be much larger. Persisting types identified by NVMOVE yields better performance than baseline, while providing strong durability guarantees: a crash may leave only the latest write incomplete in persistent memory. Even under the unfavorable delays we test that approximate the worst case, our NVM-emulated persistent Redis with slow PCM has higher throughput than the baseline, and has up to 2× higher throughput with faster STT-RAM.</p><p>Results on Redis-benchmark. We also ran the Redisbenchmark, which ships with the Redis source-code. There are 17 workloads, many of which are readheavy/read-only. On several write-heavy workloads (such as MSET,LPUSH,RPUSH), our NVM-emulated persistent Redis is faster by as much as 45% than the baseline (AOF on SSD). On read-only workloads, such as GET, our Redis is slower by 2-3%, mainly because NVMOVE falsely detects iterators as persistent types, which leads to a minor degradation in read performance.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5">Limitations and Future Work</head><p>NVMOVE may over-approximate results because it identifies types, not specific variables. Even if only one variable among many instances needs to be persisted, the entire type is marked as persistent. Another problem is that many types contain volatile state in addition to nonvolatile state. For example, many applications keep reference counts of objects for memory management. If an object's reference count is initialized during the load of its persisted state, then our analysis will flag the count variable as a persistent pointer. Despite these limitations, we believe that our tool can be of significant value to programmers in porting a large codebase to byte-based persistence. Future Work. We plan to explore other approaches to identifying persistent types to decrease the number of false positives. We are also working on precise identification of persistent variables, not just types. In order to do so, we plan to combine our static analysis approach with dynamic/taint analysis. This would allow us to follow the progression of the persistent variables through the execution of the program. Converting a BLP program into a BYP program involves many changes, such as removing serialization code and replacing allocation calls for types identified as persistent. We also would like to update persistent structures in a consistent manner, using techniques such as write-ahead logging <ref type="bibr" target="#b7">[8]</ref> and transactions <ref type="bibr" target="#b6">[7]</ref>.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="6">Related Work</head><p>The vision behind NVMOVE is to allow legacy applications to use persistent memory without significant programmer effort.</p><p>NVMOVE currently only identifies persistent data structures. Updating such structures in a consistent manner without significant programmer involvement is a difficult problem. We aim to address this problem in future work. Atlas <ref type="bibr" target="#b2">[3]</ref> atomically persists all updates between lock() and unlock() in multi-threaded programs. Atlas targets legacy applications that do not durably store state, and transparently provides atomic persistence for such programs. In contrast, NVMOVE targets legacy applications that already have protocols to durably store state to a block-device. NVMOVE is suitable for both single-threaded and multi-threaded applications, and is not limited to applications that use a locking discipline (e.g., those employing lock-free data structures <ref type="bibr" target="#b8">[9]</ref>).</p><p>ThyNVM <ref type="bibr" target="#b25">[26]</ref> transparently checkpoints state of legacy applications onto persistent memory. ThyNVM requires special hardware support.</p><p>In contrast, NVMOVE does not require new hardware support, and persisting the data structures identified by NVMOVE can be done using a number of other approaches (e.g., <ref type="bibr" target="#b3">[4,</ref><ref type="bibr" target="#b28">30]</ref>) that also do not require specialized hardware.</p><p>Existing work that builds new systems and APIs on top of persistent memory <ref type="bibr" target="#b3">[4,</ref><ref type="bibr" target="#b4">5,</ref><ref type="bibr" target="#b17">18,</ref><ref type="bibr" target="#b20">21,</ref><ref type="bibr" target="#b22">23,</ref><ref type="bibr" target="#b27">29,</ref><ref type="bibr" target="#b28">30]</ref> is complementary to NVMOVE: once NVMOVE identifies the data structures to be made persistent, existing work can be leveraged to persist them in a crash-consistent manner. All of these systems require significant programmer effort in rewriting the applications using a new API. A future version of NVMOVE could help alleviate this task.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="7">Conclusion</head><p>The emergence of a new technology leads to a flurry of activity to create new applications that exploit its benefits. It is equally important to consider how existing applications and use-cases can benefit from the new technology as seamlessly as possible. Many research/opensource projects enable new applications for NVM, but there is little work to port current applications to NVM. Given the large number of applications written for block storage, easing this transition is vitally important. We believe NVMOVE is the first step towards easing the transition of programs from block storage to byte-addressable non-volatile memory. Our preliminary results show promise, and can already be of significant value to programmers. Continued research and development in this direction will lead to improved solutions that can further reduce the programming effort in adopting NVM.</p></div><figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_0"><head>Figure 1 :</head><label>1</label><figDesc>Figure 1: Comparison of the BLP and BYP models of programming for saving updated state.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_1"><head>Figure 2 :</head><label>2</label><figDesc>Figure 2: Throughput comparison on YCSB benchmark.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_0" validated="false"><head></head><label></label><figDesc>summarizes the comparison of these manually identified types with the results of NVMOVE.</figDesc><table>Total types (structs) in Redis source 
122 
NVMOVE identified persistent types 
25 
True positives (manually identified) 
14 
False positives 
11 
False negatives 
0 

Table 1: Comparing manually identified persistent types 
to the results of NVMOVE. 

</table></figure>

			<note place="foot" n="1"> We use the term BLP/BYP program for programs written under the BLP/BYP model.</note>

			<note place="foot" n="2"> Just recently, Delta Airlines experienced a major service disruption due to a malfunction that lasted only an hour, but the total recovery took more than 13 hours and affected more than 45% of their flights [28]. (c) Updating and persisting data in BLP (d) Updating and persisting data in BYP</note>

			<note place="foot" n="3"> For example, the database state in Redis is loaded by the function rdbLoad in source file rdb.c. Using the Redis documentation, one can easily find this function.</note>
		</body>
		<back>
			<div type="references">

				<listBibl>

<biblStruct xml:id="b0">
	<monogr>
		<title/>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Pmem</forename><surname>Redis</surname></persName>
		</author>
		<ptr target="https://github.com/pmem/redis" />
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b1">
	<monogr>
		<title level="m" type="main">Moneta: A high-performance storage array architecture for next-generation, non-volatile memories</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Arup</forename><surname>Adrian M Caulfield</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Joel</forename><surname>De</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Coburn</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Todor I Mollow</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">K</forename><surname>Rajesh</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Steven</forename><surname>Gupta</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Swanson</surname></persName>
		</author>
		<editor>MICRO</editor>
		<imprint>
			<date type="published" when="2010" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b2">
	<analytic>
		<title level="a" type="main">Atlas: Leveraging locks for nonvolatile memory consistency</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Dhruva</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Chakrabarti</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">-</forename><forename type="middle">J</forename><surname>Hans</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Kumud</forename><surname>Boehm</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Bhandari</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">OOPSLA</title>
		<imprint>
			<date type="published" when="2014" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b3">
	<analytic>
		<title level="a" type="main">Nv-heaps: Making persistent objects fast and safe with next-generation, nonvolatile memories</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Joel</forename><surname>Coburn</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Adrian</forename><forename type="middle">M</forename><surname>Caulfield</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Ameen</forename><surname>Akel</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Laura</forename><forename type="middle">M</forename><surname>Grupp</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Rajesh</forename><forename type="middle">K</forename><surname>Gupta</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Ranjit</forename><surname>Jhala</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Steven</forename><surname>Swanson</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">ASPLOS</title>
		<imprint>
			<date type="published" when="2011" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b4">
	<analytic>
		<title level="a" type="main">Better I/O through byte-addressable, persistent memory</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Jeremy</forename><surname>Condit</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Edmund</forename><forename type="middle">B</forename><surname>Nightingale</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Christopher</forename><surname>Frost</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Engin</forename><surname>Ipek</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Benjamin</forename><surname>Lee</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Doug</forename><surname>Burger</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Derrick</forename><surname>Coetzee</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">SOSP</title>
		<imprint>
			<date type="published" when="2009" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b5">
	<monogr>
		<title level="m" type="main">Benchmarking cloud serving systems with YCSB</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">F</forename><surname>Brian</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Adam</forename><surname>Cooper</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Erwin</forename><surname>Silberstein</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Raghu</forename><surname>Tam</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Russell</forename><surname>Ramakrishnan</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Sears</surname></persName>
		</author>
		<editor>SoCC</editor>
		<imprint>
			<date type="published" when="2010" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b6">
	<analytic>
		<title level="a" type="main">The transaction concept: Virtues and limitations</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Jim</forename><surname>Gray</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">VLDB</title>
		<imprint>
			<date type="published" when="1981" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b7">
	<analytic>
		<title level="a" type="main">Reimplementing the Cedar file system using logging and group commit</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Robert</forename><surname>Hagmann</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">SOSP</title>
		<imprint>
			<date type="published" when="1987" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b8">
	<analytic>
		<title level="a" type="main">Transactional memory: Architectural support for lock-free data structures</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Maurice</forename><surname>Herlihy</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J Eliot B</forename><surname>Moss</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">ISCA</title>
		<imprint>
			<date type="published" when="1993" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b9">
	<monogr>
		<title level="m" type="main">Intel architecture instruction set extensions programming reference</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Intel</surname></persName>
		</author>
		<ptr target="https://software.intel.com/sites/default/files/managed/69/78/319433-025.pdf" />
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b10">
	<analytic>
		<title level="a" type="main">Anand Sivasubramaniam, and Onur Mutlu. Evaluating STT-RAM as an energy-efficient main memory alternative</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Emre</forename><surname>Kültürsay</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Mahmut</forename><surname>Kandemir</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">ISPASS</title>
		<imprint>
			<date type="published" when="2013" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b11">
	<analytic>
		<title level="a" type="main">Current status of the phase change memory and its future</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Stefan</forename><surname>Lai</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">IEDM</title>
		<imprint>
			<date type="published" when="2003" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b12">
	<analytic>
		<title level="a" type="main">LLVM and Clang: Next generation compiler technology</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Chris</forename><surname>Lattner</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">The BSD Conference</title>
		<imprint>
			<date type="published" when="2008" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b13">
	<analytic>
		<title level="a" type="main">Architecting Phase Change Memory As a Scalable DRAM Alternative</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><surname>Benjamin</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Engin</forename><surname>Lee</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Onur</forename><surname>Ipek</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Doug</forename><surname>Mutlu</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Burger</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">ISCA</title>
		<imprint>
			<date type="published" when="2009" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b14">
	<monogr>
		<title level="m" type="main">Phase Change Technology and the Future of Main Memory</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><surname>Benjamin</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Engin</forename><surname>Lee</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Onur</forename><surname>Ipek</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Doug</forename><surname>Mutlu</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Burger</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2009" />
			<publisher>CACM</publisher>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b15">
	<monogr>
		<title level="m" type="main">Phase Change Technology and the Future of Main Memory</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><surname>Benjamin</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Ping</forename><surname>Lee</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Jun</forename><surname>Zhou</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Youtao</forename><surname>Yang</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Bo</forename><surname>Zhang</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Engin</forename><surname>Zhao</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Onur</forename><surname>Ipek</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Doug</forename><surname>Mutlu</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Burger</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2010" />
			<publisher>IEEE</publisher>
			<pubPlace>Micro</pubPlace>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b16">
	<analytic>
		<title level="a" type="main">DRAMAware Last-Level Cache Writeback: Reducing Write-Caused Interference in Memory Systems</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Chang Joo</forename><surname>Lee</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Veynu</forename><surname>Narasiman</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Eiman</forename><surname>Ebrahimi</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Onur</forename><surname>Mutlu</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Yale</forename><forename type="middle">N</forename><surname>Patt</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">HPS Technical Report</title>
		<imprint>
			<date type="published" when="2010" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b17">
	<analytic>
		<title level="a" type="main">Loose-ordering consistency for persistent memory</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Youyou</forename><surname>Lu</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Jiwu</forename><surname>Shu</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Long</forename><surname>Sun</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Onur</forename><surname>Mutlu</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">ICCD</title>
		<imprint>
			<date type="published" when="2014" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b18">
	<monogr>
		<title level="m" type="main">Redis Cookbook</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Tiago</forename><surname>Macedo</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Fred</forename><surname>Oliveira</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2011" />
			<publisher>Reilly Media, Inc</publisher>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b19">
	<analytic>
		<title level="a" type="main">A Case for Efficient Hardware-Software Cooperative Management of Storage and Memory</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Justin</forename><surname>Meza</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Yixin</forename><surname>Luo</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Samira</forename><surname>Khan</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Jishen</forename><surname>Zhao</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Yuan</forename><surname>Xie</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Onur</forename><surname>Mutlu</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">5th Workshop on EnergyEfficient Design (WEED)</title>
		<imprint>
			<date type="published" when="2013" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b20">
	<analytic>
		<title level="a" type="main">Consistent, durable, and safe memory management for byte-addressable non volatile main memory</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Iulian</forename><surname>Moraru</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">G</forename><surname>David</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Michael</forename><surname>Andersen</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Niraj</forename><surname>Kaminsky</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Tolia</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Nathan</forename><surname>Parthasarathy Ranganathan</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Binkert</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the First ACM SIGOPS Conference on Timely Results in Operating Systems</title>
		<meeting>the First ACM SIGOPS Conference on Timely Results in Operating Systems</meeting>
		<imprint>
			<date type="published" when="2013" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b21">
	<analytic>
		<title level="a" type="main">ParallelismAware Batch Scheduling: Enhancing both Performance and Fairness of Shared DRAM Systems</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Onur</forename><surname>Mutlu</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Thomas</forename><surname>Moscibroda</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">ISCA</title>
		<imprint>
			<date type="published" when="2008" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b22">
	<analytic>
		<title level="a" type="main">Memory Persistency</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Steven</forename><surname>Pelley</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Peter</forename><forename type="middle">M</forename><surname>Chen</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Thomas</forename><forename type="middle">F</forename><surname>Wenisch</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">ISCA</title>
		<imprint>
			<date type="published" when="2014" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b23">
	<analytic>
		<title level="a" type="main">All File Systems Are Not Created Equal: On the Complexity of Crafting Crash-Consistent Applications</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Vijay</forename><surname>Thanumalayan Sankaranarayana Pillai</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Ramnatthan</forename><surname>Chidambaram</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Samer</forename><surname>Alagappan</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Andrea</forename><forename type="middle">C</forename><surname>Al-Kiswany</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Remzi</forename><forename type="middle">H</forename><surname>Arpaci-Dusseau</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Arpaci-Dusseau</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">OSDI</title>
		<imprint>
			<date type="published" when="2014" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b24">
	<analytic>
		<title/>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Vijay</forename><surname>Thanumalayan Sankaranarayana Pillai</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Ramnatthan</forename><surname>Chidambaram</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Samer</forename><surname>Alagappan</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Andrea</forename><forename type="middle">C</forename><surname>Alkiswany</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Remzi H Arpaci-Dusseau</forename><surname>Arpaci-Dusseau</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Crash Consistency. ACM Queue</title>
		<imprint>
			<date type="published" when="2015" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b25">
	<monogr>
		<title level="m" type="main">ThyNVM: Enabling software-transparent crash consistency in persistent memory systems</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Jinglei</forename><surname>Ren</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Jishen</forename><surname>Zhao</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Samira</forename><surname>Khan</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Jongmoo</forename><surname>Choi</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Yongwei</forename><surname>Wu</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Onur</forename><surname>Mutlu</surname></persName>
		</author>
		<editor>MICRO</editor>
		<imprint>
			<date type="published" when="2015" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b26">
	<analytic>
		<title level="a" type="main">The missing memristor found</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Dmitri</forename><forename type="middle">B</forename><surname>Strukov</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Gregory</forename><forename type="middle">S</forename><surname>Snider</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Duncan</forename><forename type="middle">R</forename><surname>Stewart</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><forename type="middle">Stanley</forename><surname>Williams</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Nature</title>
		<imprint>
			<date type="published" when="2008" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b27">
	<analytic>
		<title level="a" type="main">Consistent and durable data structures for non-volatile byteaddressable memory</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Shivaram</forename><surname>Venkataraman</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Niraj</forename><surname>Tolia</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Roy</forename><forename type="middle">H</forename><surname>Parthasarathy Ranganathan</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Campbell</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">FAST</title>
		<imprint>
			<date type="published" when="2011" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b28">
	<analytic>
		<title level="a" type="main">Mnemosyne: Lightweight persistent memory</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Haris</forename><surname>Volos</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Andres</forename><forename type="middle">Jaan</forename><surname>Tack</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Michael</forename><forename type="middle">M</forename><surname>Swift</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">ASPLOS</title>
		<imprint>
			<date type="published" when="2011" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b29">
	<analytic>
		<title level="a" type="main">Phase change memory</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">H-S Philip</forename><surname>Wong</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Simone</forename><surname>Raoux</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Sangbum</forename><surname>Kim</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Jiale</forename><surname>Liang</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Bipin</forename><surname>John P Reifenberg</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Mehdi</forename><surname>Rajendran</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Kenneth</forename><forename type="middle">E</forename><surname>Asheghi</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Goodson</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the IEEE</title>
		<meeting>the IEEE</meeting>
		<imprint>
			<date type="published" when="2010" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b30">
	<analytic>
		<title level="a" type="main">NOVA: a logstructured file system for hybrid volatile/nonvolatile main memories</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Jian</forename><surname>Xu</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Steven</forename><surname>Swanson</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">FAST</title>
		<imprint>
			<date type="published" when="2016" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b31">
	<monogr>
		<title level="m" type="main">Redis: Lightweight key/value store that goes the extra mile. Linux Magazine</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Jeremy</forename><surname>Zawodny</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2009" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b32">
	<monogr>
		<title level="m" type="main">FIRM: Fair and High-Performance Memory Control for Persistent Memory Systems</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Jishen</forename><surname>Zhao</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Onur</forename><surname>Mutlu</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Yuan</forename><surname>Xie</surname></persName>
		</author>
		<editor>MICRO</editor>
		<imprint>
			<date type="published" when="2014" />
		</imprint>
	</monogr>
</biblStruct>

				</listBibl>
			</div>
		</back>
	</text>
</TEI>
