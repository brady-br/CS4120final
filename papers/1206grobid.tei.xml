<?xml version="1.0" encoding="UTF-8"?>
<TEI xmlns="http://www.tei-c.org/ns/1.0" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
xsi:schemaLocation="http://www.tei-c.org/ns/1.0 /Users/atharsefid/Desktop/grobid-0.5.3/grobid-home/schemas/xsd/Grobid.xsd"
 xmlns:xlink="http://www.w3.org/1999/xlink">
	<teiHeader xml:lang="en">
		<encodingDesc>
			<appInfo>
				<application version="0.5.3" ident="GROBID" when="2020-09-29T01:49+0000">
					<ref target="https://github.com/kermitt2/grobid">GROBID - A machine learning software for extracting information from scholarly documents</ref>
				</application>
			</appInfo>
		</encodingDesc>
		<fileDesc>
			<titleStmt>
				<title level="a" type="main">Application-Level Reconnaissance: Timing Channel Attacks Against Antivirus Software</title>
			</titleStmt>
			<publicationStmt>
				<publisher/>
				<availability status="unknown"><licence/></availability>
			</publicationStmt>
			<sourceDesc>
				<biblStruct>
					<analytic>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Mohammed</forename><forename type="middle">I</forename><surname>Al-Saleh</surname></persName>
							<email>alsaleh@cs.unm.edu</email>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Jedidiah</forename><forename type="middle">R</forename><surname>Crandall</surname></persName>
							<email>crandall@cs.unm.edu</email>
						</author>
						<author>
							<affiliation key="aff0">
								<orgName type="department">Department of Computer Science Mail stop</orgName>
								<orgName type="institution">University of New Mexico</orgName>
								<address>
									<postCode>MSC01 1130</postCode>
								</address>
							</affiliation>
						</author>
						<author>
							<affiliation key="aff1">
								<orgName type="department">Department of Computer Science Mail stop: MSC01</orgName>
								<orgName type="institution" key="instit1">University of New Mexico Albuquerque</orgName>
								<orgName type="institution" key="instit2">University of New</orgName>
								<address>
									<postCode>87131, 1130</postCode>
									<region>NM</region>
									<country key="MX">Mexico</country>
								</address>
							</affiliation>
						</author>
						<author>
							<affiliation key="aff2">
								<orgName type="institution">University of New Mexico Albuquerque</orgName>
								<address>
									<postCode>87131</postCode>
									<region>NM</region>
								</address>
							</affiliation>
						</author>
						<title level="a" type="main">Application-Level Reconnaissance: Timing Channel Attacks Against Antivirus Software</title>
					</analytic>
					<monogr>
						<imprint>
							<date/>
						</imprint>
					</monogr>
				</biblStruct>
			</sourceDesc>
		</fileDesc>
		<profileDesc>
			<abstract>
				<p>Remote attackers use network reconnaissance techniques, such as port scanning, to gain information about a victim machine and then use this information to launch an attack. Current network reconnaissance techniques, that are typically below the application layer, are limited in the sense that they can only give basic information, such as what services a victim is running. Furthermore, modern remote exploits typically come from a server and attack a client that has connected to it, rather than the attacker connecting directly to the victim. In this paper, we raise this question and answer it: Can the attacker go beyond the traditional techniques of network reconnaissance and gain high-level, detailed information? We investigate remote timing channel attacks against ClamAV an-tivirus and show that it is possible, with high accuracy, for the remote attacker to check how up-to-date the victim&apos;s antivirus signature database is. Because the strings the attacker uses to do this are benign (i.e., they do not trigger the antivirus) and the attack can be accomplished through many different APIs, the attacker has a large amount of flexibility in hiding the attack.</p>
			</abstract>
		</profileDesc>
	</teiHeader>
	<text xml:lang="en">
		<body>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="1.">INTRODUCTION</head><p>Network reconnaissance is a vital step for the remote attacker before launching an attack. Attacking every reachable host is not desirable to the attacker because only vulnerable hosts can be successfully penetrated. Port scanning is a well-known technique that provides the attacker with very useful information about possible victims. The attacker wants to know if the victim is running certain services, and determines this by sending packets to certain ports the victim might be listening on. The communication between the attacker and victims could reveal the victims' specific services and operating system, and even version information. Port scanning, while helpful to the attacker, is limited by the kind of information it can attain and by the ability to reach victims that have contacted the attacker from behind Network Address Translation (NAT). Stateful firewalls and intrusion detection systems, if well deployed and configured, are considered strong defense lines against port scanning.</p><p>Also, maintaining stealth is important. In this paper, we explore techniques to remotely gain detailed high-level information about a victim host that has connected to the attacker's web server. Our goal is to better understand how the future network reconnaissance techniques that network defenders must anticipate will work.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="1.1">Application-level reconnaissance</head><p>We are particularly interested in the ability of the remote attacker to learn about victims beyond traditional techniques. The highest level of information the attacker can obtain is information related to the victims' running applications, particularly security-related applications. Vulnerable applications, firewalls, and antivirus software are of interest to the attacker. We take the antivirus application in our study as a running example and show how the attacker can stealthily gain information about the victims' antivirus. In this example, the attacker creates a timing channel to infer how up-to-date the antivirus is. This could be useful in that the attacker could decide to send older versions of malicious code and thereby limit the exposure of their newest version by only using it when necessary. In traditional network scanning, the remote attacker scans victims by the means of being a client who tries to connect to servers and discover vulnerabilities. In our model, the attacker is modeled as a server who waits for clients' connections and then scans them at the application layer. This model is particularly suited to drive-bydownloads.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="1.2">Threat model</head><p>While modern antivirus software employs advanced techniques such as filtering, algorithmic scanning, and emulation, at its heart antivirus is still based on pattern matching. Note that the filters that trigger algorithmic scanning and emulation are still patternbased, and advanced techniques also amortize their performance and therefore offer opportunities for timing channels.</p><p>An antivirus scanning engine scans data against its virus signatures. The antivirus does not compare data to every single signature sequentially, but rather it stores the signatures in data structures that allow for fast scanning that is optimized for the common case (typical strings of bytes) and amortizes the performance overhead by having slow code paths that are only taken when a byte string is close to a signature in the database in some way. Depending on how the antivirus stores the signatures in the data structures, scanning one piece of data can take a longer time than another based on the scanning path the antivirus takes to determine if the data is malicious or benign. Suppose that the attacker knows how the antivirus scanning works, then they can create special crafted data that makes the antivirus take a longer time if a certain signature is in the database, but less time otherwise. In our threat model, the attacker wants to know if a client's antivirus database is updated with a certain signature or not. Although the attacker is modeled as a server in our threat model, she can be modeled as a malicious insider as well.</p><p>The fundamental principle the antivirus software utilizes is making the common case fast. However, this introduces the possibility of timing channel attacks.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="1.3">Why antivirus?</head><p>Having antivirus software is considered essential for typical computers today. According to a study <ref type="bibr" target="#b2">[4]</ref>, 81 percent of users use antivirus on their computers. Antivirus signature databases vary widely in terms of how up-to-date they are, due to both users who have not updated recently and scaled releases of updates. An attacker need not use a more recent malicious code, and thereby increase the exposure of the more recent code, if a user's antivirus signatures are not up-to-date and an older malicious code will suffice.</p><p>We chose ClamAV antivirus in our study because it is an open source antivirus.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="1.4">Why timing channels?</head><p>The benefit of a timing channel attack is flexibility and stealth. Even though the attacker might be able to directly check how upto-date the antivirus' database files are through ActiveX controls or other APIs that allow direct checking of directories, files, and processes, this suspicious behavior will have a distinct behavioral signature that is difficult for the attacker to obfuscate (e.g., opening the antivirus' signature database). Also, the database files could be hidden or not allowed to be reached by the attacker in the first place. So, indirectly inferring how up to date the database is is preferable from the attacker's point of view.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="1.5">Paper structure</head><p>This paper is organized as follows. First, we give a background of how ClamAV signature scanning works in Section 2. This is followed by Section 3 that explains our evaluation methodology, and then our results in Section 4. A discussion and future work are in Section 5. Then related works and the conclusion follow.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.">BACKGROUND</head></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.1">On-access vs. on-demand scanning</head><p>On-access scanning is triggered upon file system operations, such as open, create, or close system calls. To be scanned with the onaccess scanner, a virus should be read from or written to the disk. On-access scanners run as daemons and hook into the file system APIs or are implemented as device drivers that are attached to the file system <ref type="bibr" target="#b19">[21]</ref>. On-demand scanning starts only if the user asks the scanner to scan some files.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.2">ClamAV antivirus</head><p>ClamAV <ref type="bibr">[2]</ref> is a well-known, open source antivirus program. ClamAV consists of a main library and a set of command line programs that make use of the APIs provided by the library. On-access scanning in Windows is possible via Clam Sentinel (see below).</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.2.1">File type filtering</head><p>The ClamAV scanning engine has 10 different roots which correspond to 10 different file types. These are GENERIC, PE, OLE2, HTML, MAIL, GRAPHICS, ELF, ASCII, NOT USED, and MACH-O. ClamAV signatures are loaded into the data structures of those roots depending on what kind of files a virus can infect. For example, if virus X infects PE files and a signature X' is generated for X, then X' will be loaded into the data structures of the PE root. When ClamAV scans a file, it checks the file type first to determine which root's signatures will be used to scan that file against. File type filtering speeds up the scanning process by optimizing scans for file types where the entire file need not be scanned.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.2.2">Filtering step</head><p>To make scanning even faster, ClamAV implements an additional filtering step prior to scanning. Every type root has its own filter. The filter can determine if a file is benign before scanning it. The most important feature of these filters is that they do not have false negatives but do have false positive. In other words, the filter will not let a file containing a virus pass without being scanned, but if it can prove that the file is benign then no further scanning is needed for that file. However, some other benign files might cause a hit in the filter and thus will need to be scanned further. ClamAV implements a bit-level state-machine to match characters in the filter. The state machine has 8 states where each state is represented by 1 bit. The state machine might have multiple active states at the same time and thus multiple transitions might be taking place in parallel. Because ClamAV checks input against the filter, any character can be good to start checking from. Thus, ClamAV activates state 1 at each transition. An active state 1 is represented by 11111110. The filter is an array, called B, of length 65536, where each element is 8 bits long. <ref type="figure" target="#fig_1">Figure 1</ref> illustrates this. ClamAV chooses 8 characters carefully from each signature to add it to the filter. Then, it iterates through the 8 characters and reads q-grams of length 2 at each position. For example, if the 8-byte string of a signature is 0x001122334455667788, then it changes the filter as in the following steps 1 :</p><p>1. After ClamAV determines which type root an input belongs to, it checks the root's filter against the input. Searching the filter starts by setting the bit-level state machine to 1111111 (no active states). Then, ClamAV iterates through all input characters until it finds a match or reports a negative result. At each character position, ClamAV reads 16 bits as q0 (q-gram equals 2) and performs this statement:</p><formula xml:id="formula_0">state = (state &lt;&lt; 1) | B[q0]</formula><p>, where state &lt;&lt; 1 activates state 1 each time, and then it checks if it finds a match by this statement: match_state_end = state | End[q0], and reports a match if match_state_end != 0xff. In other words, it reports a match when reaching a state at which the input can end at while being in an active state. Because this filter is created by applying this procedure to all of the signatures, a string will not pass the filtering step unless it cannot possibly match any signature. </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.2.3">Aho-Corasick algorithm</head><p>ClamAV uses an extended version of Aho-Corasick algorithm <ref type="bibr" target="#b3">[5]</ref>. ClamAV usually uses this algorithm for signatures that have wildcards. In this case, the signature is divided into patterns that need to be matched in order to report a match. This algorithm is used to match an input against many patterns at the same time. ClamAV uses a tree-like data structure, called a trie, to store patterns. Each node in this data structure has 256 transition pointers. Each transition represents an ASCII character. What distinguishes this data structure is that each node has the same prefix as its predecessor nodes up to the root node, so that all patterns with the same prefix will take the same path. Because each node takes a considerable amount of memory and also because the trie could be very large if not restricted, ClamAV has put a maximum limit for the depth to be 3. After reaching the maximum depth, all patterns will be added to a linked list attached to leaf nodes. Suppose that there is a signature that starts with the sequence 0x010002. <ref type="figure" target="#fig_2">Figure 2</ref> shows the transitions in the ClamAV trie structure that this sequence would take. Once the leaf node is reached, the pattern will be added to the linked list of patterns which have the same prefix. Also, fail transitions are established, so that instead of returning back to the root at every mismatch, a fail transition is made to the proper node. For example, if the next input at node 2 is 0x01, then the fail transition is set to go back to node 2 instead of re-matching starting again from node 1.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.2.4">Boyer-Moore Algorithm</head><p>An extended version of Boyer-Moore algorithm <ref type="bibr" target="#b8">[10]</ref> is used in ClamAV. This algorithm is usually used for signatures which do not have wildcards. The original Boyer-Moore algorithm scans patterns against input from right to left. Two tables are used to determine how many characters the pattern needs to be shifted by. </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.3">ClamWin and Clam Sentinel</head><p>ClamWin is a free antivirus for Microsoft Windows and used by more than 600,000 users worldwide on a daily basis <ref type="bibr" target="#b1">[3]</ref>. It is based on the ClamAV scanning engine. ClamWin only supports on-demand scanning. Clam Sentinel is a free program that works with ClamWin to support on-access scanning.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.">EXPERIMENTAL METHODOLOGY</head><p>Our experimental methodology was designed to answer the following two questions:</p><p>Question #1: Is there an exploitable timing channel based on how new signatures are added to ClamAV database? The basic idea behind the timing channel we demonstrate is to make the scanning engine hit in the place in which a signature is added over and over again to add a measurable delay to the scan. If the signature is there, then more work will take place and this means more scanning time. Three things are involved to make this happen. First, for any input to be scanned against database signatures, it needs to pass the filtering step. We extracted the exact 8 characters from each signature that are added to the filter, see Section 2.2.2 for more details about how the filtering works. When scanning files, ClamAV divides files into buffers of length 128KB. We need to make sure to plant the extracted characters in a buffer size basis rather than a file size basis. Second, for signatures that are added to the Boyer-Moore linked list, we extracted the characters from each Boyer-Moore signature that is used in the hashing function to add the signature to the linked lists, see Section 2.2.4 for more details about how the Boyer-Moore algorithm works. Third, for signatures that are added to the Aho-Corasick trie structure, we extracted the characters from each Aho-Corasick signature that will cause the scanner to go all the way down to the leaf nodes. See Section 2.2.3 for more details about how the Aho-Corasick algorithm works.</p><p>To demonstrate a possible timing channel, we collected the names of all of the viruses added since the first available ClamAV release, which was 17 April 2004. ClamAV maintains a virus database mailing list through which it reports virus addition or update. We downloaded and parsed all the HTML files since that date and put the results in a name-date list. Then, we unpacked the ClamAV database and removed from it all of the signatures of viruses that have their names on our list. This step makes the database as if it is the database from 17 April 2004. We made two kinds of experiments: the day-basis experiment and the signature-basis experiment. For the day-basis experiment, we wrote a script that creates files per date/day. For example, if in date D S signatures are added to the database, then the script will create the Directory D. Inside D the script creates S directories each one corresponds to a virus signature. In each directory of S directories, the script creates 10 files each of which is 1MB. See <ref type="figure" target="#fig_3">Figure 3</ref>. The number and size of the files are below the default ClamAV limits to scan files. The 10 files' contents are identical. To create a file, we concatenate the extracted Boyer-Moore or Aho-Corasick characters from the corresponding signature until it reaches 1MB size. Meanwhile, we plant the filter characters of the signature every time we reach the buffer size. The initial content of the file depends on the file type a signature is taken from, see Section 2.2.1. The test begins by scanning the oldest date directory we have, then we add the signatures of that date to the database and scan it again. Then we scan the next date directory before and after adding that date's signatures, and so on. For the signature-basis experiment, we tested to see the effect of adding single signatures rather than the signatures for the whole day. For this experiment, ClamAV is asked to scan the 10 files, which consist of a signature's extracted characters, before and after adding that signature to the database.</p><p>Question #2: If the first question is confirmed, is it possible to exploit the timing channel in a real attack? <ref type="figure" target="#fig_4">Figure 4</ref> illustrates a real-world scenario. A victim, who has ClamWin antivirus and Clam Sentinel installed, connects, through Internet Explorer, to a web server which is controlled by the attacker. Once connected, the victim is asked to download an ActiveX component that looks necessary to accomplish a certain task. Once downloaded, the ActiveX is started by JavaScript code. Then the ActiveX component creates a file that will be scanned by the antivirus and measures the CPU usage for a certain amount of time to determine the busy period the CPU experienced. We used the PDH (Performance Data Helper) library to query the processor time performance counter. This experiment starts when the CPU is almost idle. To determine the busy period of the CPU, we need a way to make sure that the CPU is busy with the antivirus rather than any other process which might be woken up or started at some time and then compute for a small amount of time. So, the attacker can repeat the process to separate signal from noise coming from the CPU running other processes. What distinguishes the antivirus scanning process is that it keeps the CPU busy until it is done. This feature makes differentiating the start and the end time of the busy period easier. We determine the busy period in two stages: in the first stage, we start collecting all CPU usage samples (1 data point every 15 milliseconds) for 35 seconds, which is more than enough for the antivirus to scan a file, starting right after we close the file (the on-access scanner starts scanning right after closing the file). In the second stage, we take the averages of every contiguous 10-data-point sequence of the collected data from the first stage. We take the higher-thannormal averages (a threshold is set empirically) as start and end points and compute the elapsed scanning time based on this difference. After getting the total time the antivirus spent scanning the file, the ActiveX component triggers an event that will be received by a JavaScript function which, in turn, will send the results to the remote attacker.</p><p>A simpler model could be an insider threat which does not need a connection to a remote server.  Internet Explorer to connect to the server. Then, the client is asked to download an ActiveX component which a JavaScript script can control. The component creates a file and returns the CPU busy period, which will be considered as the scanning time, to the JavaScript as an event. The JavaScript sends the result back to the server.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.">RESULTS</head><p>In this section, we present results to answer the two questions we asked in Section 3. The results show that an attacker can exploit a timing channel from newly added signatures and that this attack can be implemented in a real-world scenario. We ran the first two experiments in Linux 2.6, on an Intel Core 2 Quad CPU at 2.66 GHz, and 8 GB RAM. Also, we ran the ActiveX experiments in Windows 7 OS, on an Intel Dual Core Atom CPU at 1.66 GHz, with 4 GB RAM.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.1">Day-by-day experiment</head><p>In this experiment, we scanned a number of files that were created for each day, before and after adding the signatures of the day. See Section 3 for more details about the setup. The clamscan command line program was used to initiate the scan. The averages were taken over 10 runs for each day. We take the differences between the scanning time averages after and before adding signatures (i.e., the time to scan files after adding the signatures minus the time to scan files before adding the signatures). As expected, there are only 10 instances where the scanning times before and after adding signatures are almost the same. For all other instances, adding new signatures creates timing differences.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.2">Single signatures experiment</head><p>In this experiment, we scan a number of files that are created to exploit only one signature each time. The clamscan command line program was used to initiate the scan. The averages were taken over 4 runs for each experiment. We take the differences between the scanning time averages after and before adding a signature. <ref type="figure" target="#fig_7">Fig- ure 6</ref> shows that a timing channel for one signature can be determined with high probability. For an x-axis value v, the corresponding y-axis value is the number of occurrences that are in this range: (v -0.025: v].</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.3">ActiveX experiment for GENERIC type files</head><p>In this experiment, the ActiveX component creates 5 MB files and measures the time that the antivirus (ClamWin and Clam Centinal) spends on the CPU while scanning the files. Each run represents the creation and measurement time for only one file. This file is created by concatenating a randomly generated benign sequence of characters (i.e., sequence of characters which has no effect in how a signature is inserted into Aho-Corasick tries or Boyer-Moore linked lists) or by concatenating a randomly chosen extracted sequence of characters (i.e., sequence of characters which affects the shape of the Aho-Corasick tries or Boyer-Moore linked lists). The files considered are of type GENERIC. Each run is repeated 5 times to ensure that the results are consistent. <ref type="figure" target="#fig_8">Figure 7</ref> presents the averages over 5 runs for each file for both benign and extracted cases. <ref type="figure">Figure  8</ref> zooms out on the area where both get closer. The results show that the scanning time for the extracted characters are always higher than that of the benign characters except for one data point (data point 2 in the case of extracted and 9 in case of benign), where both are equal.</p><p>In <ref type="figure" target="#fig_9">Figure 9</ref>, we present the worst case scenario where we compare the minimum runs in the case of the extracted characters to the maximum runs in the case of benign files. The results still show that the scanning time for the extracted characters are always higher than that of the benign ones except for two data points (data points 2 and 3 in the case of extracted and 9 in the case of benign). <ref type="figure" target="#fig_1">Figure 10</ref> zooms out on the area where both get closer.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.4">ActiveX experiment for HTML type files</head><p>In this experiment, instead of starting by filling characters into an empty file, we append characters to a basic HTML file. This would make the numbers different from the above experiment because the scanning engine will be directed to scan the files against signatures in the HTML (rather than GENERIC) root, see Section 2.2.1 for more information. <ref type="figure" target="#fig_1">Figure 11</ref> shows the averages over 5 runs for each created file while <ref type="figure" target="#fig_1">Figure 12</ref> represents the worst case scenario where we compare the minimum runs in the case of the extracted characters to the maximum runs in the case of the benign files.  </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5.">DISCUSSION AND FUTURE WORK</head><p>We argue that stealthily scanning clients is powerful because, besides being stealthy, it allows the attacker to gain a higher level of information. The notion of scanning clients, rather than servers, is a more fitting threat model for today's exploits that are based on "drive-by downloads." The user makes the initial connection and thus gives the attacker an opportunity to scan their machine. Web browsers are well known to be one of the main avenues for modern attack.</p><p>The running example of checking, through a timing channel, how up-to-date ClamAV is shows that application-level reconnaissance attacks are practical and can reveal high-level information about a user's system. The same general approach could be used to detect which antivirus program is installed (if any), the presence of other security software such as local intrusion detection systems or personal firewalls, if other malicious code is installed that hooks into some system behavior, mouse activity, the patch-level of the operating system, and more. Because all of these can be determined through timing channels, the attacker has a high degree of flexibility in the APIs used for scanning and need not have control of the system before doing reconnaissance.</p><p>Although our prototype attack, which was built for testing purposes to determine the time scales involved, is based on ActiveX the only three capabilities needed for a real application-level reconnaissance attack are to create or modify a file, measure the CPU usage, and keep track of time. Creating or modifying a file is possible even without APIs, simply by causing a file to be cached or a string of data to be logged. Furthermore, modern antivirus programs scan much more than just files and hook into a browser in many more places, so the surface available to scan them is larger than that of ClamAV. Measuring CPU usage can often be accomplished with several different APIs, or the attacker can simply measure the progress of one or more threads, which can be low priority need not necessarily consume all cores of the CPU if their timing for giving up the CPU is carefully orchestrated. Finally, keeping track of time  The same experiment as in <ref type="figure" target="#fig_9">Figure 9</ref>, but we show the worst case scenario with clear border between benign and extracted.</p><p>is possible with a large variety of APIs, and need not be done on the client being scanned since the attacker's server can simply view events from the client and measure time itself. Crosby et al. <ref type="bibr" target="#b12">[14]</ref> demonstrate that timing attacks can be performed over the internet with an accuracy of 15-100 microseconds, so in some cases it is not even necessary to use the clients timekeeping API.</p><p>We chose ClamAV for our tests because it is open source, the details of its core scanning algorithms are documented on the web, and the developer community for ClamAV is very helpful. We believe that more advanced antivirus programs, such as the proprietary antivirus programs that perform advanced filtering, emulation, algorithmic scanning, and heuristics, offer a lot more information that can be inferred from timing attacks than ClamAV. <ref type="table">Table 1</ref> shows how timing channel attacks could be possible in modern antivirus software.</p><p>In general, the more sophisticated an antivirus program is, the more tradeoffs between performance and the number of patterns that can be detected must be traded off by amortizing fast codes paths vs. slow code paths. So, even though a closed-source, proprietary antivirus program would take a significant amount of more effort to develop timing attacks for, the opportunities for gaining detailed high-level information about, for example, how up-to-date the signature database is will be much greater.</p><p>In terms of mitigation strategies to help ameliorate the type of highlevel reconnaissance attacks we present in this paper, strategies are  needed that still allow for performance tradeoffs to be made for common cases. Predictive black-box mitigation <ref type="bibr" target="#b4">[6]</ref> is a promising approach, and could potentially be applied by the antivirus program to maintain good performance while also minimizing the impact of timing channels attacks.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="6.">RELATED WORK 6.1 Network discovery</head><p>Network reconnaissance is very important first step in launching an attack. vPort scanning is a well known technique to probe networks and discover information about remote systems and the services they run. The threat model in port scanning is that the attacker, as a client, initiates the scanning victims who are servers that are reach- <ref type="figure" target="#fig_1">Figure 12</ref>: The same experiment as in <ref type="figure" target="#fig_1">Figure 11</ref>, but we show the worst case scenario.</p><p>able on the network. Nmap <ref type="bibr" target="#b16">[18]</ref> is a well known tool to discover open, closed, and filtered ports, operating systems, services, and version information. All information that Nmap can get, however, is limited because it can only use raw packets and exposed services to discover information about networked hosts. Also, stateful and well configured firewalls and intrusion detection systems can stop many port scanning techniques. In our approach, the threat model is different. The attacker, who acts a server, waits for connections from victims, who are clients. Once connected, the attacker seeks to learn about the victim from the application layer, where a richer amount of information is available.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="6.2">Timing channel attacks</head><p>Timing channel attacks are based on measuring the time it takes for a program to perform a task <ref type="bibr" target="#b5">[7,</ref><ref type="bibr" target="#b15">17,</ref><ref type="bibr" target="#b20">22]</ref>. Timing channels have been exploited to reveal the secret keys in cryptographic systems <ref type="bibr" target="#b6">[8,</ref><ref type="bibr" target="#b17">19,</ref><ref type="bibr" target="#b9">11]</ref>, reveal SSH user passwords <ref type="bibr" target="#b18">[20]</ref>, breach users privacy <ref type="bibr" target="#b13">[15]</ref>, or detect virtual machines <ref type="bibr" target="#b14">[16]</ref>. In this paper, we exploited a timing channel attack in ClamAV antivirus by noticing the affect of adding a signature to the database on the scanning engine algorithm.</p><p>The work closest to our own is Bortz et al. <ref type="bibr" target="#b7">[9]</ref>. Using timing attacks on web applications, they were able to find out private information about a user's web activity, such as the status and result of logins and login attempts, the number of objects on a page, and so forth. Our work extends timing attacks through the browser beyond web applications and shows that it is possible to find out securityrelevant information about a potential victim machine's configuration.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="6.3">Antivirus research</head><p>Attacking antivirus software is possible because antivirus is just software that could have vulnerabilities <ref type="bibr">[1]</ref>. Because antivirus programs match data against a signature database, evading detection is possible using obfuscation transformations <ref type="bibr" target="#b10">[12]</ref>. New signatures for obfuscated versions of viruses are generated based on samples of the newly obfuscated versions of that virus that are found in the wild. By measuring how up-to-date a potential victim's antivirus signature database is before attacking, an attacker can use older versions of their malicious code when possible and greatly reduce the exposure of their newest malicious codes.</p><p>Christodorescu et al. <ref type="bibr" target="#b11">[13]</ref> shows that it is possible to extract the signature for a specific virus that the antivirus is using to detect that virus.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="7.">CONCLUSION</head><p>We showed that application-level reconnaissance through timing channels has the potential to reveal detailed, high-level information about a system to an attacker. The running example we used for the experimental results given in this paper was based on checking how up-to-date the ClamAV antivirus on a given machine is. The results show that the attacker, with high accuracy, can determine if the database has been updated with certain signatures or not. Although most research concentrates on the potential of clients scanning servers, we concentrated in this paper on the possibility of scans that a server might perform on a client. Also, the scans we considered occur at the application layer and can reveal much more information than, for example, port scanning. We believe that this type of reconnaissance will become increasingly important to study in the near future.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="8.">ACKNOWLEDGMENTS</head><p>We would like to thank Török Edwin, a ClamAV developer, for his help in reading and understanding the ClamAV code. We would also like to thank the LEET reviewers for their very helpful comments. This work was supported in part by the U.S. National Science Foundation (CNS-0905177). Any opinions, findings, conclusions, or recommendations expressed in this publication are those of the authors and do not necessarily reflect the views of the National Science Foundation.</p></div><figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_0"><head></head><label></label><figDesc>For position 1 of the string, execute B[0x0011] = B[0x0011] &amp; 11111110. This says that 0x0011 is satisfactory to start with. 2. For position 2: B[0x1122] = B[0x1122] &amp; 11111101. 3. It continues in the same way for the following positions until the 7th position. 4. To mark the end of a string ClamAV has another array called End. For the previous example, when position 7 is reached, the End array is changed to be End[0x7788] = End[0x7788] &amp; 10111111.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_1"><head>Figure 1 :</head><label>1</label><figDesc>Figure 1: ClamAV filter. The filter content is based on the signatures. An active position is represented by 0. The right most bit is the first position.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_2"><head>Figure 2 :</head><label>2</label><figDesc>Figure 2: ClamAV Aho-Corasick trie structure with arbitrary success transitions and one fail transition. Each transition represents an ASCII character. The maximum depth is 3. Patterns are added to linked lists after bypassing the maximum depth.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_3"><head>Figure 3 :</head><label>3</label><figDesc>Figure 3: Test file hierarchy per date D. The higher level directory D contains the files created for all signatures which were released on that day. Each V directory contains files created for only one signature.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_4"><head>Figure 4 :</head><label>4</label><figDesc>Figure 4: A scenario for a real-world attack. The client uses Internet Explorer to connect to the server. Then, the client is asked to download an ActiveX component which a JavaScript script can control. The component creates a file and returns the CPU busy period, which will be considered as the scanning time, to the JavaScript as an event. The JavaScript sends the result back to the server.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_5"><head>Figure 5 shows</head><label>5</label><figDesc>Figure 5 shows a histogram of the differences represented by the ranges. For an x-axis value v, the corresponding y-axis value w is the number of occurrences that are in this range: (v − 0.025: v]. As expected, there are only 10 instances where the scanning times before and after adding signatures are almost the same. For all other instances, adding new signatures creates timing differences.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_6"><head>Figure 5 :</head><label>5</label><figDesc>Figure 5: Scanning time differences before and after adding signatures of a day.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_7"><head>Figure 6 :</head><label>6</label><figDesc>Figure 6: Scanning time differences before and after adding a single signature.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_8"><head>Figure 7 :</head><label>7</label><figDesc>Figure 7: Scanning time of creating GENERIC type files out of benign and extracted characters. Each data point represents an average over 5 runs</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_9"><head>Figure 9 :</head><label>9</label><figDesc>Figure 9: The same experiment as in Figure 7, but we show the worst case scenario.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_10"><head>Figure 10 :</head><label>10</label><figDesc>Figure 10: The same experiment as in Figure 9, but we show the worst case scenario with clear border between benign and extracted.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_11"><head>Figure 11 :</head><label>11</label><figDesc>Figure 11: Scanning time of creating HTML type files out of benign and extracted characters. Each data point represents an average over 5 runs.</figDesc></figure>

			<note place="foot" n="1"> &lt;&lt;, |, and &amp; represent shift left, or, and and bitwise operations, respectively</note>
		</body>
		<back>
			<div type="references">

				<listBibl>

<biblStruct xml:id="b0">
	<monogr>
		<title/>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Feng-Xue/Whitepaper</surname></persName>
		</author>
		<idno>eu-08-xue-WP.pdf</idno>
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b1">
	<monogr>
		<title level="m" type="main">Free antivirus for windows</title>
		<ptr target="http://www.clamwin.com" />
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b2">
	<monogr>
		<title level="m" type="main">Internet security threats will affect u.s. consumers holiday shopping online</title>
		<ptr target="http://www.bsacybersafety.com/news/2005-Holiday-Online-Shopping.cfm" />
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b3">
	<analytic>
		<title level="a" type="main">Efficient string matching: an aid to bibliographic search</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><forename type="middle">V</forename><surname>Aho</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><forename type="middle">J</forename><surname>Corasick</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Commun. ACM</title>
		<imprint>
			<biblScope unit="volume">18</biblScope>
			<biblScope unit="issue">6</biblScope>
			<biblScope unit="page" from="333" to="340" />
			<date type="published" when="1975" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b4">
	<analytic>
		<title level="a" type="main">Predictive black-box mitigation of timing channels</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Askarov</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><forename type="middle">C</forename><surname>Myers</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Zhang</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">CCS &apos;10: Proceedings of the 17th ACM conference on Computer and communications security</title>
		<meeting><address><addrLine>New York, NY, USA</addrLine></address></meeting>
		<imprint>
			<publisher>ACM</publisher>
			<date type="published" when="2010" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b5">
	<monogr>
		<title level="m" type="main">Introduction to side channel attacks</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">H</forename><surname>Bar-El</surname></persName>
		</author>
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b6">
	<monogr>
		<title level="m" type="main">Cache-timing attacks on aes</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><forename type="middle">J</forename><surname>Bernstein</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2005" />
		</imprint>
	</monogr>
<note type="report_type">Technical report</note>
</biblStruct>

<biblStruct xml:id="b7">
	<analytic>
		<title level="a" type="main">Exposing private information by timing web applications</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Bortz</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Boneh</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><surname>Nandy</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">WWW &apos;07: Proceedings of the 16th international conference on World Wide Web</title>
		<meeting><address><addrLine>New York, NY, USA</addrLine></address></meeting>
		<imprint>
			<publisher>ACM</publisher>
			<date type="published" when="2007" />
			<biblScope unit="page" from="621" to="628" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b8">
	<analytic>
		<title level="a" type="main">A fast string searching algorithm</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><forename type="middle">S</forename><surname>Boyer</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><forename type="middle">S</forename><surname>Moore</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Commun. ACM</title>
		<imprint>
			<biblScope unit="volume">20</biblScope>
			<biblScope unit="issue">10</biblScope>
			<biblScope unit="page" from="762" to="772" />
			<date type="published" when="1977" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b9">
	<analytic>
		<title level="a" type="main">Remote timing attacks are practical</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Brumley</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Boneh</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 12th USENIX Security Symposium</title>
		<meeting>the 12th USENIX Security Symposium</meeting>
		<imprint>
			<date type="published" when="2003" />
			<biblScope unit="page" from="1" to="14" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b10">
	<analytic>
		<title level="a" type="main">Static analysis of executables to detect malicious patterns</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Christodorescu</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Jha</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">SSYM&apos;03: Proceedings of the 12th conference on USENIX Security Symposium</title>
		<meeting><address><addrLine>Berkeley, CA, USA</addrLine></address></meeting>
		<imprint>
			<publisher>USENIX Association</publisher>
			<date type="published" when="2003" />
			<biblScope unit="page" from="12" to="12" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b11">
	<analytic>
		<title level="a" type="main">Testing malware detectors</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Christodorescu</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Jha</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">SIGSOFT Softw. Eng. Notes</title>
		<imprint>
			<biblScope unit="volume">29</biblScope>
			<biblScope unit="issue">4</biblScope>
			<biblScope unit="page" from="34" to="44" />
			<date type="published" when="2004" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b12">
	<analytic>
		<title level="a" type="main">Opportunities and limits of remote timing attacks</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><forename type="middle">A</forename><surname>Crosby</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><forename type="middle">S</forename><surname>Wallach</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><forename type="middle">H</forename><surname>Riedi</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">ACM Trans. Inf. Syst. Secur</title>
		<imprint>
			<biblScope unit="volume">12</biblScope>
			<biblScope unit="issue">3</biblScope>
			<biblScope unit="page" from="1" to="29" />
			<date type="published" when="2009" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b13">
	<analytic>
		<title level="a" type="main">Timing attacks on web privacy</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">E</forename><forename type="middle">W</forename><surname>Felten</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><forename type="middle">A</forename><surname>Schneider</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">CCS &apos;00: Proceedings of the 7th ACM conference on Computer and Communications Security</title>
		<meeting><address><addrLine>New York, NY, USA</addrLine></address></meeting>
		<imprint>
			<publisher>ACM</publisher>
			<date type="published" when="2000" />
			<biblScope unit="page" from="25" to="32" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b14">
	<analytic>
		<title level="a" type="main">Remote detection of virtual machine monitors with fuzzy benchmarking</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Franklin</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Luk</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><forename type="middle">M</forename><surname>Mccune</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Seshadri</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Perrig</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">L</forename><surname>Van Doorn</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">SIGOPS Oper. Syst. Rev</title>
		<imprint>
			<biblScope unit="volume">42</biblScope>
			<biblScope unit="issue">3</biblScope>
			<biblScope unit="page" from="83" to="92" />
			<date type="published" when="2008" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b15">
	<analytic>
		<title level="a" type="main">A note on the confinement problem</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">B</forename><forename type="middle">W</forename><surname>Lampson</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Communications of the ACM</title>
		<imprint>
			<biblScope unit="volume">16</biblScope>
			<biblScope unit="issue">10</biblScope>
			<biblScope unit="page" from="613" to="615" />
			<date type="published" when="1973" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b16">
	<analytic>
		<title/>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">G</forename><forename type="middle">F</forename><surname>Lyon</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Nmap Network Scanning. Insecure.Com LLC</title>
		<imprint>
			<date type="published" when="2008" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b17">
	<analytic>
		<title level="a" type="main">A timing attack against rsa with the chinese remainder theorem</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">W</forename><surname>Schindler</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">CHES &apos;00: Proceedings of the Second International Workshop on Cryptographic Hardware and Embedded Systems</title>
		<meeting><address><addrLine>London, UK</addrLine></address></meeting>
		<imprint>
			<publisher>Springer-Verlag</publisher>
			<date type="published" when="2000" />
			<biblScope unit="page" from="109" to="124" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b18">
	<analytic>
		<title level="a" type="main">Timing analysis of keystrokes and timing attacks on ssh</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><forename type="middle">X</forename><surname>Song</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Wagner</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">X</forename><surname>Tian</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">SSYM&apos;01: Proceedings of the 10th conference on USENIX Security Symposium</title>
		<meeting><address><addrLine>Berkeley, CA, USA</addrLine></address></meeting>
		<imprint>
			<publisher>USENIX Association</publisher>
			<date type="published" when="2001" />
			<biblScope unit="page" from="25" to="25" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b19">
	<monogr>
		<title level="m" type="main">The Art of Computer Virus Research and Defense</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><surname>Szor</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2005" />
			<publisher>Addison-Wesley Professional</publisher>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b20">
	<analytic>
		<title level="a" type="main">An analysis of covert timing channels</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><forename type="middle">C</forename><surname>Wray</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">IEEE Symposium on Security and Privacy</title>
		<imprint>
			<date type="published" when="1991" />
			<biblScope unit="page" from="2" to="7" />
		</imprint>
	</monogr>
</biblStruct>

				</listBibl>
			</div>
		</back>
	</text>
</TEI>
