<?xml version="1.0" encoding="UTF-8"?>
<TEI xmlns="http://www.tei-c.org/ns/1.0" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
xsi:schemaLocation="http://www.tei-c.org/ns/1.0 /Users/atharsefid/Desktop/grobid-0.5.3/grobid-home/schemas/xsd/Grobid.xsd"
 xmlns:xlink="http://www.w3.org/1999/xlink">
	<teiHeader xml:lang="en">
		<encodingDesc>
			<appInfo>
				<application version="0.5.3" ident="GROBID" when="2020-09-29T04:09+0000">
					<ref target="https://github.com/kermitt2/grobid">GROBID - A machine learning software for extracting information from scholarly documents</ref>
				</application>
			</appInfo>
		</encodingDesc>
		<fileDesc>
			<titleStmt>
				<title level="a" type="main">Open access to the Proceedings of the 29th USENIX Security Symposium is sponsored by USENIX. BlockSci: Design and applications of a blockchain analysis platform BlockSci: Design and applications of a blockchain analysis platform</title>
			</titleStmt>
			<publicationStmt>
				<publisher/>
				<availability status="unknown"><licence/></availability>
				<date>August 12-14, 2020</date>
			</publicationStmt>
			<sourceDesc>
				<biblStruct>
					<analytic>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Harry</forename><surname>Kalodner</surname></persName>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Malte</forename><surname>Möser</surname></persName>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Kevin</forename><surname>Lee</surname></persName>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Steven</forename><surname>Goldfeder</surname></persName>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Cornell</forename><surname>Tech</surname></persName>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Martin</forename><surname>Plattner</surname></persName>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Harry</forename><surname>Kalodner</surname></persName>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Malte</forename><surname>Möser</surname></persName>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Kevin</forename><surname>Lee</surname></persName>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Steven</forename><surname>Goldfeder</surname></persName>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Martin</forename><surname>Plattner</surname></persName>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Alishah</forename><surname>Chator</surname></persName>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Arvind</forename><surname>Narayanan</surname></persName>
						</author>
						<author>
							<affiliation key="aff0">
								<orgName type="institution" key="instit1">Princeton University</orgName>
								<orgName type="institution" key="instit2">University of Innsbruck</orgName>
								<address>
									<addrLine>Alishah Chator</addrLine>
								</address>
							</affiliation>
						</author>
						<author>
							<affiliation key="aff1">
								<orgName type="institution" key="instit1">Johns Hopkins University</orgName>
								<orgName type="institution" key="instit2">Princeton University</orgName>
								<orgName type="institution" key="instit3">Princeton University</orgName>
								<orgName type="institution" key="instit4">Princeton University</orgName>
								<orgName type="institution" key="instit5">Princeton University</orgName>
								<orgName type="institution" key="instit6">Cornell Tech</orgName>
								<orgName type="institution" key="instit7">University of Innsbruck</orgName>
								<orgName type="institution" key="instit8">Johns Hopkins University</orgName>
								<orgName type="institution" key="instit9">Princeton University</orgName>
							</affiliation>
						</author>
						<title level="a" type="main">Open access to the Proceedings of the 29th USENIX Security Symposium is sponsored by USENIX. BlockSci: Design and applications of a blockchain analysis platform BlockSci: Design and applications of a blockchain analysis platform</title>
					</analytic>
					<monogr>
						<title level="m">Proceedings of the 29th USENIX Security Symposium</title>
						<meeting>the 29th USENIX Security Symposium						</meeting>
						<imprint>
							<date type="published">August 12-14, 2020</date>
						</imprint>
					</monogr>
					<note>This paper is included in the 978-1-939133-17-5</note>
				</biblStruct>
			</sourceDesc>
		</fileDesc>
		<profileDesc>
			<abstract>
				<p>Analysis of blockchain data is useful for both scientific research and commercial applications. We present BlockSci, an open-source software platform for blockchain analysis. BlockSci is versatile in its support for different blockchains and analysis tasks. It incorporates an in-memory, analytical (rather than transactional) database, making it orders of magnitudes faster than using general-purpose graph databases. We describe BlockSci&apos;s design and present four analyses that illustrate its capabilities, shedding light on the security, privacy, and economics of cryptocurrencies.</p>
			</abstract>
		</profileDesc>
	</teiHeader>
	<text xml:lang="en">
		<body>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="1">Introduction</head><p>Public blockchains constitute an unprecedented research corpus of financial transactions. Bitcoin's blockchain alone is 260 GB as of December 2019. 1 This data holds the key to measuring the privacy of cryptocurrencies in practice, studying user behavior with regards to security and economics, or understanding the non-currency applications that use the blockchain as a database.</p><p>We present BlockSci, a software platform that enables the science of blockchains. It addresses three pain points of existing tools: poor performance, limited capabilities, and a cumbersome programming interface. Compared to the use of general-purpose graph databases, BlockSci is hundreds of times faster for sequential queries and substantially faster for all queries, including graph traversal queries. It comes bundled with analytic modules such as address clustering, exposes different blockchains through a common interface, collects "mempool" state and imports exchange rate data, and gives the programmer a choice of interfaces: a Jupyter notebook for intuitive exploration and C++ for performance-critical tasks. In contrast to commercial tools, BlockSci is not tailored to specific use cases such as criminal investigations or insights * These authors contributed equally to this work. <ref type="bibr" target="#b0">1</ref> All numbers in this paper are current as of December 2019, and analyses of the Bitcoin blockchain as of block height 610,695, unless stated otherwise.</p><p>for cryptocurrency traders. Instead, by providing efficient and convenient programmatic access to the full blockchain data, it enables a wide range of reproducible, scientific analyses.</p><p>BlockSci's design starts with the observation that blockchains are append-only databases; further, the snapshots used for research are static. Thus, the ACID properties of transactional databases are unnecessary. This makes an inmemory analytical database the natural choice. On top of the obvious speed gains of memory, we apply a number of tricks such as converting hash pointers to actual pointers and deduplicating address data, which further greatly increase speed and decrease the size of the data. We plan to scale vertically as blockchains grow, and we expect that this will be straightforward for the foreseeable future, as commodity cloud instances currently offer up to a hundred times more memory than required for loading and analyzing Bitcoin's blockchain. Avoiding distributed processing is further motivated by the fact that blockchain data is graph-structured, and thus hard to partition effectively. In fact, we conjecture that the use of a traditional, distributed transactional database for blockchain analysis has infinite COST (Configuration that Outperforms a Single Thread) <ref type="bibr" target="#b0">[1]</ref>, in the sense that no level of parallelism can outperform an optimized single-threaded implementation.</p><p>BlockSci comes with batteries included. First, it is not limited to Bitcoin: a parsing step converts a variety of blockchains into a common, compact format. Currently supported blockchains include Bitcoin, Bitcoin Cash, Bitcoin SV, Litecoin, and Zcash (Section 2.1). A multi-chain mode optimizes for user-friendly and memory-efficient analyses of forked blockchains together with their parent chain. Smart contract platforms such as Ethereum are outside our scope.</p><p>Second, BlockSci includes a library of useful analytic tools, such as identifying special transactions (e.g., CoinJoin) and linking addresses to each other based on well-known heuristics, including across forked chains (Section 2.4). Third, BlockSci can record the time of transaction broadcasts on the peer-to-peer network and expose them through the same interface. Similarly, we make (historical and current) data on the exchange rates between cryptocurrencies and fiat currencies readily available. These allow many types of analyses that wouldn't be possible with blockchain data alone.</p><p>The analyst begins exploring the blockchain through a Jupyter notebook interface (Section 2.5), which initially exposes a chain object, representing the entire blockchain. Startup is instantaneous because transaction objects are not initially instantiated, but only when accessed. Iterating over blocks and transactions is straightforward, as illustrated by the following query, which computes the average fee paid by transactions in each block mined in December 2019: This interface is suitable for exploration, but for analyses requiring high performance, BlockSci also has a C++ interface. For many tasks, most of the code can be written in Python using a "fluent interface", an API design pattern that combines expressiveness and high performance (Section 2.5).</p><p>In Section 3 we present four applications to illustrate the capabilities of BlockSci. First, we show how multisignatures have the unfortunate effect of weakening confidentiality by exposing the details of access control on the blockchain, and hurting the privacy of users who do not use them (Section 3.1). Next, we study how users' cash-out behavior after the Bitcoin Cash hard fork hurt their privacy (Section 3.2) and find patterns of key reuse that may put users' funds at elevated risk.</p><p>Turning to economics, we analyze Bitcoin Core's fee estimation's algorithm (Section 3.3), and find it relatively ineffective for predicting waiting times due to the inherent uncertainty of proof-of-work. Finally, we provide improved estimates of the velocity of cryptocurrencies, i.e., the frequency with which coins change possession <ref type="bibr">(Section 3.4)</ref>. This helps us understand their use as a store of value versus a medium of exchange.</p><p>2 Design and architecture <ref type="figure" target="#fig_1">Figure 1</ref> shows an overview of BlockSci's architecture. There are two routes for importing data into BlockSci (Section 2.1). Through either route, the data is converted by the parser (Section 2.2) into the BlockSci Data (Section 2.3), which can be incrementally updated as new blocks come in. The analysis library (Section 2.4) loads this data as an in-memory database, which the user can either query directly (in C++) or through a Jupyter notebook interface (Section 2.5).</p><p>A recurring theme in this section is that since BlockSci is a domain-specific database, we are able to make assumptions about the schema and the workload that allow us to achieve large performance gains and an expressive interface. Both this broad lesson and some of our specific optimizations may be applicable to other domains.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.1">Recording and importing data</head><p>Design decision: which blockchains should BlockSci support? There are hundreds of blockchains, some of which differ from Bitcoin in minor ways and others drastically. As we aim to provide a common interface for the analysis of all supported blockchains, supporting too few blockchains (e.g., just Bitcoin) limits usefulness, but supporting too many different blockchains would complicate the interface and make optimizations harder.</p><p>Recall that the Bitcoin blockchain consists primarily of a directed acyclic graph of transactions. The edges connecting transactions have attributes, i.e., addresses or scripts, attached to them. Transactions are grouped into blocks which are arranged in a linear chain, with a small amount of metadata per block. BlockSci supports blockchains that follow this basic structure. For example, Litecoin makes no changes to the data structure, and is thus fully supported. Cryptocurrencies that introduce changes to the script operations may be supported only partially, but the user can parse unknown scripts with a few lines of code. Zcash is also supported, at least to the extent that Zcash blockchain analysis is even possible: it introduces a complex script that includes zero-knowledge proofs, but these aspects are parceled away in a special type of address that is not publicly legible by design.</p><p>An example of an unsupported blockchain is Monero, as it doesn't follow the "each input spends one output" paradigm. Its transaction graph contains additional edges, the mixins. Supporting it would require changes to the data layout as well as the programmer interface. Similarly, Ethereum departs from the transaction-graph model, and further, its script is vastly different from and more complex than that of Bitcoin.</p><p>In our analyses we have worked with six blockchains: Bitcoin, Bitcoin Cash, Litecoin, Namecoin, Dash, and Zcash. Many other cryptocurrencies make no changes to the blockchain format, and so should be supported with no changes to BlockSci.</p><p>Multi-chain mode. By default, BlockSci operates on a single blockchain. We also provide a multi-chain mode in which several forked chains (e.g., Bitcoin Bitcoin Cash Bitcoin SV) can be combined in an optimized, memory-efficient multichain configuration. In this mode, data common to forked chains (such as pre-fork transactions) need to be loaded into memory only once. Address data is deduplicated across forks, allowing for novel cross-chain analyses.</p><p>Importer. For cryptocurrencies with small blockchains where import performance is not a concern, we use the JSON-RPC interface. The advantage of this approach is versatility, as many cryptocurrencies aim to conform to a standard JSON-RPC schema regardless of the on-disk data structures and serialization format. For larger blockchains (currently only Bitcoin and its forks are large enough for import performance to be a concern), we use our own high-performance importer that directly reads the raw data on disk.  Mempool recorder. BlockSci can optionally record mempool data, that is, timestamps of transactions that are broadcast to the P2P network and are waiting to be included in the blockchain. The waiting time of included transactions provides valuable data for economic analyses and isn't recorded in the blockchain itself. When users choose to collect these timestamps, they are accessible through the same interface as all other blockchain data.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Network</head></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.2">Parser</head><p>Implementation challenge: optimizing the parser. The ondisk format of blockchains is not very usable for analysis. It is optimized for a different set of goals, such as transaction validation and data retrieval in a distributed network. Bitcoin Core and similar clients minimize memory consumption and store blocks in raw network format on disk, whereas we aim for a representation of the data that can fit in memory. Given that a data transformation is necessary, we describe the design and optimization of the parser that handles this step.</p><p>Parsing is sequential and stateful. The blockchain must be processed sequentially as two types of state are required for the transformation: one is to link a transaction's inputs to outputs of prior transactions, and the other is to link inputs/outputs to addresses. Each transaction input specifies which output it spends, encoded as (transaction hash, output index). The parser assigns an ID to every transaction and stores information for every unspent output (UTXO), including the hash → ID mapping. Similarly, it must assign IDs to addresses and maintain this mapping for linking and deduplication.</p><p>In Bitcoin, transactions spending outputs of other transactions in the same block must appear after them. Other cryptocurrencies, however, violate this rule. Bitcoin Cash uses canonical transaction ordering (CTOR) within each block, i.e., based on their hash. Thus, to process a block, the parser processes transactions in multiple passes: it first identifies all transactions in a block before it can correctly link transaction inputs to the outputs spent. This allows the parser to tolerate an arbitrary ordering of transactions within each block.</p><p>UTXOs can be removed from the parser state after they have been spent. Address mapping, however, allows no such optimization. Any address may be used by any output and thus all addresses must be tracked at all times. Storing the map in memory would require too much memory, and storing it on disk would make the parser too slow.</p><p>Optimization: Bloom filters and address caches. To achieve further optimizations, we observe that the vast majority of inputs spend recently created outputs (e.g., 88 % of inputs spend outputs created in the last 4000 blocks). And only 8.6 % of Bitcoin addresses are used more than once, but those account for 51 % of all occurrences. This motivates the following trade-off between speed and memory consumption:</p><p>1. A bloom filter (a probabilistic data structure that allows testing membership in a set) stores all seen addresses. Recall that negative results from a bloom filter are always correct, whereas there is a small chance of false positives. This ensures correctness of lookups for existing addresses while minimizing the number of database queries for nonexistent ones.  Incremental updates. The append-only nature of the blockchain enables incremental updates to the parser output. The parser serializes its final state at the end of a run and resumes from that state when invoked again. A difficulty with this approach is handling blockchain reorganization which occurs when a block that was originally in the longest branch is surpassed by a different branch. BlockSci recommends to ignore the most recent few blocks during initialization. The probability of a reorg that affects d or more blocks decreases exponentially in d. The default value of d for Bitcoin is 6. If a deeper reorg happens, the user needs to reparse the chain.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.3">BlockSci Data</head><p>Key challenge: finding a data layout that gives a good trade-off between memory efficiency and performance.</p><p>Based on our experience with empirical blockchain analysis over several years, we divide the available data into three categories and combine it in a hybrid scheme that provides us with a reasonable trade-off between efficient use of memory and speed of access:</p><p>1. The core transaction graph is required for most analyses and always loaded in-memory. It is stored in a row-based format. 2. Scripts and additional data is required for only a subset of analyses. It is stored in a hybrid (partially column-based, partially row-based) format and is loaded on-demand. 3. Indexes to look up individual transactions or addresses by hash are stored in a separate database on disk. We make further optimizations to improve performance, including using fixed-size encodings for data fields where possible, optimizing the memory layout for locality of reference, linking outputs to inputs for efficient traversal, and sharing identical data across chains in multi-chain mode.</p><p>Transaction graph. The core transaction graph is stored in a single sequential table of transactions, with entries having the structure shown in <ref type="figure" target="#fig_2">Figure 2</ref>. Note that entries have variable lengths, due to the variable number of inputs and outputs (there is a separate array of offsets for indexing, due to the variable entry lengths). Normally this would necessitate entries to be allocated in the heap, rather than contiguously, which would have worse memory consumption and worse locality of reference.</p><p>However, because of the append-only property of the blockchain, there are only two types of modifications that are made to the transactions table: appending entries (due to new transactions) and length-preserving edits to existing entries (when existing UTXOs are consumed by new transactions). This allows us to create a table that is stored as flat file on disk that grows linearly as new blocks are created. To load the file for analysis, it is mapped into memory. The on-disk representation continues to grow (and be modified in place), but the analysis library provides a static view (Section 2.4).</p><p>Layout and locality. The main advantage of the transaction graph layout is spatial locality of reference. Analyses that iterate over transactions block-by-block exhibit strong locality and benefit from caching. Such analyses will remain feasible even on machines with insufficient memory to load the entire transaction graph, because disk access will be sequential.</p><p>The layout stores both inputs and outputs as part of a transaction, resulting in a small amount of duplication (a space cost of about 19 %), but resulting in a significant speedup for sequential iteration compared to a normalized layout. Variants of the layout are possible depending on the types of iteration for which we wish to optimize performance (Section 2.6).</p><p>Additional data. Beyond the core transaction graph, BlockSci provides access to additional data that are necessary for some types of analyses. These include script data, transaction hashes and version numbers, input sequence numbers, input-output linkages, and raw data contained in coinbase transactions. Keeping this data separate reduces memory usage in exchange for a small reduction in speed of access for analyses that require this data (e.g., 10 % slower for a typical query that iterates over transaction metadata).</p><p>Scripts. BlockSci categorizes scripts into 5 generic types, each of which contains scripts of one or more address formats: script-hash (for script-hash and witness-script-hash scripts), pubkey (for raw pubkey, pubkey-hash, individual pubkeys in a multisig script, and witness-pubkey-hash scripts), multisig, null data, and unknown witness scripts. All other scripts are categorized as nonstandard. Internally, script data of different address formats is deduplicated: for example, a public key used in both a pubkey-hash and a witness-pubkey-hash script is stored only once. For nonstandard scripts, BlockSci stores the entire script data which can be parsed with only a few lines of code by the analyst.</p><p>Indexes. Transaction hashes and addresses are stored in flat files and can easily be looked up by transaction/address ID. The reverse mapping from hash to ID, however, is stored in separate indexes in RocksDB databases (the address index is also used by the parser). Accessing these indexes is almost never performance critical in scientific analysis-in fact, many analyses don't require the indexes at all. Besides the ability to look up transactions and addresses by hash, we also provide a lookup for all outputs associated with specific addresses.</p><p>Multi-chain mode. To support forked blockchains, we make three modifications to the layout described above. First, forked chains often share a large common history with their parent chain. We load these identical blocks only once, and the analysis library provides the abstraction of a full chain for each fork. Second, the fixed-size encoding does not permit storing data of multiple chains. For example, UTXOs at fork height can be spent in both the parent and the forked chains, but the fixed-length field can only hold a single index for the spending transaction (cf. <ref type="figure" target="#fig_2">Figure 2</ref>). Each fork thus needs a separate flat file that contains the spending transactions' IDs for outputs created before the fork. Third, the index that maps addresses to outputs requires an additional chain identifier to distinguish between outputs on different chains.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.4">BlockSci Analysis Library</head><p>The snapshot illusion. The following three seemingly contradictory properties hold in BlockSci:</p><p>1. The transactions table is regularly updated on disk as new blocks are received (note that arbitrarily old transactions may be updated if they have unspent outputs that get spent in new blocks). 2. The table is memory-mapped and shared between all running instances of BlockSci. 3. Each instance loads a snapshot of the blockchain that never changes unless the programmer explicitly invokes a reload. The contradiction disappears once we notice that the state of the transactions table at any past point in time (block height) can be reconstructed given the current state. To provide the illusion of a static data structure, when the blockchain object is initialized, it stores the height of the blockchain at initialization time. The blockchain on disk increases over time, but the stored height remains fixed, and accesses to blocks past this height are prevented. The analysis library intercepts and rewrites accesses to transaction outputs such that outputs that were spent in blocks added after initialization appear unspent.</p><p>Memory mapping and parallelism. Since BlockSci uses the same format for the transaction graph on disk and in memory, loading the blockchain simply involves memorymapping this file. Once in memory, each transaction can be accessed as a C++ struct; no new memory needs to be allocated to enable an objected-oriented interface to the data. This is because the disk layout of each struct is identical to its memory layout.</p><p>Memory mapping allows users to efficiently run BlockSci on machines with less than the recommended amount of memory provided that they only require access to a subset of the data that fits in memory.</p><p>Memory mapping also allows multithreaded parallel processing with no additional effort. Recall that if a file is mapped into memory by multiple processes, they use the same physical memory for the file. The file has only one writer (the parser); it is not modified by the analysis library. Thus, synchronization between different analysis instances isn't necessary. With a disk-based database, analyses tend to be I/Obound, with little or no benefit from multiple CPUs, whereas BlockSci is CPU-bound, and performance scales roughly linearly with the number of virtual CPUs (Section 2.6). Finally, memory mapping also makes it straightforward to support multiple users on a single machine, which is especially useful given that Jupyter notebook (the main interface to BlockSci) can be exposed via the web.</p><p>Mapreduce. Many analyses, such as computing the average transaction fee over time, can be expressed as mapreduce operations over the transactions table (or ranges of blocks). Thus the analysis library supports a mapreduce abstraction that, with no additional effort from the programmer, handles parallelizing the task to utilize all available cores. As we show in Section 2.6.1, parallel iteration over all transactions, transaction inputs, and transaction outputs on the Bitcoin blockchain as of December 2019 takes only 0.9 seconds on a single 16-vCPU EC2 instance.</p><p>Address linking. Address linking (or clustering) is a key step in many analytic tasks including understanding trends over time and evaluating privacy. Recall that cryptocurrency users can trivially generate new addresses, and most wallets take advantage of this ability. Nevertheless, addresses controlled by the same user or entity may be linked to each other, albeit imperfectly, through various heuristics.</p><p>Two common types of heuristics include (1) inputs spent in the same transaction are controlled by the same entity, and (2) identifying a change address based on client software or user behavior (e.g., <ref type="bibr" target="#b2">[3]</ref>). As the multi-input heuristic does not apply to CoinJoin transactions, we add an exception for those transactions, which we identify using the algorithm described by Goldfeder at al. <ref type="bibr" target="#b3">[4]</ref>. Change address identification is challenging due to the variety of existing client software. BlockSci comes with several-as of this writing, ten-change address heuristics that can be used individually or in combination with each other, allowing the analyst to choose or create a heuristic best suited for their analysis task.</p><p>These heuristics create links (edges) in a graph of addresses. By iterating over all transactions and applying the union-find algorithm on the contained addresses we generate clusters of addresses. This set of clusters is the output of address linking. We use the union-find implementation by Jakob <ref type="bibr" target="#b4">[5]</ref>. Clustering takes only a few minutes, allowing the analyst to recompute and compare clusters with different heuristics.</p><p>In multi-chain mode, BlockSci can enhance the clustering of a target chain using information from forked chains. Addresses that exist on multiple chains may be used differently on them, e.g., combined with a different set of input addresses.  <ref type="figure">Figure 3</ref>: Distribution of sizes of address clusters in Bitcoin after applying address-linking heuristics. Sizes 1-2,000 are shown here but there are many clusters that are much larger.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>USENIX</head><p>Cross-chain address clustering uses these additional links to enhance the clustering of the target chain (cf. Section 3.2). <ref type="figure">Figure 3</ref> shows the distribution of cluster sizes for Bitcoin using the multi-input heuristic only. There are about 474 million clusters in total, of which about 380 million are single addresses, and about 93 million have between 2 and 20,000 addresses. There are 809 clusters with over 20,000 addresses, including one supercluster with over 17 million addresses.</p><p>Address linking is inherently imperfect, and ground truth is difficult to obtain on a large scale, since it requires interacting with service providers. We do not attempt to be comprehensive, resulting in false negatives (i.e., missed edges, resulting in more clusters than truly exist). More perniciously, most of the heuristics are also subject to false positives (i.e., spurious edges), which can lead to "cluster collapse". In particular, it is likely that the supercluster above is a result of such a collapse.</p><p>Tagging. Address linking is especially powerful when combined with address tagging, i.e., labeling addresses with realworld identities. This can be useful for forensics and lawenforcement investigations but it can also violate user privacy. BlockSci does not provide address tags. Tagging requires interacting with service providers and cannot be done in an automated way on a large scale. Companies such as Chainalysis and Elliptic specialize in tagging and forensics, blockchain.info allows users to publicly tag addresses that they control, and researchers sometimes provide datasets of address tags <ref type="bibr" target="#b5">[6]</ref>. BlockSci has a limited tagging feature: if the user provides tags for a subset of addresses, individual clusters can return tags associated with them.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.5">Programmer interface</head><p>Key challenge: combining speed and expressiveness. BlockSci aims to come close to the speed of C++ while providing expressiveness and convenience of a high-level language, namely Python, for as many analysis tasks as possible.</p><p>Python interface. Jupyter notebook is a popular Python interface for data science. It allows packaging together code, visualization, and documentation, enabling easy sharing and reproducibility of scientific findings. We expose the C++ BlockSci library to Python through the pybind11 interface <ref type="bibr" target="#b6">[7]</ref>. While we intend Jupyter notebook to be the main interface to BlockSci, it is straightforward to utilize the analysis library directly from standalone C++ or Python programs and derive most of the benefits of BlockSci.</p><p>Python is not a language known for performance; unsurprisingly, we find that it is significantly slower to run queries through the Python interface. Nevertheless, our goal is to allow the programmer to spend most of their time interacting with the Jupyter notebook, while simultaneously ensuring that the bottleneck parts of queries execute as C++ code. We illustrate this through an example.</p><p>Suppose our goal is to find transactions with anomalously high transaction fees -say 0.1 bitcoins (10 7 satoshis), worth about 720 US dollars as of December 2019. The slowest way to do this would be to write the entire query in Python: This way does not result in acceptable performance. A first step to improve both performance and conciseness is to have a built-in function to compute the fee: Although tx.fee calls a C++ function, we model it as a property in the Python interface. Most helper functions are modeled as properties, unless they are expected to take significant time to compute, or take arguments. tx.fee is just one of many helpers exposed by the Python library that execute as C++. We've found that most of the analyses in Section 3 benefit from a small number of helper functions.</p><p>Fluent interface. Running this analysis over the entire blockchain in Python still does not provide great performance. At the time of writing, the Bitcoin blockchain contains more than 480 million transactions, for each of which the above query instantiates a Python object, even though only a few thousand transactions will eventually be selected.</p><p>To make analyses faster without requiring the user to write complicated C++ code, we've developed a fluent interface <ref type="bibr" target="#b7">[8]</ref> to specify graph queries. A fluent interface is an internal domain-specific language (DSL) that allows the analyst to specify queries as a sequence of selections and filters over the transaction graph. Method chaining makes specifying sequences of operations convenient: every operation returns a proxy object to which further operations can be applied. Execution happens lazily for most parts of this interface: either when the analyst requests a list of the results or when the query reaches a point that does not allow further traversal (e.g., after selecting the fee of a transaction). Using the flu- Our interface provides many options to select and filter data. The select clause allows to select properties of objects, though most properties can be conveniently accessed directly, e.g., txes.fee instead of txes.select(lambda tx: tx.fee), as the library redirects such property accesses to the corresponding select function call. As demonstrated above, where filters objects using predicates. any and all apply predicates over a list of objects and return whether they apply to any or all contained items, max and min select elements with the highest (or lowest) attribute value, and a group_by clause returns aggregates of properties. We provide a detailed overview of available clauses in the online documentation.</p><p>The fluent interface operates single-threaded. Providing the mapreduce functionalities of the C++ interface for the fluent interface is planned for future versions. Currently, the user can work around this limitation using Python's multiprocess library to parallelize the computation on subsets of blocks or transactions.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.6">Performance evaluation</head><p>We now report the speed and memory consumption of BlockSci. All measurements assume that the in-memory data structures are already loaded in memory. This takes about 4 minutes for Bitcoin and needs to be done only once per boot.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.6.1">Basic run time statistics</head><p>We run measurements on a single r5.4xlarge EC2 instance (16 vCPUs, 2.5 GHz Intel Xeon Platinum 8175M, 128 GiB memory, 800 GiB EBS volume). The cost is $1.12 per hour.</p><p>The most common type of access is a mapreduce-style iteration over the blockchain. A representative example is finding transactions with anomalously high fees, because computing the fee requires iterating over not just transactions, but also the inputs and outputs of each transaction. In essence, this query touches the entirety of the transactions table data.</p><p>As <ref type="table" target="#tab_3">Table 1</ref> shows, a single-threaded implementation of this query completes in 11.3 seconds. Mapreduce-style queries are In Section 2.5 we presented several paradigms for querying the blockchain from the Python interface: pure Python, C++ helper functions, and the fluent interface. <ref type="table" target="#tab_4">Table 2</ref> shows the performance of these three paradigms on the anomalousfee query. The pure-Python method has unacceptable performance (this is partially a result of a few performance traps in the current codebase). Using the helper method is a lot faster, but using the fluent interface is preferred: it is 7-11x faster than the helper method. Compared to implementing a single-threaded C++ query, the fluent interface is only 3-5x slower for many practical applications (cf. <ref type="table">Table 3</ref>).</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.6.2">Comparison with graph databases</head><p>Graph traversal is integral to many blockchain analyses, such as inspecting specific addresses or determining change based on properties of the spending transaction. In this section, we compare BlockSci's performance against three generalpurpose graph databases: Neo4j, RedisGraph, and Memgraph.</p><p>Neo4j is one of the most popular graph databases currently available. While it is not an in-memory database, we can load the entire dataset into the page cache before executing queries. Memgraph and RedisGraph are pure in-memory graph databases, the latter being built on top of the key-value database Redis.</p><p>All three databases allow to import data in CSV format and to execute queries using the Cypher query language. This allows us to run almost exact queries on all three databases. We created an export tool for BlockSci that exports blockchain data into the CSV format readable by these databases.</p><p>The graph representation of these databases is significantly larger than the BlockSci Data format (and thus needs more disk space and memory), even though we choose to only store a few properties and not all information available in <ref type="table">Table 3</ref>: Average running time in seconds (over five consecutive runs) for graph queries on a dataset with 25 million transactions (up to block height 262,176). Standard deviations and running times for more datasets are provided in <ref type="table" target="#tab_11">Table 8</ref>  BlockSci. We deem this a reasonable compromise: while BlockSci aims to be a general-purpose tool, analysts may decide to ignore data irrelevant to their goals when choosing a different database. We design the graph property model for flexibility and expressiveness of traversal queries, thus we explicitly model blocks, transactions, outputs, and addresses as nodes. A detailed description of the model can be found in Appendix A.</p><p>We evaluate these databases on graphs of different sizes (i.e. historic snapshots of the blockchain). While we intended to run the measurements on the full transaction graph, performance issues of the graph databases already became apparent with data set sizes significantly smaller than the full graph and prevented the completion of measurements on the full graph in a reasonable time frame (cf. <ref type="table" target="#tab_11">Table 8</ref> in the appendix).</p><p>We run measurements on an r5.8xlarge EC2 instance (32 vCPUs, 256GiB memory). Besides repeating the iterative queries from the previous section (finding transactions with a positive locktime, finding the highest output value and finding the highest transaction fee) we also run three queries involving graph traversal (calculating the total value received by a popular address, counting the number of outputs that have been spent in the same block and identifying transactions where exactly one output has been spent in a transaction that uses a similar locktime policy). 2 <ref type="table">Table 3</ref> shows query running times for a dataset of 25 million transactions (the current blockchain contains more than 489 million transactions). We can see that BlockSci's is generally much faster than the other databases, by a factor of 2-16 compared to the best results for graph traversal, and hundreds times faster for many sequential queries. Results for more data sets can be found in <ref type="table" target="#tab_11">Table 8</ref> in the appendix. <ref type="bibr" target="#b1">2</ref> The Cypher queries used are listed in <ref type="table">Table 7</ref> in the appendix. </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.6.3">Comparison with other open-source blockchain analysis tools</head><p>When we initially made BlockSci publicly available, we evaluated its performance against other open-source blockchain analysis tools. We found BlockSci to be 15-600x faster than these tools <ref type="bibr" target="#b8">[9]</ref>, and its performance has improved considerably since. As we attempted to repeat the comparison, we found that these tools are no longer maintained. A few new blockchain analysis tools are available, but we found that they aren't general purpose tools but only support specific use cases.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.6.4">Parser performance</head><p>Parsing the blockchain needs to be done only once upon installation; incremental updates are essentially instantaneous. On our r5.4xlarge machine, parsing the Bitcoin blockchain until end of December 2019 (block height 610,695) took 5.5 hours.</p><p>Note that it takes Bitcoin Core several hours to download the blockchain, so initialization is slow anyway. <ref type="table" target="#tab_6">Table 4</ref> shows the memory consumption of BlockSci as a function of the size of the blockchain (measured by the number of transactions, inputs, outputs, and addresses). As noted earlier, for almost all analysis tasks we have encountered so far, only the transaction table needs to be in memory to ensure optimal performance. As of December 2019, this comes out to about 50 GB for Bitcoin.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.6.5">Memory</head><p>Recall that BlockSci's default layout of the transaction table is not normalized: coins are stored once as inputs and once as outputs. The table also shows the memory consumption for several alternate layouts. While normalizing the layout would save 19 % space, it leads to a steep drop in performance for typical queries such as max-fee. Alternatively, we could store derived data about transactions, such as the fee, at the expense of space. Finally, we also show how the space consumption would increase if and when we need to transition to 64-bit integers for storing transaction and address IDs.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3">Applications</head><p>We now present four analyses that highlight BlockSci's effectiveness at supporting blockchain analyses. The first two relate to privacy and confidentiality, the third and fourth to the economics of cryptocurrencies. <ref type="table" target="#tab_8">Table 5</ref> shows how these applications take advantage of the features of BlockSci's analysis library and data sources.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.1">Multisignatures hurt confidentiality</head><p>Security conscious users or companies that store large amounts of cryptocurrency often make use of Bitcoin's multisignature capability. Unlike standard pay-to-public-key-hash (P2PKH) transactions which only require one signature to sign, multisig addresses allow one to specify n keys and a parameter m ≤ n such that any m of the specified keys must sign in order to spend the money. This feature allows distributing control of a Bitcoin wallet: keys can be stored on n servers or by n different employees of a company such that m of them must agree to authorize a transaction. Similarly, a user could store a key on both her desktop computer and her smartphone and require the participation of both to authorize a transaction (a 2-of-2 multisig).</p><p>Bitcoin's multisig implementation requires users to explicitly list all n keys as well as the values m and n. To make it easier to receive funds to multisig addresses, Bitcoin implements an address format called pay-to-script-hash (P2SH), where the sender only needs to know a hash value of the full script. When spending from such an address, the receiver has to provide all individual keys and the parameters m and n along with valid signatures in the input. As of December 2019, up to 27 % of all bitcoins mined are held in multisig addresses. <ref type="bibr" target="#b2">3</ref> In this section we show how multisignatures expose confidential information about access control on the blockchain, as suggested by Gennaro et al <ref type="bibr" target="#b12">[13]</ref>. We further show how the use of multisignatures can hurt the privacy of other users. Finally, we observe patterns of multisig usage that substantially reduce its security benefits.</p><p>Confidentiality. For companies or individuals that use multisig to enforce access control over their wallet, multisig publicly exposes the access control structure as well as changes to that structure. In other words, it exposes the number of total keys and the number of keys needed to sign, the individual (public) keys themselves, as well as changes in access control that may correspond to events such as a loss of a device or the departure of an employee.</p><p>Two characteristics indicate that a transaction might represent a change in access control:</p><p>• Single input, single output. Payment transactions typically involve multiple inputs and/or change outputs. By contrast, a transaction with only one input and one output (whether a regular or a multisig address) suggests that both are controlled by the same entity.</p><p>• Overlapping sets of multisig keys between the input and the output suggest a change in access control (e.g., the replacement or removal of a specific key), but not a complete transfer of control.</p><p>As an example of such a transaction with these characteristics, consider the transaction 96d95e... <ref type="bibr" target="#b3">4</ref> . In this transaction, over USD $130,000 of Bitcoin was transferred from one 2-of-3 multisig address to a second 2-of-3 multisig address. These addresses shared 2 keys in common, but one of the original keys was replaced with a different key. Chainalysis 5 labels both the input and output addresses as being controlled by coinsbank.com. This publicly reveals an internal access control change happening at a private company. <ref type="figure" target="#fig_6">Figure 4</ref> shows that these types of information leakage happen regularly. Every month, tens of thousands of transactions transferring bitcoins worth millions of dollars publicly expose confidential access control structure changes in this way.</p><p>Privacy. When an output address uses the same type of access-control policy as an input address, it is a strong indicator that the output was used as a change address. This provides a powerful heuristic to identify change addresses. We find that for many transactions, this heuristic allows identifying change addresses even though previously known heuristics (e.g., <ref type="bibr" target="#b2">[3]</ref>) do not allow such a determination.</p><p>While Gennaro et al. mention the unfortunate privacyinfringing side-effect of multisig <ref type="bibr" target="#b12">[13]</ref>, we provide the first empirical evidence for the pervasiveness of this effect. We have implemented a generalized heuristic that identifies the change address based on it being the only output that matches Application T r a n s a c t i o n g r a p h a n a l y s i s  <ref type="bibr" target="#b10">[11]</ref> • Tracing transactions across cryptocurrency ledgers <ref type="bibr" target="#b11">[12]</ref> • • When the cookie meets the blockchain <ref type="bibr" target="#b3">[4]</ref> •     the type of all input addresses (e.g., using P2SH for multisignature access control). Using this heuristic, we can uniquely identify a change address in 122 million out of 489 million transactions. Of these change addresses we identified, over 72 million were cases in which the anonymity of non-multisig users was reduced because they transacted with a party that used a script-hash address. Over 49 million were cases of script-hash users having their anonymity reduced (i.e., the reverse scenario, in which a payment is made to a regular address).</p><p>We note that adding Schnorr signatures <ref type="bibr" target="#b13">[14]</ref> could improve confidentiality and privacy of multisignature transactions (e.g., by making multisig indistinguishable from regular addresses) <ref type="bibr" target="#b14">[15]</ref>. However, without widespread or mandatory adoption, they could also hurt privacy if they allow further distinction between different users (similar to how distinguishing between the use of script-hash and non-script-hash addresses reduces privacy).</p><p>Security. A surprising, but relatively common motif is for multisig users to switch their money from a multisig address to a regular address, and then back into a multisig address. We conjecture that this may happen when users are changing the access control policy on their wallet, although it is unclear why they transfer their funds to a regular address in the interim, and not directly to the new multisig address.</p><p>This practice negates some of the security benefits of multisignatures, as it advertises to an attacker when a high-value wallet is most vulnerable. To identify this pattern, we looked for transactions in which all of the inputs were from multisig addresses of the same access structure and there was a single non-multisig output, which was subsequently sent back to a multisig address. We restricted our analysis to single output transactions as this is an indicator of self-churn, i.e. a user shuffling money among her own addresses.</p><p>In <ref type="figure" target="#fig_8">Figure 5</ref>, we see that a few thousand transactions each month exhibit this pattern, temporarily reducing the security of bitcoins worth up to hundreds of million USD.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.2">Cashing out on forks hurts privacy</head><p>In a blockchain fork, two separate chains emerge with a shared history, often with different rulesets. One prominent example of such a fork is Bitcoin Cash (BCH), which split from the original Bitcoin (BTC) chain in August 2017 over disagreement about the maximum size of blocks (cf. <ref type="bibr" target="#b15">[16]</ref>). Users who held BTC at the time of the fork automatically own the same quantity of BCH, too. Unfortunately for users, blockchain forks can also lead to unintentional privacy compromise (cf. <ref type="bibr" target="#b16">[17]</ref>). A generally privacy-conscious user who carefully crafts transactions on one chain may perform privacy-harming transactions on another, such as sweeping and cashing out their coins. Here, we investigate privacy implications of the BCH fork.</p><p>Preliminaries. We start by systematizing the use of addresses across forked chains ( <ref type="figure">Figure 6</ref>). Addresses that held coins before the fork may continue to be used on either (orange or gray) or both chains (red). New addresses may be used after the fork on either chain (yellow or green), or start to appear on both chains despite no pre-fork use (blue). Addresses may also cease to see use after the fork (brown).</p><p>In <ref type="figure" target="#fig_12">Figure 7</ref> we show the address distribution between usage types over time. A small but noticeable trend is a decline in the number of addresses that existed pre-fork and initially had only been used on BCH (gray). This suggests that users may have moved their funds on the BCH chain shortly after the fork, without moving them on the BTC chain until many months after. We suspect that these may represent users who decided to cash out their funds on the BCH chain after the fork.</p><p>Privacy impact. We quantify the privacy impact of this activity on BCH using BlockSci's cross-chain clustering capabilities ( <ref type="figure" target="#fig_10">Figure 8</ref>). Cross-chain clustering produces an enhanced clustering of a single chain using additional links from a forked chain, allowing us to investigate the additional privacy impact of the behavior on the forked chain. To evaluate the impact of the fork event, we create an early cross-chain clustering for Dec 31, 2017, five months after the BCH fork, and compare it to individual BTC single-chain clusterings created every 6 months until <ref type="bibr">Dec 31, 2019</ref>.</p><p>Combining the BCH clustering with the BTC clustering yields a total of 1.05 million additional cluster merges until Dec 31, 2017. Every merge combines two existing (singleor cross-chain) clusters into a cross-chain cluster. 75.44 % of those early merges on BCH occur on the BTC chain (on average, about 8.9 months after occuring on the BCH chain). The high degree of overlap provides evidence that observing cluster merges on the BCH chain does indeed indicate that the corresponding BTC clusters belong to the same entity.</p><p>The remaining 24.56 % represent an upper bound of the unique additional privacy leakage for BTC users from their behavior on BCH. With the rough heuristic that each cross-chain cluster represents a distinct user, 99,500 users are affected by this privacy leak: that is, it becomes possible to link their BTC addresses with each other based on their BCH activity.</p><p>Next, we evaluate the long-term privacy impact of the fork. To this end, we create a cross-chain clustering of BTC and BCH until Dec 31, 2019. Again, using BCH data to enhance the BTC clustering, we observe a total of 571,924 additional cluster merges from cross-chain clustering. The enhanced clustering includes almost 200,000 cross-chain clusters that contain over 750,000 single-chain clusters of the BTC chain (as some cross-chain clusters may contain multiple singlechain clusters). The cross-chain clusters together contain almost 30 million addresses, or roughly 5 % of all BTC addresses. In other words, roughly 5 % of BTC addresses potentially suffer a privacy compromise due to cash-out behavior on BCH. Address reuse. Further investigating the different address use patterns, we observe the appearance of (previously unseen) addresses on both chains after the fork (i.e., the blue addresses in <ref type="figure">Figure 6</ref>). As of December 31, 2019, there are over one million such addresses, holding a total of 360,000 BTC (USD 2.7 billion) respectively 1.45 million BCH (USD 303 million). Such reuse may occur deliberately (e.g., when users import keys into wallets on both chains) or unintentionally (e.g., when hierarchical deterministic wallets continue to generate similar keys after the fork). Either way, it may not only lead to continued privacy compromise, but also raises severe security concerns. To protect their keys, those users need to enforce the same security policies on both chains, including a strict separation of keys between hot and cold wallets (e.g., avoid importing a cold wallet key into a hot wallet), as compromise of keys on one chain would allow the attacker to steal coins on all chains that share those keys (cf. <ref type="bibr" target="#b17">[18]</ref>).</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>USENIX</head></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.3">(In)effectiveness of Bitcoin Core's fee estimation</head><p>The Bitcoin protocol defines an upper limit on the size of each block, effectively limiting the number of transactions that miners can include in a block. Bitcoin users compete with each other for the inclusion of their transaction in a block by paying a transaction fee, as rational miners prioritize transactions that pay higher fees per size unit. Demand for block space (equally, the number of pending transactions) is constantly changing, and with it the minimum fee required for transactions to get included in the next block. Supply for block space is not created on a fixed schedule: the arrival time of blocks follows an exponential distribution introduced by the proofof-work mining mechanism. And the fee mechanism used by Bitcoin, effectively a pay-as-bid auction, is not incentive compatible, making it difficult to determine the optimal fee to pay <ref type="bibr" target="#b18">[19,</ref><ref type="bibr" target="#b19">20]</ref>. Wallets often use fee estimation techniques that use historic data to estimate fees such that transactions get included in the blockchain within a certain target time frame with high confidence. In particular, Bitcoin Core has a fee estimation feature that is well known, widely used, and relied upon. Given a target interval, say 2 blocks, the algorithm chooses fees such that in the past 60 % of transactions were included in half of a target interval, 85 % within the target and at least 95 % within twice the target. But how good is this estimate? Note that most users' time preferences are in terms of time and not blocks. Suppose a user values their transaction being included in a block in 20 minutes or less, and hence selects a transaction fee corresponding to a target of 2 blocks, based on the mean block interval of 10 minutes. How long can the user actually expect to wait? We use BlockSci to answer this question.</p><p>Data collection. We used BlockSci's mempool recorder to record timestamps of transactions submitted to the Bitcoin P2P network over a time span of 3 months, from 8/8/19 until 11/19/19. In total, we collected timestamps for 32.98 million transactions, 99.94% of all transactions that were included in the blockchain during that epoch. While the timestamps observed by different nodes may very, this delay is small: compared to timestamps collected by blockchain.com, our timestamps lag by an average of 0.9 (± 0.3) seconds.</p><p>Bitcoin Core produces fee estimates in two modes: a conservative mode that is supposed to be less impacted by shortterm drops in fee levels <ref type="bibr" target="#b20">[21]</ref> (the default mode of the RPC interface), and a more aggressive economic mode that is used for transactions using replace-by-fee (RBF), a transaction replacement option allowing users to increase transaction fees after submitting a transaction to the network (the default mode of the wallet GUI). We collected fee estimates in the conservative mode every ten seconds during this time frame. While this mode may err on the side of higher fees (and thus faster inclusion), we chose it because it does not require accounting for replaced transactions, something BlockSci does not track.</p><p>Identifying Bitcoin Core transactions. To identify Bitcoin Core transactions, we first filter for transactions that set a non-zero locktime, a characteristic of the Bitcoin Core client <ref type="bibr" target="#b21">[22]</ref>. Then, we select transactions that have RBF disabled. This yields a subset of 4,589,246 transactions out of the 32.98 million transactions we collected timestamps for (13.9 %). Next, we identify transactions where the fees paid by the transaction matches the estimate we recorded for one of the common target times. A manual inspection shows very little variance around our recorded estimate, hence we choose to consider all transactions that are within a threshold of ±5 satoshi. If paid fees overlap with estimates for multiple targets, we select the shortest target time. This selection yields 981,214 transactions.</p><p>Analyzing calibration. For these transactions we calcu-late the difference between Bitcoin Core's targeted inclusion times at the 60 %, 85 % and 95 % quantiles and the actual inclusion times (shown in <ref type="table" target="#tab_9">Table 6</ref> in the appendix). Many transactions get included much earlier than targeted (e.g., 60 % of transactions targeting a 60 minute inclusion are included in under 16.75 minutes). However, the 95 % quantile considerably lags behind (e.g., 59 minutes behind twice the target time for transactions with a 60 minute target). Analyzing variability. However, calibration is not the whole story. We use a regression analysis to better understand how well targeted inclusion time corresponds to actual inclusion times. As the inclusion time is influenced by the block arrival rate, which follows an exponential distribution, we use a Generalized Linear Model with a Gamma distribution (detailed results are provided in <ref type="table" target="#tab_3">Table 10</ref> in the appendix). We include weekly fixed effects to account for gradually changing factors like the hash rate.</p><p>Targeted inclusion time explains a mere 17.2 % of the deviance of the model (a measure of fit compared to a perfect model). This means that despite the use of fee estimation, there is a high degree of uncertainty in the actual inclusion time, primarily due to the inherent randomness introduced by the proof-of-work mining but possibly also the unpredictable behavior of other users.</p><p>Bitcoin Core incorporates the state of the mempool in a relatively straightforward way for fee estimation: if a transaction resides in the mempool longer than the targeted inclusion interval, its fee is considered as insufficient. But another way to use mempool state is as an estimate of the backlog of transactions. We perform another regression where we incorporate the size of the mempool as a predictor, which gives a rough indication of how much fee estimation might be improved by incorporating mempool information in a more sophisticated way. We see that the deviance explained rises to only 22.4 %, suggesting that the limitation is intrinsic.</p><p>We offer two main takeaways from this analysis: Bitcoin users should be careful not to over-rely on the waiting time estimates produced by wallet software, and cryptocurrency researchers and designers should consider alternatives to the pay-as-bid auction employed by Bitcoin that may achieve a tighter relationship between fees and inclusion time.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.4">Improved estimates of the velocity of cryptocurrencies</head><p>The velocity of money is the frequency with which one unit of currency is used for purchases in a unit of time. It can provide an insight into the extent to which money is used as a medium of exchange versus a store of value. In most cases it is not possible to infer the purpose behind a cryptocurrency transaction from the blockchain. However, an alternative definition of the velocity of money is the frequency with which one unit of currency changes possession in any manner (whether or not for purchases of goods and services) in a unit of time. Blockchain analysis may enable estimating the velocity of cryptocurrencies under this definition.</p><p>Even under this simplified definition, it is challenging to estimate the velocity of cryptocurrencies. A naive method would be to compute the total value of transaction outputs in a unit of time and divide it by the total value of the money supply during that period. However, multiple addresses may be controlled by the same entity, and therefore not all transaction outputs represent changes in possession. Meiklejohn et al. call this "self-churn" <ref type="bibr" target="#b2">[3]</ref>, a term that we adopt. The impact of self-churn is visually obvious in the graph of total transaction outputs ( <ref type="figure" target="#fig_11">Figure 9</ref>). We would not expect spikes such as those in early 2017 if the graph reflected actual money demand, which would be much more stable over time.</p><p>To minimize the effect of self-churn, we adopt two heuristics. First, we eliminate outputs controlled by an address that can be linked to one of the inputs' addresses (through address clustering, cf. Section 2.4), ignoring "superclusters" to minimize false positives. This reduces change outputs and transactions that are detectable as an entity "shuffling their money around". We also eliminate outputs that are spent within less than k blocks (we use k = 4). Manual examination suggests that such transactions are highly likely to represent self-churn, such as "peeling chains" where a large output is broken down into a series of smaller outputs in a sequence of transactions.</p><p>The orange line in <ref type="figure" target="#fig_11">Figure 9</ref> shows the daily transaction volume on the Bitcoin blockchain after applying the above two heuristics. With this estimate, the velocity of Bitcoin works out to 1.2 per month averaged over the period January 2017-June 2018, compared to 3.9 with the naive metric, and 0.7 over the period July 2018-December 2019, compared to 2.2 with the naive metric. Our revised estimate is not only much lower but also much more stable over time.</p><p>Starting in 2018 the naive estimate drops closer to our improved estimate. We suppose that this is partially due to scarcity in block space (and a corresponding rise in transaction fees), which encourages intermediaries to batch multiple payments into a single transaction, thereby eliminating some of the self-churn that is evident in the naive estimate earlier. Spikes in the graph, like the one in mid 2019, may represent large intermediaries (e.g., exchanges) moving large amounts of bitcoin to addresses with updated access control structures.</p><p>We note several caveats. First, this still likely fails to exclude some transfers of value between addresses controlled by the same entity. Without ground truth, it is hard to be certain how good the estimate is. Second, it doesn't count transfers of possession that don't touch the blockchain. When exchanges, online wallets, and other intermediaries hold money on behalf of users, payments and transfers of "bitcoins" might happen even though no actual bitcoins changed hands (as only account balances in an internal database need to be updated). Nevertheless, we believe that the metric can be a useful proxy for understanding the use of cryptocurrencies, and possibly for comparing between cryptocurrencies.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.5">Other applications of BlockSci</head><p>Besides our own use, BlockSci has seen a variety of use in both academic and industry settings. We are currently aware of at least 9 peer-reviewed articles, 6 preprints, and 2 software projects that use BlockSci for blockchain analysis (a full list is available online 6 ).</p><p>The dual topics of privacy and forensics are common among these papers. These include information leaks from payments and purchases through intermediaries <ref type="bibr" target="#b3">[4]</ref>, the use of intermediaries to convert between cryptocurrencies <ref type="bibr" target="#b11">[12]</ref>, as well as the identification of entities and the analysis of their behavior in the transaction graph <ref type="bibr" target="#b5">[6,</ref><ref type="bibr" target="#b10">11,</ref><ref type="bibr" target="#b22">[23]</ref><ref type="bibr" target="#b23">[24]</ref><ref type="bibr" target="#b24">[25]</ref>. Many of these results are of interest to law enforcement and regulators, and we have helped regulators use BlockSci for their own investigations. Two other themes are issues surrounding the security and scalability of cryptocurrencies <ref type="bibr" target="#b25">[26]</ref><ref type="bibr" target="#b26">[27]</ref><ref type="bibr" target="#b27">[28]</ref>, as well as economic analyses of cryptocurrencies <ref type="bibr" target="#b28">[29]</ref>.</p><p>BlockSci has also been used as the foundation for specialized blockchain analysis tools. Boshmaf, Al Jawaheri, and Al Sabah <ref type="bibr" target="#b22">[23]</ref> have built a tagging system on top of BlockSci, and the GraphSense blockchain analytics platform uses BlockSci's parser and altcoin support to generate an address graph out of the transaction graph <ref type="bibr" target="#b29">[30]</ref>.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4">Conclusion</head><p>There is a high level of interest in blockchain analysis among developers, researchers, and students, leading to an unmet need for effective analysis tools. While generalpurpose in-memory graph databases exist, a tool customized to blockchain data can take advantage of its append-only nature as well as provide integrated high-performance routines for common tasks such as address linking. </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>A Graph Database Comparison</head><p>We model a simplified transaction graph that contains all important types of nodes but does not include many of the properties that BlockSci provides access to (the resulting graph thus requires less storage than a full layout would require). While many different graph layouts are conceivable, we chose a layout that models the transaction graph as explicitly as possible (cf. <ref type="figure" target="#fig_1">Figure 10</ref>). There are four types of nodes: blocks, transactions, outputs and addresses. Blocks reference included transactions, transactions reference previous outputs that are being spent as well as new outputs being created, and outputs reference the address they send value to. <ref type="table">Table 7</ref> shows the Cypher queries that we used. Minor syntax changes were necessary due to the particularities of the respective import scripts. <ref type="table" target="#tab_11">Table 8</ref> contains the full measurements of our performance analysis. All benchmarks are run on an r5.8xlarge EC2 instance (32 vCPUs, 256 GiB memory, 800 GiB EBS volume).     <ref type="table">Table 9</ref>: Database sizes on disk and when loaded in memory during the benchmark, in GB. Memory consumption is measured after data has been loaded but before queries have been executed. Additional memory may be required to run the queries. For BlockSci, memory usage is lower than storage on disk as not all data is loaded into memory. For Neo4j, the whole graph was loaded into memory using the APOC warmup script <ref type="bibr" target="#b30">[31]</ref> before executing queries for optimal performance.  </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>100M transactions</head></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>BlockSci</head></div><figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_0"><head></head><label></label><figDesc>fees = [ mean ( tx . fee for tx in block ) for block in chain . range ( 'Dec 2019 ')]</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_1"><head>Figure 1 :</head><label>1</label><figDesc>Figure 1: Overview of BlockSci's architecture.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_2"><head>Figure 2 :</head><label>2</label><figDesc>Figure 2: Transaction structure</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_3"><head>[</head><label></label><figDesc>tx for block in chain for tx in block if sum ( txin . value for txin in tx . inputs ) - sum ( txout . value for txout in tx . outputs ) &gt; 10**7]</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_4"><head>[</head><label></label><figDesc>tx for block in chain for tx in block if tx . fee &gt; 10**7]</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_5"><head></head><label></label><figDesc>Tracking ransomware end to end</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_6"><head>Figure 4 :</head><label>4</label><figDesc>Figure 4: Frequency and value of multisig transactions that expose confidential information about access structure changes on the blockchain.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_8"><head>Figure 5 :</head><label>5</label><figDesc>Figure 5: Frequency and value of transactions that weaken multisig security by temporarily sending coins to regular addresses, advertising the presence of a single point of failure.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_9"><head></head><label></label><figDesc>Figure 6: A BTC/BCH address might be used only before the fork (brown), continue to be used only in BTC after the fork (orange), be used only on BCH after the fork (green), etc.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_10"><head>Figure 8 :</head><label>8</label><figDesc>Figure 8: Two single-chain clusters on the BTC blockchain are merged into a cross-chain cluster based on the link between A2 and A3 found in a BCH cluster.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_11"><head>Figure 9 :</head><label>9</label><figDesc>Figure 9: Two estimates of the velocity of bitcoins.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_12"><head>7 :</head><label>7</label><figDesc>Figure 10: Property graph model</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_13"><head>-</head><label></label><figDesc>: not measured, -1 : did not finish in reasonable time (based on other queries and dataset sizes), -2 : ran out of memory, -3 : not applicable w/ index: property indexes created for Tx.locktime and Output.value ST = single-threaded, MT = multithreaded</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_0" validated="false"><head>P2P node</head><label>P2P</label><figDesc></figDesc><table>Parser 

Raw 
blockchain 
data 

JSON-RPC 
importer 

Custom 
importer 

BlockSci 
Full Node Software 

Transaction graph 

Scripts &amp; additional data 

Indexes 

BlockSci Data 

Analysis 
library 

Notebook 
interface 

P2P data 
Price data 
Address tags 

User-supplied data 

</table></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_3" validated="true"><head>Table 1 : BlockSci C++ running time for various queries iter- ating over 610,695 Bitcoin blocks.</head><label>1</label><figDesc></figDesc><table>Iterating over 
Single-threaded Multithreaded 

Tx headers 
6.7 sec 
0.6 sec 
Tx outputs 
9.8 sec 
0.8 sec 
Tx inputs &amp; outputs 
11.3 sec 
0.9 sec 
Headers in random order 
179.1 sec 
Unsupported 

ent interface, the anomalous-fee query can be expressed as 
follows: 

chain . blocks . txes . where ( lambda tx : tx . fee &gt; 
10**7) . to_list () 

</table></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_4" validated="false"><head>Table 2 : BlockSci Python running time for the anomalous-fee query iterating over 610,695 blocks under the three paradigms discussed in Section 2.5.</head><label>2</label><figDesc>value) is faster, and iterating over only the headers is faster still. The above queries benefit from locality of reference. Other queries, especially those involving graph traversal, will not. To simulate this, we iterate over transaction headers in random order. We see that there is a 26-fold slowdown.</figDesc><table>Query type 
Single threaded Multithreaded 

Pure Python 
-
18 hrs 
C++ builtin 
6 min 59 sec 
58.6 sec 
Fluent interface 
38.3 sec 
8.7 sec 

embarrassingly parallel, as seen in the table. Our test machine 
has 16 virtual cores, i.e., 8 physical cores with hyperthreading. 
Executed in parallel, the query finishes under one second. 
The table shows that iterating over only the outputs (e.g., 
finding the max output </table></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_5" validated="false"><head>in the appendix.ST) C++ (MT) Fluent interface (ST) w/o index w/ index</head><label></label><figDesc></figDesc><table>Query 
BlockSci 
Neo4j 
RedisGraph 
Memgraph 
C++ (Tx locktime &gt; 0 
0.31 
0.03 
1.37 
7.84 
0.05 
1.85 
16.44 
Max output value 
0.46 
0.03 
3.91 
26.63 
24.55 
4.48 
40.08 
Calculate fee 
0.57 
0.03 
2.79 
302.73 
303.69 
-1 
187.02 
Satoshi Dice address 
0.49 
N/A 
0.54 
0.95 
0.99 
2.56 
45.91 
Zero-conf outputs 
5.47 
0.32 
18.17 
192.01 
207.41 
1488.93 
59.96 
Locktime change 
7.57 
0.45 
18.21 
208.95 
213.59 
-1 
122.98 

-1 : did not finish within reasonable time (based on other queries and dataset sizes), ST = single-threaded, MT = multi-threaded 

</table></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_6" validated="false"><head>Table 4 :</head><label>4</label><figDesc>Size of the transaction graph under each of 4 possible memory layouts. The 'Current' column refers to the Bitcoin blockchain as of the end of December 2019, which has about 489 million transactions, 1.198 billion inputs and 1.302 billion outputs (including unspent ones).</figDesc><table>Growth (bytes) 
Current 

Current 
24 N tx + 16 N in + 16 N out 50.09 GB 
Normalized 24 N tx + 8 N in + 16 N out 40.50 GB 
Fee cached 32 N tx + 16 N in + 16 N out 54.00 GB 
64-bit 
24 N tx + 24 N in + 24 N out 69.26 GB 

</table></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_8" validated="false"><head>Table 5 :</head><label>5</label><figDesc></figDesc><table>Usage of BlockSci features and data sources in our analyses and selected papers. 

10 0 

10 2 

10 4 

10 6 

10 8 

Value per month (USD) 

2014 2015 2016 2017 2018 2019 2020 
10 0 

10 1 

10 2 

10 3 

10 4 

10 5 

Transactions per month 

Value per month 
Txes per month 

</table></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_9" validated="true"><head>Table 6 :</head><label>6</label><figDesc>Bitcoin Core fee estimates are chosen such that 60 % of past transactions were included within half of the target interval, 85 % included within the target interval, and 95 % within twice the target interval. The differences of actual inclu- sion times with those targeted inclusion times of transactions are shown below.</figDesc><table>Target T 
Difference to target (in minutes) 

60 % (0.5T ) 85 % (T ) 95 % (2T ) 

20 min 
+0.48 
+3.63 
+5.52 
40 min 
-7.00 
-2.90 
+18.47 
60 min 
-13.25 
-2.52 
+58.92 
120 min 
-38.25 
-26.67 
+108.64 
240 min 
-96.53 
-126.35 
-41.58 

</table></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_10" validated="false"><head>Table</head><label></label><figDesc></figDesc><table></table></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_11" validated="false"><head>Table 8 : Average running time in seconds and standard deviation (in parentheses) over five consecutive runs for various graph queries and data set sizes on a r5.8xlarge EC2 instance (32 vCPUs, 256 GiB memory).</head><label>8</label><figDesc></figDesc><table>We used Neo4j v3.5.14, RedisGraph 
</table></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_13" validated="false"><head>Table 10 :</head><label>10</label><figDesc></figDesc><table>GLM regression of the time until inclusion for transactions (in minutes) with and without the current size of the 
mempool and weekly fixed effects, fitted using a Gamma distribution with identity link function. 

target only 
target + FE 
w/ mempool + FE 

(Intercept) 
4.1626 *** 
-1.2849 *** 
-5.3453 *** 

(0.098) 
(0.390) 
(0.318) 

Target time 
0.54741 *** 
0.4955 *** 
0.2981 *** 

(0.003) 
(0.003) 
(0.002) 

Mempool size 
0.0019 *** 

(&lt;0.001) 

Weekly fixed effects 
No 
Yes 
Yes 

Deviance explained 
0.1591 
0.1724 
0.2238 
Nagelkerke R 2 
0.2002 
0.2163 
0.2774 

N 
981 212 
981 212 
981 212 

(. . . ) = standard error. Significance level code: ***p&lt;0.001. </table></figure>

			<note place="foot" n="3"> There is some uncertainty because we can only determine whether a P2SH script wraps a multisig script or some other kind of script once it has been spent. However, past data suggests that most of the value in P2SH outputs indeed correspond to multisig.</note>

			<note place="foot" n="4"> https://blockchain.info/tx/96d95eb77ae1663ee6a6dbcebbbd4 fc7d7e49d4784ffd9f5e1f3be6cd5f3a978 5 https://www.chainalysis.com/</note>

			<note place="foot" n="6"> https://citp.github.io/BlockSci/studies/ BlockSci has already been widely used as a research and educational tool. We hope it will continue to be broadly useful, and plan to keep maintaining it as open-source software.</note>
		</body>
		<back>

			<div type="acknowledgement">
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Acknowledgments</head><p>We are grateful to Lucas Mayer for prototype code, Danny Yuxing Huang, Pranay Anchuri, Shaanan Cohney, Rainer Böhme, Michael Fröwis, Jakob Hollenstein, Jason Anastasopoulos, Sarah Meiklejohn, and Dillon Reisman for useful discussions, and Chainalysis for providing access to their Reactor tool. We also thank the anonymous USENIX Security reviewers, the reviewers of the artifact evaluation process and our shepherd Anita Nikolich for their feedback. This work is supported by NSF grants CNS-1421689 and CNS-1651938, a grant from the Ripple University Blockchain Research Initiative, the European Union's Horizon 2020 research and innovation programme under grant agreement No. 740558, the Austrian FFG's KIRAS programme under project VIRTCRIME, and an NSF Graduate Research Fellowship under grant number DGE-1148900.</p></div>
			</div>

			<div type="references">

				<listBibl>

<biblStruct xml:id="b0">
	<monogr>
				<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Frank</forename><surname>Mcsherry</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Michael</forename><surname>Isard</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Derek</forename><forename type="middle">Gordon</forename><surname>Murray</surname></persName>
		</author>
		<ptr target="https://www.usenix.org/conference/hotos15/workshop-program/presentation/mcsherry(vis-itedon06/12/2020" />
		<title level="m">Scalability! But at what COST?&quot; In: Proceedings of the 15th Workshop on Hot Topics in Operating Systems (HotOS XV)</title>
		<imprint>
			<date type="published" when="2015-05" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b1">
	<monogr>
		<title level="m" type="main">Facebook Database Engineering Team. RocksDB. A persistent key-value store for fast storage environments. Version 6.10.2</title>
		<ptr target="https://rocksdb.org/" />
		<imprint>
			<date type="published" when="2020-06-05" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b2">
	<analytic>
		<title level="a" type="main">A Fistful of Bitcoins: Characterizing Payments Among Men with No Names</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Sarah</forename><surname>Meiklejohn</surname></persName>
		</author>
		<idno type="doi">DOI:10.1145/2504730.2504747</idno>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 2013 Internet Measurement Conference (IMC)</title>
		<meeting>the 2013 Internet Measurement Conference (IMC)</meeting>
		<imprint>
			<date type="published" when="2013-10" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b3">
	<analytic>
		<title level="a" type="main">When the cookie meets the blockchain: Privacy risks of web payments via cryptocurrencies</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Steven</forename><surname>Goldfeder</surname></persName>
		</author>
		<idno>DOI: 10.1515/ popets-2018-0038</idno>
	</analytic>
	<monogr>
		<title level="m">Proceedings on Privacy Enhancing Technologies</title>
		<meeting>on Privacy Enhancing Technologies</meeting>
		<imprint>
			<date type="published" when="2018-10" />
			<biblScope unit="volume">2018</biblScope>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b4">
	<monogr>
		<title level="m" type="main">Lock-free parallel disjoint set data structure</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Jakob</forename><surname>Wenzel</surname></persName>
		</author>
		<ptr target="https://github.com/wjakob/dset" />
		<imprint>
			<date type="published" when="2020-06-14" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b5">
	<monogr>
		<title level="m" type="main">Safeguarding the Evidential Value of Forensic Cryptocurrency Investigations</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Michael</forename><surname>Fröwis</surname></persName>
		</author>
		<idno type="arXiv">arXiv:1906.12221</idno>
		<imprint>
			<date type="published" when="2019-07-28" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b6">
	<monogr>
		<title level="m" type="main">pybind11 -Seamless operability between C++11 and Python. Version 2.5.0</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Jakob</forename><surname>Wenzel</surname></persName>
		</author>
		<ptr target="https://github.com/pybind/pybind11" />
		<imprint>
			<date type="published" when="2020-03-31" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b7">
	<monogr>
		<title/>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Martin</forename><surname>Fowler</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Fluentinterface</surname></persName>
		</author>
		<ptr target="https://www.martinfowler.com/bliki/FluentInterface.html" />
		<imprint>
			<date type="published" when="2020-12-20" />
		</imprint>
	</monogr>
	<note>visited on 02/14/2020</note>
</biblStruct>

<biblStruct xml:id="b8">
	<monogr>
		<title level="m" type="main">Design and applications of a blockchain analysis platform</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Harry</forename><surname>Kalodner</surname></persName>
		</author>
		<idno type="arXiv">arXiv:1709.02489</idno>
		<imprint>
			<date type="published" when="2017" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b9">
	<analytic>
		<title level="a" type="main">Privacy and Linkability of Mining in Zcash</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Alex</forename><surname>Biryukov</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Daniel</forename><surname>Feher</surname></persName>
		</author>
		<idno type="doi">DOI:10.1109/CNS.2019.8802711</idno>
	</analytic>
	<monogr>
		<title level="m">2019 IEEE Conference on Communications and Network Security (CNS)</title>
		<imprint>
			<date type="published" when="2019-06" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b10">
	<analytic>
		<title level="a" type="main">Tracking Ransomware End-to-end</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Danny Yuxing</forename><surname>Huang</surname></persName>
		</author>
		<idno type="doi">DOI:10.1109/SP.2018.00047</idno>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 39th IEEE Symposium on Security &amp; Privacy (S&amp;P)</title>
		<meeting>the 39th IEEE Symposium on Security &amp; Privacy (S&amp;P)</meeting>
		<imprint>
			<date type="published" when="2018-05" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b11">
	<analytic>
		<title level="a" type="main">Tracing Transactions Across Cryptocurrency Ledgers</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Haaroon</forename><surname>Yousaf</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">George</forename><surname>Kappos</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Sarah</forename><surname>Meiklejohn</surname></persName>
		</author>
		<ptr target="https://www.usenix.org/conference/usenixsecurity19/presentation/yousaf(vis-itedon06/13/2020" />
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 28th USENIX Security Symposium (USENIX Security)</title>
		<meeting>the 28th USENIX Security Symposium (USENIX Security)</meeting>
		<imprint>
			<date type="published" when="2019-08" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b12">
	<analytic>
		<title level="a" type="main">Threshold-Optimal DSA/ECDSA Signatures and an Application to Bitcoin Wallet Security</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Rosario</forename><surname>Gennaro</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Steven</forename><surname>Goldfeder</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Arvind</forename><surname>Narayanan</surname></persName>
		</author>
		<idno type="doi">DOI:10.1007/978-3-319-39555-5_9</idno>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 14th International Conference on Applied Cryptography and Network Security (ACNS)</title>
		<meeting>the 14th International Conference on Applied Cryptography and Network Security (ACNS)</meeting>
		<imprint>
			<date type="published" when="2016-06" />
			<biblScope unit="volume">9696</biblScope>
		</imprint>
	</monogr>
	<note>LNCS</note>
</biblStruct>

<biblStruct xml:id="b13">
	<analytic>
		<title level="a" type="main">Efficient signature generation by smart cards</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Claus-Peter</forename><surname>Schnorr</surname></persName>
		</author>
		<idno type="doi">DOI:10.1007/BF00196725</idno>
	</analytic>
	<monogr>
		<title level="j">In: Journal of Cryptology</title>
		<imprint>
			<biblScope unit="volume">4</biblScope>
			<date type="published" when="1991" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b14">
	<monogr>
		<title level="m" type="main">Technology roadmap -Schnorr signatures and signature aggregation</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Bitcoin</forename><surname>Core</surname></persName>
		</author>
		<ptr target="https://bitcoincore.org/en/2017/03/23/schnorr-signature-aggregation/" />
		<imprint/>
	</monogr>
	<note>visited on 06/07/2020</note>
</biblStruct>

<biblStruct xml:id="b15">
	<analytic>
		<title level="a" type="main">Bitcoin Cash: Coexistence or Downfall of Bitcoin Cash?</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Yujin</forename><surname>Kwon</surname></persName>
		</author>
		<idno type="doi">DOI:10.1109/SP.2019.00075</idno>
	</analytic>
	<monogr>
		<title level="m">In: Proceedings of the 40th IEEE Symposium on Security &amp; Privacy (S&amp;P)</title>
		<imprint>
			<date type="published" when="2019-05" />
		</imprint>
	</monogr>
	<note>Bitcoin vs</note>
</biblStruct>

<biblStruct xml:id="b16">
	<analytic>
		<title level="a" type="main">Short Paper: An Empirical Analysis of Monero Cross-chain Traceability</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Abraham</forename><surname>Hinteregger</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Bernhard</forename><surname>Haslhofer</surname></persName>
		</author>
		<idno type="doi">DOI:10.1007/978-3-030-32101-7_10</idno>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 23th International Conference on Financial Cryptography and Data Security (FC)</title>
		<meeting>the 23th International Conference on Financial Cryptography and Data Security (FC)</meeting>
		<imprint>
			<date type="published" when="2019-02" />
			<biblScope unit="volume">11598</biblScope>
		</imprint>
	</monogr>
	<note>Computer Science (LNCS)</note>
</biblStruct>

<biblStruct xml:id="b17">
	<monogr>
		<title level="m" type="main">Bitcoin Gold Wallet Scam Sees Fraudsters Steal $3.2 Million. CCN Markets</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Francisco</forename><surname>Memoria</surname></persName>
		</author>
		<ptr target="https://www.ccn.com/bitcoin-gold-wallet-scam-nets-fraudsters-3-2-million-after-stealing-users-private-keys/" />
		<imprint>
			<date type="published" when="2017-11-24" />
		</imprint>
	</monogr>
	<note>visited on 02/14/2020</note>
</biblStruct>

<biblStruct xml:id="b18">
	<analytic>
		<title level="a" type="main">Redesigning Bitcoin&apos;s fee market</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Ron</forename><surname>Lavi</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Or</forename><surname>Sattath</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Aviv</forename><surname>Zohar</surname></persName>
		</author>
		<idno type="doi">DOI:10.1145/3308558.3313454</idno>
	</analytic>
	<monogr>
		<title level="m">Companion Proceedings of the The Web Conference (WWW)</title>
		<imprint>
			<date type="published" when="2019-05" />
			<biblScope unit="page">2019</biblScope>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b19">
	<monogr>
		<title level="m" type="main">Towards a Functional Fee Market for Cryptocurrencies</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Soumya</forename><surname>Basu</surname></persName>
		</author>
		<idno type="doi">DOI:10.2139/ssrn.3318327</idno>
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b20">
	<monogr>
		<title level="m" type="main">Version 0</title>
		<idno>19.0</idno>
		<ptr target="https://bitcoincore.org/en/doc/0.19.0/rpc/util/estimatesmartfee/(vis-itedon02/15/2020" />
		<imprint/>
	</monogr>
	<note>Bitcoin Core. estimatesmartfee (0.19.0 RPC</note>
</biblStruct>

<biblStruct xml:id="b21">
	<monogr>
		<title level="m" type="main">Discourage fee sniping with nLockTime. Pull Request #2340</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Peter</forename><surname>Todd</surname></persName>
		</author>
		<ptr target="https://github.com/bitcoin/bitcoin/pull/2340(vis-itedon06/14/2020" />
		<imprint>
			<date type="published" when="2014" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b22">
	<analytic>
		<title level="a" type="main">BlockTag: Design and Applications of a Tagging System for Blockchain Analysis</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Yazan</forename><surname>Boshmaf</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Al</forename><surname>Husam</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Jawaheri</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Sabah</surname></persName>
		</author>
		<idno type="doi">DOI:10.1007/978-3-030-22312-0_21</idno>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 34th IFIP TC11 Information Security Conference &amp; Privacy Conference</title>
		<meeting>the 34th IFIP TC11 Information Security Conference &amp; Privacy Conference</meeting>
		<imprint>
			<date type="published" when="2019-06" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b23">
	<analytic>
		<title level="a" type="main">Characterizing Entities in the Bitcoin Blockchain</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Marc</forename><surname>Jourdan</surname></persName>
		</author>
		<idno type="doi">DOI:10.1109/ICDMW.2018.00016</idno>
	</analytic>
	<monogr>
		<title level="m">2018 IEEE International Conference on Data Mining Workshops (ICDMW)</title>
		<imprint>
			<date type="published" when="2018-10" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b24">
	<monogr>
		<title level="m" type="main">Characterizing Bitcoin donations to open source software on GitHub</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Yury</forename><surname>Zhauniarovich</surname></persName>
		</author>
		<idno type="arXiv">arXiv:1907.04002</idno>
		<imprint>
			<date type="published" when="2019-07-09" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b25">
	<analytic>
		<title level="a" type="main">Committing to quantum resistance: a slow defence for Bitcoin against a fast quantum computing attack</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Iain</forename><surname>Stewart</surname></persName>
		</author>
		<idno type="doi">DOI:10.1098/rsos.180410</idno>
	</analytic>
	<monogr>
		<title level="j">Royal Society Open Science</title>
		<imprint>
			<biblScope unit="volume">5</biblScope>
			<biblScope unit="issue">6</biblScope>
			<date type="published" when="2018-06" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b26">
	<analytic>
		<title level="a" type="main">Another coin bites the dust: an analysis of dust in UTXO-based cryptocurrencies</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Cristina</forename><surname>Pérez-Solà</surname></persName>
		</author>
		<idno type="doi">DOI:10.1098/rsos.180817</idno>
	</analytic>
	<monogr>
		<title level="j">Royal Society Open Science</title>
		<imprint>
			<biblScope unit="volume">6</biblScope>
			<biblScope unit="issue">1</biblScope>
			<date type="published" when="2019-01-01" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b27">
	<monogr>
		<title level="m" type="main">Analysis of the SegWit adoption in Bitcoin</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Cristina</forename><surname>Pérez-Solà</surname></persName>
		</author>
		<ptr target="https://deic-web.uab.cat/~guille/publications/papers/2018.recsi.segwit.pdf" />
		<imprint/>
	</monogr>
	<note>visited on 06/13/2020</note>
</biblStruct>

<biblStruct xml:id="b28">
	<analytic>
		<title/>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Bruno</forename><surname>Biais</surname></persName>
		</author>
		<idno type="doi">DOI:10.2139/ssrn.3261063</idno>
	</analytic>
	<monogr>
		<title level="j">Equilibrium Bitcoin Pricing</title>
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b29">
	<analytic>
		<title level="a" type="main">O Bitcoin Where Art Thou? Insight into Large-Scale Transaction Graphs</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Bernhard</forename><surname>Haslhofer</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Roman</forename><surname>Karl</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Erwin</forename><surname>Filtz</surname></persName>
		</author>
		<idno>1695/paper20.pdf</idno>
		<ptr target="http://ceur-ws.org" />
	</analytic>
	<monogr>
		<title level="m">Joint Proceedings of the Posters and Demos Track of the 12th International Conference on Semantic Systems and the 1st International Workshop on Semantic Change &amp; Evolving Semantics (SuCCESS&apos;16). Sept. 13</title>
		<imprint>
			<date type="published" when="2016" />
		</imprint>
	</monogr>
	<note>visited on 06/14/2020</note>
</biblStruct>

<biblStruct xml:id="b30">
	<monogr>
				<ptr target="https://neo4j.com/labs/apoc/(visitedon06/14/2020" />
		<title level="m">Neo4j Labs. Awesome Procedures On Cypher (APOC)</title>
		<imprint>
			<date type="published" when="2020-05-23" />
		</imprint>
	</monogr>
</biblStruct>

				</listBibl>
			</div>
		</back>
	</text>
</TEI>
