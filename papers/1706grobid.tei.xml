<?xml version="1.0" encoding="UTF-8"?>
<TEI xmlns="http://www.tei-c.org/ns/1.0" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
xsi:schemaLocation="http://www.tei-c.org/ns/1.0 /Users/atharsefid/Desktop/grobid-0.5.3/grobid-home/schemas/xsd/Grobid.xsd"
 xmlns:xlink="http://www.w3.org/1999/xlink">
	<teiHeader xml:lang="en">
		<encodingDesc>
			<appInfo>
				<application version="0.5.3" ident="GROBID" when="2020-09-29T02:07+0000">
					<ref target="https://github.com/kermitt2/grobid">GROBID - A machine learning software for extracting information from scholarly documents</ref>
				</application>
			</appInfo>
		</encodingDesc>
		<fileDesc>
			<titleStmt>
				<title level="a" type="main">A Tool for Teaching Reverse Engineering</title>
			</titleStmt>
			<publicationStmt>
				<publisher/>
				<availability status="unknown"><licence/></availability>
			</publicationStmt>
			<sourceDesc>
				<biblStruct>
					<analytic>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Clark</forename><surname>Taylor</surname></persName>
							<affiliation key="aff0">
								<orgName type="department">Department of Computer Science</orgName>
								<orgName type="institution">University of Arizona</orgName>
							</affiliation>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Christian</forename><surname>Collberg</surname></persName>
							<affiliation key="aff0">
								<orgName type="department">Department of Computer Science</orgName>
								<orgName type="institution">University of Arizona</orgName>
							</affiliation>
						</author>
						<title level="a" type="main">A Tool for Teaching Reverse Engineering</title>
					</analytic>
					<monogr>
						<imprint>
							<date/>
						</imprint>
					</monogr>
				</biblStruct>
			</sourceDesc>
		</fileDesc>
		<profileDesc>
			<abstract>
				<p>Tigress is a freely available source-to-source, C language code obfuscator. The tool allows users to ob-fuscate existing programs or programs randomly generated by Tigress itself. Tigress is highly flexible, providing a large number of standard obfuscating code transformations, and many variants of each transformation. Tigress may be used in many contexts, but in this paper we describe its use in teaching code reverse engineering techniques. In order to make Tigress easily available and usable to educators and students, we have integrated Tigress into a web application. In addition to directly benefiting education, this new web application offers unique ways to advance research on code obfuscation and reverse engineering.</p>
			</abstract>
		</profileDesc>
	</teiHeader>
	<text xml:lang="en">
		<body>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="1">Introduction</head><p>In computer science, and computer security in particular, students often learn skills through exercises. Instructors generate the exercises with the goal of mimicking situations found in the real world. However, generating exercises can be both time consuming and difficult; without automation, instructors cannot easily generate individualized challenges for students, but rather must assign and manually administer a single problem to the entire class. Students, on the other hand, often spend significant amounts of time setting up an environment in which they have the tools necessary to solve the problem.</p><p>Instruction in code reverse engineering suffers from a lack of easy to use tools to resolve these difficulties. Here, we confront these problems by combining Tigress <ref type="bibr">[1]</ref>-an automated C language, source-to-source code obfuscator-with a web application. This application allows the instructor to generate individualized target programs for students to reverse engineer. Each program consists of automatically generated random code which has been obfuscated with a set of transformations. The complexity of the resulting target program can be configured by the instructor. The web application then generates virtual machines (VMs) which, in addition to the target program, have been configured with reverse engineering tools selected by the instructor. The students download the VM, deobfuscate the code with the provided tools, and upload the results back to the web application. Grading the results can be both automatic and manual.</p><p>During the process described above, the VMs may also collect information about the tools, methods, and processes the students used to solve the exercises. The resulting data sets may reveal the most effective reverse engineering practices, both in actual code deobfuscation as well as in instruction.</p><p>Our paper is organized as follows: First, we review previous work. Second, we describe our proposed system. Third, we present our current implementation. Finally, we discuss our experiences in employing this implementation.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2">Related Work</head><p>The skills taught by the system we propose include basic reverse engineering methodology and use of standard tools. As an educational tool, our work expands on other developments in teaching computer security skills, particularly drawing from competition-based systems such as picoCTF <ref type="bibr" target="#b0">[2]</ref> and iCTF <ref type="bibr" target="#b1">[3]</ref>.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.1">Reasons for Reverse Engineering</head><p>Cipresso <ref type="bibr" target="#b2">[4]</ref> provides an overview of the applications and goals of software reverse engineering. He identifies two legitimate reasons for reverse engineering code: (1) to understand, patch, and maintain legacy code; and (2) to determine the function of an unknown piece of software for security purposes <ref type="bibr" target="#b2">[4]</ref>. Other, less legitimate reasons for reverse engineering include gaining access to closed-source code which may be protected by legal or ethical standards such as intellectual property law or national security policies. The legitimate uses inspire the goals of the project here: we wish to educate and train future security professionals in the art of software reverse engineering. In particular, we focus on (2): we want to provide training in how to reverse engineer purposefully obfuscated code. Such training will provide the students with the necessary skills to reverse engineer malware.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.2">Computer Security Competition</head><p>Computer security competitions have become very popular <ref type="bibr" target="#b0">[2,</ref><ref type="bibr" target="#b1">3]</ref>. They take various forms and have different motives: while some seek to train, others emphasize the competitive and entertainment aspects of breaking and entering. Competitions often include challenges which distribute obfuscated code for varying forms of analysis. Typically, these codes have been designed and obfuscated by hand by those managing the competition. Competitors download and deobfuscate the code and extract from it some meaning or token <ref type="bibr" target="#b0">[2]</ref>. Some competitions also require peerto-peer code development and reverse engineering. In such cases, competitors must reverse engineer other competitors' code in order to advance towards a goal such as gaining access to a system <ref type="bibr" target="#b1">[3]</ref>.</p><p>In addition to general computer security competitions, there exist several competitions whose sole purpose is to create <ref type="bibr" target="#b3">[5]</ref> or reverse engineer <ref type="bibr" target="#b4">[6]</ref> obfuscated code. Often, these competitions function as boundary-pushers, testing the latest tools and methods of code obfuscation and reverse engineering. Some competitions offer polymorphic challenges to add some randomization <ref type="bibr" target="#b5">[7]</ref>.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.3">Reverse Engineering Tools</head><p>Several code reverse engineering tools have been demonstrated to be effective <ref type="bibr" target="#b6">[8]</ref>. Examples include IDA <ref type="bibr" target="#b7">[9]</ref>, GDB <ref type="bibr" target="#b8">[10]</ref>, OllyDbg <ref type="bibr">[11]</ref>, Valgrind <ref type="bibr" target="#b9">[12]</ref>, and the angr framework <ref type="bibr">[13]</ref>. IDA is a debugger with an extensive graphical user interface that visualizes the control flow of binaries. GDB-the familiar command line debugger-has several functions which may be used for reverse engineering, including disassembly, debugging, and direct modification of executable images. OllyDbg is another debugger which contains several features that track the machine state and software interaction. Valgrind is a virtualizing debugger framework which includes prebuilt tools for code execution tracing. The angr tool is a new binary analysis framework with several components that allow users to programmatically disassemble, simulate the execution of, and trace data in binaries. In the system we propose here we make these, and other, tools available to the students.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.4">Automated Code Obfuscation</head><p>Automated code obfuscation comes in several varieties. First, some pieces of software integrate obfuscation into their own code. This is typical of viruses, which self-obfuscate in order to avoid detection <ref type="bibr" target="#b10">[14]</ref>. Second, there exist a wide variety of stand-alone tools available to obfuscate code <ref type="bibr" target="#b11">[15,</ref><ref type="bibr" target="#b12">16]</ref>. An obfuscating transformation changes the form of a piece of code, while maintaining its semantics, in order to impede analysis by human reverse engineers or by automatic deobfuscation tools <ref type="bibr" target="#b14">[17]</ref>.</p><p>Of these tools, Tigress <ref type="bibr">[1]</ref> is a freely available tool that offers a large collection of transformations. It operates on the C language at the source code level. Tigress has built-in features which allow randomized code generation as well as randomized code transformations. In this project we use Tigress to create new reverse engineering challenges, first by generating random code and then by obfuscating this code.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3">Proposed System</head><p>In order to teach code reverse engineering skills, in this paper we propose a system which automatically generates and administers reverse engineering exercises for students to complete. This system contains several features, outlined below, which we implemented in part.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.1">Administrative Functions</head><p>Previously, reverse engineering exercises were generated by hand or from scripts. These challenges had to be individually handled in an ad-hoc fashion over general tools like email. This legacy process creates a large amount of manual overhead in administering exercises, as the instructor must create individual challenges for individual students, distribute those challenges individually, accept and aggregate the answers individually, and grade them-individually. Scripting can help in some of these aspects, but an automated system promises to simplify the process further. Thus, the goal of our system is to require only a small amount of instructor input to create and administer a challenge set.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.2">Randomization</head><p>Reverse engineering competitions do not typically generate individualized targets. In fact, we could not find an example of a system or script that generates randomized reverse engineering problems beyond limited application of simple polymorphic algorithms to otherwise identical code. In a competitive setting such randomization may not be necessary. Pedagogical settings, by contrast, require randomization, as it allows instructors to effectively eliminate problems related to students sharing work or finding previous solutions.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.3">Tools and Challenge Distribution</head><p>Code reverse engineering employs a variety of methodologies and tools. Teaching effective reverse engineering skills necessarily requires instruction in the use of these tools. It is important to make the tools available to the students in an effective and efficient manner, allowing them to quickly begin to solve problems. Our system includes dynamically configured VMs which provide a pre-built environment to students, with reverse engineering tools already installed. Additionally, these VMs include the actual challenge code, eliminating the step of downloading the obfuscated code manually. Students must only download a single VM file from our system, load it into a VM player, and begin to solve problems.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.4">Data Collection</head><p>One goal of our system is to create data sets which may be used to evaluate the methods, techniques, and tools used in reverse engineering. Requiring students to use pre-configured VMs allows us to add data collection software. This software may collect various pieces of information from students while they solve challenges: running processes, screenshots, network traffic, system kernel modules, and even high-resolution data from reverse engineering tools. Our goal is to use this data to evaluate pedagogical methodologies and instruction as well as monitor progress. Additionally, these data sets could be used to determine the most effective modes of reverse engineering code, which in turn aids analysis of the effectiveness of code obfuscation itself <ref type="bibr" target="#b15">[18]</ref>.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.5">Application Functionality</head><p>We will next consider the three main steps in how our proposed system is used: create a challenge, solve a challenge, and grade a challenge. As shown in <ref type="figure" target="#fig_1">Fig- ure 1</ref>, each of these steps has several parts. Typically, a challenge is created by an instructor by combining a VM configuration and a target program configuration. The latter is a list of command line arguments for the Tigress obfuscator to create a random program with certain characteristics and then to obfuscate this pro-   gram with a particular set of transformations. Once created, a student downloads the challenge, solves the task, and submits the answer. This creates a challenge submission, which contains the solution. The instructor then invokes automatic grading or enters grades manually.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4">Implementation</head><p>We implemented the system described above in part; some features are not yet complete.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.1">Architecture</head><p>Our implementation utilizes standard web components: a web server connected to a database. Typical administrative data-including authentication information and data dictating instructor-challengestudent relationships-is stored in the database, as is challenge data such as obfuscation configurations. The web server interacts with the native operating system and file system in order to call Tigress, giving it flags and files to obfuscate. The web application stores the non-obfuscated and final files in a database for download by students and subsequent grading.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.2">Challenge Creation</head><p>In configuring a challenge, instructors may upload a base file with which to start obfuscation. Alternatively, Tigress may also generate a random file upon which to perform obfuscation, ensuring that students receive unique problems; it does this by accepting certain arguments (specified by the instructor) with which it creates random C code with random variables and functions structured in random ways but which always include particular features to reverse engineer <ref type="bibr">[1]</ref>. Once the target program is defined, our system uses Tigress to execute selected obfuscating transforms on the target program. These steps introduce further randomness by arbitrarily selecting transform-dependent variables such as function ordering. <ref type="figure" target="#fig_2">Figure 2</ref> illustrates how Tigress creates two types of problems: source code reverse engineering and binary cracking.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.3">Virtual Machines</head><p>Currently, our implementation only provides a statically configured VM for students to download. The VM provided is a Kali <ref type="bibr" target="#b16">[19]</ref> distribution with the addition of IDA (demo version) and angr. This falls short of the all-in-one solution presented above. However, dynamically generating unique VMs has thus far proven to be too slow and the resulting files too large. To resolve these difficulties in future work, we are considering using dockers and provisioners.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.4">Grading</head><p>The current implementation only allows manual challenge grading. Instructors may review submitted and base files to determine whether the student solved the problem. Grades are then be entered into the system, stored in the database, and then made available for students to review.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5">Use and Results</head><p>We used our current system to create and administer two challenges for a computer security course. Despite a few small and typical bugs, students were able to download challenge code, solve those challenges, and upload answers. Two challenges were offered, the second more difficult than the first; students were required to answer one of the two problems.</p><p>The easier problem consists of a program that checks the current time before printing a variable. If the time check is not adequately met, then the program produces a segmentation fault. Students were to alter the binary and eliminate the time check and thus unlock an output calculated from a myriad of operations. The time check and variable calculation function is shown in <ref type="figure">Figure 3</ref>. The second problem is similar to the first but adds an additional aspect: in addition to the time check students must also eliminate a password check.</p><p>In the submission file, students are required to state the level of difficulty they encountered and the amount of time they spent solving the problem. We only analyzed files submitted for the first, easier problem, as only two students submitted answers for the void SECRET( unsigned long i n p u t <ref type="bibr">[ 1 ]</ref> , unsigned long ou tp ut <ref type="bibr">[ 1 ]</ref> ) { unsigned long s t a t e <ref type="bibr">[ 1 ]</ref> ; // V a r i a b l e d e c l a r a t i o n unsigned long ( * o u t p u t r e f ) <ref type="bibr">[ 1 ]</ref> = ou tp ut ; unsigned i n t copy15 , copy16 , copy12 ; unsigned short copy17 ; { s t a t e [ 0UL ] = ( i n p u t [ 0UL ] &lt;&lt; 3UL) | ( i n p u t [ 0UL ] &gt;&gt; 61UL) ; // I n i t i a l e x p a n s i o n o f t h e i n p u t copy12 = * ( ( unsigned i n t * ) (&amp; s t a t e [ 0UL ] ) + 1 ) ; second, harder problem. <ref type="figure">Figure 4</ref> displays a summary of students' reported level of difficulty; most found the problem either easy or hard. This likely corresponds to students' prior experience. Some of the difficulty students encountered derived from minor issues with the new system implementation and process; examples of such issues include difficulty of downloading the VM as well as general problems with VM players. We see that students spent an average of about 5.5 hours solving the problem; the distribution of student time spent solving problems is shown in <ref type="figure">Figure 5</ref> 1 . Most students were able to complete the assignment, which indicates that our system provided an effective means of generating and administering reverse engineering challenges. Additionally, students' general ability to complete the assigned challenge in a reasonable amount of time indicates that the assignment was likely successful in teaching reverse engineering skills to the students here.</p><formula xml:id="formula_0">* ( ( unsigned i n t * ) (&amp; s t a t e [ 0UL ] ) + 1 ) = * ( ( unsigned i n t * ) (&amp; s t a t e [ 0UL ] ) + 0 ) ; * ( ( unsigned i n t * ) (&amp;</formula></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="6">Future Work</head><p>Our current focus is to improve the current system implementation to bring it closer to the proposed system. The current system lacks dynamic VM creation; the problems we encountered when implementing this must be resolved in the future. We will furthermore incorporate data collection facilities in order to generate usage data for analysis. Finally, we will add facilities to support semi-automatic grading. The latter poses significant problems. Some generated challenges require finding some type of hidden token and may be easily graded. Determining whether a submission has successfully reverse engineered a more general obfuscated target program, however, is less straightforward. In such cases, there exist two criteria a grader must consider. First, the grader must determine identical functionality between the target program and the supposedly deobfuscated submission. This may be accomplished by comparing input and output of the target and submitted programs. Second, the grader must be able to determine whether the submitted program has successfully <ref type="bibr">1</ref> The data presented here has been ruled IRB exempt by the University of Arizona. deobfuscated the target program-that is, whether the submitted program is the equivalent of the nonobfuscated version of the target program. Control flow graphs comparisons may aid in determining that equivalence <ref type="bibr" target="#b17">[20]</ref>.</p><p>In addition to these concrete improvements on the current implementation, future work encompasses work on creating novel challenge generation scripts as well as additional work on Tigress. As more challenges are developed by instructors, they may be easily shared with instructors everywhere. Due to randomization, challenge reuse does not pose a problem; students will not be able find or share answers to randomized exercises.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="7">Conclusion</head><p>Reverse engineering code is a vital skill in several fields within Computer Science. Teaching reverse engineering and, in particular, contemporary methods and tools used in reverse engineering is not an easy task. Without automation, instructors have to manually obfuscate uniform code they themselves develop. This paper proposes an application which automates the process and describes our initial implementation of that system. Using the Tigress C source code obfuscator, our application allows instructors to automatically create randomized obfuscated code for individual students; instances of challenges that students download share only general objectives but not common code. Providing a virtual environment preconfigured with common reverse engineering tools further simplifies the learning process.</p><p>Initial results demonstrate the efficacy of the current implementation of the system. Further development of this system holds additional promise by enabling the generation of data sets useful for research in reverse engineering.</p></div><figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_0"><head>(</head><label></label><figDesc>a) Alice uploads a Challenge package, which Bob uses to generate his Challenge. (b) Bob solves and uploads his Challenge, which Alice then grades.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_1"><head>Figure 1 :</head><label>1</label><figDesc>Figure 1: This shows the basic use cases. Alice is an instructor and Bob is a student.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_2"><head>Figure 2 :</head><label>2</label><figDesc>Figure 2: This displays the two current types of Challenges generated thus far.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_3"><head>Figure 3 :Figure 5 :</head><label>35</label><figDesc>Figure 3: Example generated code.</figDesc></figure>
		</body>
		<back>

			<div type="acknowledgement">
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Acknowledgments</head><p>We thank David Christy for creating, administering, and grading the challenges. This project was funded in part by NSF grant CNS-1145913.</p></div>
			</div>

			<div type="references">

				<listBibl>

<biblStruct xml:id="b0">
	<analytic>
		<title level="a" type="main">PicoCTF: A Game-Based Computer Security Competition for High School Students</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><surname>Chapman</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Burket</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Brumley</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">2014 USENIX Summit on Gaming, Games, and Gamification in Security Education (3GSE 14). USENIX Association</title>
		<imprint>
			<date type="published" when="2014" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b1">
	<analytic>
		<title level="a" type="main">Ten Years of iCTF: The Good, The Bad, and The Ugly</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">G</forename><surname>Vigna</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">K</forename><surname>Borgolte</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Corbetta</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Doupé</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Y</forename><surname>Fratantonio</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">L</forename><surname>Invernizzi</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Kirat</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Y</forename><surname>Shoshitaishvili</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">2014 USENIX Summit on Gaming, Games, and Gamification in Security Education (3GSE 14). USENIX Association</title>
		<imprint>
			<date type="published" when="2014-08" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b2">
	<monogr>
		<title level="m" type="main">Software Reverse Engineering Education</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><surname>Cipresso</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2009" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b3">
	<monogr>
		<title level="m" type="main">The International Obfuscated C Code Contest</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">L</forename><surname>Broukhis</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Cooper</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">L</forename><forename type="middle">C</forename><surname>Noll</surname></persName>
		</author>
		<ptr target="http://www.ioccc.org/" />
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b4">
	<monogr>
		<title level="m" type="main">LayerOne 2016 -(De)Obfuscation Contest</title>
		<ptr target="https://obf.afm.la/" />
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b5">
	<analytic>
		<title level="a" type="main">A Scaffolded, Metamorphic CTF for Reverse Engineering</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">W</forename><surname>Chang Feng</surname></persName>
		</author>
		<ptr target="http://blogs.usenix.org/conference/3gse15/summit-program/presentation/feng" />
	</analytic>
	<monogr>
		<title level="m">2015 USENIX Summit on Gaming, Games, and Gamification in Security Education (3GSE 15</title>
		<meeting><address><addrLine>Washington, D.C</addrLine></address></meeting>
		<imprint>
			<date type="published" when="2015-08" />
		</imprint>
	</monogr>
	<note>USENIX Association</note>
</biblStruct>

<biblStruct xml:id="b6">
	<analytic>
		<title level="a" type="main">Deobfuscation: Reverse Engineering Obfuscated Code</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><forename type="middle">K</forename><surname>Udupa</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><forename type="middle">K</forename><surname>Debray</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Madou</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">12th Working Conference on Reverse Engineering (WCRE&apos;05)</title>
		<imprint>
			<date type="published" when="2005" />
			<biblScope unit="page">10</biblScope>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b7">
	<monogr>
		<title level="m" type="main">IDA: About</title>
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b8">
	<monogr>
		<title level="m" type="main">GDB: The GNU Project Debugger</title>
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b9">
	<monogr>
		<title/>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Valgrind</surname></persName>
		</author>
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b10">
	<analytic>
		<title level="a" type="main">Code obfuscation techniques for metamorphic viruses</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J.-M</forename><surname>Borello</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">L</forename><surname>Mé</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Springer Journal in Computer Virology</title>
		<imprint>
			<biblScope unit="volume">3</biblScope>
			<biblScope unit="issue">3</biblScope>
			<biblScope unit="page" from="211" to="220" />
			<date type="published" when="2008" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b11">
	<analytic>
		<title level="a" type="main">Obfuscator-LLVM -Software Protection for the Masses</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><surname>Junod</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Rinaldini</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Wehrli</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Michielin</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the IEEE/ACM 1st International Workshop on Software Protection, SPRO&apos;15</title>
		<editor>B. Wyseur</editor>
		<meeting>the IEEE/ACM 1st International Workshop on Software Protection, SPRO&apos;15<address><addrLine>Firenze, Italy</addrLine></address></meeting>
		<imprint>
			<date type="published" when="2015-05-19" />
			<biblScope unit="page" from="3" to="9" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b12">
	<monogr>
		<title level="m" type="main">JShadObf: A JavaScript Obfuscator Based on Multi-Objective Optimization Algorithms</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">B</forename><surname>Bertholon</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Varrette</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><surname>Bouvry</surname></persName>
		</author>
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b13">
	<monogr>
		<title/>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Heidelberg</forename><surname>Springer Berlin</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2013" />
			<biblScope unit="page" from="336" to="349" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b14">
	<monogr>
		<title level="m" type="main">Surreptitious Software: Obfuscation, Watermarking, and Tamperproofing for Software Protection</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><surname>Collberg</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Nagra</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2009" />
			<publisher>Addison-Wesley Professional</publisher>
		</imprint>
	</monogr>
	<note>1st ed</note>
</biblStruct>

<biblStruct xml:id="b15">
	<analytic>
		<title level="a" type="main">A Framework for Measuring Software Obfuscation Resilience against Automated Attacks</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Banescu</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Ochoa</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Pretschner</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Software Protection (SPRO)</title>
		<imprint>
			<date type="published" when="2015" />
			<biblScope unit="page" from="45" to="51" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b16">
	<monogr>
		<title level="m" type="main">Assuring Security By Penetration Testing</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><surname>Heriyanto</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">L</forename><surname>Allen</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Ali</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Kali</forename><surname>Linux</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2014" />
			<publisher>Packt Publishing</publisher>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b17">
	<monogr>
		<title level="m" type="main">A Method to Evaluate CFG Comparison Algorithms</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><forename type="middle">P</forename><surname>Chan</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><surname>Collberg</surname></persName>
		</author>
		<imprint/>
	</monogr>
</biblStruct>

				</listBibl>
			</div>
		</back>
	</text>
</TEI>
