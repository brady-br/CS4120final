<?xml version="1.0" encoding="UTF-8"?>
<TEI xmlns="http://www.tei-c.org/ns/1.0" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
xsi:schemaLocation="http://www.tei-c.org/ns/1.0 /Users/atharsefid/Desktop/grobid-0.5.3/grobid-home/schemas/xsd/Grobid.xsd"
 xmlns:xlink="http://www.w3.org/1999/xlink">
	<teiHeader xml:lang="en">
		<encodingDesc>
			<appInfo>
				<application version="0.5.3" ident="GROBID" when="2020-09-29T03:03+0000">
					<ref target="https://github.com/kermitt2/grobid">GROBID - A machine learning software for extracting information from scholarly documents</ref>
				</application>
			</appInfo>
		</encodingDesc>
		<fileDesc>
			<titleStmt>
				<title level="a" type="main">Realtime High-Speed Network Traffic Monitoring Using ntopng</title>
			</titleStmt>
			<publicationStmt>
				<publisher/>
				<availability status="unknown"><licence/></availability>
			</publicationStmt>
			<sourceDesc>
				<biblStruct>
					<analytic>
						<title level="a" type="main">Realtime High-Speed Network Traffic Monitoring Using ntopng</title>
					</analytic>
					<monogr>
						<imprint>
							<date/>
						</imprint>
					</monogr>
				</biblStruct>
			</sourceDesc>
		</fileDesc>
		<profileDesc>
			<abstract/>
		</profileDesc>
	</teiHeader>
	<text xml:lang="en">
		<body>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="1.">Introduction</head><p>Network traffic monitoring standards such as sFlow <ref type="bibr" target="#b0">[1]</ref> and NetFlow/IPFIX <ref type="bibr" target="#b1">[2,</ref><ref type="bibr" target="#b2">3]</ref> have been conceived at the beginning of the last decade. Both protocols have been designed for being embedded into physical network devices such as routers and switches where the network traffic is flowing. In order to keep up with the increasing network speeds, sFlow natively implements packet sampling in order to reduce the load on the monitoring probe. While both flow and packet sampling is supported in NetFlow/IPFIX, network administrators try to avoid these mechanisms in order to have accurate traffic measurement. Many routers have not upgraded their monitoring capabilities to support the increasing numbers of 1/10G ports. Unless special probes are used, traffic analysis based on partial data results in inaccurate measurements.</p><p>Physical devices cannot monitor virtualised environments because inter-VM traffic is not visible to the physical network interface. Over the years however, virtualisation software developers have created virtual network switches with the ability to mirror network traffic from virtual environments into physical Ethernet ports where monitoring probes can be attached. Recently, virtual switches such as VMware vSphere Distributed Switch or Open vSwitch natively support NetFlow/sFlow for inter-VM communications <ref type="bibr" target="#b3">[4]</ref>, thus facilitating the monitoring of virtual environments. These are only partial solutions because either v5 NetFlow (or v9 with basic information elements only) or inaccurate, sample-based sFlow are supported. Network managers need traffic monitoring tools that are able to spot bottlenecks and security issues while providing accurate information for troubleshooting the cause. This means that while NetFlow/sFlow can prove a quantitative analysis in terms of traffic volume and TCP/UDP ports being used, they are unable to report the cause of the problems. For instance, NetFlow/IPFIX can be used to monitor the bandwidth used by the HTTP protocol but embedded NetFlow probes are unable to report that specific URLs are affected by large service time.</p><p>Today a single application may be based on complex cloud-based services comprised of several processes distributed across a LAN. Until a few years ago web applications were constructed using a combination of web servers, Java-based business logic and a database servers. The adoption of cache servers (e.g. memcache and redis) and mapReduce-based databases <ref type="bibr" target="#b4">[5]</ref> (e.g. Apache Cassandra and MongoDB) increased the applications' architectural complexity. The distributed nature of this environment needs application level information to support effective network monitoring. For example, it is not sufficient to report which specific TCP connection has been affected by a long service time without reporting the nature of the transaction (e.g. the URL for HTTP, or the SQL query for a database server) that caused the bottleneck. Because modern services use dynamic TCP/UDP ports the network administrator needs to know what ports map to what application. The result is that traditional device-based traffic monitoring devices need to move towards software-based monitoring probes that increase network visibility at the user and application level. As this activity cannot be performed at network level (i.e. by observing traffic at a monitoring point that sees all traffic), software probes are installed on the physical/virtual servers where services are provided. This enables probes to observe the system internals and collect information (e.g. what user/ process is responsible for a specific network connection) that would be otherwise difficult to analyse outside the system's context just by looking at packets. Network administrators can then view virtual and cloud environments in real-time. The flow-based monitoring paradigm is by nature unable to produce real-time information <ref type="bibr" target="#b15">[17]</ref>. Flows statistics such as throughput can be computed in flow collectors only for the duration of the flow, which is usually between 30 and 120 seconds (if not more). This means that using the flow paradigm, network administrators cannot have a real-time traffic view due to the latency intrinsic to this monitoring architecture (i.e. flows are first stored into the flow cache, then in the export cache, and finally sent to the collector) and also because flows can only report average values (i.e. the flow throughout can be computed by dividing the flow data volume for its duration) thus hiding, for instance, traffic spikes.</p><p>The creation of ntopng, an open-source web-based monitoring console, was motivated by the challenges of monitoring modern network topologies and the limitations of current traffic monitoring protocols. The main goal of ntopng is the ability to provide a real-time view of network traffic flowing in large networks (i.e. a few hundred thousand hosts exchanging traffic on a multiGbit link) while providing dynamic analytics able to show key performance indicators and bottleneck root cause analysis. The rest of the paper is structured as follow. Section 2 describes the ntopng design goals. Section 3 covers the ntopng architecture and its major software components. Section 4 evaluates the ntopng implementation using both real and synthetic traffic. Section 5 covers the open issues and future work items. Section 6 lists applications similar to ntopng, and finally section 7 concludes the paper.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>!</head></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.">ntopng Design Goals</head><p>ntopng's design is based on the experience gained from creating its predecessor, named ntop (and thus the name ntop next generation or ntopng) and first introduced in 1998. When the original ntop was designed, networks were significantly different. ntopng's design reflects new realities:</p><p>• Today's protocols are all IP-based, whereas 15 years ago many others existed (e.g. NetBIOS, AppleTalk, and IPX). Whereas only limited non-IP protocol support is needed, v4/v6 needs additional, and more accurate, metrics including packet loss, retransmissions, and network latency.</p><p>• In the past decade the number of computers connected to the Internet has risen significantly. Modern monitoring probes need to support hundreds of thousand of active hosts.</p><p>• While computer processing power increased in the last decade according to the Moore's law, system architecture support for increasing network interface speeds (10/10 Mbps to 10/40 today) has not always been proportional. As it will be later explained it is necessary to keep up with current network speeds without dropping packets.</p><p>• While non-IP protocols basically disappeared, application protocols have significantly increased and they still change rapidly as new popular applications appear (e.g. Skype). The association UDP/TCP port with an application protocol is no longer static, so unless other techniques, such as DPI (Deep Packet Inspection) <ref type="bibr" target="#b5">[6]</ref> are in place, identifying applications based on ports is not reliable.</p><p>• As TLS (Transport Layer Security) <ref type="bibr" target="#b6">[7]</ref> is becoming pervasive and no longer limited to secure HTTP, network administrators need partial visibility of encrypted communications.</p><p>• The HTTP protocol has greatly changed, as it is no longer used to carry, as originally designed, hypertext only. Instead, it is now used for many other purposes including audio/video streaming, firewall trespassing and in many peer-to-peer protocols. This means that today HTTP no longer identifies only web-related activities, and thus monitoring systems need to characterise HTTP traffic in detail.</p><p>In addition to the above requirements, ntopng has been designed to satisfy the following goals:</p><p>• Created as open-source software in order to let users study, improve, and modify it. Code availability is not a minor feature in networking as it enables users to compile and run the code on heterogeneous platforms and network environments. Furthermore, the adoption of this license allows existing open-source libraries and frameworks to be used by ntopng instead of coding everything from scratch as it often happens with closed-source applications.</p><p>• Operate at 10 Gbit without packet loss on a network backbone where user traffic is flowing (i.e. average packet size is 512 bytes or more), and support at least 3 Mpps (Million Packets/sec) per core on a commodity system, so that a low-end quad-core server may monitor a 10 Gbit link with minimal size packets (64 bytes).</p><p>• All monitoring data must be immediately available, with traffic counters updated in real-time without measurement latency and average counters that are otherwise typical of probe/collector architectures.</p><p>• Traffic monitoring must be fully implemented in software with no specific hardware acceleration re-quirements. While many applications are now exploiting GPUs <ref type="bibr" target="#b7">[8]</ref> or accelerated network adapters <ref type="bibr" target="#b8">[9]</ref>, monitoring virtual and cloud environments requires pure software-based applications that have no dependency on specific hardware and that can be migrated, as needed, across VMs.</p><p>• In addition to raw packet capture, ntopng must support the collection of sFlow/NetFlow/IPFIX flows, so that legacy monitoring protocols can also be supported.</p><p>• Ability to detect and characterise the most popular network protocols including (but not limited to) Skype, BitTorrent, multimedia (VoIP and streaming), social (FaceBook, Twitter), and business (Citrix, Webex). As it will be explained below, this goal has been achieved by developing a specific framework instead of including this logic within ntopng. This avoids the need of modifying ntopng when new protocols are added to the framework.</p><p>• Embedded web-based GUI based on HTML5 and dynamic web pages so that real-time monitoring data can be displayed using a modern, vector-based graphical user interface. These requirements are the foundation for the creation of rich traffic analytics.</p><p>• Scriptable and multi-threaded monitor engine so that dynamic web pages can be created and accessed by multiple clients simultaneously.</p><p>• Efficient monitoring engine not only in terms of packet processing capacity, but in its ability to operate on a wide range of computers, including low-power embedded systems as well as multi-core high-end servers. Support of low-end systems is necessary in order to embed ntopng into existing network devices such as Linux-based routers. This feature is to provide a low-cost solution for monitoring distributed and SOHO (Small Office Home Office) networks.</p><p>• Ability to generate alerts based on traffic conditions. In particular the alert definition should be configurable my means of a script, so that users can define their own conditions for triggering alerts.</p><p>• Integration with the system where traffic is observed, so that on selected servers, it is possible to correlate network events with system processes.</p><p>The following section covers in detail the ntopng software architecture and describes the various components on which the application is layered.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>!</head></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.">ntopng Software Architecture</head><p>ntopng is coded in C++ which enables source code portability across systems (e.g. X86, MIPS and ARM) and clean class-based design, while granting high execution speed.</p><p>1. ntopng Architecture ntopng is divided in four software layers:</p><p>• Ingress data layer: monitoring data can be raw packets captured from one or more network interfaces, or collected NetFlow/IPFIX/sFlow flows after having been preprocessed.</p><p>• Monitoring engine: the ntopng core responsible for processing ingress data and consolidating traffic counters into memory.</p><p>• Scripting engine: a thin C++ software layer that exports monitoring data to Lua-based scripts.</p><p>• Egress data layer: interface towards external application that can access real-time monitoring data.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.1.">Ingress Data Layer</head><p>The ingress layer is responsible for receiving monitoring data. Currently three network interfaces are implemented:</p><p>• libpcap Interface: capture raw packets by means of the popular libpcap library.</p><p>• PF_RING Interface: capture raw packets using the open-source PF_RING framework for Linux systems <ref type="bibr" target="#b9">[10]</ref> developed by ntop for enhancing both packet capture and transmission speed. PF_RING is divided in two parts: a kernel module that efficiently interacts with the operating system and network drivers, and a user-space library that interacts with the kernel mod- JSON ule, and implements an API used by PF_RING-based applications. The main difference between libpcap and PF_RING, is that when using the latter it is possible to capture/receive minimum size packets at 10 Gbit with little CPU usage using commodity network adapters. PF_RING features these performance figures both on physical hosts and on Linux KVM-based virtual machines, thus paving the way to line-rate VM-based traffic monitoring.</p><p>• ØMQ Interface. The ØMQ library <ref type="bibr" target="#b11">[12]</ref> is an opensource portable messaging library coded in C++ that can be used to implement efficient distributed applications. Each application is independent, runs on its own memory space, and it can be deployed on the same host where ntopng is running, or on remote hosts. In ntopng it has been used to receive trafficrelated data from distributed systems. ntopng creates a ØMQ socket and waits for events formatted as JSON (JavaScript Object Notation) <ref type="bibr" target="#b14">[16]</ref> strings encoded as "&lt;element id&gt;": "&lt;value&gt;", where &lt;element id&gt; is a numeric identifier as defined in the NetFlow/ IPFIX RFCs. The advantages of this approach with respect of integrating a native flow collector, are manyfold :</p><p>• The complexities of flow standards are not propagated to ntopng, because open-source applications such as nProbe <ref type="bibr" target="#b12">[13]</ref> act as a proxy by converting flows into JSON strings delivered to ntopng via ØMQ.</p><p>• Any non-flow network event can be collected using this mechanism. For instance, Linux firewall logs generated by netfilter, can be parsed and sent to ntopng just like in commercial products such as Cisco ASA.</p><p>Contrary to what happens with flow-based tools where the probe delivers flows to the collector, when used over ØMQ ntopng acts as a consumer. As depicted in <ref type="figure">Fig 1.</ref>, ntopng (as flow consumer) connects to nProbe (that acts as flow producer) that acts as flow probe or proxy (i.e. nProbe collects flows sent by a probe and forwards them to ntopng). Flows are converted into JSON messages that are read by ntopng via ØMQ.</p><p>{"IPV4_SRC_ADDR":"10.10.20.15","IPV4_D-ST_ADDR":"192.168.0.200","IPV4_NEXT_HOP": "0.0.0.0","INPUT_SNMP":0,"OUTPUT_SNMP": 0,"IN_PKTS":12,"IN_BYTES": 11693,"FIRST_SWITCHED": 1397725262,"LAST_SWITCHED": 1397725262,"L4_SRC_PORT": 80,"L4_DST_PORT":50142,"TCP_FLAGS":</p><p>27,"PROTOCOL":6,"SRC_TOS":0,"SRC_AS": 3561,"DST_AS":0,"TOTAL_FLOWS_EXP":8}</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.">NetFlow/IPFIX flow converted in JSON by nProbe</head><p>The JSON message uses as field key the string values defined in the NetFlow RFC <ref type="bibr" target="#b1">[2]</ref>, so in essence this is a one-to-one format translation from NetFlow to JSON. The combination of ØMQ with redis can also be used to employ ntopng as a visualisation console for non-packet related events. For instance at the .it ccTLD, ntopng receives JSON messages via ØMQ from domain name registration system that are accessed via the Whois <ref type="bibr" target="#b33">[35]</ref>, DAS (Domain Availability Service) <ref type="bibr" target="#b34">[36]</ref> and EPP (Extensible Provisioning Protocol) <ref type="bibr" target="#b35">[37]</ref> protocols. Such protocol messages are formatted in JSON using the standard field key names defined in the NetFlow RFC, and add extra fields for specifying custom information not defined in the RFC (e.g. the DNS domain name under registration). In essence the idea is that ntopng can be used to visualise any type of network related information, by feeding into it (via ZMQ) data formatted in JSON. In case the JSON stream carries unknown fields, ntopng will just be able to display the field on the web interface but the data processing will not be affected (i.e. messages with unknown field names will not be discarded).</p><p>The use of JSON not only allows application complexity to be reduced but it also promotes the creation of arbitrary application hierarchies. In fact each ntopng instance can act both as a data consumer or producer.</p><p>3. Cluster of ntopng and nProbe applications.</p><p>When a flow is expired, ntopng propagates the JSONformatted flow information to the configured instance up one hierarchy. Each ntopng instance can collect traffic information from multiple producers, and each producer can send traffic information to multiple consumers. In essence using this technique it is possible to create a (semi-) centralised view of a distributed monitoring environment simply using ntopng without any third party tool or process that might make the overall architecture more complex. The overhead introduced by JSON is minor, as ntopng can collect more than 20k flows/sec per interface. In case more flows need to be collected, ntopng can be configured to collect flows over multiple interfaces. Each ingress interface is self-contained with no crossdependencies. When an interface is configured at startup, ntopng creates a data polling thread bound to it. All the data structures, used to store monitoring data are defined per-interface and are not global to ntopng. This has the advantage that each network interface can operate independently, likely on a different CPU core, to create a scalable system. This design choice is one of the reasons for ntopng's superior data processing performance as will be shown in the following section.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.2.">Monitoring Engine</head><p>Data is consolidated in ntopng's monitoring engine. This component is implemented as a single C++ class that is instantiated, one per ingress interface, in order to avoid performance bottlenecks due to locking when multiple interfaces are in use. Monitoring data is organised in flows and hosts, where by flow we mean a set of packets having the same 6-tuple (VLAN, Protocol, IP/ Port Source/Destination) and not as defined in flowbased monitoring paradigms where flows have additional properties (e.g. flow duration and export). In ntopng a flow starts when the first packet of the flow arrives, and it ends when no new data belonging to the flow is observed for some time. Regardless of the ingress interface type, monitoring data is classified in flows. Each ntopng flow instance references two host instances (one for flow source and the other for flow destination) that are used to keep statistics about the two peers. This is the flow lifecycle:</p><p>• When a packet belonging to a new flow is received, the monitoring engine decodes the packet and searches a flow instance matching the packet. If not found, a flow instance is created along with the two flow host instances if not existing.</p><p>• The flow and host counters (e.g. bytes and packets) are updated according to the received packets.</p><p>• Periodically ntopng purges flows that have been idle for a while (e.g. 2 minutes with no new traffic received). Hosts with no active flows that have also been idle for some time are also purged from memory.</p><p>Purging data from memory is necessary to avoid exhausting all available resources and discard information no longer relevant. However this does not mean that host information is lost after data purge but that it has been moved to a secondary cache. <ref type="figure">Fig. 1</ref> shows that monitoring engine connects with Redis <ref type="bibr">[14]</ref>, a key-value in-memory data store. ntopng uses redis as data cache where it stores:</p><p>• JSON-serialised representation of hosts that have been recently purged from memory, along with their traffic counters. This allows hosts to be restored in memory whenever they receive fresh traffic while saving ntopng memory.</p><p>• In case ntopng has been configured to resolve IP address into symbolic names, redis stores the association numeric-to-symbolic address.</p><p>• ntopng configuration information.</p><p>• Pending activities, such as the queue of numeric IPs, waiting to be resolved by ntopng.</p><p>Redis has been selected over other popular databases (e.g. MySQL and memcached) for various reasons:</p><p>• It is possible to specify whether stored data is persistent or temporary. For instance, numeric-to-symbolic data is set to be volatile so that it is automatically purged from redis memory after the specified duration with no action from ntopng. Other information such as configuration data is saved persistently as it happens with most databases.</p><p>• Redis instances can be federated. As described in <ref type="bibr" target="#b13">[15]</ref> ntopng and nProbe instances can collaborate and create a microcloud based on redis. This microcloud consolidates the monitoring information reported by instances of ntopng/nProbe in order to share traffic information, and effectively monitor distributed networks.</p><p>• ntopng can exploit the publish/subscribe mechanisms offered by redis in order to be notified when a specific event happens (e.g. a host is added to the cache) and thus easily create applications that execute specific actions based on triggers. This mechanism is exploited by ntopng to distribute traffic alerts to multiple consumers using the microcloud architecture described later on this section.</p><p>In ntopng all the objects can be serialised in JSON. This design choice allows them to be easily stored/retrieved from redis, exported to third party applications (e.g. web apps), dumped on log files, and immediately used in web pages though Javascript. Through JSON object serialisation it is possible to migrate/replicate host/flow objects across ntopng instances. As mentioned above, JSON serialisation is also used to collect flows from nProbe via ØMQ and import network traffic information from other sources of data.</p><p>In addition to the 6-tuple, ntopng attempts to detect the real application protocol carried by the flow. For col-lected flows, unless specified into the flow itself, the application protocol is inferred by inspecting the IP/ ports used by the flows. For instance, if there is a flow from a local PC to a host belonging to the Dropbox Inc network on a non-known port, we assume that the flow uses the dropbox protocol. When network interfaces operate on raw packets, we need to inspect the packets' payload. ntopng does application protocol discovery using nDPI <ref type="bibr" target="#b16">[18]</ref>, a home-grown GPLv3 C library for deep packet inspection. To date nDPI recognises over 170 protocols including popular ones such as BitTorrent, Skype, FaceBook, Twitter , Citrix and Webex.</p><p>1 nDPI is based on an a protocol-independent engine that implements services common to all protocols, and protocol-specific dissectors that analyse all the supported protocols. If nDPI is unable to identify a protocol based on the packet payload it can try to infer the protocol based on the IP/port used (e.g. TCP on port 80 is likely to be HTTP). nDPI can handle both plain and encrypted traffic: in the case of SSL (Secure Socket Layers) nDPI decodes the SSL certificate and it attempts to match the server certificate name with a service. For instance encrypted traffic with server certificate *.amazon.com is traffic for the popular Amazon web site, and *.viber.-com identifies the traffic produced by the mobile Viber application. The library is designed to be used both in user-space inside applications like ntopng and nProbe, and in the kernel inside the Linux firewall. The advantage of having a clean separation between nDPI and ntopng is that it is possible to extend/modify these two components independently without polluting ntopng with protocol-related code. As described in <ref type="bibr" target="#b17">[19]</ref>, nDPI accuracy and speed is comparable to similar commercial products and often better than other open-source DPI toolkits.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>!</head></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.">Application Protocol Classification vs. Traffic Characterisation</head><p>In addition to DPI, ntopng is able to characterise traffic based on its nature. An application's protocol describes how data is transported on the wire, but it tells nothing about the nature of the traffic. To that end ntopng natively integrates Internet domain categorisation services freely provided to ntopng users by http://block.si. For instance, traffic for cnn.com is tagged as "News and Media", whereas traffic for FaceBook is tagged as "Social". It is thus possible to characterise host behaviour with respect to traffic type, and thus tag hosts that perform potentially dangerous traffic (e.g. access to sites whose content is controversial or potentially insecure) that is more likely to create security issues. This information may also be used to create host traffic patterns that can be used to detect potential issues, such as when a host changes its traffic pattern profile over time; this might indicate the presence of viruses or unwanted applications. Domain categorisation services are provided as a cloud-service and accessed by ntopng via HTTP. In order to reduce the number of requests and thus minimise the network traffic necessary for this service, categorisation responses are cached in redis similar to the IP/host DNS mapping explained earlier in this section.</p><p>In addition to domain classification, ntopng can also identify hosts that are previously marked as malicious. When specified at startup, ntopng can query public services in order to track harvesters, content spammers, and other suspicious activities. As soon as ntopng detects traffic for a new host not yet observed, it issues a DNS query to the Project Honeypot <ref type="bibr">[34]</ref> that can report information about such host. Similar to what happens with domain categorisation, ntopng uses redis to cache responses (the default cache duration is 12 hours) in order to reduce the number of DNS queries. In case a host has been detected as malicious, ntopng triggers an alert and reports in the web interface the response returned that includes threat score and type.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.3.">Scripting Engine</head><p>The scripting engine sits on top of the monitoring engine, and it implements a Lua-based API for scripts that need to access monitoring data. ntopng embeds the Lua JIT (Just In Time) interpreter, and implements two Lua classes able to access ntopng internals.</p><p>• interface: access to interface-related data, and to flow and host traffic statistics.</p><p>• ntop: it allows scripts to interact with ntopng configuration and the redis cache.</p><p>The scripting engine decouples data access from traffic processing through a simple Lua API. Scripts are exePlease note that technically FaceBook is HTTP(S) traffic from/to FaceBook Inc. servers. This also applies to Twitter traffic. However nDPI assigns them a specific 1 application protocol Id in order to distinguish them from plain HTTP(S) traffic. cuted when they are requested though the embedded web server, or based on periodic events. ntopng implements a small cron daemon that runs scripts periodically with one second granularity. Such scripts are used to perform periodic activities (e.g. dump the top hosts that sent/received traffic in the last minute) as well data housekeeping. For instance every night at midnight, ntopng runs a script that dumps on a SQLite database all the hosts monitored during the last 24 hours; this way ntopng implements a persistent historical view of the recent traffic activities.</p><p>The clear separation of traffic processing from application logic has been a deliberate choice in ntopng. The processing engine (coded in C++) has been designed to do simple traffic-related tasks that have to be performed quickly (e.g. receive a packet, parse it, update traffic statistics and move to the next packet). The application logic instead can change according to user needs and preferences and thus it has been coded with scripts that access the ntopng core by means of the Lua API. Given that the Lua JIT is very efficient in terms of processing speed, this solution allows users to modify the ntopng business logic by simply changing scripts instead of modifying the C++ engine. </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5.">Simple ntopng Lua Script</head><p>When a script accesses an ntopng object, the result is returned to the Lua script as a Lua table object. In no case Lua references C++ object instances directly, thus avoiding costly/error-prone object locks across languages. All ntopng data structures are lockless, and Lua scripts lock C++ data structures only if they scan the hosts or flows hash. Multiple scripts can be executed simultaneously, as the embedded Lua engine is multithreaded and reentrant.</p><p>It is worth to remark that the scripting engine is used only to report information produced by the monitoring engine and for other periodic activities such alert triggering, and not to process monitoring information. The design choice of having a C++-based monitoring engine with Lua scripts for reporting data, is a good compromise in terms of performance and flexibility. This because it allows to preserve the engine efficiency while enabling users to customise the GUI without having to modify the monitoring engine.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.4.">Egress Data Layer</head><p>ntopng exports monitoring data through the embedded HTTP server that can trigger the execution of Lua scripts. The web GUI is based on the Twitter Bootstrap JavaScript framework <ref type="bibr" target="#b18">[20]</ref> that enables the creation of dynamic web pages with limited coding. All charts are based on the D3.JS <ref type="bibr" target="#b24">[25]</ref> that features a rich set of HTML5 components that can be used to represent monitoring data in an effective way.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>!</head></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="6.">ntopng HTML5 Web Interface</head><p>The embedded web server serves static pages containing JavaScript code that triggers the execution of Lua scripts. Such scripts access ntopng monitoring data and return their results to the web browser in JSON format. Web pages are dynamically updated every second by the JavaScript code present in the web pages, that requests the execution of Lua scripts.</p><p>As stated earlier in this section, ntopng can manipulate JSON objects natively, thus enabling non-HTML applications to use ntopng as a server for network traffic data as well. Through Lua scripts, it is possible to create REST-compliant (Representational State Transfer) <ref type="bibr" target="#b19">[21]</ref> Web services on top of ntopng.</p><p>Another way to export monitoring data from ntopng, is by means of log files. With the advent of high-capacity log processing applications such as Splunk and ElasticSearch/Logstash, ntopng can complement traditional service application logs with traffic logs. This allows network administrators to correlate network traffic information to service status. Export in log files is performed through Lua scripts that can access the monitoring engine and dump data into log files or send it via the syslog protocol <ref type="bibr" target="#b20">[22]</ref>, a standard for remote message logging.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.5.">System Integration</head><p>Monitoring network traffic is not enough to have a complete picture of the system. Often it is necessary to correlate traffic with system information. For this reason ntopng has been integrated (on Linux only for the time being) with a nProbe plugin named sprobe. Such plugin is based on sysdig <ref type="bibr" target="#b36">[38]</ref>, a Linux kernel module and library that allows system events to be captured from user-space, similar to what happens with libpcap. The plugin listens to system events such as creation/ deletion of a network connection by intercepting system calls such as accept() and connect(). When such events happen, nProbe exports process information provides via ØMQ this event information formatted in JSON to ntopng or via NetFlow/IPFIX to standard flow collectors. This way ntopng, for those systems where nProbe is active, can associate a communication flow with a process name.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="7.">ntopng Report on Process Information received from sProbe</head></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="8.">ntopng Processes Interaction Report</head><p>In addition to network information, sProbe reports information about the process itself by looking at the / proc filesystem.</p><p>In particular it reports information about the memory being used (current and max memory), the number of VM page faults, and process CPU usage.</p><p>If multiple sProbe instances feed ntopng, it is possible to correlate the information across system. For instance it is possible to see that Google Chrome on host 192.168.2.13 is connected to ntopng running on system 10.10.12.18. As flow information is periodically exported by sProbe and not just at the beginning/end of the flow, ntopng can also report process activities over time thus combing network with system monitoring. The tests have been performed using ntopng v.1.1.1 (r7100) on a system based on a low-end Intel Xeon E3-1230 running at 3.30 GHz. ntopng monitors a 10 Gbit Intel network interface using PF_RING DNA v.5.6.1. The traffic generator and replay is pfsend, an opensource tool part of the PF_RING toolset. In case of real traffic, pfsend has reproduced in loop at line rate the pcap file captured on a real network. In the case of synthetic traffic, pfsend has generated the specified number of packets by forging packets with the specified hosts number. Please note that increasing the number of active hosts also increases the number of active flows handled by ntopng.</p><p>The previous table reports the test with traffic captured on a real network and reproduced by pfsend at line rate. The result shows that ntopng is able to monitor a fully loaded 10 Gbit link without loss and with limited memory usage. Considered that the test system is a low-end server, this is a great result, which demonstrates that it The above figure shows how the number of hosts and packet size influence the number of processes packets. Packet capture is not a bottleneck due to the use of PF_RING DNA. However, ntopng's processing engine performance is reduced in proportion with the number of active hosts and flows. Although networks usually have no more than a few thousand active hosts, we tested ntopng's performance across many conditions ranging from a small LAN (100 hosts), a medium ISP (10k hosts) and large ISP (100k hosts) to a backbone (1M hosts). The setup we used was worst case, because, in practice it is not a good choice to send traffic from a million hosts to the same ntopng monitoring interface.</p><p>The PF_RING library named libzero has the ability to dispatch packets in zero-copy to applications, threads and KVM-based VMs.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>!</head></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="11.">pfdnacluster_master: PF_RING Zero Copy Traffic Balancing</head><p>The open-source application pfdnacluster_master 2 can read packets from multiple devices and implement zero-copy traffic fan-out (i.e. the same ingress packet is replicated to various packet consumers) and/or traffic balancing. Balancing respects the flow-tuple, meaning that all packets of flow X will always be sent to the egress virtual interface Y; this mechanisms works also with encapsulated traffic such as GTP traffic used to encapsulate user traffic in mobile networks <ref type="bibr" target="#b21">[23]</ref>. This application can create many egress virtual interfaces not limited by the number and type of physical interfaces from which packets are received.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>!</head></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="12.">Synthetic Traffic: Hosts Number vs. Processed Packets (PPS)</head><p>Thanks to PF_RING it is possible to balance ingress traffic to many virtual egress interfaces, all monitored by the same ntopng process that binds each packet processing thread to a different CPU core. This practice enables concurrent traffic processing, as it also reduces the number of hosts/flows handled per interface, thus increasing the overall performance. In our tests we have decided to measure the maximum processing capability per interface so that we can estimate the maximum ntopng processing capability according to the number of cores available on the system. Using the results reported in the previous figures, using real traffic balanced across multiple virtual interfaces, ntopng could easily monitor multi-10 Gbit links, bringing real-time traffic monitoring to a new performance level.</p><p>The previous chart above depicts the data in <ref type="figure">Fig. 10</ref> by positioning the processing speed with respect to the number of hosts. As reported in <ref type="figure">Fig. 9</ref> using real traffic on a full 10 Gbit link we have approximately 1.7 Mpps. At that ingress rate, ntopng can successfully handle more than 100K active hosts per interface, thus making it suitable for a large ISP. The following figure shows the same information as <ref type="figure">Fig. 12</ref>  Similar to processing performance, ntopng's memory usage is greatly affected by the number of active hosts and flows. As the traffic is reproduced in loop, hosts and flows are never purged from memory as they receive continuously fresh new data.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>!</head></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="14.">Hosts Number vs. Memory Usage</head><p>Memory usage ranges from 20 MB for 100 active hosts, to about 7 GB for 1 million hosts. Considered that lowend ARM-based systems <ref type="bibr" target="#b25">[26]</ref> such as the RaspberryPI and the BeagleBoard feature 512 MB of memory, their use enables the monitoring of ~40k simultaneous hosts and flows. This is an effective price-performance ratio given the cost ($25) and processing speed of such devices. ntopng code compiles out of the box on these devices and also on the low-cost (99$) Ubiquity EdgeMax router where it is able to process 1 Mpps. Both nProbe and ntopng run on the above mentioned platforms and there are commercial companies that deploy such small boxes in order to complement traditional ping/traceroute/iperf remote monitoring with real-time traffic visualisation as produced by ntopng.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>!</head></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5.">Open Issues and Future Work</head><p>While we have successfully run ntopng on systems with limited computation power, we are aware that in order to monitor a highly distributed network such as cloud system, it is necessary to consolidate all data in a central location. As both VMs and small PCs have limited storage resources, we are working on the implementation of a cloud-based storage system that allows distributed ntopng instances to consolidate monitoring data onto the same data repository.</p><p>Another future work item is the ability to further characterise network traffic by assigning it a security score. Various companies provide something called IP reputation <ref type="bibr" target="#b23">[24]</ref> a number which the danger potential of a given IP. We are planning to integrate cloud-based reputation services into ntopng similarly to what we have done for domain categorisation. This would enable spot monitoring of hosts that generate potentially dangerous network traffic.</p><p>Finally we are planning to introduce data encryption and authentication in ZMQ communications. This problem was not properly addressed in ZMQ until recent library versions, and thus it needs also to be integrated into ntopng in order to guarantee secure data sharing across ntopng applications.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="6.">Related Work</head><p>When the original ntop had been introduced in 1998 it was the first traffic open-source monitoring application embedding a web server for serving monitoring data. Several commercial applications that are similar to ntopng are available from companies such as Boundary <ref type="bibr" target="#b25">[26]</ref>, AppNeta FlowView <ref type="bibr" target="#b32">[33]</ref>, Lancope StealthWatch <ref type="bibr" target="#b30">[31]</ref>, and Riverbed Cascade <ref type="bibr" target="#b31">[32]</ref>. However, these applications are proprietary, often available only as a SaaS (Software as a Service) and based on the flow-paradigm (thus not fully real-time nor highly accurate) These applications are difficult to integrate with other monitoring systems because they are self-contained. Many open source network-monitoring tools are also available : packet analysers such as Wireshark <ref type="bibr" target="#b29">[30]</ref>, flow-based tools such as Vermont (VERsatile MONitoring Toolkit) <ref type="bibr" target="#b26">[27]</ref> or YAF (Yet Another Flowmeter) <ref type="bibr" target="#b28">[29]</ref>. Yet, 15 years after its introduction, ntopng offers singular performance, openness and ease of integration.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="7.">Final Remarks</head><p>This paper presented ntopng, an open-source, real-time traffic monitoring application. ntopng is fully scriptable by means of an embedded Lua JIT interpreter, guaranteeing both flexibility and performance. Monitoring data is represented using HTML 5 served by the embedded web server, and it can be exported to external monitoring applications by means of a REST API or through log files that can be processed by distributed </p></div><figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_1"><head></head><label></label><figDesc>dirs = ntop.getDirs() package.path = dirs.installdir .. "/ scripts/lua/modules/?.lua;" .. package.- path require "lua_utils" sendHTTPHeader('text/html') print('&lt;html&gt;&lt;head&gt;&lt;title&gt;ntop&lt;/title&gt;&lt;/ head&gt;&lt;body&gt;Hello ' .. os.date("%d.%m. %Y")) print('&lt;li&gt;Default ifname = ' .. inter- face.getDefaultIfName()</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_2"><head>!</head><label></label><figDesc>4. Evaluation ntopng has been extensively tested by its users in vari- ous heterogeneous environments. This section reports the results of some validation tests performed on a lab using both synthetic and real traffic captured on a net- work. 9. Tests Using Real Traffic (Average Packet Size 700 bytes)</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_2" validated="false"><head></head><label></label><figDesc>in terms of Gbit instead of Pps (Packet/sec).</figDesc><table>Packet Size 
64 bytes 
128 bytes 
512 bytes 
1500 bytes 

Hosts 
Number 
Processed 
PPS 
Processed 
PPS 
Processed 
PPS 
Processed 
PPS 

100 
8'100'000 
8'130'000 
2'332'090 
2'332'090 

1'000 
7'200'000 
6'580'000 
2'332'090 
820'210 

10'000 
5'091'000 
4'000'000 
2'332'090 
819'000 

100'000 
2'080'000 
2'000'000 
1'680'000 
819'000 

1'000'000 
17'800 
17'000 
17'000 
17'000 

Traffic 
Balancing 

Zero-Copy 
Traffic 
FanOut 

Processed (pps) 

0 

1.000.000 

2.000.000 

3.000.000 

4.000.000 

5.000.000 

6.000.000 

7.000.000 

8.000.000 

9.000.000 

Hosts 

100 
1K 
10K 
100K 
1M 

Processed PPS 

Source code available at https://svn.ntop.org/svn/ntop/trunk/PF_RING/userland/examples_libzero/pfdnacluster_master.c ! 

! 
13. Synthetic Traffic: Hosts Number vs. Processed 
Packets (Gbit) 

</table></figure>
		</body>
		<back>
			<div type="references">

				<listBibl>

<biblStruct xml:id="b0">
	<analytic>
		<title level="a" type="main">InMon Corporation&apos;s sFlow: A Method for Monitoring Traffic in Switched and Routed Networks</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><surname>Phaal</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Panchen</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Mckee</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">RFC</title>
		<imprint>
			<biblScope unit="volume">3176</biblScope>
			<date type="published" when="2001-09" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b1">
	<monogr>
		<title level="m" type="main">Cisco Systems NetFlow Services Export Version 9</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">B</forename><surname>Claise</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2004-10" />
			<biblScope unit="volume">3954</biblScope>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b2">
	<monogr>
		<title level="m" type="main">Evaluation of Candidate Protocols for IP Flow Information Export (IPFIX), RFC 3955</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Leinen</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2004-10" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b3">
	<monogr>
		<title/>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Caesar</surname></persName>
		</author>
		<ptr target="http://www.plixer.-com/blog/network-monitoring/enabling-netflow-on-a-vswitch/" />
		<imprint>
			<date type="published" when="2013-05" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b4">
	<monogr>
		<title level="m" type="main">Google&apos;s MapReduce Programming Model -Revisited</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Lämmel</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2008" />
		</imprint>
		<respStmt>
			<orgName>Science of Computer Programming</orgName>
		</respStmt>
	</monogr>
</biblStruct>

<biblStruct xml:id="b5">
	<analytic>
		<title level="a" type="main">The end of the net as we know it? Deep packet inspection and internet governance</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Bendrath</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Müller</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Journal of New Media &amp; Society</title>
		<imprint>
			<date type="published" when="2011-11" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b6">
	<monogr>
		<title level="m" type="main">The Transport Layer Security (TLS) Protocol Version 1.1, RFC 4346</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><surname>Dierks</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">E</forename><surname>Rescorla</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2006-04" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b7">
	<analytic>
		<title level="a" type="main">Indexing million of packets per second using GPUs</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">F</forename><surname>Fusco</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Vlachos</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">X</forename><surname>Dimitropoulos</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">L</forename><surname>Deri</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of IMC 2013 Conference</title>
		<meeting>IMC 2013 Conference</meeting>
		<imprint>
			<date type="published" when="2013-10" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b8">
	<analytic>
		<title level="a" type="main">NetFPGA -An Open Platform for Gigabit-Rate Network Switching and Routing</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">N</forename><surname>Mckeown</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">G</forename><surname>Watson</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">G</forename><surname>Gibb</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><surname>Hartke</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Naous</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Raghuraman</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">L</forename><surname>Jianying</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceeding of MSE &apos;07 Conference</title>
		<meeting>eeding of MSE &apos;07 Conference</meeting>
		<imprint>
			<date type="published" when="2007-06" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b9">
	<analytic>
		<title level="a" type="main">High Speed Network Traffic Analysis with Commodity Multi-core System</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">F</forename><surname>Fusco</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">L</forename><surname>Deri</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of IMC 2010 Conference</title>
		<meeting>IMC 2010 Conference</meeting>
		<imprint>
			<date type="published" when="2010-11" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b10">
	<analytic>
		<title level="a" type="main">kvm: The Linux Virtual Machine Monitor</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Kivity</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Y</forename><surname>Kamay</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Laor</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">U</forename><surname>Lublin</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Liguori</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 2007 Ottawa Linux Symposium</title>
		<meeting>the 2007 Ottawa Linux Symposium</meeting>
		<imprint>
			<date type="published" when="2007-07" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b11">
	<monogr>
		<title level="m" type="main">ZeroMQ: Messaging for Many Applications, O&apos;Reilly</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><surname>Hintjens</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2013" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b12">
	<analytic>
		<title level="a" type="main">nProbe: an Open Source NetFlow Probe for Gigabit Networks</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">L</forename><surname>Deri</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Redis: the Definitive Guide: Data Modelling, Caching, and Messaging</title>
		<editor>14. J. A. Kreibich, S. Sanfilippo, P. Noordhuis</editor>
		<meeting><address><addrLine>O&apos;Reilly</addrLine></address></meeting>
		<imprint>
			<date type="published" when="2003" />
		</imprint>
	</monogr>
	<note>Proceedings of Terena TNC 2003 Conference</note>
</biblStruct>

<biblStruct xml:id="b13">
	<analytic>
		<title level="a" type="main">Realtime MicroCloud-based Flow Aggregation for Fixed and Mobile Networks</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">L</forename><surname>Deri</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">F</forename><surname>Fusco</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of TRAC 2013 workshop</title>
		<meeting>TRAC 2013 workshop</meeting>
		<imprint>
			<date type="published" when="2013-07" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b14">
	<monogr>
		<title level="m" type="main">The application/json Media Type for JavaScript Object Notation (JSON), RFC 4627</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Crockford</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2006" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b15">
	<monogr>
				<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">B</forename><surname>Harzog</surname></persName>
		</author>
		<ptr target="http://performancecriticalapps.prelert.com/articles/share/281286/,De-cember2013" />
		<title level="m">Real-Time Monitoring: Almost Always a Lie</title>
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b16">
	<analytic>
		<title level="a" type="main">nDPI: Open-Source High-Speed Deep Packet Inspection</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Luca</forename><surname>Deri</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Maurizio</forename><surname>Martinelli</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Tomasz</forename><surname>Bujlow</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Alfredo</forename><surname>Cardigliano</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of TRAC 2014 Workshop</title>
		<meeting>TRAC 2014 Workshop</meeting>
		<imprint>
			<date type="published" when="2014-08" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b17">
	<monogr>
				<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><surname>Bujlow</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">V</forename><surname>Carela-Español</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><surname>Barlet-Ros</surname></persName>
		</author>
		<title level="m">Comparison of Deep Packet Inspection (DPI) Tools for Traffic Classification</title>
		<imprint>
			<date type="published" when="2013-06" />
			<biblScope unit="volume">3</biblScope>
		</imprint>
	</monogr>
<note type="report_type">Technical Report</note>
</biblStruct>

<biblStruct xml:id="b18">
	<analytic>
		<title level="a" type="main">At The Forge: Twitter Bootstrap</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><forename type="middle">L</forename><surname>Reuven</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Linux Journal</title>
		<imprint>
			<date type="published" when="2012-06" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b19">
	<analytic>
		<title/>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">L</forename><surname>Richardson</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Ruby</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">RESTful Web Services</title>
		<imprint>
			<date type="published" when="2007" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b20">
	<monogr>
		<title level="m" type="main">The Syslog Protocol, RFC 5424</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Gerhards</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2009-03" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b21">
	<analytic>
		<title/>
	</analytic>
	<monogr>
		<title level="j">General Packet Radio Service (GPRS</title>
		<imprint/>
	</monogr>
	<note>3GPP</note>
</biblStruct>

<biblStruct xml:id="b22">
	<monogr>
		<title level="m" type="main">Service Description, Stage 2, Technical Specification 3GPP SP-56</title>
		<idno>V11.2.0</idno>
		<imprint>
			<date type="published" when="2012" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b23">
	<analytic>
		<title level="a" type="main">Building a Dynamic Reputation System for DNS</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Antonakakis</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Perdisci</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Dagon</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">W</forename><surname>Lee</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">N</forename><surname>Feamster</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of USENIX Security Symposium</title>
		<meeting>USENIX Security Symposium</meeting>
		<imprint>
			<date type="published" when="2010" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b24">
	<monogr>
				<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Bostock</surname></persName>
		</author>
		<ptr target="http://d3js.org" />
		<title level="m">Data-Driven Documents (d3.js): a Visualization Framework for Internet Browsers Running JavaScript</title>
		<imprint>
			<date type="published" when="2012" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b25">
	<analytic>
		<title level="a" type="main">Agent Base Network Traffic Monitoring</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Joshi</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">G</forename><surname>Chirag</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">International Journal of Innovative Research in Science, Engineering and Technology</title>
		<imprint>
			<biblScope unit="volume">2</biblScope>
			<biblScope unit="issue">5</biblScope>
			<date type="published" when="2013-05" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b26">
	<monogr>
		<title/>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">B</forename><surname>Cook</surname></persName>
		</author>
		<ptr target="http://boundary.com/blog/2013/09/27/welcome-to-meter-2-design/" />
		<imprint>
			<date type="published" when="2013-09" />
		</imprint>
	</monogr>
	<note>Boundary Meter 2.0 -Design</note>
</biblStruct>

<biblStruct xml:id="b27">
	<analytic>
		<title level="a" type="main">Vermont-A Versatile Monitoring Toolkit for IPFIX and PSAMP</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Lampert</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of MonAM</title>
		<meeting>MonAM</meeting>
		<imprint>
			<date type="published" when="2006" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b28">
	<analytic>
		<title level="a" type="main">Yaf: yet another flowmeter</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><surname>Inacio</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">B</forename><surname>Trammell</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 24th LISA Conference</title>
		<meeting>the 24th LISA Conference</meeting>
		<imprint>
			<date type="published" when="2010" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b29">
	<monogr>
				<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Orebaugh</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">G</forename><surname>Ramirez</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Beale</surname></persName>
		</author>
		<title level="m">Wireshark &amp; Ethereal Network Protocol Analyzer Toolkit</title>
		<imprint>
			<publisher>Syngress</publisher>
			<date type="published" when="2006" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b30">
	<monogr>
		<title/>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Lancope</forename><surname>Inc</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Stealthwatch Architecture</surname></persName>
		</author>
		<ptr target="http://www.lancope.-com/products/stealthwatch-system/architecture/" />
		<imprint>
			<date type="published" when="2014" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b31">
	<monogr>
		<title level="m" type="main">Riverbed Cascade</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Riverbed</forename><surname>Inc</surname></persName>
		</author>
		<ptr target="http://www.riverbed.com/cas-cade/products/riverbed-nba.php" />
		<imprint>
			<date type="published" when="2014" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b32">
	<monogr>
		<title/>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Appneta</forename><surname>Inc</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Flow</forename><surname>View</surname></persName>
		</author>
		<ptr target="http://www.appneta.com/products/flowview/" />
		<imprint>
			<date type="published" when="2014" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b33">
	<analytic>
		<title/>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">L</forename><surname>Daigle</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">WHOIS Protocol Specification, RFC</title>
		<imprint>
			<biblScope unit="volume">3912</biblScope>
			<date type="published" when="2004-09" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b34">
	<analytic>
		<title level="a" type="main">A Lightweight UDP Transfer Protocol for the Internet Registry Information Service</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Newton</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">RFC</title>
		<imprint>
			<biblScope unit="volume">4993</biblScope>
			<date type="published" when="2007-08" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b35">
	<monogr>
		<title level="m" type="main">Extensible Provisioning Protocol (EPP), RFC 4930</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Hollenbeck</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2009-08" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b36">
	<analytic>
		<title/>
		<ptr target="http://www.sysdig.org" />
	</analytic>
	<monogr>
		<title level="j">Draios Inc, sysdig</title>
		<imprint>
			<date type="published" when="2014" />
		</imprint>
	</monogr>
</biblStruct>

				</listBibl>
			</div>
		</back>
	</text>
</TEI>
