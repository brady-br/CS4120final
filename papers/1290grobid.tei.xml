<?xml version="1.0" encoding="UTF-8"?>
<TEI xmlns="http://www.tei-c.org/ns/1.0" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
xsi:schemaLocation="http://www.tei-c.org/ns/1.0 /Users/atharsefid/Desktop/grobid-0.5.3/grobid-home/schemas/xsd/Grobid.xsd"
 xmlns:xlink="http://www.w3.org/1999/xlink">
	<teiHeader xml:lang="en">
		<encodingDesc>
			<appInfo>
				<application version="0.5.3" ident="GROBID" when="2020-09-29T01:52+0000">
					<ref target="https://github.com/kermitt2/grobid">GROBID - A machine learning software for extracting information from scholarly documents</ref>
				</application>
			</appInfo>
		</encodingDesc>
		<fileDesc>
			<titleStmt>
				<title level="a" type="main">Are Text-Only Data Formats Safe? Or, Use This L A T E X Class File to Pwn Your Computer</title>
			</titleStmt>
			<publicationStmt>
				<publisher/>
				<availability status="unknown"><licence/></availability>
			</publicationStmt>
			<sourceDesc>
				<biblStruct>
					<analytic>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Stephen</forename><surname>Checkoway</surname></persName>
							<affiliation key="aff0">
								<orgName type="institution" key="instit1">UC San Diego</orgName>
								<orgName type="institution" key="instit2">RTFM, Inc</orgName>
							</affiliation>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">U</forename><forename type="middle">C</forename><surname>San</surname></persName>
							<affiliation key="aff0">
								<orgName type="institution" key="instit1">UC San Diego</orgName>
								<orgName type="institution" key="instit2">RTFM, Inc</orgName>
							</affiliation>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Diego</forename><forename type="middle">Hovav</forename><surname>Shacham</surname></persName>
							<affiliation key="aff0">
								<orgName type="institution" key="instit1">UC San Diego</orgName>
								<orgName type="institution" key="instit2">RTFM, Inc</orgName>
							</affiliation>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Eric</forename><surname>Rescorla</surname></persName>
							<affiliation key="aff0">
								<orgName type="institution" key="instit1">UC San Diego</orgName>
								<orgName type="institution" key="instit2">RTFM, Inc</orgName>
							</affiliation>
						</author>
						<title level="a" type="main">Are Text-Only Data Formats Safe? Or, Use This L A T E X Class File to Pwn Your Computer</title>
					</analytic>
					<monogr>
						<imprint>
							<date/>
						</imprint>
					</monogr>
				</biblStruct>
			</sourceDesc>
		</fileDesc>
		<profileDesc>
			<abstract>
				<p>We show that malicious T E X, BIBT E X, and METAPOST files can lead to arbitrary code execution, viral infection , denial of service, and data exfiltration, through the file I/O capabilities exposed by T E X&apos;s Turing-complete macro language. This calls into doubt the conventional wisdom view that text-only data formats that do not access the network are likely safe. We build a T E X virus that spreads between documents on the MiKT E X distribution on Windows XP; we demonstrate data exfiltration attacks on web-based L A T E X previewer services.</p>
			</abstract>
		</profileDesc>
	</teiHeader>
	<text xml:lang="en">
		<body>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="1">Introduction</head><p>The divide between "code" and "data" is among the most fundamental in computing. Code expresses behavior or functionality to be carried out by a computer; data encodes and describes an object (a photo, a spreadsheet, etc.) that is conceptually inert, and examined or manipulated by means of appropriate code. The complexity of data formats for media manipulated by desktop systems, together with the inability of programmers to write bug-free code, has generated a stream of exploits in common media formats. These exploits take advantage of software bugs to induce arbitrary behavior when a user views a data file, even seemingly simple ones such as Windows' animated cursors <ref type="bibr" target="#b13">[16]</ref>. The inclusion of powerful scripting languages in file formats like Microsoft's Word has led to so-called macro viruses, <ref type="bibr" target="#b0">1</ref> and to PostScript documents that violate a paper reviewer's anonymity <ref type="bibr" target="#b2">[3]</ref>. These two trends have combined in the use of PDF files that include JavaScript to exploit bugs in Adobe's Acrobat; by one report <ref type="bibr" target="#b16">[19]</ref>, some 80% of exploits in the fourth quarter of 2009 used malicious PDF files. Thus the complexity and opacity of data formats has made data behave more like code. On the other side, a line of work culminating in the English-language shellcode of Mason et al. <ref type="bibr" target="#b11">[13]</ref> has shown how to make code look more like data.</p><p>In this paper, we present a case study of another unsafe data format, one that is of particular interest to the academic community: T E X. Unlike Word documents or PDF files, the input file formats associated with T E X are all plain text and thus, na¨ıvelyna¨ıvely, "safe." L A T E X and BIBT E X files are routinely transmitted in research environments -a practice we show is fundamentally unsafe. Compiling a document with standard T E X distributions allows total system compromise on Windows and information leakage on UNIX.</p><p>T E X is unsafe. Donald Knuth's T E X is the standard typesetting system for mathematical documents. It is also a Turing-complete macro language used to interpret scripts from potentially untrusted sources. In this paper, we show that a specific capability exposed to T E X macros -the ability to read and write arbitrary filesmakes it (and other commonly used bits of T E Xware, such as BIBT E X and METAPOST) a threat to system security and data privacy.</p><p>We demonstrate two concrete attacks. First, as an example of running arbitrary programs, we build a T E X virus that affects recent MiKT E X distributions on Windows XP, spreading to all of a user's T E X documents.</p><p>The virus requires no user action beyond compiling an infected file. Our virus does nothing but infect other documents, but it could download and execute binaries or undertake any other action it wishes.</p><p>Second, we describe data exfiltration and denial of service attacks against web-based L A T E X and METAPOST previewer services. Our findings have implications for any online service that compiles or hosts T E X files on behalf of untrusted users, including the Comprehensive T E X Archive Network (CTAN) and Cornell University Library's arXiv.org preprint server.</p><p>Defenses. The lesson we teach here is one learned over and over: As the Internet has made document sharing easier and more pervasive, file formats once considered trusted have become attack vectors, either because the parser was insecure or because the scripting capabilities exposed to files in the format have unforeseen consequences. Barring a fundamental change in the way that data-handling code is designed and implemented, we must set aside the idea that data, unlike code, can be "safe"; we should instead treat data-processing code as inherently insecure and design systems that can withstand its compromise -as, for example, Bernstein has advocated <ref type="bibr" target="#b4">[5]</ref>.</p><p>For T E X specifically, there are three main approaches to protect against abuse of interpreted languages. First, one could audit the interpreter for vulnerabilities that allow the attacker to subvert the intended restrictions on the scripting language. Such vulnerabilities are commonly found in supposedly safe file formats and frequently allow the attacker to execute arbitrary code, as in Dowd's recent ActionScript exploit <ref type="bibr" target="#b7">[8]</ref>. We know of no such vulnerabilities in T E X, but their absence does nothing to defend against capabilities granted to T E X scripts by design, including the file I/O that forms the basis for our attacks. A second approach is to attempt to establish a safe subset of commands, through blacklisting, whitelisting, or other forms of filtering or rewriting. (This is akin to code-rewriting systems in which code is verified safe at load-time <ref type="bibr" target="#b14">[17]</ref>.) As we show below, the malleability of the T E X language makes it difficult to filter safely. A final, more drastic approach is to treat the entire system as untrusted and sandbox it using the operating system's isolation mechanisms; as we show, this seems like the most promising approach for T E X.</p><p>Observations similar to the ones we have made for T E X apply to other data formats that are programmable (e.g., using JavaScript) or require complicated and error-prone parsers. Ensuring that all programs that process such formats are appropriately sandboxed represents a reimagination of the way traditional desktop environments are engineered; a redesigned system would dovetail with the principles laid out by Bernstein <ref type="bibr" target="#b4">[5]</ref>.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2">Low-level details of T E X</head><p>In this section, we recall some features of the T E X programming language and the L A T E X macro package. The discussion covers only the behaviors on which our attack relies; for more complete coverage we refer the reader to <ref type="bibr" target="#b5">[6,</ref><ref type="bibr" target="#b10">11,</ref><ref type="bibr" target="#b21">24]</ref>. Even so, the discussion is quite technical. Readers not interested in T E X arcana are encouraged to continue to Section 3, referring back to this section for reference as necessary.</p><p>Important control sequences. T E X and L A T E X behavior is principally controlled by a variety of control sequences, conventionally a sequence of characters prefaced by a backslash (\). Below are some of the control sequences we will use in the remainder of the paper. \catcode T E X primitive that changes the category code of a character:\catcodè\X=0 changes the default category code of X from "letter" to "escape character." \csname . . . \endcsname T E X primitive that builds control sequences: \csname foo\endcsname is (almost) the same as \foo. \include L A T E X macro that behaves as \input except that the included material begins on a new page:</p><p>\include{file}.</p><p>\input T E X primitive (redefined by L A T E X) that reads the contents of its space-separated argument as if the text were typed directly into the main document: \input file (or in L A T E X, \input{file}). \@input L A T E X internal similar to T E X's \input. \@@input L A T E X internal identical to T E X's \input. \jobname T E X primitive that expands to the name of the file being compiled without its extension. \newread (L A )T E X macro to allocate a new stream for file reading: \newread\file. \openin T E X primitive that opens a file and associates it with a read stream: \openin\file=foo.ext. \read T E X primitive that reads a line from a file, assigning each character the category code currently in effect: \read\file to\line stores the tokens produced from the file into \line. \readline ε-T E X extension that behaves as \read but assigns only the category codes "other" and "space." \relax T E X primitive that takes no action; just relaxes. \write T E X primitive that writes an expanded token list to a file: \write\file{foo}. Other control sequences are used below, but either their behavior is clear or their use is not of central importance.</p><p>T E X parsing behavior. T E X's behavior is usually described in terms of a "mouth" and a "stomach." The exact behavior is fairly complex but the following simplified description will suffice for this paper. T E X's mouth reads each line of input character by character and produces a stream of tokens which are acted on by T E X's stomach.</p><p>There are two types of tokens produced by T E X's mouth -character tokens and control sequences -and their production is governed by the category code -an integer in 0-15 -of the characters read. At any given time, each input character is associated with a single category code. Except in certain situations, expandable tokens (e.g., macros) are expanded into other tokens en route to T E X's stomach. Once in the stomach, T E X processes the tokens, performing assignments -such as changing category codes -and typesetting.</p><p>When T E X encounters two identical characters tokens with category code 7, (by default onlyˆ)onlyˆonlyˆ), followed by two lowercase hexadecimal numbers, it treats the four characters as if a single character with ASCII value the hexadecimal number had appeared in the input.</p><p>This ability to write to any file presents an obvious danger in that important files can be overwritten or the computing environment can be changed by the introduction of new files. The average user's computer is a target-rich environment, with any number of files which, when modified, allow the attacker to execute code in the user's environment. For concreteness, we focus on a single case: on Windows XP we can write JScript files to a user's Startup directory which will be executed by the Windows Script Host facility at login.</p><p>Once the script is executed, one possibility is it could download and run a binary of the attacker's choice using the Microsoft.XMLHTTP object. For example, this could cause the computer to become part of a botnet.</p><p>There is one technical hurdle that must be overcome in order to write to the Startup directory, namely spaces in the file path, which T E X does not ordinarily allow. However, we can leverage Windows' compatibility with older programs that expect file and directory names in 8.3 format. For example, StartMenu can be specified as STARTM˜1STARTM˜STARTM˜1. We use this compatibility in our proof-of-concept for application execution, a L A T E X virus.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.1">A two-stage virus</head><p>The virus attacks in two phases. In the first phase, it copies the payload to disk and install the appropriate JScript file into Startup. In the second phase, the JScript file finds other L A T E X documents on the disk and infects them.</p><p>The first phase takes advantage of the fact that the T E X engine used in MiKT E X -and indeed in all modern T E X distributions -is pdfT E X which contains the ε-T E X extension \readline <ref type="bibr" target="#b20">[23]</ref>. First, \readline is used to read the document being compiled line by line and write an exact copy to C:\WINDOWS\Temp\sploit.tmp. Then, a JScript file containing the second phase of the virus is written to the Administrator's Startup directory. Since the exact details of how this is accomplished are rather technical, they are omitted; however, the code for the first phase is given in Listing 1.</p><p>The second phase, written in JScript, first creates a FileSystemObject, then it reads the sploit.tmp file, and extracts all of the T E X code between two marker lines -the virus code. Next, it finds all of the files in the Administrator directory with the extension .tex. Finally, those files which contain \end{document} have the virus inserted just before the end.</p><p>In total, the virus requires two marker lines and 21 80-column lines of T E X. The T E X code is given in Listing 1; in the interest of not providing a complete, working virus, the majority of the JScript is omitted, but the remaining code is straightforward and we have tested it in our own systems. Moreover, it should be clear that we could in principle execute any JScript code and do far more damage than just modifying L A T E X files on disk.</p><p>An earlier proof-of-concept T E X virus for NetBSD was designed in 1994 by Keith McMillan <ref type="bibr" target="#b12">[15]</ref>. McMillan's modifies a user's GNU Emacs initialization file (something no longer possible with Web2C based T E X distributions) and relies on the user's visiting a directory in Emacs to spread to other .tex files in that directory. By contrast, our virus works on modern Windows systems and requires no user interaction beyond an eventual relogin.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.2">BIBT E X databases</head><p>One potential barrier to using T E X for application execution is that the user might notice any malicious code present in files he is editing. BIBT E X databases provide a two-fold solution by (1) moving the malicious code out of the main document so it is less noticeable; and (2) allowing the code to be widely distributed.</p><p>BIBT E X is a program used to turn a database of references (the .bib files) into L A T E X code for a bibliography consisting of the references for the citations in the paper (the .bbl files). Subsequent runs of L A T E X cause the text of the generated .bbl files to be \input into the document at the specified location. It is quite common for users to simply download BIBT E X entries or even entire databases, such as the RFC BIBT E X files provided by Miguel Garcia Martin. In the latter case, the database often contains a large number of entries which the user does not carefully examine; indeed he may never even look at the entries but rather search the database with a tool such as RefT E X. This facilitates an attack since malicious code may be harder to notice in a large file full of unused information.</p><p>Each BIBT E X entry has the form @type..., where type is one of the types understood by a particular style such as book or article. There is an additional entry type, @preamble, which inserts text verbatim into the .bbl file just before the bibliography. In addition, multiple @preamble entries are concatenated into a single line in the order they appear in the database. Thus, malicious code can be separated into arbitrarily many parts and scattered (in order) throughout the .bib file, and will be executed regardless of which entries the author actual cites.</p><p>Other file formats that embed T E X commands can also be used as attack vectors. Examples include graphics languages such as METAPOST and Asymptote.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.3">Class and style files</head><p>Base L A T E X functionality is extended through the use of class files which set the overall format of the document to be produced and style files which typically change the behavior of one aspect of the document. At present, %%%%SPLOIT%%%% {\newwrite\w\let\c\catcode\c`{\newwrite\w\let\c\catcode\c`* 13\def * {\afterassignment\d\count255"}\def\d{% \expandafter\c\the\count255=12}{ * 0D\def\a#1ˆˆM{\immediate\write\w{#1}}\c`ˆˆM5% \newread\r\openin\r=\jobname \immediate\openout\w=C:/WINDOWS/Temp/sploit.tmp \loop\unless\ifeof\r\readline\r to\l\expandafter\a\l\repeat\immediate\closeout \w\closein\r}{ * 7E * 24 * 25 * 26 * 7B * 7D\immediate\openout \w=C:/DOCUME˜1/ADMINI˜1/STARTM˜1/PROGRAMS/STARTUP/sploit.js \c`[1\c`]2\c`\@0 \newlinechar`\ˆˆJ\endlinechar-1 * 5C@immediate@write @w[fso=new ActiveXObject("Scripting.FileSystemObject");foo=ˆˆJ 11 lines of JScript omitted f(fso.GetFolder("C:\\Documents and Settings\\Administrator"));}m();] @immediate@closeout@w]}% %%%%SPLOIT%%%% CTAN has 1080 user contributed L A T E X 2 ε packages. The MiKT E X repository on CTAN has 1908 packages. Similar to the situation with large BIBT E X databases, most users never examine a style or class file. If a popular package on one of the many CTAN mirrors were modified to contain malicious code, it might affect a large number of L A T E X users before being discovered.</p><p>Rather than corrupting an existing package, an attacker could submit a package, e.g., purporting to implement the guidelines for submission to a conference, to CTAN. Anyone using such the package would be at risk.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4">Web-based L A T E X previewers</head><p>We now turn our attention to a slightly harder target. There are more than a dozen web-based services that compile L A T E X files on users' behalf and return the resulting PDFs. We have designed successful exfiltration and file writing attacks on most of these services. Moreover, the filtering mechanisms devised by these services were largely ineffective against our attacks. We have disclosed the vulnerabilities we found to the affected services to the operators, with universally positive responses. As a result, number of operators changed their security policy or removed the previewer altogether.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.1">Reading files</head><p>All properly configured web servers allow only a subset of the files on the computer to be visible to connecting clients. In this section, we show how we can use the power of T E X to read files from web servers that expose a L A T E X interface.</p><p>There are various ways that an attacker can use the exposed L A T E X interface to read files not exposed by the web server. The two most obvious approaches are using \input or \include to interpolate the text of the file into the T E X input and hence the output document. One minor problem with this approach is that we have lost line breaks in the input file since T E X will treat them as spaces in the usual manner. One way to avoid losing line breaks, as well as circumventing blacklisting of such control sequences, is to use T E X's ability to read files. The basic idea is to open a file for reading, read it one line at a time, and feed it to the typesetting engine. The code for this is given in Listing 2.</p><p>An additional problem is processing characters in the input that T E X considers to be special. For example, running the code in Listing 2 on one of the authors' computer produces the error "You can't use 'macro parameter character #' in horizontal mode." This is easily fixed by changing the category code for # with\catcodè\#=12 before the \read command in Listing 2 and restoring it afterward. Other special characters can be handled in an analogous manner. Alternatively, the \readline primitive from ε-T E X can be used.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.2">Writing files</head><p>As discussed in Section 3, Web2C-based T E X distributions such as teT E X and T E X Live typically only allow files to be output in the current directory or a subdirectory. However, this still leaves room for attacks. A common way to generate images for displaying in a web page is to make a temporary directory -for example in /tmp -and generate the needed files inside that directory. Afterward, the images are copied elsewhere or used immediately and then the whole directory is deleted. A previewer that generates images in a web-accessible directory and then cleans up the specific files it knows will be generated but not needed may be vulnerable to attack. For example, on a web server that allows PHP, an attacker need only open a file using \openout and use \write to write PHP code, which would then be executed by the server when the attacker did an HTTP request for that file. If the previewer is based on MiKT E X, these constraints are relaxed and attack is even easier.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.3">Denial of service</head><p>Any previewer that allows the T E X looping construct \loop . . . \repeat or the definition of new macros is at risk of a denial of service attack. The shortest form of this attack is \loop\iftrue\repeat. Another way to achieve this is to use \def\nothing{\nothing}. The loops cause T E X to burn CPU cycles without actually producing anything. If enough instances of it happen at once, the computer will slow to a crawl and no more useful work will be possible until the processes are killed.</p><p>One extension of this attack is to cause T E X to produce very large files, potentially filling up the disk. The way to do this without exhausting T E X's memory is to produce pages of output so that T E X will discard from its memory the pages it has already processed. This can be done using \shipout -a T E X primitive that writes the contents of the following box to the output file.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.4">Escaping math mode</head><p>Many of the L A T E X previewers on the web were designed only to display mathematics. As a result, the text that the user inputs is copied into a mathematics environment in an otherwise-complete L A T E X document to pass off to L A T E X for compilation. The most common way to do this is to put the input inside a eqnarray * or align * environment. To get out of math mode, we simply start the input with \end{eqnarray * } (resp. \end{align * }) and to ensure that the document compiles, we end the input with \begin{eqnarray * } (resp. \begin{align * }). Alternatively, to get out of math mode temporarily, we can use \parbox.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.5">Evading Filters</head><p>The natural defense against the attacks described in this section is to filter out dangerous commands. However, this is more difficult than it first appears. In this section, we describe a number of techniques for evading simple filters. For concreteness, the discussion below is limited to \input, but most of the techniques are applicable to all the commands discussed above.</p><p>Using some of the features and control sequences described in Section 2, we can use \input without having to write the literal string \input. For example, we can use \csname input\endcsname. This attack is more likely to succeed than \input because \csname is used mostly by package writers and only rarely by authors.</p><p>An attacker can evade simpleminded filters by using \catcode to change the category code of another character to "escape" and use that in place of \. For example, one can change the category code of 'X' and use Xinput. Additionally, one can usêˆ5c in place of \ as described in Section 2. Of course, other characters could be replaced, not simply \, for example, if the word "input" is not allowed anywhere in the previewer's input, then 'p' can be replaced withˆˆ70withˆˆ70.</p><p>Yet another possibility is for an attacker to invoke \@input or \@@input directly -this requires using either \makeatletter or \catcode to change the category code of @ to "letter." In all likelihood, there are a number of L A T E X internals that could be used to facilitate an attack. These are much less well known outside of the package writing community and are thus likely to escape the notice a web site administrator attempting to secure a L A T E X previewer.</p><p>One can make use of a peculiarity of the implementation of L A T E X environments to evade filters that look for control sequences starting with \. A L A T E X environment foo consists of a pair \begin{foo} . . . \end{foo}. The \begin{foo} and \end{foo} macros execute the control sequences \foo and \endfoo using \csname. Thus, one can execute any control sequence by passing its name as the argument to \begin. If \endfoo is not defined, T E X defines it as \relax. For example, \begin{TeX}\end{TeX} eventually executes \TeX\relax. Since the backslash before the control sequence name is not present when using \begin, it does not trigger a filter looking for particular control sequences which begin with \. One can pass arguments to a macro simply by placing the argument after the \begin. For example, one can read files with \begin{input}{/file/path}\end{input}.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.6">METAPOST</head><p>METAPOST is a declarative, macro programming language, based on METAFONT, used to produce vector graphics, often for inclusion into (L A )T E X documents. Like T E X, METAPOST is an extremely powerful language and as such, there are dangers associated with providing a METAPOST previewer on the web.</p><p>The first such danger is the ability to write arbitrary single line T E X fragments. Any literal text that appears between btex and etex is written to a tex file which is compiled by T E X and the result is included into the METAPOST output; this is often used for typesetting labels. METAPOST provides a way to include arbitrary, multi-line T E X code at the beginning of the tex file used with btex...etex using the verbatimtex...etex construct. The latexMP package makes using L A T E X for typesetting easy. It includes a macro textext which takes a string argument containing a single line of L A T E X to typeset. As a result, all of the attacks discussed thus far work just as well for a METAPOST previewer that allows the btex...etex construction or allows the use of the latexMP package. Even worse, from a web site administrator's point of view, is that since latexMP allows strings and not just literal data to be typeset, attempting to sanitize input to the textext macro requires performing a data flow analysis that can prove that no harmful control sequences make it into the string ultimately used as the argument.</p><p>A second danger is that METAPOST includes commands for reading and writing files, readfrom and write, respectively. To read an arbitrary file such as /etc/passwd, we can use the code in Listing 3.</p><p>As seen in Listing 3, METAPOST has a command forever that loops forever. In addition to forever, METAPOST allows macro definitions via def which can be used to simulate looping. As before, we can actually do more than simply burn CPU cycles. We can try to write large files or write many files. For example, Listing 4 will produce a maximum of 4096 files per minute. This limit is due to METAPOST's maximum numeric value being slightly under 4096.</p><p>One final avenue of attack against a METAPOST previewer is to use the scantokens command. It takes a string argument and reads the string as if the contents had been written literally in the file at that point, with a few exceptions. In particular, any of the attacks listed here could be created using string operations and then passed to scantokens.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.7">Evaluation</head><p>We tested the aforementioned attacks against a variety of web sites running L A T E X previewers. The previewers examined vary in the type of content they were meant to accept from a single mathematical expression to an entire L A T E X document.</p><p>Since our goal was to probe but not attack these web sites, file reading was restricted to files with no security implications such as /etc/hostname on UNIX and C:\WINDOWS\win.ini on Windows. Rather than actually produce multiple infinite looping instances, we test that macros can be defined by defining benign macros using \def, \gdef, etc. Looping via \loop is attempted using the code in Listing 5. If \loop is allowed, the fragment will output "before after before." Once it has been determined which of the looping constructs work, a sin- gle infinite loop is produced to check for the presence of timeouts. <ref type="bibr" target="#b1">2</ref> No attempts were made to write files, consequently those attacks are unevaluated. <ref type="table">Table 1</ref> contains the results of the attacks. As can be seen, the majority of the attacks were successful.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.7.1">Equation previewers</head><p>The first group of L A T E X previewers in <ref type="table">Table 1</ref>  <ref type="bibr" target="#b3">[4,</ref><ref type="bibr" target="#b6">7,</ref><ref type="bibr">12,</ref><ref type="bibr">14,</ref><ref type="bibr" target="#b15">18,</ref><ref type="bibr" target="#b19">22]</ref> are meant to display a single mathematical statement at a time. Many of the previewers' authors took precautions against several of the file reading attacks described in Section 4.1 by attempting to preprocess the input and either remove or disallow particular portions of input with varying degrees of success. All of them neglected to account for the T E X primitive, \openin and all were potentially vulnerable to denial of service attacks via infinite loops using either \loop or \def.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.7.2">Full document previewers</head><p>The second group of L A T E X previewers in <ref type="table">Table 1</ref>  <ref type="bibr" target="#b0">[1,</ref><ref type="bibr" target="#b8">9,</ref><ref type="bibr" target="#b17">20,</ref><ref type="bibr" target="#b18">21,</ref><ref type="bibr" target="#b23">26,</ref><ref type="bibr" target="#b24">27]</ref> are meant to display a complete L A T E X document. By their very nature, full document previewers must be permissive if they are to be useful. Full document previewers are potentially vulnerable to all of the same vulnerabilities as the equation previewers as well as vulnerabilities that come from allowing the inclusion of packages. For example, the Listings package, designed to typeset source code listings, can be used to read and display text files. All of the full document previewers we evaluate except for ScribT E X -which employs several of the defenses discussed in Section 4.8 -are vulnerable to all of the attacks except \input.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.7.3">MathTran</head><p>MathTran <ref type="bibr" target="#b22">[25]</ref> was designed as a T E X previewer with security in mind. MathTran uses Secure plain T E X, a <ref type="bibr" target="#b1">2</ref> Since webservers typically have timeouts of several minutes for CGI -for example, Apache and IIS both default to five minutesthis infinite loop causes no real damage. However, the timeout is long enough that a real attacker attempting a denial of service would simply have to create new infinite loops every few minutes. \loop \def \input \@input \csname \catcodêˆ5c \openin \begin L A T E X Eqn. Ed. for the Internet <ref type="bibr" target="#b3">[4]</ref> Roger's Online Eqn. Ed. <ref type="bibr" target="#b6">[7]</ref> L A T E X Eqn. Ed. <ref type="bibr">[12]</ref> mathURL † <ref type="bibr">[14]</ref> Hamline L A T E X Eqn. Ed. <ref type="bibr" target="#b15">[18]</ref> MathBin.net <ref type="bibr" target="#b19">[22]</ref> ScribT</p><formula xml:id="formula_0">E X ‡ [1] L A T E X Previewer [9] ScienceSoft L A T E X [20] L A T E XLab [21] L A T E X Online Compiler [26] Web L A T E X [27]</formula><p>MathTran <ref type="bibr" target="#b22">[25]</ref> Table 1: L A T E X previewer vulnerabilities. The \loop and \def columns contain a if the attack could be used to cause a denial of service by producing an infinite loop. The other columns contain a if the attack can be used to read input. † The only files we were able to read were the input and the ones produced by L A T E X. It is unknown if others were accessible. ‡ The previewer contains a timeout of several seconds.</p><p>Listing 5: Testing for \loop. \newif\iffoo\footrue \loop before \iffoo after \foofalse \repeat reimplementation of plain T E X that prevents using any control sequence other than those meant for typesetting. As a result, all of the attacks described above fail, with the one exception of escaping from math mode. This is the most secure web-based previewer we evaluate.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.7.4">METAPOST</head><p>The one METAPOST previewer we evaluate <ref type="bibr" target="#b9">[10]</ref> is vulnerable to reading and writing files using the META-POST commands. It is also vulnerable to all of the attacks that <ref type="bibr" target="#b8">[9]</ref> is vulnerable to using the btex...etex construct.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.8">Defenses against attacks</head><p>As we have seen, simply filtering out macros deemed unsafe is problematic. First, the list of macros that would need to be blacklisted is quite large, especially if the user can add additional packages. For example, the L A T E X 2 ε kernel alone defines the macros \include, \input, \@input, \@iinput, \@input@, \@@input, and \InputIfFileExists <ref type="bibr" target="#b5">[6]</ref>. Second, style and class files can contain additional macros for reading files, for example \lstinputlisting from the listings package or \verbatiminput from the verbatim package. The blacklisting approach seems unlikely to succeed without a complete understanding of T E X and L A T E X.</p><p>Instead of blacklisting unsafe macros, we could instead whitelist macros deemed safe. This approach seems difficult to implement and verify successfully. For example, it would be easy to overlook the fact thatˆˆ5cthatˆˆ5c starts a new control sequence. In addition, for the previewer to be useful, the list of acceptable control sequences would be quite large. MathTran <ref type="bibr" target="#b22">[25]</ref> takes a similar approach, except that rather than have a preprocessing step, plain T E X itself is completely reimplemented.</p><p>Rather than preprocessing the input, a better approach leverages the power of T E X to perform the input sanitization. The mathURL previewer <ref type="bibr">[14]</ref> takes this approach by redefining \input and \include to be noop macros that just expand to their own arguments. Had \@@input been redefined instead, the majority of the file reading attacks would have failed since all of L A T E X's input macros rely on \@@input. Similar to blacklisting, this approach requires deciding on a set of disallowed macros and then redefining them; however, it does not fall prey to using thêˆ5c, \catcode, \csname, or \begin attacks with the redefined macros. As with blacklisting, it still requires knowing which control sequences to redefine.</p><p>A more promising approach for preventing T E X from reading sensitive files is to leverage T E X runtime configuration parameters. Web2C-based T E X distributions contain the runtime configuration parameter openin any that, when set to p, for "paranoid," disallows reading any files in a parent directory. By default, this parameter is set to allow any files to be read. This relies on the particular T E X implementation correctly implementing this parameter. Unfortunately, MiKT E X does not contain a similar configuration parameter. A similar parameter for Web2C-based distributions controls writing.</p><p>A second approach (which can be used in concert with the first) is to run T E X in an operating system jail containing just the files needed for the T E X distribution. This approach has two major advantages. First, it is not sensitive to details of the T E X implementation. Second, it allows us to leverage existing work on process isolation.</p><p>We note that ScribT E X uses both the configuration and jail approaches and this is the reason it is impervious to all of the file reading attacks <ref type="bibr" target="#b1">[2]</ref>.</p><p>Defending against denial of service attacks only requires a timeout short enough to ensure that the server does not get overwhelmed.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5">Conclusions</head><p>Conventional wisdom in security distinguishes between "safe" and "unsafe" data files. Binary files are more risky than text files; content that interacts with the network is more risky than purely local content. In this paper, we argue that even seemingly safe data files can be unsafe. Although T E X documents are plain text, manipulating maliciously constructed L A T E X documents or class files, BIBT E X databases, or METAPOST graphics files can lead to arbitrary code execution, viral infection, denial of service, and data exfiltration.</p></div><figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_0"><head>Listing 1 :</head><label>1</label><figDesc>Virus code with JScript omitted.</figDesc></figure>

			<note place="foot" n="1"> Amusingly, some advocacy documents list &quot;no macro viruses&quot; as an advantage T E X has over Word; see, e.g., http://web.mit. edu/klund/www/urk/texvword.html.</note>

			<note place="foot" n="3"> Malicious T E X usage It is generally assumed that it is safe to process arbitrary, untrusted documents with T E X, and by extension L A T E X. However, this is untrue; in fact, T E X can write arbitrary files to the filesystem. On UNIX systems, T E X output is typically restricted to the local directory and its subdirectories, which limits the scope of attack somewhat. However, MiKT E X, the most common T E X distribution for Windows, has no internal controls on where output can be written.</note>
		</body>
		<back>

			<div type="acknowledgement">
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Acknowledgments</head><p>We thank Stefan Savage for numerous helpful conversations; Troy Henderson for letting us experiment extensively with his L A T E X and METAPOST previewers; llll from FreeNode's #latex for pointing out the \begin attack; and the anonymous reviewers for their helpful comments.</p></div>
			</div>

			<div type="references">

				<listBibl>

<biblStruct xml:id="b0">
	<monogr>
		<title/>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">James</forename><surname>Allen</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Scribt</surname></persName>
		</author>
		<ptr target="http://www.scribtex.com" />
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b1">
	<monogr>
		<title/>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">James</forename><surname>Allen</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2008-04" />
		</imprint>
	</monogr>
	<note>Personal communication</note>
</biblStruct>

<biblStruct xml:id="b2">
	<analytic>
		<title level="a" type="main">Information flow in the peer-reviewing process (extended abstract)</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Michael</forename><surname>Backes</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Markus</forename><surname>Dürmuth</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Dominique</forename><surname>Unruh</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of IEEE Security &amp; Privacy</title>
		<editor>Birgit Pfitzmann and Patrick McDaniel</editor>
		<meeting>IEEE Security &amp; Privacy</meeting>
		<imprint>
			<publisher>IEEE Computer Society</publisher>
			<date type="published" when="2007-05" />
			<biblScope unit="page" from="187" to="191" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b3">
	<monogr>
		<title/>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Will</forename><surname>Bateman</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Steve</forename><surname>Mayer</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>L A T E X</surname></persName>
		</author>
		<ptr target="http://www.codecogs.com/components/equationeditor/equationeditor.php" />
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b4">
	<analytic>
		<title level="a" type="main">Some thoughts on security after ten years of qmail 1.0</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Daniel</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Bernstein</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of CSAW 2007</title>
		<editor>Ravi Sandhu and Jon A. Solworth</editor>
		<meeting>CSAW 2007</meeting>
		<imprint>
			<publisher>ACM Press</publisher>
			<date type="published" when="2007-11" />
			<biblScope unit="page" from="1" to="10" />
		</imprint>
	</monogr>
	<note>Invited paper</note>
</biblStruct>

<biblStruct xml:id="b5">
	<monogr>
		<title level="m" type="main">The L A T E X 2 ε sources</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Johannes</forename><surname>Braams</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">David</forename><surname>Carlisle</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Alan</forename><surname>Jeffrey</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Leslie</forename><surname>Lamport</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Frank</forename><surname>Mittelbach</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Chris</forename><surname>Rowley</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Rainer</forename><surname>Schöpf</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2005-12" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b6">
	<monogr>
		<title level="m" type="main">Roger&apos;s online equation editor</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Roger</forename><surname>Cortesi</surname></persName>
		</author>
		<ptr target="http://rogercortesi.com/eqn/index.php" />
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b7">
	<monogr>
		<title level="m" type="main">Application-specific attacks: Leveraging the ActionScript virtual machine</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Mark</forename><surname>Dowd</surname></persName>
		</author>
		<ptr target="http://documents.iss.net/whitepapers/IBM_X-Force_WP_final.pdf" />
		<imprint>
			<date type="published" when="2008-04" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b8">
	<monogr>
		<title/>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Troy</forename><surname>Henderson</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>L A T E X Previewer</surname></persName>
		</author>
		<ptr target="http://www.tlhiv.org/ltxpreview" />
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b9">
	<monogr>
		<title/>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Troy</forename><surname>Henderson</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Metapost</surname></persName>
		</author>
		<ptr target="http://www.tlhiv.org/mppreview" />
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b10">
	<monogr>
		<title/>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">E</forename><surname>Donald</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Knuth</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>The</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Xbook</surname></persName>
		</author>
		<imprint>
			<date type="published" when="1986" />
			<publisher>Addison-Wesley Professional</publisher>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b11">
	<analytic>
		<title level="a" type="main">English shellcode</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Joshua</forename><surname>Mason</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Sam</forename><surname>Small</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Fabian</forename><surname>Monrose</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Greg</forename><surname>Macmanus</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Somesh Jha and Angelos Keromytis</title>
		<imprint>
			<publisher>ACM Press</publisher>
			<date type="published" when="2009-11" />
			<biblScope unit="page" from="524" to="557" />
		</imprint>
	</monogr>
	<note>Proceedings of CCS 2009</note>
</biblStruct>

<biblStruct xml:id="b12">
	<monogr>
		<title level="m" type="main">A platform independent computer virus</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Keith Allen Mcmillan</surname></persName>
		</author>
		<ptr target="http://vx.netlux.org/lib/vkm00.html" />
		<imprint>
			<date type="published" when="1994-04" />
		</imprint>
		<respStmt>
			<orgName>The University of Wisconsin-Milwaukee</orgName>
		</respStmt>
	</monogr>
	<note>Master&apos;s thesis</note>
</biblStruct>

<biblStruct xml:id="b13">
	<monogr>
		<title level="m" type="main">Vulnerabilities in GDI could allow remote code execution (925902)</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Microsoft</surname></persName>
		</author>
		<ptr target="http://www.microsoft.com/technet/security/Bulletin/MS07-017.mspx" />
		<imprint>
			<date type="published" when="2007-04" />
		</imprint>
	</monogr>
	<note>Microsoft Security Bulletin MS07-017</note>
</biblStruct>

<biblStruct xml:id="b14">
	<analytic>
		<title level="a" type="main">Safe kernel extensions without run-time checking</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><surname>George</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Peter</forename><surname>Necula</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Lee</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">USENIX, ACM SIGOPS, and IEEE TCOS</title>
		<editor>Karin Peterson and Willy Zwaenepoel</editor>
		<imprint>
			<date type="published" when="1996-10" />
			<biblScope unit="page" from="229" to="272" />
		</imprint>
	</monogr>
	<note>Proceedings of OSDI 1996</note>
</biblStruct>

<biblStruct xml:id="b15">
	<monogr>
		<title level="m" type="main">Hamline university physics department</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Andy</forename><surname>Rundquist</surname></persName>
		</author>
		<ptr target="http://www.hamline.edu/˜arundquist/equationeditor" />
		<editor>L A T E X</editor>
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b16">
	<monogr>
		<title level="m" type="main">Annual global threat report</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Scansafe</surname></persName>
		</author>
		<ptr target="http://www.scansafe.com/downloads/gtr/2009_AGTR.pdf" />
		<imprint>
			<date type="published" when="2009" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b17">
	<monogr>
		<title/>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">L A T E X</forename><surname>Sciencesoft</surname></persName>
		</author>
		<ptr target="http://sciencesoft.at/latex/?lang=en" />
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b18">
	<monogr>
		<title/>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Bobby</forename><surname>Soares</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>L A T E Xlab</surname></persName>
		</author>
		<ptr target="http://www.latexlab.org" />
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b19">
	<monogr>
		<title/>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Mark</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Stratman</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Mathbin</surname></persName>
		</author>
		<ptr target="http://mathbin.net" />
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b20">
	<monogr>
		<title level="m" type="main">Harmut Henkel, Pawł Jackowski, and Margin Schröder. The pdfT E X user manual</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">H</forename><surname>Thêthê´thê´thành</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Sebastian</forename><surname>Rahtz</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Hans</forename><surname>Hagen</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2007-01" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b21">
	<monogr>
		<title level="m" type="main">The ε-T E X manual</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">N T S</forename><surname>The</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Team</surname></persName>
		</author>
		<imprint>
			<date type="published" when="1998-02" />
		</imprint>
	</monogr>
<note type="report_type">Max-Planck-Institut für Physik</note>
</biblStruct>

<biblStruct xml:id="b22">
	<monogr>
		<title level="m" type="main">MathTran -Online translation of mathematical content</title>
		<ptr target="http://mathtran.open.ac.uk" />
		<imprint/>
		<respStmt>
			<orgName>The Open University</orgName>
		</respStmt>
	</monogr>
</biblStruct>

<biblStruct xml:id="b23">
	<monogr>
		<title/>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Annett</forename><surname>Thüring</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>L A T E X Online</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Compiler</surname></persName>
		</author>
		<ptr target="http://nirvana.informatik.uni-halle.de/˜thuering/php/latex-online/latex.php" />
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b24">
	<monogr>
		<title/>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">L A T E X</forename><surname>Web</surname></persName>
		</author>
		<ptr target="http://dev.baywifi.com/latex" />
		<imprint/>
	</monogr>
</biblStruct>

				</listBibl>
			</div>
		</back>
	</text>
</TEI>
