<?xml version="1.0" encoding="UTF-8"?>
<TEI xmlns="http://www.tei-c.org/ns/1.0" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
xsi:schemaLocation="http://www.tei-c.org/ns/1.0 /Users/atharsefid/Desktop/grobid-0.5.3/grobid-home/schemas/xsd/Grobid.xsd"
 xmlns:xlink="http://www.w3.org/1999/xlink">
	<teiHeader xml:lang="en">
		<encodingDesc>
			<appInfo>
				<application version="0.5.3" ident="GROBID" when="2020-09-29T02:02+0000">
					<ref target="https://github.com/kermitt2/grobid">GROBID - A machine learning software for extracting information from scholarly documents</ref>
				</application>
			</appInfo>
		</encodingDesc>
		<fileDesc>
			<titleStmt>
				<title level="a" type="main">ADsafety Type-Based Verification of JavaScript Sandboxing</title>
			</titleStmt>
			<publicationStmt>
				<publisher/>
				<availability status="unknown"><licence/></availability>
			</publicationStmt>
			<sourceDesc>
				<biblStruct>
					<analytic>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Joe</forename><surname>Gibbs</surname></persName>
							<affiliation key="aff0">
								<orgName type="institution">Brown University</orgName>
							</affiliation>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Politz</forename><surname>Spiridon</surname></persName>
							<affiliation key="aff0">
								<orgName type="institution">Brown University</orgName>
							</affiliation>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Aristides</forename><surname>Eliopoulos</surname></persName>
							<affiliation key="aff0">
								<orgName type="institution">Brown University</orgName>
							</affiliation>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Arjun</forename><surname>Guha</surname></persName>
							<affiliation key="aff0">
								<orgName type="institution">Brown University</orgName>
							</affiliation>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Shriram</forename><surname>Krishnamurthi</surname></persName>
							<affiliation key="aff0">
								<orgName type="institution">Brown University</orgName>
							</affiliation>
						</author>
						<title level="a" type="main">ADsafety Type-Based Verification of JavaScript Sandboxing</title>
					</analytic>
					<monogr>
						<imprint>
							<date/>
						</imprint>
					</monogr>
				</biblStruct>
			</sourceDesc>
		</fileDesc>
		<profileDesc>
			<abstract>
				<p>Web sites routinely incorporate JavaScript programs from several sources into a single page. These sources must be protected from one another, which requires robust sandboxing. The many entry-points of sandboxes and the subtleties of JavaScript demand robust verification of the actual sandbox source. We use a novel type system for JavaScript to encode and verify sandboxing properties. The resulting verifier is lightweight and efficient , and operates on actual source. We demonstrate the effectiveness of our technique by applying it to ADsafe, which revealed several bugs and other weaknesses.</p>
			</abstract>
		</profileDesc>
	</teiHeader>
	<text xml:lang="en">
		<body>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="1">Introduction</head><p>A mashup Web page displays content and executes JavaScript from various untrusted sources. Facebook applications, gadgets on the iGoogle homepage, and various embedded maps are the most prominent examples. By now, mashups have become ubiquitous. Indeed, web pages that display advertisements from ad networks are also mashups, because they often employ JavaScript for animations and interactivity. A survey of popular pages shows that a large percentage of them include scripts from a diverse array of external sources <ref type="bibr" target="#b40">[41]</ref>. Unfortunately, these third-party scripts run with the same privileges as trusted, first-party code served directly from the originating site. Hence, the trusted site is susceptible to attacks by maliciously crafted third-party software.</p><p>This paper addresses language-based Web sandboxing systems, one of several mechanisms for securing mashups. Most sandboxing mechanisms have similar high-level goals and designs, which we outline in section 2. In section 3, we review the design and implementation of sandboxes and demonstrate the need for toolsupported verification. Section 4 provides a detailed plan for the rest of the paper. Our work makes several contributions:</p><p>Figure 1: Web sandboxing architecture 1. A type system for general JavaScript programs, with support for patterns found in sandboxing libraries; 1 2. a formal definition of safety properties for Yahoo!'s ADsafe sandbox in terms of this type system; and, 3. a type-based verification of the ADsafe framework, and descriptions of bugs and their fixes found while performing the verification.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2">Language-based Web Sandboxing</head><p>The Web browser environment provides references to objects that implement network access, disk storage, geolocation, and other capabilities. Legitimate web applications use them for various reasons, but embedded widgets can exploit them because all JavaScript on a page runs in the same global environment. A Web sandbox thus attenuates or prevents access to these capabilities, allowing pages to safely embed untrusted wid-gets. ADsafe <ref type="bibr" target="#b8">[9]</ref>, Caja <ref type="bibr" target="#b32">[33]</ref>, FBJS <ref type="bibr" target="#b12">[13]</ref>, and BrowserShield <ref type="bibr" target="#b34">[35]</ref> are language-based sandboxes that employ broadly similar security mechanisms, as defined by Maffeis, et al. <ref type="bibr" target="#b26">[27]</ref>:</p><p>• A Web sandbox includes a static code checker that filters out certain widgets that are almost certainly unsafe. This checker is run before the widget is delivered to the browser.</p><p>• A Web sandbox provides runtime wrappers that attenuate access to the DOM and other capabilities. These wrappers are defined in a trusted runtime library that is linked with the untrusted widget.</p><p>• Static checks are necessarily conservative and can reject benign programs. Web sandboxes thus specify how potentially-unsafe programs are rewritten to use dynamic safety checks. This architecture is illustrated in <ref type="figure" target="#fig_7">figure 1</ref>, where an untrusted widget from adnet.com is embedded in a page from paper.com. The untrusted widget is filtered by the static checker. If static checking passes, the widget is rewritten to invoke the runtime library. Both the runtime library and the checked, rewritten widget must be hosted on a site trusted by paper.com, and are assumed to be free of tampering.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Reference Monitors A Web sandbox implements a</head><p>reference monitor between the untrusted widget and the browser's capabilities. Anderson's seminal work on reference monitors identifies their certification demands <ref type="bibr">[3, p 10-11]</ref>:</p><p>The proof of [a reference monitor's] model security requires a verification that the modeled reference validation mechanism is tamper resistant, is always invoked, and cannot be circumvented.</p><p>Therefore, a Web sandbox must come with a precisely stated notion of security, and a proof that its static checks and runtime library correctly maintain security. The end result should be a quantified claim of safety over all possible widgets that execute against the runtime library.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3">Code-Reviewing Web Sandboxes</head><p>Imagine we are confronted with a Web sandbox and asked to ascertain its quality. One technique we might employ is a code-review. Therefore, we perform an imaginary review of a Web sandbox, focusing on the details of ADsafe. Later, we will discuss how to (mostly) remove people from the loop.</p><p>ADsafe, like all Web sandboxes, consists of two interdependent components:</p><p>• a static verifier, called JSLint, 2 which filters out widgets not in a safe subset of JavaScript, and</p><p>• a runtime library, adsafe.js, which implements DOM wrappers and other runtime checks. These conspire to make it safe to embed untrusted widgets, though "safe" is not precisely defined. We will return to the definition of safety in section 4. Widgets therefore manipulate wrapped DOM elements instead of direct references. DOM wrappers form the bulk of the runtime library and include many dynamic checks and patterns that need to be verified:</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Attenuated Capabilities</head><p>• The runtime manipulates DOM references, but returns them to the widget in wrappers. We must verify that all returned values are in fact wrapped, and that the runtime cannot be tricked into returning a direct DOM reference.</p><p>• The runtime calls DOM methods on behalf of the widget. Many methods, such as appendChild and removeChild, require direct DOM references as arguments. We must verify that the runtime cannot be tricked with a maliciously crafted object that mimics the DOM interface and steals references.</p><p>• The runtime attaches DOM callbacks on behalf of the widget. These callbacks are invoked by the browser with event arguments that include direct DOM references. We must verify that the runtime appropriately wraps calls to untrusted callbacks in the widget.</p><p>• The widget has access to a DOM subtree that it is allowed to manipulate. The runtime ensures that the widget only manipulates elements in this subtree. We must verify that various DOM traversal methods, such as document.getElementById and Element.getParent, do not allow the widget obtain wrappers to elements outside its subtree.</p><p>• The runtime wraps many DOM functions that are only conditionally safe. For example, document.createElement is usually safe, unless it is used to create a &lt;script&gt; tag, which can load arbitrary code. Similarly, the runtime may allow widgets to set CSS styles, but a CSS URL-value can also load external code. We must verify that the arguments supplied to these DOM functions are safe. ADsafe's DOM wrappers are called Bunches, which wrap collections of HTML elements. There are twenty Bunchmanipulating functions that are exposed to the widgetin addition to several private helper functions-that face all the issues enumerated above and need to be verified. These functions cannot be verified in isolation, because their correctness is dependent on assumptions about the kinds of values they receive from widgets. These assumptions are discharged by the static checks in JSLint and other runtime checks to avoid loopholes and complexities in JavaScript's semantics.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>JavaScript Semantics A Web sandbox must contend</head><p>with JavaScript features that hinder security:</p><p>• Certain JavaScript features are unsafe to use in widgets. For example, a widget can use this to obtain window, so it is rejected by JSLint:</p><formula xml:id="formula_0">f = function() { return this; }; var myWindow = f();</formula><p>We must verify that the subset of JavaScript admitted by the static checker does not violate the assumptions of the runtime library. • Many JavaScript operators and functions include implicit type conversions and method calls that are difficult to reason about. For example, when an operator expects a string but is instead given an object, it does not signal an error. Instead, it calls the object's toString method. It is easy to write a stateful toString method that returns different strings on different calls. Such an object can then circumvent dynamic safety checks that are not carefully written to avoid triggering implicit method calls. These implicit calls are avoided by carefully testing the runtime types of untrusted values, using the typeof operator. Such tests are pervasive in ADsafe. As a further precaution, ADsafe tries to ensure that widgets cannot define toString and valueOf fields in objects.</p><p>JavaScript Encapsulation JavaScript objects have no notion of private fields. If object operations are not restricted, a widget could access built-in prototypes (via the __proto__ field) and modify the behavior of the container. Web sandboxes statically reject such expressions:  syntactic checks alone cannot determine whether computed field names are unsafe:</p><formula xml:id="formula_1">obj["__pro" + "to__"];</formula><p>Widgets are instead rewritten to use runtime checks that restrict access to these fields. <ref type="figure" target="#fig_0">Figure 2</ref> shows the rewrites employed by various sandboxes. Some sandboxes insert these and other checks automatically, giving the illusion of programming in ordinary JavaScript; ADsafe is more spartan, requiring widget authors to insert the dynamic checks themselves; but the principle remains the same. Web sandboxes also simulate private fields with this method by introducing fields and then preventing widgets from accessing them. For example, ADsafe stores direct DOM references in the __nodes__ field of Bunches, and blacklists the __nodes__ field.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>The Reviewability of Web Sandboxes</head><p>We have highlighted a plethora of issues that a Web sandbox must address, with examples from ADsafe. Although ADsafe's source follows JavaScript "best practices," the sheer number of checks and abstractions make it difficult to review. There are approximately 50 calls to three kinds of runtime assertions, 40 type-tests, 5 regularexpression based checks, and 60 DOM method calls in the 1, 800 LOC adsafe.js library. Various ADsafe bugs were found in the past and this paper presents a few more (section 9). Note that ADsafe is a small Web sandbox relative to larger systems like Caja.</p><p>The Caja project asked an external review team to perform a code review <ref type="bibr" target="#b3">[4]</ref>. The findings describe many lowlevel details that are similar to those we discussed above. In addition, two higher-level concerns stand out:</p><p>• "[Caja is] hard to review. No map states invariants and points to where they are enforced, which hurts maintainability and security." • "Documentation of TCB is necessary for reviewability and confidence." These remarks identify an overarching requirement for any review: the need for specifications so that readers can both determine whether these fit their needs and check whether these are implemented correctly.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4">Verifying a Sandbox: Our Roadmap</head><p>Defining Safety Because humans are expensive and error-prone, and because the code review needs to be repeated every time the program changes, it is best to automate the review process. However, before we begin automating anything, we need some definition of what security means. We focus on a definition that is specific to ADsafe, though the properties are similar to the goals of other web sandboxes. From correspondence with ADsafe's author, we initially obtained the following list of intended properties (rewritten slightly to use the terminology of this paper). Note that the first two properties are common to sandboxes in general-allowing arbitrary JavaScript to load at runtime compromises all sandboxes' security goals, and all sandboxes provide mediated access to the DOM by preventing direct access.</p><p>We also note that the assumption about built-in prototypes is often violated in practice <ref type="bibr" target="#b13">[14]</ref>. Nevertheless, like ADsafe, we make this assumption; mitigating it is outside our scope. Given this definition, our goal is to produce a (mostly) automated verification that supports these properties.</p><p>Verifying Safety In this paper we perform this automation using static types, presenting a type-based approach for defining and verifying the invariants of ADsafe. While one could build a custom tool to do this, we are able to perform our verification by extending (as discussed in section 11) a type checker <ref type="bibr" target="#b17">[18]</ref> intended for traditional type-checking of JavaScript.</p><p>We choose a static type system as our tool of choice for several reasons. Programmers are familiar with type systems, and ours is mostly standard (we discuss nonstandard features in sections 5 and 7). This lessens the burden on sandbox developers who need to understand what the verification is saying about their code. Second, our type system is much more efficient than most whole-program analyses or model checkers, leading to a quick procedure for checking ADsafe's runtime library (20 seconds). Efficency and understandability allow for incremental use in a tight development loop. Finally, our type system is accompanied by a soundness proof. This property accomplishes the actual verification. Thus, the features of comprehensibility, efficiency, and soundness combine to make type checking an effective tool for verifying some of the properties of web sandboxes.</p><p>In order to demonstrate the effectiveness of our typebased verification approach, we use type-based arguments to prove ADsafety. We mostly achieve this (section 8) after fixing bugs exposed by our type checker (section 9). The rest of this paper presents a typed account of untrusted widgets and the ADsafe runtime.</p><p>• The ADsafety claim is predicated on widgets passing the JSLint checker. Therefore, we need to model JSLint's restrictions. We do this in section 5.</p><p>• Once we know what we can expect from JSLint, we can verify the actual reference monitor code in adsafe.js using type-checking (section 7).</p><p>• Before we can verify adsafe.js, we need to account for the details of JavaScript source and model the browser environment in which this code runs. Section 6 presents this additional work. We discuss extensions to verify other Web sandboxes in section 10.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5">Modeling Secure Sublanguages</head><p>All web sandboxes' runtime libraries expect to execute against widgets that have been statically checked and rewritten, as shown in <ref type="figure" target="#fig_7">figure 1</ref>. These checks and rewrites enforce that widgets are written in a sublanguage of JavaScript. This sublanguage ought to be specified explicitly. We focus here on modeling the checks performed by JSLint, ADsafe's static checker, which presents an interesting challenge: there is no formal specification of the language of JavaScript programs that pass JSLint. Instead, the specification is implicit in the implementation of JSLint itself. In this section, we design a specification for JSLint-ed widgets and give confidence in its correctness. <ref type="bibr" target="#b2">3</ref> Only a fraction of JSLint's static checks are related to ADsafe. The rest are lint-like code-quality checks. JSLint also checks the static HTML of a widget. Verifying this static HTML is beyond the scope of our work; we do not discuss it further. We instead focus on the securitycritical static JavaScript checks in JSLint. How is JSLint used? The ADsafe runtime makes several assumptions about the shape of values it receives from widgets. These assumptions are not documented precisely, but they correspond to various static checks in JSLint. To model JSLint, we reflect these checks in a type, called Widget, which we define below. In section 5.2 we discuss how this type relates to the behavior of the JSLint implementation.</p><formula xml:id="formula_2">α := type identifiers T := Num | Str | True | False | Undef | Null | Ref T | ∀α.T | µα.T | [T ]T × . . . × T × T · · · → T | | ⊥ | T ∪ T | T ∩ T |ArrayT | { : F, proto : T, code : T, f : F, . . .} | (f, . . .) + | (f, . . .) − F := T | 񮽙 | Absent</formula></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5.1">Defining Widget</head><p>We expect that all variables and sub-expressions of widgets are typable as Widget. The ADsafe runtime can thus assume that widgets only manipulate Widget-typed values. Our full type language is shown in <ref type="figure" target="#fig_1">figure 3</ref> and introduced gradually in the rest of this section.</p><p>Primitives JSLint admits JavaScript's primitive values, with trivial types:</p><formula xml:id="formula_3">Prim = Num ∪ Str ∪ True ∪ False ∪Null ∪ Undef</formula><p>We have separate types for True and False because they are necessary to type-check adsafe.js (section 7). Prim is an untagged union type, and our type system accounts for common JavaScript patterns for discriminating unions. We might initially assume that</p><formula xml:id="formula_4">Widget = Prim</formula><p>Objects and Blacklisted Fields JSLint admits object literals but blacklists certain field names as dangerous. All other fields are allowed to contain widget values. We therefore augment the Widget type to include objects. An object type explicitly lists the names and types of various fields in an object. In addition, the special field specifies the type of all other fields:</p><formula xml:id="formula_5">Widget = µα.Prim ∪ Ref                        : α,</formula><p>"arguments" : 񮽙, "caller" : 񮽙, "callee" : 񮽙, "eval" : 񮽙,</p><formula xml:id="formula_6">. . . "toString" : Absent, "valueOf" : Absent                       </formula><p>The full list of blacklisted fields is in <ref type="figure">figure 4</ref>. Our type checker signals a type error on any 񮽙-typed field access or assignment. This mirrors the behavior of JSLint, which also rejects field accesses and assignments on blacklisted fields (e.g., o <ref type="bibr">["constructor"]</ref> is rejected by both the type checker and JSLint). The Ref tag indicates that the object is mutable. We use a recursive type (µ) to indicate that all other fields, , may recursively contain Widget-typed values. <ref type="bibr" target="#b3">4</ref> JSLint tries to ensure that objects in widgets do not have toString and valueOf properties. We model this with a type Absent, which ensures these fields are not present.</p><p>Absent and 񮽙 properties are subtly different. 񮽙 models fields that are intended to be inaccessible, and hence looking them up is untypable. In contrast, the typing rule for Absent field lookup performs the lookup with the type of the proto field, which we introduce below. Section 7.1 contains the details of type-checking field access.</p><p>Functions Widgets can create and apply functions, so we must widen our Widget type to admit them. Functions in JavaScript are objects with an internal code field, which we add to allowed objects:</p><formula xml:id="formula_7">. . . Ref    code : [Global ∪ α]α · · · → α, : α, . . .   </formula><p>The type of the code field indicates that widget-functions may have an arbitrary number of Widget-typed arguments and return Widget-typed results. <ref type="bibr" target="#b4">5</ref> It also specifies that the type of the implicit this-argument (written inside brackets) may be either Widget or Global. The type Global is not a subtype of Widget, which expresses the underlying reason for JSLint's rejection of all widgets that contain this (see Claim 1 below). If the thisannotation is omitted, the type of this is .</p><p>Prototypes JSLint does not allow widgets to explicitly manipulate objects' prototypes. However, since field lookup in JavaScript implicitly accesses the prototypes, we specify the type of prototypes in Widget:</p><formula xml:id="formula_8">. . . Ref    proto : Object ∪ Function ∪ . . . , : α, . . .   </formula><p>The proto field enumerates several safe prototypes, but notably omits DOM prototypes such as HTMLElement, since widgets should not obtain direct references to the DOM.</p><p>Typing Private Fields In addition to explicitly blacklisted field names, JSLint also blacklists all field names that start and end with an underscore. This effectively blacklists the __proto__ field, which gives direct access to the prototype-chain, and the __nodes__ and __star__ fields, which adsafe.js uses internally to build the Bunch abstraction. To keep our types simple, we enumerate these three fields instead of pattern-matching on field names:</p><formula xml:id="formula_9">. . . Ref            "___nodes___" :ArrayHTML∪Undef, "__proto__" : 񮽙, "___star___" : Bool ∪ Undef, : α, . . .           </formula><p>The __proto__ field is 񮽙-typed, like other blacklisted fields that are never used. However, the ADsafe runtime uses __nodes__ and __star__ as private fields. The types specify that ADsafe stores DOM references in the __nodes__ field.</p><p>The full Widget type in <ref type="figure">figure 4</ref> is a formal specification of the shape of values that adsafe.js receives from and sends to widgets. This type is central to our verification of adsafe.js and of JSLint.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5.2">Widget and JSLint Correspondence</head><p>Though we have offered intuitive arguments for why Widget corresponds to the checks in JSLint, we would like to gain confidence in its correspondence with the behavior of the actual JSLint program that sites use: Claim 1 (Linted Widgets Are Typable) If JSLint (with ADsafe checks) accepts a widget e, then e and all of its variables and sub-expressions can be Widget-typed.</p><p>We validate this claim by testing. We use ADsafe's sample widgets as positive tests-widgets that should be typable and lintable-and our own suite of negative test cases (widgets that should be untypable and unlintable). Note the direction of the implication: an unlintable widget may still be typable, since our type checker admits</p><formula xml:id="formula_10">Widget = µα. Str ∪ Num ∪ Null ∪ Bool ∪ Undef ∪ Ref                                            proto : Object ∪ Function ∪Bunch ∪ Array ∪ RegExp ∪String ∪ Number ∪ Boolean, : α, code : [Global ∪ α]α · · · → α, "___nodes___" :ArrayHTML∪Undef, "___star___" : Bool ∪ Undef, "</formula><p>caller" : 񮽙, "callee" : 񮽙, "eval" : 񮽙,"prototype" : 񮽙, "watch" : 񮽙,"constructor" : 񮽙, "__proto__" : 񮽙, "unwatch" : 񮽙, "arguments" : 񮽙, "valueOf" : Absent, <ref type="figure">Figure 4</ref>: The Widget type safe widgets that JSLint rejects. <ref type="bibr" target="#b5">6</ref> The type checker could be used as a replacement for JSLint's ADsafe checks, but these tests give us confidence that checking the Widget type corresponds to what JSLint admits in practice.</p><formula xml:id="formula_11">"toString" : Absent                                           </formula></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="6">Modeling JavaScript and the Browser</head><p>Verification of a Web sandbox must account for the idiosyncrasies of JavaScript. It also needs to model the runtime environment-provided by the browser-in which the sandboxed code will execute. Here we discuss how we model the language and the browser. JavaScript Semantics We use the semantics of Guha, et al. <ref type="bibr" target="#b16">[17]</ref>, which reduces JavaScript to a core semantics called λ J S . This latter language models the "essentials" of JavaScript: prototype-based objects, first-class functions, basic control operators, and mutation.</p><p>λ J S thus omits many of JavaScript's complexities, but it is accompanied by a desugaring function that maps all JavaScript programs (idiosyncrasies included) to behaviorally equivalent λ J S programs. The transformation explicates much of JavaScript's implicit semantics. Hence, we find it easier to build tools that analyze the much smaller λ J S language than to directly process JavaScript.</p><p>Does desugaring faithfully map JavaScript to λ J S ? Guha, et al. test their desugaring and semantics on portions of the Mozilla JavaScript test suite. On these tests, λ J S programs produce exactly the same output as JavaScript implementations. Hence, their work substantiates the following two claims. </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Claim 3 (Desugar Commutes with Eval)</head><p>For all JavaScript programs e, desugareval JavaScript (e) = eval λ JS (desugare).</p><p>This testing strategy, and the simplicity of implementation that λ J S enables, give us confidence that our tools correctly account for JavaScript.</p><p>Modeling the Browser DOM ADsafety claims that window.eval is not applied. To validate this claim, we mark eval with 񮽙 from section 5, which marks banned fields. There are many eval-like function in Web browsers, such as document.write; these are also marked 񮽙. Finally, certain functions, such as setTimeout, behave like eval when given strings as arguments. ADsafe does need to call these functions, but it is careful to never call them with strings. In our type environment, we give them restrictive types that disallow string arguments. <ref type="figure" target="#fig_2">Figure 5</ref> specifies a fragment of the type of window, which carefully specifies the type of unsafe functions in the environment. The remaining safe DOM does not need to be fully specified. adsafe.js only uses a small subset of the DOM methods. These methods require types. The browser environment is therefore modeled with 500 lines of object types (one field per line). This type environment is essentially the specification of foreign DOM functions imported into JavaScript.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="7">Verifying the Reference Monitor</head><p>In section 5, we discussed modeling the sublanguage of widgets interacting with the sandboxing runtime. In the case of ADsafe and JSLint, we built up the Widget type as a specification of the kinds of values that the reference monitor, adsafe.js, can expect at runtime. In this section, we discuss how we use the Widget type to model the boundary between reference monitor and widget code, The Bunch objects that ADsafe passes to the widget have Bunch.prototype as their proto (see <ref type="figure">figure 4</ref>), making these methods accessible. Their use in the widget is constrained only by JSLint, so we must type-check these methods with (only) JSLint's assumptions in mind.</p><p>For example, we might assume that the child argument above should be a Bunch, the implicit this argument should also be a Bunch, and it therefore returns a Bunch. However, JSLint does not provide such strong guarantees. Consider this example, which passes JSLint:</p><p>var func = someBunch.append; func(900, true, "junk", -7);</p><p>Here, this is bound to window, child is a number, and there are additional arguments. Therefore, we cannot assume that append has the type [Bunch]Bunch → Bunch. Instead, the most precise type we can ascribe is:</p><formula xml:id="formula_12">[Widget ∪ Global]Widget · · · → Widget</formula><p>That is, this could be Widget-typed or the type of the global object, Global, and the other arguments may have any subtype of Widget, which includes strings, numbers, and other non-Bunch types. The runtime check in append's body (namely, reject_global(this)) is responsible for checking that this is not the global object before manipulating it. Our type checker recognizes such checks and narrows the broader type to Widget after appropriate runtime checks are applied (section 7.1). If such checks were missing, the type of this would remain Widget ∪ Global, and return this would signal a type error because Widget ∪Global is not a subtype of the stated return type Widget.</p><p>Ascribing types to functions provided by the ADsafe runtime is therefore trivial. We give all the same type:</p><formula xml:id="formula_13">[Widget ∪ Global]Widget · · · → Widget</formula><p>The type checker we extend is not ADsafe-specific, and requires explicit type annotations. However, since all the annotations are identical, they are trivial to insert. <ref type="figure">Fig- ure 6</ref> shows a small excerpt of such annotations, which the checker reads from comments, so programs can run unaltered in the browser.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Types for Private Functions</head><p>ADsafe also has a number of private functions, which are not exposed to the widget. These functions have types with capabilities the widget does not have access to, such as HTML. For example, ADsafe specifies a hunter object, which contains functions that traverse the DOM and accumulate arrays of DOM nodes. These functions all have the type HTML → Undef, and add to an array result that has type ArrayHTML. ADsafe can freely use these capabilities inside the library as long as it doesn't hand them over to the widget. Our annotations show that it doesn't, because these types are not compatible with Widget.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="7.1">Type System Highlights</head><p>In section 5 and 6, we presented types for safe objects and for values in the browser environment. We build upon earlier work on type systems that has been applied to JavaScript <ref type="bibr" target="#b17">[18]</ref>. In this section, we present the non-standard portions of our type system that we use for typing operations on objects, sensitive conditionals, and some idiosyncrasies of JSLint and adsafe.js.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Object Properties and String Set Types</head><p>In JavaScript, object properties (or "fields") are merely string indices: even o.x is just an alias for o <ref type="bibr">["x"]</ref>. In addition, these strings can be computed and flow through the program before they are used to look up fields. Sandboxes thus deal with whitelists and blacklists of property names. To model this, we enrich the type language with sets of strings. For example, ("___nodes___", "__proto__") − is the type of all strings except "___nodes___" and "__proto__", and ("x", "foo") + is the type of exactly "x" and "foo". adding new strings, and subtyping of positive and negative sets. Both kinds of string sets can also be promoted to the common supertype of Str, which is equivalent to the negative string set with no entries. Equipped with string sets, we can describe the typing of object property dereference. When the property name is a string set, we union the types of the properties that are members of the string set, paying careful attention to absent fields and prototype lookup. <ref type="figure" target="#fig_6">Figure 8</ref> shows the rule T-LOOKUP, with examples shown in <ref type="figure">figure 9</ref>.</p><p>String sets allow the type checker to avoid certain named properties, as in the last example of <ref type="figure">figure 9</ref>, where the "eval" property has the bad type 񮽙 but the string set type of the index excludes "eval". The rule for property update (not shown here) is similar but simpler, as property update in JavaScript does not recur inside prototypes, and only operates on the property names of the top-level object.</p><p>If-Splitting A reference monitor has various runtime checks to ensure that protected objects-DOM objects and browser functions in ADsafe's case-are only manipulated in safe and well-defined ways. For example, when setTimeout's first argument is a string, rather than a function, it exhibits eval-like behavior, which violates ADsafety's constraints. Thus we instead give it the type</p><formula xml:id="formula_14">(Widget → Widget) × Widget → Num</formula><p>Doing so forces the first argument to be a function and, in particular, not a string. Now consider its use: Because ADSAFE.later is exported to widgets, it can only assume the Widget type for its arguments, including {} is shorthand for { : F , proto : T p , code : {proto : Null, : Bool, "x" : Num} ("x", "y") + Num ∪ Bool ∪ Undef {proto : Object, : Num} ("toString") + Num∪ → Str {proto : Object, : Num, "toString" : Absent} ("toString") + → Str {proto : Null, : Str, "x" : Num, "y" : Bool, "eval" : 񮽙} ("eval") − Str ∪ Num ∪ Bool ∪ Undef {proto : Null, : Str, "x" : Num, "y" : Bool, "eval" : 񮽙} ("eval") + untypable <ref type="figure">Figure 9</ref>: Examples of property lookup using fields func. A traditional type checker would thus conclude that func has type Widget everywhere in later. Because Widget includes Str, the invocation of setTimeout would yield a type error-even though this is precisely what the conditional in later is avoiding! If-splitting is the name for a collection of techniques that address this problem <ref type="bibr" target="#b38">[39]</ref>. Our particular solution uses a refinement of this idea, called flow typing <ref type="bibr" target="#b17">[18]</ref>, which complements type-checking with flow analysis. The analysis informs the type checker that due to the typeof check, uses of func in the then-branch of the conditional can in fact be refined from the large Widget type of Str ∪ Num ∪ . . . to the function type that setTimeout requires.</p><formula xml:id="formula_15">T c , f 1 : F 1 , . . .} (f 1 , . . .) + − (s 1 , . . .) + = ∀f i ∈ (s 1 , . . .), (f i , . . .) + (f 1 , . . .) − − (s 1 , . . .) + = (f 1 , . . . , s 1 , . . .) − f ∈ (f 1 , . . .) + : ∃f 1 .f = f 1 f ∈ (f 1 , . . .) − : ∀f 1 .f 񮽙 = f 1 fields ({}, S) =    F : S 񮽙 = ∅ and F 񮽙 = Absent ⊥ : otherwise where S = S − (f 1 , . . .) + fields p ({}, S) =    Undef : T p = Null f ields(T p , S p ) : S p 񮽙 = ∅ ⊥ : otherwise where S p = S − (f i | F i 񮽙 = Absent) + fields({}, S) = {T i | f i ∈ S and F i = T i } ∪ fields ({}, S) ∪ fields p ({}, S) fields(T 1 ∪ T 2 , S) = fields(T 1 , S) ∪ fields(T 2 , S) fields(T, ∅) = ⊥ Σ; Γ e o : T o Σ; Γ e f : S S &lt;: Str T res = fields(T o , S) Γ e o [e f ] : T res (T-LOOKUP)</formula></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="7.2">Required Refactorings</head><p>Our type system cannot type check the ADsafe runtime as-is; we need to make some simple refactorings. The need for these refactorings does not reflect a weakness in ADsafe. Rather, they are programming patterns that we cannot verify with our type system. To gain confidence that we didn't change ADsafe's behavior, we run ADsafe's sample widgets against our refactored version of ADsafe, and they behave as expected. We describe these refactorings below:</p><p>Additional reject_name Checks ADsafe uses reject_name to check accesses and updates to object properties in adsafe.js. If-splitting uses these checks to narrow string set types and type-check object property references. However, ADsafe does not use reject_name in every case. For example, it uses a regular expression to parse DOM queries, and uses the result to look up object properties. Because our type system makes conservative assumptions about regular expressions, it would erroneously indicate that a blacklisted field may be accessed. Thus, we add calls to reject_name so the type system can prove that the accesses and assignments are safe.</p><p>Inlined reject_global Checks Most Bunch methods start by asserting reject_global(this), which ensures that this is Widget-typed in the rest of the method. Our type system cannot account for such non-local sideeffects, but once we inline reject_global, if-splitting is able to refine types appropriately (for instance, in the Bunch.prototype.append example early in this section). makeableTagName ADsafe's whitelist of safe DOM elements is defined as a dictionary:</p><p>var makeableTagName = { "div": true, "p": true, "b": true, . . . };</p><p>This dictionary omits an entry for "script". Our type checker cannot account for this check. We instead refactor the whitelist (a trick noted elsewhere <ref type="bibr" target="#b28">[29]</ref>):</p><p>var makeableTagName = { "div": "div", "p": "p", "b": "b", . . . };</p><p>The type of these strings are ("div") + , ("p") + ,("b") + , etc., so that makeableTagName[tagName] has type ("div", "p", "b", . . .) + . Since this finite set of strings excludes "script", it now matches the argument type of createElement.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="7.3">Cheating and Unverifiable Code</head><p>A complex body of code like the ADsafe runtime cannot be type-checked from scratch in one sitting. We therefore found it convenient to augment the type system with a cheat construct that ascribes a given type to an expression without descending into it. We could thus use cheat when we encountered an uninteresting type error and wanted to make progress. Our goal, of course, was to ultimately remove every cheat from the program. We were unable to remove two cheats, leaving eleven unverified source lines in the 1,800 LOC ADsafe runtime. We can, in fact, ascribe interesting types to these functions, but checking them is beyond the power of our type system. The details may not be of interest to the general reader, but the web content contains the full body of unverified code and a discussion of its types.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="8">ADsafety Redux</head><p>Sections 5 and 7 gave the details of our strategy for modeling JSLint and verifying adsafe.js. In this section, we combine these results and relate it to the original definition of ADsafety (definition 1). The use of a type system allows us to make straightforward, type-based arguments of safety for the components of ADsafe.</p><p>The lemmas below formally reason about typechecked widgets. Claim 1 (section 5.2) establishes that linted widgets are in fact typable. Therefore, we do not need to type-check widgets. Widget programmers can continue to use JSLint and do not need to know about our type checker. However, given the benefits of uniformity provided by a type checker over ad hoc methods like JSLint (section 9 details one exploit that resulted from such an ad hoc approach), programmers may be well served to use our type checker instead.</p><p>Type Soundness Most type systems come with a soundness theorem that is stated as progress (well-typed programs do not error) and preservation (well-typed programs do not violate their types).</p><p>We do not attempt to establish progress. Establishing it would require many more refactorings in the ADsafe runtime, and many lintable widgets would be untypable. Because runtime errors are perfectly acceptable (they halt execution before something bad happens), we relax some of the typing rules in an existing type system <ref type="bibr" target="#b17">[18]</ref>-which does exhibit progress-to instead allow some JavaScript errors (e.g., applying non-function values or looking up fields of null). We do still need an "untyped progress" theorem that states that our JavaScript semantics fully models all error cases. This theorem is provided by Guha, et al. <ref type="bibr" target="#b16">[17]</ref>.</p><p>We restate and prove preservation for the extensions to Guha et al.'s type system, which is applicable to all JavaScript programs. 7 Stated formally: Our assumed environment (section 6) provides the abstract heap Σ and abstract environment Γ, which model the initial state of the browser, σ. Given this lemma, we can make type-based statements about the combination of widgets and adsafe.js:</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Theorem 1 (ADsafety) For all widgets p, if</head><p>1. all subexpressions of p are Widget-typable, 2. adsafe.js is typable, 3. adsafe.js runs before p, and 4. σp → σ p (single-step reduction), then at every step p , p also has the type Widget.</p><p>This theorem says that for all widgets p whose subexpressions are Widget-typed, if adsafe.js type-checks and runs in the browser environment, p can take any number of steps and still have the Widget type. Since types are preserved, two further key lemmas hold during execution:</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Lemma 2 (Widgets cannot load new code at runtime)</head><p>For all widgets e, if all variables and sub-expressions of e are Widget-typed, then e does not load new code.</p><p>By section 6, eval-like functions are 񮽙-typed, hence cannot be referenced by widgets or by the ADsafe runtime. Furthermore, functions that only eval when given strings, such as setTimeout, have restricted types that disallow string-typed arguments. Therefore, neither the widget nor the ADsafe runtime can load new code.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Lemma 3 (Widgets do not obtain DOM references)</head><p>For all widgets e, if all variables and sub-expressions of e are Widget-typed, then e does not obtain direct DOM references.</p><p>The type of DOM objects is not subsumed by the Widget type. All functions in the ADsafe runtime have the type:</p><formula xml:id="formula_16">[Widget ∪ Global]Widget · · · → Widget</formula><p>Thus, functions in the ADsafe runtime do not leak DOM references, as long as they are only applied to Widgettyped values. Since all subexpressions of the widget e are Widget-typed, all values that e passes to the ADsafe runtime are Widget-typed. By the same argument, e cannot directly manipulate DOM references either.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Widgets can only manipulate their DOM subtree</head><p>We cannot prove this claim with our tools. JSLint enforces this property by also verifying the static HTML of widgets; it ensures that all element IDs are prefixed with the widget's ID. The wrapper for document.getElementById ensures that the widget ID is a prefix of the element ID. Verifying JSLint's HTML checks is beyond the scope of this work.</p><p>In addition, the wrapper for Element.parentNode checks to see if the current element is the root of the widget's DOM subtree. It is not clear if our type checker can express this property without further extensions.  </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="9">Bugs Found in ADsafe</head><p>We have implemented the type system presented in this paper, and applied it to the ADsafe source. The implementation is about 3,000 LOC, and takes 20 seconds to check adsafe.js (mainly due to the presence of recursive types). In some cases, type-checking failed due to the weakness of the type checker; these issues are discussed in section 7.2. The other failures, however, represent genuine errors in ADsafe that were present in the production system. The same applies to instances where JSLint and our typed model of it failed to conform. All the errors listed below have been reported, acknowledged by the author, and fixed.</p><p>Missing Static Checks JSLint inadvertently allowed widgets to include underscores in quoted field names. In particular, the following expression was deemed safe:</p><formula xml:id="formula_17">fakeBunch = { "__nodes__": [ fakeNode ] };</formula><p>A malicious widget could then create an object with an appendChild method, and trick the ADsafe runtime into invoking it with a direct reference to an HTML element, which is enough to obtain window and violate ADsafety:</p><formula xml:id="formula_18">fakeNode = { appendChild: function(elt) { myWindow = elt.ownerDocument.defaultView; } };</formula><p>The full exploit is in <ref type="figure" target="#fig_7">figure 10</ref>. dom.append(dom.tag("div")); dom.q("div").style("MozBinding", o); });</p><p>&lt;!--evil.xml --&gt; &lt;?xml version="1.0"?&gt; &lt;bindings&gt;&lt;binding id="exp"&gt; &lt;implementation&gt;&lt;constructor&gt; document.write("hacked") &lt;/constructor&gt;&lt;/implementation&gt; &lt;/binding&gt;&lt;/bindings&gt; This bug manifested as a discrepancy between our model of JSLint as a type checker and the real JSLint. Recall from section 5 that all expressions in widgets must have type Widget (defined in <ref type="figure">figure 4</ref>). For { "__nodes__": [fakeNode] } to type as Widget, the "__nodes__" field must have type ArrayHTML∪Undef. However, <ref type="bibr">[fakeNode]</ref> has type Widget, which signals the error.</p><p>JSLint similarly allowed "__proto__" and other fields to appear in widgets. We did not investigate whether they can be exploited as above, but setting them causes unanticipated behavior. Fixing JSLint was simple once our type checker found the error. (An alternative solution would be to use our type system as a replacement for JSLint.) We note that when the ADsafe option of JSLint was first announced, 8 its author offered:</p><p>If [a malicious client] produces no errors when linted with the ADsafe option, then I will buy you a plate of shrimp.</p><p>After this error report, he confirmed, "I do believe that I owe you a plate of shrimp".</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Missing</head><p>Runtime Checks Many functions in adsafe.js incorrectly assumed that they were applied to primitive strings.</p><p>For example, Bunch.prototype.style began with the following Thus, the following widget code would signal an error:</p><p>The bug is that if value is an object instead of a string, the regular-expression test method will invoke value.toString().</p><p>A malicious widget can construct an object with a stateful toString method that passes the test when first applied, and subsequently returns a malicious URL. In Firefox, we can use such an object to load an XBL resource 9 that contains arbitrary JavaScript (figure 11).</p><p>We ascribe types to JavaScript's built-ins to prevent implicit type conversions. Therefore, we require the argument of Regexp.test to have type Str. However, since Bunch.prototype.style can be invoked by widgets, its type is Widget × Widget → Widget, and thus the type of value is Widget. This bug was fixed by adding a new string_check function to ADsafe, which is now called in 18 functions. All these functions are not otherwise exploitable, but a missing check would cause unexpected behavior. The fixed code is typable.</p><p>Counterexamples to Non-Interference Finally, a type error in Bunch.prototype.getStyle helped us generate a counterexample to ADsafe's claim of widget noninterference (definition 1, part 4). The getStyle method is available to widgets, so its type must be Widget → Widget. The following code is the essence of getStyle:</p><p>Bunch.prototype.getStyle = function (name) { var sty; reject_global(this); sty = window.getComputedStyle(this.__node__); return sty <ref type="bibr">[name]</ref>; } The bug above is that name is unchecked, so it may index arbitrary fields, such as __proto__:</p><p>someBunch.getStyle("__proto__");</p><p>This gives the widget a reference to the prototype of the browser's CSSStyleDeclaration objects. Thus the return type of the body is not Widget, yielding a type error.</p><p>A widget cannot exploit this bug in isolation. However, it can replace built-in methods of CSS style objects and interfere with the operation of the hosting page and other widgets that manipulate styles in JavaScript. This bug was fixed by adding a reject_name check that is now used in this and other methods. Despite the fix, ADsafe still cannot enforce non-interference, since widgets can reference and affect properties of other shared built-ins:</p><formula xml:id="formula_19">var arr = [ ];</formula><p>arr.concat.channel = "shared data";</p><p>The author of ADsafe pointed out the above example and retracted the claim of non-interference.</p><p>Prior Exploits Before and during our implementation, other exploits were found in ADsafe and reported <ref type="bibr">[27- 29]</ref>. We have run our type checker on the exploitable code, and our tools catch the bugs and report type errors.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Fixing Bugs and Tolerating Changes</head><p>Each of our bug reports resulted in several changes to the source, which we tracked. In addition to these changes, adsafe.js also underwent non-security related refactorings during the course of this work. Despite not providing its author our type checker, we were easily able to continue typechecking the code after these changes. One change involved adding a number of new Bunch methods to extend the API. Keeping up-to-date was a simple task, since all the new Bunch methods could be quickly annotated with the Widget type and checked. In short, our type checker has shown robustness in the face of program edits.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="10">Beyond ADsafe</head><p>Our security type system is capable of verifying useful properties about JavaScript programs in general. Sections 5, 6, and 7 present carefully crafted types that we ascribe to the browser API and adsafe.js, and use to model widget programs. Proving these types hold over the ADsafe runtime library and JSLint-ed widgets guarantees robust sandboxing properties for ADsafe.</p><p>Verifications for other sandboxes would require the design of new types, to accurately model checked, rewritten programs and their interface to the sandbox, but not necessarily a new type system. Indeed, our type-based strategy provides a concrete roadmap for sandbox designers:</p><p>1. Formally specify the language of widgets using a type system; 2. use this specification to define the interface between the sandbox and untrusted code; and, 3. check that the body of the sandbox adheres to this interface by type-checking.</p><p>In particular, developers of new sandboxes should be aware of this strategy. Rather than trying to retrofit the type system's features onto existing static checks, the sandbox designer can work with the type system to guarantee safety constructively from the start. Tweaks and extensions to the type system are certainly possible-for example, one may want to design a sandboxing framework that forbids applying non-function values and looking up fields of null, which the current type system allows (section 8).</p><p>ADsafe shares many programming patterns with other Web sandboxes (section 3), but doesn't cover the full range of their features. We outline some of the extensions that could be used to verify them here:</p><p>Reasoning About Strings Our type system lets programmers reason about finite sets of strings and use these sets to lookup fields in objects. To verify Caja, we would need to reason about string patterns. For example, Caja uses the field named "foo"+ "_w__" to store a flag that determines if the field "foo" is writable.</p><p>Abstracting Runtime Tests Our type system accounts for inlined runtime checks, but requires some refactorings when these checks are abstracted into predicates. Larger sandboxes, like Caja, have more predicates, so refactoring them all would be infeasible. We could instead use ideas from occurrence typing <ref type="bibr" target="#b38">[39]</ref>, which accounts for user-defined predicates.</p><p>Modeling the Browser Environment ADsafe wraps a small subset of the DOM API and we manually check that this subset is appropriately typed in the initial type environment. This approach does not scale to a sandbox that wraps more of the DOM. If the type environment were instead derived from the C++ DOM implementation, we would have significantly greater confidence in our environmental assumptions.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="11">Related Work</head><p>Verifying JavaScript Web Sandboxes ADsafe <ref type="bibr" target="#b8">[9]</ref>, <ref type="bibr">BrowserShield [35]</ref>, Caja <ref type="bibr" target="#b32">[33]</ref>, and FBJS <ref type="bibr" target="#b12">[13]</ref> are archetypal Web sandboxes that use static and dynamic checks to safely host untrusted widgets. However, the semantics of JavaScript and the browser environment conspire to make JavaScript sandboxing difficult <ref type="bibr" target="#b16">[17,</ref><ref type="bibr" target="#b25">26]</ref>.</p><p>Maffeis et al. <ref type="bibr" target="#b26">[27]</ref> use their JavaScript semantics to develop a miniature sandboxing system and prove it correct. Armed with the insight gained by their semantics and proofs, they find bugs in FBJS and ADsafe (which we also catch). However, they do not mechanically verify the JavaScript code in these sandboxes. They also formalize capability safety and prove that a Caja-like subset is capability safe <ref type="bibr" target="#b29">[30]</ref>. However, they do not verify the Caja runtime or the actual Caja subset. In contrast, we verify the source code of the ADsafe runtime and account for ADsafe's static checks.</p><p>Taly, et al. <ref type="bibr" target="#b37">[38]</ref> develop a flow analysis to find bugs in the ADsafe runtime (that we also catch). They simplify the analysis by modeling ECMAScript 5 strict mode, which is not fully implemented in any current Web browser. In contrast, ADsafe is designed to run on current browsers, and thus supports older and more permissive versions of JavaScript. We use the semantics and tools of Guha, et al. <ref type="bibr" target="#b16">[17]</ref>, which does not limit itself to the strict mode, so we find new bugs in the ADsafe runtime. In addition, Taly, et al. use a simplified model of JSLint. In contrast, we provide a detailed, type-theoretic account of JSLint, and also test it. We can thus find security bugs in JSLint as well.</p><p>Lightweight Self-Protecting JavaScript <ref type="bibr" target="#b30">[31,</ref><ref type="bibr" target="#b33">34]</ref> is a unique sandbox that does not transform or validate widgets. It instead solely uses reference monitors to wrap capabilities. These are modeled as security automata, but the model ignores the semantics of JavaScript. In contrast, this paper and the aforementioned works are founded on detailed JavaScript semantics.</p><p>Yu, et al. <ref type="bibr" target="#b39">[40]</ref> use JavaScript sandboxing techniques to enforce various security policies on untrusted code. Their semantic model, CoreScript, simplifies the DOM and scripting language. CoreScript cannot be used to mechanically verify the JavaScript implementation of a Web sandbox, which is what we present in this paper.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Modeling the Web Browser</head><p>There are formal models of Web browsers that are tailored to model wholebrowser security properties <ref type="bibr" target="#b0">[1,</ref><ref type="bibr" target="#b5">6]</ref>. These do not model JavaScript's semantics in any detail and are therefore orthogonal to semantic models of JavaScript <ref type="bibr" target="#b16">[17,</ref><ref type="bibr" target="#b25">26]</ref> that are used to reason about language-based Web sandboxes. In particular, ADsafe's stated security goals are limited to statements about JavaScript and the DOM (section 4). Therefore, we do not require a comprehensive Web-browser model. <ref type="bibr">GateKeeper [15]</ref> uses a combination of program analysis and runtime checks to apply and verify security policies on JavaScript widgets. GateKeeper's program analysis is designed to model more complex properties of untrusted code than we address by modeling JSLint. However, the soundness of its static analysis is proven relative to only a restricted sublanguage of JavaScript, whereas λ J S handles the full language. In addition, they do not demonstrate the validity of their run-time checks.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Static Analysis of JavaScript</head><p>Chugh et al. <ref type="bibr" target="#b7">[8]</ref> and VEX <ref type="bibr" target="#b4">[5]</ref> use program analysis to detect possibly malicious information flows in JavaScript. Our type system cannot specify information flows, although we do use it to discover that ADsafe fails to enforce a desirable information flow property. VEX's authors acknowledge that it is unsound, and Chugh et al. do not provide a proof of soundness for their flow analysis. Our type system and analysis are proven sound.</p><p>Other static analyses for JavaScript <ref type="bibr" target="#b15">[16,</ref><ref type="bibr" target="#b20">21,</ref><ref type="bibr" target="#b21">22]</ref> are not specifically designed to encode and check security.</p><p>Type Systems Our type checker is based on that of Guha, et al. <ref type="bibr" target="#b17">[18]</ref>. Theirs has a restrictive type system for objects that we fully replace to type check ADsafe. We also add simple extensions to their flow typing system to account for additional kinds of runtime checks employed by ADsafe. Their paper surveys other JavaScript type systems <ref type="bibr" target="#b1">[2,</ref><ref type="bibr" target="#b18">19]</ref> that can type-check other patterns but have not been used to verify security-critical code, which is the goal of this paper. Our treatment of objects is also derived from ML-ART <ref type="bibr" target="#b35">[36]</ref>, but accounts for JavaScript features and patterns such as function objects, prototypes, and objects as dictionaries.</p><p>Language-Based Security Schneider et al. <ref type="bibr" target="#b36">[37]</ref> survey the design and type-based verification of languagebased security systems. JavaScript Web sandboxes are inlined reference monitors <ref type="bibr" target="#b11">[12]</ref>. Guha, et al. <ref type="bibr" target="#b16">[17]</ref> offer a type-based strategy to verify these, but their approachwhich depends on building a custom type rule around each check in the reference monitor-does not scale to a program of the size of ADsafe. Furthermore, their custom rules essentially hand-code if-splitting, which we obtain directly from the underlying type system. Cappos, et al. <ref type="bibr" target="#b6">[7]</ref> present a layered approach to building language sandboxes that prevents bugs in higher layers from breaking the abstractions and assurances provided by lower layers. They use this approach to build a new sandbox for Python, whereas we verify an existing, third-party JavaScript sandbox. However, our verification techniques could easily be used from the onset to build a new sandbox that is secure by construction.</p><p>IFrames IFrames are widely used for widget isolation. However, JavaScript that runs in an IFrame can still open windows, communicate with servers, and perform other operations that a Web sandbox disallows. Furthermore, inter-frame communication is difficult when desired; there are proposals to enhance IFrames to make communication easier and more secure <ref type="bibr" target="#b19">[20]</ref>. Languagebased sandboxing is somewhat orthogonal in scope, is more flexible, and does not require changes to browsers.</p><p>Runtime Security Analysis of JavaScript There are various means to secure widgets that do not employ language-based security. Some systems rely on modified browsers, additional client software, or proxy servers <ref type="bibr">[10, 11, 23-25, 32, 40]</ref>. Some of these propose alternative Web programming APIs that are designed to be secure. Language-based sandboxing has the advantage of working with today's browsers and deployment methods, but our verification ideas could potentially apply to the design of some of these systems, too.</p></div><figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_0"><head>Figure 2 :</head><label>2</label><figDesc>Figure 2: Similar Rewritings for obj[name]</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_1"><head>Figure 3 :</head><label>3</label><figDesc>Figure 3: Type Language for ADsafe and Widgets</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_2"><head>Figure 5 :</head><label>5</label><figDesc>Figure 5: A Fragment of the Type of window</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_3"><head></head><label></label><figDesc>Figure 6: Annotations on the dom object</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_4"><head>Figure 7 shows typing rules and operations for string sets.Figure 7 :</head><label>77</label><figDesc>Figure 7: Typing and operations on string set types</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_5"><head>later:</head><label></label><figDesc>function (func, timeout) / * : Widget × Widget → Widget * / { if (typeof func === "function") { setTimeout(func, timeout || 0); } else { error(); } }</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_6"><head>Figure 8 :</head><label>8</label><figDesc>Figure 8: Typing object lookup</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_7"><head>Lemma 1 (</head><label>1</label><figDesc>Type Preservation) If, for an expression e, type T , environment Γ and abstract heap Σ, 1. Σ σ, 2. Σ; Γ e : T , and 3. σe → σ e ; then there exists a Σ with Σ σ and Σ ; Γ e : T .</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_9"><head>Figure 10 :</head><label>10</label><figDesc>Figure 10: Exploiting JSLint</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_11"><head>Figure 11 :</head><label>11</label><figDesc>Figure 11: Firefox-specific Exploit for ADsafe</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_1" validated="false"><head>obj .__proto__;</head><label>obj</label><figDesc></figDesc><table>There are various other dangerous fields that are also 
blacklisted and hence rejected by sandboxes. However, 

ADSAFE 
: 

ADSAFE.get(obj,name) 

dojox.secure : 

get(obj,name) 

Caja 
: $v.r($v.ro('obj'),$v.ro('name')) 
WebSandbox : 

c(d.obj,d.name) 

FBJS 
: 

a12345 obj[$FBJS.idx(name)] 

</table></figure>

			<note place="foot" n="1"> See cs.brown.edu/research/plt/dl/adsafety/v1 for our implementation, proofs, and other details.</note>

			<note place="foot" n="2"> JSLint can perform other checks that are not related to ADsafe. In this paper, &quot;JSLint&quot; refers to JSLint with ADsafe checks enabled.</note>

			<note place="foot" n="3"> Because we want a strategy that extends to other sandboxes, we do not try to exploit the fact that JSLint is written in JavaScript. The Cajoler of Caja is instead written in Java, and the filters and rewriters for other sandboxes might be written in other languages. The strategy we outline here avoids both getting bogged down in the details of all these languages as well as over-reliance on JavaScript itself.</note>

			<note place="foot" n="4"> µα.T binds the type variable α in the type T to the whole type, µα.T . Therefore, α is in fact the type Widget. 5 The α · · · syntax is a literal part of the type, and means the function can be applied to any number of additional α-typed arguments.</note>

			<note place="foot" n="6"> The supplemental material contains examples of the differences.</note>

			<note place="foot" n="7"> For the formal proof, see Guha et al. [18] and the supplemental material on the web.</note>

			<note place="foot" n="8"> tech.groups.yahoo.com/group/caplet/message/ 44 check, to ensure that widgets do not programmatically load external resources via CSS:</note>

			<note place="foot" n="9"> https://developer.mozilla.org/en/XBL</note>
		</body>
		<back>

			<div type="acknowledgement">
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Acknowledgments</head><p>We thank Douglas Crockford for discussions, openmindedness, and insightful feedback (and the promise of certain crustaceans); Mark S. Miller for enlightening discussions; Matthias Felleisen, Andrew Ferguson, and David Wagner for numerous helpful comments that helped us understand weaknesses in exposition; the NSF for financial support; and StackOverflow, as well as Claudiu Saftoiu (our lower-latency version of StackOverflow), for unflagging attention to detail.</p></div>
			</div>

			<div type="references">

				<listBibl>

<biblStruct xml:id="b0">
	<analytic>
		<title level="a" type="main">Towards a Formal Foundation of Web Security</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Akhawe</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Barth</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><forename type="middle">E</forename><surname>Lam</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Mitchell</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Song</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">IEEE Computer Security Foundations Symposium</title>
		<imprint>
			<date type="published" when="2010" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b1">
	<analytic>
		<title level="a" type="main">Towards type inference for JavaScript</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><surname>Anderson</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><surname>Giannini</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Drossopoulou</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">European Conference on Object-Oriented Programming</title>
		<imprint>
			<date type="published" when="2005" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b2">
	<analytic>
		<title level="a" type="main">Computer Security Technology Planning Study</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><forename type="middle">P</forename><surname>Anderson</surname></persName>
		</author>
		<idno>ESD-TR-73-51</idno>
	</analytic>
	<monogr>
		<title level="m">HQ Electronic Systems Division (AFSC), L. G. Handscom Field</title>
		<meeting><address><addrLine>Bedford, Massachusetts</addrLine></address></meeting>
		<imprint>
			<date type="published" when="1730-10" />
		</imprint>
		<respStmt>
			<orgName>Deputy for Command and Management Systems</orgName>
		</respStmt>
	</monogr>
<note type="report_type">Technical Report</note>
</biblStruct>

<biblStruct xml:id="b3">
	<monogr>
		<title level="m" type="main">Caja external security review</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">I</forename><surname>Awad</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><surname>Close</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Felt</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><surname>Jackson</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">B</forename><surname>Laurie</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">F</forename><surname>Lee</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">K.-P</forename><surname>Lee</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D.-S</forename><surname>Hopwood</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Nagra</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">E</forename><surname>Sachs</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Samuel</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Stay</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Wagner</surname></persName>
		</author>
		<ptr target="http://google-caja.googlecode.com/files/Caja_External_Security_Review_v2.pdf" />
		<imprint>
			<date type="published" when="2008" />
			<publisher>Google Inc</publisher>
		</imprint>
	</monogr>
<note type="report_type">Technical report</note>
</biblStruct>

<biblStruct xml:id="b4">
	<analytic>
		<title level="a" type="main">VEX: Vetting browser extensions for security vulnerabilities</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Bandhakavi</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><forename type="middle">T</forename><surname>King</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><surname>Madhusudan</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Winslett</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">USENIX Security Symposium</title>
		<imprint>
			<date type="published" when="2010" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b5">
	<analytic>
		<title level="a" type="main">Featherweight Firefox: Formalizing the Core of a Web Browser</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Bohannon</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">B</forename><forename type="middle">C</forename><surname>Pierce</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Usenix Conference on Web Application Development (WebApps)</title>
		<imprint>
			<date type="published" when="2010" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b6">
	<analytic>
		<title level="a" type="main">Retaining Sandbox Containment Despite Bugs in Privileged Memory-Safe Code</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Cappos</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Dadgar</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Rasley</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Samuel</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">I</forename><surname>Beschastnikh</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><surname>Barsan</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Krishnamurthy</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><surname>Anderson</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">ACM Conference on Computer and Communications Security (CCS)</title>
		<imprint>
			<date type="published" when="2010" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b7">
	<analytic>
		<title level="a" type="main">Staged information flow for JavaScript</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Chugh</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><forename type="middle">A</forename><surname>Meister</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Jhala</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Lerner</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">ACM SIGPLAN Conference on Programming Language Design and Implementation</title>
		<imprint>
			<date type="published" when="2009" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b8">
	<monogr>
		<title/>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Crockford</surname></persName>
		</author>
		<ptr target="ADSafe.www.adsafe.org" />
		<imprint>
			<date type="published" when="2011" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b9">
	<analytic>
		<title level="a" type="main">ADSandbox: Sanboxing JavaScript to fight Malicious Websites</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Dewald</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><surname>Holz</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">F</forename><forename type="middle">C</forename><surname>Freiling</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Symposium On Applied Computing (SAC)</title>
		<imprint>
			<date type="published" when="2010" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b10">
	<analytic>
		<title level="a" type="main">Analyzing information flow in JavaScript-based browser extensions</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Dhawan</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">V</forename><surname>Ganapathy</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Computer Security Applications Conference</title>
		<imprint>
			<date type="published" when="2009" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b11">
	<monogr>
		<title level="m" type="main">The Inlined Reference Monitor Approach to Security Policy Enforcement</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">´</forename><forename type="middle">U</forename><surname>Erlingsson</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2003" />
		</imprint>
		<respStmt>
			<orgName>Cornell University</orgName>
		</respStmt>
	</monogr>
<note type="report_type">PhD thesis</note>
</biblStruct>

<biblStruct xml:id="b12">
	<monogr>
		<title/>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Facebook</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Fbjs</surname></persName>
		</author>
		<ptr target="http://developers.facebook.com/docs/fbjs/" />
		<imprint>
			<date type="published" when="2011" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b13">
	<analytic>
		<title level="a" type="main">Preventing Capability Leaks in Secure JavaScript Subsets</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Finifter</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Weinberger</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Barth</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Network and Distributed System Security Symposium</title>
		<imprint>
			<date type="published" when="2010" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b14">
	<analytic>
		<title level="a" type="main">GATEKEEPER: Mostly static enforcement of security and reliability policies for JavaScript code</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Guarnieri</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">B</forename><surname>Livshits</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">USENIX Security Symposium (SSYM)</title>
		<imprint>
			<date type="published" when="2009" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b15">
	<analytic>
		<title level="a" type="main">Static analysis for Ajax intrusion detection</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Guha</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Krishnamurthi</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><surname>Jim</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">International World Wide Web Conference</title>
		<imprint>
			<date type="published" when="2009" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b16">
	<analytic>
		<title level="a" type="main">The Essence of JavaScript</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Guha</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><surname>Saftoiu</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Krishnamurthi</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">European Conference on Object-Oriented Programming</title>
		<imprint>
			<date type="published" when="2010" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b17">
	<analytic>
		<title level="a" type="main">Typing Local Control and State Using Flow Analysis</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Guha</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><surname>Saftoiu</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Krishnamurthi</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">European Symposium on Programming</title>
		<imprint>
			<date type="published" when="2011" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b18">
	<analytic>
		<title level="a" type="main">Recency types for dynamically-typed, object-based languages: Strong updates for JavaScript</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><surname>Heidegger</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><surname>Thiemann</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">ACM SIGPLAN International Workshop on Foundations of ObjectOriented Languages</title>
		<imprint>
			<date type="published" when="2009" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b19">
	<analytic>
		<title level="a" type="main">Subspace: Secure Cross-Domain Communication for Web Mashups</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><surname>Jackson</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">H</forename><forename type="middle">J</forename><surname>Wang</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">International World Wide Web Conference</title>
		<imprint>
			<date type="published" when="2007" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b20">
	<analytic>
		<title level="a" type="main">Type analysis for JavaScript</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><forename type="middle">H</forename><surname>Jensen</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Møller</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><surname>Thiemann</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">International Static Analysis Symposium</title>
		<imprint>
			<date type="published" when="2009" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b21">
	<analytic>
		<title level="a" type="main">Interprocedural analysis with lazy propagation</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><forename type="middle">H</forename><surname>Jensen</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Møller</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><surname>Thiemann</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">International Static Analysis Symposium</title>
		<imprint>
			<date type="published" when="2010" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b22">
	<analytic>
		<title level="a" type="main">BEEP: Browserenforced embedded policies</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><surname>Jim</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">N</forename><surname>Swamy</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Hicks</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">International World Wide Web Conference</title>
		<imprint>
			<date type="published" when="2007" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b23">
	<analytic>
		<title level="a" type="main">AjaxScope: A platform for remotely monitoring the client-side behavior of web 2.0 applications</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">E</forename><surname>Kıcıman</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">B</forename><surname>Livshits</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Symposium on Operating System Principles</title>
		<imprint>
			<date type="published" when="2007" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b24">
	<analytic>
		<title level="a" type="main">AdJail: Practical enforcement of confidentiality and integrity policies on Web advertisements</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><forename type="middle">T</forename><surname>Louw</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">K</forename><forename type="middle">T</forename><surname>Ganesh</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">V</forename><surname>Venkatakrishnan</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">USENIX Security Symposium (SSYM)</title>
		<imprint>
			<date type="published" when="2010" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b25">
	<analytic>
		<title level="a" type="main">An Operational Semantics for JavaScript</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Maffeis</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Mitchell</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Taly</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">ASIAN Symposium on Programming Languages and Systems</title>
		<imprint>
			<date type="published" when="2008" />
			<biblScope unit="page" from="307" to="325" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b26">
	<analytic>
		<title level="a" type="main">Isolating JavaScript with Filters, Rewriting, and Wrappers</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Maffeis</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><forename type="middle">C</forename><surname>Mitchell</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Taly</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">European Symposium on Research in Computer Security (ESORICS)</title>
		<imprint>
			<date type="published" when="2009" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b27">
	<analytic>
		<title level="a" type="main">Runtime enforcement of secure javascript subsets</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Maffeis</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><forename type="middle">C</forename><surname>Mitchell</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Taly</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">W2SP&apos;09</title>
		<imprint>
			<publisher>IEEE</publisher>
			<date type="published" when="2009" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b28">
	<analytic>
		<title level="a" type="main">Object Capabilities and Isolation of Untrusted Web Applications</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Maffeis</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><forename type="middle">C</forename><surname>Mitchell</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Taly</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">IEEE Symposium on Security and Privacy</title>
		<imprint>
			<publisher>IEEE</publisher>
			<date type="published" when="2010" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b29">
	<analytic>
		<title level="a" type="main">Object capabilities and isolation of untrusted Web applications</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Maffeis</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><forename type="middle">C</forename><surname>Mitchell</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Taly</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">IEEE Symposium on Security and Privacy</title>
		<imprint>
			<date type="published" when="2010" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b30">
	<analytic>
		<title level="a" type="main">Safe Wrappers and Sane Policies for Self Protecting JavaScript</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Magazinius</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><forename type="middle">H</forename><surname>Phung</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Sands</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">OWASP AppSec Research</title>
		<imprint>
			<date type="published" when="2010" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b31">
	<analytic>
		<title level="a" type="main">Conscript: Specifying and enforcing fine-grained security policies for javascript in the browser</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">L</forename><surname>Meyerovich</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">B</forename><surname>Livshits</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">IEEE Symposium on Security and Privacy</title>
		<imprint>
			<date type="published" when="2010" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b32">
	<monogr>
		<title level="m" type="main">Caja: Safe active content in sanitized JavaScript</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><forename type="middle">S</forename><surname>Miller</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Samuel</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">B</forename><surname>Laurie</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">I</forename><surname>Awad</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Stay</surname></persName>
		</author>
		<ptr target="http://google-caja.googlecode.com/files/caja-spec--2008-06-07.pdf" />
		<imprint>
			<date type="published" when="2008" />
			<publisher>Google Inc</publisher>
		</imprint>
	</monogr>
<note type="report_type">Technical report</note>
</biblStruct>

<biblStruct xml:id="b33">
	<analytic>
		<title level="a" type="main">Lightweight self-protecting JavaScript</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><forename type="middle">H</forename><surname>Phung</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Sands</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Chudnov</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">ACM Symposium on Information</title>
		<imprint>
			<date type="published" when="2009" />
		</imprint>
		<respStmt>
			<orgName>Computer and Communications Security</orgName>
		</respStmt>
	</monogr>
</biblStruct>

<biblStruct xml:id="b34">
	<analytic>
		<title level="a" type="main">BrowserShield: Vulnerability-Driven Filtering of Dynamic HTML</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><surname>Reis</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Dunagan</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">H</forename><forename type="middle">J</forename><surname>Wang</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">O</forename><surname>Dubrovsky</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Esmeir</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Symposium on Operating Systems Design and Implementation</title>
		<imprint>
			<date type="published" when="2006" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b35">
	<analytic>
		<title level="a" type="main">Programming objects with ML-ART, an extension to ML with abstract and record types</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Rémy</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Theoretical Aspects of Computer Software</title>
		<editor>M. Hagiya and J. Mitchell</editor>
		<meeting><address><addrLine>Berlin / Heidelberg</addrLine></address></meeting>
		<imprint>
			<publisher>Springer</publisher>
			<date type="published" when="1994" />
			<biblScope unit="volume">789</biblScope>
			<biblScope unit="page" from="321" to="346" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b36">
	<analytic>
		<title level="a" type="main">A Language-Based Approach to Security</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">F</forename><forename type="middle">B</forename><surname>Schneider</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">G</forename><surname>Morrisett</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Harper</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Springer Lecture Notes in Computer Science</title>
		<editor>R. Wilhelm</editor>
		<imprint>
			<biblScope unit="page" from="86" to="101" />
			<date type="published" when="2000" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b37">
	<analytic>
		<title level="a" type="main">Automated analysis of securitycritical JavaScript APIs</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Taly</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">´</forename><forename type="middle">U</forename><surname>Erlingsson</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><forename type="middle">S</forename><surname>Miller</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><forename type="middle">C</forename><surname>Mitchell</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Nagra</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">IEEE Symposium on Security and Privacy</title>
		<imprint>
			<date type="published" when="2011" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b38">
	<analytic>
		<title level="a" type="main">The Design and Implementation of Typed Scheme</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Tobin-Hochstadt</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Felleisen</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages (POPL)</title>
		<imprint>
			<date type="published" when="2008" />
			<biblScope unit="page" from="395" to="406" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b39">
	<analytic>
		<title level="a" type="main">Javascript instrumentation for browser security</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Yu</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Chander</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">N</forename><surname>Islam</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">I</forename><surname>Serikov</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages</title>
		<imprint>
			<date type="published" when="2007" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b40">
	<analytic>
		<title level="a" type="main">Characterizing Insecure JavaScript Practices on the Web</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><surname>Yue</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">H</forename><surname>Wang</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">International World Wide Web Conference</title>
		<imprint>
			<date type="published" when="2009" />
		</imprint>
	</monogr>
</biblStruct>

				</listBibl>
			</div>
		</back>
	</text>
</TEI>
