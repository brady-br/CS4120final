<?xml version="1.0" encoding="UTF-8"?>
<TEI xmlns="http://www.tei-c.org/ns/1.0" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
xsi:schemaLocation="http://www.tei-c.org/ns/1.0 /Users/atharsefid/Desktop/grobid-0.5.3/grobid-home/schemas/xsd/Grobid.xsd"
 xmlns:xlink="http://www.w3.org/1999/xlink">
	<teiHeader xml:lang="en">
		<encodingDesc>
			<appInfo>
				<application version="0.5.3" ident="GROBID" when="2020-09-29T04:28+0000">
					<ref target="https://github.com/kermitt2/grobid">GROBID - A machine learning software for extracting information from scholarly documents</ref>
				</application>
			</appInfo>
		</encodingDesc>
		<fileDesc>
			<titleStmt>
				<title level="a" type="main">SoK: XML Parser Vulnerabilities</title>
			</titleStmt>
			<publicationStmt>
				<publisher/>
				<availability status="unknown"><licence/></availability>
			</publicationStmt>
			<sourceDesc>
				<biblStruct>
					<analytic>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Christopher</forename><surname>Späth</surname></persName>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Christian</forename><surname>Mainka</surname></persName>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Vladislav</forename><surname>Mladenov</surname></persName>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Jörg</forename><surname>Schwenk</surname></persName>
						</author>
						<author>
							<affiliation key="aff0">
								<orgName type="institution" key="instit1">Ruhr-University Bochum</orgName>
								<orgName type="institution" key="instit2">Ruhr-University</orgName>
								<address>
									<settlement>Bochum</settlement>
								</address>
							</affiliation>
						</author>
						<author>
							<affiliation key="aff1">
								<orgName type="institution">Ruhr-University</orgName>
								<address>
									<settlement>Bochum</settlement>
								</address>
							</affiliation>
						</author>
						<author>
							<affiliation key="aff2">
								<orgName type="institution">Ruhr-University</orgName>
								<address>
									<settlement>Bochum</settlement>
								</address>
							</affiliation>
						</author>
						<title level="a" type="main">SoK: XML Parser Vulnerabilities</title>
					</analytic>
					<monogr>
						<imprint>
							<date/>
						</imprint>
					</monogr>
				</biblStruct>
			</sourceDesc>
		</fileDesc>
		<profileDesc>
			<abstract>
				<p>The Extensible Markup Language (XML) has become a widely used data structure for web services, Single-Sign On, and various desktop applications. The core of the entire XML processing is the XML parser. Attacks on XML parsers, such as the Billion Laughs and the XML External Entity (XXE) Attack are known since 2002. Nevertheless even experienced companies such as Google, and Facebook were recently affected by such vulnerabilities. In this paper we systematically analyze known attacks on XML parsers and deal with challenges and solutions of them. Moreover, as a result of our in-depth analysis we found three novel attacks. We conducted a large-scale analysis of 30 different XML parsers of six different programming languages. We created an evaluation framework that applies different variants of 17 XML parser attacks and executed a total of 1459 attack vectors to provide a valuable insight into a parser&apos;s configuration. We found vulnerabilities in 66 % of the default configuration of all tested parses. In addition, we comprehensively inspected parser features to prevent the attacks, show their unexpected side effects, and propose secure configurations.</p>
			</abstract>
		</profileDesc>
	</teiHeader>
	<text xml:lang="en">
		<body>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="1">Introduction</head><p>The Extensible Markup Language (XML) is a wide spread data structure used in many application areas ranging from desktop office tools which use it to save their documents (*.docx), to XML-based databases <ref type="bibr">(MarkLogic, eXist)</ref>, and web protocol standards (SAML, SOAP).</p><p>On a technical level, the parser translates an input byte-stream into an XML document that can be accessed by APIs in different programming languages.</p><p>Security of XML parsing. By adding a Document Type Definition (DTD) directly on top of the XML document, the parser behavior can be influenced. Originally designed to define the structure (grammar) of an XML document, it also enables various attacks, such as Denial-ofService (DoS), Server Side Request Forgery (SSRF), and File System Access (FSA).</p><p>In 2002, Steuck discovered the powerful XML External Entity (XXE) attack on XML parsers that allows FSA <ref type="bibr" target="#b43">[60]</ref>. Leading companies like Google <ref type="bibr" target="#b8">[15]</ref>, Facebook <ref type="bibr" target="#b42">[59,</ref><ref type="bibr" target="#b36">53]</ref>, Apple <ref type="bibr" target="#b3">[8]</ref> and others <ref type="bibr" target="#b46">[63,</ref><ref type="bibr">9,</ref><ref type="bibr">16,</ref><ref type="bibr">17]</ref> have been recently affected by this attack.</p><p>The Open Web Application Security Project (OWASP) and other resources <ref type="bibr" target="#b33">[47,</ref><ref type="bibr" target="#b32">46]</ref> [71] only partially list vulnerabilities and slightly consider countermeasures. Morgan <ref type="bibr" target="#b28">[40]</ref> provides till date the most complete compilation of available attack vectors. A systematic sampling of 13 parsers was conducted recently <ref type="bibr" target="#b40">[57]</ref>, however, with only one prevalent kind of FSA and DoS attack within scope. Attacks relying on the FTP <ref type="bibr" target="#b29">[41]</ref> and netdoc protocol <ref type="bibr">[22]</ref>, as well as several bypasses <ref type="bibr" target="#b52">[74]</ref> and novel attacks such as schemaEntity or XML Inclusion (XInclude) based SSRF are not addressed in any of these sources.</p><p>Systematic Parser Analysis. We contribute a comprehensive security analysis framework of 30 XML parsers in six popular programming languages: Ruby, .NET, PHP, Java, Python, Perl. We identify each parser's default behavior by using 17 core tests. This corresponds to all known attack vectors. Based on them, we introduce a metric enabling the comparison of all parsers regarding the security, by computing a Base Vulnerability Score (BVS).</p><p>Complex Attack Prevention. Finding countermeasures can be tedious, since the parser's documentation is outdated and a thorough inspection of the source code is necessary. We extended our core tests with parserspecific tests, to investigate the implication of security relevant parser features and their interaction with each other on the overall security. This results in a total of 1459 tests.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Contribution.</head><p>We systematically discuss the so-far largest number of state-of-the art XML attacks. We develop three novel attack vectors.</p><p>We create an evaluation framework <ref type="bibr" target="#b4">[10]</ref> considering all known attacks and apply a comprehensive evaluation to 30 parsers finding 66 % vulnerable in their default configuration. We propose countermeasures (if possible) against all attacks and propose a secure configuration for each parser. We apply our framework to Android and reveal a yet undiscovered attack.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2">XML Foundations</head><p>XML is a human-readable, structured document, which is subject to a set of rules. Documents adhering to these rules are called well-formed. Due to space limitations, we will only discuss two components of XML here -elements and DTDs. We release an extended version <ref type="bibr" target="#b5">[11]</ref> and our evaluation framework <ref type="bibr" target="#b4">[10]</ref> to support further research in this field.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.1">XML Elements</head><p>Elements structure an XML document as in Listing 1.</p><p>1 &lt;data class="products"&gt;4&lt;/data&gt;</p><p>Listing 1: Example of an element and an attribute.</p><p>This document declares an element data with a text content 4 and an attribute class with a value products.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.2">Document Type Definition</head><p>A DTD defines a grammar to reject invalid user input and is the first component declared in an XML document. In addition, DTDs allow the declaration of storage units, so called entities.</p><p>Entities. There are four different types of entities: Internal General Entities offer a neat way to define a value and reference it arbitrarily often within the document.</p><formula xml:id="formula_0">1 &lt;!DOCTYPE data [ 2 &lt;!ENTITY a "Arachibutyrophobia"&gt; 3 ]&gt; 4 &lt;data&gt;&amp;a;&lt;/data&gt;</formula></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Listing 2: Example of an Internal General Entity</head><p>While processing the document, the parser replaces the reference "&amp;a;" with the term "Arachibutyrophobia".</p><p>External General Entities facilitate the inclusion of external files.</p><formula xml:id="formula_1">1 &lt;!DOCTYPE data [ 2 &lt;!ENTITY a SYSTEM "file:///C:/data/a.txt"&gt; ]&gt; 3 &lt;data&gt;&amp;a;&lt;/data&gt;</formula></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Listing 3: Example of an External General Entity</head><p>The file "a.txt" is a plain text file. The parser retrieves the file and replaces the reference as before.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="1">Arachibutyrophobia</head><p>Listing 4: The content of a.txt Internal Parameter Entities can be used to instantly modify the value of a General Entity.</p><p>1 &lt;!DOCTYPE data [ 2 &lt;!ENTITY % m "majoris"&gt; 3 &lt;!ENTITY a "Arachibutyrophobia %m;"&gt; ]&gt; 4 &lt;data&gt;&amp;a;&lt;/data&gt; Listing 5: Example of an Internal Parameter Entity.</p><p>The value of Entity "a" instantly changes to "Arachibutyrophobia majoris".</p><p>External Parameter Entities can be used to include additional entity declarations, which are stored remotely.</p><p>1 &lt;!DOCTYPE data [ 2 &lt;!ENTITY % extDTD SYSTEM "file:///C:/data/majoris.dtd" &gt; 3 %extDTD; 4 &lt;!ENTITY a "Arachibutyrophobia %m;"&gt; ]&gt; 5 &lt;data&gt;&amp;a;&lt;/data&gt; Listing 6: Example of an External Parameter Entity.</p><p>The corresponding DTD "majoris.dtd" is shown in Listing 12.</p><p>1 &lt;!ENTITY % m "majoris"&gt; Listing 7: Example of an external DTD.</p><p>The parser first fetches the External Parameter Entity "extDTD", makes the declaration of the entity m available and finally, replaces this reference.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.3">Other XML Technologies</head><p>XInclude. XInclude facilitates the inclusion of an external (XML) document into the source document. The following example shows how to include a file other.xml as a child node of the element data. XSLT. Extensible Stylesheet Language Transformations (XSLT) is commonly used to transform XML documents into other documents and formats, for example, into JSON or PDF <ref type="bibr" target="#b16">[27]</ref>  <ref type="bibr" target="#b30">[42]</ref>.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>XML Schema.</head><p>An XML Schema defines grammar using an XML style syntax.</p><p>The XML Schema standard allows for the inclusion of external Schema files by using the schemaLocation and the noNamespaceSchemaLocation attributes.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3">Attacker Capabilities</head><p>For all attacks described in this paper, we assume that the attacker is able to generate XML messages and that the XML parser can process these messages. We assume a DTD to contain only such grammatical restrictions which do not hinder the attacker. For example, the attacker can create an XML config file and the targeted application parses this file on startup. In case of web applications, the attacker can control or upload an XML file that is processed by the business logic. Hence in our evaluation, we directly invoke the targeted parser and thus obviously control the parsed message.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4">Denial-of-Service</head><p>DoS attacks target system resources, such as network, storage, memory or CPU processing <ref type="bibr" target="#b18">[29]</ref>. An efficient way to do this is to let the application process a "problem", thereby allocating a huge amount of resources. At the same time the attacker can generate and send the attack vector using much fewer resources. As a result, an offered service is unavailable for benign users or at least responds significantly slower than normal.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.1">DoS: Recursive Entities</head><p>In the following example, the parser receives an XML document which declares two entities calling each other in an infinite loop (see Listing 9).</p><formula xml:id="formula_2">1 &lt;!DOCTYPE data [ 2 &lt;!ENTITY a "&amp;b;"&gt; 3 &lt;!ENTITY b "&amp;a;"&gt; ]&gt; 4 &lt;data&gt;&amp;a;&lt;/data&gt;</formula></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Listing 9: XML Infinite Recursion</head><p>The parser resolves the entity a to a reference of b and the entity b resolves to a reference of a. Therefore, the parser will loop indefinitely and consume CPU resources.</p><p>Limitation: Forbidden by XML Specification. The XML specification addresses this problem and forbids the processing of entities which call up each one in a loop. However, our evaluation on Android shows that not all parsers adhere to this rule.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.2">DoS: Billion Laughs</head><p>Internal General Entities can be abused to create an Exponential entity attack (Billion Laughs Attack) <ref type="bibr" target="#b17">[28]</ref>. The attack relies on a nested , but limited, level of entity recursions.</p><p>1 &lt;!DOCTYPE data [ 2 &lt;!ENTITY a1 "dos"&gt; 3 &lt;!ENTITY a2 "&amp;a1;&amp;a1;&amp;a1;&amp;a1;&amp;a1;"&gt; 4 ... 5 &lt;!ENTITY a13 "&amp;a12;&amp;a12;&amp;a12;&amp;a12;&amp;a12;"&gt; ]&gt; 6 &lt;data&gt;&amp;a13;&lt;/data&gt;</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Listing 10: Example of the Billion Laughs Attack</head><p>By defining different nesting levels of Internal General Entities, a file of only 200 kilobytes is expanded to several gigabytes (3.5GB) during the parsing process.</p><p>Challenge: Thresholds. A number of parsers detect and counteract this attack by implementing a threshold to limit the total number of allowed entity references within a document.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.3">DoS: Quadratic Blowup</head><p>Even if the parser implements such a threshold, there are other ways to execute a DoS attack by using an attack variant known as the Quadratic Blowup Attack <ref type="bibr">[64]</ref>. Here, a single entity is created containing a large string (e.g. 10 MB). This entity is referenced multiple times within the document in order to achieve a similar result as before. Since less entity references are required than in Listing 10, the threshold limitation can be bypassed.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.4">DoS with External General Entities</head><p>External General Entities can be misused for DoS attacks by pointing to a large external file <ref type="bibr" target="#b43">[60,</ref><ref type="bibr" target="#b33">47]</ref> which will be read during processing. As a result, the target system allocates memory resources. If this file is retrieved over the network, for example. from the attacker's server, the download speed can be reduced in order to improve the impact of this attack and to allocate additional network resources for a longer period of time.</p><p>Challenge: Not Applicable to Arbitrary Files. Our investigation shows that all parsers abort processing if the referenced file is not well-formed. We confirmed this for common attack vectors under both UNIX (/dev/random, /dev/urandom and /dev/zero ) and Windows C:/pagefile.sys. Hence, we conclude that this attack is only feasible with large XML documents.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.5">Countermeasures</head><p>Applicable countermeasures against these attacks are: ( </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5">File System Access</head><p>A File System Access (FSA) is utilized to read out arbitrary files from a system. Steuck discovered an XML based FSA attack called XML External Entity (XXE) for the first time in <ref type="bibr">2002 [60]</ref>. XML External Entity (XXE) attacks are instances of injection attacks.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5.1">Classic XML External Entity</head><p>XXE attacks misuse a benign feature, namely External General Entities. In contrast to the benign usage of External General Entity, the attacker injects a path to an arbitrary resource (e.g. /etc/passwd) and the contents are returned.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Extension: No External Entity allowed in Attributes.</head><p>The XML specification forbids the reference of External General Entities in attribute values. Yunusov et al. <ref type="bibr" target="#b52">[74]</ref> showed how to adeptly bypass this limitation in 2013, namely an Internal General Entity is referenced within the attribute value. By means of an External Parameter Entity the content of an external resource is included into the Internal General Entity and hence the attribute value. This mimics the same functionality as an External General Entity. We later present a novel attack based on this bypass in Section 5.5.</p><p>Challenge: Well-formedness . The content of files referenced by an External General Entity which are not well-formed cause the parser to trigger an exception and abort processing. Some examples of not well-formed replacement text include a start-tag without a corresponding end-tag or characters forbidden in XML, such as the left angle bracket (&lt;). Therefore, it is, for example, not possible to read out certain configuration files (e.g. /etc/fstab) with a classic XXE attack.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5.2">Parameter-based XXE</head><p>Internal Parameter Entities can be used to create a CDATA element and in this way escape the contents of the file. Consequently, the parser no longer triggers an exception. The first variation of this attack is mentioned by Morgan <ref type="bibr" target="#b28">[40]</ref>. We developed a new modified version of this attack. For specific parser configurations, our evaluation results show that our attack vector succeeds when Morgan's attack does not and vice versa. Therefore, the two vectors complement each other.</p><p>Listing 12: An external DTD contains further Entities.</p><p>In the example shown, three parameter entities are used: (1.) start -begins the escape sequence. (2.) filecontains the content of the referenced file -all characters are escaped; hence, the content is well-formed. (3.) endcloses the escape sequence. The Internal General Entity named all orders the Internal Parameter Entities (start, file and end). Parameter Entities can be used exclusively in an external DTD within General Entities .</p><p>Challenge: No direct Feedback Channel. All previous attacks assume that the XML content is echoed back to the attacker. This is not always the case. In a Single Sign-On system (e.g., SAML), the user sends his SAML token, which is an XML message, to a server and either gets logged in or blocked. In other words: the user receives a true/false answer instead of an echoed XML message. This scenario is comparable to blind SQL injection attacks where the attacker does not see the provoked error messages <ref type="bibr" target="#b31">[45]</ref>.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5.3">Blind XXE</head><p>Even if such a direct feedback channel is not available, a FSA attack is still feasible using blind XXE. (This term is coined analogously to blind SQLi). By referencing a non-existent file <ref type="bibr" target="#b37">[54,</ref><ref type="bibr" target="#b47">65]</ref>, the parser aborts the processing and displays an error message.</p><p>Yunusov et al. <ref type="bibr" target="#b52">[74]</ref> invoke an HTTP GET request to the attacker' server and includes the contents of the file with an External Parameter Entity as the path to the resource. Consequently, the content of the file corresponds to the requested file on the attacker's server. The attacker only has to review her log files in order to retrieve the content of the file.</p><p>Challenge: Reading out multi-line files. Line termination characters are not allowed as characters of a URL. If the parser does not automatically encode line termination characters, only the first line of a file can be transmitted by using this attack.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5.4">Blind XXE The FTP Protocol</head><p>Novikov reported a solution to this challenge (for Java) by relying on the FTP protocol <ref type="bibr" target="#b29">[41]</ref>. The attacker simulates an FTP server that requests more commands from the client each time something has been sent. The commands correspond to a line within the document and the line termination character causes these commands to be sent. This way a multi-line file can be read out.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5.5">Blind XXE SchemaEntity</head><p>We too present a solution to this challenge with a novel Blind XXE attack called schemaEntity. We found three variations of this attack by using the (1.) noNamespaceSchemaLocation attribute, (2.) the schemaLocation attribute or (3.) an XInclude instruction.</p><p>Our attack relies on three building blocks. (1.) Inclusion: Parameter Entities are used to include an external resource into an attribute value <ref type="bibr" target="#b52">[74,</ref><ref type="bibr" target="#b53">75]</ref>. (2.) Transformation: The Attribute-Normalization algorithm converts line termination characters into whitespaces <ref type="bibr" target="#b7">[13]</ref>. (3.) Transmission: XInclude or XML Schema attributes, such as schemaLocation, noNamespaceSchemaLocation are used to transmit the content (SSRF) to the attacker <ref type="bibr" target="#b28">[40]</ref>.</p><p>We will now discuss, by way of example, an instance of this attack based on the noNamespaceSchemaLocation attribute. The vector is shown in Listing 13. The following listing shows the external DTD which is loaded from the attacker's server.</p><p>1 &lt;!ENTITY % payload SYSTEM "file:///etc/passwd"&gt; 2 &lt;!ENTITY % param1 "&lt;!ENTITY internal '%payload;'&gt;"&gt; 3 %param1;</p><p>Listing 14: External DTD for the schemaEntity Attack First, we include the content of the file in order to store it in the attribute value using parameter entities. Second, we misuse the Attribute-Normalization algorithm to automatically transform line termination characters, such as #xD and #xA into whitespaces. This step is key because it enables the transmission of multi-line files. Finally, the transformed file is set as the path of a URL in the noNamespaceSchemaLocation attribute and hence the content of the file is transmitted to the attacker's server.</p><p>This attack requires an XML Schema to be processed. Of course, the attack based on XInclude requires XInclude processing.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5.6">Countermeasures</head><p>Applicable countermeasures against these attacks are: (1.) Prevention by disabling insecure parser features. (2.) Filtering by implementing input validation based on a whitelist/blacklist 6 Server Side Request Forgery SSRF attacks send -in the context of XML -requests on behalf of the XML parser to other endpoints on the network <ref type="bibr" target="#b27">[39]</ref>. Usually, these endpoints are not accessible from the Internet (e.g. they are protected by a firewall). SSRF attacks are used to port scan a host, inject malicious content (e.g. HTTP header injection) <ref type="bibr">[43]</ref>, use other URLs or steal Windows credentials <ref type="bibr" target="#b28">[40]</ref>.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="6.1">Classic SSRF</head><p>The most prevalent SSRF attack, based on a DOCTYPE, has already been implemented in popular scanning tools such as Burp <ref type="bibr" target="#b44">[61]</ref>. For our example, we suppose a host 192.168.0.11 on an internal network which offers several operations for remote administration, such as "shutdown". An example of this specific setup is shown in Listing 15.</p><p>Listing 15: SSRF attack based on DOCTYPE.</p><p>An attacker can remotely invoke the shutdown operaton on this host by letting the parser send the request.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="6.2">Innovative SSRF</head><p>We found a novel attack vector based on XInclude. The schemaLocation/noNamespaceSchemaLocation attributes can also faciliate this attack <ref type="bibr" target="#b28">[40]</ref></p><note type="other">. Other DTD based techniques are with External General Entities and External Parameter Entities.</note><p>Challenge: Parser Features. A parser might implement separate features to deactivate the processing of the DOCTYPE, External General Entities, External Parameter Entities, XML Schema and XInclude. If only a subset of these features is applied to harden the parser, the parser is still vulnerable to SSRF attacks.</p><p>Challenge: Firewall/missing HTTP support. A number of parsers do not implement network protocols, and in other scenarios network access is sometimes restricted. We found no suitable solution to this challenge.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="6.3">Countermeasures</head><p>Applicable countermeasures against these attacks are: (1.) Prevention by disabling insecure parser features. (2.) Filtering by implementing input validation based on a whitelist/blacklist.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="7">Additional Attack Techniques</head><p>The XML parsing process may consist of other optional processing steps which might introduce vulnerabilities. In addition to our current research, we also investigated other technologies, and we will shortly highlight them in this section.</p><p>XSLT and XInclude. We limited our tests to check the support of XSLT and XInclude processing in XML parsers. If a parser processes XSLT or XInclude, it is potentially vulnerable to all the attacks previously listed, namely DoS, FSA and SSRF.</p><p>XML Schema. The attributes schemaLocation and the noNamespaceSchemaLocation can be misused to conduct SSRF attacks (cf. Section 6).</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="8">Evaluation Framework</head><p>In this section we present our evaluation framework consisting of (1.) the selection of test vectors (2.) the parser selection (3.) the test methodology.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="8.1">Selection of Test Vectors</head><p>Our test framework consists of 17 core test vectors which we have categorized into four groups.</p><p>Collection of known test vectors. Initially, we searched for research results and scientific papers considering XML based attacks and security problems of XML parsers by using different search engines. We also checked for vulnerabilities based on XML related technologies, such as XInclude and XSLT. As a result, we found well-known attacks such as the Billion Laughs and Quadratic Blowup Attack <ref type="bibr" target="#b17">[28,</ref><ref type="bibr">64]</ref>, the XXE attack <ref type="bibr" target="#b43">[60]</ref>, the whitepaper of Morgan et. al. <ref type="bibr" target="#b28">[40]</ref> and the bypass to include external content in attribute values <ref type="bibr" target="#b52">[74]</ref>.</p><p>We subscribed to multiple CVE newsletters like US-CERT 1 and Mitre 2 and observed recently reported vulnerabilities related to our topic. Each CVE contains information about the attack goals, used attack vectors and the affected vendor. This approach, however, did not reveal any new insights since all the reported issues were based on already known attacks.</p><p>We also subscribed to leading security professionals in the field of XML on Twitter. This way we learned about the Blind XXE attack based on the FTP protocol <ref type="bibr" target="#b29">[41]</ref> and a netdoc based XXE attack in Java <ref type="bibr">[22]</ref>.</p><p>Addition of new Test Vectors. Our investigation showed that a DoS recursion attack and a parameter based Billion Laughs attack had not yet been included in any previous test set.</p><p>We created two Parameter-based XXE (Parameterbased XXE) test vectors to retrieve multi-line files, one with a direct feedback channel and one for Blind XXE (schemaEntity).</p><p>We considered XInclude to conduct SSRF attacks, which was not in the scope of any previous research. We also explicitly used External Parameter Entities as another method to carry out SSRF attacks.</p><p>In brief, compared to existing work <ref type="bibr" target="#b28">[40]</ref> [57], we created three novel attack vectors and included up to ten new test vectors. Our evaluation framework is therefore comprised of 17 tests in total.</p><p>Denial-of-Service. The parser is vulnerable if the entity references are completely expanded.</p><p>( </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="8.2">Parser selection</head><p>We focused our work on the most popular parsers of wide-spread web development programming languages <ref type="bibr" target="#b12">[20]</ref> [72], such as .NET, Java, Perl, PHP, Python and Ruby.</p><p>.NET. Microsoft resources <ref type="bibr" target="#b25">[36,</ref><ref type="bibr" target="#b24">35]</ref> list XmlReader as one of the recommended ways of parsing XML in .NET <ref type="bibr">[37]</ref> and XmlDocument as a parser implementing the DOM API.</p><p>Java. Xerces (SAX/DOM) and its predecessor Crimson are widely employed, JDOM, dom4j and w3cdocument are popular among Java developers <ref type="bibr" target="#b48">[67,</ref><ref type="bibr">24,</ref><ref type="bibr" target="#b11">19]</ref>, Oracle (SAX/DOM) supposedly has support for XSLT, which would render it vulnerable to additional attacks <ref type="bibr" target="#b13">[23]</ref>, Piccolo is a small, non-validating and faster parser than any of the others <ref type="bibr">[44]</ref> and KXml has been included because it is also used for parsing XML on Android.</p><p>Perl. Although XML::Simple seems by far the most popular parser, the developer <ref type="bibr" target="#b20">[31]</ref> discourages its use for new projects. A popular Perl forum lists XML::Twig and XML::LibXml as currently being the best available parsers for Perl <ref type="bibr" target="#b14">[25,</ref><ref type="bibr" target="#b39">56,</ref><ref type="bibr" target="#b41">58]</ref>.</p><p>PHP. We selected SimpleXML, DOMDocument and XMLReader because they are part of the standard library <ref type="bibr">[49]</ref>.</p><p>Python. We selected etree, minidom, xml.sax and pulldom. These are included in the standard library <ref type="bibr">[52,</ref><ref type="bibr">18]</ref> lxml <ref type="bibr" target="#b6">[12]</ref> is a fast parser based on expat. defusedxml <ref type="bibr">[64]</ref>provides secure implementations of the aforementioned parsers. BeautifulSoup <ref type="bibr" target="#b38">[55]</ref> has been used in various projects in the past.</p><p>Ruby. We selected REXML, included in the standard library, and Nokogiri, a third party module. <ref type="bibr" target="#b35">[50,</ref><ref type="bibr" target="#b51">73,</ref><ref type="bibr">68,</ref><ref type="bibr" target="#b49">70]</ref>. Therefore, our evaluation framework comprises of 30 parsers from six programming languages.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="8.3">Testing Methodology</head><p>We implemented our evaluation framework using unit tests, allowing us to easily verify the findings and re-run all tests against each new version of a parser. All previously listed test vectors (see Section 8.1) are executed on all parsers and are therefore called "core tests".</p><p>Base Vulnerability Score (BVS). In order to reflect a parser's vulnerability when factory defaults are being used, we define the BVS as the sum of all core tests. Since each vulnerability adds 1 to this score, the highest possible score is 17. By consulting the BVS, parsers with secure factory defaults can be easily identified and it is possible to compare different parsers.</p><p>Additional tests. Many parsers implement unique features which change the processing of a DTD. We identify DTD security related features by thoroughly checking the documentation, API and even the source code of each parser. We contribute "additional tests" which check both the effects on processing if a single feature or multiple features are set simultaneously. Finally, we propose features which can be used to counteract vulnerabilities.</p><p>Remaning Vulnerability Score (RVS). After applying the proposed countermeasures, we re-evaluate the security of the parser and summarize these results in the Remaning Vulnerability Score (RVS).</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="9">Evaluation</head><p>In this section we present our evaluation results of 30 tested parsers. Our claims are based on a total of 1,459 tests.</p><p>Here we also discuss the implemented countermeasures for each parser. These correspond for DoS in Section 4.5, for FSA in Section 5.6 and for SSRF in Section 6.3.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="9.1">.NET</head><p>Overview. XmlReader (BV S = 0) is not vulnerable to any attack vector. XmlDocument (BV S = 7) is susceptible to FSA and SSRF attacks.</p><p>Countermeasures. XmlDocument should be invoked with an XmlReader <ref type="bibr" target="#b45">[62]</ref> to mitigate all attacks (RV S = 0) (see <ref type="bibr">Listing 19)</ref>.</p><p>Caveats. XmlReader supports XInclude processing. Setting the feature DtdProcessing (DtdProcessing.Parse) renders the parser insecure.</p><p>SchemaEntity: Both XmlReader and XmlDocument are vulnerable if XML Schema processing is enabled (ValidationType (ValidationType.Schema)). </p><formula xml:id="formula_3">0 0 0 0 0 0 0 0 0 1 1 0 4 22 Python/defusedxml.etree 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 1 23 Python/defusedxml.sax 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 24 Python/defusedxml.pulldom 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 25 Python/defusedxml.lxml 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 26 Python/defusedxml.minidom 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 27 Python/minidom 0 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 2 28 Python/BeautifulSoup 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 29 Ruby/REXML 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 30 Ruby/Nokogiri 0 0 1 0 0 0 0 0 0 0 0 0 0 1 1 0 3 1 Android/DocumentBuilder 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 2</formula><p>Android/SaxParser 0 <ref type="table">Vulnerable Parsers  1  15  20  15  11  11  9  9  13  13  13  3  8  11  13  0</ref> Parameter XXE DOS SSRF <ref type="figure" target="#fig_1">Figure 1</ref>: Results of our evaluation framework; 1 = parser is vulnerable to the attack; Novel attacks are highlighted in bold font; * = When certain prerequisites are met, otherwise default settings;</p><formula xml:id="formula_4">1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 2 3 Android/PullParser 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 #</formula><p>Blind XXE FTP: Both XmlReader (DtdProcessing (DtdProcessing.Parse)) and XmlDocument initiate a connection to the FTP server. No data is sent though. This might be due to an implementation flaw of the FTP server in use.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="9.2">Java</head><p>Overview. All tested Java parsers are vulnerable to instances of DoS, FSA and SSRF (BV S = 8) except KXml which is not vulnerable to any attack vector (BV S = 0).</p><p>Our tests show that w3cDocument, JDOM and dom4j are different implementations of the DOM in Java. All these implementations rely on an underlying parser to process the XML document (here: Xerces DOM). Therefore, the detected vulnerabilities directly correlate to the configuration of this parser.</p><p>We confirmed the report of Goldshlager <ref type="bibr">[22]</ref> to misuse the netdoc protocol <ref type="bibr">[14]</ref> for XXE attacks.</p><p>Countermeasures. An EntityResolver mitigates FSA and some SSRF attacks by filtering the input. A DeclHandler mitigates DoS attacks. Secure implementations of the interfaces EntityResolver <ref type="bibr" target="#b22">[33,</ref><ref type="bibr" target="#b19">30]</ref> and DeclHandler <ref type="bibr" target="#b21">[32]</ref> trigger exceptions for the methods resolveEntity(), externalEntityDecl() and internalEntityDecl() and hence abort the processing. If both countermeasures are applied, the resulting configuration is secure (RV S = 0).</p><p>Additionally, (i) Xerces, (ii) Oracle and (iii) Piccolo have parser-specific features to mitigate these attacks. (i) Setting the feature disallow-doctype-decl (true) aborts the processing if a DTD is found, thus mitigating all attacks resulting in a secure configuration (RV S = 0). This is an instance of the countermeasure Prevention and it mitigates all attacks. Listing 17 shows how to apply this feature on a SAX and DOM parser.</p><p>(ii) Setting the feature EXPAND_ENTITYREF (false) mitigates DoS, FSA and some SSRF attacks. A secure implementation of an EntityResolver is still necessary in order to secure the parser. Listing 18 shows how to apply this parser-specific countermeasure.</p><p>(iii) Piccolo implements the SAX features externalgeneral-entities and external-parameter-entities <ref type="bibr" target="#b23">[34]</ref>. These can be used as an alternative to an EntityResolver. As shown in Listing 17, the features have to be applied analogously in an instance of Piccolo.</p><p>Caveats. When applying countermeasures, the available features might not work as expected. A DeclHandler does not mitigate a Doctype based SSRF attack.</p><p>The features external-general-entities and externalparameter-entities are part of the SAX API; however, parsers are not required to implement them. Crimson, for instance, does not.</p><p>Piccolo reports the value of external-general-entities for both features, and the feature external-generalentities (false) inhibits the loading of an external DTD. This is clearly an implementation flaw.</p><p>Xerces implements the features load-dtd-grammar and load-external-dtd <ref type="bibr">[7]</ref>. However, they do not prevent the anticipated attack vectors (e.g. SSRF). A SecurityManager prevents External General Entity based FSA attacks. However, it does not mitigate External General Entity based SSRF attacks.</p><p>SchemaEntity: Both Xerces and Oracle are vulnerable if XML Schema processing is enabled (Xerces: validation/schema (true) and namespaces (true), Oracle: setValidationMode (SCHEMA_VALIDATION)).</p><p>Blind XXE FTP: Both Xerces and Piccolo are vulnerable by default.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="9.3">Perl</head><p>Overview. XML::Twig (BV S = 3) is vulnerable to DoS and FSA attacks. XML::LibXml (BV S = 8) is exposed to DoS, FSA and SSRF attacks. Caveats. XML::LibXml supports XInclude. The feature expand_entities only affects the processing of External General Entities but not External Parameter Entities. The feature validation has precedence over expand_entities, that is if both features are set simultaneously; then only the feature validation affects the processing.</p><p>According to the API of XML::Twig [56], features can be spelled either using Java CamelCase style (NoExpand) or Perl style (no_expand). Also, features can be set either in the new() constructor or in the method parsefile(). There are two implementation flaws regarding these features. First, the same feature affects the processing of entities differently when used in different methods. Second, using a different spelling renders a feature useless. <ref type="table">Table 1</ref> exemplary summarizes the behavior for the feature NoExpand. Other features are also affected by this problem.</p><p>The file:// protocol is not implemented in Twig; hence an XXE attack must be conducted without it.</p><p>Blind XXE FTP: LibXML initiates a connection to the FTP server. However, no data is sent. This might be due to an implementation flaw of the FTP server in use.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="9.4">PHP</head><p>Overview. XMLReader (BV S = 0) is not vulnerable to any attack vector. SimpleXML and DOMDocument (BV S = 1) are both susceptible to DoS attacks.</p><p>Countermeasures. No countermeasures are available for any of these parsers (BV S = RV S).</p><p>Caveats. Both XmlReader and DOMDocument support XInclude. Using the proposed countermeasure disable_entity_loader (true) <ref type="bibr" target="#b33">[47,</ref><ref type="bibr" target="#b34">48]</ref> is neither suitable for SimpleXML nor for DOMDocument because it either does not affect the parsing process or it prevents the parser from loading the input XML document. All tested PHP parsers are based on the libxml2 library and hence offer the corresponding features DTDATTR, DTDLOAD, DTDVALID, NOENT. We advise readers to not set any of these features primarily because it renders the corresponding parser vulnerable to a plethora of attacks. Additionally, in XmlReader there are two implementation flaws.</p><p>(1.) Features behave differently for different input files (e.g. XMLReader::VALIDATE and DTDVALID for External General Entities) and (2.) The parser-specific features are not implemented analogously to the libxml2 features (e.g. LOADDTD/DEFAULTATTRS vs DTD-LOAD/DTDATTR) This is counterintuitive because usually one would expect that (1.) the same feature affects the processing of the same underlying data structure in an identical way and (2.) that parser-specific features modify the processing in an identical way as the features of the underlying library.</p><p>Blind XXE FTP: All parsers are vulnerable if DTD processing is enabled (DTDLOAD/VALIDATION).</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="9.5">Python</head><p>Overview. defusedxml and BeautifulSoup are not vulnerable to any attack vector (BV S = 0). etree and minidom (BV S = 2) are susceptible to DoS attacks. lxml is exposed to DoS and FSA attacks (BV S = 2). xml.sax and pulldom (BV S = 6) are vulnerable to DoS, FSA and SSRF attacks.</p><p>Countermeasures. If applicable, an instance of defusedxml <ref type="bibr">[64]</ref> should be used (RV S = 0). If another parser must be used, we propose the following advice:</p><p>Setting the feature resolve_entities (False) in lxml mitigates all attacks (RV S = 0). The application of this countermeasure is shown in Listing 22. Applying a secure EntityResolver (see Section 9.2) to xml.sax and pulldom leaves the parser vulnerable DoS attacks (RV S = 2). Other countermeasures are not available.</p><p>Caveats. Both etree and lxml support XInclude. Setting the feature no_network (false) in lxml to activate network access renders the parser vulnerable to Parameter-based XXE and SSRF attacks. Disabling the built-in protection for Billion Laughs Attacks (huge_tree (true)) renders the parser vulnerable to exactly this attack.</p><p>Blind XXE FTP: lxml initiates a connection to the FTP server. However, no data is sent. This might be due to an implementation flaw of the FTP server in use.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="9.6">Ruby</head><p>Overview. REXML (BV S = 0) is not vulnerable to any attack vector. Nokogiri (BV S = 1) is vulnerable to DoS attacks.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Countermeasures.</head><p>Setting the features entity_expansion_limit and entity_expansion_text_limit <ref type="bibr">[69]</ref> of REXML can be used to restrict the number and size of Entities even more (BV S = RV S).</p><p>Nokogiri's underlying libxml2 library is configured identically to the PHP implementation of DOMDocument and SimpleXML. Therefore, the same advice applies. No countermeasures are available (RV S = 1).</p><p>Blind XXE FTP: Nokogiri initiates a connection to the FTP server if DTD processing is enabled (DTDLOAD/-VALIDATION). However, no data is sent. This might be due to an implementation flaw of the FTP server in use.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="10">Android</head><p>Six months after we created our evaluation framework, we applied it without any modifications to Android (API 23). XML processing on Android is based on Java <ref type="bibr">[66,</ref><ref type="bibr" target="#b1">4]</ref>.</p><p>Overview. DocumentBuilder <ref type="bibr">[2]</ref> and XmlPullParser <ref type="bibr">[3]</ref> (BV S = 0) are not vulnerable to any attack vector. SaxParser <ref type="bibr">[5]</ref> is vulnerable to DoS attacks (BV S = 2).</p><p>Countermeasures. There applicable countermeasures from 9.2 are not implemented on Android and hence not applicable.</p><p>Caveats. XmlPullParser is based on KXml (BV S = 0); however on Android, methods and features specifically for processing DTDs have been implemented. This is particularly infelicitous since setting the feature PRO-CESS_DOCDECL (true) renders the parser vulnerable to the DoS Recursion Attack. Therefore, processing only stops if the App crashes or quits. Obviously, this is an implementation flaw. Other attacks, such as FSA or SSRF, are not feasible because neither External General nor Parameter Entities are implemented.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="11">Conclusion</head><p>DTD attacks are still a prevalent problem in popular XML parsers. We found that multiple parsers are vulnerable to DoS, FSA and SSRF attacks in their default configuration. We also showed, how our attack framework can be used to evaluate new systems by the example of Android and thus revealed a vulnerability that has not been found on any other parser before. The security of other parsers, especially if contained in a closed source system, such as iOS , IBM DataPower or Axway Security Gateway is an interesting research area. Therefore we released an extended version <ref type="bibr" target="#b5">[11]</ref> and our evaluation framework <ref type="bibr" target="#b4">[10]</ref> to support further research in this field.</p><p>Our evaluation is focused on XML, but its conclusion is valid for structured document parsers in general. In order to mitigate such existing risks, we advise the developers of an parser to: (1.) Turn off all security critical features by default. An application developer using the parser must be able to decide if he should turn on the according feature or not. (2.) In addition to the previous aspect, make the enabling of security critical features possible (instead of the need to disable security critical features that are enabled as default) (3.) Document the risks of security critical features and thus make other developers aware of them. This is especially important when it comes to more recently developed parsers, for example JSON, as the attacks known from XML can be adapted. Examples are: (1.) JSLT is a JavaScript alternative to XSLT <ref type="bibr" target="#b0">[1]</ref>. (2.) JSON Include, which is comparable to XInclude <ref type="bibr">[51,</ref><ref type="bibr">21]</ref>. (3.) JSON Schema <ref type="bibr" target="#b15">[26]</ref>.</p><p>This leads to the research question whether JSON (or other) parsers are also vulnerable to DoS, SSRF, and FSA attacks.</p></div><figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_0"><head></head><label></label><figDesc>&lt;xi:include xmlns:xi="http://www.w3.org/2001/XInclude" href="other.xml"/&gt; 3 &lt;/data&gt; Listing 8: XML document containing a XInclude instruction.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_1"><head>1 .)</head><label>1</label><figDesc>Prevention by disabling insecure parser features. (2.) Counteraction by implementing custom thresholds. (3.) Limitation of the allocated resources</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_2"><head>1</head><label></label><figDesc>&lt;!DOCTYPE data [ 2 &lt;!ENTITY % remote SYSTEM "http://attacker.com/ external_entity_attribute.dtd"&gt; 3 %remote; ]&gt; 4 &lt;data xmlns:xsi="http://www.w3.org/2001/XMLSchema- instance" 5 xsi:noNamespaceSchemaLocation="http://192.168.2.31/&amp; internal;"&gt;&lt;/data&gt; Listing 13: SchemaEntity Attack with noNamespaceSchemaLocation attribute</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_4"><head>Countermeasures.</head><label></label><figDesc>Setting the feature NoExpand (false) in XML::Twig mitigates all attacks (RV S = 0). The ap- plication is shown in Listing 20. 1 $t= XML::Twig−&gt;new(); 2 $t−&gt;parsefile('../../xml_files_windows/dos_core.xml', NoExpand =&gt; 1); Listing 16: Applying countermeasures for XML::Twig. Setting the feature load_ext_dtd (false) in XML::LibXml mitigates all but DoS attacks (RV S = 2). The application is shown in Listing 21.</figDesc></figure>

			<note place="foot" n="1"> &lt;!DOCTYPE data SYSTEM &quot;http://attacker.com/ parameterEntity_doctype.dtd&quot;&gt; 2 &lt;data&gt;&amp;all;&lt;/data&gt; Listing 11: Our short Parameter-based XXE attack. The parser first retrieves an external DTD with the contents as in Listing 12. 1 &lt;!ENTITY % start &quot;&lt;![CDATA[&quot;&gt; 2 &lt;!ENTITY % file SYSTEM &quot;file:///etc/fstab&quot;&gt; 3 &lt;!ENTITY % end &quot;]]&gt;&quot;&gt; 4 &lt;!ENTITY all &apos;%start;%file;%end;&apos;&quot;&gt;</note>

			<note place="foot" n="1"> &lt;!DOCTYPE data SYSTEM &quot;http://192.168.0.11/shutdown&quot;&gt; 2 &lt;data&gt;4&lt;/data&gt;</note>

			<note place="foot" n="1"> https://www.us-cert.gov/ncas/alerts 2 https://cve.mitre.org</note>

			<note place="foot" n="3"> We limited our tests to the HTTP protocol. The SSRF bible [43] lists other interesting protocols for Java and PHP, which could also be tested.</note>

			<note place="foot" n="1"> parser = XMLParser(resolve_entities=False) Listing 22: Applying countermeasures for lxml.</note>
		</body>
		<back>

			<div type="acknowledgement">
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Acknowledgements</head><p>The research was supported by the German Ministry of research and Education (BMBF) as part of the VERTRAG and OpenC3S research project and by the FutureTrust project funded by the European Commission (Grant agreement number: 700542-Future-Trust-H2020-DS-2015-1).</p></div>
			</div>

			<div type="annex">
<div xmlns="http://www.tei-c.org/ns/1.0"><head>A Appendix</head></div>			</div>
			<div type="references">

				<listBibl>

<biblStruct xml:id="b0">
	<monogr>
				<ptr target="http://ajaxian.com/archives/jslt-a-javascript-alternative-to-xslt" />
		<title level="m">Jslt: A javascript alternative to xslt</title>
		<imprint>
			<date type="published" when="2007" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b1">
	<monogr>
				<ptr target="https://developer.android.com/training/basics/network-ops/xml.html" />
		<title level="m">Parsing xml data</title>
		<imprint>
			<date type="published" when="2016" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b2">
	<monogr>
				<title level="m">Class securitymanager</title>
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b3">
	<monogr>
				<ptr target="http://lists.apple.com/archives/security-announce/2015/Aug/msg00002.html" />
		<title level="m">Office viewer</title>
		<imprint>
			<date type="published" when="2015-08" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b4">
	<analytic>
		<title level="a" type="main">Authors of this submission: Core tests and parser specific tests (source code</title>
		<ptr target="https://goo.gl/nfKuaL" />
	</analytic>
	<monogr>
		<title level="m">Zip, Google Drive</title>
		<imprint>
			<date type="published" when="2016-05" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b5">
	<monogr>
		<title level="m" type="main">Authors of this submission: Security implications of dtd attacks against a wide range of xml parsers. Pdf, Google Drive</title>
		<ptr target="https://goo.gl/qGMlpw" />
		<imprint>
			<date type="published" when="2016-05" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b6">
	<monogr>
		<title level="m" type="main">Behnel: lxml -xml and html with python</title>
		<ptr target="http://lxml.de/index.html" />
		<imprint>
			<date type="published" when="2015" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b7">
	<monogr>
		<title level="m" type="main">Extensible markup language (xml)</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><surname>Bray</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Paoli</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><forename type="middle">M</forename><surname>Sperberg-Mcqueen</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">E</forename><surname>Maler</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">F</forename><surname>Yergeau</surname></persName>
		</author>
		<ptr target="http://www.docjar.com/html/api/sun/net/www/protocol/netdoc/Handler.java.html" />
		<imprint>
			<date type="published" when="2008-11" />
			<biblScope unit="volume">1</biblScope>
		</imprint>
	</monogr>
	<note>fifth edition</note>
</biblStruct>

<biblStruct xml:id="b8">
	<monogr>
				<idno>16] erpscan.com: SAP Mobile Platform 2.3</idno>
		<ptr target="http://blog.detectify.com/post/82370846588/how-we-got-read-access-on-googles-production-servers" />
		<title level="m">detectify: How we got read access on Google&apos;s production servers</title>
		<imprint>
			<date type="published" when="2014-11" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b9">
	<monogr>
				<ptr target="http://erpscan.com/advisories/erpscan-15-020-sap-mobile-platform-2-3-xxe-in-application-import/" />
		<title level="m">-XXE in application import</title>
		<imprint>
			<date type="published" when="2015-08" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b10">
	<monogr>
		<title/>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">/</forename><surname>Understanding+xml</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2015" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b11">
	<monogr>
		<title/>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Filipjirsak: Dom4j</surname></persName>
		</author>
		<ptr target="http://dom4j.sourceforge.net/" />
		<imprint>
			<date type="published" when="2015" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b12">
	<monogr>
				<idno>html [21] github: composer-merge-plugin</idno>
		<ptr target="https://twitter.com/Nirgoldshlager/status/618417178505814016" />
		<title level="m">fromdev.com: 5 best programming languages for web developers</title>
		<imprint>
			<date type="published" when="2013-09" />
		</imprint>
	</monogr>
<note type="report_type">Best-ProgrammingLanguages-Web-Development.</note>
</biblStruct>

<biblStruct xml:id="b13">
	<monogr>
				<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Harold</surname></persName>
		</author>
		<ptr target="http://cafeconleche.org/SAXTest/" />
		<title level="m">Sax conformance testing</title>
		<imprint>
			<date type="published" when="2004" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b14">
	<monogr>
		<title level="m" type="main">Re: best xml parser in 5</title>
		<ptr target="http://www.perlmonks.org/?node_id=1127488" />
		<imprint>
			<date type="published" when="2015" />
			<biblScope unit="volume">18</biblScope>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b15">
	<monogr>
				<ptr target="http://crypt.codemancers.com/posts/2014-02-11-An-introduction-to-json-schema/" />
		<title level="m">Kashyap: An introduction to json schema</title>
		<imprint>
			<date type="published" when="2014" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b16">
	<monogr>
		<title level="m" type="main">XSL Transformations (XSLT) Version 2.0 (Second Edition). W3C proposed edited recommendation</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Kay</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2009-04" />
			<biblScope unit="volume">3</biblScope>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b17">
	<monogr>
		<title level="m" type="main">Multiple vendors xml parser (and soap/webservices server) denial of service attack using dtd</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Klein</surname></persName>
		</author>
		<ptr target="http://www.securityfocus.com/archive/1/303509" />
		<imprint>
			<date type="published" when="2002" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b18">
	<monogr>
		<title level="m" type="main">Liverani: Defending against application level dos attacks</title>
		<ptr target="https://www.owasp.org/images/0/04/Roberto_Suggi_Liverani_OWASPNZDAY2010-Defending_against_application_DoS.pdf" />
		<imprint>
			<date type="published" when="2010" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b19">
	<monogr>
				<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Mclaughlin</surname></persName>
		</author>
		<ptr target="http://www.ibm.com/developerworks/library/x-tipent/index.html" />
		<title level="m">Tip: Using an entity resolver</title>
		<imprint>
			<date type="published" when="2001" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b20">
	<monogr>
		<title/>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Mclean: Xml</surname></persName>
		</author>
		<ptr target="http://search.cpan.org/~grantm/XML-Simple-2.20/lib/XML/Simple.pm" />
		<imprint>
			<date type="published" when="2002" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b21">
	<monogr>
		<title/>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Megginson</surname></persName>
		</author>
		<ptr target="http://www.saxproject.org/apidoc/org/xml/sax/ext/DeclHandler.html" />
		<imprint>
			<date type="published" when="2015" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b22">
	<monogr>
		<title/>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Megginson</surname></persName>
		</author>
		<ptr target="http://www.saxproject.org/apidoc/org/xml/sax/EntityResolver.html" />
		<imprint>
			<date type="published" when="2015" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b23">
	<analytic>
		<title/>
		<ptr target="http://www.saxproject.org/apidoc/" />
	</analytic>
	<monogr>
		<title level="j">Megginson: Package org.xml</title>
		<imprint>
			<date type="published" when="2015" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b24">
	<monogr>
		<title/>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Meier</surname></persName>
		</author>
		<ptr target="https://msdn.microsoft.com/en-us/library/ff647804.aspx" />
		<imprint>
			<date type="published" when="2004" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b25">
	<monogr>
				<ptr target="https" />
		<title level="m">Xml processing</title>
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b26">
	<monogr>
				<ptr target="https://msdn.microsoft.com/en-us/library/system.xml.xmlreadersettings.maxcharactersfromentities%28v=vs.110%29.aspx" />
		<title level="m">Xmlreadersettings.maxcharactersfromentities property</title>
		<imprint>
			<date type="published" when="2015" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b27">
	<monogr>
				<ptr target="http://cwe.mitre.org/data/definitions/918.html" />
		<title level="m">Cwe-918: Server-side request forgery (ssrf</title>
		<imprint>
			<date type="published" when="2013" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b28">
	<monogr>
				<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Morgan</surname></persName>
		</author>
		<ptr target="http://vsecurity.com/download/papers/XMLDTDEntityAttacks.pdf" />
		<title level="m">Xml schema, dtd, and entity attacks</title>
		<imprint>
			<date type="published" when="2014" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b29">
	<monogr>
		<title level="m" type="main">Xxe oob exploitation at java 1</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Novikov</surname></persName>
		</author>
		<ptr target="http://lab.onsec.ru/2014/06/xxe-oob-exploitation-at-java-17.html" />
		<imprint>
			<date type="published" when="2014" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b30">
	<analytic>
		<title level="a" type="main">XSLT version 2.0 is turingcomplete: A purely transformation based proof</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Onder</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Z</forename><surname>Bayram</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Implementation and Application of Automata</title>
		<imprint>
			<publisher>Springer</publisher>
			<date type="published" when="2006" />
			<biblScope unit="page" from="275" to="276" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b31">
	<monogr>
				<ptr target="https://www.owasp.org/index.php/Blind_SQL_Injection" />
		<title level="m">owasp.org: Blind sql injection</title>
		<imprint>
			<date type="published" when="2013" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b32">
	<monogr>
		<title level="m" type="main">Testing for denial of service</title>
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b33">
	<monogr>
		<title level="m" type="main">Xml external entity (xxe) processing</title>
		<ptr target="https://www.owasp.org/index.php/XML_External_Entity_%28XXE%29_Processing" />
		<imprint>
			<date type="published" when="2015" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b34">
	<monogr>
				<title level="m">php.net: libxml_disable_entity_loader. http</title>
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b35">
	<monogr>
				<ptr target="http://wiki.ruby-portal.de/XML_und_Ruby" />
		<title level="m">de: Xml und ruby</title>
		<imprint>
			<date type="published" when="2015-11" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b36">
	<monogr>
		<title level="m" type="main">How I hacked Facebook with a Word Document</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Ramadan</surname></persName>
		</author>
		<ptr target="http://www.attack-secure.com/blog/hacked-facebook-word-document" />
		<imprint>
			<date type="published" when="2015-10" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b37">
	<monogr>
		<title level="m" type="main">Forcing xxe reflection through server error messages</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Rantasaari</surname></persName>
		</author>
		<ptr target="https://blog.netspi.com/forcing-xxe-reflection-server-error-messages/" />
		<imprint>
			<date type="published" when="2015" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b38">
	<monogr>
		<title/>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Richardson</surname></persName>
		</author>
		<ptr target="https://www.crummy.com/software/BeautifulSoup/" />
		<imprint>
			<date type="published" when="2016" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b39">
	<monogr>
		<title/>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Rodriguez: Xml</surname></persName>
		</author>
		<ptr target="http://search.cpan.org/~mirod/XML-Twig-3.49/Twig.pm" />
		<imprint>
			<date type="published" when="2015" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b40">
	<monogr>
		<title level="m" type="main">Known xml vulnerabilities are still a threat to popular parsers and open source systems</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Sadeeq</surname></persName>
		</author>
		<ptr target="http://ieeexplore.ieee.org/xpls/abs_all.jsp?arnumber=7272938&amp;tag=1" />
		<imprint>
			<date type="published" when="2015" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b41">
	<monogr>
				<ptr target="http://search.cpan.org/~shlomif/XML-LibXML-" />
		<title level="m">Xml::libxml::parser</title>
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b42">
	<monogr>
		<title level="m" type="main">XXE in OpenID: one bug to rule them all, or how I found a Remote Code Execution flaw affecting Facebook&apos;s servers</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Silva</surname></persName>
		</author>
		<ptr target="http://www.ubercomp.com/posts/2014-01-16_facebook_remote_code_execution" />
		<imprint>
			<date type="published" when="2014-01" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b43">
	<monogr>
		<title level="m" type="main">Steuck: Xxe (xml external entity) attack</title>
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b44">
	<monogr>
				<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Stuttard</surname></persName>
		</author>
		<ptr target="http://blog.portswigger.net/2015/05/burp-suite-now-reports-blind-xxe.html" />
		<title level="m">Burp suite now reports blind xxe injection</title>
		<imprint>
			<date type="published" when="2015" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b45">
	<monogr>
		<title level="m" type="main">Security briefs -xml denial of service attacks and defenses</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Sullivan</surname></persName>
		</author>
		<ptr target="https://msdn.microsoft.com/en-us/magazine/ee335713.aspx" />
		<imprint>
			<date type="published" when="2009" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b46">
	<monogr>
				<ptr target="https://threatpost.com/adobe-patches-xxe-vulnerability-in-livecycle-data-services/114331" />
		<title level="m">Adobe Patches XXE Vulnerability in LiveCycle Data Services</title>
		<imprint>
			<date type="published" when="2015-08" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b47">
	<monogr>
				<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Tran</surname></persName>
		</author>
		<title level="m">Advisory: Xxe injection in oracle database</title>
		<imprint>
			<biblScope unit="page" from="2014" to="6577" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b48">
	<monogr>
				<idno>html#dodtp80ec559d- 9ea1-435d-9b81-e786274f1786 [68] Unsung: Xml parsing in ruby</idno>
		<ptr target="http://stackoverflow.com/questions/8798179/xml-parsing-in-ruby[69]usa" />
		<title level="m">Entity expansion dos vulnerability in rexml (xml bomb</title>
		<imprint>
			<date type="published" when="2011-01" />
			<biblScope unit="page" from="2013" to="1821" />
		</imprint>
		<respStmt>
			<orgName>Ullenboom: Java ist auch eine Insel</orgName>
		</respStmt>
	</monogr>
	<note>chap. 16.3. Galileo Computing</note>
</biblStruct>

<biblStruct xml:id="b49">
	<monogr>
				<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Vervloesem</surname></persName>
		</author>
		<ptr target="http://www.ml.com/pub/a/2005/11/09/rexml-processing-xml-in-ruby.html?page=1" />
		<title level="m">Rexml: Processing xml in ruby</title>
		<imprint>
			<date type="published" when="2005-11" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b50">
	<monogr>
		<title level="m" type="main">Usage of server-side programming languages for websites</title>
		<ptr target="http://w3techs.com/technologies/overview/programming_language/all" />
		<imprint>
			<date type="published" when="2015-11" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b51">
	<monogr>
				<ptr target="https://developer.yahoo.com/ruby/ruby-xml.html" />
		<title level="m">Parse xml using ruby</title>
		<imprint>
			<date type="published" when="2015-11" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b52">
	<monogr>
		<title level="m" type="main">Yunusov: Xml out-of-band data retrieval</title>
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b53">
	<monogr>
		<title level="m" type="main">Yunusov: Xml data retrieval</title>
		<ptr target="https://media.blackhat.com/eu-13/briefings/Osipov/bh-eu-13-XML-data-osipov-wp.pdf" />
		<imprint>
			<date type="published" when="2014" />
		</imprint>
	</monogr>
</biblStruct>

				</listBibl>
			</div>
		</back>
	</text>
</TEI>
