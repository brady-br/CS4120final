<?xml version="1.0" encoding="UTF-8"?>
<TEI xmlns="http://www.tei-c.org/ns/1.0" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
xsi:schemaLocation="http://www.tei-c.org/ns/1.0 /Users/atharsefid/Desktop/grobid-0.5.3/grobid-home/schemas/xsd/Grobid.xsd"
 xmlns:xlink="http://www.w3.org/1999/xlink">
	<teiHeader xml:lang="en">
		<encodingDesc>
			<appInfo>
				<application version="0.5.3" ident="GROBID" when="2020-09-29T02:55+0000">
					<ref target="https://github.com/kermitt2/grobid">GROBID - A machine learning software for extracting information from scholarly documents</ref>
				</application>
			</appInfo>
		</encodingDesc>
		<fileDesc>
			<titleStmt>
				<title level="a" type="main">Terra Incognita: On the Practicality of User-Space File Systems</title>
			</titleStmt>
			<publicationStmt>
				<publisher/>
				<availability status="unknown"><licence/></availability>
			</publicationStmt>
			<sourceDesc>
				<biblStruct>
					<analytic>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Vasily</forename><surname>Tarasov</surname></persName>
							<affiliation key="aff0">
								<orgName type="institution" key="instit1">Stony Brook University †</orgName>
								<orgName type="institution" key="instit2">IBM Research-Almaden *</orgName>
								<orgName type="institution" key="instit3">Nimble Storage +</orgName>
							</affiliation>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Abhishek</forename><surname>Gupta</surname></persName>
							<affiliation key="aff0">
								<orgName type="institution" key="instit1">Stony Brook University †</orgName>
								<orgName type="institution" key="instit2">IBM Research-Almaden *</orgName>
								<orgName type="institution" key="instit3">Nimble Storage +</orgName>
							</affiliation>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Kumar</forename><surname>Sourav</surname></persName>
							<affiliation key="aff0">
								<orgName type="institution" key="instit1">Stony Brook University †</orgName>
								<orgName type="institution" key="instit2">IBM Research-Almaden *</orgName>
								<orgName type="institution" key="instit3">Nimble Storage +</orgName>
							</affiliation>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><roleName>Sagar</roleName><forename type="first">Trehan</forename><surname>†+</surname></persName>
							<affiliation key="aff0">
								<orgName type="institution" key="instit1">Stony Brook University †</orgName>
								<orgName type="institution" key="instit2">IBM Research-Almaden *</orgName>
								<orgName type="institution" key="instit3">Nimble Storage +</orgName>
							</affiliation>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Erez</forename><surname>Zadok</surname></persName>
							<affiliation key="aff0">
								<orgName type="institution" key="instit1">Stony Brook University †</orgName>
								<orgName type="institution" key="instit2">IBM Research-Almaden *</orgName>
								<orgName type="institution" key="instit3">Nimble Storage +</orgName>
							</affiliation>
						</author>
						<title level="a" type="main">Terra Incognita: On the Practicality of User-Space File Systems</title>
					</analytic>
					<monogr>
						<imprint>
							<date/>
						</imprint>
					</monogr>
				</biblStruct>
			</sourceDesc>
		</fileDesc>
		<profileDesc>
			<abstract>
				<p>To speed up development and increase reliability the Microkernel approach advocated moving many OS services to user space. At that time, the main disadvantage of microkernels turned out to be their poor performance. In the last two decades, however, CPU and RAM technologies have improved significantly and researchers demonstrated that by carefully designing and implementing a microkernel its overhead can be reduced significantly. Storage devices often remain a major bottleneck in systems due to their relatively slow speed. Thus, user-space I/O services, such as file systems and block layer, might see significantly lower relative overhead than any other OS services. In this paper we examine the reality of a partial return of the microkernel architecture-but for I/O subsystems only. We observed over 100 user-space file systems have been developed in recent years. However, performance analysis and careful design of user-space file systems were disproportionately overlooked by the storage community. Through extensive benchmarks we present Linux FUSE performance for several systems and 45 workloads. We establish that in many setups, FUSE already achieves acceptable performance but further research is needed for file systems to comfortably migrate to user space.</p>
			</abstract>
		</profileDesc>
	</teiHeader>
	<text xml:lang="en">
		<body>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="1">Introduction</head><p>Modern general-purpose OSes, such as Unix/Linux and Windows, lean heavily towards the monolithic kernel architecture. In the 1980s, when the monolithic kernel approach became a development bottleneck, the idea of microkernels arose <ref type="bibr" target="#b0">[1,</ref><ref type="bibr" target="#b14">15]</ref>. Microkernels offer only a limited number of services to user applications: process scheduling, virtual memory management, and InterProcess Communication (IPC). The rest of the services, including file systems, were provided by user-space daemons. Despite their benefits, microkernels did not succeed at first due to high performance overheads caused by IPC message copying, excessive number of system call invocations, and more.</p><p>Computational power has improved significantly since 1994 when the acclaimed Mach 3 microkernel project was officially over. The 1994 Intel Pentium performed 190 MIPS; the latest Intel Core i7 achieves 177,000 MIPS-almost 1,000× improvement. Similarly, cache sizes for these <ref type="bibr">CPUs increased 200× (16KB vs. 3MB)</ref>. A number of CPU optimizations were added to improve processing speeds, e.g., intelligent prefetchers and a special syscall instruction. Finally, the average number of cores per system is up from one to dozens.</p><p>At the same time, three factors dominated the storage space. First, HDDs, which still account for most of the storage devices shipped, have improved their performance by only 10× since 1994. Second, dataset sizes increased and data-access patterns became less predictable due to higher complexity of modern I/O stack <ref type="bibr" target="#b18">[19]</ref>. Thus, many modern workloads bottleneck on device I/O; consequently, OS services that involve I/O operations might not experience as high performance penalty as before due to CPU-hungry IPC. However, the third factor-the advent of Flash-based storage-suggests the contrary. Modern SSDs are over 10,000× faster than 1994 HDDs; consequently, OS I/O services might have added more relative overhead than before <ref type="bibr" target="#b4">[5]</ref>. As such, there is no clear understanding on how the balance between CPU and storage performance shifted and impacted the overheads of user-space I/O services.</p><p>In the 90s, Liedtke et al. demonstrated that by carefully designing and implementing a microkernel with performance as a key feature, microkernel overheads could be reduced significantly <ref type="bibr" target="#b6">[7]</ref>. Alas, this proof came too late to impact server and desktop OSes, which comfortably settled into the monolithic approach. Today, microkernels such as the L4 family are used widely, but primarily in embedded applications <ref type="bibr" target="#b9">[10]</ref>. We believe that the same techniques that allow L4 to achieve high performance in embedded systems can be used to migrate I/O stack in general-purpose OSes to user space.</p><p>File systems and the block layer are two main I/O stack OS services. File systems are complex pieces of software with many lines of code and numerous implementations. Linux 3.6 has over 70 file systems, consuming almost 30% of all kernel code (excluding architecture-specific code and drivers). Software Defined Storage (SDS) paradigms suggest moving even more storage-related functionality to the OS. Maintaining such a large code base in a kernel is difficult; moving it to user space would simplify this task significantly, increase kernel reliability, extensibility, and security. In recent years we observed a rapid growth of user-space file systems, e.g., over 100 file systems are implemented using FUSE <ref type="bibr" target="#b17">[18]</ref>. Initially, FUSE-based file systems offered a common interface to diverse user data (e.g., archive files, ftp servers). Nowadays, however, even traditional file systems are implemented using FUSE <ref type="bibr" target="#b20">[21]</ref>. Many enterprise distributed file system like PLFS and GPFS are implemented in user space <ref type="bibr" target="#b3">[4]</ref>.</p><p>Despite the evident renaissance of user-space file sys-tems, performance analysis and careful design of FUSElike frameworks were largely overlooked by the storage community. In this position paper, we evaluate userspace file system's performance. Our results indicate that for many workloads and devices user-space file systems can achieve acceptable performance already now. However, for some setups, the FUSE layer still can be a significant bottleneck. Therefore, we propose to jumpstart research on user-space file systems. Arguably, with a right amount of effort, the entire I/O stack, including block layers and drivers, can be effectively moved to user space in the future.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2">Benefits of User-Space File Systems</head><p>Historically, most file systems were implemented in the OS kernel, excluding some distributed file systems that needed greater portability. When developing a new file system today, one common assumption is that to achieve production-level performance, the code should be written in the kernel. Moving file system development to user space would require significant change in the community's mindset. The benefits must be compelling: low overheads if any and significantly improved portability, maintainability, and versatility. Development ease. The comfort of software development (and consequently its speed) is largely determined by the completeness of a programmer's toolbox. Numerous user-space tools for debugging, tracing, profiling, and testing are available to user-level developers. A bug does not crash or corrupt the state of the whole system, but stops only a single program; this also often produces an easily debuggable error message. After the bug is identified and fixed, restarting the file system is as easy as any other user application. Programmers are not limited to a single programming language (usually C or C++), but can use and mix any programming and scripting languages as desired. A large number of useful software libraries are readily available. Reliability and security. By reducing the amount of code running in the kernel, one reduces the chances that a kernel bug crashes an entire production system. In recent years, malicious attacks on kernels have become more frequent than on user applications. As the main reason for this trend Kermerlis et al. lists the fact that applications are better protected by various OS-protection mechanisms <ref type="bibr" target="#b8">[9]</ref>. Counter-intuitively then, moving file system code to the user space makes them more secure. Portability. Porting user-space file systems to other OSes is much easier than kernel code. This was recognized by some distributed file systems, whose clients often run on multiple OSes <ref type="bibr" target="#b19">[20]</ref>. E.g., if file systems were written in user space initially, Unix file systems could have been more readily accessible under Windows.</p><p>Performance. The common thinking that user-space file systems cannot be faster than kernel counterparts mistakenly assume that both use the same algorithms and data structures. However, an abundance of libraries is available in the user space, where it is easier to use and try new, more efficient algorithms. For example, predictive prefetching can use AI algorithms to adapt to a specific user's workload; cache management can use classification libraries to implement better eviction policies. Porting such libraries to the kernel would be daunting.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3">Historical Background</head><p>The original microkernel-based OSes implemented file systems as user-space services. This approach was logically continued by the modern microkernels. E.g., GNU Hurd supports ufs, ext2, isofs, nfs, and ftpfs file servers <ref type="bibr" target="#b7">[8]</ref>. In this case, implementing file systems as user processes was just a part of a general paradigm. Starting from the 1990s, projects developing userspace file systems as part of monolithic kernels began to appear. These endeavors can be roughly classified into two types: specialized solutions and general frameworks. The first type includes the designs in which some specific file system was completely or partially implemented in the user space, without providing a general approach for writing user-space file systems. E.g., Steere et al. proposed to move Coda file system's cache management-the most complex part of the systemto the user space <ref type="bibr" target="#b16">[17]</ref>. Another example of a specialized solution is Arla-an open source implementation of AFS <ref type="bibr" target="#b19">[20]</ref>. Only 10% of Arla's code is located in the kernel which allowed it to be ported to many OSes: Solaris, FreeBSD, Linux, AIX, Windows, and others.</p><p>The second type of solutions-general solutionsinclude the designs that focus explicitly on expanding OS functionality by building a full-fledged frameworks for creating user-space file systems <ref type="bibr" target="#b1">[2,</ref><ref type="bibr" target="#b2">3,</ref><ref type="bibr" target="#b11">12]</ref>. The original intention behind creating such frameworks was to enable programs to look inside archived files, access the remote files over FTP, and similar use cases-all without modifying the programs. Over time, however, it became clear that there were many more use cases for the user-space file system frameworks. E.g., one can extend a functionality of an existing file system by stacking a user-space file system on top. Lessfs and SDFS add deduplication support to any file system this way <ref type="bibr" target="#b10">[11,</ref><ref type="bibr" target="#b15">16]</ref>. In recent years, some traditional diskbased file systems were ported to user space <ref type="bibr" target="#b12">[13,</ref><ref type="bibr" target="#b20">21]</ref>.</p><p>It became evident that good support for user-space file systems is needed in the kernel. The Linux FUSE project <ref type="bibr" target="#b17">[18]</ref> was a spin-off of AVFS <ref type="bibr" target="#b2">[3]</ref> and is currently considered a state of the art in the field. It was merged to Linux mainline starting in version 2.6.14 in 2005. Soon afterwards, FUSE was ported to almost every widely used general purpose OS: FreeBSD, NetBSD, Mac OS X, Windows, Solaris, and Minix.</p><p>Since FUSE was merged in the kernel mainline more than a hundred file systems were developed for it. For comparison, for 23 years of Linux development, about 70 file systems were developed-at a rate of about four times slower than with FUSE. Despite FUSE's rapid adoption, there were few systematic studies on FUSE performance. In fact, to the best of our knowledge, there is only one study and it mainly examined FUSE Java Bindings performance <ref type="bibr" target="#b13">[14]</ref>. With this paper we hope to increase the community discussion about the feasibility of moving file system and potentially the entire I/O stack development to the user space, as well as increase the effort for this migration.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4">User-Level File System Designs</head><p>General design options. Practical user-space file system design should not require application changes or recompilations. One can use library preloading to override default library calls, such as open() and read(). AVFS uses this method but its practicality is limited to the applications that access file system through shared libraries <ref type="bibr" target="#b2">[3]</ref>. Another way is to have an in-kernel component that emulates an in-kernel file system but in reality communicates with a user-space daemon. Earlier works used distributed file system clients, such as NFS, Samba, and Coda, to avoid kernel modifications <ref type="bibr" target="#b11">[12]</ref>. The user had to run a local user-space file system server that was modified to perform the required tasks, but this added unnecessary network stack overheads. So, creating an optimized in-kernel driver was the next logical option. FUSE design. Although FUSE is generally associated with Linux, its ports exist in many modern OSes. High-level design is the same on all platforms <ref type="figure" target="#fig_0">(Fig- ure 1)</ref>. FUSE consists of an in-kernel driver and a multithreaded user space daemon that interacts with the driver using a FUSE library. The driver registers itself with the Virtual File System (VFS) kernel layer as any other regular kernel-based file system. For the user it looks like another file system type supported by the kernel, but in fact it is a whole family of FUSE-based file systems.</p><p>Applications access FUSE file systems using regular I/O system calls. The VFS invokes the corresponding inkernel file system-FUSE driver. The driver maintains an in-kernel request queue, which is read by the threads of the user-space daemon. The daemon implements the main file system logic. Often, the daemon has to call system calls to perform its tasks. E.g., for a write, a FUSEbased file system might need to write to an underlying file or send a network packet to a server. When request processing is completed, the daemon sends replies along with the data back to the driver. User-to-kernel and kernel-to-user communications cause the main overheads in FUSE. To reduce the number of such communications, current FUSE implementations typically support a cache. If a read comes from an application and the corresponding data was already previously read and cached in the kernel, then no communication with the user space is required. Starting from Linux 3.15 write-back cache is supported as well. Another common optimization implemented in FUSE is a zero-memory copying for moving the data. <ref type="figure" target="#fig_0">Fig- ure 1</ref> demonstrates that in a na¨ıvena¨ıve implementation, the data often needs to cross the user-kernel boundary twice. To avoid that, advanced implementations use the splice functionality to copy or remap pages right in the kernel, without copying them to the user space.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5">Evaluation</head><p>We describe our experiments and results in this section. Experimental setup. Performance degradation caused by FUSE depends heavily on the speed of underlying storage. To account for this we used three setups with different storage devices. The HDD setup used a Dell PowerEdge R710 machine with a 4-core Intel Xeon E5530 2.40GHz CPU. File systems were deployed on top of a Seagate Savvio 15K.2 disk drive (15KRPM, 146GB). The Desktop SSD setup used the same machine but file systems were deployed on Intel X25-M 200GB SSD. Finally, the Enterprise SSD <ref type="table">setup 0   25   50   75   100   125   150   file-rread-4KB-1th  file-rread-32KB-1th  file-rread-128KB-1th  file-rread-1MB-1th  file-rread-4KB-32th  file-rread-32KB-32th  file-rread-128KB-32th  file-rread-1MB-32th  file-rwrite-4KB-1th  file-rwrite-32KB-1th  file-rwrite-128KB-1th  file-rwrite-1MB-1th  file-rwrite-4KB-32th  file-rwrite-32KB-32th  file-rwrite-128KB-32th  file-rwrite-1MB-32th  file-sread-4KB-1th  file-sread-32KB-1th  file-sread-128KB-1th  file-sread-1MB-1th  file-sread-4KB-32th  file-sread-32KB-32th  file-sread-128KB-32th  file-sread-1MB-32th  file-swrite-4KB-1th  file-swrite-32KB-1th  file-swrite-128KB-1th  file-</ref>  was deployed on an IBM System x3650 M4 server equipped with two Intel Xeon CPUs (8 cores per CPU) and Micron MTFDDAK128MAR-1J SSD. We limited the amount of RAM available to the OS to 4GB in all setups to trigger accesses to non-cached data easier. The machines ran the CentOS 7 distribution, vanilla Linux 3.19, and libfuse commit 04ad73 dated the 2015-04-02.</p><p>We selected a set of micro workloads that covers a significant range of file system operations: sequential and random I/O, reads and writes, data-and meta-dataintensive workloads, single-and multi-threaded workloads, and used a variety of I/O sizes. All workloads were encoded using the Filebench Workload Model Language <ref type="bibr" target="#b5">[6]</ref>. In addition, we ran three macro-workloads provided by Filebench: Web-, Mail-, and File-servers. <ref type="table">Table 1</ref> details our workload notations. All workloads, except files-create, files-read, files-delete, Web-, Mail-, and File-server were ran with 4KB, 32KB, 128KB, and 1MB I/O sizes. For files-read and files-create the I/O size was determined by the file size, 4KB. Web-, Mail-, and File-server are macro workloads for which I/O sizes and thread counts are dictated by Filebench. File-rread, file-rwrite, file-sread, files-create, files-read, and filesdelete were executed for 1 and 32 threads. We did not run file-swrite for 32 threads, as such workload is less common in practice.</p><p>All experiments ran for at least 10 minutes and we present standard deviation on all graphs. To encourage reproducibility and further research, we published the details of the hardware and software configurations, all Filebench WML files, benchmarking scripts, and all raw experimental results here: https://avatar.fsl.cs. sunysb.edu/groups/fuseperformancepublic/.</p><p>FUSE. To estimate FUSE's overhead, we first measured the throughput of native Ext4. Then we measured the throughput of a FUSE overlay file system deployed on top of Ext4. The only functionality of the overlay file system is to pass requests to the underlying file system. We refer to this setup as FUSE-Ext4. Note that this setup implies that we measured higher FUSE overhead than one using a full-fledged user-space native Ext4 implementation (if it would exist).</p><p>We calculated the relative performance of FUSE-Ext4 compared to plain Ext4 for each workload. <ref type="figure" target="#fig_1">Figure 2</ref> presents the results for three different storage devices. The relative performance varied across workloads and devices-from 31% (files-create-1th) to 100%. We categorized the workloads by FUSE's relative performance into four classes. (1) The Green class includes the workloads with relative performance higher than 95%. Here, there is almost no performance penalty and such workloads are ready to be serviced by user-space file systems.</p><p>(2) The Yellow class includes the workloads with 75% to 95% relative performance. Such overheads are often acceptable given the benefits that user-space development provides. <ref type="formula">(3)</ref> The Orange class consists of workloads that performed at 25-75% of Ext4. Such overheads might be acceptable only if user-space file systems provide major benefits. And finally, (4) the Red class includes workloads that demonstrated unacceptably low performance-less than 25% of an in-kernel file system.</p><p>Interestingly, none of the workloads fall into the red class. In our experiments with earlier FUSE versions (2 years earlier, not presented in this paper) up to 10% of workloads were in the red class. FUSE performance has clearly improved over time. Moreover, for all systems, most of the workloads are in the favorable, green class.</p><p>Differences in the relative performance of storage devices and CPUs cause some workloads to perform better on one system than another. For many write-intensive workloads we see that FUSE on the desktop SSD outperforms FUSE on the enterprise SSD. It turned out that our enterprise SSD is slower for writes than the desktop SSD. Our enterprise SSD maintains a constant write latency across its lifetime, which requires limiting the rate of writes. For the desktop SSD, however, writes are faster initially, but their speed is expected to degrade over time.</p><p>Results for macro workloads (Web-, File-, and Mailserver) are probably the most important as they are closer to real-world workloads. In the SSD setups performance degraded by 2-50% while for HDD setup we did not observe any performance penalty. In this position paper we do not perform detailed analysis of FUSE overhead. Instead, the results aim to intensify research in the overlooked area that has a profound impact on all aspects of storage design.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="6">Conclusions</head><p>Modern file systems are complex software that are difficult to develop and maintain, especially in kernel space. We argue that a lot of file system development can be moved to user space in the future. Contrary to popular belief, our experiments demonstrated that for over 40 workloads, the throughput of user-space file systems has an acceptable level. Mature frameworks for writing user-space file systems are in place in many modern OSes, which opens the door for productive research. We believe that the research community should give more attention to evaluating and improving FUSE.</p></div><figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_0"><head>Figure 1 :</head><label>1</label><figDesc>Figure 1: FUSE high-level design.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_1"><head>Figure 2 :</head><label>2</label><figDesc>Figure 2: FUSE-Ext4 performance relative to Ext3 for a variety of workloads and devices.</figDesc></figure>
		</body>
		<back>

			<div type="acknowledgement">
			</div>

			<div type="references">

				<listBibl>

<biblStruct xml:id="b0">
	<analytic>
		<title level="a" type="main">Mach: A new kernel foundation for UNIX development</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Accetta</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Baron</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">W</forename><surname>Bolosky</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Golub</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Rashid</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Tevanian</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Young</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the Summer USENIX Technical Conference</title>
		<meeting>the Summer USENIX Technical Conference</meeting>
		<imprint>
			<date type="published" when="1986" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b1">
	<analytic>
		<title level="a" type="main">Extending the Operating System at the User Level: the Ufo Global File System</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><forename type="middle">D</forename><surname>Alexandrov</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Ibel</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">K</forename><forename type="middle">E</forename><surname>Schauser</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><forename type="middle">J</forename><surname>Scheiman</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the Annual USENIX Technical Conference</title>
		<meeting>the Annual USENIX Technical Conference</meeting>
		<imprint>
			<date type="published" when="1997" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b2">
	<monogr>
				<ptr target="http://avf.sourceforge.net/" />
		<title level="m">AVFS: A Virtual Filesystem</title>
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b3">
	<analytic>
		<title level="a" type="main">Plfs: A checkpoint filesystem for parallel applications</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Bent</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">G</forename><surname>Gibson</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">G</forename><surname>Grider</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">B</forename><surname>Mcclelland</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><surname>Nowoczynski</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Nunez</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Polte</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Wingate</surname></persName>
		</author>
		<idno>LA-UR 09-02117</idno>
		<ptr target="http://institute.lanl.gov/plfs/" />
	</analytic>
	<monogr>
		<title level="j">LANL</title>
		<imprint>
			<date type="published" when="2009-04" />
		</imprint>
	</monogr>
<note type="report_type">Technical Report</note>
</biblStruct>

<biblStruct xml:id="b4">
	<analytic>
		<title level="a" type="main">Moneta: A high-performance storage array architecture for next-generation, nonvolatile memories</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><forename type="middle">M</forename><surname>Caulfield</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>De</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Coburn</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><forename type="middle">I</forename><surname>Mollow</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><forename type="middle">K</forename><surname>Gupta</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Swanson</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the Annual IEEE/ACM International Symposium on Microarchitecture (MICRO)</title>
		<meeting>the Annual IEEE/ACM International Symposium on Microarchitecture (MICRO)</meeting>
		<imprint>
			<date type="published" when="2010" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b5">
	<monogr>
		<title/>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Filebench</surname></persName>
		</author>
		<ptr target="http://filebench.sf.net" />
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b6">
	<analytic>
		<title level="a" type="main">The performance of Microkernel-based systems</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">H</forename><surname>Hartig</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Hohmuth</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Liedtke</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Wolter</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Schonberg</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 16th Symposium on Operating Systems Principles (SOSP &apos;97</title>
		<meeting>the 16th Symposium on Operating Systems Principles (SOSP &apos;97</meeting>
		<imprint>
			<date type="published" when="1997" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b7">
	<monogr>
		<title/>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Gnu</forename><surname>Hurd</surname></persName>
		</author>
		<ptr target="www.gnu.org/software/hurd/hurd.html" />
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b8">
	<analytic>
		<title level="a" type="main">kGuard: lightweight kernel protection against return-to-user attacks</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">V</forename><surname>Kemerlis</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">G</forename><surname>Portokalidis</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Keromytis</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 21st USENIX Security Symposium</title>
		<meeting>the 21st USENIX Security Symposium</meeting>
		<imprint>
			<date type="published" when="2012" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b9">
	<monogr>
		<title/>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>The</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Family</surname></persName>
		</author>
		<ptr target="http://os.inf.tu-dresden.de/L4/" />
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b10">
	<monogr>
		<title/>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Lessfs</surname></persName>
		</author>
		<ptr target="www.lessfs.com" />
		<imprint>
			<date type="published" when="2012-01" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b11">
	<monogr>
		<title/>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><surname>Machek</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Uservfs</surname></persName>
		</author>
		<ptr target="http://sourceforge.net/projects/uservfs/" />
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b12">
	<monogr>
		<title/>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Ntfs-3g</forename></persName>
		</author>
		<ptr target="www.tuxera.com" />
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b13">
	<analytic>
		<title level="a" type="main">Performance and extension of user space file systems</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Rajgarhia</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Gehani</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">25th Symposium On Applied Computing</title>
		<imprint>
			<date type="published" when="2010" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b14">
	<analytic>
		<title level="a" type="main">Accent: A communication oriented network operating system kernel</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><forename type="middle">F</forename><surname>Rashid</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">G</forename><forename type="middle">G</forename><surname>Robertson</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. 8th Symposium on Operating Systems Principles</title>
		<meeting>8th Symposium on Operating Systems Principles</meeting>
		<imprint>
			<date type="published" when="1981" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b15">
	<monogr>
		<title/>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Opendedup</surname></persName>
		</author>
		<ptr target="www.opendedup.org" />
		<imprint>
			<date type="published" when="2012-01" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b16">
	<analytic>
		<title level="a" type="main">Efficient user-level file cache management on the sun vnode interface</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Steere</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Kistler</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Satyanarayanan</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the Summer USENIX Technical Conference</title>
		<meeting>the Summer USENIX Technical Conference</meeting>
		<imprint>
			<date type="published" when="1990" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b17">
	<monogr>
				<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Szeredi</surname></persName>
		</author>
		<ptr target="http://fuse.sourceforge.net" />
		<title level="m">Filesystem in Userspace</title>
		<imprint>
			<date type="published" when="2005-02" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b18">
	<analytic>
		<title level="a" type="main">Virtual machine workloads: The case for new benchmarks for NAS</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">V</forename><surname>Tarasov</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Hildebrand</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">G</forename><surname>Kuenning</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">E</forename><surname>Zadok</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the USENIX Conference on File and Storage Technologies (FAST)</title>
		<meeting>the USENIX Conference on File and Storage Technologies (FAST)</meeting>
		<imprint>
			<date type="published" when="2013" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b19">
	<analytic>
		<title level="a" type="main">Arla-a free AFS client</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Westerlund</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Danielsson</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the Annual USENIX Technical Conference, FREENIX Track</title>
		<meeting>the Annual USENIX Technical Conference, FREENIX Track</meeting>
		<imprint>
			<date type="published" when="1998" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b20">
	<monogr>
		<title/>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Linux</forename><surname>Zfs For</surname></persName>
		</author>
		<ptr target="www.zfs-fuse.net" />
		<imprint>
			<date type="published" when="2012-01" />
		</imprint>
	</monogr>
</biblStruct>

				</listBibl>
			</div>
		</back>
	</text>
</TEI>
