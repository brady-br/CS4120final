<?xml version="1.0" encoding="UTF-8"?>
<TEI xmlns="http://www.tei-c.org/ns/1.0" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
xsi:schemaLocation="http://www.tei-c.org/ns/1.0 /Users/atharsefid/Desktop/grobid-0.5.3/grobid-home/schemas/xsd/Grobid.xsd"
 xmlns:xlink="http://www.w3.org/1999/xlink">
	<teiHeader xml:lang="en">
		<encodingDesc>
			<appInfo>
				<application version="0.5.3" ident="GROBID" when="2020-09-29T02:34+0000">
					<ref target="https://github.com/kermitt2/grobid">GROBID - A machine learning software for extracting information from scholarly documents</ref>
				</application>
			</appInfo>
		</encodingDesc>
		<fileDesc>
			<titleStmt>
				<title level="a" type="main">Using PrêtPrêtà Voter in Victorian State elections</title>
			</titleStmt>
			<publicationStmt>
				<publisher/>
				<availability status="unknown"><licence/></availability>
				<date type="published" when="2012-07-17">July 17, 2012</date>
			</publicationStmt>
			<sourceDesc>
				<biblStruct>
					<analytic>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Craig</forename><surname>Burton</surname></persName>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Chris</forename><surname>Culnane</surname></persName>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">James</forename><surname>Heather</surname></persName>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Thea</forename><surname>Peacock</surname></persName>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Peter</forename><forename type="middle">Y A</forename><surname>Ryan</surname></persName>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Steve</forename><surname>Schneider</surname></persName>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Sriramkrishnan</forename><surname>Srinivasan</surname></persName>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Vanessa</forename><surname>Teague</surname></persName>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Roland</forename><surname>Wen</surname></persName>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Zhe</forename><surname>Xia</surname></persName>
						</author>
						<title level="a" type="main">Using PrêtPrêtà Voter in Victorian State elections</title>
					</analytic>
					<monogr>
						<imprint>
							<date type="published" when="2012-07-17">July 17, 2012</date>
						</imprint>
					</monogr>
				</biblStruct>
			</sourceDesc>
		</fileDesc>
		<profileDesc>
			<abstract>
				<p>The PrêtPrêtà Voter cryptographic voting system was designed to be flexible and to offer voters a familiar and easy voting experience. In this paper we present a case study of our efforts to adapt PrêtPrêtà Voter to the idiosyncrasies of elections in the Australian state of Victoria. The general background and desired user experience have previously been described ; here we concentrate on the cryptographic protocols for dealing with some unusual aspects of Victorian voting. We explain the problems, present solutions, then analyse their security properties and explain how they tie in to other design decisions. We hope this will be an interesting case study on the application of end-to-end verifiable voting protocols to real elections.</p>
			</abstract>
		</profileDesc>
	</teiHeader>
	<text xml:lang="en">
		<body>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="1">Introduction</head><p>End-to-end verifiable election protocols are well studied in the academic literature, but until recently have not been deployed in public elections. In 2011 the Victorian Electoral Commission (VEC) approached the PrêtPrêtà Voter team to investigate adapting the scheme to the special requirements of the Victorian parliamentary elections, which use both (single-seat) IRV and 5-seat STV 1 . The first prototypes are available at the time of writing and the development of production systems is underway. Trials on small scale * Craig Burton is at the Victorian Electoral Commission. Chris Culnane, James Heather, Steve Schneider, Sriramkrishnan Srinivasan and Zhe Xia are at the University of Surrey and are supported on the Trustworthy Voting Systems project by EPSRC grant EP/G025797/1. Thea Peacock and Peter Y. A. Ryan are at the University of Luxembourg and are supported on the SeRTVS project by FNR Luxembourg. Vanessa Teague is at the University of Melbourne and Roland Wen is at the University of New South Wales.</p><p>1 For more information on various election methods, please refer to the appendix in <ref type="bibr">[XCH + 10]</ref>.</p><p>by-elections are expected in 2013, with the goal of having the system ready for the next Victorian State election in November 2014.</p><p>The proposed protocol is universally verifiable, meaning that there are no trust assumptions for guaranteeing the integrity of the votes. <ref type="bibr">2</ref> There are probabilistic assumptions about the number of voters who audit some PrêtPrêtà Voter ballots, the number who check that their printout matches their intended vote, and the number who read the Web Bulletin Board (WBB). It also provides voters with evidence of malfeasance, assuming that they check the signature on their receipt before they leave the polling station.</p><p>Since this is a polling-station scheme, we do not address eligibility verifiability. Prevention of ballot stuffing is by existing procedural mechanisms.</p><p>The main departure from standard PrêtPrêtà Voter is the use of a computer to assist the user in completing the ballot. This necessitates trusting that device for vote privacy, which is different from standard PrêtPrêtà Voter in which the voter does not need to communicate her vote to any (encryption) device. This modification is necessary for usability, because a vote can consist of a permuted list of about 30 candidates. It seemed infeasible for a voter to fill in a PrêtPrêtà Voter ballot form without assistance. Indeed, simply filling in an ordinary paper ballot with about 30 preferences is a difficult task. About 2% of voters accidentally disenfranchise themselves by incorrectly filling in their vote. Computerised assistance is an important benefit of the project, and trusting the device for privacy seemed an almost unavoidable result of that usability advantage. <ref type="bibr">3</ref> Hence our scheme depends on stronger privacy assumptions than stan-dard PrêtPrêtà Voter. Providing privacy for complex ballots is notoriously difficult, and is further complicated by some details of Victorian elections that are described below. Our system provides privacy and receipt-freeness under reasonable assumptions about the correct randomised generation and careful deletion of secret data, and of course assuming a threshold of decryption key sharers do not collude. It does not fully defend against the "Italian Attack," or all other subtle coercion issues, but neither does the current paper-based system. We make this more precise below.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="1.1">Challenges of Victorian Voting</head><p>been completed and after observers have departed.</p><p>This system will not be responsible for all of the votes cast in the upcoming state election, so it will have to combine with existing procedures for casting and counting ordinary paper ballots. For LA and LC-ATL votes this is straightforward. However, LC-BTL votes are complicated. Even those cast on paper must be tallied electronically-in the existing system they are manually entered and then electronically tallied. The authorities then publish complete vote data to allow observers to check the count. <ref type="bibr">4</ref> Preferential elections are vulnerable to coercion through signature attacks <ref type="bibr">[DC07]</ref>, commonly referred to as Italian attacks, as discussed in Appendix A. The system proposed here does not address this attack, primarily because it will work alongside a paper system that is also susceptible to it. Our system also reveals whether a person voted ATL or BTL. This is unlikely to have political consequences.</p><p>Another challenge is producing an accesible solution for voters who cannot fill out a paper ballot unassisted. This is a primary justification for the project, but producing a truly verifiable solution for such voters is extremely difficult, because many of them cannot perform the crucial check that the printout matches their intention (though see <ref type="bibr">[CHPV09]</ref> for a verifiable and accessible protocol). We provide a way for them to use any other machine in the polling place to do the check, in which case the castas-intended property depends upon at least one of the machines in the polling station not colluding with the others to manipulate the vote.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="1.2">Related Work</head><p>In the USA, voter verifiable paper trails with auditing (VVPAT) are a common means of achieving software independence. However, this does not solve the problem of secure custody and transport of the paper trail described above. Furthermore, performing rigorous risk-limiting audits seems intractable for IRV <ref type="bibr">[MRSW11, Car11]</ref>, let alone for 30-candidate STV.</p><p>The most closely related project is the groundbreaking use of Scantegrity II in binding local government elections in Takoma Park, MD <ref type="bibr">[CCC + 10]</ref>. Our project has very similar privacy and verifiability. However, both the number of votes and the complexity of each ballot are greater for our system. Obviously we are describing a proposal for a system, while the Takoma Park project has already happened. Although the Scantegrity II scheme appears to have been highly successful in the context of the Takoma Park elections, we decided that PrêtPrêtà Voter was more appropriate than Scantegrity II for our application. Scantegrity II is inherently for single-candidate selections. It has been adapted to IRV in Takoma Park by running a separate single-candidate election for each preference, but would be difficult to adapt to 30-candidate preference lists. Even with computer assistance, a 30 by 30 grid of invisible ink bubbles seems too complicated for most voters.</p><p>Wombat <ref type="bibr">[RTsRBN]</ref>, <ref type="bibr">VoteBox [SDW08]</ref> and several other polling-station end-to-end verifiable voting schemes guarantee integrity by using "Benaloh challenges," <ref type="bibr">[Ben06]</ref> which require filling in the vote more than once. This would be time-consuming for 30-candidate STV. It would perhaps be possible to make challenges easier (for example, by letting the device remember the last vote), but the integrity guarantees still depend on the voter performing quite a subtle randomised protocol. We have opted for PrêtPrêtà Voter, in which voters may audit the unvoted ballot form. This audit is independent of the vote size and can be completed with assistance without compromising privacy. It also provides full accountability: there is no need to take the voter's word for how they voted.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="1.3">Prior work and paper overview</head><p>In a previous paper <ref type="bibr">[BCH + 12]</ref> we gave an overview of this project, including the context of Victorian voting and some ideas about how we would implement the protocol.</p><p>Here we present all of the protocol, including both the cryptographic protocol and the human procedures to be followed in the polling place and at the electoral commission. Our aim is for a comprehensive analysis of the protocol's security, including the assumptions on which privacy depends, a precise explanation of the kind of verifiability achieved, and a clear statement of the issues that remain.</p><p>The next section provides a detailed protocol description, including both human and cryptographic elements; the final section contains a preliminary threat analysis. A more comprehensive and rigorous threat analysis will be performed as the details of the design, including surrounding procedures etc, are finalised.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2">Protocol description</head><p>The main roles for computers are:</p><p>• the web bulletin board (WBB), a broadcast channel with memory,</p><p>• candidate list mixers who generate ballot information,</p><p>• candidate list key sharers who deliver ballot information to printers.</p><p>• printers who print ballots,</p><p>• electronic ballot markers (EBMs) who mark votes onto ballots,</p><p>• vote mixers who shuffle votes, and</p><p>• election key sharers who share the key used to decrypt votes at the end of the election.</p><p>In practice we will use the same set of servers for mixing and decryption, so the election key sharers will be the same as the vote mixers, and likewise the candidate-list key sharers will be the same as the candidate-list mixers. These roles are explained below.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.1">Ballot Form</head><p>The ballot form is a 240 × 120mm card with a perforation down the middle. The front face (as shown in <ref type="figure" target="#fig_0">Figure 1</ref>) lists the LA section as well as the LC-ATL section, while the back face (shown in <ref type="figure">Figure 3</ref> of Appendix A) lists the LC-BTL section. The ballot on each face is upside down with respect to the other. On both faces, the right hand side (RHS) lists the candidate/party names and the left hand side (LHS) allows the voter to mark her choices. Because both the LA and the LC-BTL sections are using ranked elections, the candidate list on the ballot for these two sections needs to be randomly permuted rather than just cyclic shifted. Otherwise, the LHS with the ranking choices will reveal too much information. For example, if adversaries know a voter's most/least favorate candidate, then they can figure out this voter's other preferences.</p><p>Each ballot has a serial number on the LHS. Moreover, in the LHS of the ballot form, there is an encrypted value, called an "onion", associated with each candidate. If an onion is properly decrypted, it will represent the corresponding candidate in the RHS. However, the onions are not directly printed on the ballot. Instead, they are recorded on the WBB, and there is a QR code on the LHS front face of the ballot to refer to the corresponding onions. On the front face of the ballot form, there is another QR code in the RHS which records the permutation of the candidate ordering of the entire ballot. Each QR code merely reproduces in machine-readable form exactly the information that is available in human-readable form on the same side of the ballot.</p><p>We now describe how the onions are constructed in different sections of the ballot form. In this paper, we usê E pk (m) to denote that m is encrypted using exponential ElGamal, and E pk (m) denotes that m is encrypted using normal ElGamal.</p><p>For the LA section, we use the Baudron counter [CFSY96, BFP + 01, BCH + 12] to encode these onions as follows: suppose there are k candidates in the LA election, we first select a value M where M &gt; k (e.g. M = k +1). Then we associate M 0 with the first candidate in the ballot draw order, M 1 with the second candidate, and so on. The onion for the i-th candidate will be encrypted using the exponential ElGamal cipher asˆEasˆ asˆE pk (M i−1 ) = (g M i−1 y r , g r ). This allows us to absorb all these onions as well as their associated preferential rankings into a single ciphertext using the homomorphic property. Hence it will speed up the tallying process.</p><p>For the LC-ATL section, we simply select a value in G q to represent each party/group name, and the onion is encrypted using the ElGamal cipher E pk (m) = (my r , g r ).</p><p>For example, if α, β, γ are values in G q to represent the parties A, B, C respectively, their corresponding onions will be E pk (α), E pk (β), E pk (γ).</p><p>For the LC-BTL section, we use the Baudron counter again to encode the onions. Suppose there are l candidates in the LC-BTL section, we select a value L where L &gt; l (e.g. L = l + 1). Then we associate L 0 with the first candidate in the ballot draw order, L 1 with the second candidate, and so on. The onion for the j-th candidate will be encrypted asˆEasˆ asˆE pk (L j−1 ) = (g L j−1 y r , g r ). However, we will show in a later section that the tallying method for this section has to be slightly different.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.2">Ballot Generation</head><p>In PrêtPrêtà Voter, privacy depends on maintaining the secrecy of the candidate order that corresponds to a particular receipt. Since a printer actually has to print both sides of the form, and hence can recognise the receipt subsequently and recall the candidate order, privacy depends on very strong assumptions about the printer's data being properly generated and destroyed. We emphasise that this affects privacy, not integrity, because the correctness of printing can be audited.</p><p>Ballot generation must satisfy two main requirements:</p><p>• The ballot's candidate ordering and the values used for encryption must be random and not generated by any single party. (Otherwise a malicious printer can use the receipt to leak information about the votes via a kleptographic attack [GKK + 06].)</p><p>• As much as feasible, the ballot's random data, and the plaintext candidate list corresponding to each RHS, must be secret.</p><p>We will use the distributed ballot generation of <ref type="bibr">[RT10]</ref>, in which the candidate list mixers successively shuffle a list of encrypted candidate names for each vote. This protocol guarantees the first condition above if at least one participant is honest. This produces a list of encrypted ballots on the WBB, each one consisting of a serial number, the list of LHS onions, and the corresponding list of encrypted candidates for the printer together with a proof of correspondence. The printers' candidate lists are encrypted under a threshold key shared across a set of candidate list key sharers, distinct from the election key sharers. Thus no individual server can obtain the cleartext candidate lists.</p><p>It is not strictly necessary to make the election key sharers and candidate list key sharers distinct. Note however that there are two distinct modes of operation here: threshold decryption for ballot printing and audit (on a per ballot basis) on the one hand, and tabulation mixing/decryption on the other (a batch operation). Even though the capabilities required are the same, it seems wise to assign these to separate entities to make mode confusion less likely.</p><p>Although some possibilities exist for distributing the printing step [ECHA09], these are not mature enough to use yet.</p><p>Printers obtain the candidate list by means of blinding <ref type="bibr">[Cha82]</ref>, using a protocol similar to that of [ZMSR05] but with the printer generating the blinding factor. We outline it as follows: to obtain a list for printing, the printer encrypts a blinding factor under the candidate list public key, and passes it, with a proof of knowledge, to the list server which combines it with the encrypted list. The resulting blinded list is decrypted and passed back to the printer, which removes the blinding factor to obtain and print the candidate list.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.3">The Voting Ceremony</head></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.3.1">Casting a vote</head><p>The voter presents herself to an official at a polling station and her name is marked off a register. The official sends the print station a request for a ballot of the appropriate LA and LC division. The print station runs the protocol with the WBB to retrieve the candidate permutation for the assigned look-up code. It then prints the ballot. It is important that no-one except the voter sees the association between the candidate order and serial number on the ballot, so printing should be private.</p><p>Check 1: Confirming ballot correctness. Once she has obtained her ballot, she should decide whether she wishes to run a confirmation check on it or use it to vote. A confirmation check, called "auditing" in previous versions of PrêtPrêtà Voter, means checking that the encrypted list of candidates on the WBB matches the plaintext candidate ordering on the RHS of the ballot. In our version the QR codes must be checked too. Ballot confirmation ensures that the ballot is well-formed and hence would correctly encode a vote. We describe the ballot confirmation procedure below in Section 2.3.2. She can repeat the ballot confirmation procedure as many times as she wants, each time obtaining a fresh ballot, until proceeding to vote using the last obtained, unaudited ballot. This implements an iterated cut-and-choose protocol: not knowing which option the voter will choose before committing to the printed ballot serves to counter any attempts by the system to manipulate votes by issuing mal-formed ballots. Confirming ballot construction necessarily reveals encryption information, so a ballot that has been confirmed should not be subsequently re-used for voting.</p><p>Assuming that she is now happy to proceed to casting her vote, the voter takes the last obtained ballot to the booth. In standard PrêtPrêtà Voter she would now proceed to fill in her preferences directly on the ballot. However, given that the LC-BTL section contains about 30 candidates, it is not reasonable to expect the voter to enter her ranking preferences using a permuted candidate list. Instead we propose to use a touch screen Electronic Ballot Marker (EBM) that will display the candidates in standard order, as previously introduced in <ref type="bibr">[BCH + 12]</ref>. The voter enters her preferences via the screen in the standard way, the EBM will take care of the permutation as we will see shortly. This means that we have to sacrifice one of the pleasing features of standard PrêtPrêtà Voter: that no device directly learns the voter's choices. This seems unavoidable for such expressive ballots if the system is to be usable.</p><p>She inserts the ballot into the EBM and selects her preferred language and can run through a training module on the machine to learn about the whole voting procedure, verification and tallying. The voter is now offered the choice of sequence in which she votes that is, the Legislative Assembly (LA) or Legislative Council ballots, and for the latter she can vote either "above the line" (ATL) or "below the line" (BTL). For the LA ballot, there is also a "how to vote card" option if she wishes. 5 Note that although the voter can vote at any polling station, the LA ballot is specific to the region in which she is registered. She must however, fill in both a LA and LC ballot and will be prompted by the EBM to ensure that she does this. 6 5 This is an opportunity for candidates to give their supporters helpful recommendations on how to arrange their other preferences.</p><p>6 Exact rules on ballot spoiling are yet to be specified. This</p><p>For each ballot (LA or LC), the EBM scans the the QR code which represents the permutation of the candidate ordering on her ballot and displays the candidates in canonical order. Once the voter enters her choices, she is asked to confirm her choices and when she does so they are overprinted on the LHS of the ballot. Note that the EBM knows the permutation on the ballot and so re-orders the voter's selection accordingly.</p><p>Check 2: EBM vote printing. The voter should check that the overprinting matches the preferences she told the EBM. Note also that the EBM can assist the voter by pointing out syntactic errors, for example, duplicate rankings etc.</p><p>Once both the LA and LC ballots are complete, the voter extracts the ballot from the EBM and separates the left and right sides of the ballot. To ensure receipt-freeness, she must insert the RHS in a disposal bin as without the candidate order on her ballot, she cannot later prove how she voted.</p><p>The voter takes the LHS to the scanner and scans both faces. The scanner submits the preferences and the look-up QR code to the WBB, which registers the vote, generates a hash value of the received information and sends the digital signature of the hash value back to the scanner. The scanner now overprints the signed hash as a further QR code onto the LHS, which can be taken away by the voter as her receipt.</p><p>Check 3: Signature. The voter can check the signature using a purpose-built smart phone app or on-site services provided by helper organisations. This must of course incorporate a check that the data signed by the WBB is the same as the data printed on the paper.</p><p>The voter is easily able to produce multiple copies of her receipt, either using a photocopier or because they are automatically printed by the scanner. This combats the "trash attack," <ref type="bibr">[BL11]</ref> and also allows others to check her recipt on the WBB.</p><p>Check 4: Receipt appears on WBB. After a given time period, the voter can use her receipt to check that the information is correctly recorded on the WBB.</p><p>is a matter of user interface: voters could easily be allowed to cast incomplete or invalid preference lists, as long as they are warned. The receipts would then reveal their decision to spoil their ballot. Alternatively, there could be a candidate called "spoiled ballot" who would be the first preference of any invalid ballot. Subsequent preferences would be meaningless, but could be filled in to make the receipt look like that of a valid vote.</p><p>We now describe the ballot confirmation process in more detail.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.3.2">Confirming ballot correctness</head><p>To perform Check 1, confirming ballot correctness, the ballot can be taken back to the printer. <ref type="bibr">7</ref> The candidate list key-sharers are asked to decrypt the candidate list directly, and to publish a proof of decryption. The WBB must also be notified that the ballot has been audited, and therefore not to accept any vote cast with that ballot form. As part of the confirmation process, a clear "AUDITED-NOT TO BE USED TO VOTE" message (which must be visible on the LHS) is printed on the ballot form.</p><p>The voter can also check the proof of decryption later on any other machine, including at home, so we are not trusting the polling-place machines for confirmation of ballot construction.</p><p>When the day's bulletin board becomes available (see Section 2.5), it shows which serial numbers were audited and displays a proof of what the candidate ordering should be. (It also shows which ones were voted and what the preferences were.)</p><p>Ensuring the mutual exclusion of audited and cast ballots is vitally important. There must be a realtime check that the same ballot is not both audited and voted. The entity that does this (which could be the printer, or the tellers, or the WBB, depending on exactly how the CTs are opened) is trusted for privacy, but not for integrity because violations are detectable.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.3.3">Resolving disputes</head><p>We have not specified exactly what happens when any of these checks fail. It is challenging in any voting system to recover from errors. A failure of check 1, 3 or 4 is immediately demonstrable (assuming Check 3 is performed on the spot in the polling place) and proves malfeasance by election authorities. This would have serious implications for the trustworthiness of the election result. It is less clear how seriously to regard a failure of Check 2. Unfortunately there will be some rate of false alarms, in which voters claim their vote was misrecorded when they simply misremembered it or changed their minds. Hence a zero-tolerance policy is unworkable, even though any tolerance increases the chances for vote manipulation. Whatever the level of tolerance, it is important that ballots spoiled in this way remain secret, or the process can introduce opportunities for coercion.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.4">The Voting Ceremony-the case for vision impaired voters</head></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.4.1">Casting a vote</head><p>We assume that the vision-impaired voter has registered at a polling place and had her name marked off. The voter should be able to print her ballot by following the procedure documented in the previous section, assuming that the printing device is accessible. As before, printing needs to be private to ensure confidentiality of the RHS. Notice <ref type="figure" target="#fig_0">(Figure 1</ref>) that the slip has a clipped corner on the lower LHS. This is to assist correct insertion into the device for overprinting, as described shortly.</p><p>The vision impaired voter takes the slip to an Electronic Ballot Marker (EBM). At the EBM, she inserts the slip, clipped corner first. The system is set so that she has an audio-only session in her preferred language and the touch screen is laid out like a keypad. For example, the four corners when touched render 1, 3, * and #, the middle top and bottom give 2 and 0, and so on.</p><p>The session is similar to the one described previously in Section 2.3 in that the voter has to fill in ballots for her LA and LC (ATL/BTL) votes, but this time she indicates her choices by touching the appropriate parts of the screen and has voice prompts to guide her. When she had filled in all required parts of the slip, she is given a voice confirmation of her vote choices and if she agrees with them, she can finish the voting part of the ceremony by touching the designated part of the screen.</p><p>She then inserts the form into the device which overprints her choices on the LHS of the slip.</p><p>This voter is unable to perform by sight the crucial check that the overprinted values match her intended vote. Hence she may take her form (with both sides still joined) to another EBM 8 which scans the RHS QR code and the printed preferences, and reads her vote back to her. In this case we are trusting for <ref type="bibr">8</ref> This represents the ideal scenario. In practice it may be too hard to equip every EBM with an OCR enabled scanner, so we may have to either use the ballot-submission scanner for this purpose, or use a dedicated machine. Using the ballotsubmission scanner is not ideal because it is online, so should preferably not learn the contents of votes. Of course, the voter could also ask for assistance from a sighted person, but that would compromise her privacy and defeat most of the purpose of using this system. integrity that she can find at least one EBM in the polling place that does not collude with the first one she used.</p><p>By this point we can be confident that the printed preferences match the voter's intentions. She then separates the two sides of the slip down the lengthwise perforation and destroys the RHS. As before, the LHS is scanned and the WBB returns a signed hash of the vote information which is printed on the receipt.</p><p>The EBMs could also speak the preference orders on the slip so the voter can note them down (with a blind note-taker device or with memory), and likewise the ScanStation could speak the numbers it reads and submits. This helps the voter to check the ScanStation unassisted but does not really affect privacy or verifiability because she must still check that her vote is printed as she requested, and recorded on the WBB as it is printed, rather than trusting the EBM and scanner to tell her the truth. She could do the WBB check with assistance from a print reader or from a sighted person without jeopardising privacy.</p><p>Note that the only steps that need to be private are the mark-up by the EBM and check with a second EBM. All the other verification steps: confirmation of the ballot, confirmation of the receipt signature and of correct posting of the receipt to the WBB can be performed with assistance without jeopardising ballot privacy.</p><p>If she has performed a confirmation check on a ballot, the voter can still go home and use her screenor print-reader, with the same confirmation-checking software as everyone else, to make sure her candidate list matches the onion. The only important detail is that she has to make sure she knows what the cleartext candidate order is. She must either ask several people or use (a) print reader(s). Neither of these impacts upon privacy: there are no privacy implications for anyone in confirming ballots.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.5">The Web Bulletin Board</head><p>A number of voting schemes require some form of append-only Web Bulletin Board (WBB). However, specific details of how to design or implement such a service are often lacking. In this section we do not aim to propose a generic WBB, only to define one that will work within the constraints we have and offer the properties we need. We will approach the problem from a pragmatic point of view and rather than try and define a service that provides the properties itself, we will define a process that provides the same assurances. The fundamental requirements we have of a WBB are</p><p>• that every observer gets the same information, and</p><p>• that the data written to it cannot be changed or deleted without detection.</p><p>We assume that when the voter submits their choices to the WBB, the WBB creates a digital signature of the choices and returns it to the voter. The voter then checks the validity of the signature and that the contents match the choices that were submitted. Initially we will only discuss a single WBB, we will discuss later how this creates a robustness assumption, but does not directly impact on integrity. Unlike some previous proposals for a WBB, the WBB we utilise will not be accessible to the public during the run of the election. At the close of the election the WBB commits to its contents by constructing a hash of it and digitally signing it. This hash is then distributed to public organisations and media outlets. At this point all the data is also accessible and those organisations are free to verify that the hash is correct and the signature is valid. Likewise, a voter is free to perform those checks should they wish to. Following this commitment the WBB becomes accessible to the public for them to verify the receipts they have and check that their votes are included in the hash.</p><p>If an adversary, or even the WBB itself, attempts to delete or modify the data following the commitment it will be detected when the hash values do not match. If an attempt is made to delete or modify the data prior to the commitment it will be detected when the voters verify their receipts on the WBB. A key point here is that information cannot be removed from the WBB after a voter has checked that it is present. It is worthwhile noting that this assumes a significant enough number of people do verify their receipts. We do not have to trust the WBB for integrity or privacy. We do have an assumption that the WBB is robust. The loss of data would potentially result in the election having to be re-run. Due to the nature of the election, and the early voting phase lasting two weeks, we need to address the practicality of the WBB running for that period and the reasonableness of asking voters to wait two weeks to check their vote on the WBB. To mitigate against this problem we will make a commitment of the contents of the WBB on a nightly basis. This will allow the WBB to potentially be shutdown and maintained overnight when no voting is taking place.</p><p>It additionally allows voters to check the presence of their vote, in the committed list, at most 24 hours after they cast their vote. From an abstract point of view this can be thought of as if we have an individual WBB for each day and the votes submitted to the mix-net are the combination of all the WBBs, which can be verified via the previously made commitments.</p><p>Similarly, it may be impractical to expect voters to download the entire WBB contents in order to recompute the hash. This could easily be addressed by generating a hash tree and publishing the root, then giving each individual their list of neighbours. They would recompute the hashes along their branch and this would demonstrate the inclusion of their vote.</p><p>The WBB will be in operation prior to the start of voting, in order for generated ciphers and various audit data to be submitted and stored on it in preparation for the election. It seems sensible for the WBB to make an initial commitment, prior to the start of the election, which can then be used to verify that the lookup data and ciphers have remained on the WBB throughout.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.5.1">Further work</head><p>As we mentioned above, with a single WBB we are making a robustness assumption and are particularly dependent on voters checking their receipts on the WBB, neither of which is ideal. We have investigated a number of different approaches and present one possible approach here. To improve the robustness we could construct a distributed, peered, WBB. It will operate almost identically to the single WBB except the digital signature will be a threshold signature. When a vote is submitted to the WBB it is sent to all peers simultaneously. Each peer constructs its individual share of the signature and distributes it to the other peers. Once a peer has the threshold number of signature shares it can combine them and return it to the voter on their receipt. This improves the robustness assumption, since we no longer need to assume a single machine remains online and intact, we just need to assume a threshold number of peers remain intact. Due to the redundancy in the data it may also be possible to bring a peer back online following an attack or failure and for that peer to be able to verify it has a valid copy of the data.</p><p>Whilst having a peered WBB does not directly change the integrity assumptions, it may impact on the assumptions the voter ends up having. To this degree the assumptions the voter has to make reduce, the more work they do:</p><p>1. If the voter casts their ballot and does not check the receipt or signature they have an integrity assumption on the equipment in the polling station and the WBB.</p><p>2. If the voter verifies their receipt in the polling station they have an integrity assumption on the WBB.</p><p>3. If the voter checks the WBB later on they are free from any integrity assumption.</p><p>The obvious question is whether voters would undertake step 3 in significant numbers or not. As such, we can improve the assumption in step 2 by distributing the trust the voter has in the WBB amongst multiple peers. So from a practical point of view there may be a security benefit to peering the WBB, purely because voters are unlikely to utilise the full verifiability on offer.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.6">Vote tabulation, decryption and export</head><p>Votes are marked on the WBB with the day and polling place they were cast (or confirmed). Poll workers must check that the number of votes recorded each day matches the number of people who submitted ballots to be scanned. After all votes are received, there will be two types of votes on the WBB: one containing rankings in the LA section and a single choice in the LC-ATL section, and the other containing rankings in both the LA section and the LC-BTL section. For all these votes, the LA section will be tallied together, but the ATL votes and BTL votes will be tallied separately.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.6.1">LA + LC-ATL pre-processing</head><p>We take the approach described in <ref type="bibr">[BCH + 12]</ref> to processing the votes. The first type of votes are illustrated in <ref type="figure">Figure 2</ref>, where r 1 , r 2 , . . . , r k are the ranking preferences in the LA section (note that the columns might be in different orders, but the tallying method will not be affected):</p><p>For the above received vote, the onions and their corresponding rankings in the LA section can be packed into a single ciphertext using the homomorphic property as:</p><formula xml:id="formula_0">ˆ E pk (m) = k i=1ˆE i=1ˆ i=1ˆE pk (M i−1 ) ri where m = k i=1 (r i × M i−1 )</formula><p>. Moreover, for the LC-ATL section, the onion next to the voter's mark E pk (β) will be picked out.</p><p>LC-BTL votes are preprocessed similarly to LA votes, except that instead of turning 38 preferences into one ciphertext we pack the first t preferences into one ciphertext, then the next t in to a second ciphertext and so on. Using t = 6 is about the right tradeoff between reducing data size and reducing discrete log (dlog) lookup time. </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.6.2">Mixing and tallying the votes</head></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.7">Timing analysis</head><p>At the core of the implementation is the Verificatum Mix-net [Wik12] developed by Douglas Wikstrom. Verificatum offers both fast and optimised mixing and decryption as well as efficient proofs. The details of this implementation and the interface between Verificatum and PrêtPrêtà Voter are described in Appendix B. Here we give an estimate of the computation time required for mixing and decrypting the votes. The estimate excludes ballot generation, but includes setting up the mixnet, generating the distributed key shares, mixing the votes, and distributed decrypting with discrete log lookup. We assume one mixnet for each of LA, LC-ATL and LC-BTL, with LC-BTL votes packed as described in Section 2.6.</p><p>The timings provided are based on the demo mixnet settings provided in Verificatum. As such, this consists of three mix servers with a threshold of two. The threshold impacts on both the mixing and decryption phase. For decryption it refers to the minimum number of mix servers that must be online in order to successfully decrypt. If all mix servers are online then all mix servers will be used during decryption. For mixing this refers to the number of mix servers that will perform an actual mix. Thus, <ref type="figure">Figure 2</ref>: LA + LC-ATL votes the first two mix servers will perform a mix, but the third will not. Therefore the timings given below for mixing are for two mix servers, whilst the decryption is for three. In practice we are likely to use more mix servers and a higher threshold. These estimates have been extrapolated from our testing on Intel Core i7 machines with 8GB RAM and 1TB Hard Disks. The timings are meant as a guide rather than scientifically significant evaluations of time complexity.</p><formula xml:id="formula_1">LA LC-ATL OnionˆE Onionˆ OnionˆE pk (M 0 ) ˆ E pk (M 1 ) . . . ˆ E pk (M k−1 ) E pk (α) E pk (β) E pk (γ) Marking r 1 r 2 . . . r k X</formula><p>The timings are based on a hypothetical district of 100,000 votes. Most of the timings scale linearly as the size of the election changes. Where that is not the case we will explicitly state it. Unless otherwise stated the timings are given in milliseconds. We have estimated an election with 38 candidates and 8 parties, with 10% of votes being BTL and 90% ATL. These details are summarised in <ref type="table" target="#tab_1">Table 1</ref>.   <ref type="table" target="#tab_2">Table 2</ref> shows the timings for our example election. The time for Cipher Generation is clearly the largest.</p><p>One of the reasons this is so large is the requirement to generate enough BTL ciphers for everyone to vote BTL if they wish. We pre-compute the ciphers and commit them to the WBB before the start of the election. As such, we cannot generate new ballots on the fly. This dramatically increases the amount of encryption that is required during the cipher generation because we are producing 46 ciphers per ballot.</p><p>It is clear to see that the mixing and decryption of the ATL vote is quite quick. The mixing of the BTL votes looks equally efficient, however, it should be remembered that we assume only 10% of the vote will be BTL. The efficiency saving of packing the votes is a factor of 6, without which it would be infeasible to handle such a large number of candidates in the required time. The DL Lookup (Discrete Log Lookup) is extremely quick. This is based on looking up a precomputed and sorted table. The demo table handles a packing of 6 ciphers in 38 and took approximately 15 hours to generate and sort, and is 29GB in size. The fast lookup time is achieved through optimised memory and disk caching. We believe the time could improved even further were we to use Solid State Drives instead of standard hard disks. The lookup can also be performed in parallel and distributed across multiple machines if required.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3">Security Analysis</head><p>For reasons of space we focus here on the principal threats, particularly with respect to the key requirements of integrity and privacy.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.1">Security Guarantees of the protocol</head></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.1.1">Integrity for sighted voters</head><p>The protocol makes no trust assumptions for integrity, apart from trusting that each eligible voter is allowed to cast at most one vote, and that only eligible voters can vote. It does of course rely on voters to perform some checks, which are detailed in Section 2.3. Invalid ballots, in which the candidate list doesn't match the onion, are detected at ballot confirmation by Check 1. Check 2 detects incorrect vote printing by the EBM. Vote substitution by the scanner before WBB submission is detected by Check 3. Check 4 detects vote substitution by the WBB. Incorrect mixing or decryption would be detected because the proofs of correct mixing and decryption are public.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.1.2">Receipt freeness and privacy</head><p>Privacy depends on the assumption that at least one mix server generates randomness correctly and keeps it secret. This applies to randomness used in both ballot construction and tallying. Further, that a threshold set of those who share the keys is honest. Provided that the two assumptions hold, the system has some defence against kleptographic attacks on the receipt <ref type="bibr">[GKK + 06]</ref>. This is because the receipt's random data is generated in a distributed way, and the entities that do the printing (the printer and the EBM) are deterministic. Thus information cannot be leaked in the ballot data itself, though it could be subtly leaked in slight font changes or other printing effects.</p><p>There is privacy of the contents of each receipt, meaning that the tallying protocol does not add any information about the link between a receipt and its vote, except whether it was ATL or BTL. The system is also receipt-free, meaning that the receipt itself does not allow a person to prove how she voted.</p><p>(However, there are coercion attacks on this protocol, including the "Italian attack," which are described in Section 3.3).</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.1.3">Integrity in the case of vision-impaired voters</head><p>The vision-impaired voter is unable to do Check 2, that the EBM printed the correct ballot. She cannot ask for human assistance without destroying privacy. This leads to a distribution of trust over the machines in the polling place: she can check her vote on as many machines as she likes, and must assume that at least one of the machines she uses is honest.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.2">Threats Ameliorated By Procedural Controls</head></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.2.1">Integrity</head><p>There is potential for ballot stuffing by authenticated parties. For example, the scanner and the WBB can both submit ballots that did not originate with voters. This is mitigated by the pollworkers reconciling the WBB against the list of attendees as described in Section 2.6. Procedures must prevent voters from taking someone else's ballot off the printer and hence voting in the wrong division.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.2.2">Privacy</head><p>As the voter inputs her choices into the EBM, the device necessarily "learns" how she voted. The potential for the EBM to leak vote information clearly raises privacy issues.</p><p>Possible countermeasures are to ensure that the EBM is "stand alone" and offline at least during the voting phase and is therefore unable to communicate vote information to other colluding entities. Any data stored in the EBM's memory should be deleted, ideally after each session, but at least before the EBM goes back on-line if this is required for any reason.</p><p>PrêtPrêtà Voter introduces a privacy threat that does not exist for either standard paper voting or for DRE's with VVPAT: someone may discover and record an unvoted ballot's candidate order and look up code, then learn the vote choices when they are later posted on the WBB. Therefore there should be procedural controls to protect both the paper printout and the electronic data on the printer from observation by anyone but the voter.</p><p>The threat of using the confirmation process to expose the contents of a ballot that has been voted on is ameliorated by the electronic locking process described in Sec 2.3.2.</p><p>Note that the EBM does not learn the look up code or the onion, so it cannot align votes with receipts unless the preference ordering is unique (which unfortunately, with 30 candidates is possible).</p><p>As voters may ask for assistance at any point during the ceremony, there is still a chance that an official may make a connection between candidate order and look-up code. This threat to privacy however, exists in the current system.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.3">Threats Remaining: general voting ceremony</head><p>We now discuss remaining threats to the system.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.3.1">The general voting ceremony</head><p>An analysis of the system was carried out by a walkthrough, assessing the potential for known threats against actions required of the voter, officials and machinery and the interactions between them [KSW05, RP05]. There are possible threats to coercion, such as forced randomisation, where a coercer demands the ballot to be filled out in a particular order, effectively producing a random vote. For FPTP elections, the voter could keep confirming ballots until she finds one that satisfies the coercer, at the same time allowing her to vote as she wishes. This is infeasible in complex voting systems such as this, though it might let the voter choose her first preference. Coercion to vote above the line is possible, but unlikely to have any political consequences. We have already mentioned the"Italian attack". Although this exists in the current system, it is perhaps exacerbated by publishing the vote, rather than releasing it only to a small number of trusted organisations, which is current practice.</p><p>The possibility exists for an official to learn voter's choice if she asks for assistance in the booth.</p><p>If the voter leaves the polling place with the RHS of her voting slip, she could prove how she voted. This problem in PrêtPrêtà Voter has already been noted. Unfortunately, having dummy and discarded RHS freely available at the polling station as previously suggested, will not work here. With preference voting, especially with a large number of preferences and if the attacker demands an unusual ranking, there is only a tiny chance that a coerced voter will find a suitable RHS among the dummy/discarded slips.</p><p>It is important that destruction of the RHS is enforced, and that the voter does this before she leaves the privacy of the booth. Even then, there is still a possibility she may capture her RHS on a mobile device.</p><p>A possible alternative is to provide facilities for voters to generate "pseudo" RHS's. A coercer would not then be able to rely on the voter's complicity. Admittedly, this adds further complexity to the system, and is not being actively considered for the VEC system.</p><p>"Psychological" attacks are a potential threat. As an example, a coercer manages to convince voters that he is able to decrypt their receipts and find out how they voted <ref type="bibr">[RP05]</ref>. Voter education could mitigate this attack; however psychological attacks will be a problem for virtually any end-to-end verifiable system.</p><p>Chain voting is a possibility in PrêtPrêtà Voter, including this version. This problem exists already in the ordinary paper voting system, and is not regarded by the VEC as a significant threat.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.3.2">The case of the vision impaired voter</head><p>In addition to the previously noted threats, a vision impaired voter may be vulnerable to an eavesdropper learning her choice if the audio feature is faulty/corrupt. There is a greater risk of an official learning the voter's choice. Arguably, a vision impaired voter is more likely to ask for assistance during the ceremony. There is greater trust in the machinery performing as intended than for sighted voters. A blind voter will be relying on voice prompts to perform the ceremony correctly. There are no easy solutions to these problems and again, security has to be offset against system requirements.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.4">Other issues</head><p>We finally draw attention to other positive properties of the system.</p><p>There is robustness against less than a threshold of authorities stopping the protocol. This ensures that a result will always be output. The mix servers do not need any secret information to do the shuffle. Hence if some of them are absent or refuse to perform the shuffle, they can simply be replaced or even ignored. The threshold of honest tellers ensures decryption will always be properly carried out. The robustness assumption for the WBB should also be addressed by distributed implementation.</p><p>There is accountability for receipt misrecording. Voter checking of the signature on their receipts in the polling place should detect malicious behaviour on the part of the scanner or WBB. Finally, the system provides evidence of malfeasance: if the voter has a properly-signed receipt that does not appear on the WBB, she can prove it.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4">Conclusion</head><p>One lesson from our attempt to adapt PrêtPrêtà Voter to a real election is that not all issues can be perfectly addressed in a way that retains usability and computational feasibility. This system has unconditional integrity but does introduce some coercion possibilities that do not exist for paper voting. The design problem is to identify and address the issues that really are important and easy enough to address; the political problem is to maintain honesty about the ones that remain.</p><p>(around 30! in this case) is much greater than the number of votes actually cast, a coerced vote is unlikely to appear unless the voter obeys. The system described in this paper ends with complete decryption of all the PrêtPrêtà Voter votes, and so it does not address this attack.</p><p>Victorian LC elections currently use a naive (noncryptographic) e-counting system. First the votes are entered into the system through manual data entry. Then the counting system checks for invalid votes and counts the valid votes.</p><p>A concern with the existing e-counting system is that the result is not universally verifiable. To help address this problem election administrators are considering publishing all the vote data to facilitate public verification of the counting software. (Note this still leaves verification gaps, for instance in the data entry process and the filtering of invalid votes.) The dilemma is that publishing the vote data makes it possible to carry out signature attacks.</p><p>Recently several cryptographic STV counting schemes have been proposed to improve vote secrecy whilst also providing universal verifiability [Hea07, Wen10, BMN + 09]. However their high computational and communication cost would make them infeasible for our application. Moreover the proposed schemes are for simplified versions of STV, and would need substantial changes to adapt them to the STV variant used in Victorian LC elections. Such modifications would likely reduce vote secrecy and/or increase the complexity costs. Also the schemes in the literature perform only the counting and do not process invalid votes.</p><p>So although cryptographic counting is desirable, it may not be feasible in the short term. Also, if the conventional paper votes are published, then a coercer could simply demand that coerced voters use conventional paper voting instead. Hence it seems that the most practical approach for now is to continue the use of naive e-counting, despite the risk of signature attacks. The encrypted votes cast via the e-voting system will be mixed and decrypted to publicly reveal the plaintext votes. These will then be combined with the conventional votes and fed into the e-counting system. This issue is worth revisiting if all the LC-BTL votes are ever cast by computer, or if there is reason to believe that signature attacks are being performed.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>B Implementation details</head><p>This section describes in detail the use of Verificatum. The selection of Verificatum as the mix-net influences other implementation decisions. We will use Verificatum to generate the joint public key, and corresponding private key shares. Ballot generation and collection will be performed in bespoke components as will the tallying of the decrypted votes. As such, we need to interface with Verificatum to retrieve the public key data and group description needed during the construction of the ballot ciphers and the discrete log look-up table required for efficient mixing. In this section we will provide more details about how the implementation will be undertaken and provide an estimate of timings for various different sizes of mix.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>B.1 Setting up the mix-net</head><p>Prior to being able to generate the joint keys in Verificatum we have to undertake some configuration steps. This involves selection of the group we are going to be operating over, the IP address of the machines in the mix-net, relevant SSH login information and various mixing options. The process is initially performed on each individual mix server before they then run a protocol to jointly agree on the protocol properties. We will use a group with a 4096bit modulus and 256bit subgroup.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>B.2 Key Generation</head><p>The keys for the mix-net will be generated using Verificatum. The Verificatum key generation produces a distributed key where each share is then threshold shared through a verifiable secret sharing scheme. Full details of the key generation are available in Verificatum, a summary is provided at http://www.verificatum.org/verificatum/prot.html. Full details of the key generation are available on Verificatum website <ref type="bibr">[Wik12]</ref>.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>B.3 Cipher Generation and Candidate Identifiers</head><p>Having constructed a key pair in Verificatum we extract the public key for use by the Election Manager. For efficiency reasons we will construct three instances of the Verificatum mix-net. Each will be entirely independent and thus have its set of keys.</p><p>The reason for doing this is to allow us to perform one mix for the lower house, one for the upper house ATL votes and one for the upper house BTL votes.</p><p>The following stages will be performed for each of sub-elections. Where a different process is followed we will highlight it, otherwise the same process is performed three times. Again, for efficiency reasons these three runs of the Election Manager may be performed in parallel. The Election Manager is the component that will perform the cipher generation. The Election Manager should be run on a diskless workstation and be observed by independent observers. The first step for the Election Manager is to construct the candidate identifiers. For the ATL ciphers the Election Manager randomly selects elements from the group which the key was constructed over. These identifiers are recorded next to each candidates name. In the case where vote packing is being used, as discussed in Section 2.6, the candidate identifier is calculated based on the maximum ranking. Once the candidate identifiers have been created they are publicly committed to on the WBB.</p><p>Ballot ciphertexts are generated as described in Section 2.2. Each ballot also requires a serial number, to enable the submissions to be identified on the WBB during verification. The serial number need not be random or unpredictable. However, if the Election Manager is being run in parallel it is important that there is no overlap between the different sub-elections. As such, the serial number will consist of a prefix indicating the election that it is for (LA, LC-ATL or LC-BTL) and a sequential index. The permutation of the candidate names is sent for printing along with the serial number and a digitally signed copy of the serial number. This is signed using the Election Managers private signing key. The permuted cipher texts are committed to the WBB along with the relevant serial number. It is important to note that the digital signature of the serial number is not committed to the WBB. It should only appear on the actual printed ballot and is a safeguard against a rogue machine attempting to ballot stuff.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>B.4 Vote Submission and WBB</head><p>The front-end submission of votes has already been covered in Sections 2.3 and 2.4. whilst a design for the WBB has been provided in Section 2.5. For completeness we will mention that the WBB will issue a digital signature for the submitted vote. The voter must check that both the vote preferences are correct and that the correct serial numbers are included in this signature.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>B.5 Vote Verification on the WBB</head><p>The voter takes their voting receipt home and can then check the presence of their vote on the WBB once the WBB has committed to its contents, as discussed in Section 2.5. To check the presence of the vote the voter must enter their relevant serial number into the relevant box on the WBB screen. At this point the WBB will retrieve the submitted information and relevant signatures. It will display this information to the voter so they can both verify the presence of it and check the contents are unchanged.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>B.6 WBB Export and Mixing</head><p>Prior to being able to run the votes through the Verificatum mix-net they need to be exported from the WBB. This will be a publicly available option. When exporting the ATL votes the submitted preferences are mapped to the corresponding cipher texts. The cipher texts are then ordered by preference and put into a column-wise structure. The ballots are combined in a row-wise structure. With votes that are being packed the relevant vote packing strategy must be performed and committed to publicly. This vote packing can be performed by each mix-net individually or just once centrally and committed to the WBB. Again, the ciphers for each ballot are organised into columns and each ballot is represented by a row.</p><p>Each mix-net server needs its own copy of the ciphers that are being submitted to the first mix. We assume that pre-configuration steps have already been performed by the mix-net, since these would need to have been done in order to generate the keys used during cipher generation. The mix servers then commence the mixing protocol. During the run the other mix servers check the proofs produced by each other, as such when the mixing phase completes the proofs have already been checked by the mix servers. At this stage an independent check of the proofs can take place or the decryption process can be started. The output of the decryption service is a list of either plain texts in preference order or values to lookup in the discrete log table. The output and the proof information from each mix server is committed to the WBB.</p></div><figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_0"><head>Figure 1 :</head><label>1</label><figDesc>Figure 1: A slip example-the front face</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_0" validated="false"><head></head><label></label><figDesc>Each type of vote (LA, LC-ATL and LC-BTL) is mixed separately. Unpacking is done by dlog com- putation based on a lookup table. LA votes have at most 10 candidates, so the maximum size of the LA look-up table is 10! ≈ 2 22 which is perfectly reason- able. More than 90% of LC votes are ATL, which is simply decrypted without any need for a dlog. For BTL votes, if there are 38 candidates and we pack every 6 onions into a single ciphertext, the size of the look-up table is P 38 6 = 38!/(38 − 6)! ≈ 2 30 . This is feasible-see Section 2.7 for an estimate of how long it takes.</figDesc><table></table></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_1" validated="false"><head>Table 1 :</head><label>1</label><figDesc></figDesc><table>Scale of example election 
Estimate Australian Election 

Number of candidates 38 
Number of parties 8 
Number of ballots 100000 
Number of ATL Votes 90000 
Number of BTL Votes 10000 

</table></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_2" validated="false"><head>Table 2 :</head><label>2</label><figDesc></figDesc><table>Timings for example election 
100,000 Time in 
Ballots 
Hours 

Cipher Generation 142481320 
39:34.41 
MixingATL 
7200000 
2 
DecryptionATL 
729000 
0:12.9 
MixingBTL 
(packing of 6) 
5600000 
1:33.20 
DecryptionBTL 
567000 
0:9.27 
DL Lookup 
3430000 
0:57.10 

</table></figure>

			<note place="foot" n="2"> Vision impaired voters must assume that at least one device reads accurately to them. 3 In principle one could use an EBM to fill in a series of ballots and only cast one of them, without telling the device which one. This is too much work for voters.</note>

			<note place="foot" n="4"> These procedures are also under review and improvement, but are out of the scope of this paper.</note>

			<note place="foot" n="7"> A scanner with printing facilities would also work.</note>
		</body>
		<back>

			<div type="acknowledgement">
			</div>

			<div type="references">

				<listBibl>

<biblStruct xml:id="b0">
	<analytic>
		<title level="a" type="main">A supervised verifiable voting protocol for the victorian electoral commission</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Craig</forename><surname>Burton</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Chris</forename><surname>Culnane</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">James</forename><surname>Heather</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Thea</forename><surname>Peacock</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Y</forename><forename type="middle">A</forename><surname>Peter</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Steve</forename><surname>Ryan</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Sriramkrishnan</forename><surname>Schneider</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Zhe</forename><surname>Srinivasan</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Xia</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. 5th International Conference on Electronic Voting</title>
		<meeting>5th International Conference on Electronic Voting</meeting>
		<imprint>
			<date type="published" when="2012" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b1">
	<analytic>
		<title level="a" type="main">Simple verifiable elections</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Josh</forename><surname>Benaloh</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. 1st USENIX Accurate Electronic Voting Technology Workshop</title>
		<meeting>1st USENIX Accurate Electronic Voting Technology Workshop</meeting>
		<imprint>
			<date type="published" when="2006" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b2">
	<analytic>
		<title level="a" type="main">Practical multi-candidate election system</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">]</forename><forename type="middle">O</forename><surname>Baudron</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P.-A</forename><surname>Fouque</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Pontecheval</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">G</forename><surname>Poupard</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Stern</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Symposium on Principles of Distributed Computing</title>
		<imprint>
			<publisher>ACM</publisher>
			<date type="published" when="2001" />
			<biblScope unit="page" from="274" to="283" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b3">
	<monogr>
		<title level="m" type="main">The trash attack: An attack on verifiable voting systems and a simple mitigation</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Josh</forename><surname>Benaloh</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Eric</forename><surname>Lazarus</surname></persName>
		</author>
		<idno>MSR-TR-2011- 115</idno>
		<imprint>
			<date type="published" when="2011" />
			<pubPlace>Microsoft</pubPlace>
		</imprint>
	</monogr>
<note type="report_type">Technical Report</note>
</biblStruct>

<biblStruct xml:id="b4">
	<analytic>
		<title level="a" type="main">Shuffle-sum: coercion-resistant verifiable tallying for STV voting</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">+ 09] Josh</forename><surname>Benaloh</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Tal</forename><surname>Moran</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Lee</forename><surname>Naish</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Kim</forename><surname>Ramchen</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Vanessa</forename><surname>Teague</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE Transactions on Information Forensics and Security</title>
		<imprint>
			<biblScope unit="volume">4</biblScope>
			<biblScope unit="issue">4</biblScope>
			<biblScope unit="page" from="685" to="698" />
			<date type="published" when="2009" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b5">
	<analytic>
		<title level="a" type="main">Scantegrity ii municipal election at takoma park: The first e2e binding governmental election with ballot privacy</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">David</forename><surname>Cary ; Richard</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">David</forename><surname>Carback</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Jeremy</forename><surname>Chaum</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">John</forename><surname>Clark</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Aleksander</forename><surname>Conway</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Paul</forename><forename type="middle">S</forename><surname>Essex</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Travis</forename><surname>Herrnson</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Stefan</forename><surname>Mayberry</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Ronald</forename><forename type="middle">L</forename><surname>Popoveniuc</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Emily</forename><surname>Rivest</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Alan</forename><forename type="middle">T</forename><surname>Shen</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Poorvi</forename><forename type="middle">L</forename><surname>Sherman</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Vora</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">USENIX Accurate Electronic Voting Technology WorkshopWorkshop on Trustworthy Elections</title>
		<imprint>
			<date type="published" when="2010" />
		</imprint>
	</monogr>
	<note>Proc. USENIX Security</note>
</biblStruct>

<biblStruct xml:id="b6">
	<analytic>
		<title level="a" type="main">Multi-autority secret-ballot elections with linear work</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Ronald</forename><surname>Cramer</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Matthew</forename><forename type="middle">K</forename><surname>Franklin</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Berry</forename><surname>Schoenmakers</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Moti</forename><surname>Yung</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">EUROCRYPT</title>
		<imprint>
			<date type="published" when="1996" />
			<biblScope unit="page" from="72" to="83" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b7">
	<analytic>
		<title level="a" type="main">Blind signatures for untraceable payments</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">David</forename><surname>Chaum</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">CRYPTO</title>
		<imprint>
			<date type="published" when="1982" />
			<biblScope unit="page" from="199" to="203" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b8">
	<analytic>
		<title level="a" type="main">Accessible voter-verifiability</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">David</forename><surname>Chaum</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Benjamin</forename><surname>Hosp</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Stefan</forename><surname>Popoveniuc</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Poorvi</forename><forename type="middle">L</forename><surname>Vora</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Cryptologia</title>
		<imprint>
			<biblScope unit="volume">33</biblScope>
			<biblScope unit="issue">3</biblScope>
			<biblScope unit="page" from="283" to="291" />
			<date type="published" when="2009" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b9">
	<analytic>
		<title level="a" type="main">A practical, voter-verifiable election scheme</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Chaum</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><forename type="middle">Y A</forename><surname>Ryan</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Schneider</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">European Symposium on Research in Computer Security, number 3679 in Lecture Notes in Computer Science</title>
		<imprint>
			<publisher>Springer-Verlag</publisher>
			<date type="published" when="2005" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b10">
	<monogr>
		<title level="m" type="main">On privacy and anonymity in electronic and non electronic voting: the ballot-as-signature attack</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Roberto</forename><surname>Di</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Cosmo</forename></persName>
		</author>
		<imprint>
			<date type="published" when="2007" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b11">
	<monogr>
		<title level="m" type="main">How to print a secret</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Aleks</forename><surname>Essex</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Jeremy</forename><surname>Clark</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Urs</forename><surname>Hengartner</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Carlisle</forename><surname>Adams</surname></persName>
		</author>
		<editor>HotSec</editor>
		<imprint>
			<date type="published" when="2009" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b12">
	<analytic>
		<title level="a" type="main">Kleptographic attacks on e-voting schemes</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Marcin</forename><surname>Gogolewski</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Marek</forename><surname>Klonowski</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Przemyslaw</forename><surname>Kubiak</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Miroslaw</forename><surname>Kutylowski</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Anna</forename><surname>Lauks</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Filip</forename><surname>Zagórski</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">ETRICS</title>
		<imprint>
			<date type="published" when="2006" />
			<biblScope unit="page" from="494" to="508" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b13">
	<analytic>
		<title level="a" type="main">Implementing stv securely in prêtprêtà voter</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Heather</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Computer Security Foundations</title>
		<imprint>
			<date type="published" when="2007" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b14">
	<analytic>
		<title level="a" type="main">Cryptographic voting protocols: A systems perspective</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><surname>Karlof</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">N</forename><surname>Sastry</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Wagner</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">USENIX Security Symposium, number 3444 in Lecture Notes in Computer Science</title>
		<imprint>
			<publisher>Springer-Verlag</publisher>
			<date type="published" when="2005" />
			<biblScope unit="page" from="186" to="200" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b15">
	<analytic>
		<title level="a" type="main">Computing the margin of victory in IRV elections</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Thomas</forename><forename type="middle">R</forename><surname>Magrino</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Ronald</forename><forename type="middle">L</forename><surname>Rivest</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Emily</forename><surname>Shen</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">David</forename><surname>Wagner</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">USENIX Accurate Electronic Voting Technology WorkshopWorkshop on Trustworthy Elections</title>
		<imprint>
			<date type="published" when="2011" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b16">
	<analytic>
		<title level="a" type="main">PrêtPrêtà voter: a voter-verifiable voting system</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Y</forename><forename type="middle">A</forename><surname>Peter</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">David</forename><surname>Ryan</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">James</forename><surname>Bismark</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Steve</forename><surname>Heather</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Zhe</forename><surname>Schneider</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Xia</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE Transactions on Information Forensics and Security</title>
		<imprint>
			<biblScope unit="volume">4</biblScope>
			<biblScope unit="issue">4</biblScope>
			<biblScope unit="page" from="662" to="673" />
			<date type="published" when="2009" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b17">
	<monogr>
		<title level="m" type="main">PrêtPrêtà voter: a systems perspective</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><forename type="middle">Y A</forename><surname>Ryan</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><surname>Peacock</surname></persName>
		</author>
		<idno>CS-TR-929</idno>
		<imprint>
			<date type="published" when="2005" />
		</imprint>
		<respStmt>
			<orgName>University of Newcastle upon Tyne</orgName>
		</respStmt>
	</monogr>
<note type="report_type">Technical Report</note>
</biblStruct>

<biblStruct xml:id="b18">
	<analytic>
		<title level="a" type="main">PrêtPrêtà Voter with Re-encryption Mixes</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><forename type="middle">Y A</forename><surname>Ryan</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Schneider</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">European Symposium on Research in Computer Security, number 4189 in Lecture Notes in Computer Science</title>
		<imprint>
			<publisher>SpringerVerlag</publisher>
			<date type="published" when="2006" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b19">
	<analytic>
		<title level="a" type="main">Parallel shuffling and its application to prêt prêtà Voter</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Kim</forename><surname>Ramchen</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Vanessa</forename><surname>Teague</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. USENIX Accurate Electronic Voting Technology Workshop</title>
		<meeting>USENIX Accurate Electronic Voting Technology Workshop</meeting>
		<imprint>
			<date type="published" when="2010" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b20">
	<monogr>
		<title level="m" type="main">Yoni) Ben-Nun. Wombat voting system</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Alon</forename><surname>Rosen</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Amnon</forename><surname>Ta-Shma</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Ben</forename><surname>Riva</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Jonathan</forename></persName>
		</author>
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b21">
	<analytic>
		<title level="a" type="main">PrêtPrêtà Voter with paillier encryption</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Y</forename><forename type="middle">A</forename><surname>Peter</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Ryan</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Mathematical and Computer Modelling</title>
		<imprint>
			<biblScope unit="volume">48</biblScope>
			<biblScope unit="issue">9</biblScope>
			<biblScope unit="page" from="1646" to="1662" />
			<date type="published" when="2008-11" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b22">
	<analytic>
		<title level="a" type="main">Votebox: A tamper-evident, verifiable electronic voting system</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Daniel</forename><forename type="middle">R</forename><surname>Sandler</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Kyle</forename><surname>Derr</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Dan</forename><forename type="middle">S</forename><surname>Wallach</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. 17th USENIX Security Symposium</title>
		<meeting>17th USENIX Security Symposium</meeting>
		<imprint>
			<date type="published" when="2008" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b23">
	<monogr>
		<title level="m" type="main">Online Elections in Terra Australis</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Roland</forename><surname>Wen</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2010" />
		</imprint>
		<respStmt>
			<orgName>School of Computer Science and Engineering, The University of New South Wales</orgName>
		</respStmt>
	</monogr>
<note type="report_type">PhD thesis</note>
</biblStruct>

<biblStruct xml:id="b24">
	<monogr>
		<title/>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Douglas</forename><surname>Wikström</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Verificatum</surname></persName>
		</author>
		<ptr target="http://www.verificatum.org/verificatum/" />
		<imprint>
			<date type="published" when="2012" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b25">
	<analytic>
		<title level="a" type="main">Versatile prêtprêtà voter: Handling multiple election methods with a unified interface</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Zhe</forename><surname>Xia</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Chris</forename><surname>Culnane</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">James</forename><surname>Heather</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Hugo</forename><surname>Jonker</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Y</forename><forename type="middle">A</forename><surname>Peter</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Steve</forename><forename type="middle">A</forename><surname>Ryan</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Sriramkrishnan</forename><surname>Schneider</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Srinivasan</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">INDOCRYPT</title>
		<imprint>
			<date type="published" when="2010" />
			<biblScope unit="page" from="98" to="114" />
		</imprint>
	</monogr>
	<note>XCH + 10</note>
</biblStruct>

<biblStruct xml:id="b26">
	<monogr>
		<title level="m" type="main">Italian Attacks&quot;), why we did not address them in this project, and how we could do so in future. Any election with a complex ballot is vulnerable. In preferential elections, a coercer can instruct a voter to cast a particular signature vote (i.e. a particular permutation of candidates) and then check to see whether</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Lidong</forename><surname>Zhou</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Michael</forename><forename type="middle">A</forename><surname>Marsh</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Fred</forename><forename type="middle">B</forename><surname>Schneider</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Anna</forename><surname>Redz</surname></persName>
		</author>
		<imprint/>
	</monogr>
	<note>signature attacks (a.k.a. it appears in the final tally. Since the number of possible votes</note>
</biblStruct>

				</listBibl>
			</div>
		</back>
	</text>
</TEI>
