<?xml version="1.0" encoding="UTF-8"?>
<TEI xmlns="http://www.tei-c.org/ns/1.0" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
xsi:schemaLocation="http://www.tei-c.org/ns/1.0 /Users/atharsefid/Desktop/grobid-0.5.3/grobid-home/schemas/xsd/Grobid.xsd"
 xmlns:xlink="http://www.w3.org/1999/xlink">
	<teiHeader xml:lang="en">
		<encodingDesc>
			<appInfo>
				<application version="0.5.3" ident="GROBID" when="2020-09-29T02:06+0000">
					<ref target="https://github.com/kermitt2/grobid">GROBID - A machine learning software for extracting information from scholarly documents</ref>
				</application>
			</appInfo>
		</encodingDesc>
		<fileDesc>
			<titleStmt>
				<title level="a" type="main">Vulnerability Extrapolation: Assisted Discovery of Vulnerabilities using Machine Learning</title>
			</titleStmt>
			<publicationStmt>
				<publisher/>
				<availability status="unknown"><licence/></availability>
			</publicationStmt>
			<sourceDesc>
				<biblStruct>
					<analytic>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Fabian</forename><surname>Yamaguchi</surname></persName>
							<affiliation key="aff0">
								<orgName type="institution">Recurity Labs GmbH</orgName>
								<address>
									<country key="DE">Germany</country>
								</address>
							</affiliation>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Felix &amp;apos;fx&amp;apos; Lindner</surname></persName>
							<affiliation key="aff0">
								<orgName type="institution">Recurity Labs GmbH</orgName>
								<address>
									<country key="DE">Germany</country>
								</address>
							</affiliation>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Konrad</forename><surname>Rieck</surname></persName>
							<affiliation key="aff1">
								<orgName type="institution">Technische Universit√§t Berlin</orgName>
								<address>
									<country key="DE">Germany</country>
								</address>
							</affiliation>
						</author>
						<title level="a" type="main">Vulnerability Extrapolation: Assisted Discovery of Vulnerabilities using Machine Learning</title>
					</analytic>
					<monogr>
						<imprint>
							<date/>
						</imprint>
					</monogr>
				</biblStruct>
			</sourceDesc>
		</fileDesc>
		<profileDesc>
			<abstract>
				<p>Rigorous identification of vulnerabilities in program code is a key to implementing and operating secure systems. Unfortunately, only some types of vulnerabilities can be detected automatically. While techniques from software testing can accelerate the search for security flaws, in the general case discovery of vulnerabilities is a tedious process that requires significant expertise and time. In this paper, we propose a method for assisted discovery of vulnerabilities in source code. Our method proceeds by embedding code in a vector space and automatically determining API usage patterns using machine learning. Starting from a known vulnerability, these patterns can be exploited to guide the auditing of code and to identify potentially vulnerable code with similar characteristics-a process we refer to as vulnerability ex-trapolation. We empirically demonstrate the capabilities of our method in different experiments. In a case study with the library FFmpeg, we are able to narrow the search for interesting code from 6,778 to 20 functions and discover two security flaws, one being a known flaw and the other constituting a zero-day vulnerability.</p>
			</abstract>
		</profileDesc>
	</teiHeader>
	<text xml:lang="en">
		<body>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="1">Introduction</head><p>The security of computer systems critically depends on the quality and security of its underlying program code. Unfortunately, there is a persistent deficit of security awareness in software development <ref type="bibr" target="#b36">[37]</ref> and often the pressure of business competition rules out the design and implementation of secure software. As a result, there exist numerous examples of programming flaws that have led to severe security incidents and the proliferation of malicious software [e.g., <ref type="bibr" target="#b10">11,</ref><ref type="bibr" target="#b18">19,</ref><ref type="bibr" target="#b23">24]</ref>. Often these flaws emerge as zero-day vulnerabilities, rendering defense using reactive security tools almost impossible.</p><p>From its early days, computer security has been concerned with developing methods for discovery and elimination of vulnerabilities in program code. Due to the fundamental inability of a program to completely analyse another program's code however, determining vulnerabilities automatically has proved to be an involved and often daunting task. Current tools for automatic code analysis, such as Fortify 360 and Microsoft PREfast, are thus limited to detecting vulnerabilities following wellknown programming patterns. While techniques derived from software testing, such as fuzz testing <ref type="bibr" target="#b31">[32]</ref>, taint analysis <ref type="bibr" target="#b19">[20]</ref> and symbolic execution <ref type="bibr" target="#b2">[3,</ref><ref type="bibr" target="#b28">29]</ref>, may accelerate analysis of program code, the general discovery of vulnerabilities still rests on tedious manual auditing that requires considerable expertise and resources.</p><p>As a remedy, we propose a method for assisted discovery of vulnerabilities in source code. Instead of struggling with the limitations of automatic analysis, our method aims at rendering manual auditing more effective by assisting and guiding the inspection of source code. To this end, the method embeds code in a vector space, such that typical patterns of API usage can be determined automatically using machine learning techniques. These patterns implicitly capture semantics of the code and allow to "extrapolate" known vulnerabilities by identifying potentially vulnerable code with similar characteristics. This process of vulnerability extrapolation can suggest candidates for investigation to the analyst as well as ease the browsing of source code during auditing.</p><p>We empirically demonstrate the capabilities of this method to identify usage patterns and to accelerate code auditing in different experiments. In a case study with the popular library FFmpeg and a known vulnerability <ref type="bibr">(CVE-2010-3429)</ref>, our method narrows the search for interesting code from 6,778 to 20 functions. Out of these 20 functions, we can identify two security flaws, one being another known weakness and the other constituting a zero-day vulnerability. We prove the relevance of this finding by providing a working exploit.</p><p>The rest of this paper is structured as follows: we introduce our method for vulnerability extrapolation in Section 2. An evaluation and a case study with FFmpeg  <ref type="figure" target="#fig_1">Figure 1</ref>: A schematic overview of our method for vulnerability extrapolation.</p><p>are presented in Section 3. We discuss related work in Section 4 and conclude in Section 5.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2">Vulnerability Extrapolation</head><p>The concept of vulnerability extrapolation builds on the idea of identifying unknown vulnerabilities using programming patterns observed in known security flaws. The rational underlying this concept is that vulnerabilities are often directly linked to patterns of specific API usage. For example, the unfortunate interactions of several basic routines for string and memory processing have been used for decades to identify "low-hanging fruit" vulnerabilities. This intuitive concept of extrapolation, however, poses two challenges: First, how can we capture patterns of API usage automatically, and second, how can we transfer these patterns from known vulnerabilities to other code fragments?</p><p>To tackle these problems, we combine techniques from static code analysis and machine learning. In particular, our method proceeds by mapping the source code under investigation to an expressive vector space, such that patterns of API usage can be geometrically inferred and used to guide the search for vulnerabilities. This extrapolation process can be described in four steps.</p><p>1. Extraction of API symbols. In the first step the source code is tokenized and parsed into individual functions. For each function, we extract the names of referenced types and functions. We refer to these extracted symbols as API symbols.</p><p>2. Embedding in a vector space. Using the extracted symbols, each function is embedded in a vector space, such that each dimension is associated with one API symbol. This representation allows us to model and identify API usage geometrically.</p><p>3. Identification of API usage patterns. In the third step, we apply the technique of Principal Component Analysis that enables us to infer discriptive directions in the vector space, which correspond to dominant API usage patterns.</p><p>4. Assisted vulnerability discovery. Finally, we express each function as a mixture of dominant API usage patterns. Starting from the vectorial location of a known vulnerability, this representation enables us to identify functions sharing similar API usage and possibly containing similar vulnerabilities.</p><p>In the following sections, we discuss these steps in more detail and provide the required theoretical and technical background.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.1">API Symbols and Usage Patterns</head><p>The term Application Programming Interface or API usually refers to interfaces of software libraries. For discovery of vulnerabilities, we make use of this term in a broader sense and denote all source-level interfaces referencing semantically related code as APIs. Such interfaces arise naturally from modular program design and may correspond to classes, libraries, frameworks as well as collections of utility functions.</p><p>We refer to any identifier used to access functionality of an API as an API symbol. In particular, we consider names of types, names of functions and type casts as API symbols. As an example, <ref type="figure" target="#fig_0">Figure 2</ref> shows the API symbols associated with a simple C function. The accessed API corresponds to the functions func2 and func3 and involves different types, such as int and struct bar. Based on the API symbols, we can define the notion of an API usage pattern, which simply corresponds to a set of symbols used in several functions. These patterns can cover different functionality of the source code. For example, an API usage pattern may correspond to lock functions, such as mutex lock and mutex unlock, whereas another pattern might reflect typical string functions, such as strcpy, strcat and strlen. To distinguish random combinations of symbols from relevant code, we consider only dominant usage patterns which occur frequently in the code base. We will see in Section 2.3 how dominant API usage patterns can be identified automatically.</p><p>As the first step of our analysis, we thus tokenize and parse the source code under investigation into individual functions (or alternatively functional blocks). For each function, we then extract its API symbols and store these as sets for subsequent processing.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.2">From API Symbols to Vectors</head><p>API symbols and usage patterns are intuitive to a human analyst, yet both concepts are not directly suitable for application of machine learning. Learning techniques usually operate on numerical vectors and often express patterns as combinations of vectors. Inspired by the vector space model from information retrieval <ref type="bibr" target="#b27">[28]</ref>, we thus embed the functions of our code base in a vector space using the API symbols. This allows us to conduct the search for vulnerable code in a geometric manner.</p><p>To present this embedding, we first need to introduce some basic notation. We denote by X = {x 1 , . . . , x n } the set of functions in our code base and refer to S as the set of all API symbols contained in X . We can then define a mapping œÜ from X to an |S|-dimensional vector space, whose dimensions are associated with the API symbols S. Formally, this map œÜ is defined as</p><formula xml:id="formula_0">œÜ : X ‚àí‚Üí R |S| , œÜ(x) ‚àí‚Üí (œÜ s (x)) s‚ààS .</formula><p>For a given function x ‚àà X the value at the dimension associated with the symbol s ‚àà S is computed by</p><formula xml:id="formula_1">œÜ s (x) := I(s, x) ¬∑ TFIDF(s)</formula><p>where I is simply an indicator function I(s, x) = 1 if the symbol s is contained in x 0 otherwise and TFIDF(s) corresponds to a standard weighting term used in information retrieval. This weighting ensures that the contribution of very frequent API symbols is lowered, similar to stop words in natural language text. A detailed introduction to this mapping technique is provided in the book of Salton and McGill <ref type="bibr" target="#b26">[27]</ref>.</p><p>For convenience and later processing, we store the vectors of all functions in our code base in a matrix M , where one element of the matrix is defined as</p><formula xml:id="formula_2">M s,x := œÜ s (x).</formula><p>As a result, the matrix M consists of |X | column vectors each containing |S| elements.</p><p>Apparently, the embedding of source code introduces a dilemma: On the one hand, it is desirable to analyse as many API symbols as possible, while on the other hand storing billions of elements in a matrix M may get intractable. However, the map œÜ is sparse, that is, a function x contains only few of all possible API symbols and thus the majority of elements in M is zero. This sparsity can be exploited to extract and compare vectors œÜ(x) with linear-time complexity using data structures, such as hash maps and sorted arrays [see 25].</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.3">Principal Component Analysis</head><p>The mapping outlined in the previous section allows for comparison of functions in terms of API symbols, simply by computing distances between the respective vectors. However, this vectorial representation alone is not sufficient for effective discovery of vulnerabilities, as these are not characterized by individual API symbols but patterns of symbols. For example, functions may use the same API but utilize different subsets, such that the underlying usage pattern is only reflected in the combination of all subsets.</p><p>This problem of composing usage patterns can be addressed by Principal Component Analysis-a standard technique of machine learning for automatically determining descriptive directions in a vector space <ref type="bibr" target="#b8">[9]</ref>. In our setting, these directions are associated with combinations of API symbols and can be interpreted as dominant API usage patterns. Moreover, the directions define a low-dimensional subspace that the original vectors can be projected to. Functions that do not share any symbols but make us of the same API lie close to each other in this subspace, as they fall onto the same direction identified by PCA. This technique of projecting data to a lowdimensional subspace using PCA is also referred to as Latent Semantic Analysis <ref type="bibr" target="#b7">[8]</ref>, a name that indicates the ability to extract latent semantic relations from data.</p><p>Formally, PCA seeks d orthogonal directions in the vector space that capture as much of the variance inside the data as possible. One way to obtain these d directions is by performing a truncated Singular Value Decomposition (SVD) of the matrix M . This decomposition can be implemented efficiently using the Lanczos algorithm, an iterative procedure suited for high-dimensional and sparse data. For computing this decomposition we make use of the popular library SVDLIBC <ref type="bibr" target="#b25">[26]</ref>.</p><p>The truncated SVD decomposes the matrix M into three matrices U , Œ£ and V which offer a wealth of information about the code base and API usage. This decomposition has the following form</p><formula xml:id="formula_3">M ‚âà U Œ£ V T = Ô£´ Ô£¨ Ô£¨ Ô£¨ Ô£≠ ‚Üê u 1 ‚Üí ‚Üê u 2 ‚Üí . . . ‚Üê u |S| ‚Üí Ô£∂ Ô£∑ Ô£∑ Ô£∑ Ô£∏ Ô£´ Ô£¨ Ô£¨ Ô£¨ Ô£≠ œÉ 1 0 . . . 0 0 œÉ 2 . . . 0 . . . . . . . . . . . . 0 0 . . . œÉ d Ô£∂ Ô£∑ Ô£∑ Ô£∑ Ô£∏ Ô£´ Ô£¨ Ô£¨ Ô£¨ Ô£≠ ‚Üê v 1 ‚Üí ‚Üê v 2 ‚Üí . . . ‚Üê v |X | ‚Üí Ô£∂ Ô£∑ Ô£∑ Ô£∑ Ô£∏ T .</formula><p>In particular, we obtain three relevant sources of information that describe the dominant patterns of API usage, their relevance and the relation of function and symbols to these patterns. 3. The rows of U and V contain the projected representations of API symbols and functions, respectively. While the matrix V can be used to measure the similarity of functions, U comes handy if API symbols need to be traced back to usage patterns.</p><p>As we will see in the following, these three matrices provide the basis for assisted discovery of vulnerabilities and conclude the rather theoretical presentation of our practical method.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.4">Assisted Vulnerability Discovery</head><p>Once the decomposition has been calculated, which takes minutes on average consumer hardware, the analyst can query the obtained information and matrices in real time. Hence, our method can be directly applied to assist an analyst while browsing and auditing source code. In particular, the following three activities can be conducted during an auditing session.</p><p>Vulnerability extrapolation. By comparing the row vectors of V using a similarity measure, such as the cosine similarity <ref type="bibr" target="#b26">[27]</ref>, the relations of all functions in the code base can be assessed. This allows for quickly discovering functions that share similar API usage patterns and builds the basis for extrapolating vulnerabilities. Given a function containing a known vulnerability, the analyst can scan the code base for occurrences of similar API usage and focus on functions related to the vulnerability. This guided search for vulnerabilities can significantly reduce the number of functions to be audited. We demonstrate this practice on a real-life example in Section 3.2.</p><p>Extracting dominant usage patterns. The proposed method can also be used as a pre-processing step for indepth analysis. The column vectors of the matrix U correspond to the d most dominant API usage patterns and their respective combinations of symbols. Using these patterns, an analyst can easily group the code base into different subsets and concentrate on particular usage patterns, for example, by restricting the audit only to functions making use of security-critical APIs, such as network and authentication routines.</p><p>API browsing. As the majority of software is developed in a modular manner, any code base of reasonable size necessarily contains internal APIs <ref type="bibr" target="#b5">[6]</ref>. Often these internal APIs are scarcely documented and scattered across different files in the code base. Nonetheless, an understanding of these APIs can be crucial for identifying more subtle vulnerabilities. Our method assists an analyst in understanding public as well as internal APIs. By comparing rows in V (functions) with rows in U (symbols), an analyst can determine important API symbols associated with the APIs used in a function. In the same manner, it is possible to determine functions, which best match a constructed set of API symbols. This allows a very directed search for occurrences of particular patterns known to commonly cause problems.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3">Evaluation and Case Study</head><p>Thus far we have seen how source code can be modeled and analysed for discovery of vulnerabilities using machine learning techniques. In practice however, it is not the sophisticated design of a method that matters, but its ability to really assist in day-to-day auditing. To study the efficacy of the proposed method in practice, we thus conduct two experiments with real source code. In the first experiment, we quantitatively evaluate the ability of our method to automatically identify API usage patterns and to structure source code (Section 3.1). In the second experiment-a case study-we apply our method for vulnerability extrapolation to the library FFmpeg and construct a working exploit for a discovered zero-day vulnerability (Section 3.2).</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.1">Quantitative Evaluation</head><p>The effectivity of vulnerability extrapolation rests on the accurate identification of API usage patterns. To validate this capability, we construct an evaluation code base that comprises functions from different classes of API usage. We ensure that these classes contain distinct usage patterns by selecting functions from different contexts and applications. In particular, we consider a total of 420 functions from the Linux Kernel (2.6.32) and the mediadecoding library FFmpeg (0.6.0) which are assigned to the following five classes: The functions in each class are randomly partitioned into subsets, such that each subset has approximately the same size and each class is split into ten subsets. We then apply our method to the resulting code base and study how inner-class and intra-class relationships are captured by embedding functions in a vector space and by projecting the functions to directions determined by PCA. <ref type="figure" target="#fig_4">Figure 3</ref>(a) presents the pairwise similarities between the subsets of the five classes directly measured in the vector space, that is, prior to application of PCA. The similarities are depicted as a matrix, where each cell shows the average cosine similarity between the functions in one subset and another. While the matrix shows some structured contour, most of its surface appears blurred. A notable variance between similarity scores within a class is observable and several subsets of different classes can hardly be discriminated. It is evident that embedding of functions alone is not sufficient for determining usage patterns in source code. <ref type="figure" target="#fig_4">Figure 3</ref>(b) shows the pairwise similarities between the subsets measured after the embedded functions have been projected to the top five directions identified by PCA. That is, the functions are represented as mixtures of API usage patterns instead of individual symbols. In this projected representation, inter-class similarities are significantly higher than in the original vector space and high distances between functions of different classes can be observed. The application of PCA removes "noise" from the code base and thereby allows to infer relevant patterns for discriminating the five classes-a prerequisite for effective extrapolation of vulnerabilities.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.2">Case Study: FFmpeg</head><p>We finally demonstrate by example how the proposed method can be integrated into a real auditing task, where it plays a key role in the identification of a zero-day vulnerability. For this case study, we consider the  widely used open-source media decoding library FFmpeg (0.6.0) and extrapolate a recently discovered vulnerability found in the processing of FLIC videos.</p><p>The original vulnerability. In September 2010, the open source CERT reported a security vulnerability <ref type="bibr">(CVE-2010-3429</ref>) in FFmpeg attributed to Cesar Bernardini, which allows an attacker to write data to arbitrary locations in memory relative to a pointer on the heap via crafted FLIC media frames <ref type="bibr" target="#b0">[1]</ref>. The vulnerability is contained in the function flic decode frame 8BPP displayed in <ref type="figure" target="#fig_5">Figure 4</ref>, which is called for each frame of an 8 bit-per-pixel video.</p><p>The critical write operation is performed on line 29, where the least significant byte of the user-supplied integer line packets is written to a location rela-  tive to the heap-based buffer pixels. It has been overlooked that the offset is dependent on y ptr and s-&gt;frame.linesize <ref type="bibr">[0]</ref>, both of which can be controlled by an attacker. In fact, due to the loop starting at line 18, it is possible to assign an arbitrary value to y ptr independent of the last value stored in line packets and no check is performed to verify whether the offset remains within the confined regions of the buffer. It is thus possible for an attacker to write arbitrary bytes to arbitrary locations in memory.</p><p>Extrapolation. For discovery of similar vulnerabilities, we apply our method to the code base of FFmpeg consisting of 6,778 functions. For PCA, we choose d = 200 and thereby project the embedded functions to a subspace capturing up to 200 unique API usage patterns. <ref type="table" target="#tab_3">Table 1</ref> lists the 20 most similar functions to flic decode frame 8BPP in this subspace. Note that we have found 20 to be a reasonable number of functions to consider in one batch and, as we will see shortly, sufficiently large for identification of vulnerabilities.</p><p>Inspecting the functions listed in <ref type="table" target="#tab_3">Table 1</ref>, we first spot a similar flaw in flic decode frame 15 16BPP, where our method reports a similarity of 96%. This vulnerability has been discovered previously and is patched in the current versions of FFmpeg. Surprisingly however, another similar bug in function vmd decode located in a different source file has not discovered by the developers. Our method reports a similarity of 72% for vmd decode leading us almost instantly to this unknown vulnerability. The vulnerability is shown in <ref type="figure">Figure 5 and</ref>   Just like the original function, vmd decode reads the frame dimensions and offsets specified by the individual frame on line 8 to 11 and then calculates an offset into the pixel buffer based on these values on line 34. The function fails to validate whether the given offset references a location within the buffer. Therefore, as user-supplied data is copied to the specified location on line 43, an attacker can corrupt memory by choosing an offset outside of the buffer In this case study, our method is mainly used to identify functions sharing similar API usage patterns, yet this search for semantic similarities is pivotal for discovery of vulnerabilities. Note that the bodies of the original function and the discovered vulnerability differ significantly and a simple comparison would have been insufficient to spot their relation. By contrast, this study demonstrates that API usage patterns are commonly linked to sets of semantically related functions, simply because similar tasks are usually solved by similar means within a code base. Consequently, functions similar by these terms are often plagued by related vulnerabilities.  independent executable and thus the image of the executable is located at a predictable offset. As a result, we can successfully exploit the vulnerability, despite contemporary anti-exploitation techniques, such as Address Space Layout Randomization. A detailed description of the exploit is presented in Appendix A and further background on this case study is presented in <ref type="bibr" target="#b37">[38]</ref>.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Exploit</head></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4">Related Work</head><p>Code analysis and methods for detection of vulnerabilities have been a vivid area of research in computer security. Over the last years, many different concepts and techniques have been devised to tackle this problem. Our contribution is related to several of these approaches, as we discuss in the following.</p><p>Our concept of representing code based on patterns of API usage is motivated by the fact that classes of vulnerabilities can often be directly linked to distinct API symbols, a correspondence that is well-known to practitioners and reflected in several static analysis tools, such as Flawfinder <ref type="bibr" target="#b34">[35]</ref>, RATS <ref type="bibr" target="#b1">[2]</ref> or ITS4 <ref type="bibr" target="#b32">[33]</ref>. These tools offer fixed databases of API symbols commonly found in conjunction with vulnerabilities and allow a target code base to be scanned for their occurrences.</p><p>In academic security research, the connection between API symbols and vulnerability classes has also been recognized and provides a basis for taint analysis <ref type="bibr" target="#b19">[20,</ref><ref type="bibr" target="#b28">29]</ref>. In taint analysis, an analyst can describe a class of vulnerabilities by a source-sink system defined over API symbols. If data tainted by an attacker and stemming from one of the sources propagates to a sink without undergoing validation, a vulnerability is detected. The success of this approach has been demonstrated for different types of vulnerabilities and attacks, such as SQL injection <ref type="bibr" target="#b17">[18]</ref>, Cross Site Scripting <ref type="bibr" target="#b13">[14]</ref> and integer-based vulnerabilities <ref type="bibr" target="#b33">[34]</ref>. In most realizations, taint analysis is a dynamic process and thus limited to discovery of vulnerabilities observable during execution of a program.</p><p>A second strain of research has considered symbolic execution as an extension to taint analysis for detecting vulnerabilities in source code <ref type="bibr" target="#b2">[3,</ref><ref type="bibr" target="#b28">29]</ref>. Most notably is the work of Avgerinos et al. <ref type="bibr" target="#b2">[3]</ref> that introduces a framework for finding and even exploiting vulnerabilities using symbolic execution. Despite some amazing results, symbolic execution suffers from the infeasibility of exploring all possible execution paths and its application in practice critically depends on heuristics for pruning off execution branches. In the general case, the search for vulnerabilities thus remains a manual process, which however can be accelerated by assisted analysis, as shown in this work For static code analysis, Engler et al. <ref type="bibr" target="#b9">[10]</ref> are among the first to introduce a method suitable for detecting flaws attributed to programming patterns. However, their method requires a manual definition of these patterns. As an extension, Li and Zhou <ref type="bibr" target="#b15">[16]</ref> present an approach for mining programming rules and automatically detecting their violation. An inherent problem of this approach is that a frequent programming mistakes will lead to the inference of a valid pattern and thus common flaws cannot be detected. Williams et al. <ref type="bibr" target="#b35">[36]</ref> as well as Livshits et al. <ref type="bibr" target="#b16">[17]</ref> address this problem and incorporate software revision histories into the analysis. The detection of programming rules not related to corrections of code, therefore becomes less likely. On the downside, only programming rules violated in the past can be detected, making the discovery of previously unknown flaw patterns impossible.</p><p>Finally, techniques from the field of machine learning have been successfully applied in several areas of security, such as for intrusion detection <ref type="bibr">[e.g., 7, 12, 15]</ref> and analysis of malicious software <ref type="bibr">[e.g., 4, 5, 23]</ref>. A large body of research has been concerned with the design of learning-based security systems, as well as with their shortcomings <ref type="bibr" target="#b12">[13,</ref><ref type="bibr" target="#b29">30]</ref> and evasion possibilities <ref type="bibr" target="#b20">[21,</ref><ref type="bibr" target="#b21">22,</ref><ref type="bibr" target="#b30">31]</ref>. However, to our knowledge, the application of machine learning to problems of offensive security, such as vulnerability discovery, has gained almost no attention so far.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5">Conclusion</head><p>We have introduced a method for assisted discovery of vulnerabilities in source code, deliberately leaving aside the known difficulties of fully automated analysis. Our method accelerates the process of manual code auditing by quickly identifying patterns of API usage in a code base and suggesting code related to known vulnerabilities to a security analyst. We have demonstrated on real production code that once a vulnerability is known, similar vulnerabilities can be easily identified by cycling through similar functions determined by our method.</p><p>The proposed method uses API usage patterns for analysing the code base. Many vulnerabilities can be captured well by API usage, yet there also exist cases where the code structure of a function is more relevant for auditing. While the proposed method can not uncover vulnerabilities building only on these patterns, we are currently investigating techniques for integrating structural information from source code into the process of vulnerability extrapolation. Moreover, the ability of our approach to narrow the auditing process to a few interesting functions may also play well with software testing, for example, for selectively fuzzing functions or performing involved symbolic execution.</p><p>In conclusion, we can note that fixing a single vulnerability without performing sufficient extrapolation, as currently performed by many vendors of software, can be contra-productive, given that it provides attackers with information that may be used to identify similar yet unpatched vulnerabilities. Vulnerability extrapolation can help here to strengthen software security and to support the elimination of related vulnerabilities in practice.</p></div><figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_0"><head>Figure 2 :</head><label>2</label><figDesc>Figure 2: Source code of an exemplary C function. API symbols are indicated by bold typeface.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_1"><head>1 .</head><label>1</label><figDesc>The d columns of the unitary matrix U correspond to the principal components of PCA and thus reflect the d most dominant API usage patterns-prevalent combinations of API symbols in the code base. 2. The diagonal matrix Œ£ contains the singular values of M . The values indicate the variances of the prin- cipal components and allow us to assess the individ- ual importance of the d API usage patterns.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_2"><head>1 .</head><label>1</label><figDesc>Functions for sending network data (Linux kernel) 2. Functions for probing keyboards (Linux kernel) 3. Functions for probing sound drivers (Linux Kernel) 4. Functions for media demuxing (FFmpeg) 5. Functions for media decoding (FFmpeg)</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_3"><head>(</head><label></label><figDesc>a) Similarity matrix for embedded functions. (b) Similarity matrix for projected functions using PCA.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_4"><head>Figure 3 :</head><label>3</label><figDesc>Figure 3: Similarity matrix for (a) embedded functions and (b) embedded functions projected to the top 5 directions of PCA. Dark shading indicates high similarity.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_5"><head>Figure 4 :</head><label>4</label><figDesc>Figure 4: Original vulnerability (CVE-2010-3429).</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_6"><head>Figure 6 :</head><label>6</label><figDesc>Figure 6: Caller of vulnerable function vmd decode.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_2" validated="false"><head>6 .</head><label>6</label><figDesc></figDesc><table>Similarity Function name 
1.00 

flic decode frame 8BPP 

0.96 

flic decode frame 15 16BPP 

0.83 

lz unpack 

0.80 

decode frame (lcldec.c) 

0.80 

raw encode 

0.76 

vmdvideo decode init 

0.72 

vmd decode 

0.70 

aasc decode frame 

0.68 

flic decode init 

0.67 

decode format80 

0.66 

targa decode rle 

0.66 

adpcm decode init 

0.66 

decode frame (zmbv.c) 

0.66 

decode frame (8bps.c) 

0.65 

msrle decode 8 16 24 32 

0.65 

wmavoice decode init 

0.65 

get quant 

0.64 

MP3lame encode frame 

0.64 

mpegts write section 

0.64 

tgv decode frame 

</table></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_3" validated="false"><head>Table 1 :</head><label>1</label><figDesc></figDesc><table>Top 20 of 6,778 functions ranked by cosine sim-
ilarity to flic decode frame 8BPP. Discovered vul-
nerabilities are indicated by a shaded background. 

</table></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_4" validated="false"><head></head><label></label><figDesc>. To demonstrate the relevance of this finding, we craft an exploit for the discovered vulnerability tar- geting the popular media player MPlayer that is linked to the FFmpeg library on Ubuntu Linux (10.04 LTS). On this platform, MPlayer is not compiled as a position-</figDesc><table>1 static void vmd_decode(VmdVideoContext *s) 
2 { 
3 
[...] 
4 
int frame_x, frame_y; 
5 
int frame_width, frame_height; 
6 
int dp_size; 
7 
8 
frame_x = AV_RL16(&amp;s-&gt;buf[6]); 
9 
frame_y = AV_RL16(&amp;s-&gt;buf[8]); 
10 
frame_width = AV_RL16(&amp;s-&gt;buf[10]) -frame_x + 1; 
11 
frame_height = AV_RL16(&amp;s-&gt;buf[12]) -frame_y + 1; 
12 
13 
if ((frame_width == s-&gt;avctx-&gt;width &amp;&amp; 
14 
frame_height == s-&gt;avctx-&gt;height) &amp;&amp; 
15 
(frame_x || frame_y)) { 
16 
s-&gt;x_off = frame_x; 
17 
s-&gt;y_off = frame_y; 
18 
} 
19 
frame_x -= s-&gt;x_off; 
20 
frame_y -= s-&gt;y_off; 
21 
[...] 
22 
if (frame_x || frame_y || (frame_width != s-&gt;avctx-&gt;width) || 
23 
(frame_height != s-&gt;avctx-&gt;height)) { 
24 
memcpy(s-&gt;frame.data[0], s-&gt;prev_frame.data[0], 
25 
s-&gt;avctx-&gt;height * s-&gt;frame.linesize[0]); 
26 
} 
27 
[...] 
28 
if (s-&gt;size &gt;= 0) { 
29 
/* originally UnpackFrame in VAG's code */ 
30 
pb = p; 
31 
meth = *pb++; 
32 
[...] 
33 
34 
dp = &amp;s-&gt;frame.data[0][frame_y * s-&gt;frame.linesize[0] 
35 
+ frame_x]; 
36 
dp_size = s-&gt;frame.linesize[0] * s-&gt;avctx-&gt;height; 
37 
pp = &amp;s-&gt;prev_frame.data[0][frame_y * 
38 
s-&gt;prev_frame.linesize[0] + frame_x]; 
39 
40 
switch (meth) { 
41 
[...] 
42 
case 2: 
43 
for (i = 0; i &lt; frame_height; i++) { 
44 
memcpy(dp, pb, frame_width); 
45 
pb += frame_width; 
46 
dp += s-&gt;frame.linesize[0]; 
47 
pp += s-&gt;prev_frame.linesize[0]; 
48 
} 
49 
break; 
50 
[...] 
51 
} 
52 
} 
53 } 

Figure 5: Discovered zero-day vulnerability 

1 static int vmdvideo_decode_frame(AVCodecContext *avctx, 
2 
void *data, int *data_size, 
3 
AVPacket *avpkt) 
4 { 
5 
const uint8_t *buf = avpkt-&gt;data; 
6 
int buf_size = avpkt-&gt;size; 
7 
VmdVideoContext *s = avctx-&gt;priv_data; 
8 
9 
s-&gt;buf = buf; 
10 
s-&gt;size = buf_size; 
11 
12 
[...] 
13 
14 
vmd_decode(s); 
15 
16 
/* make the palette available on the way out */ 
17 
memcpy(s-&gt;frame.data[1], s-&gt;palette, PALETTE_COUNT * 4); 
18 
19 
/* shuffle frames */ 
20 
FFSWAP(AVFrame, s-&gt;frame, s-&gt;prev_frame); 
21 
if (s-&gt;frame.data[0]) 
22 
avctx-&gt;release_buffer(avctx, &amp;s-&gt;frame); 
23 
24 
[...] 
25 } 

</table></figure>

			<note place="foot" n="1"> static int flic_decode_frame_8BPP(AVCodecContext *avctx,</note>
		</body>
		<back>

			<div type="acknowledgement">
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Acknowledgments</head><p>The authors gratefully acknowledge the funding from Bundesministerium f√ºr Bildung und Forschung under the project PROSEC (FKZ 01BY1145).</p></div>
			</div>

			<div type="annex">
<div xmlns="http://www.tei-c.org/ns/1.0"><head>A Exploit</head><p>For the interested reader, we provide a description of a proof-of-concept exploit developed for the identified vulnerability. The exploit demonstrates that attackers can execute arbitrary code with the privileges of the target process if the user can be enticed into opening a crafted media file. The following describes our setup.</p><p>1. The target platform is an Ubuntu Linux 10.04 LTS (Lucid Lynx), which uses Address Space Layout Randomization (ASLR), non-executable data regions and a hardened heap implementation to hinder exploitation.</p><p>2. FFmpeg is used by a number of frontends. In this study, we assume that the popular media player MPlayer is used as a frontend to FFmpeg.</p><p>Recall that the identified vulnerability allows arbitrary data to be written to locations on the heap relative to the pixel buffer dp. This allows heap management structures and the contents of other heap chunks to be overwritten. This capability is made use of in the following way.</p><p>Identifying a function pointer on the heap. A simple way of redirecting the flow of execution to arbitrary addresses is to overwrite pointers to functions known to be used after the overwrite.</p><p>A suitable pointer is stored on the heap in the codeccontext structure avctx in avctx-&gt;release buffer. This pointer is used by vmdvideo decode frame in a call on line 29 shortly after calling the vulnerable function vmd decode.</p><p>However, given that the context structure avctx is allocated at codec initialization many allocations prior to that of the pixel buffer dp, one must be able to specify negative offsets to overwrite avctx and in particular the release buffer pointer. This can be achieved as described in the next paragraph.</p><p>Crafting of frames to overwrite the pointer. Using a single video frame to exploit the vulnerability exposes a problem: The attacker-supplied values used to calculate the offset are all 16 bit integers and in summary, offsets in the interval [‚àí65535; ‚àí1] cannot be specified and thus the avctx cannot be overwritten.</p><p>To bypass this limitation, we make use of the fact that vmd decode allows frames to store an offset in s-&gt;x off, which is then subtracted from consecutive frame offsets. Thus, the vulnerability is exploited using two frames:</p><p>First frame. The first frame specifies the sign-inverted desired offset in frame x. The two other values specified by the frame frame y and frame width are set such that the vulnerable write is not triggered. The value of frame x is then stored in s-&gt;x off on line 16 and subtracted from frame x on line 19. This implies that frame x is 0 after execution of line 19, which means that the following block is not executed. The desired offset is now stored in s-&gt;x off.</p><p>Second frame. The second frame now specifies frame x and frame y to be 0, such that line 16 and 17 are not executed. On line 19, the value of s-&gt;x off stored by the previous frame is now subtracted from frame x, thereby resulting in an underflow. frame x is now negative as desired.</p><p>The copy operation on line 43 then copies an amount of attacker-supplied data specified by frame width to a location before the buffer. We can thus overwrite large portions of the heap before the buffer and in particular the release buffer pointer.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Redirection of execution.</head><p>We then make use of the fact that the target frontend MPlayer was not compiled as a position-independent executable on the target platform. Therefore, the image base of the MPlayer executable is located at a predictable address, despite address space layout randomization. This means that the flow of execution can be reliably redirected to any sequence of instructions of the MPlayer code. A suitable sequence of instructions can be identified in the MPlayer executable, which when redirected to, allows the execution of arbitrary attacker-supplied shell-commands. The following sequence is well suited for this task:</p><p>0x080cc5c2 : mov %eax,(%esp) 0x080cc5c5 : call 0x809481c &lt;system@plt&gt;</p><p>As seen on line 29, release buffer receives avctx as its first argument. To accomplish this, avctx was first moved into the register %eax and then pushed onto the stack, therefore, as the sequence of instructions is invoked, the shell commands saved at avctx are executed. Since we are able to overwrite avctx-&gt;release buffer, it is also possible to overwrite avctx. To exploit the issue, we therefore overwrite the avctx structure such that it begins with the shell commands to be executed and replaces avctx-&gt;release buffer with the address of the instruction sequence presented. Note that avctx and avctx-&gt;release buffer are 260 bytes apart, leaving enough room for shell commands.</p><p>It is noteworthy that to further stabilize this exploit, the attacker must gain a more fine grained control over the heap state. However, this simple exploit still proofs that the vulnerability can indeed be exploited on contemporary Linux systems.</p></div>			</div>
			<div type="references">

				<listBibl>

<biblStruct xml:id="b0">
	<analytic>
		<title level="a" type="main">2010-004 ffmpeg/libavcodec arbitrary offset dereference</title>
		<ptr target="http://www.ocert.org/advisories/ocert-2010-004.html" />
	</analytic>
	<monogr>
		<title level="j">Open Source Computer Emergency Response Team</title>
		<imprint>
			<date type="published" when="2011-04" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b1">
	<analytic>
		<title level="a" type="main">Rough auditing tool for security</title>
		<ptr target="https://www.fortify.com/ssa-elements/threat-intelligence/rats.html" />
	</analytic>
	<monogr>
		<title level="j">Fortify Software Inc</title>
		<imprint>
			<date type="published" when="2011-04" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b2">
	<analytic>
		<title level="a" type="main">AEG: Automatic Exploit Generation</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><surname>Avgerinos</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><forename type="middle">K</forename><surname>Cha</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">B</forename><forename type="middle">L T</forename><surname>Hao</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Brumley</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. of Network and Distributed System Security Symposium (NDSS)</title>
		<meeting>of Network and Distributed System Security Symposium (NDSS)</meeting>
		<imprint>
			<date type="published" when="2011" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b3">
	<analytic>
		<title level="a" type="main">Automated Classification and Analysis of Internet Malware</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Bailey</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Oberheide</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Andersen</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Z</forename><forename type="middle">M</forename><surname>Mao</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">F</forename><surname>Jahanian</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Nazario</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Recent Adances in Intrusion Detection (RAID)</title>
		<imprint>
			<date type="published" when="2007" />
			<biblScope unit="page" from="178" to="197" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b4">
	<analytic>
		<title level="a" type="main">Scalable, behavior-based malware clustering</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">U</forename><surname>Bayer</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><surname>Comparetti</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><surname>Hlauschek</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><surname>Kruegel</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">E</forename><surname>Kirda</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. of Network and Distributed System Security Symposium (NDSS)</title>
		<meeting>of Network and Distributed System Security Symposium (NDSS)</meeting>
		<imprint>
			<date type="published" when="2009" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b5">
	<analytic>
		<title level="a" type="main">How to design a good API and why it matters</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Bloch</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. of ACM SIGPLAN Symposium on Object-oriented Programming Systems, Languages, and Applications (OOPSLA)</title>
		<meeting>of ACM SIGPLAN Symposium on Object-oriented Programming Systems, Languages, and Applications (OOPSLA)</meeting>
		<imprint>
			<date type="published" when="2006" />
			<biblScope unit="page" from="506" to="507" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b6">
	<analytic>
		<title level="a" type="main">Casting out demons: Sanitizing training data for anomaly sensors</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">G</forename><surname>Cretu</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Stavrou</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Locasto</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Stolfo</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Keromytis</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. of IEEE Symposium on Security and Privacy</title>
		<meeting>of IEEE Symposium on Security and Privacy</meeting>
		<imprint>
			<date type="published" when="2008" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b7">
	<analytic>
		<title level="a" type="main">Harshman. Indexing by latent semantic analysis</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Deerwester</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Dumais</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">G</forename><surname>Furnas</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><surname>Landauer</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Journal of the American society for information science</title>
		<imprint>
			<biblScope unit="volume">41</biblScope>
			<biblScope unit="issue">6</biblScope>
			<biblScope unit="page" from="391" to="407" />
			<date type="published" when="1990" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b8">
	<monogr>
		<title level="m" type="main">Pattern classification</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Duda</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><forename type="middle">E</forename><surname>Hart</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><forename type="middle">G</forename><surname>Stork</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2001" />
			<publisher>John Wiley &amp; Sons</publisher>
		</imprint>
	</monogr>
	<note>second edition</note>
</biblStruct>

<biblStruct xml:id="b9">
	<analytic>
		<title level="a" type="main">Bugs as deviant behavior: A general approach to inferring errors in systems code</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Engler</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><forename type="middle">Y</forename><surname>Chen</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Hallem</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Chou</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">B</forename><surname>Chelf</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. of ACM Symposium on Operating Systems Principles (SOSP)</title>
		<meeting>of ACM Symposium on Operating Systems Principles (SOSP)</meeting>
		<imprint>
			<date type="published" when="2001" />
			<biblScope unit="page" from="57" to="72" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b10">
	<monogr>
				<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">N</forename><surname>Falliere</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">L</forename><forename type="middle">O</forename><surname>Murchu</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">E</forename><surname>Chien</surname></persName>
		</author>
		<title level="m">W32.stuxnet dossier. Symantec Corporation</title>
		<imprint>
			<date type="published" when="2011" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b11">
	<analytic>
		<title level="a" type="main">A sense of self for unix processes</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Forrest</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Hofmeyr</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Somayaji</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><surname>Longstaff</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. of IEEE Symposium on Security and Privacy</title>
		<meeting>of IEEE Symposium on Security and Privacy<address><addrLine>Oakland, CA, USA</addrLine></address></meeting>
		<imprint>
			<date type="published" when="1996" />
			<biblScope unit="page" from="120" to="128" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b12">
	<analytic>
		<title level="a" type="main">Challenging the anomaly detection paradigm: A provocative discussion</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><surname>Gates</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><surname>Taylor</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. of New Security Paradigms Workshop (NSPW)</title>
		<meeting>of New Security Paradigms Workshop (NSPW)</meeting>
		<imprint>
			<date type="published" when="2006" />
			<biblScope unit="page" from="21" to="29" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b13">
	<analytic>
		<title level="a" type="main">Pixy: A static analysis tool for detecting web application vulnerabilities</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">N</forename><surname>Jovanovic</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><surname>Kruegel</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">E</forename><surname>Kirda</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. of IEEE Symposium on Security and Privacy</title>
		<meeting>of IEEE Symposium on Security and Privacy</meeting>
		<imprint>
			<date type="published" when="2006" />
			<biblScope unit="page" from="6" to="263" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b14">
	<analytic>
		<title level="a" type="main">Anomaly detection of web-based attacks</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><surname>Kruegel</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">G</forename><surname>Vigna</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. of Conference on Computer and Communications Security (CCS)</title>
		<meeting>of Conference on Computer and Communications Security (CCS)</meeting>
		<imprint>
			<date type="published" when="2003" />
			<biblScope unit="page" from="251" to="261" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b15">
	<analytic>
		<title level="a" type="main">PR-Miner: automatically extracting implicit programming rules and detecting violations in large software code</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Z</forename><surname>Li</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Y</forename><surname>Zhou</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. of European Software Engineering Conference (ESEC)</title>
		<meeting>of European Software Engineering Conference (ESEC)</meeting>
		<imprint>
			<date type="published" when="2005" />
			<biblScope unit="page" from="306" to="315" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b16">
	<analytic>
		<title level="a" type="main">Dynamine: finding common error patterns by mining software revision histories</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">B</forename><surname>Livshits</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><surname>Zimmermann</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. of the 10th European Software Engineering Conference (ESEC)</title>
		<meeting>of the 10th European Software Engineering Conference (ESEC)</meeting>
		<imprint>
			<date type="published" when="2005" />
			<biblScope unit="page" from="296" to="305" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b17">
	<analytic>
		<title level="a" type="main">Finding security vulnerabilities in java applications with static analysis</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">V</forename><forename type="middle">B</forename><surname>Livshits</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><forename type="middle">S</forename><surname>Lam</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. of USENIX Security Symposium</title>
		<meeting>of USENIX Security Symposium</meeting>
		<imprint>
			<date type="published" when="2005" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b18">
	<analytic>
		<title level="a" type="main">Code-Red: a case study on the spread and victims of an internet worm</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Moore</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><surname>Shannon</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Brown</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. of Internet Measurement Workshop (IMW)</title>
		<meeting>of Internet Measurement Workshop (IMW)</meeting>
		<imprint>
			<date type="published" when="2002" />
			<biblScope unit="page" from="273" to="284" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b19">
	<analytic>
		<title level="a" type="main">Dynamic taint analysis for automatic detection, analysis, and signature generation of exploits on commodity software</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Newsome</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Song</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. of Network and Distributed System Security Symposium (NDSS)</title>
		<meeting>of Network and Distributed System Security Symposium (NDSS)</meeting>
		<imprint>
			<date type="published" when="2005" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b20">
	<analytic>
		<title level="a" type="main">Paragraph: Thwarting signature learning by training maliciously</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Newsome</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">B</forename><surname>Karp</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Song</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Recent Adances in Intrusion Detection (RAID)</title>
		<imprint>
			<date type="published" when="2006" />
			<biblScope unit="page" from="81" to="105" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b21">
	<analytic>
		<title level="a" type="main">Misleading worm signature generators using deliberate noise injection</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Perdisci</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Dagon</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">W</forename><surname>Lee</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><surname>Fogla</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Sharif</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. of IEEE Symposium on Security and Privacy</title>
		<meeting>of IEEE Symposium on Security and Privacy</meeting>
		<imprint>
			<date type="published" when="2006" />
			<biblScope unit="page" from="17" to="31" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b22">
	<analytic>
		<title level="a" type="main">McBoost: Boosting scalability in malware collection and analysis using statistical classification of executables</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Perdisci</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Lanzi</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">W</forename><surname>Lee</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. of Annual Computer Security Applications Conference (ACSAC)</title>
		<meeting>of Annual Computer Security Applications Conference (ACSAC)</meeting>
		<imprint>
			<date type="published" when="2008" />
			<biblScope unit="page" from="301" to="310" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b23">
	<analytic>
		<title level="a" type="main">The ghost in the browser: Analysis of web-based malware</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">N</forename><surname>Provos</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Mcnamee</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><surname>Mavrommatis</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">K</forename><surname>Wang</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">N</forename><surname>Modadugu</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. of USENIX Workshop on Hot Topics in Understanding Botnets (HotBots)</title>
		<meeting>of USENIX Workshop on Hot Topics in Understanding Botnets (HotBots)</meeting>
		<imprint>
			<date type="published" when="2007" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b24">
	<analytic>
		<title level="a" type="main">Linear-time computation of similarity measures for sequential data</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">K</forename><surname>Rieck</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><surname>Laskov</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Journal of Machine Learning Research</title>
		<imprint>
			<biblScope unit="volume">9</biblScope>
			<biblScope unit="page" from="23" to="48" />
			<date type="published" when="2008-01" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b25">
	<monogr>
		<title/>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Rohde</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Svdlibc -Doug Rohde&amp;apos;s Svd C Library</surname></persName>
		</author>
		<ptr target="http://tedlab.mit.edu/‚àºdr/SVDLIBC/" />
		<imprint>
			<date type="published" when="2011-04" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b26">
	<monogr>
		<title level="m" type="main">Introduction to Modern Information Retrieval</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">G</forename><surname>Salton</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><forename type="middle">J</forename><surname>Mcgill</surname></persName>
		</author>
		<imprint>
			<date type="published" when="1986" />
			<publisher>McGraw-Hill</publisher>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b27">
	<analytic>
		<title level="a" type="main">A vector space model for automatic indexing</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">G</forename><surname>Salton</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Wong</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><surname>Yang</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Communications of the ACM</title>
		<imprint>
			<biblScope unit="volume">18</biblScope>
			<biblScope unit="issue">11</biblScope>
			<biblScope unit="page" from="613" to="620" />
			<date type="published" when="1975" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b28">
	<analytic>
		<title level="a" type="main">All you ever wanted to know about dynamic taint analysis and forward symbolic execution (but might have been afraid to ask)</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">E</forename><surname>Schwartz</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><surname>Avgerinos</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Brumley</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. of IEEE Symposium on Security and Privacy</title>
		<meeting>of IEEE Symposium on Security and Privacy</meeting>
		<imprint>
			<date type="published" when="2010" />
			<biblScope unit="page" from="317" to="331" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b29">
	<analytic>
		<title level="a" type="main">Outside the closed world: On using machine learning for network intrusion detection</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Sommer</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">V</forename><surname>Paxson</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. of IEEE Symposium on Security and Privacy</title>
		<meeting>of IEEE Symposium on Security and Privacy</meeting>
		<imprint>
			<date type="published" when="2010" />
			<biblScope unit="page" from="305" to="316" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b30">
	<analytic>
		<title level="a" type="main">On the infeasibility of modeling polymorphic shellcode: Re-thinking the role of learning in intrusion detection systems</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Y</forename><surname>Song</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Locasto</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Stavrou</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><forename type="middle">D</forename><surname>Keromytis</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><forename type="middle">J</forename><surname>Stolfo</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Machine Learning</title>
		<imprint>
			<date type="published" when="2009" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b31">
	<monogr>
		<title level="m" type="main">Fuzzing: Brute Force Vulnerability Discovery</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Sutton</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Greene</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><surname>Amini</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2007" />
			<publisher>Addison-Wesley Professional</publisher>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b32">
	<analytic>
		<title level="a" type="main">ITS4: A static vulnerability scanner for C and C++ code</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Viega</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Bloch</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Y</forename><surname>Kohno</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">G</forename><surname>Mcgraw</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. of Annual Computer Security Applications Conference (ACSAC)</title>
		<meeting>of Annual Computer Security Applications Conference (ACSAC)</meeting>
		<imprint>
			<date type="published" when="2000" />
			<biblScope unit="page" from="257" to="267" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b33">
	<analytic>
		<title level="a" type="main">IntScope: Automatically detecting integer overflow vulnerability in x86 binary using symbolic execution</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><surname>Wang</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><surname>Wei</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Z</forename><surname>Lin</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">W</forename><surname>Zou</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. of Network and Distributed System Security Symposium (NDSS)</title>
		<meeting>of Network and Distributed System Security Symposium (NDSS)</meeting>
		<imprint>
			<date type="published" when="2009" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b34">
	<monogr>
		<title/>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><forename type="middle">A</forename><surname>Wheeler</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Flawfinder</surname></persName>
		</author>
		<ptr target="http://www.dwheeler.com/flawfinder/" />
		<imprint>
			<date type="published" when="2011-04" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b35">
	<analytic>
		<title level="a" type="main">Automatic mining of source code repositories to improve bug finding techniques</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><forename type="middle">C</forename><surname>Williams</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><forename type="middle">K</forename><surname>Hollingsworth</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Member</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE Transactions on Software Engineering</title>
		<imprint>
			<biblScope unit="volume">31</biblScope>
			<biblScope unit="page" from="466" to="480" />
			<date type="published" when="2005" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b36">
	<analytic>
		<title level="a" type="main">The developer is the enemy</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">G</forename><surname>Wurster</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><surname>Oorschot</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. of New Security Paradigms Workshop (NSPW)</title>
		<meeting>of New Security Paradigms Workshop (NSPW)</meeting>
		<imprint>
			<date type="published" when="2008" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b37">
	<monogr>
		<title level="m" type="main">Automated extraction of API usage patterns from source code for vulnerability identification</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">F</forename><surname>Yamaguchi</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2011" />
		</imprint>
		<respStmt>
			<orgName>Technische Universit√§t Berlin</orgName>
		</respStmt>
	</monogr>
<note type="report_type">Diploma thesis</note>
</biblStruct>

				</listBibl>
			</div>
		</back>
	</text>
</TEI>
