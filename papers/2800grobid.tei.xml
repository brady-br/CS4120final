<?xml version="1.0" encoding="UTF-8"?>
<TEI xmlns="http://www.tei-c.org/ns/1.0" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
xsi:schemaLocation="http://www.tei-c.org/ns/1.0 /Users/atharsefid/Desktop/grobid-0.5.3/grobid-home/schemas/xsd/Grobid.xsd"
 xmlns:xlink="http://www.w3.org/1999/xlink">
	<teiHeader xml:lang="en">
		<encodingDesc>
			<appInfo>
				<application version="0.5.3" ident="GROBID" when="2020-09-29T02:52+0000">
					<ref target="https://github.com/kermitt2/grobid">GROBID - A machine learning software for extracting information from scholarly documents</ref>
				</application>
			</appInfo>
		</encodingDesc>
		<fileDesc>
			<titleStmt>
				<title level="a" type="main">Publish-Pay-Subscribe Protocol for Payment-driven Edge Computing</title>
			</titleStmt>
			<publicationStmt>
				<publisher/>
				<availability status="unknown"><licence/></availability>
			</publicationStmt>
			<sourceDesc>
				<biblStruct>
					<analytic>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Sankar</forename><surname>Gowri</surname></persName>
							<affiliation key="aff0">
								<orgName type="institution">University of Southern California</orgName>
							</affiliation>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Sharon</forename><forename type="middle">L G</forename><surname>Ramachandran</surname></persName>
							<affiliation key="aff0">
								<orgName type="institution">University of Southern California</orgName>
							</affiliation>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Bhaskar</forename><surname>Contreras</surname></persName>
							<affiliation key="aff0">
								<orgName type="institution">University of Southern California</orgName>
							</affiliation>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Krishnamachari</surname></persName>
							<affiliation key="aff0">
								<orgName type="institution">University of Southern California</orgName>
							</affiliation>
						</author>
						<title level="a" type="main">Publish-Pay-Subscribe Protocol for Payment-driven Edge Computing</title>
					</analytic>
					<monogr>
						<imprint>
							<date/>
						</imprint>
					</monogr>
				</biblStruct>
			</sourceDesc>
		</fileDesc>
		<profileDesc>
			<abstract>
				<p>IoT applications are starting to rely heavily on edge computing due to the advent of low-power and high data-rate wireless communication technologies such as 5G and the processing capability of GPU-driven edge platforms. However, the computation and the data communication model for the edge computing applications are quite diverse, which limits their interoperability. An interoperable edge computing architecture with a versatile communication model would lead to the development of innovative and incentive-driven edge computing applications by combining various data sources from a wide array of devices. In this paper, we present an edge computing architecture by extending the publish-subscribe protocol with support for incentives. Our novel publish-pay-subscribe protocol enables the data producers (publishers) to sell their data with data consumers and service providers (subscribers). The proposed architecture not only allows the device owners to gain incentive but also enable the service providers to sell the processed data with one or more data consumers. Our proof-of-concept implementation using AEDES publish-subscribe broker and Ethereum cryptocurrency shows the feasibility of publish-pay-subscribe broker and its support for data-driven and incentive-based edge computing applications .</p>
			</abstract>
		</profileDesc>
	</teiHeader>
	<text xml:lang="en">
		<body>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="1">Introduction</head><p>Applications in the area of connected and autonomous vehicles <ref type="bibr" target="#b6">[7]</ref> and smart cities <ref type="bibr" target="#b13">[14]</ref> are considering edge computing to offload heavy computations and to aggregate information from multiple data sources. Such a model not only reduce the response time but also reduce the bandwidth usage by limiting the data sent to the cloud. For example, the connected and autonomous vehicles can share their LIDAR (Light Detection and Ranging) data to neighboring edge devices for creating a real-time traffic map for the cars in the geographical neighborhood.</p><p>A wide-array of edge computing architectures and data communication models have been presented in the literature <ref type="bibr" target="#b4">[5,</ref><ref type="bibr" target="#b11">12,</ref><ref type="bibr" target="#b12">13,</ref><ref type="bibr" target="#b14">15]</ref>. The state-of-the-art approaches combine publish-subscribe communication model with microservices architecture to build services at the edge <ref type="bibr" target="#b14">[15]</ref>, but such architectures either assume that the data owners share their data with the services or the data and service owners belong to the same organization. Such models limit the effectiveness of the data and lack interoperability since the organization that owns the infrastructure may define a custom data format to build edge services.</p><p>Besides, the edge devices including embedded sensors, smartphones, cars, and traffic signals gather valuable data from operational environments. Aggregation of data at the edge server increases the utility of the data. However, device owners have no incentive to share their data. Emerging data marketplaces <ref type="bibr" target="#b7">[8]</ref><ref type="bibr" target="#b8">[9]</ref><ref type="bibr" target="#b9">[10]</ref> discuss the benefits of data marketplaces and explains how such marketplaces enable the application developers and service providers to build novel and innovative applications by buying data streams from devices. Marketplace for machine learning tasks is also presented in the literature <ref type="bibr" target="#b1">[2]</ref> which explains how the data can be used to build robust machine learning models. Existing literature motivates the need to integrate incentives for building new classes of applications and edge services by acquiring data from multiple sellers at the edge.</p><p>In this paper, we propose an edge computing architecture with built-in support for incentives. Our novel publish-paysubscribe payment protocol allows the device owners to gain incentive for publishing their data to a data broker. The subscriber has to pay the fee set by the publisher before the data consumption. We introduce an edge computing architecture using the publish-pay-subscribe (pub-pay-sub) broker to create a value chain, wherein the device owners are incentivized for sharing their data with service providers, and the service providers may sell the processed data feedback to one or more device owners. Application developers can deploy computation services or containers on the edge platform and create a subscription channel to a data broker for buying valuable application data. The integration of a publish-subscribe communication pattern and the introduction of data payments allow the edge service providers and consumers to build dataintensive edge computing applications. Note that the proposed pub-pay-sub protocol is also applicable to services and applications operate in a cloud environment, but we focus on the edge computing case in this version of the paper. Our proofof-concept implementation using AEDES publish-subscribe broker and Ethereum cryptocurrency shows the feasibility of publish-pay-subscribe broker.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2">Motivation and Related Work</head></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.1">Publish-Subscribe Communication Pattern for Edge Computing</head><p>The publish-subscribe communication pattern follows a centralized architecture, wherein the devices or data producers publish their data to a data broker using a human-readable topic string. Applications subscribe to the data by registering their interest to a topic. The lightweight nature of publishsubscribe clients coupled with the broker's ability to isolate the publishers and subscribers in space, time, and synchronization <ref type="bibr" target="#b5">[6]</ref> make this communication pattern more popular in distributed applications. The application of publish-subscribe communication pattern to edge computing allows the application developers to build scalable and interoperable edge computing applications. Data producers including embedded devices, sensors, and connected vehicles publish the data to a broker. One or more applications or services can consume the data from the broker by merely subscribing to the relevant topic. The publish-subscribe communication pattern is widely discussed in the context of edge computing <ref type="bibr" target="#b4">[5]</ref>.</p><p>Building edge computing application using a publishsubscribe communication enables the application developers to create portable and lightweight services at the edge for machine learning, data aggregation, and real-time control by merely subscribing to the data sources from a broker. Contemporary edge application architectures focusing on customized network stack require a dedicated client-side software for sending data to the nearest edge service. Such architectures result in a collection of edge service providers each following their architecture and a messaging model for delivering services at the edge. We argue that the integration of payment to the publish-subscribe communication model for edge computing provides the application developers and the edge service providers to create a scalable and interoperable system for edge computing.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.2">Support for Data Economy</head><p>Payments, incentives, and pricing models have been discussed for IoT and edge computing in the literature <ref type="bibr" target="#b1">[2,</ref><ref type="bibr" target="#b7">[8]</ref><ref type="bibr" target="#b8">[9]</ref><ref type="bibr" target="#b9">[10]</ref>. With the introduction of low-cost sensors and the innovations in the connected vehicles sector, a large number of devices are expected to collect data from their operational environment. Sharing these data with other application developers to create services at the edge would lead to the development of innovative data-driven applications powered by machine learning and artificial intelligence algorithms. Note that the data infrastructure is critical to train and create accurate models <ref type="bibr" target="#b1">[2]</ref>. Protocols such as SDPP <ref type="bibr" target="#b10">[11]</ref> allow the device owners to sell their data using a client-server architecture. The publishsubscribe communication model is widely considered in edge computing scenario, but the existing literature does not integrate payment to the publish-subscribe model, which we believe is essential to support the emerging data economy.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3">Edge Computing with Publish-Subscribe Payment Protocol</head><p>We propose an architecture for edge services using the publishsubscribe payment protocol. <ref type="figure" target="#fig_0">Figure 1</ref> shows our proposed architecture, which consists of three layers: Publishers and Subscribers: At the south-side of the broker, we have a collection of publishers and subscribers. Publishers are edge devices with the capability to publish data to brokers, and they can charge for their data by setting a price. A subscriber at the south-side may buy data from a broker. Service providers (from the north side) publish their processed data feed for other subscribers at the south-side.</p><p>Broker: A broker is a centralized software entity that handles the publishers and subscribers. Contemporary brokers directly forward the published data to the subscribers, and there is no support for the publishers to monetize the data. In this work, we extend the traditional publish-subscribe communication model with payment support, wherein the publishers have the opportunity to charge for their data and subscribers are required to pay the charge set by the publishers to consume the data. We assume that the broker is hosted on an edge server. Services can be built around the broker, but we do not define where the services should be hosted. It is up to the application developers to host their services on edge, cloud, or even on the edge devices at the south side.</p><p>Service Providers: At the north end of the broker, we have a collection of service providers for edge computing. An example could be a collection of connected cars publishing their LIDAR data to the nearest edge service provider to create a real-time traffic map of a given region. The service provider can sell the processed information in the form of a real-time map to the cars on the road. Combining the data from multiple vehicles allow the vehicles on the road to get a live traffic update on freeways. Such an application can be developed using any architecture, but the loose coupling provided by the publish-subscribe communication model enables the vehicles to share the same LIDAR information with machine learning and AI algorithms to create models for autonomous cars. <ref type="figure" target="#fig_1">Figure 2</ref> shows the value that the pub-pay-sub broker adds to the edge computing applications.</p><p>The architecture of publish-pay-subscribe broker in <ref type="figure" target="#fig_0">Fig- ure 1</ref> shows that a) the traditional publish-subscribe communication model requires extensions to handle payments and b) a reference service model is needed to build novel edge services to buy and sell data streams from a broker. The rest of the section discusses these building blocks. <ref type="figure" target="#fig_2">Figure 3</ref> shows the architecture of our novel publish-paysubscribe broker. We will explain our architecture through the interaction sequence below:</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.1">Publish-Pay-Subscribe Protocol</head><p>1. Publisher connects to Broker: Contemporary publishers connect with a broker using a credential provided by the broker. The broker manager provides the credentials including the URI, socket port no, username, and password. We extend the connection operation by introducing the payment information block, which includes the account name to which the payment should be made and the currencies (see Section 5).</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.">Broker accepts the connection from Publisher:</head><p>The broker accepts the connection by checking the credentials and store the payment information to a database.</p><p>3. Publisher starts to Publish: When a publisher starts to publish the data to the broker, it will include a topic, message, and the price per message, if applicable. Note that the publisher can decide to charge for the data if he/she wishes to. Note the publishers may have to choose a reasonable price to encourage the subscribers to buy the data (see Section 5).</p><p>4. Broker registers the Topic: When a publisher sends a message including topic and payment information, the broker checks whether there are any subscribers interested in consuming the data. If there are interested subscribers, the broker charges each subscriber based on the amount set by the publisher. The announcement of topics and price has to be implemented using a novel announce/query function (see Section 5).</p><p>5. Subscriber connects to Broker: A subscriber connects to the using a credential and the account information that he/she wishes to use for making payments. The broker stores the information on its storage to handle payments in the future. The subscriber is assumed to know the topic he/she wants to subscribe to, but we plan to implement a query/announce function to inform the subscribers of the new topics and their price(see Section 5). 6. Subscriber subscribes to a Topic: A subscriber subscribes to the topic, and he/she agrees to pay the fee charged by the publisher for the data.</p><p>7. Broker charges the Subscriber for Messages: Whenever the broker forwards the priced data to a subscriber, it charges the subscriber by transferring the payment from the subscriber's account to the publisher's account. <ref type="figure" target="#fig_2">Fig- ure 3</ref> shows the introduction of metering and payment to the message channel, which is responsible for charging the subscriber as the data flows from the publisher to the subscriber.</p><p>The above steps explain the novel publish-pay-subscribe protocol. Note that the broker-owner or manager recuperates the operational cost by charging a transaction fee from the publisher and the subscriber. We explain how to integrate these protocol with edge services in the next subsection. <ref type="figure" target="#fig_3">Figure 4</ref> shows the service architecture for the publishpay-subscribe protocol. Our publish-pay-subscribe protocol charges the data consumers for their subscriptions. Unlike traditional pub-sub based service architectures, our approach requires the integration of payment to the subscription channel. As described in Step 5 of Section 3.1, the subscriber has to share the account information and the payment currency at the connection phase, and it should agree to pay for the data when buying a priced data. Note that the architecture we present does not require subscribers to share any metadata with other subscribers, including what data they are paying for and how much. Service providers can develop services at the edge using microservices architecture or other SaaS models as long as they use our modified subscriber client to pay for the data. Besides, the service providers can sell the processed data to the devices by publishing the data back to the broker with the price attached it. This model allows the device owners to get an incentive for selling their data and the service providers to sell the processed data by including the processing cost to the price. The applications, whether it is machine learning, AI, or other services, have to define channels to publish and subscribe based on their underlying application.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.2">Building Services around Publish-PaySubscribe Protocol</head></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4">Preliminary Implementation and Evaluation</head><p>We implemented a proof-of-concept publish-pay-subscribe broker using AEDES <ref type="bibr" target="#b0">[1]</ref>, which is a barebone publishsubscribe broker based on MQTT specifications <ref type="bibr" target="#b3">[4]</ref>. Our proof-of-concept implementation is available as an opensource software here: https://github.com/ANRGUSC/ pspp. The current version provides support for publishing data with pricing information to the broker, subscribe to paid data, and the support for payment at the broker. For payment, we used Ethereum (ETH) as a cryptocurrency on Ropsten Ethereum testnet. We evaluated our proof-of-concept implementation on a laptop, which influences the end-to-end delay due to lack of network routers and hops on the route. The introduction of payment to the publish-subscribe channel adds a delay since the broker has to process the published data stream and charge the subscriber as the data flow between the publishers and subscribers. Our implementation handles the payment for each data stream in the background while the data is relayed to the subscriber, which means the subscriber may receive the data before the payment is debited from his/her account. The metering module is responsible for tracking the data flow and charging the subscribers. <ref type="figure" target="#fig_5">Fig- ure 5</ref> compares the end-to-end delay of the publish-subscribe broker with the publish-pay-subscribe broker. The invocation of the payment handler increases the end-to-end delay. As the number of messages per second increases, the end-to-end delay also increases due to the payment handling process and the buffering delay.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.1">Payment per Each Data Point vs. Aggregated Payment</head><p>Triggering the payment handler for each data point is expensive for two reasons. First, the broker has to invoke the payment API to charge the subscriber, which adds a small computation and networking overhead to the broker. Second, the payment platforms charge a transaction fee for each transaction. To minimize the transaction and resource overhead, we introduce the k-parameter, which charges the subscriber for every k th message. By reducing the number of payment triggers, the broker can handle the messages much faster with a small delay in the order of milliseconds as shown in <ref type="figure" target="#fig_5">Figure 5</ref>. We believe that the trend will remain the same on evaluations involving brokers, publishers, and subscribers running on a  large network.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.2">Message Size Limitations for Services</head><p>Our evaluation using AEDES broker supported a message size of up to 256 MB, which means even data from cameras and other large data rate sensors can publish data to the publish-pay-subscribe broker. Service providers can build a large collection of applications using the data collected using publish-pay-subscribe broker. Note that the 256 MB limit is defined in the MQTT standard <ref type="bibr" target="#b3">[4]</ref>.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5">Open Issues</head></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5.1">Payment Currencies</head><p>We provide support for both fiat and cryptocurrencies at the broker. Therefore, the publisher can choose their currency as long as the broker has the library to handle the payment transactions for the selected currency. Cryptocurrencies such as Ethereum and IOTA are suitable for microtransactions, but such platforms have a higher transaction cost and take tens of seconds to process the transactions.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5.2">Processing and Pricing of Data</head><p>In our current version, we restrict the broker from processing the data to minimize the processing overhead. The service providers at the north-side of the broker can buy the data from a broker and process it before reselling as shown in <ref type="figure" target="#fig_3">Figure 4</ref>. Allowing the publishers to decide on the price for the data may result in the data not being purchased by subscribers if the publisher charges a very high price. At the other side, the data owners may not be willing to give away their ownership to the broker to let the broker manager select the price for data/topics. We are investigating different models for pricing to help the data owners to preserve their ownership while choosing a satisfactory price for the data. We are exploring a concept called "discount code" to allow a specific set of subscribers to get instant access to the data. A monthly subscription model with an unlimited number of subscriptions is also a possibility. Also, we intend to explore the ideas of dynamic, differentiated pricing and auctions in our future work.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5.3">Rating</head><p>A rating system is essential to keep track of the behavior of the publishers and subscribers and to weed out dishonest buyers or sellers <ref type="bibr" target="#b2">[3]</ref>. We plan to explore rating framework to the pub-pay-sub protocol in our future work.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="6">Conclusion</head><p>In this paper, we have presented an edge computing architecture based on a novel publish-pay-subscribe protocol. The proposed edge computing architecture built using pub-paysub protocol allows service providers to buy data from a large collection of data owners by paying incentives. We have presented the architecture involving publishers, subscribers, service providers, and broker and explained how the publishpay-subscribe protocol could be used to create value-added services at the edge. Our preliminary implementation using AEDES publish-subscribe broker and Ethereum cryptocurrency showed the feasibility of publish-pay-subscribe protocol. We believe that our publish-pay-subscribe protocol has the potential to impact future edge computing applications as we step into the era where "data is the new oil".</p></div><figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_0"><head>Figure 1 :</head><label>1</label><figDesc>Figure 1: Publish-Pay-Subscribe based Edge Computing.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_1"><head>Figure 2 :</head><label>2</label><figDesc>Figure 2: Value Chain Created by Publish-Pay-Subscribe Protocol based Edge Computing.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_2"><head>Figure 3 :</head><label>3</label><figDesc>Figure 3: Publish-Pay-Subscribe Communication Model.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_3"><head>Figure 4 :</head><label>4</label><figDesc>Figure 4: Service architecture for Publish-Pay-Subscribe Protocol.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_4"><head>:</head><label></label><figDesc>Transaction Fees for Pub-Pay-Sub Broker with K=1 and K=10.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_5"><head>Figure 5 :</head><label>5</label><figDesc>Figure 5: Service architecture for Publish-Pay-Subscribe Protocol.</figDesc></figure>
		</body>
		<back>

			<div type="acknowledgement">
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Acknowledgments</head><p>This material is based in part upon work supported by Defense Advanced Research Projects Agency (DARPA) under Contract No. HR001117C0053. Any views, opinions, and/or findings expressed are those of the author(s) and should not be interpreted as representing the official views or policies of the Department of Defense or the U.S. Government.</p></div>
			</div>

			<div type="references">

				<listBibl>

<biblStruct xml:id="b0">
	<monogr>
		<title/>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Aedes-A</forename><surname>Barebone</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Broker</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2019" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b1">
	<monogr>
		<title level="m" type="main">A marketplace for data: An algorithmic solution</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Anish</forename><surname>Agarwal</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Munther</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Tuhin</forename><surname>Dahleh</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Sarkar</surname></persName>
		</author>
		<idno>abs/1805.08125</idno>
		<imprint>
			<date type="published" when="2018" />
			<publisher>CoRR</publisher>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b2">
	<monogr>
		<title level="m" type="main">Solving the buyer and seller&apos;s dilemma: A dual-deposit escrow smart contract for provably cheat-proof delivery and payment for a digital good without a trusted mediator</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Aditya</forename><surname>Asgaonkar</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Bhaskar</forename><surname>Krishnamachari</surname></persName>
		</author>
		<idno>abs/1806.08379</idno>
		<imprint>
			<date type="published" when="2018" />
			<publisher>CoRR</publisher>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b3">
	<monogr>
		<title level="m" type="main">Mqtt version 3.1. 1. OASIS standard</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Andrew</forename><surname>Banks</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Rahul</forename><surname>Gupta</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2014" />
			<biblScope unit="volume">29</biblScope>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b4">
	<analytic>
		<title level="a" type="main">A pub/sub-based fog computing architecture for internetof-vehicles</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Chun</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Shin</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Seo</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Eom</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Jung</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">K</forename><surname>Lee</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">2016 IEEE International Conference on Cloud Computing Technology and Science (CloudCom)</title>
		<imprint>
			<date type="published" when="2016-12" />
			<biblScope unit="page" from="90" to="93" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b5">
	<analytic>
		<title level="a" type="main">The many faces of publish/subscribe</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Patrick</forename><surname>Th</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Pascal</forename><forename type="middle">A</forename><surname>Eugster</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Rachid</forename><surname>Felber</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Anne-Marie</forename><surname>Guerraoui</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Kermarrec</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">ACM Comput. Surv</title>
		<imprint>
			<biblScope unit="volume">35</biblScope>
			<biblScope unit="issue">2</biblScope>
			<biblScope unit="page" from="114" to="131" />
			<date type="published" when="2003-06" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b6">
	<analytic>
		<title level="a" type="main">Information-centric mobile edge computing for connected vehicle environments: Challenges and research directions</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Dennis</forename><surname>Grewe</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Marco</forename><surname>Wagner</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Mayutan</forename><surname>Arumaithurai</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Ioannis</forename><surname>Psaras</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Dirk</forename><surname>Kutscher</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the Workshop on Mobile Edge Communications</title>
		<meeting>the Workshop on Mobile Edge Communications</meeting>
		<imprint>
			<publisher>ACM</publisher>
			<date type="published" when="2017" />
			<biblScope unit="page" from="7" to="12" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b7">
	<analytic>
		<title level="a" type="main">I3: An iot marketplace for smart communities</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Jerry</forename><surname>Bhaskar Krishnamachari</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Seon Ho</forename><surname>Power</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Cyrus</forename><surname>Kim</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Shahabi</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 16th Annual International Conference on Mobile Systems, Applications, and Services</title>
		<meeting>the 16th Annual International Conference on Mobile Systems, Applications, and Services</meeting>
		<imprint>
			<publisher>ACM</publisher>
			<date type="published" when="2018" />
			<biblScope unit="page" from="498" to="499" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b8">
	<analytic>
		<title level="a" type="main">Data marketplace for internet of things</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Krešimir</forename><surname>Mišura</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Mario</forename><surname>Žagar</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">2016 International Conference on Smart Systems and Technologies (SST)</title>
		<imprint>
			<publisher>IEEE</publisher>
			<date type="published" when="2016" />
			<biblScope unit="page" from="255" to="260" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b9">
	<analytic>
		<title level="a" type="main">The emerging internet of things marketplace from an industrial perspective: A survey</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Charith</forename><surname>Perera</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Chi</forename><forename type="middle">Harold</forename><surname>Liu</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Srimal</forename><surname>Jayawardena</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE Transactions on Emerging Topics in Computing</title>
		<imprint>
			<biblScope unit="volume">3</biblScope>
			<biblScope unit="issue">4</biblScope>
			<biblScope unit="page" from="585" to="598" />
			<date type="published" when="2015" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b10">
	<analytic>
		<title level="a" type="main">Streaming data payment protocol (sdpp) for the internet of things</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Rahul</forename><surname>Radhakrishnan</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Bhaskar</forename><surname>Krishnamachari</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Workshop on Blockchain for the IoT (BIoT)</title>
		<imprint>
			<date type="published" when="2018" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b11">
	<analytic>
		<title level="a" type="main">Emma: Distributed qos-aware mqtt middleware for edge computing applications</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><surname>Rausch</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Nastic</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Dustdar</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">2018 IEEE International Conference on Cloud Engineering (IC2E)</title>
		<imprint>
			<date type="published" when="2018-04" />
			<biblScope unit="page" from="191" to="197" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b12">
	<analytic>
		<title level="a" type="main">Combining mobile and fog computing: Using coap to link mobile device clouds with fog computing</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">H</forename><surname>Shi</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">N</forename><surname>Chen</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Deters</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">2015 IEEE International Conference on Data Science and Data Intensive Systems</title>
		<imprint>
			<date type="published" when="2015-12" />
			<biblScope unit="page" from="564" to="571" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b13">
	<analytic>
		<title level="a" type="main">IEEE. Personal use of this material is permitted. Permission from IEEE must be obtained for all other users, including reprinting/ republishing this material for advertising or promotional purposes, creating new collective works for resale or redistribution to servers or lists</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><surname>Taleb</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Dutta</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Ksentini</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">H</forename><surname>Iqbal</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Flinck</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE Communications Magazine</title>
		<imprint>
			<biblScope unit="volume">55</biblScope>
			<biblScope unit="issue">3</biblScope>
			<date type="published" when="2017-03" />
		</imprint>
	</monogr>
	<note>Mobile edge computing potential in making cities smarter. or reuse of any copyrighted components of this work in other works</note>
</biblStruct>

<biblStruct xml:id="b14">
	<monogr>
		<title level="m" type="main">Osmotic computing: A new paradigm for edge/cloud integration</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Villari</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Fazio</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Dustdar</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">O</forename><surname>Rana</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Ranjan</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2016-11" />
			<publisher>IEEE Cloud Computing</publisher>
			<biblScope unit="volume">3</biblScope>
			<biblScope unit="page" from="76" to="83" />
		</imprint>
	</monogr>
</biblStruct>

				</listBibl>
			</div>
		</back>
	</text>
</TEI>
