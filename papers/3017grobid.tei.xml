<?xml version="1.0" encoding="UTF-8"?>
<TEI xmlns="http://www.tei-c.org/ns/1.0" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
xsi:schemaLocation="http://www.tei-c.org/ns/1.0 /Users/atharsefid/Desktop/grobid-0.5.3/grobid-home/schemas/xsd/Grobid.xsd"
 xmlns:xlink="http://www.w3.org/1999/xlink">
	<teiHeader xml:lang="en">
		<encodingDesc>
			<appInfo>
				<application version="0.5.3" ident="GROBID" when="2020-09-29T02:57+0000">
					<ref target="https://github.com/kermitt2/grobid">GROBID - A machine learning software for extracting information from scholarly documents</ref>
				</application>
			</appInfo>
		</encodingDesc>
		<fileDesc>
			<titleStmt>
				<title level="a" type="main">Automating Context-Based Access Pattern Hint Injection for System Performance and Swap Storage Durability</title>
			</titleStmt>
			<publicationStmt>
				<publisher/>
				<availability status="unknown"><licence/></availability>
			</publicationStmt>
			<sourceDesc>
				<biblStruct>
					<analytic>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Seongjae</forename><surname>Park</surname></persName>
							<affiliation key="aff0">
								<orgName type="institution">Seoul National University</orgName>
							</affiliation>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Yunjae</forename><surname>Lee</surname></persName>
							<affiliation key="aff0">
								<orgName type="institution">Seoul National University</orgName>
							</affiliation>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Moonsub</forename><surname>Kim</surname></persName>
							<affiliation key="aff0">
								<orgName type="institution">Seoul National University</orgName>
							</affiliation>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Heon</forename><forename type="middle">Y</forename><surname>Yeom</surname></persName>
							<affiliation key="aff0">
								<orgName type="institution">Seoul National University</orgName>
							</affiliation>
						</author>
						<title level="a" type="main">Automating Context-Based Access Pattern Hint Injection for System Performance and Swap Storage Durability</title>
					</analytic>
					<monogr>
						<imprint>
							<date/>
						</imprint>
					</monogr>
				</biblStruct>
			</sourceDesc>
		</fileDesc>
		<profileDesc>
			<abstract>
				<p>Memory pressure is inevitable as the size of working sets is rapidly growing while the capacity of dynamic random-access memory (DRAM) is not. Meanwhile, storage devices have evolved so that their speed is comparable to the speed of DRAM while their capacity scales are comparable to that of hard disk drives (HDD). Thus, hierarchial memory systems configuring DRAM as the main memory and high-end storages as swap devices will be common. Due to the unique characteristics of these modern storage devices, the swap target decision should be optimal. It is essential to know the exact data access patterns of workloads for such an optimal decision, although underlying systems cannot accurately estimate such complex and dynamic patterns. For this reason, memory systems allow programs to voluntarily hint their data access pattern. Nevertheless, it is exhausting for a human to manually figure out the patterns and embed optimal hints if the workloads are huge and complex. This paper introduces a compiler extension that automatically optimizes a program to voluntarily hint its dynamic data access patterns to the underlying swap system using a static/dynamic analysis based profiling result. To our best knowledge, this is the first profile-guided optimization (PGO) for modern swap devices. Our empirical evaluation of the scheme using realistic workloads shows consistent improvement in performance and swap device lifetime up to 2.65 times and 2.98 times, respectively.</p>
			</abstract>
		</profileDesc>
	</teiHeader>
	<text xml:lang="en">
		<body>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="1">Introduction</head><p>As modern workloads such as clouds, big data, and machine learning are becoming more widespread, the size of working sets is rapidly growing <ref type="bibr" target="#b13">[17,</ref><ref type="bibr" target="#b26">29]</ref>. Compared to this, the size of the main memory (DRAM) in a single physical machine is even relatively shrinking <ref type="bibr" target="#b26">[29]</ref>. Furthermore, cloud systems, one of the prevalent and promising computing environments, usually recommend memory overcommitment <ref type="bibr" target="#b7">[11]</ref>. This trend implies that the main memory alone will not be able to accommodate all of the working set data. Fortunately, modern storage devices, such as solid state drives (SSD) or non-volatile memory (NVM), have rapidly evolved. These devices are fast enough to be compared even to DRAM and large enough to be even compared with HDD <ref type="bibr" target="#b1">[2,</ref><ref type="bibr" target="#b3">6]</ref>. Thus, computing systems utilizing hierarchical memory constructed with DRAM and fast storage devices will likely spread widely in the near future.</p><p>For this reason, various companies and researchers have proposed their design schemes <ref type="bibr" target="#b8">[12,</ref><ref type="bibr" target="#b10">14,</ref><ref type="bibr" target="#b18">21]</ref> for such hierarchical memory systems. Despite the remarkable improvements that such designs provide, many of them cannot be instantly adapted in commodity systems because their new schemes usually require complex modifications. In contrast, the swap system can readily serve as a hierarchical memory as almost every commodity system has embedded and used it, even decades ago. That said, the swap system should be optimized because it is designed for HDDs rather than modern storage devices <ref type="bibr" target="#b21">[24]</ref>, and there are many differences in the characteristics of HDD and modern storage devices. Writes for those are slower than reads; they may even be worn out if the total number of writes for them exceeds a limit.</p><p>The most important part of the hierarchical memory system is the decision of a location for each data item. Items that will be frequently accessed should be in the main memory (DRAM), and the number of writes to the auxiliary memory (swap device) should be minimized. The swap system in the Linux kernel has been employing a pseudo least recently used (LRU) technique <ref type="bibr" target="#b14">[18]</ref> for swap target decision, and various alternative schemes also exist <ref type="bibr" target="#b9">[13,</ref><ref type="bibr" target="#b23">26,</ref><ref type="bibr" target="#b24">27]</ref>. Nevertheless, such estimation-based schemes cannot make the optimal decision for programs with unpredictable dynamic data access patterns.</p><p>For this reason, most operating systems provide special system calls <ref type="bibr">[3,</ref><ref type="bibr">5]</ref> that allow user programs to voluntarily hint their data access patterns for a specific memory region to the underlying memory system. For example, the mlock() system call <ref type="bibr">[5]</ref> forces page frames for a specified memory region to be locked in the main memory. The correct use of these system calls can significantly improve performance of memory-intensive workloads and the durability of swap devices. However, it is exhaustive for a human to manually analyze detailed dynamic data access patterns of a huge and complex program. Worse yet, modifying the program to voluntarily provide the optimal hints to an underlying swap system with minimal overhead is excessively hard as well.</p><p>We introduce a data access pattern hint injecting compiler extension, DAPHICX, which aims to automate such tasks. It receives a program source code and analyzes its data access patterns via static/dynamic analysis based profiling. In detail, the profiling is based on program execution contexts because the dynamic data access pattern of a code section depends on its execution context. Though the context-based profiling guarantees high accuracy, the profiling result is too large and verbose. Therefore, directly providing the information to the underlying swap system can result in an excessive overhead. To mitigate the overhead, DAPHICX optimizes the large amount verbose information into compact and meaningful hints. Using the hints, it injects system call invocations into the program so that the generated program voluntarily notifies the optimized hints to the underlying swap system. To our best knowledge, this is the first profile-guided optimization (PGO) <ref type="bibr" target="#b6">[9]</ref> for a swap system employing modern storage devices.</p><p>We implemented the prototype based on LLVM <ref type="bibr" target="#b5">[8]</ref> and evaluated it with a number of realistic memory-intensive workloads. The evaluation results showed consistent improvement of performance and swap device lifetime of up to 2.65 and 2.98 times, respectively.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2">DAPHICX: Data Access Pattern Hint Injecting Compiler eXtension</head><p>The overall architecture of a system employing the DAPHICX is shown in <ref type="figure" target="#fig_0">Figure 1</ref>. Because the DAPHICX is a compiler extension, it essentially works as a part of a compiler, which receives the source code of a program as an input and returns an executable binary file as an output. The DAPHICX profiles dynamic the data access patterns of a given program, decides which hints to give to the underlying swap system, and injects system call invocation code into the executable binary that transfers the hints to the underlying swap system. After, the hint is transferred to the underlying swap system when the hint-injected program is executed. Then, the swap system places data in the DRAM or swap devices based on the received hints.  the data access pattern also depends on the context, the DAPH-ICX first extracts the execution context information from the received program via static analysis. In detail, it constructs an execution flow tree by following the execution flow of a given source code. We call the tree a context tree. Listing 1 and <ref type="figure" target="#fig_2">Figure 2</ref> show an example program source code and its context tree, respectively. In this example, executions of bar() from foo() and from main() are distinguished as different contexts.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.1">Data Access Pattern Profiling</head><p>After the extraction of the context tree, it identifies memory objects in the program based on the contexts where they are allocated. In other words, a memory region allocated from a different execution context is identified as a different memory object. Finally, it injects memory access profiling code, which records the number of accesses to each memory object during the execution of each context into the program and then executes the profiling code injected program. After this execution completes, users can finally access the detailed data access patterns of the program.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.2">Small Contexts to Meaningful Phases</head><p>One straightforward approach is notifying the data access pattern of each context to the underlying swap system just before the context starts execution. However, because the hinting operation itself also has an inherent overhead, this naive approach can induce significant overhead if the execution time of each context is not long enough to conceal the overhead of the hinting operation. In actuality, such cases are common. For example, the workload of the simulation environment for quantum chromodynamics <ref type="bibr" target="#b0">[1]</ref> that we use in Section 3 completes running in about 300 seconds, and it changes its context more than a billion times. This measurement implies the fact that each context in the application consumes less than one microsecond on average. Thus, if notifying a data access pattern for a context requires more than one microsecond, execution of the hint-injected binary will be dominated by the execution of those hinting opera-  tions. To mitigate such overheads, the DAPHICX integrates small or meaningless contexts into bigger and meaningful ones, which we call phases, based on two metrics. The first metric is the execution time of each context. If the execution time of a context is shorter than a pre-defined threshold, the context is merged into its parent context until the execution time of the merged context exceeds the threshold. The second metric is the data access pattern similarity. If a context and its parent context have similar data access patterns, we merge them into one phase to further minimize meaningless hint notification overheads. Finally, the DAPHICX injects the data access pattern hinting code for each phase into the program.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.3">Hinting Data Access Pattern</head><p>Among system calls, we use mlock() and munlock() system calls <ref type="bibr">[5]</ref> to hint the data access pattern to the swap system. In detail, those system calls are used to notify important and unimportant memory objects respectively, as mlock() guarantees page frames for the specified memory region to be locked in the main memory while munlock() invalidates those guarantees.</p><p>For the selection of memory objects to be locked in, we calculate a priority for each memory object based on the following two observations. By locking an object, the program (1) takes benefits from the increased DRAM hit by the number of accesses to the object and (2) sacrifices available memory by the size of the object. Consequently, rarely accessed and/or large memory objects should not be locked in and vice versa. Based on this simple idea, we designed Equation 1 for the prioritization of memory objects. The priority of an object (priority(ob ject)) becomes greater as the number of accesses to the object (ob ject.nr_accesses) increases and the size of the object (ob ject.mem_size) becomes smaller. α and β control the growth rate of each metric's impact, respectively. priority(ob ject) = ob ject.nr_accesses α ob ject.mem_size β</p><p>After assigning a priority score to every object, we select a group of important memory objects to be placed in the main memory for each phase. The total size of the selected objects should be equal to or smaller than that of the available main memory, and the sum of the priority of those objects should be the highest among every possible selection. This requirement is similar to the knap-sack problem <ref type="bibr" target="#b19">[22]</ref>. Because the knapsack problem is NP-hard, and we need to trade-off between the overhead and accuracy, we designed another straightforward algorithm: the greedy knapsack (Algorithm 1). For each phase, it receives (1) a list of objects (ob jects) and (2) the available memory size (mem_limit) as input and returns a set of objects to be locked into (to_lock) the available memory during the execution of the phase. Lines 1-2 initialize variables to be used. to_lock is a list of objects to be locked in, and size_locked is the total size of the objects selected to be locked in. Line 3 sorts the objects by their priority score in descending order. In the f or loop spanning lines 4-12, if the size of the object that has the highest priority in the unselected list (ob jects) is small enough to be located in the main memory with previously selected objects (line 5), the object is moved from the unselected objects list to the selected objects list (lines 6-8).</p><p>If the condition in line 5 is false (the highest priority object is too large to be placed in the available memory with the previously selected objects), and the memory utilization rate with the currently selected objects is lower than 90% (line 9), it splits the current object in half (line 10) and goes back to the priority-based sorting task (line 11) and restarts the loop. As a result, about 90% of the main memory is filled with the highest priority memory objects.</p><p>After this selection, the DAPHICX finally injects the hinting code into the target program. The injected code is executed just before the start of each phase of the program. It calls munlock() for objects not selected to be locked in for the phase if necessary and locks objects selected to be locked in via mlock(). Then, the injected hint code is completed and the original application code for the phase resumes execution.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3">Evaluation</head><p>We implemented a prototype of the DAPHICX based on LLVM <ref type="bibr" target="#b5">[8]</ref> for empirical evaluations. The implementation consists of about 5,000 lines of code for profiling, 1,300 lines of code for hint injection, and 200 lines of code for hinting object selection.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.1">Evaluation Setup</head><p>The server we use for evaluation runs the Linux kernel v4.14 and equips an Intel Xeon E7-8837 processor, 128 GB DRAM, and an Intel Optane SSD as a swap device. We choose eight benchmarks from the SPEC CPU 2006 benchmark suite <ref type="bibr" target="#b4">[7]</ref>. In the selected benchmarks, both memory-intensive and compute-intensive workloads are mixed <ref type="bibr" target="#b17">[20]</ref>. We simulate memory pressure by reducing the size of the available memory under the working set size of each workload using the memory resource controller <ref type="bibr" target="#b2">[4]</ref> of the cgroups in the Linux kernel. We increase the memory shortage to up to 30% of the working set size because Openstack, one of the widely adopted cloud systems, officially recommends a 1.5:1 memory overcommitment <ref type="bibr" target="#b7">[11]</ref>. This would not be a common case, though, because Openstack also attempts to minimize these situations. We heuristically set thresholds and constants, such as the time threshold and data access pattern similarity threshold for the context merging and α and β of Equation 1. The available memory size for Algorithm 1 is statically fixed as only 70% of each workload's working set size. This pessimistic setup is reasonable for cloud administrators who need to prepare for unpredictable memory pressures. We repeatedly run every workload three times and use the average result to minimize the measurement error.    device for each workload, respectively. We define the performance improvement as the runtime ratio of the original version to the hint-injected version (runtime speedup) and the lifetime improvement as the ratio of the number of swap out events (number of reduced writes).</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.2">Evaluation Result</head><p>The DAPHICX consistently improves the performance of every workload. The amount of improvement grows as the memory shortage becomes severe. It shows a significant performance improvement (over 40% and up to 265%) for five workloads (482.sphinx3, 429.mcf, 433.milc, 462.libquantum, and 460.lbm) while the other workloads (401.bzip2, 456.hmmer, and 458.sjeng) shows neither improvement nor degradation. The DAPHICX shows no performance degradation for any case, including the absence of memory pressure due to our optimizations and tradeoffs. Nevertheless, 470.lbm shows a slight performance drop under a memory shortage of 5% though the amount is negligible.</p><p>Our work also consistently reduces the number of writes to the swap device at up to 2.98 times. Interestingly, 482.sphinx3 shows a swap device lifetime decrease when small memory pressures are induced though it eventually improved the lifetime about 50% under 30% memory pressure. The workload has plethora of memory objects, so the data for the hint itself becomes even larger than the working set size (about 50 MB) of the original workload. As a result, the working set size of the hint-injected version becomes significantly larger than that of the original version, and more swap out events occur. That said, the hint-injected version still shows no performance degradation for any case and eventually improves swap device lifetime with 30% memory pressure because the hint code itself is effectively optimized.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4">Related Works</head><p>A couple of context-based write grouping schemes <ref type="bibr" target="#b16">[19,</ref><ref type="bibr" target="#b20">23]</ref> for SSD have been proposed. Those schemes utilize context information, which is conceptually similar to ours, for the classification of data items or write requests with similar update patterns. These approaches, though, capture the context information via dynamic stack tracing while we extract it with a static program analysis.</p><p>A number of novel schemes for data placement automation in heterogeneous memory systems <ref type="bibr" target="#b12">[16,</ref><ref type="bibr" target="#b25">28,</ref><ref type="bibr" target="#b27">30]</ref> exist. Such works profile data access patterns, calculate priority, and discern the optimal place for each or classes of memory objects. Though their target memory structure, which is heterogeneous, is different than ours, which is hierarchical, the basic ideas behind theirs and ours are somewhat similar and compatible. Nevertheless, their works are not aware of the dynamic data access pattern for each phase of a given workload. Thus, the dynamic data access pattern awareness of DAPHICX is its key difference.</p><p>Lagar-Cavilla et al. <ref type="bibr" target="#b11">[15,</ref><ref type="bibr" target="#b22">25]</ref> introduced how Google utilizes their hierarchical memory system for their cluster environments. The system equips an in-memory compressed block device <ref type="bibr">[10]</ref> as a swap device and proactively swaps out idle pages to minimize memory pressure. To classify the idle pages, it tracks page table access bits with a dedicated CPU core and tunes logic parameters via machine learning. The access pattern tracking overhead can be arbitrarily high as the working set size of given workloads grows, and its time granularity of proactive reclamation, two minutes, is somewhat too coarse. Meanwhile, our approach incurs almost no production runtime overhead and provides finely grained hints with only negligible runtime overhead.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5">Future works</head><p>In spite of the demonstrated improvement of DAPHICX, a few things still remain for future work. The object priority calculation algorithm of the DAPHICX has the naive assumption that the memory region inside each memory object is uniformly accessed. Though such access patterns are common, some programs optimized for special purposes can access sub-memory regions in a single memory object with different patterns. In such a case, the prioritization algorithm of DAPH-ICX can generate inappropriate hints. We intend to profile the access pattern inside an object and apply the result in the future.</p><p>Offsets for merging contexts are important for the effective trade-off between overhead and accuracy. However, the offsets in this paper are only selected by a heuristic. If the offsets are too small, the program will have an overmuch phase and a high overhead for hint notification and vice versa. Therefore, we will develop an algorithm or a model for selecting the optimal offset automatically.</p><p>Though we focused on the swap system due to its unique stability and wide avalability, other multi-tier memory systems will eventually be matured. Expanding our schme to such other systems would only require affordable efforts because of its generality. In particular, the priority calcuation model is adoptable for a general multi-tier memory and is tunable for a specific one. All the things required to the systems for adoption of our scheme are mlock()-like user level access pattern hint primitives and general programming model that our static analysis could be applied.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="6">Conclusion</head><p>Data-intensive workloads with huge working sets are becoming widespread, and high-end storage devices today are even able to be compared with the speed of DRAM and the capacity of HDD. These recent trends intimate the widespread use of hierarchical memory in the near future. In particular, the swap system will be widely adopted for its availability and ease of use. Nevertheless, the modern storages are still obviously slower than the DRAM, and those storages could be worn out if the number of writes exceeds a limit. Thus, the swap target decision should be as optimal as possible. For this reason, memory systems allow programmers to voluntarily hint data access patterns of the program though analyzing the patterns and injecting hints into the program is exhaustively difficult for a human.</p><p>To automate the exhaustive tasks, we introduced a data access pattern hint injecting compiler extension, DAPHICX, which applies profile-guided optimization for accurate and efficient swap target decisions. It profiles a program to get the data access pattern of each program context, transforms the detailed but verbose information to efficient and meaningful hints, and injects a code for the hints into the program. Our evaluation of a prototype achieved up to 2.65 times speedup and up to 2.98 times swap device lifetime improvement.</p><p>Because this paper introduces the early results of ongoing research rather than a completed study, we are looking for feedback and opinions about the following topics for the future development of this work.</p><p>Adoption of the swap system into modern computing area. Because the swap system was traditionally considered harmful, many environments recommend or are even forced to disable the swap system. Kubernetes is a good example. Though we believe that the ease of use of the swap system, the trend of data exploitation, and the evolvement of hardware (DRAM and modern storage devices) implies widespread use of the swap system in the near future, others could have different opinions. Therefore, we would like to receive feedback about the prospect and the opinions of others and/or their usage experience concerning the swap system, from both academic and industry experts.</p><p>Feasibility of our memory object priority calculation and heuristics. The equation for memory object priority, constants in the equation that leverage weights of the metrics, and the offsets for tradeoffs between accuracy and overhead are the most important keys of our scheme. Though the equation and values we used in this paper have been carefully developed and successfully adapted to multiple realistic workloads, these are based on straightforward insights and leave the decision of the optimal value for important constants and offsets to users. Though we have already started to develop more sophisticated schemes, we want to hear the others' feedback and recommendations concerning known models.</p><p>Additional requirements for adoption into other areas. We manifestly specified the target environments that our scheme is aiming to be adopted within. That said, we believe that this whole of or part of the technique could be useful for other environments we did not consider. For example, mobile, IoT, real-time, and firmware levels could be such targets. Because there could be many storage experts from various areas, we would like to request comments and feedback about the challenges and requirements of our techniques for extended adoption into other areas.</p></div><figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_0"><head>Figure 1 :</head><label>1</label><figDesc>Figure 1: A system employing the DAPHICX.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_2"><head>Figure 2 :</head><label>2</label><figDesc>Figure 2: A context tree of the example code.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_3"><head>Algorithm 1 :</head><label>1</label><figDesc>The greedy knapsack for the objects' selec- tion. Input: ob jects[], mem_limit 1 to_lock ← [ ] 2 size_locked ← 0 3 Sort ob jects by priority 4 for each Object o in ob jects do 5 if size_locked + o.mem_size &lt; mem_limit then 6 ob jects.remove(o) 7 size_locked ← size_locked + o.mem_size 8 to_lock.append(o) 9 else if size_locked &lt; mem_limit × 0.9 then 10 Split o in half 11 go to 3 12 end 13 end 14 return to_lock</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_4"><head>Figures 3 (</head><label>3</label><figDesc>Figures 3(a) and 3(b) show that the DAPHICX achieved improvements in the performance and in the lifetime of the swap</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_6"><head>Figure 3 :</head><label>3</label><figDesc>Figure 3: Hint-injected version achieved improvements in the performance and in the lifetime of the swap device for each workload with varying amount of memory pressure.</figDesc></figure>
		</body>
		<back>

			<div type="acknowledgement">
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Acknowledgments</head><p>This work was supported by the National Research Foundation of Korea (NRF) grant funded by the Korea government (MSIP) <ref type="bibr">(NRF-2015M3C4A7065646 and</ref><ref type="bibr">NRF- 2016M3C4A7952587)</ref>.</p></div>
			</div>

			<div type="references">

				<listBibl>

<biblStruct xml:id="b0">
	<monogr>
				<ptr target="https://www.spec.org/cpu2006/Docs/433.milc.html" />
		<title level="m">SPEC CPU2006 Benchmark Description</title>
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b1">
	<monogr>
		<title level="m" type="main">Intel&apos;s new Optane SSDs are superfast and can even work as extra RAM</title>
		<ptr target="https://www.theverge.com/circuitbreaker/2017/10/31/16582018/intel-optane-p900-ssd-fast-dram-nand-flash-memory-desktop-computer" />
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b2">
	<monogr>
		<title/>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Memory Resource Controller</surname></persName>
		</author>
		<ptr target="https://www.kernel.org/doc/Documentation/cgroup-v1/memory.txt" />
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b3">
	<monogr>
		<title level="m" type="main">Samsung unveils world&apos;s largest SSD with whopping 30TB of storage</title>
		<ptr target="https://www.theverge.com/circuitbreaker/2018/2/20/17031256/worlds-largest-ssd-drive-samsung-30-terabyte-pm1643" />
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b4">
	<monogr>
		<title/>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Spec</forename><surname>Cpu</surname></persName>
		</author>
		<ptr target="https://www.spec.org/cpu2006/" />
		<imprint>
			<date type="published" when="2006" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b5">
	<monogr>
		<title/>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Llvm</forename><surname>The</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Compiler</surname></persName>
		</author>
		<ptr target="https://llvm.org/" />
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b6">
	<monogr>
		<title level="m" type="main">Using Profile-Guided Optimization (PGO)</title>
		<ptr target="https://source.android.com/devices/tech/perf/pgo" />
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b7">
	<monogr>
		<title/>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Cpu</forename><surname>Overcommitting</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Ram</forename></persName>
		</author>
		<ptr target="https://docs.openstack.org/arch-design/design-compute/design-compute-overcommit.html" />
		<imprint>
			<date type="published" when="2018" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b8">
	<analytic>
		<title level="a" type="main">Thermostat: Application-transparent page management for twotiered main memory</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Neha</forename><surname>Agarwal</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Thomas F Wenisch</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">ACM SIGARCH Computer Architecture News</title>
		<imprint>
			<biblScope unit="volume">45</biblScope>
			<biblScope unit="issue">1</biblScope>
			<biblScope unit="page" from="631" to="644" />
			<date type="published" when="2017" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b9">
	<analytic>
		<title level="a" type="main">Car: Clock with adaptive replacement</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Sorav</forename><surname>Bansal</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Dharmendra</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Modha</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">FAST</title>
		<imprint>
			<date type="published" when="2004" />
			<biblScope unit="volume">4</biblScope>
			<biblScope unit="page" from="187" to="200" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b10">
	<analytic>
		<title level="a" type="main">Has intel created a universal memory technology</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Katherine</forename><surname>Bourzac</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE Spectrum</title>
		<imprint>
			<biblScope unit="volume">54</biblScope>
			<biblScope unit="issue">5</biblScope>
			<biblScope unit="page" from="9" to="10" />
			<date type="published" when="2017" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b11">
	<monogr>
		<title level="m" type="main">Proactively reclaiming idle memory</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Jonathan</forename><surname>Corbet</surname></persName>
		</author>
		<ptr target="https://lwn.net/Articles/787611/" />
		<imprint>
			<date type="published" when="2019" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b12">
	<analytic>
		<title level="a" type="main">Data tiering in heterogeneous memory systems</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Amitabha</forename><surname>Subramanya R Dulloor</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Zheguang</forename><surname>Roy</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Narayanan</forename><surname>Zhao</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Nadathur</forename><surname>Sundaram</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Rajesh</forename><surname>Satish</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Jeff</forename><surname>Sankaran</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Karsten</forename><surname>Jackson</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Schwan</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the Eleventh European Conference on Computer Systems</title>
		<meeting>the Eleventh European Conference on Computer Systems</meeting>
		<imprint>
			<publisher>ACM</publisher>
			<date type="published" when="2016" />
			<biblScope unit="page">15</biblScope>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b13">
	<analytic>
		<title level="a" type="main">Clearing the clouds</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Michael</forename><surname>Ferdman</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Almutaz</forename><surname>Adileh</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Onur</forename><surname>Kocberber</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Stavros</forename><surname>Volos</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Mohammad</forename><surname>Alisafaee</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Djordje</forename><surname>Jevdjic</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Cansu</forename><surname>Kaynak</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Adrian</forename><forename type="middle">Daniel</forename><surname>Popescu</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Anastasia</forename><surname>Ailamaki</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Babak</forename><surname>Falsafi</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the international conference on Architectural Support for Programming Languages and Operating Systems -ASPLOS &apos;12</title>
		<meeting>the international conference on Architectural Support for Programming Languages and Operating Systems -ASPLOS &apos;12<address><addrLine>New York, New York, USA</addrLine></address></meeting>
		<imprint>
			<publisher>ACM Press</publisher>
			<date type="published" when="2012" />
			<biblScope unit="volume">47</biblScope>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b14">
	<monogr>
		<title/>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Mel</forename><surname>Gorman</surname></persName>
		</author>
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b15">
	<monogr>
		<title level="m" type="main">Page Frame Reclamation</title>
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b16">
	<analytic>
		<title level="a" type="main">A program context-aware data separation technique for reducing garbage collection overhead in nand flash memory</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Keonsoo</forename><surname>Ha</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Jihong</forename><surname>Kim</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. 7th IEEE SNAPI</title>
		<meeting>7th IEEE SNAPI</meeting>
		<imprint>
			<date type="published" when="2011" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b17">
	<monogr>
		<title level="m" type="main">Memory characterization of workloads using instrumentation-driven simulation</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Aamer</forename><surname>Jaleel</surname></persName>
		</author>
		<ptr target="http://www.jaleels.org/ajaleel/publications/SPECanalysis.pdf" />
		<imprint>
			<date type="published" when="2007" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b18">
	<analytic>
		<title level="a" type="main">pvm: persistent virtual memory for efficient capacity scaling and object storage</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Ada</forename><surname>Sudarsun Kannan</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Karsten</forename><surname>Gavrilovska</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Schwan</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the Eleventh European Conference on Computer Systems</title>
		<meeting>the Eleventh European Conference on Computer Systems</meeting>
		<imprint>
			<publisher>ACM</publisher>
			<date type="published" when="2016" />
			<biblScope unit="page">13</biblScope>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b19">
	<analytic>
		<title level="a" type="main">Introduction to np-completeness of knapsack problems</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Hans</forename><surname>Kellerer</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Ulrich</forename><surname>Pferschy</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">David</forename><surname>Pisinger</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Knapsack problems</title>
		<imprint>
			<publisher>Springer</publisher>
			<date type="published" when="2004" />
			<biblScope unit="page" from="483" to="493" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b20">
	<analytic>
		<title level="a" type="main">Fully automatic stream management for multi-streamed ssds using program contexts</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Taejin</forename><surname>Kim</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Duwon</forename><surname>Hong</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Sangwook</forename><surname>Shane Hahn</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Myoungjun</forename><surname>Chun</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Sungjin</forename><surname>Lee</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Jooyoung</forename><surname>Hwang</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Jongyoul</forename><surname>Lee</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Jihong</forename><surname>Kim</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">17th USENIX Conference on File and Storage Technologies FAST 19</title>
		<imprint>
			<date type="published" when="2019" />
			<biblScope unit="page" from="295" to="308" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b21">
	<analytic>
		<title level="a" type="main">A new linux swap system for flash memory storage devices</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Sohyang</forename><surname>Ko</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Seonsoo</forename><surname>Jun</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Yeonseung</forename><surname>Ryu</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Ohhoon</forename><surname>Kwon</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Kern</forename><surname>Koh</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">2008 International Conference on Computational Sciences and Its Applications</title>
		<imprint>
			<publisher>IEEE</publisher>
			<date type="published" when="2008" />
			<biblScope unit="page" from="151" to="156" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b22">
	<analytic>
		<title level="a" type="main">Software-defined far memory in warehouse-scale computers</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Andres</forename><surname>Lagar-Cavilla</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Junwhan</forename><surname>Ahn</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Suleiman</forename><surname>Souhlal</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Neha</forename><surname>Agarwal</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Radoslaw</forename><surname>Burny</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Shakeel</forename><surname>Butt</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Jichuan</forename><surname>Chang</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Ashwin</forename><surname>Chaugule</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Nan</forename><surname>Deng</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Junaid</forename><surname>Shahid</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Greg</forename><surname>Thelen</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Adam</forename><surname>Yurtsever</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Yu</forename><surname>Zhao</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Parthasarathy</forename><surname>Ranganathan</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the Twenty-Fourth International Conference on Architectural Support for Programming Languages and Operating Systems, ASPLOS &apos;19</title>
		<meeting>the Twenty-Fourth International Conference on Architectural Support for Programming Languages and Operating Systems, ASPLOS &apos;19<address><addrLine>New York, NY, USA</addrLine></address></meeting>
		<imprint>
			<publisher>ACM</publisher>
			<date type="published" when="2019" />
			<biblScope unit="page" from="317" to="330" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b23">
	<monogr>
				<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Zhan-Sheng</forename><surname>Li</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Da-Wei</forename><surname>Liu</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Hui-Juan</forename><surname>Bi</surname></persName>
		</author>
		<title level="m">IEEE 8th International Conference on Computer and Information Technology Workshops</title>
		<imprint>
			<publisher>IEEE</publisher>
			<date type="published" when="2008" />
			<biblScope unit="page" from="72" to="79" />
		</imprint>
	</monogr>
	<note>Crfp: a novel adaptive replacement policy combined the lru and lfu policies</note>
</biblStruct>

<biblStruct xml:id="b24">
	<analytic>
		<title level="a" type="main">Arc: A self-tuning, low overhead replacement cache</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Nimrod</forename><surname>Megiddo</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Dharmendra</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Modha</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">FAST</title>
		<imprint>
			<date type="published" when="2003" />
			<biblScope unit="volume">3</biblScope>
			<biblScope unit="page" from="115" to="130" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b25">
	<monogr>
		<title level="m" type="main">Data placement based on data semantics for nvdimm/dram hybrid memory architecture</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Gaku</forename><surname>Nakagawa</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Shuichi</forename><surname>Oikawa</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2017" />
			<biblScope unit="page">109</biblScope>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b26">
	<analytic>
		<title level="a" type="main">Welcome to zombieland: practical and energy-efficient memory disaggregation in a datacenter</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Vlad</forename><surname>Nitu</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Boris</forename><surname>Teabe</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Alain</forename><surname>Tchana</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Canturk</forename><surname>Isci</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Daniel</forename><surname>Hagimont</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the Thirteenth EuroSys Conference</title>
		<meeting>the Thirteenth EuroSys Conference</meeting>
		<imprint>
			<publisher>ACM</publisher>
			<date type="published" when="2018" />
			<biblScope unit="page">16</biblScope>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b27">
	<analytic>
		<title level="a" type="main">Automating the application data placement in hybrid memory systems</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Harald</forename><surname>Servat</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Antonio</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Germán</forename><surname>Peña</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Estanislao</forename><surname>Llort</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Hans-Christian</forename><surname>Mercadal</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Jesús</forename><surname>Hoppe</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Labarta</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">2017 IEEE International Conference on Cluster Computing (CLUSTER)</title>
		<imprint>
			<publisher>IEEE</publisher>
			<date type="published" when="2017" />
			<biblScope unit="page" from="126" to="136" />
		</imprint>
	</monogr>
</biblStruct>

				</listBibl>
			</div>
		</back>
	</text>
</TEI>
