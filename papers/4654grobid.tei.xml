<?xml version="1.0" encoding="UTF-8"?>
<TEI xmlns="http://www.tei-c.org/ns/1.0" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
xsi:schemaLocation="http://www.tei-c.org/ns/1.0 /Users/atharsefid/Desktop/grobid-0.5.3/grobid-home/schemas/xsd/Grobid.xsd"
 xmlns:xlink="http://www.w3.org/1999/xlink">
	<teiHeader xml:lang="en">
		<encodingDesc>
			<appInfo>
				<application version="0.5.3" ident="GROBID" when="2020-09-29T04:27+0000">
					<ref target="https://github.com/kermitt2/grobid">GROBID - A machine learning software for extracting information from scholarly documents</ref>
				</application>
			</appInfo>
		</encodingDesc>
		<fileDesc>
			<titleStmt>
				<title level="a" type="main">Nonce-Disrespecting Adversaries: Practical Forgery Attacks on GCM in TLS</title>
			</titleStmt>
			<publicationStmt>
				<publisher/>
				<availability status="unknown"><licence/></availability>
			</publicationStmt>
			<sourceDesc>
				<biblStruct>
					<analytic>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Hanno</forename><surname>Böck</surname></persName>
							<affiliation key="aff0">
								<orgName type="department">https://hboeck.de</orgName>
							</affiliation>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Aaron</forename><surname>Zauner</surname></persName>
							<email>azauner@sba-research.org</email>
							<affiliation key="aff1">
								<orgName type="laboratory">SBA Research gGmbH</orgName>
							</affiliation>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Sean</forename><surname>Devlin</surname></persName>
							<email>seanpatrickdevlin@gmail.com</email>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Juraj</forename><surname>Somorovsky</surname></persName>
							<email>juraj.somorovsky@rub.de</email>
							<affiliation key="aff2">
								<orgName type="department">Görtz Institute for IT Security</orgName>
								<orgName type="institution">Ruhr University Bochum</orgName>
								<address>
									<settlement>Horst</settlement>
								</address>
							</affiliation>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Philipp</forename><surname>Jovanovic</surname></persName>
							<email>philipp.jovanovic@epfl.ch</email>
							<affiliation key="aff3">
								<orgName type="laboratory">École Polytechnique Fédérale de Lausanne (EPFL)</orgName>
							</affiliation>
						</author>
						<title level="a" type="main">Nonce-Disrespecting Adversaries: Practical Forgery Attacks on GCM in TLS</title>
					</analytic>
					<monogr>
						<imprint>
							<date/>
						</imprint>
					</monogr>
				</biblStruct>
			</sourceDesc>
		</fileDesc>
		<profileDesc>
			<abstract>
				<p>We investigate nonce reuse issues with the GCM block cipher mode as used in TLS and focus in particular on AES-GCM, the most widely deployed variant. With an Internet-wide scan we identified 184 HTTPS servers repeating nonces, which fully breaks the authenticity of the connections. Affected servers include large corporations , financial institutions, and a credit card company. We present a proof of concept of our attack allowing to violate the authenticity of affected HTTPS connections which in turn can be utilized to inject seemingly valid content into encrypted sessions. Furthermore, we discovered over 70,000 HTTPS servers using random nonces, which puts them at risk of nonce reuse, in the unlikely case that large amounts of data are sent via the same session .</p>
			</abstract>
		</profileDesc>
	</teiHeader>
	<text xml:lang="en">
		<body>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="1">Introduction</head><p>The Advanced Encryption Standard (AES) in Galois/Counter Mode (GCM), or short: AES-GCM <ref type="bibr" target="#b26">[25,</ref><ref type="bibr" target="#b5">6]</ref>, is currently the most widely used cipher for symmetric (authenticated) encryption in the TLS protocol <ref type="bibr" target="#b3">[4]</ref>. This came as a consequence of the exposure of various weaknesses in many alternative symmetric TLS ciphers during the past few years. The CBC mode was affected by a whole series of attacks, including BEAST <ref type="bibr" target="#b4">[5]</ref> (affecting TLS 1.0), Lucky Thirteen <ref type="bibr" target="#b0">[1]</ref> (affecting all versions, based on timing side-channels and the older Vaudenay attack), POODLE <ref type="bibr" target="#b27">[26]</ref> (only affecting SSLv3) and POODLE-TLS <ref type="bibr" target="#b24">[23]</ref> (implementation bugs). All those attacks did not exploit weaknesses of CBC per se, but took advantage of the particular way how CBC was deployed in TLS (implicit IVs, lack of strict padding and MAC-then-Pad-then-Encrypt). Before TLS 1.2, the RC4 stream cipher was the only alternative to CBC-based ciphers but it had been long known for its weaknesses <ref type="bibr" target="#b8">[9]</ref> and eventually came under attack in TLS <ref type="bibr" target="#b1">[2]</ref> as well. The attacks against CBC-based ciphers can be mitigated by careful implementations, however it has been shown that these mitigations are extremely difficult to implement correctly <ref type="bibr" target="#b35">[34]</ref>. It is not possible to mitigate the weaknesses in RC4. The cryptographic community concluded that both CBC and RC4 should be avoided and later even prohibited use of RC4 in TLS <ref type="bibr" target="#b30">[29]</ref> entirely.</p><p>With AES-GCM the TLS standard provides only one widely available alternative to CBC and RC4. Technically, there are other options, such as CCM and GCM in combination with block ciphers like Camellia, but all of them lack widespread support. The OCB mode <ref type="bibr" target="#b22">[21]</ref>, which by many is considered superior to GCM, suffered from patenting issues for a very long time. Those problems prevented its wide deployment and only got resolved recently <ref type="bibr" target="#b37">[36]</ref>. Another promising alternative is the ChaCha20 stream cipher in combination with Poly1305 as authenticator which was released as an RFC <ref type="bibr" target="#b28">[27]</ref> in 2015 and a specification as a TLS cipher mode will soon be available as an RFC <ref type="bibr" target="#b23">[22]</ref>.</p><p>Despite currently being the most popular TLS cipher, AES-GCM is not well received by the cryptographic community. Niels Ferguson described potential attacks on GCM with short authentication tags <ref type="bibr" target="#b7">[8]</ref>, Antoine Joux published a critical comment during the standardization process of GCM <ref type="bibr" target="#b19">[19]</ref>, and several other cryptographers recently described GCM as "fragile" <ref type="bibr" target="#b29">[28,</ref><ref type="bibr" target="#b12">12]</ref>.</p><p>Many stream cipher-based crypto algorithms take, next to a secret key and a message, a so-called nonce as an additional input. Varying the nonce allows to generate multiple distinct cipher streams under the same secret key and thus multiple messages can be encrypted safely. If, however, the same nonce-key pair is ever repeated for different messages, an attacker is able to learn the XOR of the plaintext messages by XORing the corresponding ciphertexts. This works since the used cipher streams are identical (due to the same nonce-key pair) and therefore cancel each other out. In summary this leads to a violation of the confidentiality of the affected messages.</p><p>Internally, GCM uses a counter mode-like construction and thus suffers from the above issues as well. In the nonce reuse scenario, however, there is yet another vulnerability on which we focus in this work: the "forbidden attack" by <ref type="bibr">Joux [19]</ref> exploits nonce reuse to reconstruct the authentication key. This then leads to efficient forgery attacks enabling the creation of seemingly valid ciphertexts without knowledge of the secret master key. In this paper we first show that several TLS implementations are vulnerable to nonce reuse attacks since they use repeated nonces after a few server messages. Second, we present results from our Internet wide scan that identified more than 70,000 potentially vulnerable servers. These servers generate nonces at random, which makes the nonce reuse attacks possible after sending a large amount of TLS records. For example, a server is vulnerable with a 40% probability after sending 2 32 TLS records (see <ref type="table" target="#tab_0">Table 1</ref>). Our results motivate for the standardization of algorithms that resist nonce misuse and the publication of errata on IETF documents with insufficiently secure nonce generation methods.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2">Background</head><p>In the following we briefly recap AES-GCM <ref type="bibr" target="#b26">[25,</ref><ref type="bibr" target="#b5">6]</ref> and its application in TLS <ref type="bibr" target="#b3">[4]</ref>. We note that the AES-GCM specification allows for different initialization vector or authentication tag lengths. We only concentrate on the version of AES-GCM as it is used in TLS. The description applies to AES-128 and AES-256 since both have equal input/output lengths.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.1">AES-GCM</head><p>AES-GCM <ref type="bibr" target="#b5">[6]</ref> is a block-cipher mode of operation which provides authenticated encryption with associated data (AEAD). It uses counter mode to encrypt plaintexts. The resulting ciphertext is authenticated using a hash function called GHASH which is based on a computation over the Galois field GF(2 128 ). IV Initialization vector consisting of 96 bits (12 bytes).</p><p>cnt 4-byte long counter value.</p><p>J i The i-th counter block, computed using concatenation of the IV and the counter value cnt, cnt = (i + 1) mod 2 32 , to achieve 128 bits. J 0 = IV 0 31 1.</p><p>Enc k (X) AES encryption of block X, with symmetric key k.</p><p>Gmul H (X) Multiplication H · X in Galois Field GF(2 128 ), with the irreducible polynomial</p><formula xml:id="formula_0">f = 1 + α + α 2 + α 7 + α 128 .</formula><p>T Authentication tag.</p><p>len(X) Bit-length of string X, represented by 64 bits.</p><p>The AES-GCM encryption process of a message consisting of n blocks works as follows (see <ref type="figure">Fig. 1</ref>):</p><p>1. The encryptor generates a 96-bit long initialization vector IV .</p><p>2. She generates 128-bit long counter blocks J i , where J i = IV cnt and cnt = (i + 1) mod 2 32 , for i ∈ {0, . . . , n}.</p><p>3. She computes the i-th ciphertext block as follows:</p><formula xml:id="formula_1">C i = Enc k (J i ) ⊕ P i .</formula><p>Note that the length of the last ciphertext block C n is equal to the length of the last plaintext block P n .</p><p>In order to generate the authentication tag T , the encryptor computes a GHASH over the additional authenticated data and the ciphertext:</p><p>1. The encryptor generates the hash key H = Enc k (0 128 ). <ref type="figure">Figure 1</ref>: AES-GCM encryption computed using two plaintext blocks and one block of additional authenticated data <ref type="bibr" target="#b26">[25]</ref>.</p><formula xml:id="formula_2">J 0 J 1 J 2 Enc k Enc k Enc k P 1 P 2 C 1 C 2 Gmul H Gmul H Gmul H Gmul H A 1 len(A) len(C) T X 1 X 2 X 3 S</formula><p>3. She executes Galois field multiplications over n ciphertext blocks:</p><formula xml:id="formula_3">X i+m = Gmul H (X i+m−1 ⊕C i ), for i ∈ {1, . . . , n} .</formula><p>4. She executes the last multiplication using the bitlengths of A and C:</p><formula xml:id="formula_4">S = Gmul H (X m+n ⊕ (len(A) len(C))) .</formula><p>5. Finally, the encryptor computes the authentication tag:</p><formula xml:id="formula_5">T = S ⊕ Enc k (J 0 ) .</formula><p>The final output of this function is the ciphertext concatenated with authentication tag: C T . We refer to <ref type="bibr" target="#b5">[6]</ref> for more details.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.2">AES-GCM in TLS</head><p>TLS may use AES-GCM to encrypt and authenticate data in the record layer. In TLS the maximum record size is on the order of 2 <ref type="bibr" target="#b14">14</ref> . Encryption keys and further key material are derived during the TLS handshake phase <ref type="bibr" target="#b3">[4]</ref>. The TLS handshake procedure is not relevant to our attack. It is only important to know that the output of a TLS handshake is a master_secret, which is used to derive further key material, including the server_write_IV and client_write_IV.</p><p>An input into AES-GCM encryption is a plaintext and a 12-byte long initialization vector IV . According to TLS, IV is constructed as follows:</p><p>• Salt (4 bytes) is derived during the TLS handshake and its value is equal to server_write_IV / client_write_IV. This is also called the implicit part of the IV.</p><p>• Nonce (8 bytes): A TLS peer must generate an eight byte nonce, also called the explicit part of the IV. It is up to the implementation to make sure the nonce is unique.</p><p>The initialization vector is then used to create a 16-byte long counter value. The counter value is incremented by 1 with each new ciphertext block, as described in the previous section.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3">The Forbidden Attack</head><p>In his comments to NIST Joux <ref type="bibr" target="#b19">[19]</ref> described an attack against GCM if nonces are reused. This attack allows an attacker to learn the authentication key and forge messages. Because the uniqueness of nonces is typically a ground rule for cryptanalysis, Joux called his attack the "forbidden attack". Nevertheless, it highlights an important failure mode in real-world implementations.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.1">Overview</head><p>Joux's attack takes advantage of the underlying mathematical structure of the GHASH primitive. Specifically, the computation of the tag T can be viewed as the evaluation of the following polynomial g at the authentication key H:</p><formula xml:id="formula_6">g(X) = A 1 X m+n+1 + · · · + A m X n+2 +C 1 X n+1 + · · · +C n X 2 + LX + Enc k (J 0 )</formula><p>Where L is a block encoding the lengths of A and C, and Enc k (J 0 ) is a secret nonce-derived value. Note that all values other than Enc k (J 0 ) are known to the attacker. Evaluating at H, we have:</p><formula xml:id="formula_7">g(H) = T</formula><p>To understand Joux's attack, consider the case where two messages are encrypted under the same nonce. For simplicity, let us suppose two messages each with a single block of ciphertext and no blocks of additional authenticated data. We have:</p><formula xml:id="formula_8">g 1 (X) = C 1,1 X 2 + L 1 X + Enc k (J 0 ) g 2 (X) = C 2,1 X 2 + L 2 X + Enc k (J 0 )</formula><p>Recall that addition in the field is equivalent to XOR. Knowing that g 1 (H) = T 1 and g 2 (H) = T 2 , we modify each polynomial by adding the known tag. We now have</p><formula xml:id="formula_9">g 1 (X) = C 1,1 X 2 + L 1 X + Enc k (J 0 ) + T 1 g 2 (X) = C 2,1 X 2 + L 2 X + Enc k (J 0 ) + T 2 with g 1 (H) = g 2 (H) = 0. Note that since Enc k (J 0 )</formula><p>is a nonce-derived value, it is common to both polynomials. Adding these polynomials, we obtain</p><formula xml:id="formula_10">g 1+2 (X) = (C 1,1 +C 2,1 )X 2 + (L 1 + L 2 )X + T 1 + T 2</formula><p>which is fully known to the attacker and satisfies g 1+2 (H) = 0. Since H is a root of g 1+2 , we can factor the polynomial to recover a short list of candidates for the authentication key. Although the list of candidates may be as long as the degree of the polynomial, in practice it is usually relatively short. If further nonce reuse is detected, additional polynomials sharing a common root in the authentication key can be constructed. Factoring these polynomials and finding the common root yields the correct value for H.</p><p>This results in catastrophic failure of authenticity, even if a nonce is only re-used a single time and enables us to carry out a practical forgery attack against HTTPS as described in Section 6. </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.2">Nonce Generation in TLS</head><p>In TLS, GCM requires a 96-bit nonce where 32 bits are derived along with session key material and remain static for the duration of the session and the other 64 bits are transmitted explicitly in each record. As highlighted in Section 3.1, nonce uniqueness is essential for GCM's security. However, the TLS specification does not provide clear guidelines to developers how to choose the 64-bit explicit nonce <ref type="bibr" target="#b25">[24]</ref>. The easiest secure way is a counter. Given that the nonce value is 64-bit long, a repeating nonce will only happen after 2 64 TLS records. It is not realistic that many encryptions happen over a single TLS connection. There are two counter variants in widespread use: Some implementations start the counter with zero and increment from there, others start with a random value and increment from it (e.g., OpenSSL). Both variants are equally secure. Another option would be a negative counter, but we have not observed this in practice.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.3">Duplicate Nonces</head><p>Faulty implementations may send duplicate nonces, e.g. by always sending the same value as a nonce or repeating a nonce for two encryption operations. A single repeated nonce is usually enough to fully recover the connection's authentication key. In such faulty implementations, authenticity is lost and an attacker is able to manipulate TLS-protected content.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.4">Random Nonces</head><p>A less clear risk is present if an implementor chooses to use random values as a nonce. If only a few TLS records are encrypted with the same key, then a random nonce does not pose a risk. However, if a large number of records is encrypted with the same key, the risk may become relevant. If choosing nonces at random after 2 <ref type="bibr" target="#b29">28</ref> encryptions the probability of a nonce collision will be around 0,2 % due to the birthday paradox. After 2 33 en-cryptions the probability will be more than 80 % (see <ref type="table" target="#tab_0">Table 1</ref>).</p><p>The size of a TLS record is determined by many factors, therefore it is not trivial to calculate the exact amount of data necessary to generate a nonce duplication with an implementation with random nonces. It is however most likely in the area of Terabytes. There are probably few scenarios in which this is a problem. VPN networks may use the same connection for such a large number of TLS records. Also in an attack scenario where an attacker can control Javascript and the victim has a very fast Internet connection such an attack might be possible. However this requires an HTTPS server that allows an unlimited number of requests over a single connection. Common HTTP server implementations usually limit the number of Keep Alive requests that can be sent over one connection, but this limit can be disabled.</p><p>We conclude that an attack on an implementation using random nonces is unlikely, but it cannot be definitely excluded. For safety reasons random nonces should be avoided and a counter should be used.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4">Internet-wide Survey (HTTPS)</head><p>Our evaluation of Internet connected devices has been split into multiple sub-tasks: an initial discovery scan, followed by vulnerability scans on discovered target devices with different parameters. The scans stretched a time span of approximately 18 days. In this section we describe the methods used for discovery and analysis of Internet connected devices during our evaluation.</p><p>All tooling is available for review and testing via this project's GitHub repository. Concrete information on used compilers, libraries, applications, and operating system is provided in Appendix A.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.1">Host Discovery</head><p>We performed an IPv4 discovery scan using masscan 1 for TCP port 443 (HTTPS) starting on new-years eve 2016. With appropriate rate-limiting this scan took about two days and resulted in 48, 406, 453 distinct IP addresses serving on TCP port 443. We limit masscanruns to 75,000 pps (packets per second) to reduce strain on upstream carrier equipment and monitoring as agreed upon with our upstream ISP.</p><p>We honor blacklisting requests while conducting scans and thereafter, thus keep excluding CIDR blocks during renewed Internet-wide scans. As of May 4th 2016 our "blacklist" consists of a total of 558,608 IPv4 addresses. <ref type="bibr" target="#b1">2</ref> </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.2">Vulnerability Testing</head><p>Between the 4th and the 17th of January 2016 we performed two vulnerability scans on the randomized set of all previously collected IPv4 addresses serving HTTPS. A patch to OpenSSL 1.0.2e and externally parallelized C-program were used to collect first 10 and then 100 nonces from the TLS handshake of these targets.</p><p>We have limited control over the number of connections a server uses. Our test tool was not ideal in this regard. Due to the HTTP Keep-Alive feature it is possible to send multiple HTTP requests over one connection. After reading content from the server we sent a second HTTP request without knowing whether the server would send more data. An ideal test tool would first read any content coming from the server, however to reliably do so one would have to fully implement HTTP, which is not trivial. Our initial scan tool required a patched OpenSSL version. We later created a tool that uses an OpenSSL callback, thus avoiding to patch OpenSSL itself, however in our experience this later tool turned out to be more error prone.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5">Vulnerable Devices</head><p>We found 184 devices that used a duplicate nonce. The behavior of these devices was mixed. 66 devices were using the value 0100000003001741 twice and then continued with a randomly chosen value and a counter starting from that value. Four further devices showed a similar behavior, but with other starting values (010000000100c289, 0100055f03010240 and 010000000080c0eb twice). 84 devices used a random value for the first encryption and subsequently zero values. 23 devices simply always used zero. All of these devices can be practically attacked.</p><p>Given these different behaviors we assume we have at least four different kinds of faulty implementations.</p><p>We tried to contact the owners of affected devices, but ran into significant difficulties. Most of our contact attempts were not answered at all. The affected parties include several web pages of the credit card company VISA, the polish banking association ZBP (Zwi ˛ azek Banków Polskich), and Deutsche Börse (German stock exchange).</p><p>With the help of CERT.at we were able to establish a contact with one affected device owner. We were able to determine that some devices were load balancers produced by Radware. We contacted Radware and explained the issue to them. The affected devices were using code or hardware from Cavium. Radware has since fixed the issue and published a security advisory <ref type="bibr" target="#b31">[30]</ref>. The Radware device was using the "nonce" count of excluded net-ranges. 0100000003001741 twice and then a counter starting from value chosen at random.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5.1">Missing Return Value Check in OpenSSL</head><p>Several further devices we observed were sending two values 0100000003001741 and similar other values. These look like uninitialized memory. We do not have a definitive answer why these devices behave like this, but we have some further observations. One device owner mentioned that the device is using a modified version of OpenSSL 1.0.1j. Given that we learned from Radware that their devices internally use a Cavium chip, we believe they use a modified OpenSSL version in combination with a hardware accelerator chip from Cavium. Thus, we checked whether we could find a plausible way how OpenSSL could generate this behavior. The code that generates the first nonce value in OpenSSL calls the random number generation function RAND_bytes() to get eight random bytes. This is done in the function aes_gcm_ctrl() in e_aes.c. The error code of RAND_bytes is checked and aes_gcm_ctrl() returns 0 in case of an error. In t1_enc.c a call to EVP_CIPHER_CTX_ctrl() happens, which maps to aes_gcm_ctrl(). The return value is not checked here.</p><p>This means that in case the random number generator returns an error the code continues with uninitialized memory in the IV. It is possible that the devices showing this behavior use a hardware random number generator that is malfunctioning.</p><p>We simulated a failing random number generator by returning an error code if eight bytes were requested from this function. This deliberately broken OpenSSL variant sent the value 010000a60000012c as a nonce, which is uninitialized memory. However unlike with the devices we observed in the wild we were unable to connect to that broken OpenSSL version. Current OpenSSL versions properly check the return value of the function RAND_bytes(), which was added by OpenSSL developer Matt Caswell in February 2015. <ref type="bibr" target="#b2">3</ref> </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5.2">LFSR</head><p>We found a significant number of devices that, according to their Server HTTP header, were produced by Check Point. At first their nonce value looked random. However after contacting Check Point we learned that their TLS implementation is using a Linear Feedback Shift Register (LFSR) for the nonce generation. The LFSR 3 https://github.com/openssl/openssl/commit/ eadf70d2c885e3e4e943091eabfec1e73d4f3883 is generated by the following polynomial:</p><formula xml:id="formula_11">X 64 + X 63 + X 61 + X 60 + 1 .</formula><p>The chosen LFSR has maximal period of 2 64 − 1, i.e. if the LFSR is initialized with an arbitrary non-zero nonce then only after 2 64 − 1 updates the values start to repeat. This implementation therefore has the same security properties as a counter. We considered this in our analysis and excluded nonces using this LFSR. While this approach is unusual, there is no security risk associated with it. It can however be used to fingerprint devices.</p><p>There may be other implementations that have a randomly-looking nonce, but are in fact generated using an LFSR-like algorithm. However we are not aware of such devices at this time and welcome feedback from device manufacturers and software developers.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5.3">Random Nonces</head><p>After filtering the results for the LFSR used by Check Point there were approximately 70,000 devices left that had a random-looking nonce. Based on the title tags and HTTP headers we tried to identify the devices.</p><p>Based on the HTTP "Server" header around 7,700 devices were Lotus Domino installations. We disclosed the issue to IBM, the vendor of Lotus Domino. They confirmed the vulnerability and published an update <ref type="bibr" target="#b16">[16]</ref>.</p><p>Based on the title tag 19,120 hosts were devices by the company Sangfor, a chinese vendor of network equipment. We disclosed the issue to Sangfor, but never received any reply to our contact attempts.</p><p>Due to a contact of one affected server operator we were able to identify it as an A10 load balancer (model AX1030, OS version 2.7.2-P5). We disclosed the issue to A10 and they confirmed and fixed it <ref type="bibr" target="#b36">[35]</ref>.</p><p>A significant number of affected hosts identified themselves as Microsoft IIS in different versions in the "Server" header. The most common identification string was "Microsoft-IIS/7.5", which we found 9,633 times. We are unable to explain this. In our tests Windows/IIS installations did not show any suspicious behavior. We contacted Microsoft and they informed us that all versions of SChannel use a counter as a nonce. The most likely reason for this finding is that these hosts all had their TLS termination offloaded to a load balancer or firewall.</p><p>Based on our findings we must assume that there are potentially vulnerable implementations we were unable to identify.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="6">A Practical Attack on Browser HTTPS</head><p>We implemented an attack to inject malicious content into browser-based HTTPS sessions. Our attack takes advantage of servers that repeat GCM nonces either by random chance or due to implementation errors.</p><p>Let C, S, and M denote the browser client, a vulnerable web server, and our man-in-the-middle (MitM) attacker, respectively. For the purposes of our attack, assume M controls the local network: they may observe all of C's traffic and modify or drop messages. We assume also that S exposes a faulty TLS implementation that will repeat nonces reliably.</p><p>The attack proceeds as follows:</p><p>1. M coerces C into loading attacker-controlled content. This can be done either via a phishing attack or by injecting malicious content into unauthenticated HTTP traffic.</p><p>2. M serves C HTML or JavaScript to initiate an HTTPS session with S. M observes the handshake to verify that a GCM cipher suite is negotiated. If not, M aborts the attack.</p><p>3. After S changes cipher suites following a successful handshake, M begins recording all server-sent traffic. In particular, M notes the following in each record:</p><p>• The sequence number, a simple incrementing counter.</p><p>• The record header comprising the first five bytes of the record.</p><p>• The explicit nonce part comprising the first eight bytes of the record fragment.</p><p>• The authentication tag comprising the last 16 bytes of the record fragment.</p><p>• The ciphertext comprising the remaining bytes of the record fragment.</p><p>4. M serves C content to poll S at a short interval and continues to record the responses in a lookup table indexed by explicit nonce part.</p><p>5. When S repeats a nonce, M builds a polynomial derived from the relevant pair of records. In GCM under TLS, the AAD for a record includes both the record header and the sequence number. The ciphertext and tag are as described above.</p><p>6. M factors this polynomial to find a short list of candidates for the authentication key. M takes the set intersection of this list and the previous list of candidates. (In the event that this is the first collision, this list is the set of all possible keys.)</p><p>7. If more than one candidate for the authentication key remains, M returns to step 4. Otherwise, M serves content redirecting C to a static endpoint of the vulnerable application S.</p><p>8. M intercepts the response from S. Since the target is a static endpoint, it is trivial for M to inject malicious content into the response by XORing the known payload against the tail of the ciphertext and then XORing the malicious content against the same.</p><p>Additional considerations:</p><p>• If S does not repeat nonces more than once in a given session, M may attempt to hijack the connection even if there are multiple candidates for the authentication key. M can simply guess at one of the candidates and attempt to tamper with a server response before redirecting. If the guess is incorrect, C and S will simply renegotiate a new session and M can try again.</p><p>• If the application served by S does not contain any static HTML endpoints, M may choose instead to target static resources such as CSS or JavaScript. This will additionally require M to tamper with the HTTP response headers to change the content type to text/html.</p><p>A proof-of-concept exploit for this attack is provided on GitHub. <ref type="bibr" target="#b3">4</ref> </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="7">Further Observations</head><p>In this section we discuss further observations made by analysis of cryptographic protocols and libraries.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="7.1">Encryption Oracle with Zero-Length Inputs</head><p>The AES-GCM specification allows one to encrypt arbitrary data of a length up to 2 39 − 256 bits <ref type="bibr" target="#b26">[25]</ref>. It is also possible to encrypt zero-length messages with zerolength additional authentication data. In that case, the output of the last Gmul function becomes zero: S = 0 (see <ref type="figure">Fig. 1</ref>). This implicates that the authentication tag is equal to the encryption of the first counter block T = Enc k (J 0 ). This property of AES-GCM has no direct security consequences. If a victim encrypts zero-length data with AES-GCM, the attacker learns neither the secret key k nor the hash key H. However, if the attacker can force the victim to encrypt zero-length data, he is able to obtain valuable plaintext/ciphertext block pairs. Thus, he can use the victim as an encryption oracle to encrypt random messages. If the ciphertext receiver supports different modes of operations -e.g., CBC (Cipher Block Chaining) -the attacker is then able to construct valid messages encrypted with victim's secret key k.</p><p>We stress that this is not a valid TLS scenario. First, in TLS the additional authentication data is non-zero <ref type="bibr" target="#b3">[4]</ref>. It consists of a sequence number, message type, TLS version and message length. Second, it is not possible to use the same symmetric key for different algorithms in TLS. However, this property of AES-GCM could become exploitable in specific scenarios where the same symmetric keys can be used for different modes of operations <ref type="bibr" target="#b17">[17]</ref>. Potential examples include XML Encryption <ref type="bibr" target="#b6">[7]</ref>, JSON Web Encryption <ref type="bibr" target="#b18">[18]</ref>, or PKCS#11 <ref type="bibr" target="#b11">[11]</ref>.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="7.2">Analysis of Cryptographic Libraries</head><p>We analyzed usage of AES-GCM nonces in cryptographic libraries: Botan 1.11.28, BouncyCastle Java 1.54, MatrixSSL 3-7-2b, SunJCE 1.8, and OpenSSL 1.0.2g. None of the TLS servers provided by these libraries was vulnerable to nonce-reuse attacks. The first four libraries set the nonce value to zero and increment the nonce value with each new record. OpenSSL behaves differently and sets the first nonce value to a random 8-byte string. Further nonce values are constructed by incrementing this random string.</p><p>We furthermore investigated the usage of the counter value (cnt) in these libraries. According to the standard, if the number of blocks in one ciphertext is larger than 2 32 , a modulo reduction should applied: cnt = i mod 2 32 <ref type="bibr" target="#b26">[25]</ref>. This is misleading because the standard prescribes usage of at most 2 32 blocks, and it is known that repeating counter values is insecure in AES counter mode of operation. Interestingly, the Botan library did not perform the modulo reduction and in a case the number of blocks in one ciphertext was larger than 2 32 , the counter overflowed and the last byte of the nonce value was increased as well. To the best of our knowledge, this does not influence the security of Botan. Botan developers fixed this issue in version 1.11.30 <ref type="bibr" target="#b2">[3]</ref>. We observed a similar behavior in the MatrixSSL library.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="8">Conclusions and Recommendations</head><p>Our results show that there is a significant risk of GCM getting implemented in an insecure way. This risk gets elevated by the fact that the TLS specification gives developers little guidance on how to implement GCM securely. More resilient approaches are possible though and we outline two solutions briefly below.</p><p>The TLS drafts for Chacha20-Poly1305 <ref type="bibr" target="#b23">[22]</ref> (which has been submitted to IESG for publication recently) and AES-OCB <ref type="bibr" target="#b37">[36]</ref> both specify methods to generate nonces from record sequence numbers and shared secrets in a deterministic way. This construction prevents that implementations choose their own (potentially insecure) nonce generation methods, saves some bandwidth since an explicit transmission of the nonce is not necessary anymore, and assures that erroneous implementations are non-interoperable. In particular, this avoids the risk of developers choosing random or, even worse, constant nonces. TLS 1.3 <ref type="bibr" target="#b32">[31]</ref> enforces a similar approach for all of its AEAD cipher suites.</p><p>The other alternative is to rely on cryptographic algorithms that inherently resist nonce-misuse, i.e. such ciphers uphold their security guarantees, even if a noncekey pair is reused for different messages. The price for this property however is that these ciphers are inherently "offline", meaning that two passes over the data are necessary in order to perform authenticated encryption. These algorithms usually operate in a MAC-ThenEncrypt-like manner where first message and associated data are processed to produce the authentication tag and then the latter is used as the nonce for the encryption algorithm. Such nonces are also often known as synthetic IVs (SIV), a term first coined by Rogaway and Shrimpton <ref type="bibr" target="#b33">[32]</ref> in 2006. Examples of nonce misuse-resistant algorithms include AES-SIV <ref type="bibr" target="#b14">[14]</ref>, AES-GCM-SIV <ref type="bibr">[13]</ref>, AEZ <ref type="bibr" target="#b15">[15]</ref>, HS1-SIV <ref type="bibr" target="#b21">[20]</ref>, and MRO from the MEM-AEAD <ref type="bibr" target="#b9">[10]</ref> cipher family.</p><p>In general future protocols should rely on algorithms and constructions that reduce the risk of implementation errors as much as possible. Both of the options presented above are viable approaches to protect against noncemisuse. In this specific case ambigious wording and human-error seemed to be the reason for a rather serious attack against TLS and in particular HTTPS. One of the authors has prepared an errata <ref type="bibr" target="#b4">5</ref> to <ref type="bibr" target="#b34">[33]</ref> which is currently being discussed within the TLS working group. <ref type="bibr" target="#b5">6</ref> It is our hope that future protocol design decisions take human error, common implementation and software bugs into account and ensure that appropriate, distinct and clear discussion will be added to the security considerations section of documents published within the IETF Security Area.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="9">Acknowledgements</head><p>We thank Adam Langley from Google for having the initial idea of nonce reuse issues and for helping with vendor contacts, Aaron Kaplan from the Austrian CERT.at for helping us to contact server operators and device manufacturers, and Kenny Paterson and Eric Rescorla for providing very useful, early feedback during Real World Cryptography 2016 and later on a draft version of this paper. We further thank Yoav Nir from Check Point for helping us finding a vendor of an affected load balancer, and Tibor Jager for helpful discussions on AES-GCM and cross-cipher attacks.  </p></div><figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_0"><head></head><label></label><figDesc>We use the following notation: a b Concatenation of strings a and b. 0 s String consisting of s zero bits. P i The i-th plaintext block. C i The i-th ciphertext block. A i The i-th block of additional authenticated data.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_1"><head></head><label></label><figDesc>This is free software; see the source for copying conditions. There is NO C C warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. C C $ ./masscan --version Masscan version 1.0.3 ( https://github.com/robertdavidgraham/masscan ) C C Compiled on: May 20 2015 15:17:28 Compiler: gcc 4.8.2 OS: Linux CPU: unknown (64 bits) GIT version: 1.0.3-95-gb395f18 openssl-1.0.2e-patched$ ./apps/openssl version -a WARNING: can't open config file: /usr/local/ssl/openssl.cnf C C OpenSSL 1.0.2e 3 Dec 2015 built on: reproducible build, date unspecified platform: linux-x86_64 options: bn(64,64) rc4(16x,int) des(idx,cisc,16,int) idea(int) blowfish(idx) C C compiler: gcc -I. -I.. -I../include -DOPENSSL_THREADS -D_REENTRANT -DDSO_DLFCN -DHAVE_DLFCN_H -Wa,--noexecstack -m64 -DL_ENDIAN -O3 -Wall -DOPENSSL_IA32_SSE2 -</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_0" validated="false"><head>Table 1 :</head><label>1</label><figDesc></figDesc><table>Nonce collision probability p after 2 n nonces of 
64 bit length. 

n 
p 
n 
p 

22 0.000000 
29 0.007782 
23 0.000002 
30 0.030767 
24 0.000008 
31 0.117503 
25 0.000031 
32 0.393469 
26 0.000122 
33 0.864665 
27 0.000488 
34 0.999665 
28 0.001951 
35 1.000000 

</table></figure>

			<note place="foot" n="0"> All source-code, scripts and accompanying documentation are publicly available under CC0 1.0 license from https://github.com/ nonce-disrespect/nonce-disrespect/.</note>

			<note place="foot" n="2">. Starting with X 0 = 0, she computes Galois field multiplications over the additional authenticated data consisting of m blocks (note that the last block is padded with zeros to achieve a 128-bit block length): X i = Gmul H (X i−1 ⊕ A i ), for i ∈ {1, . . . , m} .</note>

			<note place="foot" n="1"> masscan is an open-source project under AGPLv3 license available from https://github.com/robertdavidgraham/masscan. 2 Our &quot;blacklist&quot; is not publicly available nor shared due to obvious privacy implications. We therefore refrain from detailing on size and</note>

			<note place="foot" n="4"> https://github.com/nonce-disrespect/nonce-disrespect/</note>

			<note place="foot" n="5"> https://www.rfc-editor.org/errata_search.php?rfc=5288&amp;eid= 4694 6 https://mailarchive.ietf.org/arch/search/?email_list=tls&amp;gbt=1&amp; index=pV7IzE5XmgUytI5OemV-vqjzPqE</note>
		</body>
		<back>

			<div type="acknowledgement">
			</div>

			<div type="references">

				<listBibl>

<biblStruct xml:id="b0">
	<analytic>
		<title level="a" type="main">Lucky thirteen: Breaking the TLS and DTLS record protocols</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><forename type="middle">L</forename><surname>Fardan</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">N</forename><forename type="middle">J</forename><surname>And</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Paterson</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">K</forename><forename type="middle">G</forename></persName>
		</author>
		<ptr target="http://www.isg.rhul.ac.uk/tls/TLStiming.pdf" />
	</analytic>
	<monogr>
		<title level="m">IEEE Symposium on Security and Privacy</title>
		<imprint>
			<publisher>IEEE</publisher>
			<date type="published" when="2013" />
			<biblScope unit="page" from="526" to="540" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b1">
	<analytic>
		<title level="a" type="main">On the security of RC4 in TLS</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Alfardan</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">N</forename><forename type="middle">J</forename><surname>Bernstein</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><forename type="middle">J</forename><surname>Pater-Son</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">K</forename><forename type="middle">G</forename><surname>Poettering</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">B</forename><surname>And</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Schuldt</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><forename type="middle">C</forename></persName>
		</author>
		<ptr target="http://www.isg.rhul.ac.uk/tls/RC4biases.pdf" />
	</analytic>
	<monogr>
		<title level="m">22nd USENIX Security Symposium</title>
		<imprint>
			<date type="published" when="2013" />
			<biblScope unit="page" from="305" to="320" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b2">
	<monogr>
		<title level="m" type="main">Release notes, version 1.11.30</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Botan</surname></persName>
		</author>
		<idno>2016-07-19</idno>
		<ptr target="https://botan.randombit.net/news.html" />
		<imprint>
			<date type="published" when="2016" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b3">
	<monogr>
		<title level="m" type="main">The Transport Layer Security (TLS) Protocol Version 1.2. RFC 5246 (Proposed Standard)</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Dierks</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><surname>And</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Rescorla</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">E</forename></persName>
		</author>
		<ptr target="https://tools.ietf.org/html/rfc4346" />
		<imprint>
			<date type="published" when="2008-08" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b4">
	<monogr>
		<title level="m" type="main">Here come the XOR ninjas</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Duong</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><surname>And</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Rizzo</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename></persName>
		</author>
		<ptr target="http://netifera.com/research/beast/beast_DRAFT_0621.pdf" />
		<imprint>
			<date type="published" when="2011" />
		</imprint>
	</monogr>
	<note>Unpublished manuscript</note>
</biblStruct>

<biblStruct xml:id="b5">
	<monogr>
		<title level="m" type="main">Recommendation for Block Cipher Modes of Operation: Galois/Counter Mode (GCM) and GMAC</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Dworkin</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename></persName>
		</author>
		<ptr target="http://csrc.nist.gov/publications/nistpubs/800-38D/SP-800-38D.pdf" />
		<imprint>
			<date type="published" when="2007-11" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b6">
	<monogr>
		<title level="m" type="main">XML Encryption Syntax and Processing 1.1. W3C Candidate Recommendation</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Eastlake</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Reagle</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Hirsch</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">F</forename><surname>Roessler</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><surname>Imamura</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><surname>Dillaway</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">B</forename><surname>Simon</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">E</forename><surname>Yiu</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">K</forename><surname>And</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Nyström</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename></persName>
		</author>
		<ptr target="http://www.w3.org/TR/2012/WD-xmlenc-core1-20121018" />
		<imprint>
			<date type="published" when="2012" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b7">
	<monogr>
		<title level="m" type="main">Authentication weaknesses in GCM</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Ferguson</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">N</forename></persName>
		</author>
		<ptr target="http://csrc.nist.gov/groups/ST/toolkit/BCM/documents/comments/CWC-GCM/Ferguson2.pdf" />
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b8">
	<analytic>
		<title level="a" type="main">Weaknesses in the key scheduling algorithm of RC4</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Fluhrer</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><forename type="middle">R</forename><surname>Mantin</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">I</forename><surname>And</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Shamir</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">SAC 2001</title>
		<editor>S. Vaudenay and A. M. Youssef</editor>
		<meeting><address><addrLine>Heidelberg</addrLine></address></meeting>
		<imprint>
			<publisher>Springer</publisher>
			<date type="published" when="2001-08" />
			<biblScope unit="volume">2259</biblScope>
			<biblScope unit="page" from="1" to="24" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b9">
	<analytic>
		<title level="a" type="main">Masking for Tweakable Blockciphers with Applications to Authenticated Encryption</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Granger</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Jovanovic</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><surname>Mennink</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">B</forename><surname>And</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Neves</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Advances in Cryptology -EUROCRYPT 2016</title>
		<editor>M. Fischlin and J.-S</editor>
		<imprint>
			<date type="published" when="2016" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b10">
	<analytic>
		<title/>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Coron</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">LNCS</title>
		<imprint>
			<biblScope unit="volume">9665</biblScope>
			<biblScope unit="page" from="263" to="293" />
			<publisher>Springer</publisher>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b11">
	<monogr>
		<title level="m" type="main">Pkcs #11 cryptographic token interface, version 2.40, oasis specification</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Griffin</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>And</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Fenwick</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">V</forename></persName>
		</author>
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b12">
	<analytic>
		<title level="a" type="main">The fragility of aes-gcm authentication algorithm</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Gueron</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>And</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Krasnov</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">V</forename></persName>
		</author>
		<ptr target="https://eprint.iacr.org/2013/157.pdf" />
	</analytic>
	<monogr>
		<title level="m">Information Technology: New Generations (ITNG)</title>
		<imprint>
			<date type="published" when="2014-04" />
			<biblScope unit="page" from="333" to="337" />
		</imprint>
	</monogr>
	<note>11th International Conference on. Preprint available at</note>
</biblStruct>

<biblStruct xml:id="b13">
	<monogr>
		<title level="m" type="main">Full nonce misuse-resistant authenticated encryption at under one cycle per byte</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Gueron</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>And</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Lindell</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Y</forename><surname>Gcm-Siv</surname></persName>
		</author>
		<ptr target="https://eprint.iacr.org/2015/102.pdf" />
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b14">
	<monogr>
		<title level="m" type="main">Synthetic Initialization Vector (SIV) Authenticated Encryption Using the Advanced Encryption Standard (AES)</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Harkins</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename></persName>
		</author>
		<ptr target="https://tools.ietf.org/html/rfc5297" />
		<imprint>
			<date type="published" when="2008-10" />
		</imprint>
	</monogr>
	<note>RFC 5297 (Informational)</note>
</biblStruct>

<biblStruct xml:id="b15">
	<analytic>
		<title level="a" type="main">Robust authenticated-encryption AEZ and the problem that it solves</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Hoang</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">V</forename><forename type="middle">T</forename><surname>Krovetz</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><surname>And</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Rogaway</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">EUROCRYPT 2015, Part I</title>
		<editor>E. Oswald and M. Fischlin</editor>
		<meeting><address><addrLine>Heidelberg</addrLine></address></meeting>
		<imprint>
			<publisher>Springer</publisher>
			<date type="published" when="2015-04" />
			<biblScope unit="volume">9056</biblScope>
			<biblScope unit="page" from="15" to="44" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b16">
	<monogr>
		<title level="m" type="main">Bulletin: Vulnerability in IBM Domino Web Server TLS AES GCM Nonce Generation</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Ibm</forename><surname>Security</surname></persName>
		</author>
		<ptr target="https://www-01.ibm.com/support/docview.wss?uid=swg21979604" />
		<imprint/>
	</monogr>
	<note>Accessed 2016-05-13</note>
</biblStruct>

<biblStruct xml:id="b17">
	<analytic>
		<title level="a" type="main">One bad apple: Backwards compatibility attacks on state-of-the-art cryptography</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Jager</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><surname>Paterson</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">K</forename><forename type="middle">G</forename><surname>And</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">So-Morovsky</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename></persName>
		</author>
		<ptr target="https://www.nds.rub.de/research/publications/backwards-compatibility/" />
	</analytic>
	<monogr>
		<title level="m">NDSS 2013</title>
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b18">
	<monogr>
		<title level="m" type="main">Encryption (JWE) -draft-ietf-jose-json-webencryption-06</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Jones</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>And</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Hildebrand</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Web</surname></persName>
		</author>
		<ptr target="https://tools.ietf.org/html/rfc7516" />
		<imprint>
			<date type="published" when="2015-05" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b19">
	<monogr>
		<title level="m" type="main">Authentication failures in NIST version of GCM</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Joux</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename></persName>
		</author>
		<ptr target="http://csrc.nist.gov/groups/" />
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b20">
	<monogr>
				<title level="m">Series-Drafts/GCM/Joux_comments.pdf</title>
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b21">
	<monogr>
		<title level="m" type="main">HS1-SIV v1. CAESAR Round 1 submission</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Krovetz</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename></persName>
		</author>
		<imprint>
			<date type="published" when="2014" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b22">
	<analytic>
		<title level="a" type="main">The software performance of authenticated-encryption modes</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Krovetz</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><surname>And</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Rogaway</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Fast Software Encryption -FSE 2011</title>
		<editor>A. Joux</editor>
		<meeting><address><addrLine>Berlin, Heidelberg; Berlin Heidelberg</addrLine></address></meeting>
		<imprint>
			<publisher>Springer</publisher>
			<date type="published" when="2011" />
			<biblScope unit="page" from="306" to="327" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b23">
	<monogr>
		<title level="m" type="main">ChaCha20-Poly1305 cipher suites for transport layer security (TLS)</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Langely</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Chang</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">W</forename><surname>Mavrogiannopou-Los</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">N</forename><surname>Strombergson</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>And</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Josef-Sson</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename></persName>
		</author>
		<ptr target="https://tools.ietf.org/html/draft-ietf-tls-chacha20-poly1305-04" />
		<imprint>
			<date type="published" when="2015-12" />
		</imprint>
	</monogr>
	<note>InternetDraft</note>
</biblStruct>

<biblStruct xml:id="b24">
	<monogr>
		<title level="m" type="main">The POODLE bites again</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Langley</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename></persName>
		</author>
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b25">
	<monogr>
		<title/>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Langley</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename></persName>
		</author>
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b26">
	<monogr>
		<title level="m" type="main">The Galois/Counter Mode of Operation (GCM)</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Mcgrew</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>And</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Viega</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename></persName>
		</author>
		<ptr target="http://csrc.nist.gov/groups/ST/toolkit/BCM/documents/proposedmodes/gcm/gcm-spec.pdf" />
		<imprint>
			<date type="published" when="2005-05" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b27">
	<monogr>
		<title level="m" type="main">This POODLE bites: exploiting the SSL 3.0 fallback</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Möller</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">B</forename><surname>Duong</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><surname>And</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Kotowicz</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">K</forename></persName>
		</author>
		<ptr target="https://www.openssl.org/~bodo/ssl-poodle.pdf" />
		<imprint>
			<date type="published" when="2014" />
		</imprint>
	</monogr>
	<note>Accessed 2016-05-13</note>
</biblStruct>

<biblStruct xml:id="b28">
	<analytic>
		<title level="a" type="main">ChaCha20 and Poly1305 for IETF Protocols</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Nir</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Y</forename><surname>And</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Langley</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename></persName>
		</author>
		<ptr target="https://tools.ietf.org/html/rfc7539" />
	</analytic>
	<monogr>
		<title level="j">RFC</title>
		<imprint>
			<biblScope unit="volume">7539</biblScope>
			<date type="published" when="2015-05" />
		</imprint>
	</monogr>
	<note>Informational)</note>
</biblStruct>

<biblStruct xml:id="b29">
	<monogr>
		<title level="m" type="main">Countering cryptographic subversion</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Paterson</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">K</forename><forename type="middle">G</forename></persName>
		</author>
		<ptr target="https://hyperelliptic.org/PSC/slides/paterson-PSC.pdf" />
		<imprint>
			<date type="published" when="2015" />
		</imprint>
	</monogr>
	<note>Accessed 2016-05-13</note>
</biblStruct>

<biblStruct xml:id="b30">
	<analytic>
		<title level="a" type="main">Prohibiting RC4 Cipher Suites</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Popov</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename></persName>
		</author>
		<ptr target="https://tools.ietf.org/html/rfc7465" />
	</analytic>
	<monogr>
		<title level="j">RFC</title>
		<imprint>
			<biblScope unit="volume">7465</biblScope>
			<date type="published" when="2015-02" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b31">
	<monogr>
		<title level="m" type="main">Security advisory explicit initialization vector for aes-gcm cipher</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Radware</forename><surname>Sa18456</surname></persName>
		</author>
		<ptr target="https://kb.radware.com/Questions/SecurityAdvisory/Public/Security-Advisory-Explicit-Initialization-Vector-f" />
		<imprint/>
	</monogr>
	<note>Accessed 2016-05-13</note>
</biblStruct>

<biblStruct xml:id="b32">
	<monogr>
		<title level="m" type="main">The Transport Layer Security (TLS) Protocol Version 1.3. InternetDraft</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Rescorla</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">E</forename></persName>
		</author>
		<ptr target="https://tools.ietf.org/html/draft-ietf-tls-tls13-12" />
		<imprint>
			<date type="published" when="2016-03" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b33">
	<analytic>
		<title level="a" type="main">Deterministic authenticated-encryption: A provable-security treatment of the key-wrap problem</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Rogaway</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><surname>And</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Shrimpton</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename></persName>
		</author>
		<ptr target="http://eprint.iacr.org/2006/221" />
	</analytic>
	<monogr>
		<title level="j">Cryptology ePrint Archive</title>
		<imprint>
			<date type="published" when="2006" />
		</imprint>
	</monogr>
<note type="report_type">Report</note>
</biblStruct>

<biblStruct xml:id="b34">
	<monogr>
				<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Salowey</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Choudhury</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>And</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Mcgrew</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename></persName>
		</author>
		<ptr target="https://tools.ietf.org/html/rfc5288" />
		<title level="m">AES Galois Counter Mode (GCM) Cipher Suites for TLS. RFC 5288 (Proposed Standard)</title>
		<imprint>
			<date type="published" when="2008-08" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b35">
	<monogr>
		<title level="m" type="main">Curious padding oracle in openssl</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Somorovsky</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename></persName>
		</author>
		<ptr target="http://web-in-security.blogspot.de/2016/05/curious-padding-oracle-in-openssl-cve.html" />
		<imprint>
			<date type="published" when="2016" />
			<biblScope unit="page" from="2016" to="2107" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b36">
	<monogr>
		<title/>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Tzvetanov</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">K</forename><surname>A10 Cve-</surname></persName>
		</author>
		<idno>2016-07-11</idno>
		<ptr target="https://files.a10networks.com/vadc/cve-2016-0270-gcm-nonce-vulnerability/" />
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b37">
	<monogr>
		<title level="m" type="main">Offset Codebook Mode) Ciphersuites for Transport Layer Security (TLS)</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Zauner</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Aes-Ocb</surname></persName>
		</author>
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b38">
	<monogr>
		<title/>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Internet-Draft</surname></persName>
		</author>
		<ptr target="https://tools.ietf.org/html/draft-zauner-tls-aes-ocb-04" />
		<imprint>
			<date type="published" when="2016-04" />
		</imprint>
	</monogr>
</biblStruct>

				</listBibl>
			</div>
		</back>
	</text>
</TEI>
