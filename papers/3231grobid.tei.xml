<?xml version="1.0" encoding="UTF-8"?>
<TEI xmlns="http://www.tei-c.org/ns/1.0" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
xsi:schemaLocation="http://www.tei-c.org/ns/1.0 /Users/atharsefid/Desktop/grobid-0.5.3/grobid-home/schemas/xsd/Grobid.xsd"
 xmlns:xlink="http://www.w3.org/1999/xlink">
	<teiHeader xml:lang="en">
		<encodingDesc>
			<appInfo>
				<application version="0.5.3" ident="GROBID" when="2020-09-29T03:04+0000">
					<ref target="https://github.com/kermitt2/grobid">GROBID - A machine learning software for extracting information from scholarly documents</ref>
				</application>
			</appInfo>
		</encodingDesc>
		<fileDesc>
			<titleStmt>
				<title level="a" type="main">USENIX Association Proceedings of the FREENIX Track: 2001 USENIX Annual Technical Conference</title>
			</titleStmt>
			<publicationStmt>
				<publisher/>
				<availability status="unknown"><licence/></availability>
				<date>June 25-30, 2001</date>
			</publicationStmt>
			<sourceDesc>
				<biblStruct>
					<analytic>
						<author>
							<affiliation key="aff0">
								<orgName type="department">Linux Technology Centre</orgName>
								<orgName type="laboratory">THE ADVANCED COMPUTING SYSTEMS ASSOCIATION</orgName>
								<orgName type="institution">Richard Moore -IBM</orgName>
								<address>
									<settlement>Boston</settlement>
									<region>Massachusetts</region>
									<country key="US">USA</country>
								</address>
							</affiliation>
						</author>
						<title level="a" type="main">USENIX Association Proceedings of the FREENIX Track: 2001 USENIX Annual Technical Conference</title>
					</analytic>
					<monogr>
						<imprint>
							<date type="published">June 25-30, 2001</date>
						</imprint>
					</monogr>
				</biblStruct>
			</sourceDesc>
		</fileDesc>
		<profileDesc>
			<abstract>
				<p>Dynamic Probes (DProbes) from IBM [*] is a generic and pervasive system debugging facility that will operate under the most extreme software conditions with minimal system disruption. It</p>
			</abstract>
		</profileDesc>
	</teiHeader>
	<text xml:lang="en">
		<body>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="1.">Introduction</head><p>Å¸ Portability to other processor architectures.</p><p>Essentially DProbes has become a driver or enabler for other debugging technologies. Its enabling capability derives from the following key characteristics:</p><p>1. There is a mechanism for intercepting execution at arbitrary code locations -this is the probepoint mechanism.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.">Each probepoint has an associated probe handler</head><p>that allows specific actions to be taken. This is implemented using a low-level Reverse Polish Notation (RPN) language that gives access to kernel and user space memory and to the processor's registers <ref type="bibr">[1]</ref> .</p><p>3. A probe handler terminates in one of three <ref type="bibr">ways:</ref> i. By returning to the probed code seamlessly.</p><p>ii. By returning to the probed code via a logging daemon. A temporary logging buffer is made available for this purpose. This characteristic is exploited to provide a means of instrumenting a module with tracepoints.</p><p>iii. By transferring control to an external debugging facility having first removed the probepoint. Whether or not the original code will continue execution is a function of the external facility.</p><p>The efficacy of DProbes is further enhanced by the following three design criteria:</p><p>1. There is no required interactive user interface for the probe handler <ref type="bibr">[2]</ref> . This is intentional -it minimizes the dependency of the probe handler on system interfaces and resources. Thus the probe handler is designed to run as a self-contained interrupt handler. The RPN command interpreter provides recovery form potential fatal errors without reference to operating system facilities. This criterion gives DProbes its universality since there are very few restrictions on where a probepoint may be placed and when the probe handler may execute. In fact, probepoints are only restricted from being placed in the code path of the probe handler. If such a probepoint were to be defined, DProbes would detect it and silently remove it. Probepoints may therefore be placed in code that runs at task time, interrupt time or during a context switch.</p><p>2. The second design criterion was to align a probepoint with a module rather than a storage location. Note that the watchpoint extension, which is described under 7. Dynamic Probes Recent Extensions, deviates from this criterion for reasons explained thereunder. By aligning a probepoint with a module, or to be more precise an offset into a module, the probe becomes independent of incidental circumstances that relate to a module's installation in memory and als o the processes under which that module is exe cuting. Thus, code that is shared between processes at different virtual addresses (for example a Linux shared library) has location-independent and process-independent probe definitions. This criterion gives DProbes its independence, since it makes it possible to describe a probe:</p><p>i. Independently of an operating system's implementation of module management (clearly the internal implementation needs to understand this);</p><p>ii. In canonical terms that relate to a programmer's view of his/her module which are: independent of whether a module is loaded at the time the probe is defined; and independent of any particular process under which that module exe cutes.</p><p>3. Probepoints are inserted into module code paths without the need for source code modifications to that module. Furthermore they may be inserted into any loaded and running code (kernel or user space) or code that is paged out or modules not yet loaded. This mechanism has been described in &lt;2&gt;. In summary, the instruction at the probe location is overlaid with a trapping instruction -under Intel 32-bit architecture (IA32) the int3 instruction is chosen. The original instruction is either single-stepped or emulated after the probe handler executes. This particular criterion gives DProbes its dynamic characteristic. The dynamism refers to its ability to instrument a module with probes on the fly so to speak. Thus there is absolutely no performance penalty when a probepoint is inactive.</p><p>These characteristics therefore provide an elementary universal dynamic tracing capability, which have been further extended in both universality and dynamism by recent enhancements -see the section: 7. Dynamic Probes Recent Extensions for details .</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.">DProbes as a Tracing Mechanism</head><p>This section discusses the implementation details of DProbes as a tracing mechanism in detail. We describe first the internal mechanism of the Dynamic Probes Event Handler (DPEH) that enables it to be used as a tracing agent.</p><p>DPEH internal details: DProbes provides various working storage elements for use by the probe handler:</p><p>1. Local variable array. 2. Global variable array. 3. A per-processor log buffer.</p><p>The latter is intended for use as a staging area for building a trace or log record to be passed synchronously to a logging or tracing daemon external to DProbes. One log buffer is permanently allocated per processor but the data in each buffer persists only for the duration that a probe handler is active on its respective processor. The RPN command interpreter maintains an internal pointer to the next available location in the buffer, which is reset to the beginning of the buffer on entry to the probe handler. Data is thus always accumulated monotonically and discarded on exit from the probe handler.</p><p>The buffer is populated using the log class of RPN instructions. These are defined in two categories: those that copy data directly from the RPN stack and those that use the RPN stack to specify data to be copied from system memory.</p><p>The direct category comprises three instructions in the IA32 implementation: log b,&lt;n&gt; Log byte log w,&lt;n&gt; Log word log d,&lt;n&gt;</p><p>Log double-word</p><p>Pop &lt;n&gt; elements from the RPN stack and from each, copy the least significant byte (8-bit integer), word (16-bit integer) or double-word to the log buffer.</p><p>The indirect category has four members in the IA32 implementation. Each operates by popping an address followed by a length from the RPN stack. Data, for that length, at that address, is copied to the log buffer. However, before data is copied, it is appended with a 3-byte prefix that contains a token byte and a length word. The length refers to the length of data that follows the prefix and the token byte to type of data. The feature enables:</p><p>a. A trace or log record to contain variable length data such as arrays whose length is determined dynamically.</p><p>b. A formatting utility to operate using a fixed template for variable length data.</p><p>The token byte values are defined as follows:</p><p>0 binary data logged successfully of length specified by the prefix length word.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>1</head><p>(ASCII) string data logged successfully of maximum length specified by the prefix length word. The actual length of the data may be less if a terminating NULL byte is encountered within the prefix length. This allows data of arbitrary lengths to be capped especially in cases where string data has been corrupted.</p><p>-1 a fault occurred accessing the data using a flat address. The prefix length is set to 4 and the variable data contains only the (flat) address that caused the fault.</p><p>-2 a fault occurred accessing the data using an invalid selector. The prefix length is set to 4 and the variable data contains only the selector for the segment generating the fault.</p><p>Note: the latter two tokens may occur in circumstances where the data address was valid. Since the RPN probe handler executes, essentially as an interrupt handler, with minimal access to system facilities it will not be able to recover from otherwise recoverable faults. This is a trade-off between the universality and flexibility of DProbes. See 3. DProbes Event Handler Processing for a further dis cussion on how such conditions are handled.</p><p>Under the IA32 implementation there are 4 RPN instructions use for logging data in memory:</p><p>log mrf Log memory range from flat address. log mrs Log memory range from segmented address.</p><p>Pop a flat address (log mrf) or a 16-bit offset then a 16-bit selector (log mrs) from the RPN stack. Then pop a length. Reserve space for the 3-byte prefix in the log buffer. Copy data from the address specified for the length specified to the log buffer. If a fault is generated then set the prefix token to -1, the length to 4 and store the fault address. If no fault is generated then set the prefix with a 0 token and length of data logged.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>log arf</head><p>Log ASCII range from flat address. log ars Log ASCII range from segmented address.</p><p>Pop a flat address (log arf) or a 16-bit offset then a 16-bit selector (log ars) from the RPN stack. Then pop a length. Reserve space for the 3-byte prefix in the log buffer. Copy data from the address specified up to the length specified or until a NULL terminator byte has been copied. If a fault is generated then set the prefix token to -2, the length to 4 and store the fault address. If no fault is generated then set the prefix with a 1 token and maximum length value popped from the RPN stack.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.">DProbes Event Handler Processing</head><p>We turn now to considerations concerning back-end probe event handler processing.</p><p>As described in &lt;2&gt;, the DProbes Event Handler (DPEH) needs to execute the original instruction that was replaced with a breakpoint. It does this by single-stepping the original instruction in situ with interrupts disabled <ref type="bibr">[3]</ref> . If that instruction faults then we require the operating system to recover and retry the instruction. However, one does not normally wish to have multiple trace records generated for each retry execution of an instruction, especially when that instruction eventually succeeds and will thus appear to the underlying program to have executed only once, and with success. This is achieved by delaying the call to the tracing daemon until after the original instruction has completed single-step. If a fault is generated then the daemon is not called and the log buffer is reset. Furthermore the DPEH reinstates the probepoint -int3 instruction under IA32 -and resets interrupt status, saved by the processor when the fault was generated, to indicate the status prior to execution of the probepoint. Finally it returns to the system fault handler to allow normal fault processing to occur. If the system retries the faulting instruction it will unwittingly retry the probepoint instruction. The DPEH will therefore be called for each retry. Only on successful execution of the original instruction will the trace daemon be called.</p><p>It is a requirement for the probe handler to be re-executed for each retry of a faulting instruction. This is because it is quite possible, in the case of a page fault, that the data causing the instruction to fault is also accessed by the probe handler for copying into the log buffer. Only on successful execution of the original instruction would the trace record in this case be complete.</p><p>Some instructions generate faults for non-error reasons, for example IA32 bounds instruction. For such instructions it would be desirable to log a trace record despite a fault being generated on single-step. This is now possible by means of the logonfault control statement, which is specified in the header of the RPN file. This feature was added recently to DProbes -see 7.</p><p>Dynamic Probes Recent Extensions below.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.">DPEH Performance Implications</head><p>We have made an initial study of the performance overhead of a probepoint. A mo re comprehensive performance evaluation is future work. The first set of results are quantitative observations made under the Linux 2.2.12 kernel. We also present some qualitative results taken from real-life usage under OS/2. The conclusions from these OS/2 exa mp les indicate that under mo st conditions the impact of a probepoint is negligible when active. We concern ourselves only with measuring the effect of the active probepoint, since for inactive probepoints there is no alteration to the code path and therefore a zero overhead.</p><p>We estimated the overhead of the DPEH using a 90 MHz Pentium[**] processor <ref type="bibr">[4]</ref> . Five exp eriments were performed:</p><p>1. To obtain a base measurement of the time taken to execute a sequence of the following three single cycle instructions in a loop:</p><p>loop: dec eax nop jnz loop 2. To test a null probe handler with only the abort <ref type="bibr">[5]</ref> RPN instruction and with the probe placed on the dec eax instruction. Here dec is single-stepped by the DPEH.</p><p>3. Using the same probe handler but the probe placed on the nop instruction. Here nop in emulated by the DPEH.</p><p>4. Using same probe location as 2 but a single push eax <ref type="bibr">[6]</ref> RPN instruction added to the probe handler.</p><p>5. The same probe location as 2 but a single exit <ref type="bibr">[7]</ref> RPN instruction in the probe handler.</p><p>The results were as follows:</p><p>1. One iteration of the three-instruction loop averaged 30ns, each instruction approximately 10ns .</p><p>2. One iteration of the loop averaged 16Âµs. Therefore the minimum overhead of the DPEH is approximately 16Âµs.</p><p>3. One iteration of the loop averaged 8Âµs. Therefore the cost of the DPEH back-end single-step processing accounts for half the overhead per probe.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.">One iteration of the loop averaged 16Âµs. push eax</head><p>therefore has a negligible effect. One might reasonably assume most register and memory based RPN instructions are of a similar overhead.</p><p>5. One iteration of the loop averaged 200Âµs. Most of this is the cost of a printk, which is the default logging method (see 5. The Trace Daemon Interface below for details on how printk in invoked).</p><p>Taken at face value the minimum overhead of the DPEH appears to be of the order of 10 3 . This would certainly be a valid perception if a probe were placed in a tight CPU-bound loop. However, in mo st applications of DProbes the average number of instructions exe cuted between consecutive exe cutions of the same probepoint outweighs any overhead imposed by the DPEH. This is illustrated by the following qualitative results taken from real-life uses of DProbes (actually Dynamic Trace) under OS/2:</p><p>1. Tracepoints <ref type="bibr">[8]</ref> on every kernel API entry and exit (circa 500 tracepoints). </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5.">Tracepoints on 4000 internal kernel routines.</head><p>Very noticeable, however the system was still useable.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Conclusions</head><p>While the cost of a probe is not cheap it can be considerably reduced by placing the probe on an emulated instruction such as nop. It can als o be reduced by judicious use of logging by employing conditional logic in the probe handler to avoid unnecessary log events. But foremost, the practical use of DProbes finds probepoints being placed in code paths with a relatively long mean time to iterate. Under these circumstances the overhead is negligible.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5.">The Trace Daemon Interface</head><p>The generic requirements for a trace daemon interface are:</p><p>1. To provide a logging API capable of being called from kernel space, while interrupts are disabled, from both a task-time and interrupt-time context.</p><p>2. To allow binary data of an arbitrary length to be logged and identified as originating from DProbes.</p><p>A number of candidates satisfy these requirements. The default behavior is to invoke the klog daemon via printk.</p><p>Other options include directing output through a dedicated asynchronous communications port (com1 or com2). Strictly speaking, using a communications port doesn't necessarily invoke a daemon unless one thinks of the monitoring system connected to the system running DProbes as a daemon. And finally, a local tracing daemon can be invoked to record the log buffer. Use of this option requires a degree of conformance between both DProbes and the tracing facility. We have chosen to use the Linux Trace Toolkit from Opersys &lt;5&gt; as an initial implementation. We will describe a little later a generic interface that is possible to implement by using the Generalised Kernel Hook Interface &lt;6&gt; mechanism.</p><p>Logging to the Communications ports or klog: Logging to both the com1 and com2 communications ports and klog involves converting the log data to an ASCII string of pairs of hexadecimal characters and outputting that to the respective medium. Prior to this we format a record header that contains both constant information and some optional entities that are common to all tracepoints. The most generalised form of the trace header template is as follows:</p><p>"DProbes(%d,%d) cpu=%d name=%s pid=%d uid=%d cs=%x eip=%08lx ss=%x esp=%08lx tsc=%08lx:%08lx\n"</p><p>Other than the DProbes(...) text item, every other item is optionally present. All but cpu are selectable by the user through parameter switched to the dprobes command; cpu is activated automatically when DProbes is run from a multi-processor system.</p><p>The meaning of each constituent header item is as follows:</p><p>DProbes(%d,%d) Displays the major and minor code that identifies the probepoint. Each probepoint has assigned a major and minor identifier. These are not required to be unique, but by convention are chosen to indicate a unique type of probe, for example the exit point(s) of a particular routine. Major and minor codes are intended to be used by a generalised formatter to identify a unique formatting template. See 6. Trace Formatting Interface below cpu=%d Displays the processor id on which the probe was executed. This is suppressed on uniprocessor systems and always displayed on multi-processor systems.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>name=%s</head><p>Displays the process name taken from the current task structure when the probe was executed.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>pid=% d</head><p>Displays the process id taken from the current task structure when the probe was executed.</p><p>uid=% d Displays the user id name taken from the current task structure when the probe was executed.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>cs=% x eip=%08lx</head><p>Displays the CS and EIP registers at the probe location. This is sometimes useful in distinguishing individuals of a group of similarly formatted and therefore identical major and minor coded probes. For example, multiple return points from a function.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>ss=% x esp=%08lx</head><p>Displays the SS and ESP register values when the probe was executed. This can give an indication of the nesting level of a subroutine.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>tsc=%08lx:%08lx</head><p>Displays the high resolution processor time-stamp counter in seconds and micro-seconds.</p><p>The remaining data is output as an ASCII string of hexadecimal characters.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Logging to a Trace Daemon</head><p>We chose to use the Linux Trace Toolkit (LTT) &lt;5&gt; from Opersys as the trace recording daemon. It provides the usual post-processing, formatting and analysis features as well as a daemon that manages the a kernel space trace buffer and a mechanism for off-loading the trace buffer to disk. But most importantly, the Linux Trace Toolkit was conceived as a kernel based static <ref type="bibr">[9]</ref> tracing mechanism, capable for having tracepoints placed in both interrupt handlers and code that runs with interrupts disabled. In other words the conditions under which the DPEH executes. We were able extend the Linux Trace Toolkit to provide an kernel programming interface that allows data to be logged of a an arbitrary length. </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>id</head><p>This a module identifier returned by LTT when tracepoints for a given module are activated. DProbes calls the LTT trace_create_event() routine when it inserts tracepoint for a given module. This enables LTT to correlate events with a module for the purposes of event analysis. Note: DProbes will call LTT trace_destroy_event() routine when tracepoints for a module are removed.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>DataSize</head><p>This is the overall size of the trace record (flags + + log buffer content).</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Data</head><p>This is a pointer to the trace record (flags + header + log buffer content).</p><p>The logged data is further structured with a header followed by the data from the log buffer. The header comprises a flag double-word followed by one or mo re binary data items concatenated together. The presence of an item is signified by its corresponding flag bit being set. The following table shows the format of each header item and its corresponding flag setting in the order they appear in the header: process name string 0x0400 11 tsc uint64 0x0200 10 esp uint32 0x0100 9</p><note type="other">ss uint32 0x0080 8 eip uint32 0x0040 7 cs uint32 0x0020 6 uid uint32 0x0010 5 pid uint32 0x0008 4 cpu uint32 0x0004 3 minor uint32 0x0002 2 major uint32 0x0001 1 description type flag #</note><p>This implementation is specific to LTT, but may be readily adapted to other daemons either by requiring that they support the three interfaces for creating, destroying and logging an event.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Ge neralised Kernel Hook Interface</head><p>The disadvantage of the implementation just described is that DProbes needs to be built for use with LTT and LTT needs to be present in the system before DProbes loads in order to resolve the external references to the three interfaces. We can avoid this problem by using the Generalised Kernel Hook Interface &lt;6&gt; to define hook exit points within DProbes for the three interfaces. An arbitrary trace daemon would register and arm exit routines for these three hooks when the daemon loads or is instructed to do so. Because the state of activation of a GKHI hook is transparent to DProbes, it would execute code paths that call the three interfaces (now hooks) without regard to whether a recipient daemon had armed them. The equivalent hook exit points for each of the three API calls is coded as follows: trace_event(event, &amp;event_struc); GKHOOK_2VAR(GKHOOK_DPROBES_LOG_EVEN T, event, &amp;event_struc); event=trace_create_event(name, format, desc); GKHOOK_ 4VAR(GKHOOK_DPROBES_CREATE_EV ENT,&amp;event, &amp;name, &amp;format, &amp;desc); rc=trace_destroy_event(event); GKHOOK_2VAR(GKHOOK_DPROBES_DESTROY_ EVENT,&amp;rc, event);</p><p>DProbes would notify GKHI of the existence of these three hooks during initialisation by calling GKH_ identify.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="6.">Trace Formatting Interface</head><p>Clearly, a hexidecimal format for the trace record is not the most user friendly. Therefore we have proposed a formatting utility in the form of a set of shared library routines that may be called to format individual trace records. The unformatted binary trace record is passed to the formatter and a pointer to the formatted trace record is returned.</p><p>The formatter uses text templates with place-holders to format the raw data. For efficiency, templates are cached in memory. The formatting library provides two additional subroutine calls:</p><p>1. initialise, where essentially the template directory file is opened, loaded and closed.</p><p>2. terminate, where any cached templates are freed.</p><p>Note: these two interfaces may be called sequentially, in reverse order to allow templates to be re-read from disk following an update.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Formatting Template Structure</head><p>The template syntax is an extension and simplification of that employed by the OS/2 Trace Formatter, which is a natural thing to do since Dynamic Probes also owes its origin to OS/2's Dynamic Trace facility &lt;7&gt;. This scheme is based on a printf-like formatting template. But as discussed below, we have a requirement to format arrays and binary data (essentially an array of bytes) whose number of elements is only determined at the time a trace record is created. This requirement necessitates deviation from a simple printf template.</p><p>By convention a unique major code is assigned per module. Each unique trace record format for a module is assigned a unique minor code within the major code. This allows us to employ one formatting template file per major code. A template directory is employed to cross-reference major code to template file name. The template file needs only to identify minor code to delimit each template, however, for sanity purposes the major code is coded at the head of the file. Comments are allowed using c-style comment syntax. End of file or the next minor keyword delimits the end of the previous template.</p><p>The desc statement serves to provide a static text description of the trace event.</p><p>kernel module may register. The call kmod RPN instruction will give control to the hook exit routine. GKHI is used to implement this interface.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="8.">Porting Considerations:</head><p>Because DProbes relies on few operating system interfaces it is relatively easy to port to other operating systems, especially of the UNIX variety. Furthermore it is structured in a way that enables it to be ported to other architectures besides IA32. IBM is currently working on ports to the zSeries (31-bit and 64-bit) <ref type="bibr">[*]</ref> and Intel 64-bit &lt;8&gt; architectures.</p><p>Porting to Linux on other processor platforms The following are the key items to be translated when considering a port to another processor architecture:</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Integer size</head><p>The global and local variable array element size is set to the integer size (in multiples of 8). So also the element size of the RPN stack. All these dependencies are tied to a single #define definition.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>RPN instruction set</head><p>References to processor registers need to be mapped to the new architecture. Each register push instruction is actually an alias for the single instruction push r,&lt;n&gt;. The aliases are implemented by the dprobes command from a table that cross-references register to register number.</p><p>The push byte, word and double-word set may need to be extended to include a quad-word (64-bit). The will need to be implemented to produce the correct results for the particular endian characteristic of the processor.</p><p>It is unlikely that a probe handler written for one architecture would work without mo dification for another. However this can be addressed by using a high-level language interface for probe handler definitions. This would avoid low-level CPU based constructs and have a good chance of being architecturally independent. <ref type="bibr">[11]</ref> Probepoint implementation Probepoints are implemented trapping instruction breakpoints. The processor architecture must provide an instruction that can be stored atomically and will case a privilege-level switch. For example, SVC 255 serves this purpose for IBM zSeries processors. The interrupt handler for the breakpoint instruction will need to be hooked by the DPEH.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Single-step</head><p>The original instruction at the probepoint needs to be single-stepped. Such a mechanism must therefore exits for use under software control. Use of the hardware watchpoint mechanism may be needed to implement this. Under IBM zSeries, one would use the Program Event Recording (PER) facility. If no inherent single-step capability exists then use of additional breakpoint instructions will be required -this however is an imperfect solution which may prohibit the specification of probepoints on jump or call instructions.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Processor exceptions</head><p>All processor exceptions that are generated through normal instruction execution need to be intercepted as part of the single-step back-end processing. Additionally the sequence from breakpoint interrupt through to single-step interrupt needs to be conducted with interrupts disabled in order:</p><p>1. to preserve event sequences where an interrupt occurs during the processing of a probe event 2. to avoid difficulties that arise with recursion through the DPEH.</p><p>Under Linux for IA32 this required both the exception 1 and exception 3 trap gates to be converted to interrupt gates.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Processor serialisation</head><p>Under a multi-processor environment the single-step optionally needs to be executed while other processors suspend execution. If this facility cannot be guaranteed then the -stopcpus switch of the dprobes command will not be supportable.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Instruction cache serialisation</head><p>Because instructions of loaded modules are dynamically altered, serialisation of the instruction pre-fectch cache may need to be performed. Under Linux the flush_icache operating system call achieves this.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Watchpoint implementation</head><p>This is more complex and difficult to generalise. In the worst case scenario, watchpoint probe support will have to be removed. Otherwise support is a matter of mapping the watchpoint address and range the processor implementation. The DPEH watchpoint event interface will need to hook the watchpoint interrupt handler. It is likely that a generalised debug register allocation scheme will be needed along with adjustments to context switching to ensure registers used for watchpoints are global to all contexts and can easily co-exist with other uses of watchpoints within the system <ref type="bibr">[12]</ref> .</p><p>Porting to other operating systems. There are four key considerations:</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Module management</head><p>DProbes requires a unique handle by which it can refer to a module while either loaded or on disk. There needs to be a means of correlating a virtual storage address in a given context with a module handle. Under Linux the inode serves this purpose.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Page management</head><p>Probepoints need to be re-inserted when a module page is brought into memory. Under Linux DProbes achieves this by hooking the readpage address. If the paging mechanism is not used make the initial load of a module, as in the case of Linux kernel modules then module load and unload will also need to be hooked.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Symbolic support</head><p>To support symbolic expressions the expression-analyser in the dprobes command will need to be adapted to process the module format. Under Linux DProbes assumes the ELF format, which is common to many UNIX-like platforms.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Memory management services</head><p>Apart from basic allocation and de-allocation functions, DProbes will require a means of aliasing a physical page with a private writeable virtual address to be able to store the breakpoint instructions without causing a fault or a proliferation of privatised pages, which would be the case where a Copy-on-Write page management scheme is implemented.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Fault handling</head><p>The DPEH needs to intercept faults relating to access violations before any operating system processing so that they may be silently handled by the DPEH RPN command interpreter.</p></div><figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_0"><head></head><label></label><figDesc>Dynamic Probes (DProbes) for Linux &lt;1&gt; was first released in August 2000 and presented at the Annual Linux Showcase in October 2000 &lt;2&gt;. The original functionality was essentially that of an automated kernel debugger. Since then DProbes has been extended considerably. It now interfaces with a number of external debugging agents, for example: The Kernel Debugger &lt;3&gt; and Kernel Crash Dump &lt;4&gt; facilities from Silicon Graphics Inc. (SGI) [**]; the standard user-space core dump and syslog facilities within Linux and also the Linux Trace Toolkit &lt;5&gt; from Opersys. The major topics discussed in this paper are: Å¸ Detailed implementation aspects of DProbes that relate to its use as an agent for trace instrumentation under the Linux operating system running on the Intel 32-bit architecture (IA32) &lt;8&gt;. Å¸ Portability considerations across other operating systems running under the Intel 32-bit architecture in particular UNIX-like operating systems.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_1"><head>minor=&lt;minor code&gt;[,] desc=&lt;"descriptive header text"&gt;[</head><label></label><figDesc>Each formatting statement is of the form keyword=&lt;value&gt; Numeric values are allowed to be expressed in decimal and hexadecimal using c-notation. Strings are quoted using c-notation. The first statement of the file is: major=&lt;major code&gt; Subsequent statements will follow the format:</figDesc></figure>
		</body>
		<back>

			<div type="acknowledgement">
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="9.">Where to obtain DProbes and GKHI</head></div>
			</div>

			<div type="annex">
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="7.">Dynamic Probes Recent Extensions</head><p>Since its original release, Dynamic Probes has been enhanced with a number of new features which are relevant to tracing. These are briefly described below:</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Watchpoint Probes</head><p>This innovation defines a new class of probe that exploits the hardware watchpoint <ref type="bibr">[10]</ref> architecture. Watchpoints are specified by watch-type, which under IA32 may be Read, Write, Execute or IO; and address range. Watchpoints are global and not aligned with any particular module, however symbolic expressions are permitted in the specification of a watchpoint address. This capability gives DProbes its ability to trace memory accesses.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Logonfault</head><p>This allows the option of logging the contents of a log buffer whether or not the instruction at the tracepoint generates an exception during single-step. If the operating system retries the instruction then mu ltiple events will be logged. This was introduced to handle two circumstances:</p><p>1. where instructions such as bounds generate exc eptions as part of normal exe cution and the exc eption is not subject to seamless recovery by the operating system.</p><p>2. when a probe is used for mo nitoring program efficiency. For exa mp le, by logging all attempted exe cutions of an instruction that is capable of generating a page-fault. By this means one may glean an insight into the effects of a particular code path on demand paging.</p><p>In both cases it is acceptable log each exe cution of the probed instruction whether or not it is for recovery purposes.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Probe handler exception handling</head><p>This capability allows an RPN probe handler to specify a label from which execution will continue should a fault occur when processing a log instruction. The 3-byte prefix is optionally generated with the error code depending on the definition of the exc eption handler. Interpretation of the RPN probe handler is allowed to continue.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Call Kmod</head><p>This allows an open-ended extension to the RPN command set, by providing a hook for which any  Other company, product, and service names may be trademarks or service marks of others.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="10.">References</head></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="11.">Trademarks</head></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="12.">Notes</head><p>[9] Static as opposed to dynamic trace refers here to tracepoints that are hard coded in program source as <ref type="bibr">[8]</ref> A tracepoint is a probepoint used for the purpose of tracing.</p><p>[7] The exit RPN instruction causes the probe handler to exit and for the default external logging function to be called.</p><p>[6] push eax stores the value of the EAX register on the RPN stack. The processing by the interpreter for this instruction similar to that of most of the RPN instruction set.</p><p>[5] The abort RPN instruction causes probe handler to exit without calling any external logging function.</p><p>[4] These experiments were subsequently repeated using an Intel 200MHz Pentium processor. The results were consistent with those obtained earlier using the Intel 90Mhz Pentium processor, being scaled by a factor of approximately 50%.</p><p>[3] The reasons for this restrictive behavior are described in &lt;2&gt;. In summary this is due to the fact the recursion cannot be tolerated by the DPEH since few system services are available to it, in particular memory allocation. It would be possible to tolerate a finite level of recursion using a DPEH state saving stack independent of the IA32 implemented stack, however, performance and boundary conditions become complications. The latter in particular, since it would be difficult to manifest a consistent behavior to the user.</p><p>[2] An interactive interface could always be provided by transfering control to a debugger such as the SGI kernel debugger.</p><p>[1] An RPN language is used for the following reasons:</p><p>a. it allows a simple abstraction of the processor architecture to be defined to give access to the lowest level resources for minimal overhead. b. it provides a basis on which high-level language interfaces can be defined and be largely architecturally independent. Compare this with the Java [**] language and its implementation by a Java Virtual Machine which has an RPN-based virtual machine code.</p><p>[12] The IBM DProbes team submitted a Linux kernel patch to the Linux Kernel Mailing List to achieve this for Linux under IA32.</p><p>[11] The IBM Dprobes team is working on a current project to implement a high-level language preprocessor for DProbes which generates RPN instructions from a c-like probe definition language.</p><p>[10] Watchpoints refer to processor implemented breakpoints that require no code mo dification. In general they are implemented using special registers and features of the processor. They normally are not confined to mo nitoring exe cution but als o permit memory references to be monitored. Watchpoints are usually global in nature being specified by virtual or even physical address location under some architectures.</p><p>opposed to dynamically inserted at run-rime. With static trace there is always an overhead even when the tracepoint is inactive.</p></div>			</div>
			<div type="references">

				<listBibl/>
			</div>
		</back>
	</text>
</TEI>
