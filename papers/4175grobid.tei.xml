<?xml version="1.0" encoding="UTF-8"?>
<TEI xmlns="http://www.tei-c.org/ns/1.0" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
xsi:schemaLocation="http://www.tei-c.org/ns/1.0 /Users/atharsefid/Desktop/grobid-0.5.3/grobid-home/schemas/xsd/Grobid.xsd"
 xmlns:xlink="http://www.w3.org/1999/xlink">
	<teiHeader xml:lang="en">
		<encodingDesc>
			<appInfo>
				<application version="0.5.3" ident="GROBID" when="2020-09-29T04:01+0000">
					<ref target="https://github.com/kermitt2/grobid">GROBID - A machine learning software for extracting information from scholarly documents</ref>
				</application>
			</appInfo>
		</encodingDesc>
		<fileDesc>
			<titleStmt>
				<title level="a" type="main">An Empirical Study of Web Resource Manipulation in Real-world Mobile Applications An Empirical Study of Web Resource Manipulation in Real-world Mobile Applications</title>
			</titleStmt>
			<publicationStmt>
				<publisher/>
				<availability status="unknown"><licence/></availability>
				<date>August 15-17. 2018</date>
			</publicationStmt>
			<sourceDesc>
				<biblStruct>
					<analytic>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Xiaohan</forename><surname>Zhang</surname></persName>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Yuan</forename><surname>Zhang</surname></persName>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Qianqian</forename><surname>Mo</surname></persName>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Hao</forename><surname>Xia</surname></persName>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Zhemin</forename><surname>Yang</surname></persName>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Min</forename><surname>Yang</surname></persName>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Long</forename><surname>Lu</surname></persName>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Xiaohan</forename><surname>Zhang</surname></persName>
							<affiliation key="aff2">
								<orgName type="department">School of Computer Science</orgName>
								<orgName type="institution">Fudan University</orgName>
							</affiliation>
							<affiliation key="aff5">
								<orgName type="department">Shanghai Key Laboratory of Data Science</orgName>
								<orgName type="institution">Fudan University</orgName>
							</affiliation>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Yuan</forename><surname>Zhang</surname></persName>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Qianqian</forename><surname>Mo</surname></persName>
							<affiliation key="aff2">
								<orgName type="department">School of Computer Science</orgName>
								<orgName type="institution">Fudan University</orgName>
							</affiliation>
							<affiliation key="aff5">
								<orgName type="department">Shanghai Key Laboratory of Data Science</orgName>
								<orgName type="institution">Fudan University</orgName>
							</affiliation>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Hao</forename><surname>Xia</surname></persName>
							<affiliation key="aff2">
								<orgName type="department">School of Computer Science</orgName>
								<orgName type="institution">Fudan University</orgName>
							</affiliation>
							<affiliation key="aff5">
								<orgName type="department">Shanghai Key Laboratory of Data Science</orgName>
								<orgName type="institution">Fudan University</orgName>
							</affiliation>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Zhemin</forename><surname>Yang</surname></persName>
							<affiliation key="aff2">
								<orgName type="department">School of Computer Science</orgName>
								<orgName type="institution">Fudan University</orgName>
							</affiliation>
							<affiliation key="aff5">
								<orgName type="department">Shanghai Key Laboratory of Data Science</orgName>
								<orgName type="institution">Fudan University</orgName>
							</affiliation>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Min</forename><surname>Yang</surname></persName>
							<affiliation key="aff2">
								<orgName type="department">School of Computer Science</orgName>
								<orgName type="institution">Fudan University</orgName>
							</affiliation>
							<affiliation key="aff3">
								<orgName type="department">Shanghai Institute of Intelligent Electronics &amp; Systems</orgName>
							</affiliation>
							<affiliation key="aff4">
								<orgName type="department">Shanghai Institute for Advanced Communication and Data Science</orgName>
							</affiliation>
							<affiliation key="aff5">
								<orgName type="department">Shanghai Key Laboratory of Data Science</orgName>
								<orgName type="institution">Fudan University</orgName>
							</affiliation>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Xiaofeng</forename><surname>Wang</surname></persName>
							<affiliation key="aff2">
								<orgName type="department">School of Computer Science</orgName>
								<orgName type="institution">Fudan University</orgName>
							</affiliation>
							<affiliation key="aff5">
								<orgName type="department">Shanghai Key Laboratory of Data Science</orgName>
								<orgName type="institution">Fudan University</orgName>
							</affiliation>
							<affiliation key="aff6">
								<orgName type="institution">Indiana University</orgName>
								<address>
									<settlement>Bloomington</settlement>
								</address>
							</affiliation>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Long</forename><surname>Lu</surname></persName>
							<affiliation key="aff7">
								<orgName type="institution">Northeastern University</orgName>
							</affiliation>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Haixin</forename><surname>Duan</surname></persName>
							<affiliation key="aff8">
								<orgName type="institution">Tsinghua University</orgName>
							</affiliation>
						</author>
						<author>
							<affiliation key="aff0">
								<orgName type="department">Xiaofeng Wang</orgName>
								<orgName type="institution" key="instit1">Fudan University</orgName>
								<orgName type="institution" key="instit2">Indiana University</orgName>
								<address>
									<settlement>Bloomington</settlement>
								</address>
							</affiliation>
						</author>
						<author>
							<affiliation key="aff1">
								<orgName type="institution" key="instit1">Northeastern University</orgName>
								<orgName type="institution" key="instit2">Tsinghua University</orgName>
							</affiliation>
						</author>
						<title level="a" type="main">An Empirical Study of Web Resource Manipulation in Real-world Mobile Applications An Empirical Study of Web Resource Manipulation in Real-world Mobile Applications</title>
					</analytic>
					<monogr>
						<title level="m">Proceedings of the 27th USENIX Security Symposium</title>
						<meeting>the 27th USENIX Security Symposium <address><addrLine>Baltimore, MD, USA</addrLine></address>
						</meeting>
						<imprint>
							<date type="published">August 15-17. 2018</date>
						</imprint>
					</monogr>
					<note>Open access to the Proceedings of the 27th USENIX Security Symposium is sponsored by USENIX. This paper is included in the</note>
				</biblStruct>
			</sourceDesc>
		</fileDesc>
		<profileDesc>
			<abstract>
				<p>Mobile apps have become the main channel for access-ing Web services. Both Android and iOS feature in-app Web browsers that support convenient Web service integration through a set of Web resource manipulation APIs. Previous work have revealed the attack surfaces of Web resource manipulation APIs and proposed several defense mechanisms. However, none of them provides evidence that such attacks indeed happen in the real world, measures their impacts, and evaluates the proposed defensive techniques against real attacks. This paper seeks to bridge this gap with a large-scale empirical study on Web resource manipulation behaviors in real-world Android apps. To this end, we first define the problem as cross-principal manipulation (XPM) of Web resources, and then design an automated tool named XPMChecker to detect XPM behaviors in apps. Through a study on 80,694 apps from Google Play, we find that 49.2% of manipulation cases are XPM, 4.8% of the apps have XPM behaviors, and more than 70% XPM behaviors aim at top Web sites. More alarmingly, we discover 21 apps with obvious malicious intents, such as stealing and abusing cookies, collecting user credentials and impersonating legitimate parties. For the first time, we show the presence of XPM threats in real-world apps. We also confirm the existence of such threats in iOS apps. Our experiments show that popular Web service providers are largely unaware of such threats. Our measurement results contribute to better understanding of such threats and the development of more effective and usable countermeasures.</p>
			</abstract>
		</profileDesc>
	</teiHeader>
	<text xml:lang="en">
		<body>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="1">Introduction</head><p>Nowadays, different Web services are usually integrated together to provide users with more flexible and powerful capabilities. These integrated services are mostly delivered to the mobile platform today, with multiple services built into a single app. For the convenience of such an integration, mainstream mobile platforms (including Android and iOS) feature in-app Web browsers to run Web content. Examples of the browsers include WebView <ref type="bibr" target="#b7">[9]</ref> for Android and UIWebView/WKWebView for iOS <ref type="bibr" target="#b6">[8,</ref><ref type="bibr" target="#b8">10]</ref>. For simplicity of presentation, we call them WebViews throughout the paper.</p><p>Based on WebViews, mobile systems further provide app developers with Web resource manipulation APIs to customize browser behaviors and enrich Web app functionalities. For example, Android and iOS both have an API named evaluateJavascript that allows host apps to inject JavaScript code into the Web pages and get the result. However, these Web resource manipulation APIs lack origin-based access control, which means application code can manipulate Web resources from all origins managed by the WebView through these APIs. For example, if a host app has a WebView which loads "www.facebook.com", then it can use evaluateJavascript API to run JavaScript in the Facebook Web pages and get user data from Facebook. As a result, this capability of cross-origin manipulation would lead to severe security and privacy threats to user data.</p><p>Some previous work have discussed this kind of threats in the context of integrating WebView to mobile apps. Luo et al. <ref type="bibr" target="#b30">[32,</ref><ref type="bibr" target="#b31">33]</ref> showed that malicious apps can attack WebView by injecting JavaScript code, sniffing and hijacking Web navigation events <ref type="bibr" target="#b30">[32]</ref>, and hijacking touch events at the Web pages <ref type="bibr" target="#b31">[33]</ref>. Chen et al. <ref type="bibr" target="#b14">[16]</ref> and <ref type="bibr">Mohammed et al. [43]</ref> also demonstrated OAuth protocol can be attacked by a malicious app. Meanwhile, defensive mechanisms <ref type="bibr" target="#b39">[41,</ref><ref type="bibr" target="#b41">43,</ref><ref type="bibr" target="#b18">20]</ref> have also been proposed to regulate the accesses from host apps to Web resources.</p><p>Despite the existing works, there lacks an empirical study to understand how severe this problem is in realworld. In fact, none of existing work provides evidences for the presence of such threats. Instead, they discuss the attacks conceptually. Furthermore, existing defensive systems are evaluated with hand-crafted attack samples, without considering the special requirements in realworld deployment. Overall speaking, lacking such an empirical study may make us misunderstand the impact of the problem and limit the practicalness of proposed solutions.</p><p>This paper seeks to perform a large-scale empirical study on real-world apps to systematically understand the existence and impact of such threats. Since Android apps are easy to be collected in a large volume and Android platform dominates the mobile market, our empirical study is based on Android platform.</p><p>First, since not all manipulations cause security issues, we need a clear definition about the threat in Web resource manipulation. Inspired by the sameorigin policy in Web platforms, we define the threats in Web resource manipulation as cross-principal manipulation (XPM). In our definition, only manipulating code from a different principal to the manipulated Web resource will be flagged as suspicious.</p><p>Second, to allow measuring the Web resource manipulation problem on a large scale, we further design a tool to automatically recognize XPM behaviors in real-world apps. The key challenges are that: there are multiple principals inside an app; there is no obvious way to extract the principal of the manipulating code; it is hard to determine whether the principal of the manipulating code and that of the manipulated Web resource are the same. Our proposed tool, named XPMChecker, features several new techniques to automatically recognize XPMs in apps. Note that XPMChecker is not aimed to reliably detect all possible cross-principal manipulations. Instead, it is designed for a large-scale measurement study. Thus, we do not consider a future attacker who tries to evade XPMChecker.</p><p>Finally, we apply XPMChecker to analyze 80,694 apps from 48 categories in Google Play. Our evaluation shows that XPMChecker achieves high precision and recall in recognizing XPM behaviors. To systematically understand the threats of Web resource manipulation, we conduct several experiments and studies from these perspectives: the prevalence of the XPM behaviors, the breakdown of XPM behaviors, the awareness of such risks to service providers and the implications to current defenses. Our study leads to several insightful findings for the community to understand the impact of Web resource manipulation problem, confirms the threat of XPM behaviors with real-world samples and calls into rethinking of existing defensive mechanisms.</p><p>Findings. We find that 49.2% of manipulation points are cross-principal, 4.8% of apps have XPM behaviors, 63.6% of cross-principal manipulation points originate from libraries, and more than 70% of XPM points manipulate top popular Web services. We also find that most of XPM behaviors are necessary to improve the usability for mobile users, some XPM behaviors implement OAuth implicit flow in an unsafe way, and we confirm the Web resource manipulation behaviors with obvious malicious intents for the first time in real-world Android apps and iOS apps. More specifically, we find apps can abuse Web resource manipulation APIs to steal cookies, collect user credentials and impersonate the identities of legitimate parties, and a large number of users have been affected. We also perform several experiments to test the awareness of such risks to service providers, and find that most Web service providers are unaware of these risks and can not effectively prevent users from accessing sensitive pages in WebView. Finally, our measurement results also actuate us to rethink existing defensive mechanisms and propose new suggestions for future defense design.</p><p>In summary, we make the following contributions.</p><p>• We define the threats in Web resource manipulation as cross-principal manipulation (XPM), and perform a large-scale study of such threats in realworld apps.</p><p>• We design an automatic tool which overcomes several non-trivial challenges to identify crossprincipal manipulations in Android apps.</p><p>• We present new results and findings based on a study of 80,694 apps. Our results provide strong evidences for the presence of XPM behaviors with obvious malicious intents in real-world apps, and show that this problem is more severe than we think and exists in both Android and iOS. Our findings and evaluations on current defense mechanisms also bring new insights for future defense design.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2">Web Resource Manipulation</head><p>This paper seeks to understand the threats of Web resource manipulation in real-world apps. Although this kind of threats have been conceptually described in existing work <ref type="bibr" target="#b30">[32,</ref><ref type="bibr" target="#b31">33,</ref><ref type="bibr" target="#b41">43,</ref><ref type="bibr" target="#b14">16]</ref>, none of them systematically defines this problem. To support a large-scale measurement study, we need to clearly define the threats in Web resource manipulation.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.1">Motivating Example</head><p>We use a motivating example to ease the illustration of the security issues during Web resource manipulation. As shown in <ref type="figure" target="#fig_0">Figure 1</ref>, there are two apps, where app A is the official Facebook app and app B is a standalone chatting app called "Chatous". App B incorporates Facebook Login SDK to support user login with their Facebook accounts. There are three Java classes (C1, C2 and C3) in the two apps which use WebViews to load www.facebook.com and use CookieManager.getCookie API to get cookies from www.facebook.com.</p><p>For C1 which belongs to the official Facebook app and C2 which belongs to the official Facebook Login SDK, it is quite normal for them to access cookies from www.facebook.com. However, since C3 belongs to "Chatous" which is a different party to Facebook, it is quite susipicious for C3 to get cookies from www.facebook.com. After a manual inspection on C3, we confirm that "Chatous" abuses Facebook cookies to collect user data in Facebook (more details are discussed in Section 4.3.3).</p><p>The insight of this example is that when Web resources are manipulated by app code, if the manipulating code and the manipulated Web resource belong to the same party, it can be regarded as quite normal. However, if they do not originate from same party, it may bring threats to the manipulated Web resources.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.2">Problem Definition</head><p>The above example demonstrates the threats when Web resource manipulation APIs are used by a security principal to manipulate Web resources belong to another security principal. To clearly define this problem, this section introduces some new concepts.</p><p>Cross Principal Manipulation. We define where app code use Web resource manipulation APIs to manipulate Web resources as Web Resource Manipulation Points. At each Web resource manipulation point, there are two participated parties, i.e. the manipulating code and the manipulated Web resource. We designate the security principal of the manipulating code as App Principal (AP), and the security principal of the manipulated Web resource as Web principal (WP). Inspired by the same-origin policy in Web platforms, we study the threats in Web resource manipulation by considering both the app principal and the Web principal. Specifically, we define the concept of Cross-Principal Manipulation (XPM) of Web resources, when the app principal is not the same as the Web principal at a Web resource manipulation point. According to its definition, whether a Web resource manipulation point (named as mp) is XPM can be recognized with the following equation.</p><formula xml:id="formula_0">IS XPM(mp) := AP mp = W P mp (1)</formula><p>Threat Model. This paper studies the threats in Web resource manipulation. We consider the host app is not trusted, i.e. it may attack the Web resources by stealing sensitive data, breaking code/data integrity, etc. In our threat model, there are two kinds of attackers in the host app: the host app itself and the incorporated third-party libraries/SDKs. We assume the underlying operating system and Java runtime is trusted and not compromised. A fraudulent attacker may use low-level techniques such as directly manipulating the process memory, to evade analysis and detection. However, we do not consider such low-level attacks that may be performed by host apps, since Web resource manipulation APIs are widely supported by mainstream mobile platforms. This paper focuses on measuring the security impact of Web resource manipulation APIs in real-world applications, while does not aim to study all kinds of threats in appweb interaction, which has been well-studied by existing work <ref type="bibr" target="#b30">[32,</ref><ref type="bibr" target="#b31">33,</ref><ref type="bibr" target="#b15">17,</ref><ref type="bibr" target="#b21">23,</ref><ref type="bibr" target="#b34">36,</ref><ref type="bibr" target="#b46">48]</ref>.</p><p>Besides, we only consider Web resource manipulation problem in apps using system-provided Web browsers, i.e. WebView on Android and UIWebView/WKWebView on iOS. Certainly, host apps may use hybrid frameworks such as Cordova <ref type="bibr" target="#b0">[1]</ref> or customized browsers such as customized Chromium <ref type="bibr">[7]</ref>, to integrate Web services. Considering WebViews has standard interfaces, good compatibility and widely used by most apps, our study mainly focuses on WebView platform. Actually, a similar definition of cross-principal Web resource manipulation can be given for these hybrid platforms. <ref type="figure" target="#fig_0">Figure 1</ref> gives an example of Web resource manipulation using CookieManager.getCookie API in Android platform. However, the cross-manipulation problem is not specific to this API and not limited to Android platform. Actually, both Android and iOS provide plenty of Web resource manipulation APIs that can be used by the host apps to manipulate the integrated Web resources,  <ref type="table">url)</ref> is an API that loads the given "url". However, it can also be used to load JavaScript into the Web page when the "url" is some JavaScript code. In this paper we only consider the latter usage as Web resource manipulation API, and name it "loadUrlJs" to differ from the former usage.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.3">Web Resource Manipulation APIs</head><p>including quite sensitive resources, such as local storage and network traffic.</p><p>To better understand the impact of the problem of cross-principal Web resource manipulation, we perform a thorough study of the WebView APIs provided by Android and iOS platform. According to the type of the manipulated Web resources, we classify these APIs into the following four categories and select some representative APIs for both platforms in </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.">Network Traffic Manipulation</head><p>APIs. These APIs can provide attackers with the ability to monitor/-modify network traffics between the WebView and the remote server.</p><p>From <ref type="table" target="#tab_0">Table 1</ref>, we can conclude that both Android and iOS provide powerful APIs for developers to manipulate quite sensitive Web resources. A study about how these APIs are used by developers is quite urgent to help us understand its security implications in real-world.</p><p>Considering that Android is the most popular mobile platform and convenient to collect a large volume of apps, we base our empirical study on Android.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3">XPMChecker</head><p>To support a large-scale empirical study of Web resource manipulation behaviors in real-world apps, this paper designs an automatic tool, named XPMChecker to recognize this behavior in apps. This section first describes the challenges met in automatically checking of crossprincipal manipulation behaviors and then details the design of XPMChecker.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.1">Challenges and Ideas</head><p>According to the definition of XPM, we need to check whether app principal and Web principal are the same. However, it is non-trivial to automatically recognize cross-principal manipulation of Web resources. It at least faces the following challenges.</p><p>• Vague App Principal. According to same-origin policy, the security principal of a Web resource is identified by a triple (i.e. protocol, host, port). However, there lacks a way to name the security principal of app code. Meanwhile, host apps often incorporate third-party libraries and SDKs, making it quite challenging to identify the principals for different app code.</p><p>• Naming Diversity. Web principal and app principal are extracted from different sources and use different naming conventions for their identity, thus two kinds of naming diversity are introduced: polymorphism and abbreviation. Polymorphism is that the Web resource and app code may come from the same provider but they use different terms as their identities. Abbreviation is also very common, e.g. both "facebook" and "fb" represent the same company. Obviously, it is a huge challenge to correctly determine whether the Web principal and app principal represent the same party.</p><p>Main Ideas. After manually analyzing several apps with Web resource manipulation behaviors, we learn some insights to design XPMChecker. Basically speaking, our solution is composed of the following two ideas.</p><p>• Using code identity information to indicate app principal. Although there is no existing identifiers to represent app principal, we find some indicators extracted from the code can represent app principal.</p><p>For example, we can use Java package name, app name, etc. Furthermore, we could recognize thirdparty libraries in an app and use different app principal indicators based on their code.</p><p>• Leveraging search engine to compare Web principal and app principal. It is hard to automatically determine whether a Web principal and an app principal belong to the same party. Our idea is to leverage search engine knowledge. The insight is that the search results for a Web principal and an app principal should be highly related if they belong to the same party.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.2">Design Overview</head><p>Based on the above ideas, we design and implement XPMChecker which is capable of automatically recognizing XPM behaviors in real-world Android apps. <ref type="figure" target="#fig_1">Figure 2</ref> presents the workflow of XPMChecker. Overall speaking, XPMChecker is composed of the following three key components.</p><p>• Static Analyzer accepts an Android APK file as input, locates all possible Web resource manipulation points and collects manipulation information for each manipulation point. The manipulation information include the manipulated Web URL and manipulating context. Static Analyzer records all the information into a database for further analysis.</p><p>• Principal Identifier identifies Web Principal and App Principal for each manipulation point with the manipulation information in the database.</p><p>• XPMClassifier gives a final decision about whether a Web resource manipulation point is crossprincipal or not by leveraging nature language processing techniques and search engines.</p><p>Since our study mainly targets Android, XPMChecker is implemented for Android. Similarly, our methodology also works for other platforms such as iOS. We present the details of XPMChecker in the following. </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.3">Static Analyzer</head><p>The static analyzer first finds all the manipulation points for each input APK file, and extracts the manipulated Web URL and manipulating context for each manipulation point. The static analyzer is implemented based on Soot framework <ref type="bibr" target="#b26">[28]</ref> and Flowdroid <ref type="bibr" target="#b9">[11]</ref>.</p><p>Build ICFG. Each APK file is parsed and then an inter-procedure control flow graph (ICFG) is built. Some Web resource manipulation APIs are actually callbacks that are implicitly called by the system, thus edges representing the implicit invocations are added to the ICFG.</p><p>Locate Web Resource Manipulation Point. Web resource manipulation points are located by traversing the ICFG to look for the the signatures of Web resource manipulation APIs. We thoroughly study the official document of Android WebView APIs <ref type="bibr" target="#b7">[9]</ref> and their usages in real-world apps. Finally, as listed in <ref type="table" target="#tab_2">Table 2</ref>, we choose 9 APIs that manipulate sensitive Web resources to perform the study. In real-world apps, there are some API invocation sites with no manipulated Web resources actually. For example, some apps just override shouldOverrideUrlLoading API and call its super method using "super(this)" without any other behaviors. We use a forward data flow analysis to filter out these points.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.3.1">Extract Manipulated Web Resource URL</head><p>It is non-trivial to extract the manipulated URL at each manipulation point, as it is highly dependent on the specific API. We study these manipulation APIs and classify them into the following three basic types.</p><p>• Type I. The URL is the parameter for such manipulation API, For example, the manipulated URL for CookieManager.getCookie(String url) is its first parameter, as showed in Listing 1.</p><p>• Type II. The URL should be extracted from the invoked WebView instance. For example, in Listing 2, the manipulated URL of evaluateJavascript is the string "www.google.com" loaded by its base WebView instance.</p><p>• Type III. The URL is passed as a callback parameter, and can not be statically obtained. Listing 3 shows an example of such API. For shouldOverrideUrlLoading API, the "url" is a callback parameter and can only be determined at runtime. However it can be inferred from the code control structure (i.e. the if conditions in line 2 and line 5).</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>1</head><p>CookieManager cm = new CookieManager () ; 2 cm . getCookie ( " www . google . com " ) ;</p><p>Listing 1: Type I, URL from a parameter.  <ref type="table" target="#tab_2">Table 2</ref> presents the types for the selected 9 manipulation APIs. We use different methods to extract manipulated Web resource URL according to the API type. For Type I API, the URL is the first parameter of the API. For Type III API, the URL can be inferred from the branch statements in its code. We do a forward data flow analysis from the "url" parameter, and collect all branch statements having string operations with the "url" parameter as the inferred positions.</p><p>It is more complicated to handle Type II APIs, where the manipulated URLs are actually loaded by the base WebView instances. There are two cases to determine the URL of the WebView instance: statically loaded URLs and dynamically loaded URLs. Statically loaded URLs are loaded with LOAD URL APIs, including loadUrl, loadDataWithBaseURL, postUrl, etc. In this case, we use the ICFG to find invocations of LOAD URL APIs, and the manipulated URL can be extracted from their parameters. Dynamically loaded URLs are loaded when the users navigates from one page to another. Similar to Type III APIs, the dynamic URLs are inferred from the control flow structure of the code.</p><p>String Analysis. After we know the position of the manipulated URL, we then use string analysis to reveal the string value. Specifically, we first do backward slicing along the ICFG to collect all instructions used to construct the URL. Then, we forward traverse the program slice to reconstruct the string-related operations. We try to calculate the string value by modeling common string operations such as initialization and concatenation of StringBuilder and StringBuffer. Besides, Androidspecific APIs such as reading strings from asset files and SharedPreferences are also modeled. Since we focus on integrated Web services, URLs with protocols other than HTTP/HTTPS are not considered and filtered out. Furthermore, there may be more than one manipulated Web URL at one manipulation point, such as the example in Listing 3. These URLs are all extracted and saved into the database for further analysis.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.3.2">Extract Manipulating Context</head><p>To identify the app principal, we need to collect some context information at each manipulation point. Specifically, the following information is collected.</p><p>• META, the meta-information of the app, including application package name and developer information;</p><p>• DP, the declaring package name of the manipulating code;</p><p>• SIG, the signature for the manipulating code;</p><p>The META and DP information can be directly extracted from the APK file and app market. The SIG is a signature used to identify the provenance of the manipulating code, i.e. the host app or a third-party library. To calculate the code signature, we first need to determine the boundary of the manipulating code and then extract its signature based on code feature inside the code boundary.</p><p>Manipulating Code Union. We introduce the code union concept to represent the code originates from the same principal. Considering the problem context of our paper, we define the code union by grouping code that manipulates the same WebView instance. Specifically, it contains the class of the manipulation point, classes that are connected with the same WebView instance, and classes of the Java objects that have been injected into WebView through addJavaScriptInterface API.</p><p>Manipulating Code Signature. We use a variant of Merkle trees <ref type="bibr" target="#b33">[35]</ref> with depth of 2 to represent the manipulating code signature (as shown in <ref type="figure" target="#fig_2">Figure 3</ref>). In these hash trees, every non-leaf node is labeled with the hash of its child nodes. The first layer of the tree is the signatures for the classes in the same code union. The second layer of the tree is the signatures for the methods in the parent class. The method signature is calculated by hashing all the Android APIs it invoked. We only consider the Android APIs listed by PScout <ref type="bibr" target="#b10">[12]</ref>.</p><p>When comparing two manipulating code signatures, we first need to judge whether they use the same manipulation API. If they invoke different manipulated APIs, the manipulating code signatures are thought to be different. Otherwise, we compare the Merkle trees for the two manipulating code signatures from top to bottom.</p><p>In summary, the static analyzer module locates all manipulation points in each APK, extracts the manipulated URL and manipulating context for each point, and saves this information into a database.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.4">Principal Identifier</head><p>Based the extracted manipulation information at each manipulation point, we further need to identify the Web principal and app principal.</p><p>Identify Web Principal. A naive idea is to use the Web origin (a triple of protocol, host and port) as the Web principal. Since the protocol and port element defined in the Web origin are hard to compare with app principal, our solution uses the domain name at each manipulation point as the Web principal.</p><p>Before extracting domains from Web resource URLs, we need to normalize the extracted URLs as there may be some abnormal URLs, such as short URL, IP address. The domain names of short URLs and IP addresses can be retrieved by dynamically loading them or resolved with reverse DNS lookup. For domains which are common cloud sub-domains, we extract their domain names as the sub-domains or paths to the host server. For example, for the URL "s3.amazonaws.com/X" or "Y.s3.amazonaws.com", we extract "X" and "Y" as their domains (Web principals).</p><p>Identify App Principal. Unlike Web principals, there is no existing way to construct app principal. Our solution is to leverage code features to indicate the security principal of the manipulating code. Generally, manipulating code may originate from two sources: the host app or a third-party library. If the code is from the host app, we use META of the app as the app principal indicator. Otherwise we use the declaring package name DP instead. Our insight is that Android developers usually include reverse domain name in the package name of their code.</p><p>To distinguish library code and host app code, we use the signature for the code union (SIG). Our observation is that library code tends to appear in many apps. If the SIG appears in only one app, or apps from the same developer, the code union belongs to the host app. Otherwise, if it appears in more than one app from different developers, it originates from a library.</p><p>Obfuscated Package Name Recovery. The package name of the library may be obfuscated in an app, thus directly using the package name is not accurate. Considering the fact that not all apps obfuscate their code, we can use non-obfuscated package name of the same library (which has similar SIG). In this way, most of the obfuscated package names are recovered for libraries.</p><p>Currently, for each manipulation point, we can extract its Web principal and app principal. The next step is to determine whether AP mp and W P mp represent the same security principal.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.5">XPMClassfier</head><p>According to our definition in Equation (1), crossprincipal manipulation of Web resources is recognized by judging whether a Web principal and an app principal are the same. However, it is hard to automatically make such decisions. For example, if the app principal is "fb" and the Web principal is "facebook", it is obvious to recognize them as same principal by manual inspection while there is no straightforward way to automatically give the same result.</p><p>As it is difficult to strictly tell whether two principals are the same, we perform some relaxation on this problem. Specifically, we transform the strict definition of cross-principal manipulation in Equation (1) into the following definition where Sim is the similarity of the two principals. If the similarity proceeds a predefined threshold θ , we think the two principals are the same. Otherwise, the two principals are thought to be different.</p><formula xml:id="formula_1">IS XPM(mp) := Sim(AP mp ,W P mp ) ≥ θ<label>(2)</label></formula><p>The key to recognize cross-principal manipulation turns to calculate the similarity of two principals. Our idea is to take advantage of search engine knowledge. The insight is that more similar are the two principals, more similar results should be searched for them. Thus, we search the two principals in the search engine, and calculate the similarity between the search results. Specifically, the classification of XPM is performed in the following steps. Note that in rare cases where search engine returns no results, we use literal edit distance between Web principal and app principal to calculate the similarity.</p><p>1. Firstly, we remove noise words in &lt; AP mp ,W P mp &gt; such as suffixes <ref type="bibr" target="#b4">[5]</ref> and stop words <ref type="bibr" target="#b5">[6]</ref> (e.g. remove "com" and "get" from "get.appdog.com"), since they make little contribution to XPM classification. After that, we get AP mp and W P mp . 2. Secondly, we use AP mp and W P mp as search keywords to query Google search engine and get search results as R ap and R wp respectively. All the results are translated into English using Google Translate.</p><p>3. Thirdly, we segment the words in the R ap and R wp using the bag-of-words model. Specifically, we only keep the multiplicity and ignore grammar and word order. We normalize each word (term) and transform their term frequencies into two vectors: A and W .</p><p>4. Fourthly, we calculate the similarity of the two principals as cosine similarity between the two vectors using the following equation.</p><formula xml:id="formula_2">Sim(AP mp ,W P mp ) = n ∑ i=1 A i W i n ∑ i=1 A 2 i n ∑ i=1 W 2 i<label>(3)</label></formula><p>5. Finally, we compare the calculated similarity with a threshold θ . If the similarity does not exceed the threshold, we regard the Web principal and app principal are from different parties and classify the manipulation point (mp) as XPM.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4">Empirical Study</head><p>Our empirical study is performed on a large dataset of apps collected from Google Play during July 2017. These apps were selected with at least 5,000 installations across 48 categories, and 84,712 (out of 108,477) apps were successfully downloaded. To the best of our knowledge, this study is the first to understand the Web resource manipulation behaviors with large-scale realworld apps. Analysis Statistics. We use XPMChecker to analyze these apps on a CentOS 7.4 64-bit server with 64 CPU cores (2GHz) and 188 GB memory. We start 9 processes to parallel the analysis and set timeout of 20 minutes for each app. In all, the analysis takes 233 hours to process the whole dataset, that is about 10 seconds per app. The static analyzer module of XPMChecker successfully processes 80,694 (95.3%) apps, and the rest apps either run out of time or fail to be analyzed by Soot or FlowDroid. For the successfully analyzed apps, XPMChecker finds 13,599 apps with 29,448 manipulation points, and 3,858 of the apps contain 14,476 XPM points. The detailed data is showed in <ref type="table" target="#tab_4">Table 3</ref>.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.1">Evaluation of XPMChecker</head><p>Evaluation of Static Analyzer. The static analyzer module is used to find all manipulation points and extract manipulation information (i.e. manipulated Web URL and manipulating context) for further principal identification. To evaluate the effectiveness of static analyzer, we randomly select 50 successfully analyzed apps and manually label all the manipulation points for these apps including manipulation information. In total, we manually find 36 manipulated points, while XPMChecker correctly labels 33 of them. The left 3 cases are failed to extract the manipulating Web URLs due to complex string encoding and deep inter-procedure call. As a result, the static analyzer module successfully recall 91.7% of all manipulation points with correctly labeled manipulating information. Further improvement can be achieved by enhancing the string analysis which is a orthogonal research direction <ref type="bibr" target="#b16">[18,</ref><ref type="bibr" target="#b27">29]</ref>. Evaluation of Principal Identifier and XPMClassifier. For each Web resource manipulation point, Principal Identifier extracts the Web principal and app principal, then XPMClassifier judges whether this is XPM by leveraging search engine knowledge. To evaluate the performance of the two modules, we randomly select 1,200 manipulation points identified by the static analyzer, and manually label them as XPM or not. The performance of XPMClassfier depends on the threshold θ . To set θ , we select 1,000 labeled manipulation points from our ground truth and draw the receiver operating characteristic (ROC) curve by trying different thresholds (as shown in <ref type="figure" target="#fig_4">Figure 4</ref>). Our aim is to gain the balance between false positive rate (FPR) and false negative rate (FNR), so we choose the threshold at the equal error rate (EER) point, that is 0.3134.</p><p>We use the left 200 manipulation points to test the performance of Principal Identifier and XPMClassifier. As showed in <ref type="table" target="#tab_5">Table 4</ref>, our tool finds 94 XPM points, while 93 of them are true positive. Therefore, the precision and recall of Principal Identifier and XPMClassifier are 98.9% and 97.9% respectively.</p><p>We further manually inspect the false positives and false negatives. The cause for the false positives is the lack of search result for some Web principals from small websites. Since these Web sites are not popular, these false positives do not affect the overall result and finding. The false negatives are caused by unofficial apps whose app principals are highly related to those of the official ones. For these cases we need to use more complex   techniques to extract app principal. Considering the recall rate is relatively high, we argue current design is quite acceptable to perform a large-scale study.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.2">Prevalence of XPM Behaviors</head><p>This section measures the prevalence of XPM behavior in real-world apps. Our results consist of the following findings. Finding 1: 49.2% of manipulation points are crossprincipal. As shown in <ref type="table" target="#tab_4">Table 3</ref>, XPMChecker finds 29,448 manipulation points, while 14,476 of them is crossing principal, which means 49.2% of manipulation points are cross-principal.</p><p>Finding 2: 16.9% of apps manipulate Web resources, and 4.8% of apps have XPM behaviors. As shown in <ref type="table" target="#tab_4">Table 3</ref>, in all the successfully analyzed 80,964 apps, XPMChecker finds 13,599 apps that contain at least one manipulation points, that is 16.9% of all apps. Further more, XPMChecker finds 3,858 apps have XPM behaviors, which is 4.8% of all apps.</p><p>Finding 3: 63.6% of cross-principal manipulation points originate from libraries. As shown in <ref type="table" target="#tab_6">Table 5</ref>, our results show that 63.6% of cross-principal manipulation points are from 88 libraries, covering 2,545 apps. Meanwhile, 36.4% of the cross-principal manipulation points belong to 1,414 apps. Note some apps may have  Finding 4: More than 70% of XPM points manipulate top popular Web services. We collect the manipulated Web host for all the XPM points and find that more than 70% of them belong to top Web services, such as Google, Facebook and Twitter. We list the top 10 manipulated Web hosts in <ref type="table" target="#tab_7">Table 6</ref>.</p><p>Finding 5: Web contents and Web addresses are the most commonly manipulated and cross-principal manipulated Web resources. We count the manipulation APIs used for all the discovered manipulation points and present the result in <ref type="figure" target="#fig_5">Figure 5</ref>. We can see that loadUrlJs and evaluateJavascript are the most frequently used, which support JavaScript injection into Web pages. Besides, APIs that can manipulate Web addresses, such as shouldOverrideUrlLoading, onPageStarted are also widely used, rendering that Web addresses are of high interest for manipulating. We find getCookie API is quite exceptional because it is widely used in manipulation points but few are cross-principal. </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.3">Breakdown of XPM Behaviors</head><p>To further understand what XPM behaviors do in realworld apps, we select some apps to study. In all, we manually study all the 88 libraries in <ref type="table" target="#tab_6">Table 5</ref> which cover 63.6% of all XPM behaviors, and randomly select 100 apps from the 1,414 apps. We classify these XPM behaviors and present the results in <ref type="table" target="#tab_8">Table 7</ref>. We find that the most popular XPM behaviors we found are customizing Web services and invoking local apps. Furthermore, we find several apps exhibiting obvious malicious behaviors, and it is the first time that we can confirm the threat of Web resource manipulation in real-world apps. In the following, we further present our findings in dissecting these XPM behaviors.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.3.1">Necessary XPM Behaviors</head><p>Finding 6: Most of XPM behaviors are necessary to improve the usability for mobile users. Our manual analysis finds that about 90% of the XPM behaviors provide new functionalities. Here we give some examples. Since Android WebView does not support navigation control <ref type="bibr" target="#b1">[2]</ref>, we find many XPM behaviors inject JavaScript code to add this feature. We also find a library called "Android-MuPDF" which injects JavaScript code into the Google cloud print page to help users reduce the steps in using cloud print. Another common use case of XPM behavior is to invoke local apps. For example, the "org.nexage.sourcekit.mraid" library uses shouldOverrideUrlLoading API to monitor the loaded URLs. If the URLs are ads about apps, it will invoke the local "Google Play" app to display the advertised apps.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.3.2">Unsafe XPM Behaviors</head><p>Finding 7: Some XPM behaviors implement OAuth implicit grant flow in an unsafe way. We find some XPM behaviors in 2 libraries and 10 apps implement OAuth implicit grant flow, but in an unsafe way. <ref type="figure" target="#fig_6">Fig- ure 6(a)</ref> shows the standard and secure OAuth 2.0 implicit grant flow, where an external user-agent is used and third-party app can only access data in step 1 and step 7. However, we find XPM behaviors are used to implement OAuth implicit flow as depicted in <ref type="figure" target="#fig_6">Figure 6(b)</ref>. Instead of using an external user-agent, the third-party app uses an internal user-agent, i.e. a WebView to do the OAuth implicit grant. Then the third-party app uses Web resource manipulation APIs to intercept the access token from the WebView in step 5 in <ref type="figure" target="#fig_6">Figure 6(b)</ref>. For example, we find a library called "com.magzter" that uses onPageFinished API to intercept access token when doing OAuth on Twitter.</p><p>According to previous research on OAuth security <ref type="bibr" target="#b39">[41,</ref><ref type="bibr" target="#b14">16,</ref><ref type="bibr" target="#b41">43]</ref> and RFC OAuth 2.0 specification <ref type="bibr" target="#b3">[4]</ref>, it is unsafe to use internal user-agent. Specifically, the OAuth 2.0 specification <ref type="bibr" target="#b3">[4]</ref> says "native apps MUST NOT use embedded user-agents". The security concern is that using internal user-agent means that the whole useragent can be controlled by the host app, thus all data in OAuth steps can be manipulated by the host app. As shown in <ref type="figure" target="#fig_6">Figure 6</ref>(b), data in step 1 to step 5 can all be manipulated by the host app, including client ID and redirect URI, user credentials, client name and icon, authorization scope and access token. All these data are highly sensitive and the leakage or modification on these data can cause severe security problems. Unfortunately, although well-studied and documented, our findings show that insecure OAuth implementations with WebViews are still very common.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.3.3">Malicious XPM Behaviors</head><p>Finding 8: We confirm the Web resource manipulation behaviors with clearly malicious intents for the first time. As shown in <ref type="table" target="#tab_8">Table 7</ref>, our study leads to the discovery of some apps with malicious XPM behaviors. To find more malicious XPM behaviors, we analyze more apps in the 1,414 apps that have XPM behaviors. We write scripts to prioritize XPM behaviors that manipulates either top Web services such as Facebook, Google, or URLs contain very sensitive words, such as "oauth", "token", "password". Then we select 200 apps for manual study, and finally we confirm 22 malicious XPM behaviors in 21 distinct apps (listed in Appendix A). Based on their malicious aims, we classify these apps into three categories: impersonating relying party in OAuth (A1, 2 apps), stealing user credentials (A2, 6 apps) and stealing cookies (A3, 14 apps). Note that one app named InstaView exhibits both A1 and A2 behaviors. We have reported these apps to Google Play, and most of these apps have already been removed.</p><p>A1: Impersonating Relying Party in OAuth. We find , where the third-party app can only control data in step 1 and step 7. (b) shows common insecure implementation using internal useragents such as WebViews, where the third-party app is able to manipulate all data from step 1 to step 5.</p><p>apps impersonate another relying party in OAuth by providing the client ID of the victim in step 1 (see <ref type="figure" target="#fig_6">Figure 6</ref>(b)) and intercepting access token of the victim in step 5. For example, Instaview is a visitor tracking app that tells users who has viewed their Instagram account. It has 1,000,000-5,000,000 installations in Google Play. To provide users with the visiting information, it asks users to grant several permissions by OAuth in a WebView. However, it uses the client ID of another app named Tinder. After user authorization, it intercepts the access token for Tinder using shouldOverrideUrlLoading API. After that it continues to impersonate Tinder to access user data from the authorization server Instagram. By using the client ID and access token of another app, Instaview bypasses registration auditing and resource usage monitoring from Instagram. One may think that users would refuse to authorize Instaview when they see the permissions are granted to Tinder. Actually, we find this app receives more than 27,000 five stars in Google Play. Furthermore, since Instaview controls the WebView, it can modify the name and icon in step 3 in <ref type="figure" target="#fig_6">Figure 6</ref>(b) to cheat users.</p><p>A2: Stealing User Credentials. Apps in this category inject JavaScript code to sensitive Web pages, such as login page and OAuth authorization page to steal user credentials. For example, Adkingkong is an app for users to buy advertisements. This app has 500,000 to 1,000,000 installations in Google Play. This app asks users to login with their Google accounts in a WebView. However, when users input their emails and passwords, it uses loadUrlJs API to inject JavaScript code into the login page and steals user credentials. The Instaview app described above also steals user credentials in step 2 of <ref type="figure" target="#fig_6">Figure 6</ref>(b) using similar methods.</p><p>A3: Stealing and Abusing Cookies. We find several apps using XPM to steal cookies and abuse these cookies. For example, Chatous is an app for users to randomly chat with real people. Its installation count is about 10,000,000 to 50,000,000. It incorporates Facebook OAuth SDK for users to sign in with their Facebook accounts. When Facebook official app is not installed on user devices, Facebook SDK uses a WebView to do the OAuth. After user login, Facebook cookies will be saved into the local storage of WebView. We find that Chatous gets Facebook cookies using CookieManager.getCookie API and directly invokes Facebook APIs using these cookies to get the user friend list and send invitation messages to all the friends of the user. Actually, without Facebook cookies these APIs are invisible to third-party apps such as Chatous. We also find other apps from the same developer of Chatous exhibit similar behaviors, including Melon, Kiwi, and Plaza. Both Melon and Kiwi have 10,000,000 to 50,000,000 installations, and Plaza has 1,000,000 to 5,000,000 installations.</p><p>Finding 9: Malicious XPM behaviors exist on both Android and iOS. For the 21 apps with malicious XPM behaviors, we try to look for their counterparts on iOS platform and successfully find 8 apps have iOS versions. Then we use network traffic analysis to check if they have the same XPM behaviors as their Android counterparts. Finally we confirm the Chatous iOS app and other 3 apps from the same developers still have the same malicious XPM behaviors (i.e. stealing and abusing cookies).</p><p>Finding 10: Most of malicious XPM behaviors target OAuth. In our results, 18 out of 21 apps with malicious XPM behaviors attack OAuth, indicating that OAuth is the mostly targeted Web service.</p><p>Finding 11: Malicious XPM behaviors have affected a large number of users. For the 21 apps with malicious XPM behaviors, we collect their installation count in Google Play. We find that these 21 apps have total installations ranging from 29,885,000 to 131,220,000, which means a lot of users are affected.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5">Implications on Mitigation</head><p>Our empirical study shows that the Web resource manipulation capability of WebView brings huge risks to service providers. This section studies the awareness of such risks to service providers and reviews the defensive mechanisms in securing Web service integration.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5.1">Risk Awareness to Service Providers</head><p>We study five popular Web service providers (Facebook, Twitter, Google, Weibo and QQ) on whether they prohibit users from accessing login and OAuth pages in WebView. The result is shown in <ref type="table" target="#tab_9">Table 8</ref>. We find that these providers all support user login and OAuth in WebViews, except Google who blocks OAuth in embedded WebViews <ref type="bibr" target="#b2">[3]</ref>. However, our further study find that Google only uses "USER-AGENT" header to identify WebViews, which can be easily manipulated by host apps. For example, in Android, apps can use setUserAgentString API to change the "USER-AGENT" header to any value such as "Google Chrome". We conduct such an experiment and successfully load Google OAuth page in our controlled WebView. Thus, we draw the following conclusion.</p><p>Finding 12: Most Web service providers are unaware of risks in Web resource manipulation, and can not effectively prevent users from accessing sensitive pages in WebView.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5.2">Evaluating Defensive Techniques</head><p>To secure Web service integration, several techniques have been proposed. Based on our measurement results, we rethink their solutions and conclude several findings.</p><p>Finding 13: Complete isolation of WebView is not compatible to most apps. Complete isolation is a common way to protect host program from untrusted code. LayerCake <ref type="bibr" target="#b39">[41]</ref> protects the in-app WebView by running WebView in a separate process and seamlessly sharing UI display and events between the host app process and the WebView process. Similarly, AdSplit <ref type="bibr" target="#b42">[44]</ref> and AdDroid <ref type="bibr" target="#b35">[37]</ref> use process-level isolation to run WebViewbased advertisements in separate processes. Although complete isolation is achieved between the host app process and the WebView process, it can not further support WebView manipulation which requires accessing WebView resources directly in the host process. In our study, we find that most of XPM behaviors are necessary to improve the usability for mobile users (see Findings 6). Thus, though complete isolation improves security, it is hard to apply to existing apps.</p><p>Finding 14: Fine-grained access control is a must for regulating Web resource manipulation APIs. Access control is the fundamental way to regulate API usage. To regulate Web resource manipulation APIs, WIREFRAME <ref type="bibr" target="#b18">[20]</ref> uses binary rewriting to replace default WebView instances in apps with isolated and mediated WIREFRAME instances. It further provides origin-based access control policy, in which each app is treated as a standalone origin and policies can be expressed as whether an app from origin X can access the Web resources of origin Y. In theory, WIREFRAME is quite useful in preventing the abuse of Web resource manipualation APIs found in our case studies. However, we find the access control mechanism in WIREFRAME is not fine-grained enough because they make the whole app as a single origin, while our Finding 3 shows that more than 60% of XPM behaviors are from libraries. Thus, without fine-grained access control, systems like WIREFRAME are hard to effectively protect Web resources from being abused.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="6">Discussion</head><p>The cross-principal manipulation problem proposed in this paper is similar to the one faced by Web browser extensions <ref type="bibr" target="#b25">[27,</ref><ref type="bibr" target="#b23">25]</ref>, since both mobile apps and browser extensions can manipulate Web resources. The common challenge is how to identify suspicious ones. The most significant difference we observe is that mobile apps may manipulate content from their own servers or others, while most browser extensions are designed to operate on web content of others. Thus, different to vetting suspicious browser extensions, a new challenge met by our work is that we need a fine-grained analysis to recognize whether the host app manipulates his own resources or resources of other parties. Our work makes non-trivial efforts by leveraging static analysis, code similarity and search engines.</p><p>Currently, our work has a few limitations. Since our static analyzer is based on several existing static analysis tools <ref type="bibr" target="#b26">[28,</ref><ref type="bibr" target="#b9">11,</ref><ref type="bibr" target="#b28">30]</ref>, XPMChecker inherits limitations of these tools. Besides, XPMChecker can not prevent determined attackers from evading our analysis. For example, they can hide the invocations of Web resource manipulation APIs using Java reflection, or obfuscate the identifiers for recognizing Web principals and app principals. To handle this case, XPMChecker can adopt more sophisticated techniques <ref type="bibr" target="#b29">[31,</ref><ref type="bibr" target="#b12">14,</ref><ref type="bibr" target="#b11">13,</ref><ref type="bibr" target="#b37">39]</ref> which is an orthogonal research direction. In this paper, XPMChecker is designed to perform an empirical study rather than to be a detection tool. Our evaluation and study show that it is effective to draw several insightful findings.</p><p>Although our empirical study is performed on Android apps, the ideas proposed in this paper also work on iOS platform. Finally, in our study, manual effects are involved to classify XPM behaviors. In the future work, we plan to automatically label the types of XPM behaviors with heuristic rules and learning techniques.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="7">Related Work</head><p>The interplay between mobile app, embedded browser, and embedded web content is complex and fraught with security concerns. Prior work have discussed these problems in several aspects.</p><p>Web-to-App Security. A large number of these works focus on how Web code can attack native apps. Several works point out that malicious JavaScript code from unauthorized Web origin can get sensitive data from the host apps through several ways, including abusing the JavaScript bridge (exported Java functions using addJavascriptInterface API) <ref type="bibr" target="#b30">[32,</ref><ref type="bibr" target="#b15">17,</ref><ref type="bibr" target="#b34">36,</ref><ref type="bibr" target="#b21">23]</ref>, accessing file system <ref type="bibr" target="#b15">[17,</ref><ref type="bibr" target="#b21">23,</ref><ref type="bibr" target="#b43">45]</ref>, abusing HTML5 geolocation API <ref type="bibr" target="#b21">[23]</ref> or postMessage API <ref type="bibr" target="#b22">[24]</ref>. To detect such malicious Web code, BridgeScope <ref type="bibr" target="#b46">[48]</ref> is proposed to precisely and scalably vet JavaScript Bridge vulnerabilities in hybrid apps. <ref type="bibr">Rastogi et al. [40]</ref> try to detect and find the provenance of attacks from ad libraries to host apps. Jin et al. <ref type="bibr" target="#b24">[26]</ref> study the channels for malicious JavaScript to be loaded by HTML5-based mobile apps. Further more, some defensive mechanisms are also proposed. NoFRAK <ref type="bibr" target="#b20">[22]</ref> enforces access control rules for the Web code in Cordova framework, with the help of unforgeable capability tokens from the Web server. Draco <ref type="bibr" target="#b44">[46]</ref> provides a uniform and fine-grained access control framework to regulate Web code.</p><p>App-to-Web Security. An opposite research direction is to study how host apps can attack Web resources. <ref type="bibr">Luo et al. [32]</ref> show that malicious apps can attack Web pages by injecting JavaScript code or sniffing and hijacking Web navigation events. In <ref type="bibr" target="#b31">[33]</ref>, they also demonstrate that malicious apps can hijack touch events of the web pages. Shehab et al. <ref type="bibr" target="#b41">[43]</ref> and Chen et al. <ref type="bibr" target="#b14">[16]</ref> focus on the security issues of a certain kind of Web service, i.e. OAuth in mobile apps. When using WebView as the user-agent in OAuth, Shehab et al. <ref type="bibr" target="#b41">[43]</ref> show that user credentials and authorization interface may be attacked, while Chen et al. <ref type="bibr" target="#b14">[16]</ref> point out that access token sent in redirection URI may be leaked by the host app. However, none of existing work seeks to find such attacks in real-world apps. This paper firstly phrases this threat as cross-principal Web resource manipulation, then overcomes several nontrivial challenges to design a detection tool, and finally confirms this kind of attack in not only Android apps but also iOS apps.</p><p>Furthermore, XPMChecker leverages techniques from several related fields, including static analysis, library detection, and text similarity. The static analyzer module is based on state-of-the-art static analysis tools, including Soot <ref type="bibr" target="#b26">[28]</ref>, Flowdroid <ref type="bibr" target="#b9">[11]</ref> and IccTA <ref type="bibr" target="#b28">[30]</ref>. Specifically, we use the intermediate representations provided by Soot <ref type="bibr" target="#b26">[28]</ref>, build an ICFG for each APK based on Flowdroid <ref type="bibr" target="#b9">[11]</ref>, and extract inter-component information provided by IccTA <ref type="bibr" target="#b28">[30]</ref>. Our method to distinguish library code and app code is inspired by some library detection work <ref type="bibr" target="#b17">[19,</ref><ref type="bibr" target="#b45">47,</ref><ref type="bibr" target="#b32">34,</ref><ref type="bibr" target="#b47">49]</ref>. Furthermore, search engine is utilized by the XPMClassifier module to recognize XPM behaviors. Besides, search engine is also widely used in the context of short-text semantic similarity, such as in <ref type="bibr" target="#b36">[38,</ref><ref type="bibr" target="#b19">21,</ref><ref type="bibr" target="#b40">42,</ref><ref type="bibr" target="#b13">15]</ref>.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="8">Conclusion</head><p>This paper conducts the first empirical study on Web resource manipulation with large-scale apps. We define the threats in Web resource manipulation as XPM problems. To support automatically recognizing XPM behaviors, we design XPMChecker which overcomes several nontrivial challenges. With a study of 80,694 top Google Play apps, we find that 49.2% of manipulation points are XPM, 4.8% of apps contain XPM behaviors, and more than 70% XPM behaviors manipulate top popular Web sites. More importantly, we confirm the threat of XPM behaviors with obvious malicious intents in both Android and iOS apps. Our further studies actuate us to rethink existing defensive mechanisms and propose new suggestions for future defense design. Besides, to facilitate further research in XPM behaviors, we release the dataset at https://xhzhang.github.io/XPMChe cker/.</p></div><figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_0"><head>Figure 1 :</head><label>1</label><figDesc>Figure 1: A motivating case where three classes in two apps use CookieManager.getCookie API to get cookies from www.facebook.com.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_1"><head>Figure 2 :</head><label>2</label><figDesc>Figure 2: Basic workflow of XPMChecker. XPMChecker is composed of three components to recognize XPM behaviors in Android apps. First, Static Analyzer parses input APK files and collects Web resource information into a database. Second, Principal Identifier extracts both Web principal and app principal for each manipulation point. At last, XPM Classifier recognizes XPM behavior by leveraging search engine knowledge.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_2"><head>Figure 3 :</head><label>3</label><figDesc>Figure 3: Use Merkle tree to represent manipulating code signature.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_4"><head>Figure 4 :</head><label>4</label><figDesc>Figure 4: ROC curve for varied θ in XPMClassfier with 1000 manipulation points.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_5"><head>Figure 5 :</head><label>5</label><figDesc>Figure 5: Manipulation API Usage.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_6"><head>Figure 6 :</head><label>6</label><figDesc>Figure 6: OAuth 2.0 implicit grant. (a) is the standard and secure implicit grant flow using external user-agents (such as external browsers), where the third-party app can only control data in step 1 and step 7. (b) shows common insecure implementation using internal useragents such as WebViews, where the third-party app is able to manipulate all data from step 1 to step 5.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_0" validated="true"><head>Table 1 : Representative Web resource manipulation APIs on Android and iOS.</head><label>1</label><figDesc></figDesc><table>Web Resources 
Android WebView 
iOS UIWebView 
iOS WKWebView 

Local Storage 
CookieManager.getCookie 
NSHTTPCookieStorage 
WKWebsiteDataStore 

Web Content 
loadUrlJs 1 , 
evaluateJavascript 
stringByEvaluatingJavascriptFromString 
evaluateJavascript 

Web Address 
onPageFinished, 
shouldOverrideUrlLoading 
\ 
\ 

Network Traffic 
shouldInterceptRequest 
shouldStartLoadWithRequest 
decidePolicyForNavigationAction, 
decidePolicyForNavigationResponse 

1 void loadUrl(String </table></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_1" validated="true"><head>Table 1 .</head><label>1</label><figDesc></figDesc><table>1. Local Storage Manipulation APIs. WebView may 
keep sensitive data on the local storage of the 
device, such as HTTP cookies, Web Storage 1 and 
Web SQL Database. For example, attackers can 
use CookieManager.getCookie(String url) to get the 
cookies for any domain specified by "url". 

2. Web Content Manipulation APIs. Web content 
includes HTML, JavaScript and CSS of Web sites. 
For example, attackers can use evaluateJavascript 
API to inject JavaScript code into Web pages and 
get the privileges of the injected domain. 

3. Web Address Manipulation APIs. Web address is 
the current URL for the WebView which contains 
quite sensitive information. For example, attackers 
can use shouldOverrideUrlLoading(WebView view, 
String url) to intercept the URL and extract the 
access token for OAuth implicit flow authorization. 

</table></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_2" validated="true"><head>Table 2 : The selected 9 Web resource manipulation APIs to study.</head><label>2</label><figDesc></figDesc><table>API 
Manipulated Web Resource API Type 

CookieManager.getCookie 
Local Storage 
I 
loadUrlJs, evaluateJavascript 
Web Content 
II 
onPageFinished, onPageStarted, 
onLoadResource 
Web Address 
II, III 

shouldOverrideUrlLoading 1 
Web Address 
III 
shouldOverrideUrlLoading 2 
Network Traffic 
III 
shouldInterceptRequest 
Network Traffic 
II, III </table></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_4" validated="true"><head>Table 3 : Overall result of our study.</head><label>3</label><figDesc></figDesc><table>Category 
# 

All Apps 
84,712 
Finished Apps 
80,694 
Apps with Manipulation Points 13,599 (29,448) 1 
Apps with XPM Behaviors 
3,858 (14,476) 

1 The number in the bracket represents the number of 
manipulation points. 

</table></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_5" validated="false"><head>Table 4 :</head><label>4</label><figDesc></figDesc><table>Precision and recall of Principal Identifier and 
XPMClassifier. 
# of Manually Labeled XPM 
95 
# of Detected XPM 
94 
# of True Positive 
93 
Precision 
98.9% 
Recall 
97.9% 

</table></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_6" validated="false"><head>Table 5 : XPM point distribution according to its location. XPM Location # of XPM Points (%) # of Apps</head><label>5</label><figDesc></figDesc><table>Library 
9,201 (63.6%) 
2,545 
App 
5,275 (36.4%) 
1,414 
All 
14,476 
3,858 

</table></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_7" validated="false"><head>Table 6 :</head><label>6</label><figDesc></figDesc><table>Top 10 Web hosts that are cross-principal 
manipulated. 

rank 
manipulated host 
rank manipulated host 

1 
play.google.com 
6 
player.vimeo.com 
2 
market.android.com 
7 
maps.google.com 
3 
facebook.com 
8 
google.com 
4 
youtube.com 
9 
drive.google.com 
5 
docs.google.com 
10 
twitter.com 

XPM behaviors in both its app code and library code. 
</table></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_8" validated="false"><head>Table 7 :</head><label>7</label><figDesc></figDesc><table>XPM behaviors in 88 libraries and 100 
randomly selected apps. 

Behavior 
% in libraries % in apps 

Customizing Web services 
56.8% 
67.0% 
Invoking local apps 
30.7% 
16.1% 
Obtaining OAuth tokens 
2.3% 
4.6% 
Malicious behaviors 
0 
0.9% 
Other behaviors 
5.7 % 
8.2% 
False positive 
4.5% 
3.2% 

1 Note that one app may have several XPM behaviors. 

</table></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_9" validated="false"><head>Table 8 :</head><label>8</label><figDesc></figDesc><table>Experiments on loading login/OAuth pages of 
major Web service providers in WebView. 

Service 
providers 

Allow login 
in WebView 

Allow OAuth 
in WebView 

Facebook 
Y 
Y 
Twitter 
Y 
Y 
Google 
Y 
N 
Weibo 
Y 
Y 
QQ 
Y 
Y 

</table></figure>

			<note place="foot" n="1"> Web storage includes localStorage and sessionStorage (see http s://www.w3.org/TR/webstorage/). This paper refers any data saved on the device by a WebView as &quot;Local Storage&quot;, not only the data saved by HTML5 localStorage API.</note>

			<note place="foot" n="1"> boolean shouldOverrideUrlLoading (WebView view, String url), before API level 24. 2 boolean shouldOverrideUrlLoading (WebView view, WebResourceRequest request), after API level 24.</note>
		</body>
		<back>

			<div type="acknowledgement">
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Acknowledgements</head><p>We would like to thank the anonymous reviewers for their insightful comments that helped improve the quality of the paper. This work was supported in part by the National Natural Science Foundation of China (U1636204, 61602123, 61602121, U1736208) and the National Program on Key Basic Research (NO. 2015CB358800). Yuan Zhang was supported in part by the Shanghai Sailing Program under Grant 16YF1400800 and a research gift from Ant Financial. The IU author is supported in part by the NSF 1408874, 1527141, 1618493 and ARO W911NF1610127.</p></div>
			</div>

			<div type="annex">
			</div>
			<div type="references">

				<listBibl>

<biblStruct xml:id="b0">
	<monogr>
		<title/>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Apache</forename><surname>Cordova</surname></persName>
		</author>
		<ptr target="https://cordova.apache.org/" />
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b1">
	<monogr>
		<title level="m" type="main">Building Web Apps in WebView</title>
		<ptr target="https://developer.android.com/guide/webapps/webview.html" />
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b2">
	<monogr>
				<ptr target="https://developers.googleblog.com/2016/08/modernizing-oauth-interactions-in-native-apps.html" />
		<title level="m">Modernizing OAuth Interactions in Native Apps for Better Usability and Security</title>
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b3">
	<monogr>
		<title level="m" type="main">OAuth 2.0 for Native Apps</title>
		<ptr target="https://tools.ietf.org/html/rfc8252" />
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b4">
	<analytic>
		<title/>
		<ptr target="http://publicsuffix.org/" />
	</analytic>
	<monogr>
		<title level="j">Public Suffix List</title>
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b5">
	<monogr>
				<ptr target="http://ir.dcs.gla.ac.uk/resources/linguistic_utils/stop_words" />
		<title level="m">Stop Words List from Glasgow Information Retrieval Group</title>
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b6">
	<monogr>
		<title/>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Apple</forename><surname>Uiwebview</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Development Documentations</surname></persName>
		</author>
		<ptr target="https://developer.apple.com/documentation/uikit/uiwebview" />
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b7">
	<monogr>
		<title/>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Android</forename><surname>Webview</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Developers</surname></persName>
		</author>
		<ptr target="https://developer.android.com/reference/android/webkit/WebView.html" />
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b8">
	<monogr>
		<title/>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Wkwebview</surname></persName>
		</author>
		<imprint>
			<publisher>Apple Development Documentations</publisher>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b9">
	<analytic>
		<title level="a" type="main">Flowdroid: Precise context, flow, field, object-sensitive and lifecycle-aware taint analysis for android apps</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Arzt</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Rasthofer</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Fritz</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><surname>Bodden</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">E</forename><surname>Bartel</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Klein</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Le Traon</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Y</forename><surname>Octeau</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>And</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Mcdaniel</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Acm Sigplan Notices</title>
		<imprint>
			<biblScope unit="volume">49</biblScope>
			<biblScope unit="page" from="259" to="269" />
			<date type="published" when="2014" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b10">
	<analytic>
		<title level="a" type="main">Pscout: analyzing the android permission specification</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><forename type="middle">U</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">K</forename><forename type="middle">W Y</forename><surname>Zhou</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Y</forename><forename type="middle">F</forename><surname>Huang</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Z</forename><surname>And</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Lie</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 2012 ACM conference on Computer and communications security</title>
		<meeting>the 2012 ACM conference on Computer and communications security</meeting>
		<imprint>
			<publisher>ACM</publisher>
			<date type="published" when="2012" />
			<biblScope unit="page" from="217" to="228" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b11">
	<analytic>
		<title level="a" type="main">Statistical deobfuscation of android applications</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Bichsel</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">B</forename><surname>Raychev</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">V</forename><surname>Tsankov</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><surname>And</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Vechev</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 2016 ACM SIGSAC Conference on Computer and Communications Security</title>
		<meeting>the 2016 ACM SIGSAC Conference on Computer and Communications Security<address><addrLine>New York, NY, USA</addrLine></address></meeting>
		<imprint>
			<date type="published" when="2016" />
			<biblScope unit="page" from="343" to="355" />
		</imprint>
	</monogr>
	<note>CCS &apos;16, ACM</note>
</biblStruct>

<biblStruct xml:id="b12">
	<analytic>
		<title level="a" type="main">Taming reflection: Aiding static analysis in the presence of reflection and custom class loaders</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Bodden</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">E</forename><surname>Sewe</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Sinschek</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Oueslati</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">H</forename><surname>And</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Mezini</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">2011 33rd International Conference on Software Engineering (ICSE)</title>
		<imprint>
			<date type="published" when="2011-05" />
			<biblScope unit="page" from="241" to="250" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b13">
	<monogr>
		<title level="m" type="main">Measuring semantic similarity between words using web search engines</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Bollegala</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Matsuo</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Y</forename><surname>And Ishizuka</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename></persName>
		</author>
		<imprint>
			<date type="published" when="2007" />
			<biblScope unit="volume">7</biblScope>
			<biblScope unit="page" from="757" to="766" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b14">
	<analytic>
		<title level="a" type="main">Oauth demystified for mobile application developers</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Chen</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">E</forename><forename type="middle">Y</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Pei</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Y</forename><surname>Chen</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Tian</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Y</forename><surname>Kotcher</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>And</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Tague</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 2014 ACM SIGSAC Conference on Computer and Communications Security</title>
		<meeting>the 2014 ACM SIGSAC Conference on Computer and Communications Security</meeting>
		<imprint>
			<publisher>ACM</publisher>
			<date type="published" when="2014" />
			<biblScope unit="page" from="892" to="903" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b15">
	<analytic>
		<title level="a" type="main">Bifocals: Analyzing webview vulnerabilities in android applications</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Chin</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">E</forename><surname>And</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Wagner</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">International Workshop on Information Security Applications</title>
		<imprint>
			<publisher>Springer</publisher>
			<date type="published" when="2013" />
			<biblScope unit="page" from="138" to="159" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b16">
	<analytic>
		<title level="a" type="main">Precise analysis of string expressions</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Christensen</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><forename type="middle">S</forename><surname>Møller</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>And</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Schwartzbach</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">International Static Analysis Symposium</title>
		<imprint>
			<publisher>Springer</publisher>
			<date type="published" when="2003" />
			<biblScope unit="page" from="1" to="18" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b17">
	<analytic>
		<title level="a" type="main">Scalable semanticsbased detection of similar android applications</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Crussell</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Gibler</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><surname>And</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Chen</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">H</forename></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. of ESORICS</title>
		<meeting>of ESORICS</meeting>
		<imprint>
			<publisher>Citeseer</publisher>
			<date type="published" when="2013" />
			<biblScope unit="volume">13</biblScope>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b18">
	<analytic>
		<title level="a" type="main">Secure integration of web content and applications on commodity mobile operating systems</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Davidson</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Chen</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Y</forename><surname>George</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">F</forename><surname>Lu</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">L</forename><surname>And</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Jha</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 2017 ACM on Asia Conference on Computer and Communications Security</title>
		<meeting>the 2017 ACM on Asia Conference on Computer and Communications Security</meeting>
		<imprint>
			<publisher>ACM</publisher>
			<date type="published" when="2017" />
			<biblScope unit="page" from="652" to="665" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b19">
	<analytic>
		<title level="a" type="main">Automatic feedback using past queries: social searching?</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Fitzpatrick</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">L</forename><surname>And Dent</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">ACM SIGIR Forum</title>
		<imprint>
			<publisher>ACM</publisher>
			<date type="published" when="1997" />
			<biblScope unit="volume">31</biblScope>
			<biblScope unit="page" from="306" to="313" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b20">
	<analytic>
		<title level="a" type="main">Breaking and fixing origin-based access control in hybrid web/mobile application frameworks</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Georgiev</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Jana</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>And</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Shmatikov</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">V</forename></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">NDSS symposium</title>
		<imprint>
			<publisher>NIH Public Access</publisher>
			<date type="published" when="2014" />
			<biblScope unit="page">1</biblScope>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b21">
	<analytic>
		<title level="a" type="main">Web-to-application injection attacks on android: Characterization and detection</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Hassanshahi</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">B</forename><surname>Jia</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Y</forename><surname>Yap</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><forename type="middle">H</forename><surname>Saxena</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><surname>And</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Liang</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Z</forename></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">European Symposium on Research in Computer Security</title>
		<imprint>
			<publisher>Springer</publisher>
			<date type="published" when="2015" />
			<biblScope unit="page" from="577" to="598" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b22">
	<analytic>
		<title level="a" type="main">Study and mitigation of origin stripping vulnerabilities in hybrid-postmessage enabled mobile applications</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Huang</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Gu</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">G</forename><surname>Mendoza</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">E</forename><forename type="middle">T</forename><surname>Al</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Study and Mitigation of Origin Stripping Vulnerabilities in Hybrid-postMessage Enabled Mobile Applications</title>
		<imprint>
			<publisher>IEEE</publisher>
			<biblScope unit="page">0</biblScope>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b23">
	<analytic>
		<title level="a" type="main">Trends and lessons from three years fighting malicious extensions</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Jagpal</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">N</forename><surname>Dingle</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">E</forename><surname>Gravel</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J.-P</forename><surname>Mavrommatis</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><surname>Provos</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">N</forename><surname>Rajab</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><forename type="middle">A</forename><surname>And</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Thomas</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">K</forename></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">24th USENIX Security Symposium (USENIX Security 15</title>
		<meeting><address><addrLine>Washington, D.C.</addrLine></address></meeting>
		<imprint>
			<date type="published" when="2015" />
			<biblScope unit="page" from="579" to="593" />
		</imprint>
	</monogr>
	<note>USENIX Association</note>
</biblStruct>

<biblStruct xml:id="b24">
	<analytic>
		<title level="a" type="main">Code injection attacks on html5-based mobile apps: Characterization, detection and mitigation</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Jin</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">X</forename><surname>Hu</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">X</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Ying</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">K</forename><surname>Du</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">W</forename><surname>Yin</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">H</forename><surname>And</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Peri</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">G</forename><forename type="middle">N</forename></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 2014 ACM SIGSAC Conference on Computer and Communications Security</title>
		<meeting>the 2014 ACM SIGSAC Conference on Computer and Communications Security</meeting>
		<imprint>
			<publisher>ACM</publisher>
			<date type="published" when="2014" />
			<biblScope unit="page" from="66" to="77" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b25">
	<analytic>
		<title level="a" type="main">Hulk: Eliciting malicious behavior in browser extensions</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Kapravelos</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Grier</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><surname>Chachra</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">N</forename><surname>Kruegel</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><surname>Vigna</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">G</forename><surname>And</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Paxson</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">V</forename></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">23rd USENIX Security Symposium (USENIX Security 14)</title>
		<meeting><address><addrLine>San Diego, CA</addrLine></address></meeting>
		<imprint>
			<date type="published" when="2014" />
			<biblScope unit="page" from="641" to="654" />
		</imprint>
	</monogr>
	<note>USENIX Association</note>
</biblStruct>

<biblStruct xml:id="b26">
	<analytic>
		<title level="a" type="main">The soot framework for java program analysis: a retrospective</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Lam</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><surname>Bodden</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">E</forename><surname>Lhot´aklhot´ Lhot´ak</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">O</forename><surname>And</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Hendren</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">L</forename></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Cetus Users and Compiler Infastructure Workshop</title>
		<imprint>
			<date type="published" when="2011" />
			<biblScope unit="volume">15</biblScope>
			<biblScope unit="page">35</biblScope>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b27">
	<analytic>
		<title level="a" type="main">String analysis for java and android applications</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">L</forename><forename type="middle">I</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Lyu</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Y</forename><surname>Wan</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>And</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Halfond</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">W</forename></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 2015 10th Joint Meeting on Foundations of Software Engineering</title>
		<meeting>the 2015 10th Joint Meeting on Foundations of Software Engineering</meeting>
		<imprint>
			<publisher>ACM</publisher>
			<date type="published" when="2015" />
			<biblScope unit="page" from="661" to="672" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b28">
	<analytic>
		<title level="a" type="main">Iccta: Detecting inter-component privacy leaks in android apps</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">L</forename><forename type="middle">I</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">L</forename><surname>Bartel</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Bissyandébissyand´bissyandé</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><forename type="middle">F</forename><surname>Klein</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Le Traon</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Y</forename><surname>Arzt</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Rasthofer</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Bodden</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">E</forename><surname>Octeau</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>And</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Mcdaniel</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 37th International Conference on Software Engineering</title>
		<meeting>the 37th International Conference on Software Engineering</meeting>
		<imprint>
			<publisher>IEEE Press</publisher>
			<date type="published" when="2015" />
			<biblScope unit="volume">1</biblScope>
			<biblScope unit="page" from="280" to="291" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b29">
	<analytic>
		<title level="a" type="main">Taming reflection to support whole-program analysis of android apps</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">L</forename><forename type="middle">I</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">L</forename><surname>Bissyandébissyand´bissyandé</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><forename type="middle">F</forename><surname>Octeau</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>And</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Klein</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Droidra</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 25th International Symposium on Software Testing and Analysis</title>
		<meeting>the 25th International Symposium on Software Testing and Analysis<address><addrLine>New York, NY, USA</addrLine></address></meeting>
		<imprint>
			<publisher>ACM</publisher>
			<date type="published" when="2016" />
			<biblScope unit="page" from="318" to="329" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b30">
	<analytic>
		<title level="a" type="main">Attacks on webview in the android system</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Luo</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><surname>Hao</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">H</forename><surname>Du</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">W</forename><surname>Wang</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Y</forename><surname>And</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Yin</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">H</forename></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 27th Annual Computer Security Applications Conference</title>
		<meeting>the 27th Annual Computer Security Applications Conference</meeting>
		<imprint>
			<publisher>ACM</publisher>
			<date type="published" when="2011" />
			<biblScope unit="page" from="343" to="352" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b31">
	<analytic>
		<title level="a" type="main">Touchjacking attacks on web in android, ios, and windows phone</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Luo</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Jin</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">X</forename><surname>Ananthanarayanan</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>And</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><forename type="middle">U</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">W</forename></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">International Symposium on Foundations and Practice of Security</title>
		<imprint>
			<publisher>Springer</publisher>
			<date type="published" when="2012" />
			<biblScope unit="page" from="227" to="243" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b32">
	<analytic>
		<title level="a" type="main">Libradar: fast and accurate detection of third-party libraries in android apps</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><forename type="middle">A</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Z</forename><surname>Wang</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">H</forename><surname>Guo</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Y</forename><surname>And</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Chen</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">X</forename></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 38th International Conference on Software Engineering Companion</title>
		<meeting>the 38th International Conference on Software Engineering Companion</meeting>
		<imprint>
			<publisher>ACM</publisher>
			<date type="published" when="2016" />
			<biblScope unit="page" from="653" to="656" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b33">
	<analytic>
		<title level="a" type="main">A digital signature based on a conventional encryption function</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Merkle</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><forename type="middle">C</forename></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Advances in Cryptology -CRYPTO &apos;87</title>
		<imprint>
			<publisher>Springer</publisher>
			<date type="published" when="1987" />
			<biblScope unit="page" from="369" to="378" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b34">
	<monogr>
		<title level="m" type="main">A large-scale study of mobile web app security</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Mutchler</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><surname>Doupédoup´doupé</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Mitchell</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Kruegel</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><surname>And</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Vigna</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">G</forename></persName>
		</author>
		<imprint>
			<date type="published" when="2015" />
			<publisher>Mobile Security Techologies</publisher>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b35">
	<analytic>
		<title level="a" type="main">Addroid: Privilege separation for applications and advertisers in android</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Pearce</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><surname>Felt</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><forename type="middle">P</forename><surname>Nunez</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">G</forename><surname>And</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Wagner</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. of AsiaCCS &apos;12</title>
		<meeting>of AsiaCCS &apos;12</meeting>
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b36">
	<analytic>
		<title level="a" type="main">On the reuse of past optimal queries</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Raghavan</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">V</forename><forename type="middle">V</forename><surname>And</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Sever</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">H</forename></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 18th annual international ACM SIGIR conference on Research and development in information retrieval</title>
		<meeting>the 18th annual international ACM SIGIR conference on Research and development in information retrieval</meeting>
		<imprint>
			<publisher>ACM</publisher>
			<date type="published" when="1995" />
			<biblScope unit="page" from="344" to="350" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b37">
	<analytic>
		<title level="a" type="main">Harvesting runtime values in android applications that feature anti-analysis techniques</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Rasthofer</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Arzt</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Miltenberger</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>And</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Bodden</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">E</forename></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Network and Distributed System Security Symposium (NDSS)</title>
		<imprint>
			<date type="published" when="2016-02" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b38">
	<analytic>
		<title level="a" type="main">Are these ads safe: Detecting hidden attacks through the mobile app-web interfaces</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Rastogi</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">V</forename><surname>Shao</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Chen</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Y</forename><surname>Pan</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">X</forename><surname>Zou</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>And</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Riley</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">NDSS</title>
		<imprint>
			<date type="published" when="2016" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b39">
	<analytic>
		<title level="a" type="main">Securing embedded user interfaces: Android and beyond</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Roesner</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">F</forename><surname>And</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Kohno</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">USENIX Security Symposium</title>
		<imprint>
			<date type="published" when="2013" />
			<biblScope unit="page" from="97" to="112" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b40">
	<analytic>
		<title level="a" type="main">A web-based kernel function for measuring the similarity of short text snippets</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Sahami</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>And</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><forename type="middle">D</forename><surname>Heilman</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 15th international conference on World Wide Web</title>
		<meeting>the 15th international conference on World Wide Web</meeting>
		<imprint>
			<publisher>AcM</publisher>
			<date type="published" when="2006" />
			<biblScope unit="page" from="377" to="386" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b41">
	<analytic>
		<title level="a" type="main">Towards enhancing the security of oauth implementations in smart phones</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Shehab</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>And</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Mohsen</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">F</forename></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">IEEE International Conference on</title>
		<imprint>
			<publisher>IEEE</publisher>
			<date type="published" when="2014" />
			<biblScope unit="page" from="39" to="46" />
		</imprint>
	</monogr>
	<note>Mobile Services (MS)</note>
</biblStruct>

<biblStruct xml:id="b42">
	<analytic>
		<title level="a" type="main">Separating smartphone advertising from applications</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Shekhar</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Dietz</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>And</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Wallach</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><forename type="middle">S</forename><surname>Adsplit</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. of USENIX Security&apos;12</title>
		<meeting>of USENIX Security&apos;12</meeting>
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b43">
	<analytic>
		<title level="a" type="main">What mobile ads know about mobile users</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Son</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Kim</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>And</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Shmatikov</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">V</forename></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">NDSS</title>
		<imprint>
			<date type="published" when="2016" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b44">
	<analytic>
		<title level="a" type="main">A system for uniform and fine-grained access control for web code on android</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Tuncay</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">G</forename><forename type="middle">S</forename><surname>Demetriou</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>And</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Gunter</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><forename type="middle">A</forename><surname>Draco</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 2016 ACM SIGSAC Conference on Computer and Communications Security</title>
		<meeting>the 2016 ACM SIGSAC Conference on Computer and Communications Security</meeting>
		<imprint>
			<publisher>ACM</publisher>
			<date type="published" when="2016" />
			<biblScope unit="page" from="104" to="115" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b45">
	<analytic>
		<title level="a" type="main">Wukong: A scalable and accurate two-phase approach to android app clone detection</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Wang</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">H</forename><surname>Guo</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Y</forename><surname>Ma</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Z</forename><surname>And</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Chen</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">X</forename></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 2015 International Symposium on Software Testing and Analysis</title>
		<meeting>the 2015 International Symposium on Software Testing and Analysis</meeting>
		<imprint>
			<publisher>ACM</publisher>
			<date type="published" when="2015" />
			<biblScope unit="page" from="71" to="82" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b46">
	<analytic>
		<title level="a" type="main">Precisely and scalably vetting javascript bridge in android hybrid apps</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Yang</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">G</forename><surname>Mendoza</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Zhang</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>And</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">G</forename><forename type="middle">U</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">G</forename></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">International Symposium on Research in Attacks, Intrusions, and Defenses</title>
		<imprint>
			<publisher>Springer</publisher>
			<date type="published" when="2017" />
			<biblScope unit="page" from="143" to="166" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b47">
	<analytic>
		<title level="a" type="main">Detecting third-party libraries in android applications with high precision and recall</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Zhang</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Y</forename><surname>Dai</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Zhang</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">X</forename><surname>Huang</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Yang</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Z</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Yang</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>And</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Chen</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">H</forename></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">2018 IEEE 25th International Conference on Software Analysis, Evolution and Reengineering (SANER)</title>
		<imprint>
			<publisher>IEEE</publisher>
			<date type="published" when="2018" />
			<biblScope unit="page" from="141" to="152" />
		</imprint>
	</monogr>
</biblStruct>

				</listBibl>
			</div>
		</back>
	</text>
</TEI>
