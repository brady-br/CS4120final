<?xml version="1.0" encoding="UTF-8"?>
<TEI xmlns="http://www.tei-c.org/ns/1.0" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
xsi:schemaLocation="http://www.tei-c.org/ns/1.0 /Users/atharsefid/Desktop/grobid-0.5.3/grobid-home/schemas/xsd/Grobid.xsd"
 xmlns:xlink="http://www.w3.org/1999/xlink">
	<teiHeader xml:lang="en">
		<encodingDesc>
			<appInfo>
				<application version="0.5.3" ident="GROBID" when="2020-09-29T04:27+0000">
					<ref target="https://github.com/kermitt2/grobid">GROBID - A machine learning software for extracting information from scholarly documents</ref>
				</application>
			</appInfo>
		</encodingDesc>
		<fileDesc>
			<titleStmt>
				<title level="a" type="main">Scrutinizing WPA2 Password Generating Algorithms in Wireless Routers</title>
			</titleStmt>
			<publicationStmt>
				<publisher/>
				<availability status="unknown"><licence/></availability>
			</publicationStmt>
			<sourceDesc>
				<biblStruct>
					<analytic>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Eduardo</forename><forename type="middle">Novella</forename><surname>Lorente</surname></persName>
							<affiliation key="aff0">
								<orgName type="institution">The Kerckhoffs Institute The Kerckhoffs Institute Radboud University</orgName>
								<address>
									<country key="NL">The Netherlands</country>
								</address>
							</affiliation>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Carlo</forename><surname>Meijer</surname></persName>
							<affiliation key="aff1">
								<orgName type="department">Institute for Computing and Information Sciences</orgName>
								<orgName type="institution">Radboud University</orgName>
								<address>
									<country key="NL">The Netherlands</country>
								</address>
							</affiliation>
						</author>
						<author role="corresp">
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Roel</forename><surname>Verdult</surname></persName>
							<email>rverdult@cs.ru.nl</email>
							<affiliation key="aff2">
								<orgName type="institution">Radboud University</orgName>
								<address>
									<country key="NL">The Netherlands</country>
								</address>
							</affiliation>
						</author>
						<title level="a" type="main">Scrutinizing WPA2 Password Generating Algorithms in Wireless Routers</title>
					</analytic>
					<monogr>
						<imprint>
							<date/>
						</imprint>
					</monogr>
				</biblStruct>
			</sourceDesc>
		</fileDesc>
		<profileDesc>
			<abstract>
				<p>A wireless router is a networking device that enables a user to set up a wireless connection to the Internet. A router can offer a secure channel by cryptographic means which provides authenticity and confidentiality. Nowadays , almost all routers use a secure channel by default that is based on Wi-Fi Protected Access II (WPA2). This is a security protocol which is believed not to be susceptible to practical key recovery attacks. However, the passwords should have sufficient entropy to avert brute-force attacks. In this paper, we compose a strategy on how to reverse-engineer embedded routers. Furthermore, we describe a procedure that can instantly gather a complete wireless authentication trace which enables an offline password recovery attack. Finally, we present a number of use cases where we identify extremely weak password generating algorithms in various routers which are massively deployed in The Netherlands. The algorithms are used to generate the default WPA2 password. Such a password is loaded during device ini-tialization and hardware reset. Users that did not explicitly change their wireless password are most likely vulnerable to practical attacks which can recover their password within minutes. A stolen password allows an adversary to abuse someone else&apos;s internet connection, for instance compromising the firewall, making a fraudulent transaction or performing other criminal activities. Together with the Dutch National Cyber Security Centre we have initiated a responsible disclosure procedure. However, since these routers are also used by many other companies in various countries, our findings seem to relate an international industry wide security issue.</p>
			</abstract>
		</profileDesc>
	</teiHeader>
	<text xml:lang="en">
		<body>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="1">Introduction</head><p>Most people use various devices at home to connect to the Internet. Examples of such devices include computers, phones, tablets, e-readers and smart-TV's. Nowadays, the majority of these devices use a wireless network interface and connect to a wireless base station (router) that gives access to the Internet. Such a router often serves as a firewall and is the first line of defence against malicious intruders that are active on the Internet. The user's devices operate in a internal network environment, the Local Area Network (LAN), which is separated by the router to protect against outside traffic, the Wide Area Network (WAN).</p><p>To gain access to a protected wireless LAN interface, the user needs to provide a WPA2 password (the wireless key). Such a password is often printed on a sticker which is attached on the bottom of a router. An example of such sticker is shown in <ref type="figure" target="#fig_0">Figure 1</ref>. The WPA2 password is used to perform mutual authentication between the user's device and the router. To sufficiently protect a wireless network, the router needs to be configured with a strong (randomly) chosen password that consists of a large number of characters to provide sufficient entropy <ref type="bibr" target="#b0">[1]</ref>. Without a strong password the router is susceptible to brute-force attacks. Although it is often possible to change the password in the web-interface of the router, it is a bit of a hassle, especially when the router is regularly (remotely) reset where its settings return to the factory defaults. Subsequently, since the password that is printed on the sticker often looks very complicated (a lot of seemingly random characters), the user may be under the impression that is secure to leave the default password in place. We discovered that for Dutch routers this is not the case.</p><p>This paper contains a security analysis of WPA2 password generating algorithms that are used in many Dutch wireless routers. The major Telecom Companies (Tel-cos) and Internet Service Providers (ISPs) in The Netherlands directly supply their customers with an (ASDL or Cable) Internet modem. Nowadays, almost all modems have the wireless router functionality embedded into the device. Therefore, these routers are currently massively deployed and used in The Netherlands.</p><p>We discovered that the tested routers generate wireless passwords by applying insecure proprietary obfuscation algorithms. The algorithms utilized in Dutch routers generate easy to predict network names and weak wireless passwords. The output is derived from public or predictable information such as broadcast messages and (incremental) serial numbers. Moreover, we verified with practical experiments that the WPA2 password of routers that utilize such password generating functions can be recovered within minutes.</p><p>Impact We have carried out invasive attacks to reverse engineer several wireless routers and concluded that the default wireless keys are trivial to recover, taken into account that an adversary has access to the algorithm. In the research, we have successfully recovered the proprietary algorithms from several major Dutch Telcos and ISPs. An adversary can mount practical attacks against those wireless networks to recover the password within minutes and use the compromised internet connection for fraudulent activity. Possible abuses include: stealing sensitive information, manipulating online electronic bank activity, infect client's computers with malware or simply commit digital crimes through the Internet connection of the customer such as downloading child pornography.</p><p>Although we have limited our research to analyzing the security of Dutch wireless routers, we have strong indications that many more routers are affected worldwide. Especially, since the same routers are being used by a number of other Telcos and ISPs in various countries.</p><p>Contribution The contribution of this paper is manifold. First, we show how a malicious adversary can instantly force a client to (re-)authenticate with the router. This allows the interception of a complete successful authentication trace. Such a trace can be used to offline verify a router password candidate and quickly eliminates false positives. Then, we present a general methodology how we recovered custom and proprietary hash algorithms from several Dutch routers. We expect that our method enables fellow researches and computer security experts to perform a similar risk analysis of the wireless router infrastructure in their country. Finally, we present use cases which practically demonstrate the insecurity of a number routers which are currently deployed by millions of users. Responsible Disclosure We have strictly followed the responsible disclosure guidelines of the Dutch government <ref type="bibr" target="#b1">[2]</ref>. These guidelines propose that the corresponding vendors be informed six months prior to full disclosure, giving them ample time to resolve the issues, inform their customers and hence preventing widespread abuse. We informed the Dutch government as well as all major Telcos and ISPs in the Netherlands in an early stage about the finding in our research. Consequently we are currently coordinating a national notification to the general public together with the Dutch National Cyber Security Centre (NCSC), formerly known as GovCERT, which is part of the Dutch Ministry of Security and Justice.</p><p>Overview The remainder of this paper is organized as follows: The related work is outlined in Section 2. Section 3 presents the technical background which introduces the techniques used later in this paper. Next, we present a general router security analysis methodology in Section 4. Five concrete use cases of router security analysis are presented in Section 5. Then, we evaluate several mitigating measures and possible solutions in Section 6. Finally, the conclusion of our study is given in Section 7.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2">Related work</head><p>This section contains the related work to our research. We have not limited ourselves to refer only to the academic literature. The reason for this is purely practical. Most of the related research is published in blog posts which are scattered over the Internet. This section starts with a general overview of wireless security issues. Then, it addresses related research about password generating algorithms. Finally, it gives a quick overview of related reverse-engineering projects which also analyzed the security of wireless routers.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.1">Wireless security</head><p>There are several protection mechanisms introduced in the last few decades, including the well-known and widely deployed techniques Wired Equivalent Privacy (WEP), Wi-Fi Protected Access (WPA) and Wi-Fi Protected Access II (WPA2). The first two techniques are known to be vulnerable to several attacks <ref type="bibr" target="#b2">[3,</ref><ref type="bibr" target="#b3">4,</ref><ref type="bibr" target="#b4">5,</ref><ref type="bibr" target="#b5">6,</ref><ref type="bibr" target="#b6">7,</ref><ref type="bibr" target="#b7">8,</ref><ref type="bibr" target="#b8">9,</ref><ref type="bibr" target="#b9">10,</ref><ref type="bibr" target="#b10">11,</ref><ref type="bibr" target="#b11">12,</ref><ref type="bibr" target="#b12">13,</ref><ref type="bibr" target="#b13">14,</ref><ref type="bibr" target="#b14">15]</ref>. Recently, there are also some issues identified regarding WPA2 <ref type="bibr" target="#b15">[16,</ref><ref type="bibr" target="#b16">17,</ref><ref type="bibr" target="#b17">18]</ref>. However, as far as the authors know, there is currently no practical password recovery attack proposed in the literature that can be mounted against the WPA2 protocol.</p><p>Some wireless routers support the Wi-Fi Protected Setup (WPS) authentication protocol. It enables a computer to connect with the wireless network by entering a single 8-digits PIN code instead of a long wireless password. The WPS protocol itself is vulnerable to a online practical brute-force attack. Suck attack can retrieve the PIN code from a WPS enabled router within a few hours <ref type="bibr" target="#b18">[19]</ref> or in a few seconds when weak Pseudo Ran-dom Number Generators (PRNG) are used to initialize the credentials <ref type="bibr" target="#b19">[20]</ref>. However, modern routers have effective countermeasures against such attacks. Examples include a physical button that enables WPS for only one minute and a limited number of sequential failed authentication attempts.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.2">Password generating algorithms</head><p>There were a number of incidents in the last decade that concerned insecure WPA2 password generating algorithms in routers. However, there is no general study published in the literature that addresses this issue specifically. Most of the incidents were made public in Internet blog posts or in Common Vulnerabilities and Exposures (CVE) reports.</p><p>The publication of the Thomson routers <ref type="bibr" target="#b20">[21]</ref> had a serious impact for major ISP that is active in The Netherlands. In 2008, the ISP had massively deployed the vulnerable Thomson Speedtouch 780 router. After proactively informing their customers the ISP has now replaced most of these vulnerable routers.</p><p>Similar issues exist with routers from ADB / Pirelli. Several recent studies <ref type="bibr" target="#b21">[22,</ref><ref type="bibr" target="#b22">23,</ref><ref type="bibr" target="#b23">24,</ref><ref type="bibr" target="#b24">25,</ref><ref type="bibr" target="#b25">26,</ref><ref type="bibr" target="#b26">27]</ref> show that it is trivial to recover the default WPA2 password. Furthermore, issues were found in Comtrend routers <ref type="bibr" target="#b27">[28]</ref> that are used by a large Spanish ISP. The researchers claim to have notified the manufacturer and ISP about these issues more than five years ago. However, it seems that these vulnerable routers are still actively being used in Spain. Then, issues exist within Arcadyan routers. A forum post from 2011 <ref type="bibr" target="#b28">[29]</ref> points out that the password generating function is actually published in the form of a patent <ref type="bibr" target="#b29">[30]</ref>. After the discovery, several variants of this algorithm were identified in other Arcadyan routers <ref type="bibr" target="#b30">[31,</ref><ref type="bibr" target="#b32">32,</ref><ref type="bibr" target="#b33">33]</ref>. Finally, a number of consumer routers exist containing weak password generating algorithms <ref type="bibr" target="#b34">[34,</ref><ref type="bibr" target="#b35">35,</ref><ref type="bibr" target="#b36">36,</ref><ref type="bibr" target="#b37">37,</ref><ref type="bibr" target="#b38">38,</ref><ref type="bibr" target="#b39">39,</ref><ref type="bibr" target="#b40">40]</ref>. Most of these consumer routers are currently still being sold in common consumer electronics stores.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.3">Reverse-engineering routers</head><p>We identified several publicly available blog posts that specifically focus on reverse-engineering wireless routers <ref type="bibr" target="#b41">[41,</ref><ref type="bibr" target="#b42">42,</ref><ref type="bibr" target="#b37">37,</ref><ref type="bibr" target="#b32">32]</ref>. We have generalized their techniques and approaches in our methodology and use them to structure our analysis phase.</p><p>In this study we use non-invasive to invasive methods <ref type="bibr" target="#b43">[43,</ref><ref type="bibr" target="#b44">44]</ref> to recover the firmwares of the routers. The methods we used are described in detail in Section 4.1. Furthermore, publicly available tutorials demonstrate how to interface embedded hardware without requiring expensive lab equipment <ref type="bibr" target="#b45">[45,</ref><ref type="bibr" target="#b46">46,</ref><ref type="bibr" target="#b47">47]</ref>.</p><p>Such methods include the JTAG debugger <ref type="bibr" target="#b48">[48]</ref> and serial communication peripherals <ref type="bibr" target="#b49">[49]</ref>. Most of these firmware recovery techniques can be carried out by using the Bus Pirate <ref type="bibr" target="#b50">[50]</ref>, shown in <ref type="figure" target="#fig_1">Figure 2</ref>, which is an off-the-shelf open hardware device that costs only USD $30. It supports a variety of communication buses and hardware protocols such as I2C, SPI, 1WIRE, UART and JTAG.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3">Introduction to WPA2</head><p>The WPA2 protocol can be set up in Enterprise or Personal mode. Enterprise mode uses a 802.1x RADIUS server for the authentication process whereas WPA2 personal uses a pre-shared key (PSK). Domestic networks normally use WPA2 personal. Unlike RADIUS server's online authentication, WPA2 personal does not rely on a Diffie-Hellman key exchange, however the shared secret must be previously established between the two parties using a separate channel. In this section we first introduce the key derivation of the WPA2-PSK protocol. Then, we explain how the mutual authentication is performed. Finally, we describe the deauthentication request that is included in the WPA2 protocol. </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.1">WPA2 key derivation</head></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.2">WPA2 authentication</head><p>Once this PMK is generated with the shared secret in both sides of the communication, a 4-way handshake which performs mutual authentication that proofs both sides have access to the shared secret PMK, see <ref type="bibr" target="#b52">[52]</ref> for more details. A simplified overview of the authentication procedure is shown in <ref type="figure" target="#fig_3">Figure 3</ref>.</p><p>Once authenticated, the WPA2 protocol uses the Advanced Encryption Standard (AES) <ref type="bibr" target="#b53">[53]</ref> in CCM encryp- tion mode <ref type="bibr" target="#b54">[54,</ref><ref type="bibr" target="#b55">55]</ref> as specified in <ref type="bibr" target="#b52">[52]</ref> to protect the confidentiality and authenticity of the messages that are transmitted between the computer and the router.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.3">WPA2 deauthentication</head><p>The WPA2 protocol suffers, just like many other 802.11-based networks, from a serious security weakness. These protocols support a deauthentication (and deassociation) request which allows an entity to gracefully disconnect from the wireless network. Moreover, to let computers to disconnect which do not have the correct cryptographic credentials (or became out-of-sync), the deauthentication packet is not cryptographically protected in any kind. Such a feature can be convenient to use from an engineering perspective. However, it also introduces a serious security issue since it allows an adversary to mount a deauthentication attack to instantly gather all the information that is required to recover the wireless password. The problem was first discussed in <ref type="bibr" target="#b56">[56]</ref> and later further analyzed in <ref type="bibr" target="#b57">[57]</ref>. <ref type="figure" target="#fig_4">Figure 4</ref> shows a simplified procedure that an adversary would perform to mount a deauthentication attack. During an deautentication attack the adversary impersonates the router and transmits a deauthentication notification to the client. A plaintext packet is injected at an arbitrary time by the adversary without any knowledge of the shared secret PMK. The only requirement is that the adversary needs to spoof the network MAC address of the router, which is a trivial exercise. Additionally, the MAC address of the client has to be known since it is used as the destination address of the deauthentication packet. However, some clients will even accept the packet in case it is sent to the broadcast address.</p><p>After receiving the packet, a client will immediately terminate the connection to the router. The client will then automatically re-connect and authenticate itself again. The adversary now simply records the 4-way handshake. This handshake can be used later to perform an offline key recovery attack.</p><p>There are currently a few open-source attack tools available that can forge and inject a deauthentication packet into an active wireless connection between a computer and a router <ref type="bibr" target="#b58">[58,</ref><ref type="bibr" target="#b59">59,</ref><ref type="bibr" target="#b60">60]</ref>. Furthermore, there are several publicly available tutorials show how such an attack can be executed in practice with the use of only ordinary consumer hardware <ref type="bibr" target="#b61">[61,</ref><ref type="bibr">62,</ref><ref type="bibr">63,</ref><ref type="bibr" target="#b62">64,</ref><ref type="bibr" target="#b63">65]</ref>.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4">Methodology</head><p>In this section we will go over the steps of obtaining the WPA2 default key generating algorithm from a router.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.1">Obtaining the firmware</head><p>There are a number of ways to recover the embedded firmware of a router. They mostly vary in invasiveness and difficulty.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.1.1">Downloading from the manufacturer's website</head><p>Obtaining the firmware can be as simple as visiting the manufacturer's website, selecting the router model, and downloading the image. Though this is typically not the case for routers deployed by ISPs. For such routers there seems to be a general reluctance against offering firmware images for download. Though this may hamper an adversary in obtaining the firmware and eventually the WPA2 default key generating algorithm, it is not to be considered a proper defense strategy, as will be demonstrated in the next sections.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.1.2">Interfacing the router's serial console</head><p>Most routers offer a serial interface that allows to debug the device to some extent. The capabilities offered through the serial interface vary greatly. Hence, it is not always a useful strategy to obtain the firmware.</p><p>Serial interfaces can usually be identified by 4 linedup pins, from which one of the outer pins connects to the ground. Most of the routers we encountered, the serial interface was not populated, requiring us to solder a 4-pin header onto it. In the case the serial interface is not found by inspecting the PCB, an online search may be performed. The OpenWRT wiki <ref type="bibr" target="#b64">[66]</ref> is usually a good place to look for information such as where the serial in-terface resides. Alternatively, a search for a datasheet of the System-on-Chip (SoC) may be performed, identifying which pins are the serial interface and subsequently inspecting the board in an attempt to discover where they are connected to. Once the serial interface is identified, a TTL-to-USB converter can be used to communicate with it.</p><p>Once communication is established between the PC and the router via the serial interface, the next step is to identify the capabilities the device offers over the serial interface. Typically, once the router is booted, it only outputs diagnostic logs, and does not offer the capability to send commands. However, when the router is booting, it is very typical that the device's boot loader offers a way to interrupt the normal boot sequence over the serial console, e.g. by pressing a key before a timer expires. The options offered to the serial console user differ from boot loader to boot loader, although they usually include downloading a new firmware image over the TFTP protocol and either flashing it or booting it directly, without performing a flash operation. Some boot loaders even allow to make a backup of the flash chip, meaning our quest to obtaining the firmware ends here.</p><p>If this is not the case, an attempt may be made to craft an image that the boot loader will accept and boot. Once the boot loader accepts the image, code execution is obtained on the router, hence full control over the router is obtained, including the ability to dump its flash. However, this is only possible in case the image format has been documented, either by the manufacturer or through reverse engineering, and does not require the manufacturer to include a cryptographic signature based on asymmetric cryptography (such as RSA or elliptic curves). It is likely that this is the case when the router is supported by OpenWRT, DDWRT, or a similar open source after market firmware. Although it is generally feasible to craft such an image, it is very likely easier to obtain code execution by debugging the router with a JTAG interface.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.1.3">Debugging the router with JTAG</head><p>Most SoCs offer debugging capabilities through JTAG. However, in our experiments we typically do not encounter the JTAG pins being connected on the PCB. Similar to finding the serial interface, the JTAG interface may be found by visually inspecting the PCB. The existence of 10, 14 or 20 pins placed together is usually a strong indicator of a JTAG header. As with the serial interface, a description of where the JTAG pins can be found on the PCB may be found online or by using a datasheet. In the case the JTAG pins cannot be identified, automated techniques exist that identify the JTAG pins by taking a "brute-force" approach. Such techniques can be implemented in Arduino devices <ref type="bibr" target="#b65">[67]</ref>. Alternatively, a device designed for this specific purpose exists <ref type="bibr" target="#b66">[68]</ref>. The technique identifies pins and enumerates undocumented opcodes from test points and/or component pads.</p><p>Once the JTAG interface is identified, a hardware debugger can be used to communicate with the microcontroller. A JTAG debugger comes as cheap as $6 USD.</p><p>Once the router is connected through the JTAG interface, control over its execution may be obtained. For example, register values can be inspected/manipulated, breakpoints can be set, code and/or data in RAM can be inspected/manipulated, etc. In case the debugging software used properly supports the flash chip, it is possible to read it out directly. If this is not the case, it may be possible to extend the debugging software to support this particular flash chip. Alternatively, the code within the firmware that is used to read from the flash chip may be recycled for our goal of reading it out entirely. As a final option, we may simply dump the contents of the RAM while the router is up and running. It is very typical for firmware of embedded devices to be loaded in its entirety in RAM upon boot, hence it is very likely to hold the entire firmware, hence also holding WPA2 default key generating algorithm.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.1.4">Exploiting a known vulnerability</head><p>Sometimes routers run a firmware for which a known vulnerability exists that allows us to gain control over its execution. If this is the case, we may be able to exploit it and use the firmware's internal capabilities to create a backup of its software and transfer it over the wire. The easiest way may be an OS command injection, buffer overflows in the web server or other services exposed over the network such as telnet, FTP, TFTP, etc.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.1.5">Desoldering the flash chip</head><p>In the case none of the methods posed above work, a rather invasive method way of obtaining the firmware may be used: by desoldering the flash chip and extracting its contents with an EEPROM reader. It requires a chip programmer that costs a few hundred dollars and the router will most likely be destroyed in the process. However, it is a very reliable way of obtaining the firmware in the sense that it almost always works: unless a router manufacturer resorts to very drastic measures such as hardware encryption with a per-device key, the firmware can be recovered by desoldering the flash chip.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.2">Decompressing and de-obfuscating</head><p>Once the firmware image is obtained, a typical first step would be to decompress it. In order to do so, a strategy that worked very well during our experiments is to attempt to pinpoint signatures of a number of well-known compression formats, such as GZIP or LZMA, and attempt to decompress starting from that offset. In case this does not work, we may be able to find documentation on this topic online. Usually with Linux-based devices, the image contains a SquashFS filesystem, which is used as the root filesystem. Since version 4.0, SquashFS supports LZMA compression. Router manufacturers typically also use LZMA in SquashFS versions prior to 4.0. They do so by means of adding proprietary extensions to the SquashFS code. Therefore, in order to successfully extract the root filesystem, we need to these extensions into account. Fortunately, the General Public License, under which the SquashFS code is licensed, requires the manufacturer to release the source code of these extensions. Hence, all the tools required to extract the root filesystem should be offered by the manufacturer for download.</p><p>It happens that router manufacturers also add an obfuscation layer. However, by design, the router's CPU needs to be able to decompress/de-obfuscate the code prior to being able to execute it. Typically, a software routine is present in the boot loader that does this, which may or may not be present in a firmware update image. In order to remove the obfuscation layer, the routine implementing the de-obfuscation either has to either be run in an emulator or be reverse engineered. Although it adds difficulty to the process of eventually obtaining the WPA2 default key generating algorithm, it will certainly not stop a dedicated attacker. On top of that, many the obfuscation algorithms have been published online, hence completely defeating the purpose of the obfuscation <ref type="bibr" target="#b41">[41,</ref><ref type="bibr" target="#b67">69]</ref>. Alternatively, the router manufacturer could add hardware that performs the decompression and de-obfuscation, although this adds additional manufacturing costs and the gain in additional security is questionable. We have not encountered such hardware protection in any of the routers we experimented with.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.3">Identifying the algorithm</head><p>Once the actual code is obtained, it can be analyzed by loading it into a disassembler tool such as IDA Pro. Finding the WPA2 default key generating algorithm is a task of which the difficulty varies greatly between different routers. For example, depending on the file format, (e.g. the raw image, or an executable file found in the root filesystem), a symbol table may be available, hinting to what the underlying code is doing. In our experiments, if it is available, it is often the easiest route to identify the algorithm. However, if it is not the case, we must resort to other means of finding it.</p><p>Suppose that one is in possession of a number of sample keys for a certain type of router. From this it can be reasonably deduced what the character set used in the WPA2 default keys is. Typically, the algorithm computes indices that are subsequently used in an array containing all possible characters. Hence, in order to find the WPA2 default key generating algorithm, it is often a good strategy to look for an array containing the character set, and look up where this array is referenced.</p><p>Furthermore, ESSIDs are typically also diversified over all routers. Suppose that the ESSID is &lt;ISP name&gt; + &lt;5 digits&gt;. Then the function generating the ES-SID may refer to a string such as &lt;ISP name&gt;%05d. In the case we find such a string, we look up where the string is referenced, leading us to the ESSID generating function. It is very likely that the ESSID generating function is invoked in code that performs a factory reset or similar. Hence, once the function generating the ESSID is identified, it is likely the WPA2 default key generating algorithm can be pinpointed by analyzing the code that invokes this function.</p><p>Finally, another strategy is to look for the code that performs the factory reset. Since this code is often very verbose, it should be easy to pinpoint strings used within this code (e.g. strings used to print the status of the factory reset to the serial interface). Once the factory reset code is identified, the functions invoked can be analyzed in order to identify which generates the WPA2 default key.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.3.1">Verifying the existence</head><p>Suppose the target function is still not found despite considerable effort. Although, in our experiments we have not encountered it, it may be the case that the algorithm is actually not present in the firmware. A reliable way to verify this proposition is to change the password such that it is different from the default one. Subsequently, the flash chip is re-read using any of the methods described in sections 4.1.2, 4.1.3, 4.1.4 or 4.1.5. Next, it can be checked whether the image obtained still contains the default password. If this is the case, then this is a strong indicator that the default password is stored on the flash chip and is re-instated when the user performs a factory reset.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.4">Analyzing the algorithm</head><p>Suppose that the target algorithm is located with great certainty. The next step is to determine what input is fed to this algorithm. This information may be deduced from hints such as the number of characters used from the input.</p><p>Additionally, an attempt may be made to run the algorithm in an emulator, such as QEMU. Although not a necessity, it greatly simplifies the process of reverse engineering the algorithm, since it enables one to perform dynamic analysis, diagnose intermediate results, etc. In order to do so, a tiny piece of code is written that invokes mmap (present in any modern C library) to map the firmware image to the base address used by the router. Then, the code performs a call to the address of the function and pass the expected input values to it. The code is then compiled with a compiler for the router's architecture and run within the emulator. This should output the correct WPA2 default key, in the case the inputs are as the algorithm expects. Note that the algorithm itself may depend on data in RAM being properly initialized, which is obviously not the case when it is invoked in this fashion. This happens for example when the algorithm calls sprintf. In this example, a straightforward workaround is to replace the call with the sprintf from libc, which is initialized upon execution of the binary.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.5">Reverse engineering the algorithm</head><p>Once all steps described above are completed, the process of reverse engineering can start. Reverse engineering typically is a slow process, where one takes a number of instructions, tries to make sense of them, and rewrites them in a higher-level programming language. This method is comparable to other security analysis of embedded devices described in the literature <ref type="bibr" target="#b68">[70,</ref><ref type="bibr" target="#b69">71,</ref><ref type="bibr" target="#b70">72,</ref><ref type="bibr" target="#b71">73,</ref><ref type="bibr" target="#b72">74,</ref><ref type="bibr" target="#b73">75,</ref><ref type="bibr" target="#b74">76]</ref>.</p><p>Optionally, the correctness of intermediate of the code may be verified by means of emulating the code. This process is described in the last section. Once the algorithm is successfully reverse engineered, it can be used it to recover the default password from another router of the same type or product family.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.6">Recovering the inputs</head><p>With no exceptions, all WPA2 default key generating algorithms that were recovered during our experiments use either the router's MAC address or serial number, or both, as input. Possible inputs such as the serial number, are assumed unknown to us and hence the strategy becomes to try every possible serial number. However, routers exist that also generate the ESSID and channel number based on the serial number. If these functions are also reverse engineered, in addition to the WPA2 key generating algorithm, their results may be used to rule out the vast majority of candidate keys. In order to further narrow down the set of candidate keys, one may attempt to correlate MAC address and serial number. Since both are typically assigned sequentially, it is very likely that the vast majority of candidate keys may be ruled out this way. Though this possibility has not been explored during our experiments.</p><p>Finally, another variable that was encountered during our experiments as an input to the key generating algorithm is the MAC address of the ethernet (LAN) adapter. Although this may seem as a variable that is unknown to an adversary, its contents is typically quite predictable. For example, it may be tightly correlated to the Wi-Fi MAC address of the router, which is public. During our experiments, routers were encountered where these MAC addresses differ in a single digit. Besides such an obvious correlation, the first three bytes of the MAC address are tied to the router manufacturer, which leaves only a search space with an entropy of 24 bits to find the ethernet MAC address.</p><p>Encrypted wireless network packets include information in plain-text such as the BSSID, the source and destination MAC address. This information is sent unencrypted because this allows a wireless network device to decide whether a packet should be ignored, for example in case the device is not the recipient, prior to performing decryption. In one specific router, the ethernet and wireless interfaces are bridged together in a single interface. The default behaviour in Linux-based devices is to assign the MAC address of the first interface added to the bridge. In this case, the bridge interface is assigned the ethernet MAC address. Hence, every packet sent by a client that is destined for the router itself has the router's ethernet MAC set as its destination. Since the router is the default gateway for traffic destined outside the local subnet, i.e. the Internet, all packets sent to any destination on the Internet will have the router's ethernet MAC address assigned as its destination. Hence, all that is needed in order to recover the ethernet MAC address is to capture a single (encrypted) packet from the air and inspect its destination address. A packet dissected by Wireshark demonstrating this phenomenon is depicted in <ref type="figure" target="#fig_5">Figure 5</ref>. </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.7">Building an attack</head><p>The number of candidate keys directly depends on the input fed to the algorithm. For example, the router's MAC address is public. Hence, in case the algorithm uses only this value as input, its default WPA2 key can be immediately computed.</p><p>The size of the resulting set of candidate keys is sometimes so small that attempting to authenticate to the device using all the candidate keys is a feasible way of recovering the WPA2 key. However, in situations where the set is larger, we can deploy a different strategy. Suppose that one is in possession of a captured and stored authentication handshake between a client and an access point. It can be used to verify whether a candidate key is indeed the correct key, see Section 3.3. This method of verifying the key is significantly faster than attempting to authenticate, allowing to verify several thousand candidates within seconds. On top of that, once the handshake is captured, an attacker need not be in proximity of the router anymore. Furthermore, in order to capture such a handshake, it is not necessary to wait for a client to initiate an authentication. Instead, a de-authentication packet can be sent to a client who is already connected. Since this packet is not cryptographically authenticated, the client will simply disconnect. Typical behaviour of wireless clients is to automatically re-connect, allowing an authentication handshake to be captured. The de-authentication is described in detail in Section 3.3. Hence, all that is needed is a single client being connected to the router in order to significantly speed up the attack, typically recovering the key within seconds.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5">Use cases</head><p>In this section we present the results found in several routers during our experiments.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5.1">Router 1</head><p>The first router security analysis include the recovery of hardcoded credentials, identification of a default WPA2 key which is based solely on public data, an OS command injection in the Telnet service and a stack buffer overflow in the HTTP server. This router is used by a major telecommunications operator, which has many million customers in several European countries.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5.1.1">Obtaining the firmware</head><p>The router embeds an active serial port interface, which can be used by soldering a header onto the board. When powering on the device, the boot loader waits for input from the serial port for 2 seconds before continuing the boot process and ultimately loading the firmware. During this time-frame it is possible to interrupt the boot process and supply an alternate firmware which is loaded into RAM and executed directly, hence without the necessity to perform a flash. Hence, we used the method described in Section 4.1.2 to recover firmware.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5.1.2">Locating the algorithm</head><p>The router only offers a very limited web interface to its user. We assumed that an additional, more privileged, "system" account had to exist, which is used by e.g. technical support. The HTML and Javascript code served by the web server also hints in this direction. E.g. terms such as usrPassword, sysPassword and sptPassword are self-explanatory. By simply searching for these strings in the firmware binaries, the "system" username and password can be recovered. The "system" account allowed us to enable the telnet service.</p><p>From the telnet console we found another command: md5wpakey which, interestingly, outputs the default WPA2 key which is set when the router ships, even in the case when the user had set the WPA2 key to a different one. Hence, it seemed a good starting point for finding the function that generates the default WPA2 key.</p><p>We searched through the file system for md5wpakey and found only a single file that contained that string: /bin/cfm. When loading the binary into IDA Pro, we noticed that the symbols in the binary were not stripped, which greatly simplifies the analysis.</p><p>The key is obtained by taking the lower-case hex representation of the first six bytes of the following hash: password = MD5( constant seed, lowercase WAN mac address, uppercase LAN mac address ) Section 4.6 shows how to observe and recover both MAC addresses using only wireless interception of network packets.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5.1.3">Telnet command execution</head><p>We noticed that there was some input validation active for the telnet service. For instance, execution of sysinfo &amp;&amp; sh fails with the following error message:</p><p>Warning: operator &amp; is not supported! From this we blindly assumed that the input is properly sanitized. Though, having the ability to execute commands allows for a more thorough analysis of the software. Therefore, we decided to patch the command interpreter such that is does not sanitize the inputs. During this process we noticed that the command is not executed when a &amp; (ampersand) or ; (semicolon) is found. However, there was no validation that looked for the | (pipe) symbol.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5.1.4">Stack buffer overflow</head><p>During our study we also identified a (indirect) remote executable exploit. A malicious website can redirect the client's web browser to send specifically crafted HTTP requests to the router.</p><p>We found a stack-based buffer overflow vulnerability by looking into code that references strcpy in /bin/cfm, which holds the web server, with IDA Pro and subsequently checking the source and destination pointers. The vulnerable function is cgiOpt60Add, it can be triggered by requesting /dhcpOption60.cmd?action=add &amp;VendorID=input1&amp;IpStart=input2&amp;ipEnd=input3.</p><p>All the input variables are copied onto the stack without performing bounds checking. The stack is flagged non-executable. However, ASLR is used neither by the binary, nor by any loaded shared library. Additionally no stack smashing protection is used. Hence, the buffer overflow can be exploited with the use of Return Oriented Programming (ROP) <ref type="bibr" target="#b75">[77]</ref>.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5.2">Router 2</head><p>The second router is similar to the first router, but a slightly different variant, it is deployed by the same ISP. In this section, we will briefly state the difference between the two routers regarding vulnerabilities.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5.2.1">Obtaining the firmware</head><p>The firmware images for this router are also not available online. We extracted the firmware using the serial interface as we did with Router 1, however, we also found a more convenient alternative way. We can exploit the same command injection vulnerability as available in router 1, with a slight difference that the sysinfo command was removed, though the ping command could be used instead. In contrast to the first router, this one came with the nc command installed, which allows one to send/receive data. Hence, we obtained a shell on the router using the command injection vulnerability and subsequently used nc to read the router's firmware and send it over the network.</p><p>Also in this router, Telnet could be activated in the web interface of the "system" account. However, we noticed that this router uses different global "system" credentials for the web interface. Interestingly, the option to enable the telnet is for a "normal" user only not visible in the web interface, but given the correct url, also the "normal" user can activate it.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5.2.2">Locating the algorithm</head><p>The default WPA2 key generating function is identical to the one applied in router 1. However, the configuration of router is different: we noticed that the Ethernet mac address equals the WiFi mac address, with the last digit decremented by one. This means that the default WPA2 password can be computed when only the BSSID is known.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5.3">Router 3</head><p>This router is deployed by a major multi-national telecommunication operator who offer services in a number of countries under different brands.</p><p>From the router we recovered algorithms used to generates the default WPA2 key for a number of brands, taking the router's serial number as input. The range of possible serial numbers is not wide enough in order to provide sufficient entropy for the security of the wireless network.</p><p>Additionally, the default ESSID and wifi channel number are also generated using the serial number, allowing us to narrow down the set of possible serial numbers to several thousands, which can be checked against a captured authentication handshake within seconds.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5.3.1">Obtaining the firmware</head><p>Neither the ISP nor the router manufacturer offers firmware images for downloading off their websites. Hence, we had to extract the firmware image from the device itself. We obtained a firmware image by desoldering the flash storage chip and using an EEPROM reader to extract its contents. The firmware image is stored compressed using LZMA, and gets decompressed on start-up by the boot loader. However, the LZMA image is in a slightly different format: the uncompressed size is missing, which was found before on routers that use the same boot loader <ref type="bibr" target="#b42">[42]</ref>. By simply inserting a too large uncompressed size, the file can be decompressed with standard LZMA tools. The file obtained is a binary blob, which is mapped in memory on a static address and subsequently executed. Hence, no executable headers and thus symbols, sections, etc. are available.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5.3.2">Locating the algorithm</head><p>As a starting point for finding the WPA2 key generating function, we speculated that finding the function that generates the default ESSID should point us in the right direction. We found it by searching for the string "&lt;ISP name&gt; %07d" (all the routers of this model we encountered have a default ESSID in the form of the ISP name + a 7-digit number). Oddly, the function that generates the ESSID, returns a static value in the case certain input is fed into it. A quick search yielded that in the past, the ISP had been experimenting with a second hidden wireless network named as such. Users have discovered the constant key that can be used to access this network by using the backup settings functionality. Apparently, this functionality had not been completely removed in later firmware revisions.</p><p>We successfully reverse engineered both the ESSID and WPA2 key generating functions. Both functions take the router's serial number as input and perform some obfuscation. We assume the router's serial number is unknown to an attacker. To the best of our knowledge, it cannot be obtained from wireless communication with the router without already knowing its WPA2 key. However, given that the ESSID of the router is public, the attacker can build a candidate list of possible serial numbers that yield the correct ESSID and compute their corresponding WPA2 key. Doing so typically leaves only several thousands of candidate keys. The candidates can be verified using a deauthentication attack as described in Section 3.3. The complete attack procedure can be performed in a few minutes. This technique can be applied for the rest of algorithms that were revealed in this firmware image. We have counted up to 8 different password generating algorithms all based on the serial number and a cryptographic hashing function. All these routers are wide spread over the world.</p><p>This vulnerability seems also to be present in another router from the same manufacturer, also deployed by this ISP in another country. Although the ESSID generating function seems to differ. Finally, speculating on the results found, this vulnerability is likely also present in different router models from the same brand deployed by this ISP in other countries. However, as of yet, we were unable to practically verify whether this is the case.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5.4">Router 4</head><p>This section describes our reverse engineering research on a couple of routers deployed by a large Telco in the Netherlands. We recovered the WPA2 password generating algorithm without reverse-engineering the firmware.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5.4.1">Recovering the algorithm</head><p>Surprisingly, we were surprised when we applied a previously published algorithm <ref type="bibr" target="#b28">[29]</ref> for similar routers and noticed that it partially worked. By executing their algorithm, we detected that 9 out of 12 digits matched. Therefore, we suspected that the vendor was reusing its previous method described in this patent <ref type="bibr" target="#b29">[30]</ref>. With some elementary linear algebra the "new" constant seed can be recovered which is used together with an exclusive-or (XOR) operation in the algorithm.</p><p>To recover the key an adversary only need to mount a brute-force attack with at most 10 5 candidates, from which the false candidates can be eliminated in a matter of seconds.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5.5">Router 5 (family)</head><p>This section describes vulnerabilities discovered in a large family of routers made by the same manufacturer.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5.5.1">Obtaining the firmware</head><p>We downloaded a large set of firmwares and used previously published techniques <ref type="bibr" target="#b36">[36,</ref><ref type="bibr" target="#b38">38,</ref><ref type="bibr" target="#b37">37]</ref> to de-obfuscated them. Old versions were not obfuscated though.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5.5.2">Locating the algorithm</head><p>We have seen a distinction of default WPA2 keys generation algorithm in many firmwares. It seems that there are two main algorithms that cover the majority of these routers and they use either the algorithm currently known <ref type="bibr" target="#b38">[38]</ref> or a slightly modified version.</p><p>In our reverse engineering research, we have observed that certain routers are using the new password generation function. The difference between this function and the old one is simply the characters set alteration. Basically, the algorithm uses the last 3 bytes from the mac address to mangle it with some 'secret numbers'. After that, these numbers are substituted by the modular position in the characters set.</p><p>Another model of this family was reverse engineered. This model contained an stripped binary called 'AutoWPA' responsible for generating the default WPA key. Such binary was emulated and found out that only mac address was necessary as input. After a dynamic analysis, we managed to recover the algorithm which can be attacked in matter of seconds. The algorithm was simply using many times bitwise operations (and, nor, xor and or) with the mac address and constants values. Eventually, we realized that MD5 was used to generate a hash and subsequently converted to different character set.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="6">Mitigation and countermeasures</head><p>We divide the mitigation strategy in two categories: the short-term notification phase and the implementation of long-term countermeasures.</p><p>Short-term The severity of weak default WPA2 passwords in many routers demands for an immediate response. There are most likely millions of house-holds that use the default WPA2 password that is printed on the sticker of the Internet router. We are currently strongly encouraging Telcos, ISPs and manufacturers to embrace their responsibility and start informing their customers about the insecurity of weak default passwords in routers. A quick security improvement could be achieved by stimulating users to change their default key by choosing a strong wireless password <ref type="bibr" target="#b0">[1]</ref>. However, it is wellknown that user defined password are often not so difficult to guess <ref type="bibr" target="#b76">[78,</ref><ref type="bibr" target="#b77">79]</ref>. Therefore, this can be seen as an effective, but palliating countermeasure, that only marginally increases the protection of wireless networks.</p><p>Long-term There are several countermeasures that can be applied to improve the security of wireless routers. The most important change should be the removal of the password generating algorithm. We noticed during our experiments that every router is uniquely personalized during manufacturing. Specifically, a unique serial number and network MAC addresses are programmed into EEPROM. Furthermore, the sticker on the router contains the same serial number, MAC addresses and the wireless password. Therefore, we see no reason why a strong and randomly chosen password can not be programmed into EEPROM as well in stead of being derived from the other two values. Moreover, there are wellknown royalty free statistical test suites that can help implementing the best practices for generating random strings <ref type="bibr" target="#b78">[80]</ref>.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="7">Conclusion</head><p>We are surprised to notice little improvement in the default password protection of Dutch routers. In 2008, the practically exploitable security issue in SpeedTouch routers <ref type="bibr" target="#b20">[21]</ref> generated some serious media attention in The Netherlands. We had expected that successor and improved routers would be much more secure. However, our study reveals that various modern and massively deployed routers still use weak methods to generate default passwords. Users that did not explicitly changed their wireless password are vulnerable to practical password recovery attacks which enables an adversary to remotely intrude their network within minutes.</p><p>We have strictly followed the principles of responsible disclosure <ref type="bibr" target="#b79">[81]</ref>. The guidelines, defined by the Dutch government <ref type="bibr" target="#b1">[2]</ref>, propose a time-frame of six months advance notice for embedded security issues prior to full disclosure. We informed the Dutch government as well as all major Telco and ISPs in the Netherlands in an early stage about the findings of our research. Moreover, we are currently coordinating a nation wide notification to the general public together with the Dutch National Cyber Security Centre (NCSC). With this course of action we hope to motivate vulnerable users to change their weak default WPA2 key.</p><p>Although, we focused our research solely on the analysis of Dutch wireless routers, we have reason to believe that this issue is an industry-wide problem and applies to many routers deployed in several countries. We noticed that some vendors reuse their WPA2 password generating algorithms with small modifications in other countries. This suggests that many more routers are vulnerable to practical password recovery attacks.</p></div><figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_0"><head>Figure 1 :</head><label>1</label><figDesc>Figure 1: Sticker on the bottom of a wireless router.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_1"><head>Figure 2 :</head><label>2</label><figDesc>Figure 2: Bus Pirate.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_2"><head></head><label></label><figDesc>WPA2-PSK uses the key derivation function called PBKDF2 (Password-Based Key Derivation Function 2) [51] to compute the shared secret key PMK. The PBKDF2 function requires the following input: Derived Key = PBKDF2 ( pseudo random function, password, salt, iterations, derived key length ) PBKDF2 combines the password pw and the wireless network identifier ssid as cryptographic salt to iterate a certain amount of times until obtain a derived key called Pairwise Master Key (PMK). WPA2 applies the function 4096 iterations to generate a 256 bits key by computing a HMAC-SHA1 of the passphrase and ssid. PMK = PBKDF2(HMAC SHA1, pw, ssid, 4096, 256)</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_3"><head>Figure 3 :</head><label>3</label><figDesc>Figure 3: Simplified WPA2 authentication [52].</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_4"><head>Figure 4 :</head><label>4</label><figDesc>Figure 4: Deauthentication of WPA2 connection. During an deautentication attack the adversary impersonates the router and transmits a deauthentication notification to the client. A plaintext packet is injected at an arbitrary time by the adversary without any knowledge</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_5"><head>Figure 5 :</head><label>5</label><figDesc>Figure 5: Packet dissected by Wireshark revealing the router's ethernet MAC.</figDesc></figure>
		</body>
		<back>
			<div type="references">

				<listBibl>

<biblStruct xml:id="b0">
	<monogr>
		<title level="m" type="main">Password management guideline</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">L</forename><surname>Sheila</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Jeffrey</forename><forename type="middle">D</forename><surname>Brand</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Makey</surname></persName>
		</author>
		<idno>CSC-STD-002-85</idno>
		<imprint>
			<date type="published" when="1985" />
			<pubPlace>Fort George G. Meade, Maryland</pubPlace>
		</imprint>
		<respStmt>
			<orgName>Department of Defense Computer Security Center (DoD-CSC</orgName>
		</respStmt>
	</monogr>
<note type="report_type">Technical Report</note>
	<note>Library No. S-226,994</note>
</biblStruct>

<biblStruct xml:id="b1">
	<monogr>
		<title level="m" type="main">Policy for arriving at a practice for responsible disclosure</title>
		<ptr target="https://www.ncsc.nl/english/current-topics/news/responsible-disclosure-guideline.html" />
		<imprint>
			<date type="published" when="2013" />
		</imprint>
		<respStmt>
			<orgName>National Cyber Security Centre (NCSC)</orgName>
		</respStmt>
	</monogr>
</biblStruct>

<biblStruct xml:id="b2">
	<analytic>
		<title level="a" type="main">Weaknesses in the key scheduling algorithm of RC4</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Scott</forename><surname>Fluhrer</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Itsik</forename><surname>Mantin</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Adi</forename><surname>Shamir</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">8th International Workshop on Selected Areas in Cryptography</title>
		<imprint>
			<publisher>Springer-Verlag</publisher>
			<date type="published" when="2001" />
			<biblScope unit="volume">2259</biblScope>
			<biblScope unit="page" from="1" to="24" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b3">
	<analytic>
		<title level="a" type="main">Using the Fluhrer, Mantin, and Shamir attack to break WEP</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Adam</forename><surname>Stubblefield</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">John</forename><surname>Ioannidis</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Aviel</forename><forename type="middle">D</forename><surname>Rubin</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">9th Network and Distributed System Security Symposium</title>
		<imprint>
			<publisher>The Internet Society</publisher>
			<date type="published" when="2002" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b4">
	<analytic>
		<title level="a" type="main">Intercepting mobile communications: the insecurity of 802.11</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Nikita</forename><surname>Borisov</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Ian</forename><surname>Goldberg</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">David</forename><surname>Wagner</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">7th International Conference on Mobile Computing and Networking (MOBICOM 2001)</title>
		<imprint>
			<publisher>ACM</publisher>
			<date type="published" when="2001" />
			<biblScope unit="page" from="180" to="189" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b5">
	<analytic>
		<title level="a" type="main">Security flaws in 802.11 data link protocols</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Nancy</forename><surname>Cam-Winget</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Russ</forename><surname>Housley</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">David</forename><surname>Wagner</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Jesse</forename><surname>Walker</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Communications of the ACM</title>
		<imprint>
			<biblScope unit="volume">46</biblScope>
			<biblScope unit="issue">5</biblScope>
			<biblScope unit="page" from="35" to="39" />
			<date type="published" when="2003" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b6">
	<analytic>
		<title level="a" type="main">Security problems in 802.11-based networks</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Russ</forename><surname>Housley</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">William</forename><surname>Arbaugh</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Communications of the ACM</title>
		<imprint>
			<biblScope unit="volume">46</biblScope>
			<biblScope unit="issue">5</biblScope>
			<biblScope unit="page" from="31" to="34" />
			<date type="published" when="2003" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b7">
	<analytic>
		<title level="a" type="main">A key recovery attack on the 802.11b wired equivalent privacy protocol (WEP)</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Adam</forename><surname>Stubblefield</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">John</forename><surname>Ioannidis</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Aviel</forename><forename type="middle">D</forename><surname>Rubin</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">ACM Transactions on Information and System Security</title>
		<imprint>
			<biblScope unit="volume">7</biblScope>
			<biblScope unit="issue">2</biblScope>
			<biblScope unit="page" from="319" to="332" />
			<date type="published" when="2004" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b8">
	<analytic>
		<title level="a" type="main">A practical attack on the fixed RC4 in the WEP mode</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Itsik Mantin</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">11th International Conference on the Theory and Application of Cryptology and Information Security</title>
		<imprint>
			<publisher>Springer-Verlag</publisher>
			<date type="published" when="2005" />
			<biblScope unit="volume">3788</biblScope>
			<biblScope unit="page" from="395" to="411" />
		</imprint>
	</monogr>
	<note>Advances in Cryptology (ASIACRYPT 2005)</note>
</biblStruct>

<biblStruct xml:id="b9">
	<analytic>
		<title level="a" type="main">The final nail in WEP&apos;s coffin</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Andrea</forename><surname>Bittau</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Mark</forename><surname>Handley</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Joshua</forename><surname>Lackey</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">27th IEEE Symposium on Security and Privacy (S&amp;P 2006)</title>
		<imprint>
			<publisher>IEEE Computer Society</publisher>
			<date type="published" when="2006" />
			<biblScope unit="page" from="386" to="400" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b10">
	<analytic>
		<title level="a" type="main">Break WEP faster with statistical analysis</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Rafik</forename><surname>Chaabouni</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">technical report</title>
		<imprint>
			<date type="published" when="2006" />
		</imprint>
	</monogr>
<note type="report_type">Technical report</note>
</biblStruct>

<biblStruct xml:id="b11">
	<analytic>
		<title level="a" type="main">Breaking 104 bit WEP in less than 60 seconds</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Erik</forename><surname>Tews</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Ralf-Philipp</forename><surname>Weinmann</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Andrei</forename><surname>Pyshkin</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">8th International Workshop on Information Security Applications</title>
		<imprint>
			<publisher>Springer-Verlag</publisher>
			<date type="published" when="2007" />
			<biblScope unit="volume">4867</biblScope>
			<biblScope unit="page" from="188" to="202" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b12">
	<analytic>
		<title level="a" type="main">Practical attacks against WEP and WPA</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Erik</forename><surname>Tews</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Martin</forename><surname>Beck</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">2nd ACM Conference on Wireless Network Security (WISEC 2009)</title>
		<imprint>
			<publisher>ACM</publisher>
			<date type="published" when="2009" />
			<biblScope unit="page" from="79" to="86" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b13">
	<analytic>
		<title level="a" type="main">Serge Vaudenay, and Martin Vuagnoux. Smashing WEP in a passive attack</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Pouyan</forename><surname>Sepehrdad</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Petr</forename><surname>Susil</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">20th International Workshop on Fast Software Encryption (FSE 2013</title>
		<imprint>
			<publisher>Springer-Verlag</publisher>
			<date type="published" when="2013" />
			<biblScope unit="volume">8424</biblScope>
			<biblScope unit="page" from="155" to="178" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b14">
	<analytic>
		<title level="a" type="main">All your biases belong to us: Breaking rc4 in wpa-tkip and tls</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Mathy</forename><surname>Vanhoef</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Frank</forename><surname>Piessens</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">24th USENIX Security Symposium (USENIX Security 15</title>
		<meeting><address><addrLine>Washington, D.C.</addrLine></address></meeting>
		<imprint>
			<publisher>USENIX Association</publisher>
			<date type="published" when="2015" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b15">
	<analytic>
		<title level="a" type="main">Exposing wpa2 security protocol vulnerabilities</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Achilleas</forename><surname>Tsitroulis</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Dimitris</forename><surname>Lampoudis</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Emmanuel</forename><surname>Tsekleves</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">International Journal of Information and Computer Security</title>
		<imprint>
			<biblScope unit="volume">6</biblScope>
			<biblScope unit="issue">1</biblScope>
			<biblScope unit="page" from="93" to="107" />
			<date type="published" when="2014" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b16">
	<analytic>
		<title level="a" type="main">Short paper: exploiting wpa2-enterprise vendor implementation weaknesses through challenge response oracles</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Pieter</forename><surname>Robyns</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Bram</forename><surname>Bonné</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Peter</forename><surname>Quax</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Wim</forename><surname>Lamotte</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 2014 ACM conference on Security and privacy in wireless &amp; mobile networks</title>
		<meeting>the 2014 ACM conference on Security and privacy in wireless &amp; mobile networks</meeting>
		<imprint>
			<publisher>ACM</publisher>
			<date type="published" when="2014" />
			<biblScope unit="page" from="189" to="194" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b17">
	<analytic>
		<title level="a" type="main">Advanced stealth man-in-the-middle attack in wpa2 encrypted wi-fi networks</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Mayank</forename><surname>Agarwal</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Santosh</forename><surname>Biswas</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Sukumar</forename><surname>Nandi</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Communications Letters</title>
		<imprint>
			<biblScope unit="volume">19</biblScope>
			<biblScope unit="issue">4</biblScope>
			<biblScope unit="page" from="581" to="584" />
			<date type="published" when="2015" />
		</imprint>
	</monogr>
	<note>IEEE</note>
</biblStruct>

<biblStruct xml:id="b18">
	<monogr>
		<title level="m" type="main">Brute forcing wifi protected setup</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Stefan</forename><surname>Viehböck</surname></persName>
		</author>
		<ptr target="https://sviehb.files.wordpress.com/2011/12/viehboeckwps.pdf" />
		<imprint>
			<date type="published" when="2011-12" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b19">
	<monogr>
		<title level="m" type="main">Offline bruteforce attack on wifi protected setup</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Dominique</forename><surname>Bongard</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2014" />
		</imprint>
	</monogr>
	<note>Presentation at Hacklu</note>
</biblStruct>

<biblStruct xml:id="b20">
	<monogr>
		<title level="m" type="main">Default wep/wpa key algorithm for thomson routers</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Kevin</forename><surname>Devine</surname></persName>
		</author>
		<ptr target="http://www.hakim.ws/st585/KevinDevine" />
		<imprint>
			<date type="published" when="2008" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b21">
	<monogr>
				<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Muris</forename><surname>Kurgas</surname></persName>
		</author>
		<ptr target="http://www.remote-exploit.org/content/PirelliDiscusDRGA225WiFirouter.pdf" />
		<title level="m">Pirelli discus drg a225 wifi router. default wpa2-psk algorithm vulnerability</title>
		<imprint>
			<date type="published" when="2009" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b22">
	<monogr>
		<title level="m" type="main">Alice agpf: The algorithm</title>
		<imprint/>
	</monogr>
	<note>WiFi researchers</note>
</biblStruct>

<biblStruct xml:id="b23">
	<monogr>
		<title level="m" type="main">Telsey fastweb: Full disclosure</title>
		<ptr target="https://wifiresearchers.wordpress.com/2010/09/09/telsey-fastweb-full-disclosure" />
		<imprint>
			<date type="published" when="2010-09" />
		</imprint>
	</monogr>
	<note>WiFi researchers</note>
</biblStruct>

<biblStruct xml:id="b24">
	<monogr>
		<title level="m" type="main">A1/telekom austria prg eav4202n default wpa key algorithm weakness</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Stefan</forename><surname>Viehböck</surname></persName>
		</author>
		<ptr target="http://sviehb.wordpress.com/2011/12/04/prg-eav4202n-default-wpa-key-algorithm" />
		<imprint>
			<date type="published" when="2011-12-04" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b25">
	<monogr>
		<title level="m" type="main">Cve-2015-0558: Reverse-engineering the default wpa key generation algorithm for pirelli routers in argentina</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Eduardo</forename><surname>Novella</surname></persName>
		</author>
		<ptr target="http://ednolo.alumnos.upv.es/?p=1883" />
		<imprint>
			<date type="published" when="2015" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b26">
	<monogr>
		<title level="m" type="main">Hacking again pirelli routers: Adb pirelli p.dg a4000n deployed by meo portugal</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Eduardo</forename><surname>Novella</surname></persName>
		</author>
		<ptr target="http://ednolo.alumnos.upv.es/?p=2008" />
		<imprint>
			<date type="published" when="2015" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b27">
	<monogr>
		<title level="m" type="main">Uncovering the default wpa key generation for telefonica routers in spain</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Eduardo</forename><surname>Novella</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Mambostar</surname></persName>
		</author>
		<ptr target="http://foro.seguridadwireless.net/desarrollo-112/fallo-de-seguridad-en-routers-comtrend-full-disclosure" />
		<imprint>
			<date type="published" when="2010-11-24" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b28">
	<monogr>
		<title level="m" type="main">Wlan4xx: Algorithm for arcardyan routers</title>
		<ptr target="http://foro.seguridadwireless.net/desarrollo-112/wlan4xx-algoritmo-routers-yacom,3" />
		<imprint/>
	</monogr>
	<note>Seguridad Wireless team</note>
</biblStruct>

<biblStruct xml:id="b29">
	<monogr>
		<title level="m" type="main">Arcadyan encryption scheme patent</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Tw Arcadyan Technology Corp</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Hsinchu</surname></persName>
		</author>
		<ptr target="http://www.patent-de.com/20081120/DE102007047320A1.html" />
		<imprint>
			<date type="published" when="2007" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b30">
	<monogr>
		<title level="m" type="main">Vodafone easybox default wps pin algorithm weakness</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Stefan</forename><surname>Viehböck</surname></persName>
		</author>
		<ptr target="https://www.sec-consult.com/fxdata/seccons/prod/temedia/advisoriestxt/20130805-0" />
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b31">
	<monogr>
		<title level="m" type="main">Vodafone EasyBox Default WPS PIN Vulnerability v10.txt</title>
		<imprint>
			<date type="published" when="2012-12-12" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b32">
	<monogr>
		<title level="m" type="main">Reverse engineering of the wpa default algorithm of alice (o2) modem iad 1421 and 4421</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Warker</forename><surname>Ranger</surname></persName>
		</author>
		<ptr target="http://warkerranger.tumblr.com/post/67646092068/re-des-wpa-default-algorithmus-der-alice-o2-iad" />
		<imprint>
			<date type="published" when="2013-11-21" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b33">
	<monogr>
		<title level="m" type="main">Arcadyan routers used by vodafone in spain are also vulnerables</title>
		<ptr target="http://ednolo.alumnos.upv.es/?p=1760" />
		<imprint>
			<date type="published" when="2014-02-04" />
		</imprint>
	</monogr>
	<note>Seguridad Wireless team</note>
</biblStruct>

<biblStruct xml:id="b34">
	<monogr>
		<title level="m" type="main">Cve-2012-4366: Insecure default wpa2 passphrase in multiple belkin wireless routers</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Jörg</forename><surname>Schneider</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Jakob</forename><surname>Lell</surname></persName>
		</author>
		<ptr target="http://www.jakoblell.com/blog/?p=15" />
		<imprint>
			<biblScope unit="page">19</biblScope>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b35">
	<monogr>
		<title level="m" type="main">Wpa2 cracking dictionary for tp-link routers. seeds are not so random</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Alex</forename><surname>Altea</surname></persName>
		</author>
		<ptr target="http://www.backtrack-linux.org/forums/showthread.php?t=62673" />
		<imprint>
			<date type="published" when="2013-11-19" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b36">
	<monogr>
				<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Roberto</forename><surname>Paleari</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Alessandro</forename><forename type="middle">Di</forename><surname>Pinto</surname></persName>
		</author>
		<ptr target="http://blog.emaze.net/2013/08/multiple-vulnerabilities-on-sitecom.html" />
		<title level="m">Multiple vulnerabilities on sitecom devices. sitecom n300/n600 devices</title>
		<imprint>
			<date type="published" when="2013-08-19" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b37">
	<monogr>
				<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Warker</forename><surname>Ranger</surname></persName>
		</author>
		<ptr target="http://warkerranger.tumblr.com" />
		<title level="m">Reverse engineering blog</title>
		<imprint>
			<date type="published" when="2014" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b38">
	<monogr>
		<title level="m" type="main">Sitecom firmware encryption and wireless keys</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Roberto</forename><surname>Paleari</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Alessandro</forename><forename type="middle">Di</forename><surname>Pinto</surname></persName>
		</author>
		<ptr target="http://blog.emaze.net/2014/04/sitecom-firmware-and-wifi.html" />
		<imprint>
			<biblScope unit="page">22</biblScope>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b39">
	<monogr>
		<title level="m" type="main">Reversing belkin&apos;s wps pin algorithm</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Craig</forename><surname>Heffner</surname></persName>
		</author>
		<ptr target="http://www.devttys0.com/2015/04/reversing-belkins-wps-pin-algorithm" />
		<imprint>
			<date type="published" when="2015-04-10" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b40">
	<monogr>
		<title level="m" type="main">Reversing d-link&apos;s wps pin algorithm</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Craig</forename><surname>Heffner</surname></persName>
		</author>
		<ptr target="http://www.devttys0.com/2014/10/reversing-d-links-wps-pin-algorithm" />
		<imprint>
			<biblScope unit="page">31</biblScope>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b41">
	<monogr>
		<title level="m" type="main">Reverse engineering an obfuscated firmware image E01</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Stefan</forename><surname>Viehböck</surname></persName>
		</author>
		<ptr target="https://sviehb.wordpress.com/tag/arcadyan-2" />
		<imprint>
			<date type="published" when="2011-09-09" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b42">
	<analytic>
		<title level="a" type="main">Unpacking firmware images from cable modems</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Bernardo</forename><surname>Rodrigues</surname></persName>
		</author>
		<ptr target="http://w00tsec.blogspot.nl/2013/11/unpacking-firmware-images-from-cable.html" />
	</analytic>
	<monogr>
		<title level="m">November</title>
		<imprint>
			<date type="published" when="2013" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b43">
	<analytic>
		<title level="a" type="main">Protecting embedded systems the next ten years</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Ross</forename><surname>Anderson</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">3rd International Workshop on Cryptographic Hardware and Embedded Systems (CHES 2001)</title>
		<meeting><address><addrLine>Berlin Heidelberg</addrLine></address></meeting>
		<imprint>
			<publisher>Springer</publisher>
			<date type="published" when="2001" />
			<biblScope unit="volume">2162</biblScope>
			<biblScope unit="page" from="1" to="2" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b44">
	<monogr>
		<title level="m" type="main">Semi-invasive attacks -A new approach to hardware security analysis</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Sergei</forename><forename type="middle">P</forename><surname>Skorobogatov</surname></persName>
		</author>
		<idno>UCAM-CL-TR-630</idno>
		<imprint>
			<date type="published" when="2005-04" />
		</imprint>
		<respStmt>
			<orgName>University of Cambridge, Computer Laboratory</orgName>
		</respStmt>
	</monogr>
<note type="report_type">Technical Report</note>
</biblStruct>

<biblStruct xml:id="b45">
	<monogr>
				<ptr target="https://huaweihg612hacking.wordpress.com/2012/11/07/jtaging-the-broadcom-bcm6368-hg612/" />
		<title level="m">Huawei HG612 hacking. Jtag&apos;ing the broadcom bcm6368 (hg612</title>
		<imprint>
			<date type="published" when="2012" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b46">
	<monogr>
				<ptr target="http://www.devttys0.com/2014/02/re-enabling-jtag-and-debugging-the-wrt120n" />
		<title level="m">Embedded Device Hacking. Re-enabling jtag and debugging the wrt120n</title>
		<imprint>
			<date type="published" when="2014" />
		</imprint>
	</monogr>
	<note>5 February</note>
</biblStruct>

<biblStruct xml:id="b47">
	<monogr>
		<title level="m" type="main">Jtag support for lantiq vgv7519 devices</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">The-Lizard</forename><surname>Dpeddi</surname></persName>
		</author>
		<ptr target="https://github.com/openwrt-vgv7519/lantiq-vgv7519-original-firmware" />
		<imprint>
			<date type="published" when="2014" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b48">
	<analytic>
		<title level="a" type="main">IEEE standard for test access port and boundary-scan architecture</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Lan/Man</forename><surname>Committee</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE Std</title>
		<imprint>
			<biblScope unit="volume">1149</biblScope>
			<biblScope unit="page" from="1" to="444" />
			<date type="published" when="2013-05" />
		</imprint>
	</monogr>
	<note>Revision of IEEE Std 1149.1-2001</note>
</biblStruct>

<biblStruct xml:id="b49">
	<monogr>
		<title level="m" type="main">Reverse engineering serial ports</title>
		<ptr target="http://www.devttys0.com/2012/11/reverse-engineering-serial-ports/" />
		<imprint>
			<date type="published" when="2012-11" />
		</imprint>
	</monogr>
	<note>Embedded Device Hacking</note>
</biblStruct>

<biblStruct xml:id="b50">
	<analytic>
		<title level="a" type="main">How to use the bus pirate as a logic analyzer</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Hendrik</forename><surname>Hanff</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the RIC Project Day Workgroups -Electronic Design and Mechatronic Design. RIC Project Day</title>
		<meeting>the RIC Project Day Workgroups -Electronic Design and Mechatronic Design. RIC Project Day<address><addrLine>Bremen, Germany</addrLine></address></meeting>
		<imprint>
			<date type="published" when="2014-07" />
		</imprint>
	</monogr>
	<note>DFKI Documents, D-14-05. DFKI Robotics Innovation Center Bremen</note>
</biblStruct>

<biblStruct xml:id="b51">
	<monogr>
		<title level="m" type="main">Rfc2898: Password-based cryptography specification version 2.0</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">B</forename><surname>Kaliski</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2000-09" />
		</imprint>
		<respStmt>
			<orgName>RSA Laboratories</orgName>
		</respStmt>
	</monogr>
<note type="report_type">Technical report</note>
</biblStruct>

<biblStruct xml:id="b52">
	<analytic>
		<title level="a" type="main">11 Working Group et al. Ieee standard for information technology-telecommunications and information exchange between systems-local and metropolitan area networks-specific requirements-part 11: Wireless lan medium access control (mac) and physical layer (phy) specifications amendment 6: Wireless access in vehicular environments</title>
	</analytic>
	<monogr>
		<title level="j">IEEE Std</title>
		<imprint>
			<biblScope unit="volume">802</biblScope>
			<biblScope unit="page">11</biblScope>
			<date type="published" when="2010" />
		</imprint>
	</monogr>
	<note>IEEE</note>
</biblStruct>

<biblStruct xml:id="b53">
	<monogr>
		<title level="m" type="main">Advanced encryption standard (AES). National Institute for Standards and Technology (NIST)</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Pub</forename><surname>Fips</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2001" />
			<biblScope unit="volume">197</biblScope>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b54">
	<monogr>
				<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Doug</forename><surname>Whiting</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Russell</forename><surname>Housley</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Niels</forename><surname>Ferguson</surname></persName>
		</author>
		<ptr target="http://tools.ietf.org/html/rfc3610" />
		<title level="m">Counter with CBC-MAC (CCM</title>
		<imprint>
			<date type="published" when="2003" />
			<biblScope unit="volume">3610</biblScope>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b55">
	<analytic>
		<title level="a" type="main">Recommendation for block cipher modes of operation: The CCM mode for authentication and confidentiality</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Morris</forename><surname>Dworkin</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">NIST Special publication (800-38C)</title>
		<imprint>
			<date type="published" when="2004" />
			<biblScope unit="volume">38</biblScope>
			<biblScope unit="page" from="1" to="27" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b56">
	<monogr>
		<title level="m" type="main">A taxonomy of computer attacks with applications to wireless networks</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Daniel Lowry</forename><surname>Lough</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2001" />
			<pubPlace>Virginia Tech</pubPlace>
		</imprint>
	</monogr>
<note type="report_type">PhD thesis</note>
</biblStruct>

<biblStruct xml:id="b57">
	<analytic>
		<title level="a" type="main">802.11 denial-ofservice attacks: Real vulnerabilities and practical solutions</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">John</forename><surname>Bellardo</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Stefan</forename><surname>Savage</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">12th USENIX Security Symposium (USENIX Security 2003)</title>
		<imprint>
			<date type="published" when="2003" />
			<biblScope unit="page">1527</biblScope>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b58">
	<monogr>
		<title level="m" type="main">Automated phishing attacks against wifi networks in order to obtain secret passphrases and other credential</title>
		<ptr target="https://github.com/sophron/wifiphisher" />
		<imprint>
			<date type="published" when="2015" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b59">
	<monogr>
		<title level="m" type="main">Mass-deauth script by rfkiller</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Rfkiller</surname></persName>
		</author>
		<ptr target="https://github.com/RFKiller/mass-deauth" />
		<imprint>
			<date type="published" when="2014" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b60">
	<monogr>
		<title level="m" type="main">Continuously jam all wifi clients and access points within range</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Dan</forename><surname>Mcinerney</surname></persName>
		</author>
		<ptr target="https://github.com/DanMcInerney/wifijammer" />
		<imprint>
			<date type="published" when="2015" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b61">
	<monogr>
		<title level="m" type="main">Tool for denial of service on wireless networks</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Aspj</surname></persName>
		</author>
		<ptr target="http://aspj.aircrack-ng.org/#mdk3" />
		<imprint>
			<date type="published" when="2008" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b62">
	<monogr>
		<title level="m" type="main">Wireless deauth attack using aireplay-ng, python, and scapy</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Jordan</forename></persName>
		</author>
		<ptr target="http://raidersec.blogspot.nl/2013/01/wireless-deauth-attack-using-aireplay.html" />
		<imprint>
			<date type="published" when="2013" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b63">
	<monogr>
		<title level="m" type="main">Cyber Security Labs. Deauthentication/disassociation attack</title>
		<imprint>
			<date type="published" when="2014" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b64">
	<monogr>
		<title level="m" type="main">Gnu/linux distribution for embedded devices</title>
		<ptr target="http://wiki.openwrt.org" />
		<imprint>
			<date type="published" when="2004-01" />
		</imprint>
	</monogr>
	<note>OpenWRT Wireless Freedom wiki</note>
</biblStruct>

<biblStruct xml:id="b65">
	<monogr>
				<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Nathan</forename><surname>Fain</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Jtagenum</surname></persName>
		</author>
		<title level="m">27c3: JTAG/Serial/FLASH/PCB Embedded Reverse Engineering Tools and Techniques</title>
		<imprint>
			<date type="published" when="2010" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b66">
	<monogr>
		<title level="m" type="main">Grand Idea Studio</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Joe</forename><surname>Grand</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Jtagulator</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2013" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b67">
	<monogr>
		<title level="m" type="main">Reversing the wrt120ns firmware obfuscation</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Craig</forename><surname>Heffner</surname></persName>
		</author>
		<ptr target="http://www.devttys0.com/2014/02/reversing-the-wrt120n-firmware-obfuscation" />
		<imprint>
			<date type="published" when="2014" />
			<pubPlace>February</pubPlace>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b68">
	<analytic>
		<title level="a" type="main">Don&apos;t trust satellite phones: A security analysis of two satphone standards</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Ralf</forename><surname>Benedikt Driessen</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Carsten</forename><surname>Hund</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Carsten</forename><surname>Willems</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Thorsten</forename><surname>Paar</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Holz</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">33rd IEEE Symposium on Security and Privacy (S&amp;P 2012)</title>
		<imprint>
			<publisher>IEEE Computer Society</publisher>
			<date type="published" when="2012" />
			<biblScope unit="page" from="128" to="142" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b69">
	<analytic>
		<title level="a" type="main">Dismantling megamos crypto: Wirelessly lockpicking a vehicle immobilizer</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Roel</forename><surname>Verdult</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Flavio</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Barıs¸egebarıs¸barıs¸ege</forename><surname>Garcia</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">22nd USENIX Security Symposium (USENIX Security 2013). USENIX Association</title>
		<imprint>
			<date type="published" when="2013" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b70">
	<analytic>
		<title level="a" type="main">When reverseengineering meets side-channel analysis-digital lockpicking in practice</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">David</forename><surname>Oswald</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Daehyun</forename><surname>Strobel</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Falk</forename><surname>Schellenberg</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Timo</forename><surname>Kasper</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Christof</forename><surname>Paar</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">20th International Conference on Selected Areas in Cryptography (SAC 2013)</title>
		<imprint>
			<publisher>Springer-Verlag</publisher>
			<date type="published" when="2013" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b71">
	<analytic>
		<title level="a" type="main">Fuming acid and cryptanalysis: Handy tools for overcoming a digital locking and access control system</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Daehyun</forename><surname>Strobel</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Benedikt</forename><surname>Driessen</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Timo</forename><surname>Kasper</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Gregor</forename><surname>Leander</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">David</forename><surname>Oswald</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Falk</forename><surname>Schellenberg</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Christof</forename><surname>Paar</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">33rd International Cryptology Conference</title>
		<imprint>
			<publisher>Springer-Verlag</publisher>
			<date type="published" when="2013" />
			<biblScope unit="volume">8042</biblScope>
			<biblScope unit="page" from="147" to="164" />
		</imprint>
	</monogr>
	<note>Advances in Cryptology (CRYPTO 2013)</note>
</biblStruct>

<biblStruct xml:id="b72">
	<analytic>
		<title level="a" type="main">Security analysis of a widely deployed locking system</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Michael</forename><surname>Weiner</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Maurice</forename><surname>Massar</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Erik</forename><surname>Tews</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Dennis</forename><surname>Giese</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Wolfgang</forename><surname>Wieser</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">20th ACM Conference on Computer and Communications Security (CCS 2013)</title>
		<imprint>
			<publisher>ACM</publisher>
			<date type="published" when="2013" />
			<biblScope unit="page" from="929" to="940" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b73">
	<analytic>
		<title/>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Flavio</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Gerhard</forename><surname>Garcia</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>De Koning</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Roel</forename><surname>Gans</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Verdult</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Wirelessly lockpicking a smart card reader. International Journal of Information Security</title>
		<imprint>
			<biblScope unit="volume">13</biblScope>
			<biblScope unit="issue">5</biblScope>
			<biblScope unit="page" from="403" to="420" />
			<date type="published" when="2014" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b74">
	<monogr>
		<title level="m" type="main">The (in)security of proprietary cryptography</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Roel</forename><surname>Verdult</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2015-04" />
			<pubPlace>Belgium</pubPlace>
		</imprint>
		<respStmt>
			<orgName>Radboud University, The Netherlands and KU Leuven</orgName>
		</respStmt>
	</monogr>
<note type="report_type">PhD thesis</note>
</biblStruct>

<biblStruct xml:id="b75">
	<analytic>
		<title level="a" type="main">Return-oriented programming: Exploits without code injection</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Hovav</forename><surname>Shacham</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Buchanan</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Roemer</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Savage</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Black Hat USA Briefings</title>
		<imprint>
			<date type="published" when="2008-08" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b76">
	<analytic>
		<title level="a" type="main">Password security: A case history</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Robert</forename><surname>Morris</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Ken</forename><surname>Thompson</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Communications of the ACM</title>
		<imprint>
			<biblScope unit="volume">22</biblScope>
			<biblScope unit="issue">11</biblScope>
			<biblScope unit="page" from="594" to="597" />
			<date type="published" when="1979" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b77">
	<analytic>
		<title level="a" type="main">Reducing risks from poorly chosen keys</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><surname>Lomas</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Li</forename><surname>Gong</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Saltzer</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Needhamn</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">ACM SIGOPS Operating Systems Review</title>
		<imprint>
			<biblScope unit="volume">23</biblScope>
			<biblScope unit="issue">5</biblScope>
			<biblScope unit="page" from="14" to="18" />
			<date type="published" when="1989" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b78">
	<analytic>
		<title level="a" type="main">A statistical test suite for the validation of random number generators and pseudo random number generators for cryptographic applications</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Andrew</forename><surname>Rukhin</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Juan</forename><surname>Soto</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">James</forename><surname>Nechvatal</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Miles</forename><surname>Smid</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Elaine</forename><surname>Barker</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Stefan</forename><surname>Leigh</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Mark</forename><surname>Levenson</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Mark</forename><surname>Vangel</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">David</forename><surname>Banks</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Alan</forename><surname>Heckert</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">James</forename><surname>Dray</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">San</forename><surname>Vo</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">NIST Special Publication</title>
		<imprint>
			<biblScope unit="volume">22</biblScope>
			<biblScope unit="page" from="1" to="152" />
			<date type="published" when="2001" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b79">
	<monogr>
		<title level="m" type="main">Responsible vulnerability disclosure process</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Steve</forename><surname>Christey</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Chris</forename><surname>Wysopal</surname></persName>
		</author>
		<ptr target="http://tools.ietf.org/html/draft-christey-wysopal-vuln-disclosure-00" />
		<imprint>
			<date type="published" when="2002" />
		</imprint>
	</monogr>
	<note>RFC draft</note>
</biblStruct>

				</listBibl>
			</div>
		</back>
	</text>
</TEI>
