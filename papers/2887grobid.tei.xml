<?xml version="1.0" encoding="UTF-8"?>
<TEI xmlns="http://www.tei-c.org/ns/1.0" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
xsi:schemaLocation="http://www.tei-c.org/ns/1.0 /Users/atharsefid/Desktop/grobid-0.5.3/grobid-home/schemas/xsd/Grobid.xsd"
 xmlns:xlink="http://www.w3.org/1999/xlink">
	<teiHeader xml:lang="en">
		<encodingDesc>
			<appInfo>
				<application version="0.5.3" ident="GROBID" when="2020-09-29T02:54+0000">
					<ref target="https://github.com/kermitt2/grobid">GROBID - A machine learning software for extracting information from scholarly documents</ref>
				</application>
			</appInfo>
		</encodingDesc>
		<fileDesc>
			<titleStmt>
				<title level="a" type="main">The Implications of Shared Data Synchronization Techniques on Multi-Core Energy Efficiency</title>
			</titleStmt>
			<publicationStmt>
				<publisher/>
				<availability status="unknown"><licence/></availability>
			</publicationStmt>
			<sourceDesc>
				<biblStruct>
					<analytic>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Ashok</forename><surname>Gautham</surname></persName>
							<affiliation key="aff0">
								<orgName type="department">Department of Computer Science and Engineering</orgName>
								<orgName type="institution">IIT Madras</orgName>
							</affiliation>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Kunal</forename><surname>Korgaonkar</surname></persName>
							<affiliation key="aff0">
								<orgName type="department">Department of Computer Science and Engineering</orgName>
								<orgName type="institution">IIT Madras</orgName>
							</affiliation>
							<affiliation key="aff1">
								<orgName type="laboratory">IBM Research Lab</orgName>
								<address>
									<settlement>Bangalore</settlement>
									<country key="IN">India</country>
								</address>
							</affiliation>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Patanjali</forename><surname>Slpsk</surname></persName>
							<affiliation key="aff0">
								<orgName type="department">Department of Computer Science and Engineering</orgName>
								<orgName type="institution">IIT Madras</orgName>
							</affiliation>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Shankar</forename><surname>Balachandran</surname></persName>
							<affiliation key="aff0">
								<orgName type="department">Department of Computer Science and Engineering</orgName>
								<orgName type="institution">IIT Madras</orgName>
							</affiliation>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Kamakoti</forename><surname>Veezhinathan</surname></persName>
							<affiliation key="aff0">
								<orgName type="department">Department of Computer Science and Engineering</orgName>
								<orgName type="institution">IIT Madras</orgName>
							</affiliation>
						</author>
						<title level="a" type="main">The Implications of Shared Data Synchronization Techniques on Multi-Core Energy Efficiency</title>
					</analytic>
					<monogr>
						<imprint>
							<date/>
						</imprint>
					</monogr>
				</biblStruct>
			</sourceDesc>
		</fileDesc>
		<profileDesc>
			<abstract>
				<p>Shared data synchronization is at the heart of the multi-core revolution since it is essential for writing concurrent programs. Ideally, a synchronization technique should be able to fully exploit the available cores, leading to improved performance. However, with the growing demand for energy-efficient systems, it also needs to work within the energy and power budget of the system. In this paper, we perform a detailed study of the performance as well as energy efficiency of popular shared-data synchronization techniques on a commodity multi-core processor. We show that Software Transactional Memory (STM) systems can perform better than locks for workloads where a significant portion of the running time is spent in the critical sections. We also show how power-conserving techniques available on modern processors like C-states and clock frequency scaling impact energy consumption and performance. Finally, we compare the performance of STMs and locks under similar power budgets.</p>
			</abstract>
		</profileDesc>
	</teiHeader>
	<text xml:lang="en">
		<body>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="1">Introduction</head><p>Prior to the multi-core era, every new processor generation speeded up sequential programs. With the introduction of mulct-core systems, it became necessary to make programs multi-threaded to take advantage of the cores. When multiple threads are in flight, one needs to use synchronization techniques to coordinate data access. Traditional synchronization techniques like spinlocks and mutexes introduce wasteful and idle cycles respectively while attempting to acquire the lock. If no other workload can fill up these idle cycles, then this may result in core under-utilization. Ideally, programmers can use fine-grained locks to reduce the number of wasted cycles and achieve highly concurrent systems but they have to be vigilant to ensure that they have not introduced any deadlocks. Furthermore, correctness of fine-grained lock based programs is hard to guarantee. Coarse-grained locks on the other hand are easy to program and reason about, but they form a bottleneck in exploiting the parallelism available.</p><p>While locks have been used for decades, research in synchronization has resulted in the development of Transactional Memory (TM). Software Transactional Memory <ref type="bibr" target="#b9">[10]</ref> provides an easy-to-use abstraction for writing correct multi-threaded programs. Also, it is optimistic in nature and is thus able to exploit non-explicit parallelism available in programs. However, for low thread counts, the overhead associated with TM might lower the benefits obtained from using it <ref type="bibr" target="#b0">1</ref> . For higher thread counts, the scalability and speedup obtained from STMs compensate for this overhead as demonstrated later in this paper.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2">Motivation</head><p>The race in the current mainstream processor market is no longer just for performance, but also for increased energy efficiency. Occurrence of a high percentage of wasteful or idle CPU cycles indicates under-utilization of the core. When a system's total energy/power budget is kept under perspective, wasted cycles can in turn lead to wastage of energy. Esmaeilzadeh et. al <ref type="bibr" target="#b1">[2]</ref> indicates that though more cores will be available in newer processors, power constraints will limit the extent to which they can be used. Moreover, the two largest consumers of processors -data centers and battery-operated mobile devices -demand energy efficient systems. A prioritization of efforts towards achieving multi-core energy efficiency is thus the order of the day.</p><p>In the era of multi-cores, the synchronization technique should ideally: (i) Exploit the hardware parallelism only if it leads to improved performance for the additional energy expenditure; (ii) Enable the workload to conserve energy whenever possible without severely impacting performance. The choice of synchronization technique is therefore crucial for multi-core systems.</p><p>Given that there is no "one-size-fits-all" solution for energy-efficient concurrent systems, a detailed study of energy characteristics of workloads is necessary to understand which technique would be better for a given application. In this paper, we explore the following synchronization techniques to find an ideal solution for synchronization intensive workloads: i) Spinlock ii) Mutex iii) Software Transactional Memory.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.1">Contributions of this Paper</head><p>• To our best knowledge, this is the first paper to evaluate the energy-efficiency of STMs on a real-world commodity multi-core with a full-fledged OS.</p><p>• The results indicate that STMs can in fact be more time and energy efficient than locks for workloads that spend significant time inside critical sections. This is in contrast to previously reported results <ref type="bibr" target="#b3">[4]</ref>.</p><p>• It is also the first paper to explore the impact of power-saving techniques in modern multi-cores like C-states and CPU frequency scaling on synchronization techniques using commodity hardware.</p><p>• It also explores the possibility of trading a small fraction of performance for larger reduction in power consumption of STMs.</p><p>The choice of commodity hardware and software was to improve the immediate practical applicability of the results. Also, since the values obtained are on real hardware, the shortcomings of simulation-based approaches are avoided.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.2">Evaluation Metrics</head><p>We evaluate the synchronization techniques based on the following metrics which have been chosen carefully to express energy, power and timing characteristics exhibited by the workloads. Time or Delay: Time taken for the workload to complete. Energy Delay Product: Product of the time spent by the application and the energy expended while running. Performance per Watt: Number of transactions (critical sections) processed per second for 1 Watt of power. The values obtained for PPW cannot be directly compared across benchmarks since the length of critical sections in different benchmark applications differ.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3">Related Work</head><p>Moreshet et. al <ref type="bibr" target="#b6">[7]</ref> were the first to compare the energy efficiency of transactional memory-based and lock-based programs. Experiments were carried out on a Simicsbased model of a HTM. While all analysis was done on a rather simple shared-array micro-benchmark, it showed that transactional memory based systems have the capability to outperform locks by a factor of more than 5x in terms of energy. Similar conclusions were drawn in <ref type="bibr" target="#b7">[8]</ref> where the SPLASH-2 benchmark suite was used.</p><p>Klein et. al <ref type="bibr" target="#b3">[4]</ref> studied the performance of Software Transactional Memory systems against that of locks for the more recent STAMP <ref type="bibr" target="#b5">[6]</ref> benchmark suite on an MPSoC based simulated system. In this setup, locks are implemented as spinlocks and compare-and-swap is implemented using semaphores. Furthermore, the system does not include an OS. To compensate for not being able to deschedule the lock, the authors deduct the energy consumed by the lock while spinning. Given these assumptions, the authors show that STMs can be up to 22x less energy-efficient than locks. However, the interactions between the OS and the application cannot be ignored as highlighted by Liu <ref type="bibr" target="#b4">[5]</ref>.</p><p>To our best knowledge, no previous work has compared energy efficiency of classical synchronization techniques (like locks) with STMs when run on real hardware.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4">Experimental Methodology</head><p>We ran the benchmark applications in STAMP on Intel's Core i7-2600 CPU. As STAMP ships only with STM and sequential modes of execution, we ported it to run using spinlocks with an exponential back-off and pthread mutex. Further, the benchmark applications were annotated to read from the RAPL <ref type="bibr" target="#b0">[1]</ref> energy counters at the start and end of the region of interest. This allows exclusion of energy consumed by the setup and verification times of the algorithm from the reported values. All experiments were run for 8 threads (pinned to corresponding logical cores). Linux's default CFS process scheduler and menu cpuidle governor were used for all experiments. RAPL: Running Average Power Limit (or RAPL) counters introduced in <ref type="bibr" target="#b0">[1]</ref> are available in processors based on Intel's Sandy Bridge micro-architecture. These counters allow us to get accurate energy consumption statistics of the processor package from an on-board controller. Intel specifies that these counters are updated every 1ms. Hahnel <ref type="bibr" target="#b2">[3]</ref> and Rotem <ref type="bibr" target="#b8">[9]</ref> further demonstrate that these counters match external measurements. As DRAM energy isn't measured in the processor we used, we crossvalidated our results using external power measurement. Choice of STM: RSTM [11] (version 7) was chosen as the STM framework since it is very configurable and allows broader exploration on the STM algorithm front. The Swiss algorithm that uses eager locking, redo-logs and mixed invalidation is used as the algorithm of choice since it was experimentally determined to be competitive.</p><p>Choice of Benchmark Suite: STAMP [6] is a synchronization-intensive benchmark suite that has a mix of applications from various domains like machine learning, data mining and online transaction processing . It proves to be an excellent choice for our analysis since it consists of a wide variety of applications, in terms of the percentage of time spent by them in critical sections (T crit ) which ranges from less than 5%, to close to 100% <ref type="bibr" target="#b5">[6]</ref>(only indicative -may vary based on technique). For example, the vacation benchmark application models an online transaction processing system (similar to specjbb2000) spends close to 90% time in critical section while K-Means from data mining spends only 2% time in it. STAMP applications also use nonlinear data structures like trees. Usage of fine-grained locks for such data structures is complicated <ref type="bibr" target="#b5">[6]</ref>. Coarse grained locks and TM are therefore the only viable options for parallelization.</p><p>Choice of Hardware Platform: An Intel Core i7-2600 CPU was used for all experiments. This system is based on Sandy Bridge microarchitecture. It has 4 physical cores and uses Intel's HyperThreading technology -effectively providing 8 parallel hardware threads of execution. The processor has the capability of running at several frequency levels between 1.6 GHz and 3.4 GHz. The processors supports 3 low-power idle states (C1, C3 and C6). Each core can independently be at any of these states or the active C0 state. All experiments were run on a 64-bit system running Linux kernel 3.2.0.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5">Results</head><p>From <ref type="table" target="#tab_0">Table 1</ref>, one can see that neither spinlocks nor mutexes perform well for most applications. For some benchmarks, the lock-based programs show a slowdown when compared to even the sequential implementation. Further, STMs perform well in all metrics. For the vacation benchmark under high-contention, there is a 224% speedup over spinlocks and a 653% reduction in EDP over mutex locks. Also, there is a 213% improvement in PPW over Mutex. Though STM and sequential implementations have comparable PPW, STM is almost 3 times faster than its sequential counterpart and also has a superior EDP.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5.1">Analysis</head><p>Performance of the sequential implementation : The EDP of the sequential implementation is competitive for several benchmarks though the performance is poor.</p><p>Since sequential programs run only on one core, the other cores are in deep sleep (C6 state) and thus consume very little power. Therefore, even though the workload takes longer to run, the instantaneous PPW is quite high. Performance of the lock-based implementations: We used both spin-locks and mutexes since they represent a performance-power tradeoff. Spinlocks consume more power because of the busy-wait, while mutexes experience a slowdown because of OS-initiated scheduling and descheduling of threads. Locks outperform sequential programs only in 3 of the 7 applications presented. To understand why the spinlocks behave badly for most of the workloads, the spinlock based genome was profiled using the perf utility. As expected, there was no spinning in the 1-threaded case. </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>of Threads vs Energy -Genome</head><p>In the 2-threaded case, close to 40% of the time was spent in spinning. This further rose to 70% for 4-threads and 84% when run with 8 threads.</p><p>The behaviour of the mutex can be explained by the user and system times of the applications run. The system time indicates the time spent in the OS which we believe is a good indicator of the application-OS interactions. As the number of threads increases, the system time increases rapidly for mutex-based implementations. For example, in the 1-threaded case the system time for genome is 0.372 seconds. However, this time rises to 1.2 for the 2-threaded case, 1.8 for 4-threaded case and 4.02 seconds for the 8-threaded case. This is in spite of the overall wall clock time remaining fairly consistent across thread count.</p><p>The K-Means benchmark spends a small portion of its time in the critical section. This results in a contrary trend for K-Means. It is the only benchmark where lock-based programs perform better than STMs. Also, because of the large portion of code where all threads can run freely without needing synchronization, there is a significant speedup obtained by using any multithreading technique. Performance of STM-based implementations The table also indicates that for most benchmarks, STMs perform the best with respect to performance and overall energy consumed. This can be attributed to ability of STMs to exploit disjoint access parallelism that may not be explicitly annotated in the program. Further, since the number of threads is 8, the initial overhead of STMs is compensated for by the additional parallelism exploited. For Yada, STMs show better performance but still do worse than sequential with respect to energy. This can be attributed to the CPU idle states that can be exploited by sequential programs for the inactive cores. This shows that better performance alone is not indicative of better energy efficiency further motivating study of energyefficiency in its own right.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="6">Other Analysis</head></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="6.1">Scaling with number of threads</head><p>Figures 1 and 2 show how the performance of the genome benchmark scales with respect to the number of threads. Though the overhead of STM makes it slower for the single threaded case, it scales better as more threads are added. The spinlock and mutex are unable to utilize the extra parallelism available. Due to optimistic execution, STM is able to exploit disjoint access parallelism, which is unavailable in case of lock based systems. Further, even though the performance of mutex and spinlocks get better when compared to sequential, their energy efficiency becomes much worse than sequential as thread count increases because of the additional cores in operation. CPU frequency governors enable lowering CPU frequencies when there are idle cycles, effectively reducing the application's energy wastage. Performance and powersave are non-adaptive governors that always run the processor at the highest and the lowest available frequencies respectively. Adaptive CPU Frequency governors like ondemand and conservative dynamically changes the clock frequency of the core based on the uti- Figure 3: STM Performance-Energy trade-off lization levels. Adaptive governors are more beneficial to mutex locks than to spinlocks or STMs. This is because mutex lock have a lot of idle cycles unlike spinlocks or STM. The impact of governors on mutex lock's performance is shown in <ref type="table" target="#tab_1">Table 2</ref>. STMs hardly have idle cycles since the execution is optimistic. For STMs, both adaptive algorithms considered converge at the highest possible frequency and thereby have very little impact on the energy consumption of the application.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="6.2">Impact of CPU frequency scaling governors</head></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="6.3">Trading off Performance for Energy</head><p>Though STMs have a better PPW than lock-based implementations in the benchmarks considered, high CPU utilization also translate into higher average and peak power consumption. Considering this disparity between STM and mutex lock, we need to compare STM and mutex on a common ground. For this, we use equi-watt comparison where we compare performance of STM with the performance of mutex lock at the same wattage. We achieve this by lowering the CPU clock frequency of the cores for STM runs such that the respective average power consumption values matches that of the mutexbased implementation. <ref type="table" target="#tab_3">Table 3</ref> lists the average and peak power numbers for STM and mutex for different clock frequencies for the genome benchmark application. <ref type="figure">Fig- ure 3</ref> shows the smoothed run time power consumption for STM and mutex running at full clock frequency and STM running at a lower clock frequency where its power consumption is roughly equal to that of the mutex-based implementation. We notice that even after reducing the clock frequencies the performance of STM is still over 3 times faster than the mutex implementation, without any increase in power for genome.  </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="7">Future Directions</head><p>This paper carries out a preliminary analysis of the energy efficiency of synchronization techniques on the STAMP benchmark applications. However, STAMP does not contain transactions that have irrevocable operations like I/O which may have different performance characteristics. Other benchmarks like RMSTM need to be explored for this. Techniques like speculative lock elision that remove the bottlenecks associated with coarse grained locks too need to be accounted for.</p></div><figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_0"><head>Figure 2 :</head><label>2</label><figDesc>Figure 1: No. of Threads vs Time -Genome</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_0" validated="true"><head>Table 1 : Comparison of Sequential, Mutex, SpinLock and Swiss implementations</head><label>1</label><figDesc></figDesc><table>bayes 
genome 
K-Means 
KMeans 
Vacation 
Vacation 
intruder 
ssca2 
yada 
High 
Low 
High 
Low 

%T crit 

83% 
97% 
7% 
3% 
86% 
86% 
33% 
17% 
100% 

Time(s) 
Seq 
22.08 
6.46 
1.68 
10.35 
16.31 
12.4 
14.61 
11.99 
6.76 
Mutex 
23.43 
6.04 
0.78 
2.55 
19.71 
15.36 
20.22 
15.33 
8.3 
Spinlock 
25.47 
5.55 
0.47 
2.53 
18.12 
13.49 
15.87 
9.98 
9.58 
STM 
17.38 
1.57 
0.91 
3.97 
5.59 
3.99 
6.49 
7.57 
4.16 

EDP(Js) 
Seq 
9452.23 
697.42 
53.47 
1945.68 
4377.48 
2492.29 
3428.81 
2420.88 
881.93 
Mutex 
10258.45 
1285.23 
35.6 
407.38 
12559.96 
7906.66 
14642.84 
9555.71 
2097.92 
Spinlock 
20285.58 
1232.16 
13.31 
414.53 
14051.22 
7786.22 
10882.99 
2980.57 
4010.67 
STM 
6570.45 
118.15 
51.74 
1021.13 
1667.24 
850.92 
2146.31 
1522.57 
975.26 

PPW(Txns/s/W) 
Seq 
4.64 
23071.7 
129264.36 
60380.18 
15623.07 
20865.19 
99816.52 
110747.75 
20353.3 
Mutex 
4.53 
11692.83 
90169.26 
52525.35 
6580.49 
8146.44 
32358.79 
35878.25 
10504.47 
Spinlock 
2.49 
11216.91 
145951.63 
61732.97 
5408.19 
7264.56 
34165.89 
74848.77 
6344.28 
STM 
24.3 
33180.97 
72069.23 
38357.32 
14064.76 
19668.78 
70801.15 
111216.09 
11325.49 

</table></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_1" validated="false"><head>Table 2 :</head><label>2</label><figDesc></figDesc><table>Impact of CPU frequency scaling governors on 
Mutex 
Governor 
E 
EDP 
PPW 

Performance 142.8 699.1 17429.2 
Ondemand 
141.8 792.3 17550.8 
Conservative 130.7 1210.1 19034.2 
Powersave 
127.9 1299.4 19457.9 

</table></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_3" validated="false"><head>Table 3 :</head><label>3</label><figDesc></figDesc><table>Clock frequency vs Peak and Average Power 

</table></figure>

			<note place="foot" n="1"> Hardware transactional memory (HTM) can lower this overhead. We use STMs for our analysis since a full-fledged HTM isn&apos;t available on commodity hardware, though there are several research prototypes.</note>
		</body>
		<back>
			<div type="references">

				<listBibl>

<biblStruct xml:id="b0">
	<analytic>
		<title level="a" type="main">RAPL: Memory power estimation and capping</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">David</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">H</forename><surname>Gorbatov</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">E</forename><surname>Hanebutte</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">U</forename><forename type="middle">R</forename><surname>Khanna</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>And</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">L</forename><forename type="middle">E</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings ofISLPED &apos;10</title>
		<meeting>ISLPED &apos;10</meeting>
		<imprint>
			<publisher>ACM</publisher>
			<date type="published" when="2010" />
			<biblScope unit="page" from="189" to="194" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b1">
	<analytic>
		<title level="a" type="main">Dark silicon and the end of multicore scaling</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Esmaeilzadeh</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">H</forename><surname>Blem</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">E</forename><surname>St</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Amant</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">K</forename><surname>Sankaralingam</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Burger</forename><surname>And</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">SIGARCH Computer Architecture News</title>
		<imprint>
			<biblScope unit="volume">39</biblScope>
			<biblScope unit="issue">3</biblScope>
			<biblScope unit="page" from="365" to="376" />
			<date type="published" when="2011-06" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b2">
	<analytic>
		<title level="a" type="main">Measuring Energy Consumption for Short Code Paths Using RAPL</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Hahnel</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Dobel</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">B</forename><surname>Volp</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>And</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Hartig</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">H</forename></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of GREENMETRICS&apos;12</title>
		<meeting>GREENMETRICS&apos;12</meeting>
		<imprint>
			<date type="published" when="2012" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b3">
	<analytic>
		<title level="a" type="main">STM versus Lock-Based Systems: An Energy Consumption Perspective</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Klein</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">F</forename><surname>Baldassin</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Moreira</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Centoducatte</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><surname>Rigo</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>And</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Azevedo</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of ISLPED &apos;10</title>
		<meeting>ISLPED &apos;10</meeting>
		<imprint>
			<publisher>ACM</publisher>
			<date type="published" when="2010" />
			<biblScope unit="page" from="431" to="436" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b4">
	<analytic>
		<title level="a" type="main">Energy-efficient synchronization through program patterns</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Liu</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Y</forename></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Green and Sustainable Software (GREENS), 2012 First International Workshop on</title>
		<imprint>
			<date type="published" when="2012-06" />
			<biblScope unit="page" from="35" to="40" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b5">
	<analytic>
		<title level="a" type="main">STAMP: Stanford Transactional Applications for Multi-Processing</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Minh</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><forename type="middle">C</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Chung</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Kozyrakis</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><surname>And</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Olukotun</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">K</forename></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of IISWC&apos;08</title>
		<meeting>IISWC&apos;08</meeting>
		<imprint>
			<date type="published" when="2008" />
			<biblScope unit="page" from="35" to="46" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b6">
	<analytic>
		<title level="a" type="main">Energy reduction in multiprocessor systems using transactional memory</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Moreshet</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><surname>Bahar</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><forename type="middle">I</forename><surname>And</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Herlihy</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of ISLPED &apos;05</title>
		<meeting>ISLPED &apos;05</meeting>
		<imprint>
			<publisher>ACM</publisher>
			<date type="published" when="2005" />
			<biblScope unit="page" from="331" to="334" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b7">
	<monogr>
		<title level="m" type="main">Energy-aware microprocessor synchronization: Transactional memory vs. locks</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Moreshet</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><surname>Bahar</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><forename type="middle">I</forename><surname>And</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Herlihy</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename></persName>
		</author>
		<imprint>
			<date type="published" when="2006" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b8">
	<analytic>
		<title level="a" type="main">Power-Management Architecture of the Intel Microarchitecture Code-Named Sandy Bridge</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Rotem</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">E</forename><surname>Naveh</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Ananthakrishnan</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Weissmann</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">E</forename><surname>And</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Rajwan</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE Micro</title>
		<imprint>
			<biblScope unit="volume">32</biblScope>
			<biblScope unit="page" from="20" to="27" />
			<date type="published" when="2012" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b9">
	<analytic>
		<title level="a" type="main">Software transactional memory</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Shavit</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">N</forename><surname>And</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Touitou</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 14th Annual ACM Symposium on Principles of Distributed Computing</title>
		<meeting>the 14th Annual ACM Symposium on Principles of Distributed Computing</meeting>
		<imprint>
			<publisher>ACM</publisher>
			<date type="published" when="1995" />
			<biblScope unit="page" from="204" to="213" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b10">
	<analytic>
		<title level="a" type="main">A comprehensive strategy for contention management in software transactional memory</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><forename type="middle">F</forename><surname>Spear</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">L</forename><surname>Dalessandro</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">V</forename><forename type="middle">J</forename><surname>Marathe</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Scott</forename><surname>And</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><forename type="middle">L</forename></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the PPoPP&apos;09</title>
		<meeting>the PPoPP&apos;09</meeting>
		<imprint>
			<publisher>ACM</publisher>
			<date type="published" when="2009" />
			<biblScope unit="page" from="141" to="150" />
		</imprint>
	</monogr>
</biblStruct>

				</listBibl>
			</div>
		</back>
	</text>
</TEI>
