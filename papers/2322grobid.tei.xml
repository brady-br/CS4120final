<?xml version="1.0" encoding="UTF-8"?>
<TEI xmlns="http://www.tei-c.org/ns/1.0" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
xsi:schemaLocation="http://www.tei-c.org/ns/1.0 /Users/atharsefid/Desktop/grobid-0.5.3/grobid-home/schemas/xsd/Grobid.xsd"
 xmlns:xlink="http://www.w3.org/1999/xlink">
	<teiHeader xml:lang="en">
		<encodingDesc>
			<appInfo>
				<application version="0.5.3" ident="GROBID" when="2020-10-16T20:10+0000">
					<ref target="https://github.com/kermitt2/grobid">GROBID - A machine learning software for extracting information from scholarly documents</ref>
				</application>
			</appInfo>
		</encodingDesc>
		<fileDesc>
			<titleStmt>
				<title level="a" type="main">Arc-Hybrid Non-Projective Dependency Parsing with a Static-Dynamic Oracle</title>
			</titleStmt>
			<publicationStmt>
				<publisher/>
				<availability status="unknown"><licence/></availability>
				<date>September 20-22, 2017</date>
			</publicationStmt>
			<sourceDesc>
				<biblStruct>
					<analytic>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Miryam</forename><surname>De Lhoneux</surname></persName>
							<affiliation key="aff0">
								<orgName type="department">Department of Linguistics and Philology</orgName>
								<orgName type="institution">Uppsala University</orgName>
							</affiliation>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Sara</forename><surname>Stymne</surname></persName>
							<affiliation key="aff0">
								<orgName type="department">Department of Linguistics and Philology</orgName>
								<orgName type="institution">Uppsala University</orgName>
							</affiliation>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Joakim</forename><surname>Nivre</surname></persName>
							<affiliation key="aff0">
								<orgName type="department">Department of Linguistics and Philology</orgName>
								<orgName type="institution">Uppsala University</orgName>
							</affiliation>
						</author>
						<title level="a" type="main">Arc-Hybrid Non-Projective Dependency Parsing with a Static-Dynamic Oracle</title>
					</analytic>
					<monogr>
						<title level="m">Proceedings of the 15th International Conference on Parsing Technologies</title>
						<meeting>the 15th International Conference on Parsing Technologies <address><addrLine>Pisa, Italy</addrLine></address>
						</meeting>
						<imprint>
							<biblScope unit="page" from="99" to="104"/>
							<date type="published">September 20-22, 2017</date>
						</imprint>
					</monogr>
				</biblStruct>
			</sourceDesc>
		</fileDesc>
		<profileDesc>
			<abstract>
				<p>We extend the arc-hybrid transition system for dependency parsing with a SWAP transition that enables reordering of the words and construction of non-projective trees. Although this extension potentially breaks the arc-decomposability of the transition system, we show that the existing dynamic oracle can be modified and combined with a static oracle for the SWAP transition. Experiments on five languages with different degrees of non-projectivity show that the new system gives competitive accuracy and is significantly better than a system trained with a purely static oracle.</p>
			</abstract>
		</profileDesc>
	</teiHeader>
	<text xml:lang="en">
		<body>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="1">Introduction</head><p>Non-projective sentences are a notorious problem in dependency parsing. Traditional algorithms like those developed by <ref type="bibr" target="#b8">Nivre (2003</ref><ref type="bibr" target="#b9">Nivre ( , 2004</ref>) for transition-based parsing only allow the construction of projective trees. These algorithms make use of a stack, a buffer and a set of arcs, and parsing consists of performing a sequence of transitions on these structures. Traditional algorithms have been extended in different ways to allow the construction of non-projective trees <ref type="bibr" target="#b15">(Nivre and Nilsson, 2005;</ref><ref type="bibr" target="#b0">Attardi, 2006;</ref><ref type="bibr" target="#b10">Nivre, 2007;</ref><ref type="bibr" target="#b5">Gómez-Rodríguez and Nivre, 2010)</ref>. One method proposed by <ref type="bibr" target="#b11">Nivre (2009)</ref> is based on the idea of word reordering. This is achieved by adding a transition that swaps two items in the data structures used, enabling the construction of arbitrary non-projective trees while still only adding arcs between adjacent words (after possible reordering). This technique was previously used in the arc-standard transition system <ref type="bibr" target="#b9">(Nivre, 2004</ref>). The first contribution of this paper is to show that it can also be combined with the arc-hybrid system proposed by <ref type="bibr" target="#b7">Kuhlmann et al. (2011)</ref>.</p><p>Recent advances in dependency parsing have demonstrated the benefit of using dynamic oracles for training dependency parsers <ref type="bibr" target="#b3">(Goldberg and Nivre, 2013)</ref>. Traditionally, parsers were trained in a static way and were only exposed to configurations resulting from optimal transitions during training. Dynamic oracles define optimal transition sequences for any configuration in which the parser may be. The use of dynamic oracles enables training with exploration of errors, which mitigates the problem of error propagation at prediction time.</p><p>In order to define a dynamic oracle, we need to be able to compute the cost of any transition in any configuration, where cost is usually defined as minimum Hamming loss with respect to the best tree reachable from that configuration. <ref type="bibr" target="#b3">Goldberg and Nivre (2013)</ref> showed that this computation is straightforward for transition systems that satisfy the property of arc-decomposability, meaning that a tree is reachable from a configuration if and only if every arc in the tree is reachable in itself. Based on this result, they defined dynamic oracles for the arc-eager <ref type="bibr" target="#b8">(Nivre, 2003)</ref>, arc-hybrid ( <ref type="bibr" target="#b7">Kuhlmann et al., 2011</ref>) and easy-first ( <ref type="bibr" target="#b2">Goldberg and Elhadad, 2010</ref>) systems.</p><p>Transition systems that allow non-projective trees are in general not arc-decomposable and therefore require different methods for constructing dynamic oracles <ref type="bibr" target="#b4">(Gómez-Rodríguez and Fernández-González, 2015</ref>). The online reordering system of Nivre <ref type="formula">(2009)</ref> is furthermore based on the arc-standard system, which is not even arc-decomposable in itself ( <ref type="bibr" target="#b3">Goldberg and Nivre, 2013)</ref>. The second contribution of this paper is to show that we can take advantage of the arcdecomposability of the arc-hybrid transition system and extend the existing dynamic oracle to deal with the added swap transition. The resulting or-acle is static with respect to the new transition but remains dynamic for all other transitions. We show experimentally that this static-dynamic oracle gives a significant advantage over the alternative static oracle and results in competitive results for non-projective parsing.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2">An Extended Transition System</head><p>The arc-hybrid system has configurations of the form c = (Σ, B, A), where</p><p>• Σ is a stack (represented as a list with the head to the right),</p><p>• B is a buffer (represented as a list with the head to the left),</p><p>• A is a set of dependency arcs (represented as</p><formula xml:id="formula_0">(h, d) pairs). 1</formula><p>Given a sentence W = w 1 , . . . , w n , the system is initialized to:</p><formula xml:id="formula_1">c 0 = ([ ], [1, . . . , n, n+1], { })</formula><p>where n+1 is a special root node, denoted r from now on. Terminal configurations have the form:</p><formula xml:id="formula_2">c = ([ ], [r], A)</formula><p>and the parse tree is given by the arc set A.</p><p>The original arc-hybrid system from Kuhlmann et al. (2011) has three transitions: 2</p><formula xml:id="formula_3">• LEFT[(σ|s 0 , b|β, A)] = (σ, b|β, A ∪ {(b, s 0 )}) • RIGHT[(σ|s 1 |s 0 , β, A)] = (σ|s 1 , β, A ∪ {(s 1 , s 0 )}) • SHIFT[(σ, b|β, A)] = (σ|b, β, A)</formula><p>There are preconditions such that SHIFT is legal only if b = r, RIGHT only if |Σ| &gt; 1 and LEFT only if |Σ| &gt; 0. In order to enforce that r has exactly one dependent, as required by some dependency grammar frameworks, we add a precondition such that LEFT is legal only if |Σ| = 1 or b = r.</p><p>In the extended system, we add a SWAP transition to be able to construct non-projective trees using online reordering:</p><formula xml:id="formula_4">• SWAP[(σ|s 0 , b|β, A)] = (σ, b|s 0 |β, A)</formula><p>There is a precondition making SWAP legal only if |Σ| &gt; 0, |B| &gt; 1 and s 0 &lt; b. <ref type="bibr">3</ref> The SWAP transition reorders nodes by moving the item on top of the stack (s 0 ) to the second position in the buffer, thus inverting the order of s 0 and b. The SHIFT and SWAP transitions together implement a simple sorting algorithm, which allows us to permute the order of nodes arbitrarily. As shown by <ref type="bibr" target="#b11">(Nivre, 2009)</ref>, this implies that we can construct any non-projective tree by reordering and adding arcs between adjacent nodes using LEFT and RIGHT.</p><p>As already observed, the main advantage of the arc-hybrid system over the arc-standard system is that it is arc-decomposable, which allows us to construct a simple and efficient dynamic oracle. The arc-eager system <ref type="bibr" target="#b8">(Nivre, 2003</ref>) is also arcdecomposable but cannot be combined with SWAP because items on the stack in that system do not necessarily represent disjoint subtrees.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3">A Static-Dynamic Oracle</head><p>The dynamic oracle for arc-hybrid parsing defined by <ref type="bibr" target="#b3">Goldberg and Nivre (2013)</ref> computes the cost of a transition by counting the number of gold arcs that are made unreachable by applying that transition. This presupposes that the system is arcdecomposable, a result that is proven in the same paper. Our construction of an oracle for arc-hybrid parsing with online ordering is based on the conjecture that we can retain arc-decomposition by only making SWAP transitions that are necessary to make non-projective arcs reachable and by enforcing all such transitions. Proving this conjecture is, however, outside the scope of this paper.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.1">Auxiliary Functions and Notation</head><p>We assume that gold trees are preprocessed at training time to compute the following information for each input node i:</p><p>• PROJ(i) = the position of node i in the projective order. 4</p><p>• RDEPS(i) = the set of reachable dependents of i, initially all dependents of i.</p><p>• LEFT:</p><formula xml:id="formula_5">C(LEFT) = |RDEPS(s 0 )| + [[h(s 0 ) = b and s 0 ∈ RDEPS(h(s 0 ))]]</formula><p>Updates: Set RDEPS(s 0 ) = [ ] and remove s 0 from RDEPS(h(s 0 )).</p><p>• RIGHT:</p><formula xml:id="formula_6">C(RIGHT) = |RDEPS(s 0 )| + [[h(s 0 ) = s 1 and s 0 ∈ RDEPS(h(s 0 ))]]</formula><p>Updates: Set RDEPS(s 0 ) = [ ] and remove s 0 from RDEPS(h(s 0 )).</p><p>• SHIFT:</p><p>1. If there exists a node i ∈ B −b such that b &lt; i and PROJ(b) &gt; PROJ(i):</p><p>C(SHIFT) = 0 2. Else:  We use h(i) to denote the head of a node i in the gold tree.</p><formula xml:id="formula_7">C(SHIFT) = |{d ∈ RDEPS(b) | d ∈ Σ}| + [[h(b) ∈ Σ −s 0 and b ∈ RDEPS(h(b))]] Updates: Remove b from RDEPS(h(b)) if h(b) ∈ Σ −</formula></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.2">Static Oracle for SWAP</head><p>Our oracle is fully dynamic with respect to SHIFT, LEFT and RIGHT but basically static with respect to SWAP. This means that only optimal (zero cost) SWAP transitions are allowed during training and that we force the parser to apply the SWAP transition when needed.</p><p>Optimal: To prevent non-optimal SWAP transitions, we add a precondition so that SWAP is legal only if PROJ(s 0 ) &gt; PROJ(b).</p><p>Forced: To force necessary SWAP transitions, we bypass the oracle whenever PROJ(s 0 ) &gt; PROJ(b). <ref type="bibr">5</ref> </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.3">Dynamic Oracle</head><p>Since we use a static oracle for SWAP transitions, these will always have zero cost. The dynamic oracle thus only needs to define costs for the remaining three transitions. To construct the oracle, we start from the old dynamic oracle for the projective system and extend it to account for the added flexibility introduced by SWAP. <ref type="figure" target="#fig_1">Figure 1</ref> defines the transition costs as well as the necessary updates to RDEPS after applying a transition.</p><p>• LEFT: Adding the arc (b, s 0 ) and popping s 0 from the stack means that s 0 will not be able to acquire a head different from b nor any of its reachable dependents. In the old projective case, the loss was limited to a head in s 0 |β and dependents in b|β, but because s 0 can potentially be swapped back to the buffer, we instead define reachability explicitly through RDEPS(s 0 ) (for dependents) and RDEPS(h(s 0 )) (for the head) and update these accordingly after applying the transition.</p><p>• RIGHT: Adding the arc (s 1 , s 0 ) and popping s 0 from the stack means that s 0 will not be able to acquire a head different from s 1 nor any of its reachable dependents. In the old projective case, the loss was limited to a head and dependents in b|β, but because s 0 can potentially be swapped back to the buffer, we again define reachability explicitly through RDEPS(s 0 ) (for dependents) and RDEPS(h(s 0 )) (for the head) and update these accordingly after applying the transition.</p><formula xml:id="formula_8">1 2 3 4 s 1 s 0 b [ 1 2 ] Σ [ 3 4 ] B RIGHT ⇒ 1 2 3 4 [ 1 ] Σ [ 3 4 ] B SHIFT ⇓ 1 2 3 4 [ 1 2 3 ] Σ [ 4 ] B 1 2 4 3 s 1 s 0 b [ 1 2 ] Σ [ 4 3 ] B</formula><p>• SHIFT: In the projective case, shifting b onto the stack means that b will not be able to acquire a head in Σ other than the top item s 0 nor any dependents in Σ. With the SWAP transition and a static oracle, we also have to consider the case where b can later be swapped back to the buffer, in which case SHIFT has zero cost. We therefore have two cases in <ref type="figure" target="#fig_1">Figure 1</ref>. In the first case, no updates are needed. In the second case, the updates are analogous to the old projective case.</p><p>To illustrate how the oracle works, let us look at some hypothetical configurations. First, we can have a situation as in the top left corner of <ref type="figure" target="#fig_2">Fig- ure 2</ref>, where all nodes are in projective order given the gold tree displayed above the nodes. For simplicity, the nodes are named after their projective order. Applying a RIGHT transition in this configuration makes it impossible for s 0 (2) to be attached to its head (3) and therefore makes us lose the arc 3 → 2, as shown in the top right corner. If we instead apply a SHIFT transition, we lose the arc between b (3) and its head (1) as well as the arc 3 → 2, as shown in the bottom left corner. By contrast, a LEFT transition has zero cost, because no arcs are lost so the best tree reachable in the original configuration is still reachable after applying the LEFT transition.</p><p>Consider now a configuration, like the one in the bottom right corner of <ref type="figure" target="#fig_2">Figure 2</ref>, where the nodes are not in projective order. Here we can shift b (4) onto the stack without cost, because it will later be swapped back to the buffer to restore the projective order between 4 and 3. A RIGHT transition makes us lose the head and dependent of s 0 (4 → 2 and 2 → 3). A LEFT transition makes us lose the dependent of s 0 (2 → 3).</p><p>The combination of a dynamic oracle for LEFT, RIGHT and SHIFT with a static oracle for SWAP allows us to benefit from training with exploration in most situations and at the same time capture nonprojective dependencies.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4">Experiments</head><p>We extend the parser we used in de <ref type="bibr" target="#b1">Lhoneux et al. (2017)</ref>, a greedy transition-based parser that predicts the dependency tree given the raw words of a sentence. That parser is itself an extension of the parser developed by <ref type="bibr" target="#b6">Kiperwasser and Goldberg (2016)</ref>. It relies on a BiLSTM to learn informative features of words in context and a feed-forward network for predicting the next parsing transition. It learns vector representations of the words as well as characters. Contrary to parsing tradition, it makes no use of part-of-speech tags. We released our system as UUparser 2.0, available at https: //github.com/UppsalaNLP/uuparser.</p><p>We first compare our system, which uses our static-dynamic oracle, with the same system using a static oracle. This is to find out if we can benefit from error exploration using our partially dynamic oracle. We use the same set of hyperparameters as in that paper in all our experiments.</p><p>We additionally compare our method to a different approach to handling non-projectivity, pseudo-projective parsing, as performed in de <ref type="bibr" target="#b1">Lhoneux et al. (2017)</ref>. Pseudo-projective parsing was developed by <ref type="bibr" target="#b15">Nivre and Nilsson (2005)</ref>. In a pre-processing step, the training data is projectivised: some nodes get reattached to a close parent. Parsed data are then 'deprojectivised' in a post-processing step. In order for information about non-projectivity to be recoverable after parsing, when projectivising, arcs are renamed to encode information about the original parent of dependents which get re-attached. Note that hyperparameters were tweaked for the pseudo-projective system, possibly giving an unfair advantage.</p><p>Lastly, we compare to a projective baseline, using a dynamic oracle but no SWAP transition. 6 This is to find out the extent to which dealing with non-projectivity is important.</p><p>We selected a sample of 5 treebanks from the Universal Dependencies CoNLL 2017 shared task data ( . We selected languages to have different frequencies of non-projectivity, both at the sentence level and at the level of individual arcs, ranging from a very high frequency (Ancient-Greek) to a low frequency (English), as well as some typological variety. Non-projective frequencies were taken from <ref type="bibr" target="#b16">Straka et al. (2015)</ref> and are included in <ref type="table">Table 1</ref>, which report our results on the development sets (best out of 20 epochs).</p><p>Comparing to the static baseline, we can verify that our static-dynamic oracle really preserves the benefits of training with error exploration, with improvements ranging from 0.5 to 3.5 points. (All differences here are statistically significant with p&lt;0.01, except for Portuguese, where the difference is statistically significant with p&lt;0.05 according to the McNemar test).</p><p>The new system achieves results largely on par with the pseudo-projective parser. Our method is better by a small margin for 3 out of 5 languages  <ref type="table">Table 1</ref>: LAS on dev sets with gold tokenization for our static-dynamic system (S-Dy), the static and projective baselines (Static, Proj) and the pseudo-projective system of de <ref type="bibr">Lhoneux et al. (2017) (PProj)</ref>. %NP = percentage of nonprojective arcs/sentences. and worse by a large margin for 1. Overall, these results are encouraging given that our method is simpler and more efficient to train, with no need for pre-or post-processing and no extension of the dependency label set. <ref type="bibr">7</ref> Comparing to the projective baseline, we see that strictly projective parsing can be slightly better than both online reordering and pseudoprojective parsing for a language with few non-projective arcs/sentences like English. For all other languages, we see small (Arabic) to big (Ancient Greek) improvements from dealing with non-projectivity in some way.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5">Conclusion</head><p>We have shown how the SWAP transition for online reordering can be integrated into the archybrid transition system for dependency parsing in such a way that we still benefit from training with exploration using a static-dynamic oracle. In the future, we intend to test this further by evaluating our model on more languages with proper tuning of hyperparameters. We are also interested in the question of whether it is possible to define a fully dynamic oracle for our system and allow exploration for the SWAP transition too.</p></div><figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_0"><head></head><label></label><figDesc>s 0 and remove d ∈ Σ from RDEPS(b).</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_1"><head>Figure 1 :</head><label>1</label><figDesc>Figure 1: Transition costs and updates. Expressions of the form [[Φ]] evaluate to 1 if Φ is true, 0 otherwise. We use s 0 and s 1 to refer to the top and second top item of the stack respectively and we use b to denote the first item of the buffer. Σ refers to the stack and Σ −s 0 to the stack excluding s 0 (if Σ is not empty). B refers to the buffer and B −b to the buffer excluding b.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_2"><head>Figure 2 :</head><label>2</label><figDesc>Figure 2: Top left: Configuration with all nodes in projective order and gold tree displayed above the nodes. Top right: Gold arc lost (the red dotted arc) when applying a RIGHT transition from the top left configuration. The arc added by the transition is in blue, it is not in the gold tree. Bottom left: Gold arcs lost (the red dotted arcs) when applying a SHIFT transition from the top left configuration. Bottom right: Configuration where b is higher in the projective order than a following node in the buffer.</figDesc></figure>

			<note place="foot" n="1"> For simplicity, we focus on unlabeled dependency trees in this paper. All results extend to the labeled case by adding a label parameter to the LEFT and RIGHT transitions as usual. 2 Note that we use uppercase Σ and B to refer to the entire stack and buffer, respectively, while lowercase σ and β refer to relevant (possibly empty) sublists of Σ and B.</note>

			<note place="foot" n="3"> The last condition is needed to guarantee termination. 4 The projective order is a canonical (re)ordering of the words for which the tree is projective. It is obtained through an inorder traversal of the tree that respects the local order of a head and its dependents, as explained in Nivre (2009).</note>

			<note place="foot" n="5"> This is equivalent to an eager static oracle for SWAP in the sense of Nivre et al. (2009).</note>

			<note place="foot" n="6"> When training the projective baseline, we removed nonprojective sentences from the training data.</note>
		</body>
		<back>

			<div type="acknowledgement">
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Acknowledgments</head><p>We thank Eli Kiperwasser who took part in the discussion where the main idea of this paper emerged. We acknowledge the computational resources provided by CSC in Helsinki and Sigma2 in Oslo through NeIC-NLPL (www.nlpl.eu). <ref type="bibr">7</ref> We made no systematic study of training time but observed that it took roughly half the time to train our parser compared to the pseudo-projective one.</p></div>
			</div>

			<div type="references">

				<listBibl>

<biblStruct xml:id="b0">
	<analytic>
		<title level="a" type="main">Experiments with a multilanguage non-projective dependency parser</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Giuseppe</forename><surname>Attardi</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 10th Conference on Computational Natural Language Learning (CoNLL)</title>
		<meeting>the 10th Conference on Computational Natural Language Learning (CoNLL)</meeting>
		<imprint>
			<date type="published" when="2006" />
			<biblScope unit="page" from="166" to="170" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b1">
	<analytic>
		<title level="a" type="main">From raw text to universal dependencies -look, no tags!</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Yan</forename><surname>Miryam De Lhoneux</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Ali</forename><surname>Shao</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Eliyahu</forename><surname>Basirat</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Sara</forename><surname>Kiperwasser</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Yoav</forename><surname>Stymne</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Joakim</forename><surname>Goldberg</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Nivre</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the CoNLL 2017 Shared Task: Multilingual Parsing from Raw Text to Universal Dependencies. Association for Computational Linguistics</title>
		<meeting>the CoNLL 2017 Shared Task: Multilingual Parsing from Raw Text to Universal Dependencies. Association for Computational Linguistics<address><addrLine>Vancouver, Canada</addrLine></address></meeting>
		<imprint>
			<date type="published" when="2017" />
			<biblScope unit="page" from="207" to="217" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b2">
	<analytic>
		<title level="a" type="main">An efficient algorithm for easy-first non-directional dependency parsing</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Yoav</forename><surname>Goldberg</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Michael</forename><forename type="middle">Elhadad</forename></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Human Language Technologies: The 2010 Annual Conference of the North American Chapter of the Association for Computational Linguistics (NAACL HLT)</title>
		<imprint>
			<date type="published" when="2010" />
			<biblScope unit="page" from="742" to="750" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b3">
	<analytic>
		<title level="a" type="main">Training deterministic parsers with non-deterministic oracles</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Yoav</forename><surname>Goldberg</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Joakim</forename><surname>Nivre</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Transactions of the Association for Computational Linguistics</title>
		<imprint>
			<biblScope unit="volume">1</biblScope>
			<biblScope unit="page" from="403" to="414" />
			<date type="published" when="2013" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b4">
	<analytic>
		<title level="a" type="main">An efficient dynamic oracle for unrestricted non-projective parsing</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Carlos</forename><surname>Gómez</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">-Rodríguez</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Daniel</forename><surname>Fernández-González</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">ACL-15-SHORT</title>
		<imprint>
			<date type="published" when="2015" />
			<biblScope unit="page" from="256" to="261" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b5">
	<analytic>
		<title level="a" type="main">A transition-based parser for 2-planar dependency structures</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Carlos</forename><surname>Gómez</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">-Rodríguez</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Joakim</forename><surname>Nivre</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 48th Annual Meeting of the Association for Computational Linguistics (ACL)</title>
		<meeting>the 48th Annual Meeting of the Association for Computational Linguistics (ACL)</meeting>
		<imprint>
			<date type="published" when="2010" />
			<biblScope unit="page" from="1492" to="1501" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b6">
	<analytic>
		<title level="a" type="main">Simple and accurate dependency parsing using bidirectional LSTM feature representations</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Eliyahu</forename><surname>Kiperwasser</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Yoav</forename><surname>Goldberg</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Transactions of the Association for Computational Linguistics</title>
		<imprint>
			<date type="published" when="2016" />
			<biblScope unit="volume">4</biblScope>
			<biblScope unit="page" from="313" to="327" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b7">
	<analytic>
		<title level="a" type="main">Dynamic programming algorithms for transition-based dependency parsers</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Marco</forename><surname>Kuhlmann</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Carlos</forename><surname>Gómez-Rodríguez</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Giorgio</forename><surname>Satta</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 49th Annual Meeting of the Association for Computational Linguistics (ACL)</title>
		<meeting>the 49th Annual Meeting of the Association for Computational Linguistics (ACL)</meeting>
		<imprint>
			<date type="published" when="2011" />
			<biblScope unit="page" from="673" to="682" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b8">
	<analytic>
		<title level="a" type="main">An efficient algorithm for projective dependency parsing</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Joakim</forename><surname>Nivre</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 8th International Workshop on Parsing Technologies (IWPT)</title>
		<meeting>the 8th International Workshop on Parsing Technologies (IWPT)</meeting>
		<imprint>
			<date type="published" when="2003" />
			<biblScope unit="page" from="149" to="160" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b9">
	<analytic>
		<title level="a" type="main">Incrementality in deterministic dependency parsing</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Joakim</forename><surname>Nivre</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the Workshop on Incremental Parsing: Bringing Engineering and Cognition Together (ACL)</title>
		<meeting>the Workshop on Incremental Parsing: Bringing Engineering and Cognition Together (ACL)</meeting>
		<imprint>
			<date type="published" when="2004" />
			<biblScope unit="page" from="50" to="57" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b10">
	<analytic>
		<title level="a" type="main">Incremental non-projective dependency parsing</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Joakim</forename><surname>Nivre</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of Human Language Technologies: The Annual Conference of the North American Chapter of the Association for Computational Linguistics (NAACL HLT)</title>
		<meeting>Human Language Technologies: The Annual Conference of the North American Chapter of the Association for Computational Linguistics (NAACL HLT)</meeting>
		<imprint>
			<date type="published" when="2007" />
			<biblScope unit="page" from="396" to="403" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b11">
	<analytic>
		<title level="a" type="main">Non-projective dependency parsing in expected linear time</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Joakim</forename><surname>Nivre</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the Joint Conference of the 47th Annual Meeting of the ACL and the 4th International Joint Conference on Natural Language Processing of the AFNLP (ACL-IJCNLP)</title>
		<meeting>the Joint Conference of the 47th Annual Meeting of the ACL and the 4th International Joint Conference on Natural Language Processing of the AFNLP (ACL-IJCNLP)</meeting>
		<imprint>
			<date type="published" when="2009" />
			<biblScope unit="page" from="351" to="359" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b12">
	<monogr>
		<title/>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Joakim</forename><surname>Nivre</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Zeljko</forename><surname>Agi´cagi´c</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Lars</forename><surname>Ahrenberg</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2017" />
		</imprint>
	</monogr>
	<note>Universal Dependencies 2.0. LIN-</note>
</biblStruct>

<biblStruct xml:id="b13">
	<monogr>
				<ptr target="http://hdl.handle.net/11234/1-1983" />
		<title level="m">DAT/CLARIN digital library at the Institute of Formal and Applied Linguistics</title>
		<meeting><address><addrLine>Prague</addrLine></address></meeting>
		<imprint/>
		<respStmt>
			<orgName>Charles University</orgName>
		</respStmt>
	</monogr>
</biblStruct>

<biblStruct xml:id="b14">
	<analytic>
		<title level="a" type="main">An improved oracle for dependency parsing with online reordering</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Joakim</forename><surname>Nivre</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Marco</forename><surname>Kuhlmann</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Johan</forename><surname>Hall</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 11th International Conference on Parsing Technologies (IWPT&apos;09)</title>
		<meeting>the 11th International Conference on Parsing Technologies (IWPT&apos;09)</meeting>
		<imprint>
			<date type="published" when="2009" />
			<biblScope unit="page" from="73" to="76" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b15">
	<analytic>
		<title level="a" type="main">Pseudoprojective dependency parsing</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Joakim</forename><surname>Nivre</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Jens</forename><surname>Nilsson</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 43rd Annual Meeting of the Association for Computational Linguistics (ACL)</title>
		<meeting>the 43rd Annual Meeting of the Association for Computational Linguistics (ACL)</meeting>
		<imprint>
			<date type="published" when="2005" />
			<biblScope unit="page" from="99" to="106" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b16">
	<analytic>
		<title level="a" type="main">Parsing universal dependency treebanks using neural networks and search-based oracle</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Milan</forename><surname>Straka</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Jan</forename><surname>Hajič</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Jana</forename><surname>Straková</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Jan</forename><surname>Hajič Jr</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 14th Workshop on Treebanks and Linguistic Theories (TLT)</title>
		<meeting>the 14th Workshop on Treebanks and Linguistic Theories (TLT)</meeting>
		<imprint>
			<date type="published" when="2015" />
		</imprint>
	</monogr>
</biblStruct>

				</listBibl>
			</div>
		</back>
	</text>
</TEI>
