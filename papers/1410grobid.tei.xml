<?xml version="1.0" encoding="UTF-8"?>
<TEI xmlns="http://www.tei-c.org/ns/1.0" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
xsi:schemaLocation="http://www.tei-c.org/ns/1.0 /Users/atharsefid/Desktop/grobid-0.5.3/grobid-home/schemas/xsd/Grobid.xsd"
 xmlns:xlink="http://www.w3.org/1999/xlink">
	<teiHeader xml:lang="en">
		<encodingDesc>
			<appInfo>
				<application version="0.5.3" ident="GROBID" when="2020-09-29T01:57+0000">
					<ref target="https://github.com/kermitt2/grobid">GROBID - A machine learning software for extracting information from scholarly documents</ref>
				</application>
			</appInfo>
		</encodingDesc>
		<fileDesc>
			<titleStmt>
				<title level="a" type="main">Simplifying Manageability, Scalability and Host Mobility in Large-Scale Enterprise Networks using VEIL-click</title>
			</titleStmt>
			<publicationStmt>
				<publisher/>
				<availability status="unknown"><licence/></availability>
			</publicationStmt>
			<sourceDesc>
				<biblStruct>
					<analytic>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Sourabh</forename><surname>Jain</surname></persName>
							<affiliation key="aff0">
								<orgName type="institution">University of Minnesota-Twin Cities</orgName>
							</affiliation>
						</author>
						<author role="corresp">
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Zhi-Li</forename><surname>Zhang</surname></persName>
							<email>zhzhang@cs.umn.edu</email>
							<affiliation key="aff0">
								<orgName type="institution">University of Minnesota-Twin Cities</orgName>
							</affiliation>
						</author>
						<title level="a" type="main">Simplifying Manageability, Scalability and Host Mobility in Large-Scale Enterprise Networks using VEIL-click</title>
					</analytic>
					<monogr>
						<imprint>
							<date/>
						</imprint>
					</monogr>
				</biblStruct>
			</sourceDesc>
		</fileDesc>
		<profileDesc>
			<abstract>
				<p>The explosive growth in the network driven services and devices is causing existing networks to continually expand to accommodate the demands set by them. However, underlying network architecture can not sustain this continual expansion. As a result, several ad-hoc mechanisms are used as workarounds, which make the networks increasingly complicated and difficult to manage. In this paper, we present veil-click , which is aimed at simplifying the management of large-scale enterprise networks by requiring minimal manual configuration overheads. It makes it tremendously easy to plug-in a new routing-node or a host-device in the network without requiring any manual configuration. It builds on top of a highly scalable and robust routing substrate provided by VIRO, and supports many advanced features such as seamless mobility support, built-in multi-path routing and fast-failure rerouting in case of link/node failures. Our current prototype of veil-click is built using Click Modular Router framework, and is being deployed in our lab for the evaluation under the real traffic conditions.</p>
			</abstract>
		</profileDesc>
	</teiHeader>
	<text xml:lang="en">
		<body>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="1.">INTRODUCTION</head><p>While Internet driven applications and devices are growing at a rapid pace, they are continuously stressing the underlying network architecture to meet the demands, which are limited by the scalability of the underlying network technologies. These trends are posing daunting challenges to network designers and operators, who often resort to complicated workarounds to expand their networks and accommodate the demand, which is usually achieved by paying a huge cost in terms of the additional manual overhead in managing and maintaining the infrastructure.</p><p>There are several reasons for this stress. On one hand, layer-2 network technologies such as Ethernet are largely "plug-&amp;-play" and require minimal manual configuration. However, they can not scale to create large and dynamic (layer-2) networks such as, Metro Ethernets, huge enterprise networks, single ISP network, since they rely on "flooding" based packet forwarding and address resolutions. On the other hand, Internet Protocol (IP layer) which acts as a "glue" to interconnect several layer-2 networks, require careful and extensive network configurations including the IP address assignments to routers and end-host devices which complicates the network management tasks. They offer relatively poor support for mobility and have limited scalability for the underlying routing protocols due to the state-size explosion and so forth.</p><p>To address these challenges we propose a network architecture, which not only simplifies the management for large-scale enterprise networks, but also improves the scalability and host mobility of the network to incorporate a large number of "routing-nodes"(e.g. routers and switches) and "host" devices. We build our new networking architecture using a recently proposed VIRO routing framework <ref type="bibr" target="#b6">[9]</ref>, which is a paradigm-shifting approach to network routing and forwarding that is highly scalable, robust and efficient.</p><p>In this paper, we describe veil-click -a realization of VIRO routing framework, which is tailored towards creating large-scale advanced layer-2 networks. There are several mechanisms that we employ to achieve this. First, we introduce a centralized controller for the network, which collects the network topology and performs the vid assignment for the routing nodes in the network. Second, we choose 48-bit long vid for both host-devices and as well as the routing nodes, so that, we can use the existing Ethernet semantics, such as ARP protocol for name resolutions and so on. Third, we do not introduce any new additional networking header for the basic packet forwarding. This is achieved by re-using Ethernet address fields in the layer-2 headers.</p><p>In order to demonstrate the practical feasibility of our routing architecture, we implement the key components of our proposed networking architecture using an initial prototype based on Click Modular Router framework <ref type="bibr" target="#b9">[12]</ref>, which is not only completely backward compatible to work along with the legacy hardware (e.g., Ethernet based switches) and software (e.g., host networking protocols such as ARP, IP based addressing etc.), but also leverages the VIRO routing framework to provide built-in mechanisms for load-balancing, fast rerouting, seamless mobility support and other key fea-tures needed to support future networking and application needs. Our initial evaluation using the Click based prototype switch shows that veil-click can support seamless mobility support for the host-devices, and it does not interrupt the on-going TCP connections for the hosts during the mobility. In addition, our experiments showed that TCP connections for the hostdevices take only around 2-5 seconds to recover during the host-device mobility.</p><p>The remainder of the paper is organized as follows. We provide an overview of VIRO, the key ideas behind veil-click and related work in §2. §3 provides the description of basic components, §4 presents the basic design of our Click based prototype and in §5 we describe the advanced features. Finally we conclude the paper in §6. (Due to the space limitation, we could not include our simulation based evaluation results in this paper, which can be found in the VIRO tech-report <ref type="bibr" target="#b7">[10]</ref>. The evaluation using the Click based prototype is currently in progress, while the source code for the veil-click can be downloaded from the Google Code repository <ref type="bibr" target="#b0">[3]</ref>.)</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.">OVERVIEW</head></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.1">Motivation</head><p>The design of veil-click is motivated by the following problems in the existing networking technologies.</p><p>• Requirement of extensive network configuration &amp; address management. Current IP networks require careful (and often manual) configurations and management. The need for address management is particularly cumbersome and problematic: while an end host joining a network can dynamically obtain its IP address via DHCP, adding a router or subnet to expand an existing network often requires allocation of one or more new IP address blocks. This is because IP address management is link-based: each link -either via a point-to-point connection or wired/wireless broadcast media -(or each subnet) must be assigned a distinct IP address block. Such address blocks must then be configured into routers, and injected into intra-domain routing protocols. Similarly, the assignment and manual configuration of OSPF areas for IP based intra-domain routing adds to the complexity.</p><p>• Limited ability to exploit the richness in the network topologies. IP routing within a single network domain (i.e., intra-domain routing) also suffers several major problems. These problems have their root in the shortest-path based routing paradigm used in IP (intra-domain) routing. The use of shortest-paths limits the ability of IP networks to exploit path diversity inherent in the network topology to perform load-balancing and fast-rerouting of traffic under failures. To perform load-balancing and traffic engineering, one has to resort to sub-optimal work-arounds or fixes, e.g., via IGP weight optimization. Likewise, various IP-based fast rerouting mechanisms have been proposed, which partly circumvent the slow convergence problem plaguing the traditional reactive IP routing protocols (e.g., OSPF or IS-IS). Unfortunately most of these fast rerouting mechanisms are fairly complex, and as "add-ons" to existing routing protocols require additional configurations, which further complicates the operations of IP networks.</p><p>• Poor scalability of existing Ethernet based layer-2 networking protocols. Unlike IP networks, layer-2 networks such as Ethernet are largely plug-&amp;-play: hosts are equipped with persistent MAC addresses, and Ethernet switches automatically learn about host addresses and location, and perform packet forwarding seamlessly with minimal operator configuration and intervention. On the other hand, as it was originally developed for small, local area networks, it relies on network-wide flooding for packet forwarding and address resolution, which severely limits its scalability and efficiency.</p><p>• No support for the host mobility. Current networking protocols consider the IP address of a host as a proxy for the node's identity. While IP address is also used to route the packet to the destination, therefore, it acts as an address for the node as well. When a node moves from one subnet to another subnet in the network, its IP address has to be reconfigured either using the DHCP or by performing static manual configuration. This dual use of IP address as an identity and as well as an address, causes the reseting of the existing network connection between the hosts whenever their IP address is changed due to the mobility.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.2">Related Work</head><p>To address the challenges faced by traditional layer-2 routing protocols, several solutions <ref type="bibr">[1,</ref><ref type="bibr">2,</ref><ref type="bibr" target="#b8">11,</ref><ref type="bibr" target="#b12">15]</ref> have been proposed, of which, SEATTLE <ref type="bibr" target="#b8">[11]</ref> is closest in spirit to our work, in that, both utilize DHT (distributed hash table) techniques for scalable and efficient address look-up and resolution. However, SEATTLE employs the OSPF-style shortest path routing in layer 2. It therefore not only requires network-wide flooding in the control plane for building routing tables, but also suffers from the same scalability and robustness limitations plaguing shortest-path routing: for example, it is limited to the use of shortest paths only; load-balancing and fast rerouting can be complicated to implement. In contrast, VIRO routing framework used in veil-click avoids these inherent problems in shortest-path routing. It is far more scalable and robust (e.g., with O(log N ) routing table sizes instead of O(N ) in OSPF). Similarly, to circumvent these problems in a data-center environment, several "customer-made" networking solutions have been proposed, see, e.g., <ref type="bibr" target="#b1">[4,</ref><ref type="bibr" target="#b4">7]</ref>. However, these solution are tied to a specific network topology, and therefore, can not work for any general network topology, which is mostly the case for large-scale enterprise networks. Our work is also substantially different from the "flat-id" based routing schemes such as UIP <ref type="bibr" target="#b3">[6]</ref> and ROFL <ref type="bibr" target="#b2">[5]</ref>, which advocate a flat universal id space to replace the current global IP address space. These schemes employ a DHT-style randomly and consistently hashed id assignment-which produces an id-space completely independent of the underlying network topology-and perform routing based on logical distance to the id of the destination, incurring a stretch penalty (which is unbounded in the worst case). We circumvent these problems by introducing a topologyaware structured vid space. It incurs fairly small routing stretches, and effectively localizes the effect of failures. In addition, our previous works <ref type="bibr" target="#b5">[8]</ref><ref type="bibr" target="#b6">[9]</ref><ref type="bibr" target="#b7">[10]</ref> provide a detailed qualitative and quantitative comparison with these related works.</p><p>In particular, VEIL addresses the same scalability and mobility related issues for large-scale layer-2 networks as addressed by other proposals such as SEAT-TLE <ref type="bibr" target="#b8">[11]</ref>, VL2 <ref type="bibr" target="#b4">[7]</ref> and TRILL <ref type="bibr">[2]</ref>. These proposals use link-state style routing for better data-plane scalability in layer-2 networks, however, control plane still suffers from the scalability concerns for a very large network. They also deploy Loc/ID split as proposed in LISP <ref type="bibr" target="#b11">[14]</ref> to support the host mobility. However, they use different mechanisms to achieve this. E.g., SEATTLE uses a DHT based resolution mechanism, which is done by the switches in the network on behalf of host-devices. This adds additional overhead on the switches to perform the explicit resolutions. On the other hand, VL2 requires the hosts to perform the resolutions directly, by installing a special network driver on the host machines. In case of VEIL, it leverages the existing ARP protocol to perform the name resolutions without modifying anything on the host-devices, therefore, it provides more scalable and completely backward compatible solution. veil-click is a practical realization of VIRO using Virtual Ethernet Id Layer (in short, VEIL) prototyped using Click Modular Router framework. <ref type="figure" target="#fig_0">Figure 1</ref> shows an example of a large-scale layer-2 network created using veil-click based switches. As seen in this figure, all the host-device that connect to this network can be assigned an IP address using a single IP address block. Therefore, it avoids the partitioning of the network into multiple subnets as performed in traditional layer-2/layer-3 networks. It enables the seamless mobility support for the host-devices, since they do not need to change their IP addresses, when they move within the network. As seen in <ref type="figure" target="#fig_0">Figure 1</ref>, the network consists of several veil-switches shown using circles, a VEIL centralized controller (in short vcc), and a large number of host-devices which can either directly connect to veil-switches or through Ethernet based Wired/Wireless LAN switches. The roles of each of these devices are as follows. vcc. It bootstraps the network by performing the initial vid -assignment to veil-switches. In addition, it also assigns a vid to a new veil-switch that joins the network after the initial bootstrapping process. Although, VEIL uses a centralized vid -assignment for the veil-switches, it does not create a single point of failure. This is because once the vid -assignment to veil-switches is done, they do not need vcc for the packet forwarding and other related tasks. Moreover, it is possible to have additional vcc connected to the network for redundancy. veil-switch. A veil-switch is the Click based prototype switch, which performs all the actions required to perform the routing and forwarding among the veilswitches using VIRO routing protocol. It also performs the vid -assignments for the host-devices connecting to it directly (or through Ethernet switches). host-device. It represents any end-host device that connects to the network such as desktop/laptop computers, smartphones etc. There are three key components of veil-click , namely, vid -assignment, routing and forwarding, and address resolution. vid -assignment to veil-switches is done by the vcc. To achieve this veil-switches send their neighbor information to the vcc, which computes the vid for the switch based upon its location in the topology. While, host-devices are assigned 48-bit long vid by the veil-switch they directly connect to. Therefore, no manual configuration is required to connect a host-device or a veil-switch to the network. The routing among the veil-switches is performed using the vids except at the edges where packet is forwarded to/from a host-device. Since we use a host-agnostic design, veil-click does not require any modifications to host-devices to communicate with each other using veil-switches, we intercept and use ARP packets sent by the hosts to resolve the IP addresses to vids instead of mapping them to the actual MAC addresses. The only exception to such handling of ARP packets is the case when two hosts are connected to the same veil-switch at the same interface, in which case, they directly use MAC addresses to communicate with each other and no intermediate veil-switches are involved in the communication. When a host-device moves in the network and connects to a different host-switch 1 , its IP address may remain the same, and its updated vid is pushed to other hosts that it is talking to as an ARP reply packet. Therefore, the mobility does not interrupt the network connection for the host.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.3">VEIL-click: Design Overview</head></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.">VEIL-CLICK: KEY COMPONENTS</head><p>veil-click consists of three essential components, namely, vid -management, routing and forwarding, and host-device namespace management. In this section we provide a brief description of each of these components.</p><p>• vid Management. In veil-click the vid -assignment for the veil-switches is performed by the vcc. To achieve this, an 'in-band' communication channel to communicate with vcc is required. In the following we first describe the protocol used by veil-switches to construct and maintain the spanning tree used to communicate with vcc, and then the algorithm used by vcc to perform the vid -management. vcc Communication Protocol. This protocol consists of two key operations: i. broadcast of the current "best" path to reach vcc to directly connected physical neighbors, and ii. subscription to one of the physical neighbors which advertises the "best" path. If a veil-switch has an outgoing interface that connects to vcc, it announces this information to all its other neighbors by advertising itself as an immediate upstream node to reach vcc and its distance to the vcc (as number of hops) is 1. Similarly, vcc advertises the distance 0 to veil-switches directly connected to it. Whenever, a veilswitch receives this advertisement it compares the advertised distance with the distance advertised by its current upstream node to reach the vcc. If the advertised distance is smaller then it installs the advertising node as its new upstream node to reach vcc, and sends a "subscription" packet to the node indicating that it is the downstream node for the node. When a node receives a "subscription" packet from one of its neighbor nodes, it installs that node as one of the downstream nodes. A node uses the "upstream node" to forward the packet to the vcc, on the other hand downstream nodes are used to forward the packets coming from vcc to all the nodes in the network. We show this communication channel for the example network in <ref type="figure" target="#fig_0">Figure 1</ref> using the continuous black lines. vid-assignment. When a node learns its upstream node to reach vcc, it publishes its neighbor information to vcc. Upon receiving the neighbor information from a node, vcc stores it in its local database to construct the complete topology of the network, which is then used to perform the vid -assignment to veil-switches using the top-down graph partitioning based approach <ref type="bibr" target="#b7">[10]</ref>. In this process each veil-switch is assigned a 32-bit long vid . When a new veil-switch joins the network after initial vid -assignment process, it first learns the upstream node to reach the vcc from its neighbors, and sends it neighbor information to vcc, which then assigns a vid to this node based upon its neighbor's vid . On the other hand when a host-device connects to a veil-switch, the veil-switch detects it by sniffing on the data packets sent by the device. Whenever it detects a new host IP address (ip) it assigns a unique 48-bit long hostvid to it by appending unique 16-bits to its 32-bit long switch-vid and pushes the mapping (ip, hostvid) to the accessswitch 2 corresponding to IP address ip.</p><p>• Routing &amp; Forwarding. After the initial vid -assignment is performed by the vcc, each node periodically runs the bottom-up routing table construction process as described in <ref type="bibr" target="#b6">[9]</ref>. Since, vids are topology-aware, each node summarizes the routing entry to reach other nodes using 32 unique vid prefixes, and therefore only need to store a maximum of 32 routing entries 3 . In order to forward a packet to a given destination, a veil-switch uses the routing entry corresponding to the longest matching vid prefix. In addition, the implementation of VIRO in veil-click , also extends the basic routing protocol to enable the multi-path routing and as well as fast-failure re-routing by having multiple routing entries at each vid prefix level. However, as mentioned in VIRO <ref type="bibr" target="#b6">[9]</ref>, it needs to be done carefully. Otherwise, it may cause the forwarding loops in the data plane if different veilswitches on the path choose conflicting forwarding entries. To avoid these loops, veil-switches, also include a forwarding identifier on the packet in the form of a shim-layer between the layer-2 and layer-3 headers. It ensures that all the nodes on the path choose a consistent forwarding entry for a given data packet.</p><p>Whenever, a host-device sends a packet to the network, host-switch detects it by looking at the source address in the Ethernet header and overwrites the source MAC address by the vid for the host, before forwarding it to other veil-switches. Similarly, if a switch receives a packet which has the destination MAC address as one of its host-devices' vid , it overwrites the destination address in the Ethernet header by the actual MAC address of the host before forwarding the packet to the host.</p><p>• Host-device Namespace Management. veil-switches detect the host-devices directly connected to them by sniffing on the packets sent by them. Whenever, they discover a new host-device, they assign a unique vid to them, and push the (vid , ip) mapping to the accessswitch. Also host-switches publish these mappings periodically to access-switches corresponding to the mappings. When a host-device sends an ARP request message to resolve an IP address, the host-switch extracts the IP address (ip) in the request, and if it is not one of its host-devices, it forwards the query to the accessswitch corresponding to ip as an encapsulated ARP request message. Upon receiving the encapsulated ARP request access-switch looks up the requested IP address in the mappings stored by it and replies back with the vid if found, else it discards the request. veil-click is based on Click modular framework, where different functionalities are broken in to individual modules, which can be developed independently, and pluggedin together to compose a full fledged veil-switch. In case of veil-click , we build several elements (or modules) for various operations such as ARP handling, Routing Table management etc. as Click elements. These individual elements are connected together to form various components of veil-click , which are shown in <ref type="figure" target="#fig_1">Figure 2</ref>. In this figure rectangular boxes represent the Click elements (or a group of elements for simplified representation), while solid black lines represent the interconnections between them.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.">VEIL-CLICK: THE PROTOTYPE</head><p>At the time of writing of this paper, we have finished the basic implementation of veil-click , which includes all the functionalities mentioned in the paper. We have tested the basic working of the current prototype using a small testbed in our lab. The initial testbed consists of 5 server machines with 5 Ethernet ports on each as veil-switches, 3 wireless access points which are directly connected to different veil-switches through wired Ethernet cables, and several laptop computers running Ubuntu/MAC OS X/Windows operating systems as test host-devices 4 . The complete test network is configured to use a single subnet prefix, and the host-devices are assigned static IP addresses.</p><p>Using this testbed we evaluated the support for hostmobility by connecting the host-devices to different wireless access points, while they are communicating with each other. For these experiments, we set up a TCP connection between two host-devices, where source hostdevice generate the traffic at constant bit rate (1600 kbps), and move the destination host-device between two different wireless access points. In <ref type="figure" target="#fig_2">Figure 3</ref> we show how the mobility of the destination host-device affects its traffic receiving rate. In this figure, red dashed lines represent the transitions from one access point to another, and solid blue lines represent the average goodput every second at the destination host-device. In <ref type="figure" target="#fig_2">Fig- ure 3(a)</ref> we show how rate changes when destination host-device for multiple such transitions. As seen in this figure, the mobility causes minimal disruption for the TCP connection. We zoomed in on these individual transitions, and show one such transition in <ref type="figure" target="#fig_2">Figure 3</ref>(b). Our results show that TCP connection stabilizes with in 2-5 seconds during all such network transitions.</p><p>In addition, we are currently in the process of rigorous evaluation of the prototype using larger network topologies. We have already performed the extensive evaluation of VIRO routing architecture using simulations on a variety of network topologies, which are presented in the VIRO technical report <ref type="bibr" target="#b7">[10]</ref>.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5.">VEIL-CLICK: ADVANCED FEATURES</head><p>veil-click uses a unique modular design, which can be easily extended to incorporate several valuable features for large-scale layer-2 networks. These features not only simplify the design and management of large scale networks, but also provide many additional new features. In the following we describe some of these features.</p><p>• Policy Control using Custom Namespace Resolutions. Unlike traditional Ethernet networks, where ARP request messages are broadcasted in the network, veil-click allows broadcast-free IP address resolutions using a DHT style look up and store service. It not only helps in significantly reducing the overhead of ARP, but also allows flexibility in restricting the "unwanted network" traffic for the hosts based on some pre-defined policies. This can be achieved by denying ARP resolutions based on the preset policies, which can take into account the identities of both source and destination hosts to make the resolution.</p><p>• Robust Host Mobility Support. veil-click allows hosts to keep the same IP address when they move from one veil-switch to another. In addition, it provides a smooth hand-off during the transition, such that it does not interrupt the network connection between the two them to the network, and no additional software is installed to allow them to communicate with the network hosts, if one of them changes their host-switch. It is achieved through "push" based notifications used by veil-click . When a host-device changes its host-switch by connecting to a different veil-switch it gets a new vid based upon the new switch's vid . This new vid is pushed using an unsolicited ARP reply packet to all the other hosts the host was talking to.</p><p>• Fast Failure-Rerouting &amp; Multi-path Routing.</p><p>Topologies for data-center networks and large-scale enterprise networks in general have rich path diversity. These topologies are designed to allow multiple paths to connect any pair of nodes for load-balancing or robustness. By utilizing multiple routing entries in the routing table at each bucket level, veil-click provides built-in support for multi-path routing, load-balancing and fast re-routing, with no additional complex mechanisms. This allows a node to choose different paths to reach a destination bucket, either for load-balancing or for fast-rerouting in case of link/node failures. Unlike ECMP, additional routing entries in case of veilclick are not limited to only shortest path routes, and therefore provide more flexibility in multi-path routing. (see <ref type="bibr" target="#b7">[10]</ref> for details).</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="6.">CONCLUSION</head><p>In this paper we presented a network architecture to create large-scale plug-&amp;-play networks. It is designed with two broad sets of goals: i) to support -with minimal manual configuration -large, dynamic networks which connect tens or hundreds of thousands of diverse devices with rich physical topologies and reduce the management overhead; and ii) to meet the high availability, robustness, mobility, manageability and security requirements of these networks and the services running on top of them. These goals are motivated partly by the rise of huge data centers, emergence of cloud-computing and services, as well as the continued trends in large campus, enterprise and ISP (wired, wireless and cellular data) networks to use 1/10/100 Gigabit Ethernet as the core (layer-2) networking technology.</p><p>Toward these goals, we demonstrated our initial prototype veil-click , which is built using Click Modular Router framework. veil-click aims to significantly simplify the current management overhead for large-scale enterprise networks by automating most of the network configurations for both host-devices and as well as the routing nodes in the network. In addition, it provides built-in mechanisms for multi-path routing, fast failure re-routing, and seamless mobility support. Finally, the source-code for veil-click is publicly available, and can be downloaded from our Google Code project repository <ref type="bibr" target="#b0">[3]</ref>. In addition, the development using OpenFlow <ref type="bibr" target="#b10">[13]</ref> based design is currently underway.</p></div><figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_0"><head>Figure 1 :</head><label>1</label><figDesc>Figure 1: An example showing large-scale layer-2 network using VEIL-Click.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_1"><head>Figure 2 :</head><label>2</label><figDesc>Figure 2: An overview of the design of Click based prototype. veil-click is based on Click modular framework, where different functionalities are broken in to individual modules, which can be developed independently, and pluggedin together to compose a full fledged veil-switch. In case of veil-click , we build several elements (or modules) for various operations such as ARP handling, Routing Table management etc. as Click elements. These individual elements are connected together to form various components of veil-click , which are shown in Figure 2. In this figure rectangular boxes represent the Click elements (or a group of elements for simplified representation), while solid black lines represent the interconnections between them. At the time of writing of this paper, we have finished the basic implementation of veil-click , which includes all the functionalities mentioned in the paper. We have tested the basic working of the current prototype using a small testbed in our lab. The initial testbed consists of 5 server machines with 5 Ethernet ports on each as veil-switches, 3 wireless access points which are directly connected to different veil-switches through wired Ethernet cables, and several laptop computers running Ubuntu/MAC OS X/Windows operating systems as test host-devices 4 . The complete test</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_2"><head>Figure 3 :</head><label>3</label><figDesc>Figure 3: Host-device mobility and the traffic bit rate.</figDesc></figure>

			<note place="foot" n="1"> A host-switch for a host-device is the veil-switch that it is directly connected to.</note>

			<note place="foot" n="2"> An access-switch for a host is the veil-switch whose vid is closest to the 32-bit long hash value of its IP address. Here, closeness is measured using the XOR distance. 3 Number of routing entries in the routing table of a node in VIRO is same as the number of bits used to represent the vids. Since we use a 32-bit long vid strings in veil-click for the veil-switches, hence a maximum of 32 routing entries in the routing table.</note>

			<note place="foot" n="4"> We do not modify anything on the host-devices to connect</note>
		</body>
		<back>

			<div type="acknowledgement">
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Acknowledgement</head><p>The work is supported in part by the NSF grants CNS-0905037, CNS-1017647 and CNS-1017092 and the DTRA Grant HDTRA1-09-1-0050.</p></div>
			</div>

			<div type="references">

				<listBibl>

<biblStruct xml:id="b0">
	<monogr>
		<title level="m" type="main">The source code repository for veil-click</title>
		<ptr target="http://code.google.com/p/veil-viro-umn/source/browse/#svn/veil" />
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b1">
	<analytic>
		<title level="a" type="main">A scalable, commodity data center network architecture</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Al-Fares</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">SIGCOMM</title>
		<imprint>
			<date type="published" when="2008" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b2">
	<analytic>
		<title level="a" type="main">Rofl: routing on flat labels</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Caesar</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">SIGCOMM. ACM</title>
		<imprint>
			<date type="published" when="2006" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b3">
	<monogr>
		<title level="m" type="main">Unmanaged internet protocol: taming the edge network management crisis</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">B</forename><surname>Ford</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2004" />
			<publisher>SIGCOMM</publisher>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b4">
	<monogr>
				<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Greenberg</surname></persName>
		</author>
		<title level="m">VL2: A scalable and flexible data center network. SIGCOMM</title>
		<imprint>
			<date type="published" when="2009" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b5">
	<analytic>
		<title level="a" type="main">VEIL: A Plug-&amp;-Play Virtual (Ethernet) Id Layer for Below IP Networking</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Jain</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">BIPN workshop in conjunction with GLOBECOM&apos;09</title>
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b6">
	<analytic>
		<title level="a" type="main">Viro: A plug &amp; play, scalable, robust and namespace independent virtual id routing for future networks</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Jain</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">INFOCOM&apos;11</title>
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b7">
	<monogr>
		<title level="m" type="main">Viro: A plug &amp; play, scalable, robust and namespace independent virtual id routing for future networks</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Jain</surname></persName>
		</author>
		<ptr target="http://networking.cs.umn.edu/veil/viro.pdf" />
		<imprint/>
	</monogr>
<note type="report_type">Tech report</note>
</biblStruct>

<biblStruct xml:id="b8">
	<monogr>
		<title level="m" type="main">Floodless in seattle: a scalable ethernet architecture for large enterprises</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><surname>Kim</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2008" />
			<publisher>SIGCOMM</publisher>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b9">
	<analytic>
		<title level="a" type="main">The Click modular router</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">E</forename><surname>Kohler</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Morris</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">B</forename><surname>Chen</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Jannotti</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Kaashoek</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">ACM Transactions on Computer Systems</title>
		<imprint>
			<date type="published" when="2000" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b10">
	<monogr>
				<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">N</forename><surname>Mckeown</surname></persName>
		</author>
		<title level="m">enabling innovation in campus networks. SIGCOMM &apos;08</title>
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b11">
	<analytic>
		<title/>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Meyer</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Lisp</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">The Internet Protocol Journal</title>
		<imprint>
			<biblScope unit="volume">11</biblScope>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b12">
	<analytic>
		<title level="a" type="main">Smartbridge: a scalable bridge architecture</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><forename type="middle">L</forename><surname>Rodeheffer</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">SIGCOMM</title>
		<imprint>
			<date type="published" when="2000" />
		</imprint>
	</monogr>
</biblStruct>

				</listBibl>
			</div>
		</back>
	</text>
</TEI>
