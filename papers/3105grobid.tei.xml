<?xml version="1.0" encoding="UTF-8"?>
<TEI xmlns="http://www.tei-c.org/ns/1.0" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
xsi:schemaLocation="http://www.tei-c.org/ns/1.0 /Users/atharsefid/Desktop/grobid-0.5.3/grobid-home/schemas/xsd/Grobid.xsd"
 xmlns:xlink="http://www.w3.org/1999/xlink">
	<teiHeader xml:lang="en">
		<encodingDesc>
			<appInfo>
				<application version="0.5.3" ident="GROBID" when="2020-09-29T03:00+0000">
					<ref target="https://github.com/kermitt2/grobid">GROBID - A machine learning software for extracting information from scholarly documents</ref>
				</application>
			</appInfo>
		</encodingDesc>
		<fileDesc>
			<titleStmt>
				<title level="a" type="main">ElCached: Elastic Multi-Level Key-Value Cache</title>
			</titleStmt>
			<publicationStmt>
				<publisher/>
				<availability status="unknown"><licence/></availability>
			</publicationStmt>
			<sourceDesc>
				<biblStruct>
					<analytic>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Rahman</forename><surname>Lavaee</surname></persName>
							<affiliation key="aff0">
								<orgName type="laboratory">Samsung Memory Solutions Lab</orgName>
								<orgName type="institution" key="instit1">University of Rochester</orgName>
								<orgName type="institution" key="instit2">University of Rochester</orgName>
							</affiliation>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Stephen</forename><surname>Choi</surname></persName>
							<affiliation key="aff0">
								<orgName type="laboratory">Samsung Memory Solutions Lab</orgName>
								<orgName type="institution" key="instit1">University of Rochester</orgName>
								<orgName type="institution" key="instit2">University of Rochester</orgName>
							</affiliation>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Yang-Suk</forename><surname>Kee</surname></persName>
							<affiliation key="aff0">
								<orgName type="laboratory">Samsung Memory Solutions Lab</orgName>
								<orgName type="institution" key="instit1">University of Rochester</orgName>
								<orgName type="institution" key="instit2">University of Rochester</orgName>
							</affiliation>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Chen</forename><surname>Ding</surname></persName>
							<affiliation key="aff0">
								<orgName type="laboratory">Samsung Memory Solutions Lab</orgName>
								<orgName type="institution" key="instit1">University of Rochester</orgName>
								<orgName type="institution" key="instit2">University of Rochester</orgName>
							</affiliation>
						</author>
						<title level="a" type="main">ElCached: Elastic Multi-Level Key-Value Cache</title>
					</analytic>
					<monogr>
						<imprint>
							<date/>
						</imprint>
					</monogr>
				</biblStruct>
			</sourceDesc>
		</fileDesc>
		<profileDesc>
			<abstract>
				<p>Today&apos;s cloud service providers (CSPs) use in-memory caching engines to improve application performance and server revenue. However, these caching engines exhibit poor scaling, mainly because of high DRAM cost and energy consumption. On the other hand, the increasing use of multi-tenancy requires effective and optimal resource provisioning. In this paper, we introduce ElCached, a multi-level key-value cache based on Memcached. ElCached employs low-cost NAND flash memory as a lower layer of caching. ElCached uses the reuse distance model to predict miss ratio, with high accuracy, under all storage capacity limits. The miss ratio prediction allows ElCached to find the best resource allocation under multi-tenant settings. We evaluate Elcached on workloads emulating real-world applications. Our multi-tenant experiment indicates that compared to a proportional allocation technique , ElCached can reduce the cost by up to 26%, while delivering lower average latency. Meanwhile, by utilizing more flash storage, ElCached can reduce the total memory consumption almost by half.</p>
			</abstract>
		</profileDesc>
	</teiHeader>
	<text xml:lang="en">
		<body>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="1">Introduction</head><p>Distributed memory caching systems such as Memcached <ref type="bibr" target="#b5">[7]</ref> and Redis <ref type="bibr" target="#b13">[15]</ref> have become vital components of many today's web servers. The strong locality in real world data <ref type="bibr" target="#b0">[2]</ref> allows these systems to improve user latency and total cost of ownership of the backend databases. Considering the large gap between memory and database latencies, achieving higher cache hit rates is critical for overall cost and performance. However, increasing DRAM capacity is challenging because of high DRAM cost and power consumption. Thus the system providers need to maximize DRAM efficiency and utilization by deploying enough memory to meet the service level agreement (SLA) while minimizing the total cost of ownership (TCO). This becomes more important as more cloud users (tenants) are added to the system. The service provider must wisely allocate the resource so as to guarantee each tenant's SLA. Moreover, dynamic workload behaviors motivate elasticity, a capability to adapt to workload changes by dynamic resource provisioning.</p><p>Recent studies have introduced various approaches to utilize low-cost solid-state drives (SSD) to bridge the gap between memory and HDDs <ref type="bibr" target="#b3">[5,</ref><ref type="bibr" target="#b9">11,</ref><ref type="bibr" target="#b14">16,</ref><ref type="bibr" target="#b7">9,</ref><ref type="bibr" target="#b1">3]</ref>. While these techniques properly serve their purpose, they add another level of complexity to resource provisioning. A tenant with a large working set may benefit from caching in SSD, whereas one with smaller working set may be able to achieve its desirable performance by mainly relying on DRAM.</p><p>In this paper, we propose ElCached, an elastic keyvalue cache. ElCached builds on MlCached <ref type="bibr" target="#b1">[3]</ref>, a multilevel caching system. ElCached exploits MlCached's decoupled caching layers to perform independent resource provisioning for both layers. ElCached implements a new reuse-distance profiler to predict miss ratio for all capacity limits. The profiling information allows the system to find the best partition for both resources, under multi-tenant settings, with various latency and cost constraints.</p><p>The rest of the paper is organized as follows. First we give an overview of the base MlCached system and its important decoupling property. Next in section 3, we explain the reuse-distance model and how we adapt it for Memcached applications. Then in section 4 we explain how ElCached formulates a resource provisioning problem, along with the miss ratio information, as a linear programming problem. Finally, in section 5, we evaluate ElCached under single and multi-tenant settings with workloads emulating real-world applications.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2">MlCached</head><p>MlCached consists of a multi-level cache hierarchy. The L1 cache is a common DRAM-based Memcached and the L2 cache is an exclusive NAND-flash-based keyvalue cache.</p><p>The key contribution of MlCached is removing the redundant address mappings. Utilizing commodity SSDs as another key-value caching layer is inefficient because of their block interface. In particular, most flash translation layers (FTLs) are designed to translate logical block addresses (LBA) to physical block addresses (PBA). As a result, it is necessary to store key-to-LBA mapping tables in memory. These tables hamper the effective use of memory for key-value pairs. MlCached removes the need for storing redundant key-to-LBA mapping tables by implementing direct key-to-PBA mappings on SSD.</p><p>MlCached's new key-value device not only improves efficiency, but also decouples the two caching layers by making the address mappings in the two layer completely independent of each other. This allows for independent resource provisioning within each layer. Resource provisioning becomes more important and challenging when workloads dynamically change over time. Our new Elastic Key-Value Cache (ElCached) uses the reuse-distance theory to profile the requests and predict the performance under all storage capacity limits. Based on the profiling information, latency, and cost constraints, it allocates resources to deliver the best utilization and performance.</p><p>We model the performance of MlCached in terms of end-to-end latencies of MlCached's components: Memcached, exclusive SSD cache, and the backend DB. Let us represent these latencies, respectively, by m , s , and db . Additionally, let M m and M s be the miss ratio of Memcached and SSD, respectively. The total average latency of MlCached is equal to</p><formula xml:id="formula_0">Lat = m + s × M m + db × M s .</formula><p>The key to optimal resource provisioning is to find the miss ratio curve. That is a function mr that gives the miss ratio for all capacities. Given this curve, for Memcached of size c m and SSD of size c s , the total average latency is equal to</p><formula xml:id="formula_1">Lat(c m , c s ) = m + s × mr(c m ) + db × mr(c m + c s ).</formula><p>Additionally, The total cost for the system is equal to</p><formula xml:id="formula_2">Cost(c m , c s ) = p m c m + p s c s ,</formula><p>where p m and p s are respectively the price per unit of DRAM and SSD.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3">Reuse Distance</head><p>We use the reuse distance theory to compute the miss ratio curve. The reuse distance model is described as follows. Consider a memory access trace. Let x be an arbitrary element in the trace, representing an access to memory location a. Let y be the previous access to a. The reuse distance for x is defined as the number of distinct memory locations accessed between y and x (including a). If x is the first access to a, its reuse distance is ∞ by definition. For example, Trace 3.1 shows a short sample trace, along with reuse distance for every access. In this trace, four accesses occur between the two accesses to b, which include accesses to only three distinct memory locations (b, c, and d). Thus the reuse distance for the second access to b is 3, as shown.</p><formula xml:id="formula_3">Trace 3.1 a b c d b a c ∞ ∞ ∞ ∞ 3 4 4</formula><p>The reuse distance information is best represented by the reuse distance histogram, which shows the frequency for every reuse distance. We can compute the miss-rate curve (MRC) from the reuse distance histogram. The miss rate for every cache size is equal to the total number of reuse distances that are larger than that cache size. That is, the fraction of the histogram which lies on the right side of the cache size.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.1">Reuse Distance for Memcached</head><p>Traditionally, the reuse distance model has been used to analyze workloads for LRU-based virtual memory systems and caching systems. Memcached workloads pose several new challenges for this reuse distance model. First, Memcached distributes items among different slab classes, according to their sizes. The default slab allocation scheme allocates memory during the cold start. Once the Memcached system reaches its memory limit, replacement is done separately for every slab class. Thus, rather than analyzing the whole Memcached system in a single reuse distance model, we model each slab class separately.</p><p>Second, Memcached applications have some control over the storage content: loading is fully controlled by the application. For a GET request that misses in Memcached, the Memcached server does not automatically load the item. Rather, the application must issue a SET request to load the item in the Memcached server. Furthermore, apart from the server-level evictions due to the LRU replacement policy, Memcached applications are allowed to issue DELETE requests to remove arbitrary items from the server.</p><p>To cope with these challenges, we adapt the reuse distance model and implement it on the Memcached server side. we represent every Memcached request by the three attributes: type of request (GET, SET, DELETE), key hash, and the slab class id for SET requests.</p><p>The SET requests may modify the slab class for a key, and therefore, need an additional slab class attribute. Since the model is implemented on the server side, obtaining the slab class for SET requests is straightforward and can be done before searching for the item in Memcached.</p><p>We use the Olken algorithm <ref type="bibr" target="#b11">[13]</ref> to compute the reuse distance histogram. Our data structure consists of a redblack tree for each slab class. The tree for a slab class includes a node for each key that belongs to that class. Conceptually, the nodes in a tree are ordered with respect to the last (logical) access times of their keys. The Olken tree augments each node by the weight of its subtree (total number of nodes in its subtree). This attribute helps us compute the reuse distance for every incoming access by following the path along the parent pointers.</p><p>Technically, tree nodes are always inserted at the right end of the tree. Therefore, storing the access times is unnecessary. In fact, we only store the weight at tree nodes.</p><p>Different Memcached requests are handled in somewhat different ways. For a GET request, we first compute its reuse distance. Subsequently, we update the tree by removing the old node and inserting a new node. Upon a SET request, we remove the corresponding node from its current tree and insert a node into its new tree (based on its new slab class). Finally, for a DELETE request, we only remove the node from its current tree. Each operation takes O(lg N) where N is the total number of keys.</p><p>For reuse distance analysis, the storage overhead is inevitable. It is linear in the total number of distinct keys. However, since we only store hash values, the overhead may only be a fraction of the total key-value storage.</p><p>To lower the running time overhead, we run the profiler in a producer-consumer framework. Memcached's server threads insert requests into a lock-free queue, while a separate thread sequentially applies the analysis on the items. Overlapping the analysis with Memcached's service times and inter-arrival times significantly reduces its overhead.</p><p>To find the miss-rate curve, we profile the workload under adequate resource provisioning. Memcached allocates slabs on demand, during the initial warmup phase. We assume that under any other provisioning, the slab allocation is proportional to the profiled setting. For instance, suppose that under the profiling scheme, Memcached allocates twice as many slabs for slab 1 as it does for slab 2. The assumption asserts that the same happens under any other provisioning. This is a logical assumption for workloads that can be modeled by a distribution. Moreover, it allows us to distribute the total resource among all slab classes, under any resource provisioning. Once we have the miss rates for all slabs classes, we can compose them to compute the total miss rate for the workload.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4">Resource Provisioning as a Linear Program</head><p>In a single-tenant system, the resource provisioning problem can be described in one of the two ways.</p><p>• Minimize Cost(c m , c s ) such that Lat(c m , c s ) ≤ SLA.</p><p>• Minimize Lat(c m , c s ) such that Cost(c m , c s ) ≤ TCO.</p><p>To formulate these problems as linear programs, we must represent cost and latency as linear functions of c m and c s . Based on our model, cost is a linear function of c m and c s , but latency is only linear in terms of the miss ratio, which is a non-linear function of capacity. However, we observe that the miss ratio curves in our workloads are always convex. That is, the reduction in miss ratio constantly lowers as we increase the capacity. We explain how we can use this assumption to formulate the miss ratio curve as linear constraints. To illustrate, consider the miss ratio curve shown in <ref type="figure" target="#fig_0">Figure 1</ref>. We approximate this curve using three representative points (A, B, and C). Each two consecutive points specify a line, along with one flat line for each of the two endpoints. For each line, we limit the feasibility region to above the line. The intersection specifies a region above the miss ratio curve (shaded area in <ref type="figure" target="#fig_0">Figure 1</ref>). Since we are always interested in minimizing cost and latency (alternatively, capacity and miss ratio), the linear program is guaranteed to output a point on the boundary of this region, which approximates the miss ratio curve. A multi-tenant system introduces more constraints. For example, bounding the total available storage for each level (partitioning), or average latency. Nevertheless, our linear program can be solved efficiently and in polynomial time.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5">Experimental Evaluation</head><p>In this section we report our off-line study for elastic resource provisioning. We compare costs of two different approaches: elastic and proportional. <ref type="figure" target="#fig_0">Figure 1</ref>  The proportional approach fixes the ratio between DRAM and SSD capacities as many current CSPs 1 do.</p><p>On the other hand, the elastic approach, the mechanism ElCached uses, changes the ratio adaptively based on our reuse-distance based miss-rate prediction to achieve better elasticity. That is, different data locality determines the optimal DRAM/SSD allocations to optimize either latency or cost. We first investigate the accuracy of our miss-rate prediction and then, show the increased elasticity of Web caching service with ElCached.</p><p>For these experiments, we use Mutilate <ref type="bibr">[1]</ref> to generate our workloads. Mutilate emulates the ETC workloads at Facebook using key size, value size, and interarrival time distributions given by Atikoglu et al. <ref type="bibr" target="#b0">[2]</ref>. The mean key size and value sizes are respectively 31 and 247 bytes. We use Mutilate to generate two workloads. For the first workload, we use a Zipfian key distribution with α = 1.15. For the second workload, we use an exponential distribution with λ = 10 −6 . We set the both workload to issue 800 million requests to a range of 4 billion keys. Note that this is a limit study to evaluate elasticity of ElCached compared to existing work. Therefore, it does not include the overheads and other tuning aspects of dynamic resource provisioning; data promotion, demotion, eviction overheads and profiling window, reconfiguration frequencies, and its associated efficiencies in time domain.</p><p>Prediction Accuracy We profile the workloads using our model and predict miss rates on a logarithmic scale, and compare the results to measurement. <ref type="figure" target="#fig_1">Figure 2</ref> shows the result for the Zipfian workload. The mean relative error of prediction is 4%. tional approach does not change the ratio between DRAM and SSD. In particular, we use 1:4 ratio following the Pareto principle. On the other hand, the elastic approach continuously changes the ratio based on the reuse-distance based miss-rate prediction. <ref type="figure" target="#fig_3">Figure 3</ref> shows minimum cost per latency for both techniques, and for both workloads. For example, to guarantee the average latency of 700µs for the Zipfian workload, elastic costs 0.7 and proportional costs 8.1 (cost is normalized with respect to the cost of proportional at 1ms). In this case, elastic allocates 60MB/11.7GB while proportional does 1.8GB/7.3GB for DRAM and SSD, respectively. Assuming that CSPs bill tenants proportional to actual cost, elasticity will save costs both for users and CSPs. In particular, for the Zipfian workload, elasticity saves around 60% of cost. Meanwhile, the Exponential workload exhibits around 10% reduction in cost until 250µs latency requirement, but this rapidly changes to more than 70% cost improvement after 300µs. This is because the Exponential workload has much stronger data locality than Zipfian. So DRAM allocation dominates the performance before 300µs.  We also conduct a comparison between elastic and proportional in a multi-tenant case. Here we assume a virtual cloud instance with 3 GB memory. <ref type="figure">Figure 4a</ref> shows latency for the two tenants when partitioning the fixed amount of memory. In particular, proportional partitions memory and allocates each memory and SSD with the fixed ratio of 1:4. On the other hand, elastic predicts an optimal configuration per tenant and tests its feasibility. We compare the elastic approach to one particular memory partition which allocates 1.63 GBs of DRAM for tenant 1 (shown by a line in <ref type="figure">Figure 4a</ref>). As shown in <ref type="figure">Figure 4b</ref>, both approaches result in the same latency for tenant 2, whereas, for tenant 1, elastic improves latency by 5%. Moreover, elastic reduces the cost for both tenants by around 26%. Elastic also saves the total memory consumption by 46% by allocating only 1.63 GB compared to the 3 GB of physical memory. That is the memory consumption of tenant 1 alone, when taking the proportional approach. This means potential revenue for CSP because it could potentially host more tenants as long as other resources (CPU, network, etc.) are available. q q q q q q q q q q q q q q q q q q q q q q q q q q q q q q q q q q q q q q q q q q q q q q q q q q q q q q q q q q q q q q q q q q q q q q q q q q q q q q q q q q q q q q q q q q q q q q q q q  <ref type="figure">Figure 4</ref>: Multi-tenant resource provisioning: (a) latency per DRAM partitioning with proportional SSD size (1:4 ratio) (b) elastic vs proportional with the specified memory partition</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Zipfian Exponential</head></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="6">Online Resource Provisioning</head><p>Our study of online resource provisioning is preliminary and remains as future work. Here, we explain the basics of our online implementation. Memcached allocates memory in units of fixed size (called slabs) until it reaches its memory limit. Thus we can control resource provisioning by dynamically reconfiguring the memory limit parameter. Increasing this parameter allows Memcached to boost memory provision to the new limit. To lower the provision, we must find and deallocate victim slabs. Prior to deallocation, all the items in the victim slabs must be removed from the LRU chains. We choose victim slabs from different size classes to ensure that the number of slabs in different size classes remains proportional to the initial setting. To find a victim slab in each size class, we monitor the activity of all the slabs during a short period of time. Slab activity is defined as the number of distinct items accessed during that period. For each slab, we estimate its activity using a Hyperloglog counter <ref type="bibr" target="#b6">[8]</ref> with logarithmic space overhead. After the monitoring period, we choose the least active slabs as the victim slabs. We keep deallocating slabs until the new memory limit is satisfied.</p><p>Our online analysis consists of a profiling window followed by a release period. During the profiling period, we use the reuse distance analysis to find the miss rate for every cache size. At the end of the profiling window, we formulate and solve a linear program according to the constraints and the objective function. The solution gives the new Memcached and KVD sizes. Then, we reconfigure the ElCached system using our above-mentioned procedure.</p><p>The study of online resource provisioning remains as future work. An important question is how the profiling window length affects the accuracy and optimality of solution. Our future work also includes analyzing the memory and time overheads of the online reuse distance analysis.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="7">Related Work</head><p>Our study is related to previous work on optimizing Web caching applications. For example, Dynacache <ref type="bibr" target="#b2">[4]</ref> optimizes Memcached by profiling workloads and dynamically adjusting memory resources and eviction policies. <ref type="bibr">Saemundsson et al. [14]</ref> introduced MIMIR, a lightweight online profiler for Memcached. Analogous to us, they used a tree-based scheme to estimate reuse distance. To lower the overhead, MIMIR divides the LRU stack into variable-sized buckets. However, contrary to us, MIMIR and Dynacache both assume a fixed size for all cached elements, which isn't the case in Memcached. <ref type="bibr">Hu et al. [10]</ref> introduced LAMA to improve slab allocation in Memcached. Like us, they also estimate the miss ratio for every slab class.</p><p>Reuse distance computation has been well-studied in the past. <ref type="bibr">Mattson et al. [12]</ref> introduced a basic stack simulation algorithm. Olken <ref type="bibr" target="#b11">[13]</ref> gave the first tree-based method using an AVL tree. Ding and Zhong <ref type="bibr" target="#b4">[6]</ref> used a similar technique to approximate reuse distance while reducing the time overhead. Xiang et al. <ref type="bibr" target="#b16">[18]</ref> defined the footprint of a given trace to be the number of distinct elements accessed in the window. They showed that under a certain condition (reuse-window condition) reuse distance is equal to the finite differential of average footprint. We implemented the footprint approach and found its accuracy to be slightly lower than our tree-based algorithm. These techniques all require a linear space overhead. <ref type="bibr">Wires et al. [17]</ref> used counter stacks to approximate the miss ratio curve with sublinear space overhead. These studies can be integrated into ElCached to reduce the space and time overhead in the online analysis.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="8">Conclusion</head><p>In this paper, we described ElCached, a multi-level keyvalue caching system that uses a reuse distance profiler to estimate the miss rate curve across all capacity limits with 4% relative error. ElCached solves the resource pro-visioning problem by formulating it as a linear program. Our single-tenant experiments show that ElCached can reduce the total cost by up to around 60% compared to a proportional resource provisioning scheme. On the other hand, our 2-tenant experiment indicates that by finding the optimal resource provisioning, we can improve latency, cost, and total DRAM usage, compared to a proportional scheme.</p></div><figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_0"><head>Figure 1 :</head><label>1</label><figDesc>Figure 1: Formulating MRC (red curve) as linear constraints: only the points on the blue dashed lines result in optimal solutions.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_1"><head>Figure 2 :</head><label>2</label><figDesc>Figure 2: Miss ratio prediction accuracy of our reuse distance model</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_3"><head>Figure 3 :</head><label>3</label><figDesc>Figure 3: Elastic vs. proportional resource provisioning</figDesc></figure>

			<note place="foot" n="1"> System configurations of (CPU ∝ Memory ∝ Storage) or (CPU ∝</note>
		</body>
		<back>
			<div type="references">

				<listBibl>

<biblStruct xml:id="b0">
	<analytic>
		<title level="a" type="main">Workload analysis of a large-scale key-value store</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Atikoglu</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">B</forename><surname>Xu</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Y</forename><surname>Frachtenberg</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">E</forename><surname>Jiang</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>And</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Paleczny</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">In ACM SIGMETRICS Performance Evaluation Review</title>
		<imprint>
			<biblScope unit="volume">40</biblScope>
			<biblScope unit="page" from="53" to="64" />
			<date type="published" when="2012" />
			<publisher>ACM</publisher>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b1">
	<analytic>
		<title level="a" type="main">Multilevel dram-nand key-value cache</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Choi</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">I</forename><forename type="middle">S</forename><surname>Ahn</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">B</forename><forename type="middle">Y</forename><surname>And</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Kee</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Y.-S</forename><surname>Mlcached</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">8th USENIX Workshop on Hot Topics in Cloud Computing</title>
		<imprint>
			<date type="published" when="2016" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b2">
	<analytic>
		<title level="a" type="main">Dynamic cloud caching</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Cidon</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Eisenman</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Alizadeh</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>And</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Katti</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Dynacache</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">7th USENIX Workshop on Hot Topics in Cloud Computing</title>
		<imprint>
			<date type="published" when="2015" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b3">
	<analytic>
		<title level="a" type="main">Flashstore: high throughput persistent key-value store</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Debnath</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">B</forename><surname>Sengupta</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>And</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">L</forename><forename type="middle">I</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Proceedings of the VLDB Endowment</title>
		<imprint>
			<biblScope unit="volume">3</biblScope>
			<biblScope unit="page" from="1414" to="1425" />
			<date type="published" when="2010" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b4">
	<analytic>
		<title level="a" type="main">Predicting whole-program locality through reuse distance analysis</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Ding</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><surname>And</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Zhong</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Y</forename></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">ACM SIGPLAN Notices (2003)</title>
		<imprint>
			<publisher>ACM</publisher>
			<biblScope unit="volume">38</biblScope>
			<biblScope unit="page" from="245" to="257" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b5">
	<analytic>
		<title level="a" type="main">Distributed caching with memcached</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Fitzpatrick</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">B</forename></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Linux journal</title>
		<imprint>
			<biblScope unit="volume">124</biblScope>
			<biblScope unit="page">5</biblScope>
			<date type="published" when="2004" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b6">
	<analytic>
		<title level="a" type="main">Hyperloglog: the analysis of a near-optimal cardinality estimation algorithm</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Flajolet</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><surname>Fusy</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">´</forename><forename type="middle">E</forename><surname>Gandouet</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">O</forename><surname>And</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Meunier</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">F</forename></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">DMTCS Proceedings</title>
		<imprint>
			<biblScope unit="page">1</biblScope>
			<date type="published" when="2008" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b7">
	<monogr>
		<title level="m" type="main">Mcdipper: A key-value cache for flash storage</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Gartrell</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Srinivasan</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Alger</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">B</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">And</forename><surname>Sun-Dararajan</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">K</forename></persName>
		</author>
		<imprint>
			<date type="published" when="2013" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b8">
	<analytic>
		<title level="a" type="main">Lama: Optimized locality-aware memory allocation for key-value cache</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">H</forename><forename type="middle">U</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">X</forename><surname>Wang</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">X</forename><surname>Li</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Y</forename><surname>Zhou</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">L</forename><surname>Luo</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Y</forename><surname>Ding</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><surname>Jiang</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>And</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Wang</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Z</forename></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">2015 USENIX Annual Technical Conference (USENIX ATC 15</title>
		<imprint>
			<date type="published" when="2015" />
			<biblScope unit="page" from="57" to="69" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b9">
	<analytic>
		<title level="a" type="main">Silt: A memory-efficient, high-performance key-value store</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Lim</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">H</forename><surname>Fan</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">B</forename><surname>Andersen</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><forename type="middle">G</forename><surname>And</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Kaminsky</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the Twenty-Third ACM Symposium on Operating Systems Principles</title>
		<meeting>the Twenty-Third ACM Symposium on Operating Systems Principles</meeting>
		<imprint>
			<publisher>ACM</publisher>
			<date type="published" when="2011" />
			<biblScope unit="page" from="1" to="13" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b10">
	<analytic>
		<title level="a" type="main">Evaluation of multilevel memories</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Mattson</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE Transactions on Magnetics</title>
		<imprint>
			<biblScope unit="volume">7</biblScope>
			<biblScope unit="issue">4</biblScope>
			<biblScope unit="page" from="814" to="819" />
			<date type="published" when="1971" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b11">
	<monogr>
		<title level="m" type="main">Efficient methods for calculating the success function of fixed-space replacement policies</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Olken</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">F</forename></persName>
		</author>
		<imprint>
			<date type="published" when="1981" />
		</imprint>
		<respStmt>
			<orgName>Lawrence Berkeley Lab., CA (USA</orgName>
		</respStmt>
	</monogr>
<note type="report_type">Tech. rep</note>
</biblStruct>

<biblStruct xml:id="b12">
	<analytic>
		<title level="a" type="main">Dynamic performance profiling of cloud caches</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Saemundsson</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><surname>Bjornsson</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">H</forename><surname>Chockler</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">G</forename><surname>And</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Vigfusson</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Y</forename></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the ACM Symposium on Cloud Computing</title>
		<meeting>the ACM Symposium on Cloud Computing</meeting>
		<imprint>
			<publisher>ACM</publisher>
			<date type="published" when="2014" />
			<biblScope unit="page" from="1" to="14" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b13">
	<monogr>
		<title/>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Sanfilippo</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>And</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Noordhuis</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><surname>Redis</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2009" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b14">
	<analytic>
		<title level="a" type="main">Citrusleaf: A real-time nosql db which preserves acid</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">V</forename><surname>Srinivasan</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Bulkowski</forename><surname>And</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">B</forename></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the VLDB Endowment</title>
		<meeting>the VLDB Endowment</meeting>
		<imprint>
			<date type="published" when="2011" />
			<biblScope unit="volume">4</biblScope>
			<biblScope unit="page">12</biblScope>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b15">
	<analytic>
		<title level="a" type="main">Characterizing storage workloads with counter stacks</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Wires</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Ingram</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Drudi</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Z</forename><surname>Harvey</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">N</forename><forename type="middle">J</forename><surname>And</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Warfield</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">11th USENIX Symposium on Operating Systems Design and Implementation</title>
		<imprint>
			<date type="published" when="2014" />
			<biblScope unit="page" from="335" to="349" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b16">
	<analytic>
		<title level="a" type="main">Linear-time modeling of program working set in shared cache</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Xiang</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">X</forename><surname>Bao</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">B</forename><surname>Ding</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><surname>And</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Gao</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Y</forename></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Parallel Architectures and Compilation Techniques (PACT), 2011 International Conference on</title>
		<imprint>
			<publisher>IEEE</publisher>
			<date type="published" when="2011" />
			<biblScope unit="page" from="350" to="360" />
		</imprint>
	</monogr>
</biblStruct>

				</listBibl>
			</div>
		</back>
	</text>
</TEI>
