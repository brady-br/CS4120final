<?xml version="1.0" encoding="UTF-8"?>
<TEI xmlns="http://www.tei-c.org/ns/1.0" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
xsi:schemaLocation="http://www.tei-c.org/ns/1.0 /Users/atharsefid/Desktop/grobid-0.5.3/grobid-home/schemas/xsd/Grobid.xsd"
 xmlns:xlink="http://www.w3.org/1999/xlink">
	<teiHeader xml:lang="en">
		<encodingDesc>
			<appInfo>
				<application version="0.5.3" ident="GROBID" when="2020-09-29T02:54+0000">
					<ref target="https://github.com/kermitt2/grobid">GROBID - A machine learning software for extracting information from scholarly documents</ref>
				</application>
			</appInfo>
		</encodingDesc>
		<fileDesc>
			<titleStmt>
				<title level="a" type="main">Efficient QoS for Multi-Tiered Storage Systems</title>
			</titleStmt>
			<publicationStmt>
				<publisher/>
				<availability status="unknown"><licence/></availability>
			</publicationStmt>
			<sourceDesc>
				<biblStruct>
					<analytic>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Ahmed</forename><surname>Elnably</surname></persName>
							<affiliation key="aff0">
								<orgName type="institution" key="instit1">Rice University</orgName>
								<orgName type="institution" key="instit2">Rice University</orgName>
								<orgName type="institution" key="instit3">VMware Inc</orgName>
								<orgName type="institution" key="instit4">Rice University</orgName>
							</affiliation>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Hui</forename><surname>Wang</surname></persName>
							<affiliation key="aff0">
								<orgName type="institution" key="instit1">Rice University</orgName>
								<orgName type="institution" key="instit2">Rice University</orgName>
								<orgName type="institution" key="instit3">VMware Inc</orgName>
								<orgName type="institution" key="instit4">Rice University</orgName>
							</affiliation>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Ajay</forename><surname>Gulati</surname></persName>
							<affiliation key="aff0">
								<orgName type="institution" key="instit1">Rice University</orgName>
								<orgName type="institution" key="instit2">Rice University</orgName>
								<orgName type="institution" key="instit3">VMware Inc</orgName>
								<orgName type="institution" key="instit4">Rice University</orgName>
							</affiliation>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Peter</forename><surname>Varman</surname></persName>
							<affiliation key="aff0">
								<orgName type="institution" key="instit1">Rice University</orgName>
								<orgName type="institution" key="instit2">Rice University</orgName>
								<orgName type="institution" key="instit3">VMware Inc</orgName>
								<orgName type="institution" key="instit4">Rice University</orgName>
							</affiliation>
						</author>
						<title level="a" type="main">Efficient QoS for Multi-Tiered Storage Systems</title>
					</analytic>
					<monogr>
						<imprint>
							<date/>
						</imprint>
					</monogr>
				</biblStruct>
			</sourceDesc>
		</fileDesc>
		<profileDesc>
			<abstract>
				<p>Multi-tiered storage systems using tiers of SSD and traditional hard disk is one of the fastest growing trends in the storage industry. Although using multiple tiers provides a flexible trade-off in terms of IOPS performance and storage capacity, we believe that providing performance isolation and QoS guarantees among various clients, gets significantly more challenging in such environments. Existing solutions focus mainly on either disk-based or SSD-based storage backends. In particular, the notion of IO cost that is used by existing solutions gets very hard to estimate or use. In this paper, we first argue that providing QoS in multi-tiered systems is quite challenging and existing solutions aren&apos;t good enough for such cases. To handle their drawbacks, we use a model of storage QoS called as reward scheduling and a corresponding algorithm, which favors the clients whose IOs are less costly on the back-end storage array for reasons such as better locality, read-mostly sequentiality, smaller working set as compared to SSD allocation etc. This allows for higher efficiency of the underlying system while providing desirable performance isolation. These results are validated using a simulation-based modeling of a multi-tiered storage system. We make a case that QoS in multi-tiered storage is an open problem and hope to encourage future research in this area.</p>
			</abstract>
		</profileDesc>
	</teiHeader>
	<text xml:lang="en">
		<body>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="1">Introduction</head><p>This paper raises issues that arise in providing QoS in multi-tiered storage architectures, and presents a resource allocation model and scheduling framework suited for this situation. Two major trends motivate this work. The first is the growth in virtualized data centers and public clouds hosted on shared physical resources. In these cases, paying customers increasingly insist on receiving certain performance SLAs in terms of CPU, memory and IO resource allocation similar to what they would experience in a dedicated infrastructure. However, as we argue below, existing QoS models for storage do not address this need adequately.</p><p>The second driver is the rapid spread of multi-tiered storage systems that employ aggressive SSD-based tiering or caching within storage devices that are centralized <ref type="bibr" target="#b1">[2]</ref><ref type="bibr" target="#b2">[3]</ref><ref type="bibr">[4]</ref><ref type="bibr" target="#b3">[5]</ref>, or created using local storage from virtualized hosts <ref type="bibr" target="#b0">[1]</ref>. These solutions boost performance while lowering cost, but complicate the (already complex) storage resource allocation problem significantly by requiring the management of heterogeneous devices. Storage QoS needs to be aware of the massive performance differences across tiers in order to provide performance isolation while maintaining high efficiency of the underlying devices.</p><p>In this paper we discuss how the significant differences in speed between SSD and disk accesses makes traditional proportional-share resource allocation models unsuitable in meeting client's expectations. The key challenge is that existing IO schedulers rely on some notion of IO cost to do accounting for IOs for future scheduling. Estimating this cost is critical and also hard in such multi-tiered systems. To some extent, this problem is present even in traditional storage systems where hard disks have different service times for random vs. sequential IOs and SSDs have the same issue for read vs. write IOs. In case of multi-tiered systems this problem becomes quite acute and needs further attention.</p><p>We adapt a QoS performance model called reward allocation that was proposed in <ref type="bibr" target="#b6">[8,</ref><ref type="bibr" target="#b7">9]</ref> as an approach to handle this situation. The idea behind our proposed reward-based QoS model is to explicitly favor applications that make more efficient use of the resources, rather than use the gains from one application to subsidize the performance of under-performing applications. The subsidy model exemplified by proportional sharing is currently the most common solution for resource allocation in storage systems (see Section 2). In this paper, we examine how well a black-box storage model using only the measured response times at the host is able to provide reward discrimination. Our aim is not to present a final solution that works under all circumstances, but rather to create a discussion on the effect of tiered storage and application expectations on the required QoS directions for future storage systems.</p><p>The rest of the paper is organized as follows. In Section 2 we motivate and define our problem, and compare it with existing approaches. In Section 3 we describe our reward scheduling algorithm. We present simulation results in Section 4, and conclude in Section 5. <ref type="figure" target="#fig_0">Figure 1</ref> shows a schematic model of our tiered-storage architecture. Client requests are directed to the storage array. Within the array, the requests are sent to the queue of either the SSD or hard disk (HD) tier, from where they are served based on the array's scheduling priorities. The scheduler uses proportional share scheduling to choose which request to dispatch to the array next.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2">Overview</head><p>We motivate our reward QoS model using an example. Consider two clients A and B with equal weights. For the base case we consider the situation where all accesses are from HD tier, with an average service time of 10ms. A single hard disk system in this case provides an aggregate throughput of 100 IOs/sec (IOPS), equally shared between the two clients. Now consider what happens when the hit ratio of A in to SSD tier increases from 0 to 2/3. Assume that an SSD access takes 50Âµs. The system completes IOs at the rate of 6 IOs every 40ms or 150 IOPS. Each client receives 75 IOPS.</p><p>We argue that proportional sharing as described above is not ideal for either the client or the system. With proportional sharing the throughputs of both clients increases when the hit ratio of client A improves. However, A does not experience the same increase in IOPS that it would have on a dedicated infrastructure. In a dedicated system (with sole access to the HD and SSD), its IOPS performance will increase 300% when its hit ratio increases to 2/3. In the shared infrastructure its IOPS increases by a paltry 50%. With additional clients sharing the system the performance improvement will be even smaller. In a pay-for-services situation, the fact that A is actually subsidizing the improved performance of B may be considered unfair (A may be paying for SSD use, or have development costs for cache friendliness). In some cases, B may also object to receiving additional IOPS if they cost extra.</p><p>The reward allocation model <ref type="bibr" target="#b6">[8,</ref><ref type="bibr" target="#b7">9]</ref> emulates a client's performance profile when running on a dedicated infrastructure. In this example, the increased IOPS resulting from A's better hit ratio will all be directed to A, while B's allocation will remain unchanged. Furthermore, since the resources are directed towards the more efficient client, the system throughput will be higher. The reward allocation model will modify the ratio in which A and B are served, from 1 : 1 to 3 : 1, increasing the overall system throughput to 200 IOPS. Furthermore, B continues to receive 50 IOPS, while A triples its throughput to 150 IOPS (as it would expect when its SSD hit ratio increases to 2/3).</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.1">Related Work</head><p>There has been substantial work towards proportional share scheduling for network IO and CPU allocation <ref type="bibr" target="#b8">[10]</ref>, <ref type="bibr" target="#b22">[24]</ref>, <ref type="bibr" target="#b5">[7]</ref>. These schemes have since been extended to handle the constraints and requirements of storage and IO scheduling <ref type="bibr">[11-14, 17, 21, 23, 25, 27]</ref>. Reservation and limit controls for storage servers were introduced in <ref type="bibr" target="#b11">[13,</ref><ref type="bibr" target="#b14">16,</ref><ref type="bibr" target="#b24">26]</ref>. These models provide strict proportional allocation based on static shares (possibly subject to reservation and limit constraints). In contrast, our work suggests changing shares to adapt to the behavior of the workload, rewarding well-behaved clients by targeted allocation rather than simply distributing the gains over all workloads. This characteristic is a desirable property of multi-tiered storage systems, where changes in access locality (and hit ratio) can drastically alter an application's profile in different execution phases.</p><p>The reward allocation model in <ref type="bibr" target="#b6">[8]</ref> dealt with sequential IOs in a multi-tiered system. The model in <ref type="bibr" target="#b7">[9]</ref> allows parallel operations and uses the measured hit ratio of the SSD to do reward scheduling. However, such hit ratio information is generally not available at the host level.</p><p>A number of papers have proposed time-quanta based IO allocation <ref type="bibr">[6, 18-20, 22, 23]</ref>.The motivation in these schemes is to isolate fast sequential IOs from slower random IOs <ref type="bibr" target="#b17">[19,</ref><ref type="bibr" target="#b20">22,</ref><ref type="bibr" target="#b21">23]</ref> or segregate slow SSD writes from faster reads <ref type="bibr" target="#b16">[18]</ref>; however, we target multi-tiered storage in this paper. Time-quantum based approaches can be seen as a complementary method to our tag-based scheduling approach. The major issue with time quanta based allocation is the latency jitter caused by waiting for all remaining clients to finish their allocated quantum before scheduling pending requests. This also reduces the overall concurrency at the storage device causing lower throughput. In contrast, the method in this paper is a finegrained allocation where client requests are interleaved at the level of individual requests, preventing the latency jitter.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Algorithm 1: Basic Reward Scheduling Algorithm</head><p>RequestArrival (request r, client j, time t) if Task j Queue empty then Add j to set of active clients A ; sTag j = max(sTag j , t); Add r to queue of task j with tag sTag j ; else Add r to queue of task j with timestamp t;</p><p>ScheduleRequest ( ) Dispatch request with min j {sTag j : j â A };</p><formula xml:id="formula_0">AdjustTags (time t) minTag = min j {sTag j : j â A }; â = minTag -t; â j â A : sTag j = sTag j â â; RequestCompletion (task j, time t) Â¯ Î¦ j = UpdateResponseTime( j, Î¦ j );</formula><p>Remove completed request from queue; sTag j = sTag j + Â¯ Î¦ j /Ï j ; AdjustTags(t); if Task j Queue empty then</p><p>Remove j from set of active clients A ; ScheduleRequest();</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3">Reward Scheduling Algorithm</head><p>Each client i is assigned a weight Ï i to represent its relative priority. The reward scheduling algorithm maintains a queue per client and a tag for each client queue. When invoked, the scheduler dispatches the request with the smallest tag to the storage array. A high level description of the algorithm is shown in Algorithm 1.</p><p>In order to do IO cost accounting, the scheduler maintains a running average of the response times of the last N (a configurable parameter) requests of each client. Since the storage system is treated as a black box, the response times is the elapsed time between the dispatched time and the time the request completes.</p><p>When a request from client j completes service, procedure RequestCompletion is invoked. The running average response time of client j, Â¯ Î¦ j is updated to include the completed request using function UpdateResponseTime( ). This average is used to compute the next value of sTag j by incrementing its current value by Â¯ Î¦ j /Ï j . Thus tags of successive requests of the client are spaced by an amount that is proportional to the average response time over the last N requests, and inversely proportional to the static weight of the client. In this way, clients who complete requests faster are given priority over those with slower requests, as are clients with higher static weights.</p><p>Procedure RequestArrival adds the request to the queue; if it is the only request it assigns it a starting tag equal to the larger of the current time or the last tag value for this client. The AdjustTags procedure is needed to synchronize the tags of requests already in the system with newly arriving requests. This is the same synchronization mechanism used in <ref type="bibr" target="#b10">[12,</ref><ref type="bibr" target="#b11">13]</ref>.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4">Preliminary Evaluation</head><p>We experimented with two different setups: (1) Simulation-based and (2) Linux-based real system. In first, we created a simulation model of a multi-tiered storage system using Yacsim <ref type="bibr" target="#b13">[15]</ref> simulation environment. We created a system with 1 HD and 1 SSD. We used a simple SSD model and compared the qualitative behavior to a storage system consisting of a single HD and a single SSD device. We used SSD read time to be exponentially distributed with a mean of 200Âµsec. For the HD the service time is exponentially distributed with a mean of 10 ms.</p><p>We also implemented a prototype on Linux by interposing a reward scheduler in the IO path in user space. The micro-benchmarks are made to access storage devices through this user-space process. Requests are dispatched to the underlying storage devices using our scheduler. Raw IO is performed to eliminate the influence of buffer caching. We present two experiments showing different aspects of reward scheduling.</p><p>Hit Ratio Variation: In this experiment, we used two workloads and varied the hit-ratio in SSD tier of one of the workloads while keeping the other workload's hit ratio at 100%. We also varied the weights of the workloads to three different values. Each workload is issuing 100% random read request with a backlog of 100 requests at all times. <ref type="table">Table 1 and 2</ref> show the results using our Linuxbased testbed and simulation-based storage system.</p><p>Note that the actual achieved ratio in terms of IOPS is different than the weights for different hit-ratio values. This is due to the reward scheduling nature of our algorithm. One can also verify that the IOPS-ratios obtained in various cases are similar to the latency-ratios of different workloads. For example, when hit-ratio = 0.2, the latency of the workload B = 0.8 Ã 10 + 0.2 Ã 0.2 = 8.04 ms, and the latency of workload A is 0.2 ms. In this case the actual ratio of IOPS is close to 40.2. Similar computation can be performed for other cases as well.    <ref type="table">Table 2</ref>: Simulation-based test: IOPS observed by two workloads when hit-ratio of workload B is varied from 0.2 to 1 and it is kept fixed at 1 for workload A.</p><p>Next we compared the behavior of Reward scheduling and Linux CFQ scheduling. The storage server includes a 1TB SCSI hard disk and 80GB SSD. Two continuously backlogged workloads issued random read requests to the hard disk or the SSD, based on the hit ratio. Each workload had a weight of 0.5. Workload 2 had a fixed hit ratio of 0.4 throughout the experiment. The hit ratio of workload 1 is 0.6 from time 0 to time 200s, which then increases to 0.9 from time 200s to 400s, and then comes back to 0.6 after that.</p><p>Figures 2 (a) and (b) show the performance of reward scheduling using simulation and Linux-based setups respectively. Here, workload 1 gets much higher throughput during 200 to 400 second interval and workload 2 sees no appreciable change in performance. <ref type="figure" target="#fig_1">Fig- ure 2 (c)</ref> shows the performance of Linux CFQ scheduling. In time interval (200-400 seconds), both workloads get more throughput as the system capacity increases due to the higher hit ratio of workload 1. The additional capacity is shared by both workloads. As can be seen, reward scheduling allocates all excess capacity to workload 1, while a fair scheduler tries to equalize the IOs subject to hit ratio constraints. The overall throughput of CFQ scheduler is lower, as is the amount obtained by workload 1. Read/Write Ratio Variation: In this experiment we used only the SSD as the storage device (i.e. hit ratio = 100%) and varied the read write (RW) ratio. Both workloads have equal weights and RW ratio equal to 0.5. At time t = 5 seconds, workload 1's RW ratio changes to 1.0. <ref type="figure" target="#fig_3">Figure 3 (a)</ref> shows the behavior of the two workloads when the disk queue was set to 1.</p><p>We then increased the disk queue length and <ref type="figure" target="#fig_3">Fig- ure 3 (b)</ref> shows the allocation when the disk queue was set to 8. We see that workload 2 got some of the gains and the gain of workload 1 reduced compared to (a). The reason is because the estimator gets diluted as the Q length gets larger, since all of them include the fixed portion of the delay introduced by queuing the requests in the disk queue. This shows the caveats in using average latency as the estimator. We are looking at better estimators that would work more robustly in different situations.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5">Discussion and Open Issues</head><p>In this paper we discuss why traditional proportionalshare scheduling may be inadequate in shared multitiered storage systems, where the access times can vary drastically due to different tiers and workloads phases. The reward scheduling model allocates resources to clients based on their dynamic behavior and emulates their performance as if they were run in isolation. For each client, we allocate IOPS based on its average response time and overall weight.</p><p>One key open issue is teasing apart queuing delay or a component of it from the response time. Array vendors can get service times with much better accuracy, since they control the underlying tiers and have relatively smaller queue depth per device. Doing it from outside the array will show some differentiation but not enough in cases of large queue depths.</p><p>We are also investigating the relationship between reward scheduling and keeping a queue size per client. Thus for each finished request, only the corresponding queue can issue an extra request. Having static queue sizes won't work, but one can try to make them dynamic by using a control equation like PARDA <ref type="bibr" target="#b9">[11]</ref>. Also the behavior of a workload is dependent on the hit-ratio of other workloads. We are looking to reduce this interference as part of future work. We are also investigating if reward scheduling can introduce any feedback loop where a workload can keep on getting higher hit rate due to the preference given by the scheduler.</p><p>We hope that the research community will pay more attention to the QoS problem in multi-tiered systems, which are rapidly becoming ubiquitous. Another very relevant variant of this problem is to provide strict latency and IOPS guarantees in such systems by combining techniques for block placement across tiers and scheduling per tier. Doing admission control of workloads in such systems also remains an open and challenging problem that will require better modeling techniques.</p></div><figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_0"><head>Figure 1 :</head><label>1</label><figDesc>Figure 1: Reward Scheduler for Multi-Tiered Storage</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_1"><head>Figure 2 :</head><label>2</label><figDesc>Figure 2: Workload 1 changes hit ratio from 0.6 to 0.9 from time 200s to 400s.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_3"><head>Figure 3 :</head><label>3</label><figDesc>Figure 3: Workload 1 changes read ratio from 0.5 to 1 after 5 seconds.</figDesc></figure>
		</body>
		<back>
			<div type="references">

				<listBibl>

<biblStruct xml:id="b0">
	<monogr>
				<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Nutanix</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Cluster</surname></persName>
		</author>
		<ptr target="http://www.nutanix.com/resources.html" />
		<title level="m">The new virtualized datacenter building block</title>
		<imprint>
			<date type="published" when="2011" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b1">
	<monogr>
		<title level="m" type="main">EMC: Fully automate storage tiering</title>
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b2">
	<analytic>
		<title/>
		<ptr target="http://www.netapp.com/us/products/storage-systems/flash-cache/" />
	</analytic>
	<monogr>
		<title level="j">NetApp: Flash cache</title>
		<imprint>
			<date type="published" when="2012" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b3">
	<monogr>
				<ptr target="http://www.tintri.com" />
		<title level="m">Tintri: Vm aware storage</title>
		<imprint>
			<date type="published" when="2012" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b4">
	<analytic>
		<title level="a" type="main">Disk scheduling with quality of service guarantees</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Bruno</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Brustoloni</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Gabber</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">E</forename><surname>Ozden</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">B</forename><surname>And</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Silberschatz</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the IEEE International Conference on Multimedia Computing and Systems</title>
		<meeting>the IEEE International Conference on Multimedia Computing and Systems</meeting>
		<imprint>
			<date type="published" when="1999" />
			<biblScope unit="page" from="400" to="405" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b5">
	<analytic>
		<title level="a" type="main">Analysis and simulation of a fair-queuing algorithm</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Demers</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Keshav</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>And</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Shenker</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">ACM SIGCOMM</title>
		<imprint>
			<date type="published" when="1989" />
			<biblScope unit="page" from="1" to="12" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b6">
	<analytic>
		<title level="a" type="main">Reward scheduling for qos in cloud applications</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Elnably</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Du</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">K</forename><surname>And</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Varman</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">12th IEEE/ACM International Symposium on Cluster, Cloud, and Grid Computing</title>
		<imprint>
			<date type="published" when="2012" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b7">
	<analytic>
		<title level="a" type="main">Application-sensitive qos scheduling in storage servers</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Elnably</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>And</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Varman</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">ACM Symposium on Parallelism in Algorithms and Architecture</title>
		<imprint>
			<date type="published" when="2012" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b8">
	<analytic>
		<title level="a" type="main">Start-time fair queueing: a scheduling algorithm for integrated services packet switching networks</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Goyal</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><surname>Vin</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">H</forename><forename type="middle">M</forename><surname>And</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Chen</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">H</forename></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE/ACM Transactions on Networking</title>
		<imprint>
			<date type="published" when="1997" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b9">
	<analytic>
		<title level="a" type="main">PARDA: Proportional Allocation of Resources for Distributed Storage Access</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Gulati</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Ahmad</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">I</forename><surname>And</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Waldspurger</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Usenix FAST &apos;09</title>
		<imprint>
			<date type="published" when="2009" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b10">
	<analytic>
		<title level="a" type="main">An arrival curve based approach for qos in shared storage systems</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Gulati</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Merchant</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>And</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><forename type="middle">J</forename><surname>Varman</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Pclock</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">ACM SIGMETRICS</title>
		<imprint>
			<date type="published" when="2007" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b11">
	<analytic>
		<title level="a" type="main">Handling throughput variability for hypervisor IO scheduling</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Gulati</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Merchant</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>And</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><forename type="middle">J</forename><surname>Varman</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Mclock</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">USENIX OSDI</title>
		<imprint>
			<date type="published" when="2010" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b12">
	<analytic>
		<title level="a" type="main">Interposed proportional sharing for a storage service utility</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Jin</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">W</forename><surname>Chase</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><forename type="middle">S</forename><surname>And</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Kaur</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">ACM Sigmetrics</title>
		<imprint>
			<date type="published" when="2004" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b13">
	<monogr>
		<title level="m" type="main">Yacsim reference manual</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Jump</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><forename type="middle">R</forename></persName>
		</author>
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b14">
	<analytic>
		<title level="a" type="main">Triage: Performance differentiation for storage systems using adaptive control</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Karlsson</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Karamanolis</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><surname>And</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Zhu</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">X</forename></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Trans. Storage</title>
		<imprint>
			<biblScope unit="page" from="457" to="480" />
			<date type="published" when="2005" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b15">
	<analytic>
		<title level="a" type="main">Towards higher disk head utilization: extracting free bandwidth from busy disk drives</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Lumb</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><forename type="middle">R</forename><surname>Schindler</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Ganger</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">G</forename><forename type="middle">R</forename><surname>Nagle</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><forename type="middle">F</forename><surname>And</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Riedel</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">E</forename></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Usenix OSDI</title>
		<imprint>
			<date type="published" when="2000" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b16">
	<analytic>
		<title level="a" type="main">Fios: A fair, efficient flash i/o scheduler</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Park</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>And</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">K</forename><surname>Shen</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">FAST</title>
		<imprint>
			<date type="published" when="2012" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b17">
	<analytic>
		<title level="a" type="main">Efficient guaranteed disk request scheduling with fahrrad</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Povzner</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Kaldewey</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><surname>Brandt</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Golding</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Wong</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><forename type="middle">M</forename><surname>And</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Maltzahn</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">ACM EuroSys</title>
		<imprint>
			<date type="published" when="2008" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b18">
	<analytic>
		<title level="a" type="main">Choosing an I/O Scheduler for Red Hat Enterprise Linux 4 and the 2.6 Kernel</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Shakshober</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><forename type="middle">J</forename></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Red Hat magazine</title>
		<imprint>
			<date type="published" when="2005-06" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b19">
	<analytic>
		<title level="a" type="main">Cello: a disk scheduling framework for next generation operating systems</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Shenoy</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><forename type="middle">J</forename><surname>And</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Vin</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">H</forename><forename type="middle">M</forename></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">In ACM SIGMET-RICS</title>
		<imprint>
			<date type="published" when="1998" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b20">
	<analytic>
		<title level="a" type="main">High Throughput Disk Scheduling with Fair Bandwidth Distribution</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><surname>Valente</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Checconi</forename><surname>And</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">F</forename></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE Transactions on Computers</title>
		<imprint>
			<biblScope unit="issue">9</biblScope>
			<biblScope unit="page" from="1172" to="1186" />
			<date type="published" when="2010" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b21">
	<analytic>
		<title level="a" type="main">Argon:Performance Insulation for Shared Storage Servers</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Wachs</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Abd-El-Malek</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Thereska</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">E</forename><surname>And</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Ganger</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">G</forename></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Usenix FAST &apos;07</title>
		<imprint>
			<date type="published" when="2007" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b22">
	<analytic>
		<title level="a" type="main">Lottery scheduling: flexible proportional-share resource management</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Waldspurger</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><forename type="middle">A</forename><surname>And</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Weihl</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">W</forename><forename type="middle">E</forename></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Usenix OSDI</title>
		<imprint>
			<date type="published" when="1994" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b23">
	<analytic>
		<title level="a" type="main">Integrated QoS management for disk I/O</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Wijayaratne</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>And Reddy</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><forename type="middle">L</forename></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the IEEE International Conference on Multimedia Computing and Systems</title>
		<meeting>the IEEE International Conference on Multimedia Computing and Systems</meeting>
		<imprint>
			<date type="published" when="1999" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b24">
	<analytic>
		<title level="a" type="main">Storage performance as managed resource</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Wong</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><surname>Goldering</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Lin</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><surname>And Becker-Szendy</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Zygaria</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. of RTAS</title>
		<meeting>of RTAS</meeting>
		<imprint>
			<date type="published" when="2006-04" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b25">
	<analytic>
		<title level="a" type="main">Storage performance virtualization via throughput and latency control</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Zhang</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Subramaniam</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Wang</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Q</forename><surname>Riska</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>And</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Riedel</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">E</forename></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Trans. Storage</title>
		<imprint>
			<biblScope unit="page" from="283" to="308" />
			<date type="published" when="2006-08" />
		</imprint>
	</monogr>
</biblStruct>

				</listBibl>
			</div>
		</back>
	</text>
</TEI>
