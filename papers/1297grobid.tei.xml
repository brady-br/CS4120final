<?xml version="1.0" encoding="UTF-8"?>
<TEI xmlns="http://www.tei-c.org/ns/1.0" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
xsi:schemaLocation="http://www.tei-c.org/ns/1.0 /Users/atharsefid/Desktop/grobid-0.5.3/grobid-home/schemas/xsd/Grobid.xsd"
 xmlns:xlink="http://www.w3.org/1999/xlink">
	<teiHeader xml:lang="en">
		<encodingDesc>
			<appInfo>
				<application version="0.5.3" ident="GROBID" when="2020-09-29T01:53+0000">
					<ref target="https://github.com/kermitt2/grobid">GROBID - A machine learning software for extracting information from scholarly documents</ref>
				</application>
			</appInfo>
		</encodingDesc>
		<fileDesc>
			<titleStmt>
				<title level="a" type="main">Insights from the Inside: A View of Botnet Management from Infiltration</title>
			</titleStmt>
			<publicationStmt>
				<publisher/>
				<availability status="unknown"><licence/></availability>
			</publicationStmt>
			<sourceDesc>
				<biblStruct>
					<analytic>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Chia</forename><surname>Yuan Cho</surname></persName>
							<affiliation key="aff0">
								<orgName type="institution" key="instit1">UC Berkeley</orgName>
								<orgName type="institution" key="instit2">Carnegie Mellon University ‡ ICSI</orgName>
							</affiliation>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Juan</forename><surname>Caballero</surname></persName>
							<affiliation key="aff0">
								<orgName type="institution" key="instit1">UC Berkeley</orgName>
								<orgName type="institution" key="instit2">Carnegie Mellon University ‡ ICSI</orgName>
							</affiliation>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Chris</forename><surname>Grier</surname></persName>
							<affiliation key="aff0">
								<orgName type="institution" key="instit1">UC Berkeley</orgName>
								<orgName type="institution" key="instit2">Carnegie Mellon University ‡ ICSI</orgName>
							</affiliation>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Vern</forename><surname>Paxson</surname></persName>
							<affiliation key="aff0">
								<orgName type="institution" key="instit1">UC Berkeley</orgName>
								<orgName type="institution" key="instit2">Carnegie Mellon University ‡ ICSI</orgName>
							</affiliation>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Dawn</forename><surname>Song</surname></persName>
							<affiliation key="aff0">
								<orgName type="institution" key="instit1">UC Berkeley</orgName>
								<orgName type="institution" key="instit2">Carnegie Mellon University ‡ ICSI</orgName>
							</affiliation>
						</author>
						<title level="a" type="main">Insights from the Inside: A View of Botnet Management from Infiltration</title>
					</analytic>
					<monogr>
						<imprint>
							<date/>
						</imprint>
					</monogr>
				</biblStruct>
			</sourceDesc>
		</fileDesc>
		<profileDesc>
			<abstract>
				<p>Recent work has leveraged botnet infiltration techniques to track the activities of bots over time, particularly with regard to spam campaigns. Building on our previous success in reverse-engineering C&amp;C protocols, we have conducted a 4-month infiltration of the MegaD botnet, beginning in October 2009. Our infiltration provides us with constant feeds on MegaD&apos;s complex and evolving C&amp;C architecture as well as its spam operations , and provides an opportunity to analyze the botmasters&apos; operations. In particular, we collect significant evidence on the MegaD infrastructure being managed by multiple botmasters. Further, FireEye&apos;s attempt to shutdown MegaD on Nov. 6, 2009, which occurred during our infiltration, allows us to gain an inside view on the takedown and how MegaD not only survived it but bounced back with significantly greater vigor. In addition, we present new techniques for mining information about botnet C&amp;C architecture: &quot;Google hacking&quot; to dig out MegaD C&amp;C servers and &quot;milking&quot; C&amp;C servers to extract not only the spectrum of commands sent to bots but the C&amp;C&apos;s overall structure. The resulting overall picture then gives us insight into MegaD&apos;s management structure, its complex and evolving C&amp;C architecture, and its ability to withstand takedown.</p>
			</abstract>
		</profileDesc>
	</teiHeader>
	<text xml:lang="en">
		<body>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="1">Introduction</head><p>Researchers have recently gained new, detailed insights into the operation of botnets via infiltration: running either live bots in controlled environments <ref type="bibr" target="#b7">[9,</ref><ref type="bibr" target="#b12">14]</ref>, or custom programs that mimic bot command-and-control (C&amp;C) activity <ref type="bibr" target="#b6">[8,</ref><ref type="bibr" target="#b11">13,</ref><ref type="bibr" target="#b14">16]</ref>. Such work has primarily aimed at monitoring the instructions issued to bots in order to investigate how botmasters employ their botnets and to assess botnet population dynamics. Less studied has been the issue of botnet management: the dynamics of how botmasters change their botnets, either in terms of altering elements of a current "campaign" or reconstructing the botnet itself in the face of significant disruption, and the question of whether a botnet infrastructure may have multiple managers (botmasters).</p><p>In this work we undertake such an analysis based on a 4-month infiltration of the MegaD botnet begun in Oct.</p><p>2009. While much of our measurement drew upon our earlier work in reverse-engineering MegaD's C&amp;C protocol <ref type="bibr" target="#b9">[11]</ref> and the cryptographic routines that obfuscate it <ref type="bibr" target="#b10">[12]</ref>, we also developed additional methods for gathering information about the botnet. We discovered that we could use "Google hacking" to locate additional C&amp;C servers based on fingerprinting the web pages they supply when non-bots visit them. Once found, we can build milkers that probe the different C&amp;C components to extract not only the spectrum of commands sent to bots, but also the C&amp;C's overall structure. We call them milkers because they "milk" MegaD C&amp;C components for extensive information regarding MegaD's operations, providing an opportunity to analyze the botmasters' ongoing activities.</p><p>In particular, by monitoring MegaD's complex and evolving C&amp;C architecture and its spam operations, we collect significant evidence of the MegaD infrastructure being managed by multiple botmasters. MegaD's most recent C&amp;C architecture comprises multiple, disjoint groups of C&amp;C components with very few elements shared across groups. Each group exhibits different server replacement patterns and notable differences in spam operations. Further, our monitoring period spans an attempted takedown of MegaD that resulted in decapitation of significant C&amp;C components, providing us with an inside view on the takedown and how MegaD not only survived it but bounced back with significantly greater vigor.</p><p>We begin in § 2 with an overview of MegaD and a description of our infiltration methods in § 3. In § 4 we analyze the architecture and evolution of the botnet's C&amp;C infrastructure, and in § 5 we look at how the botmaster varies the makeup of the templates used to control MegaD's spam operations. We conclude in § 6.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2">MegaD Overview</head><p>MegaD is a mass spamming botnet first observed in 2007, credited at its peak with responsibility for sending a third of the world's spam <ref type="bibr" target="#b2">[3]</ref>. MegaD is striking for its resilience, having survived two major attempts at disruption: the McColo shutdown of Dec. 2008 <ref type="bibr" target="#b3">[4]</ref>, and a takedown effort coordinated by FireEye in Nov. 2009 <ref type="bibr" target="#b1">[2]</ref>, during the period of our study. In both cases MegaD initially ground to a halt <ref type="bibr" target="#b4">[5]</ref>, but then quickly bounced back with greater vigor. In the week prior to FireEye's Nov. 6 takedown effort, MegaD contributed about 4% of spam, and the botnet initially showed little signs of life after the attack. However, its activity soon increased, exceeding pre-takedown levels by Nov. 22, and constituting 17% of worldwide spam by Dec. 13 <ref type="bibr">[6]</ref>.</p><p>MegaD C&amp;C Servers. A MegaD bot interacts during its lifetime with four types of C&amp;C servers: Master Servers (MS), Drop Servers (DS), Template Servers (TS), and SMTP Servers (SS).</p><p>The botmaster uses the master servers to distribute commands to the bots. Bots locate a master server using a rendezvous algorithm, based on domain names hardcoded in the bot binaries. Upon locating a master server, a bot employs pull-based communication using MegaD's custom C&amp;C protocol. The bot periodically probes the master via request messages to which the server replies with both authentication information and a general command. The bot performs the requested action and returns the results to the master server.</p><p>Drop servers distribute new binaries. A bot locates a drop server by receiving a special command from its master server containing a URL specifying a file to download through regular HTTP.</p><p>Template servers distribute the spam templates that bots use to construct spam. A bot locates a template server via a directive from the master server specifying the address and port to contact. Again, communication proceeds in a pull-based fashion using MegaD's custom C&amp;C protocol. SMTP servers play two distinct roles. First, bots check their spam-sending capabilities by sending a test email to them. A bot locates the server for this testing via a command from the master server specifying the server's hostname. Second, bots notify an SMTP server after downloading a new spam template and prior to commencing to spam. A bot locates the SMTP server used for template download notification via a PTR RSL control parameter in the spam template, which specifies the SMTP server's hostname. The notification protocol is non-standard SMTP. Instead of sending the usual SMTP "HELO &lt;hostname&gt;" message, the bot sends a special "HELO 1" message and closes the connection.</p><p>MegaD dialogs. Throughout our monitoring, we have observed only two different sequences of commands (i.e., dialogs) issued by master servers, as depicted in <ref type="figure" target="#fig_0">Figure 1</ref>. In the spam dialog, bots are first ordered to test their ability to send spam using a given SMTP server. If the test succeeds, the master server engages the bot in an elaborate preparation phase to obtain information about the in- Binary download dialog fected host, followed by sending a GetTemplate command that reveals the identity of a template server from which the bot fetches a spam template. The bot acknowledges reception to both the template server and the SMTP server, after which it starts sending spam. When it finishes, it re-initiates the spam dialog with the master server.</p><p>The download dialog also starts with the master server ordering a test of the bot's ability to send spam. However, rather than then proceeding to the preparation phase, the master server orders the bot to download a new binary from a drop server and execute it.</p><p>We empirically determined that master servers specialize in supervising either spam or download dialogs, but not both. However, both operations are conducted using the same C&amp;C protocol.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3">Infiltrating MegaD</head><p>We aim for our MegaD infiltration to extract information about both the complete C&amp;C architecture as well as the malicious activities of the botnet as these evolve through time. In this section we present the main two techniques we use for our infiltration: 1) creating milkers, i.e., programs that mimic a bot's network interactions but without the malicious side effects (e.g., without sending spam) and Google hacking techniques to discover C&amp;C servers. In addition, we also run MegaD binaries in a controlled environment to monitor their externally visible activity.</p><p>To create the milkers we leverage our previous results in extracting MegaD's protocol grammar <ref type="bibr" target="#b9">[11]</ref> and the encryption/decryption functions MegaD uses to obfuscate its C&amp;C protocol <ref type="bibr" target="#b10">[12]</ref>. Using milkers has several advantages over running bots in a controlled environment. First, the milkers are more lightweight and do not require containment. More generally, they allow us to readily modify the bot interaction behavior to more aggressively probe the C&amp;C servers at higher rates; impersonate multiple bots by changing bot communication identifiers; and directly interact with template, download or SMTP servers without having first received a corresponding command from a master server. This latter allows us to probe servers in situations for which a live binary would not. In particular, this capability enabled us to continue probing the C&amp;C architecture during FireEye's disruption of MegaD, as detailed in § 4.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.1">Monitoring MegaD's Spam Operations</head><p>A MegaD bot only carries out the spam operations. It is the botmaster that decides all details by creating a spam template that describes the structure of the spam message, the data to use for the different fields, and the parameters that control the bot's spam engine. Thus, templates fully describe the botnet's spam operations.</p><p>To obtain information about MegaD's spam operations over time we constructed a template milker, i.e., a program that periodically queries a template server for templates. We run one milker per known server. The milkers directly and continually extract templates, giving us over time access to the full set of templates employed by the botnet. Such a technique was previously employed for the Storm botnet by the authors of Stormdrain <ref type="bibr" target="#b8">[10]</ref>.</p><p>Our template milker probes a template server at a configurable average rate, with some added jitter to help mask its artificial nature. A single milker can impersonate multiple bots by changing the bot identifiers in the payload of the messages it sends. In addition we operate our milkers through Tor <ref type="bibr" target="#b5">[7]</ref>, which provides some IP address diversity. Thus, if the template server distributes templates based on the bot's identifier or its IP addresses, we can still collect a comprehensive set of templates.</p><p>Ignoring the master server. When communicating with a template server, bots include a 16-byte bot identifier issued from the master server. Template servers could validate the identifier as indeed having been previously issued by a master server, but they do not do so: templates are still served on any 16-byte identifier, indicating that either master servers do not communicate the bot identifiers to template servers or template servers do not check them. Thus, our milkers can communicate directly with a given template server, completely bypassing the master server.</p><p>Rate-limiting bypass. We discovered that template servers rate limit the communication of templates to bots based on the 16-byte bot identifier, sending a given bot no more than 16 templates per half-hour period. Thus, by selecting random identifiers, our milker can bypass this limit and harvest templates at an arbitrary rate.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.2">MegaD's Complete C&amp;C Architecture</head><p>A MegaD bot obtains only a partial view of the whole C&amp;C architecture. The bot communicates with a single master server that it discovers through its rendezvous algorithm and thus only interacts with other C&amp;C servers as directed by that master server. To understand the complete architecture we need to go beyond the perspective as seen by a single bot. For example, probing a master server can lead us to previously unknown template and drop servers. In addition, the dropped binary from a new drop server can in turn lead us to additional master servers, from which we can repeat the process.</p><p>To this end, we construct a C&amp;C milker that periodically queries a master server for commands. Every time the C&amp;C milker receives the identity of a new template server, we start running a new template milker for that template server. Similar to template milkers, because our C&amp;C milkers are not actual MegaD bots, we can increase their probing rate and impersonate multiple bots by changing IP addresses and bot identifiers.</p><p>Google hacking for locating master servers. One way to locate master servers is to analyze the connections of live MegaD binaries. We can find such binaries by rummaging through online repositories or requesting specimens from other researchers. However, this proves to be a painful process, requiring many hours to locate and then set up the binaries to run properly in the contained environment.</p><p>To locate more master servers, we devise a trick that leverages the ubiquity of search engines locating web servers around the Internet. Each MegaD master server runs the (TCP) C&amp;C protocol on either port 80 or 443. Master servers running on port 80 expect to receive queries using regular HTTP, and if so camouflage themselves as follows to appear as normal web servers: for a request beginning with "GET", rather than replying with a response from the encrypted C&amp;C protocol, they fake an HTTP "success" response with a small, crafted HTML content. The content renders in a browser as an innocuous-looking "Microsoft test page".</p><p>MegaD master servers do not appear to check whether the request comes from a search engine. Thus, their camouflage content gets added to the search engine's database. However, we discovered that the camouflage content contains sufficiently distinguishable elements to enable fingerprinting it as distinct from other Internet HTTP servers. We therefore can construct a Google query that returns only pages provided by MegaD's master servers that run on port 80, a technique commonly known as "Google hacking". We can in addition verify which of the returned results correspond to MegaD servers by attempting to contact the server using the MegaD C&amp;C protocol rather than HTTP.</p><p>Our query returns exactly 4 results on 4 unique hostnames with no false positives. Two of those servers are already known to us, and another we verify by connecting to it using our C&amp;C milker. To date the last one has been unreachable, but independent reports confirm that it was indeed a MegaD C&amp;C server in the past <ref type="bibr" target="#b2">[3]</ref>.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4">Discovery of C&amp;C Architecture</head><p>We now turn to our findings on MegaD's C&amp;C architecture and how our 4-month infiltration using milkers and Google hacking techniques throws light on MegaD's complex and evolving C&amp;C architecture. Our goal to obtain the overall picture of the C&amp;C architecture is complicated by two problems. First, we start with a partial view of the C&amp;C architecture and we need to evolve our view over time by discovering new C&amp;C elements using our C&amp;C milkers and Google hacking techniques. Second, our infiltration coincides with FireEye's attempt to shut down MegaD, which removed part of MegaD's C&amp;C architecture. Thus, both the C&amp;C architecture and our view of it evolves over time.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.1">Takedown and Reconstruction</head><p>In this section we first present our insights from inside FireEye's takedown and then show how our C&amp;C milkers and Google hacking techniques enabled us to evolve our view of MegaD's C&amp;C architecture. <ref type="figure" target="#fig_1">Figure 2</ref> shows our evolving view of MegaD's C&amp;C architecture over the infiltration period. <ref type="figure" target="#fig_2">Figure 3</ref> shows the chronology and significant events of our MegaD infiltration.</p><p>Our infiltration begins on Oct. 27, 2009 with the knowledge of 3 C&amp;C servers: one master server (MS-S1), one template server (TS1), and one SMTP server (SS1), which we had identified a priori by running a MegaD bot in our contained environment. Our view of MegaD's C&amp;C architecture on that day is shown in <ref type="figure" target="#fig_1">Figure 2</ref>(a) and we start our infiltration by running a template milker on TS1.</p><p>An inside view of FireEye's takedown. On Nov. 6, 2009, FireEye launched a coordinated effort to take down MegaD. The takedown was widely lauded as successful since MegaD's spam trickled to a halt. However, 16 days later its share of the world's spam exceeded its 4% pretakedown level and by Dec. 13 it had climbed to 17% <ref type="bibr">[6]</ref>.</p><p>The takedown included both MS-S1 and SS1, thus our captive MegaD binary stopped working that day. However, the takedown did not affect TS1, which surprisingly continued handing out spam templates to our milker like nothing had happened. Our template feeds reveal that the templates distributed by TS1 remained unchanged for one week after the takedown. The first sign of a recovery was on Nov. 13, when the PTR RSL control parameter in the template was updated to point to a new SMTP server SS2. That update also allowed us to discover a new master server (MS-S2) on the same domain.</p><p>From our privileged vantage point we can establish two key findings about the botmaster's takedown response. First, the botmaster did not have backup domains and ISPs ready when the takedown happened, since for a whole week the templates in TS1 pointed to a dead domain. Second, it took the botmaster a week to find a new ISP to host their infrastructure and set up the new C&amp;C servers.</p><p>Interestingly, the update of the PTR RSL control parameter in the spam templates on Nov. 13 was not used for recovery. We tested this by replicating the takedown and template changes on our captive bot, and found that it did not recover from the takedown. Similarly, FireEye's bots did not recover after the takedown <ref type="bibr" target="#b13">[15]</ref>. Thus, we believe that MegaD did not bounce back using resilience mechanisms in the bot binary but by pushing out fresh bi- naries.</p><p>MegaD is known to participate in a Pay-Per-Installation (PPI) service in which a downloader like Piptea drops other malware (e.g., a MegaD bot) on compromised hosts for a fee <ref type="bibr" target="#b0">[1]</ref>. We believe that the MegaD botmasters paid the PPI operators to push out fresh bot binaries. What remains unanswered is how much overlap there is between the pre-takedown and post-takedown MegaD population and to what extent the downloader was the resilience mechanism used for bouncing back.</p><p>Evolving our view of the C&amp;C architecture. Due to the takedown, our view of MegaD's C&amp;C was reduced to a single node on Nov. 6 as shown in <ref type="figure" target="#fig_1">Figure 2(b)</ref>. From Dec. 10, we began the process of evolving our view of the C&amp;C architecture by starting a C&amp;C milker for MS-S2, and added our Google hacking technique on Jan. 29. We leave the interested reader to examine the timeline of events in <ref type="figure" target="#fig_2">Figure 3</ref> for details. Using our techniques we discovered 6 additional template servers (TS2 to TS7), 2 download dialog master servers (MS-D1 and MS-D2), an additional spam dialog master server (MS-S3), 2 drop servers (DS1 and DS2), and different binary variants distributed by each drop server. The C&amp;C discovery process culminated in a rich architectural view of MegaD by Feb. 18 as shown in <ref type="figure" target="#fig_1">Figure 2</ref>(d).</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.2">C&amp;C Groups</head><p>Figure 2(d) shows the final MegaD C&amp;C architecture that we have reconstructed through our 4-month infiltration using our milkers and Google hacking techniques. There exists two master servers in charge of spam operations (MS-S2 and MS-S3) and two master servers in charge of drop/update operations (MS-D1 and MS-D2). Each master server that specializes in spam operations is supported by a set of template servers. The fact that the sets of template servers are disjoint signals the presence of two separate groups in the architecture: Group 1 with MS-S3 supported by a backend of TS1, TS5, and TS6, and Group 2 with MS-S2 supported by <ref type="bibr">TS4 and TS7 (and pre- viously TS2 and TS3)</ref>. Each group is supported by one master server specialized in update operations as well as one drop server. The binaries dropped by a drop server connect only to the spam master server that the drop server supports. Both groups share a single SMTP server (SS2), which all bots use to test their spam-sending capabilities and to report template downloads. The fact that all bots are aware of SS2 makes it well suited as a central point for monitoring the spam operations across both groups.</p><p>Completeness of discovered architecture. The caveat is the completeness of our final view on MegaD's architecture. However, we can compare our final architectural view with those from other researchers, the most complete of which is FireEye's list of 15 active MegaD C&amp;C IPs prior to the takedown compiled by monitoring near to a hundred MegaD binaries <ref type="bibr" target="#b1">[2,</ref><ref type="bibr" target="#b13">15]</ref>. We note that the list is not ideal as it does not differentiate between server types. Further, FireEye's snapshot was made before the takedown, and is itself incomplete, e.g., it does not include the surviving template server TS1. Nevertheless, if we assume FireEye's set of 15 C&amp;C servers plus the missing TS1 as MegaD's full architecture at any time, then the set of 12 active servers in our final view constitutes 75% of the overall architecture. Differences in group management. One pattern that emerged during our infiltration is that for Group 2, a new template server would be added to the backend of MS-S2 and a few days later the older template server would be taken offline. For example, TS3 was added on Dec. 22 and on Jan. 14 TS2 went offline. This trend is highlighted with bold lines in <ref type="figure" target="#fig_2">Figure 3</ref>. This pattern looks like a server replacement that guarantees availability of the spam operations during the replacement. Although we do not know the reasons behind such replacements, this pattern does not appear in Group 1, which indicates that both groups are managed differently.</p><p>Although the fact that there is a central SMTP server to which all bots connect points to the infrastructure being shared or centrally managed, the question that arises is whether those differences in group management are due to multiple botmasters sharing the same botnet infrastructure, or to other reasons such as Group 2 rebuilding its infrastructure having incurred greater damage from the takedown. We address this question in Section 5 by analyzing the differences in spam operations between the 2 groups. Our results show significant evidence on the spam operations of each group being under separate management.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5">Template Milking</head><p>In this section we report our analysis of the templates obtained by the operation of our template milkers from Oct. <ref type="bibr">27, 2009</ref><ref type="bibr">27, through Feb. 18, 2010</ref>. During this period we collected 271 K spam templates containing 483 M email addresses. <ref type="table">Table 1</ref> shows aggregate statistics for the monitored servers. We began our milking operations with TS1, adding additional milkers every time we discovered a new template server, for a total of seven, two of which are no longer active.</p><p>Template structure. The MegaD spam template is a structured document comprising two sections: the template and the element database. <ref type="figure" target="#fig_3">Figure 4</ref> shows a simplified spam template where the template section is delimited by the {TEMPLATE} and {/TEMPLATE} tags and the element database by the {TEMPLATE DATABASE} and Each data element has a set of values in the template. We call elements with more than one value in their set polymorphic. Polymorphic elements are fundamental for the success of the spam operation because the body of any two spam messages generated from the same template will differ as different values are selected for each tag. Such polymorphism is designed to evade spam filters that look at the body of the email messages.</p><p>Changes in template structure. The template structure is the ordered list of data elements in a spam template. Throughout the infiltration we observe how the template structure changes as the botmaster introduces and experiments with new types of elements.</p><p>Most notably, the templates from TS1 before the FireEye takedown used sets of static strings for subjects, as well as a mostly static HTML body for the spam message where the only polymorphic data element was the URL to spamadvertise. However, after the takedown the botmaster started experimenting with the template structure. First, it combined multiple data elements to dynamically construct a coherent subject and HTML body, which makes it more difficult to build spam filters based on these elements. An example of this highly dynamic HTML body is shown in <ref type="figure" target="#fig_3">Figure 4</ref> using the {mac1} and {mac2} tags. In addition, it experimented with using image spam, by inserting {IMG} tags in the body of the message. The {IMG} tags point to images hosted in Flickr. These experiments were carried out using TS1 and TS2. They started on Nov. 18 and lasted less than two weeks. After this experimentation phase, the botmasters finally deployed some of those changes.</p><p>Evidence of separate management. Interestingly, the final deployment falls under the two different management groups that we introduced in § 4. One month after the experimentation phase, the {IMG} became a permanent data element in Group 1, which comprises TS1, TS5, and TS6. Similarly, the {mac*} and {sb*} elements were deployed in Group 2, which comprised TS2 and TS3 at that time and were later replaced by TS4 and TS7. Thus, only Group 1 does image spam and although both groups polymorph the subject by using sets of values, only Group 2 has the extra polymorphism provided by constructing the subject and HTML body using {mac*} and {sb*} tags. <ref type="figure" target="#fig_4">Figure 5</ref> summarizes the commonalities in template structure by plotting occurrences of unique data elements across all template servers, starting on Dec. 9, once the experimentation phase on TS1 and TS2 was over. It shows that {TS1, TS5, TS6} (Group 1) and {TS2, TS3, TS4} (Group 2) have similar template structures. We only have two days of template data for TS7, which explains why some unique elements from the group have not appeared.</p><p>Changes in polymorphic data elements. Here we analyze how often the botmaster changes the set of values associated with a polymorphic data element. There are three cases. A single-set-polymorphic data element uses a set of values that never changes, that is, all templates have the same set of values over time. For example, MegaD's spam messages fake Outlook Express (OE) email signatures using an element that captures the OE version. The set of OE version values stays constant across templates over time.</p><p>A multi-set-polymorphic data element uses the same set of values across all templates at any point of time. The set of values are updated by the botmaster and stay constant across all templates until the next update. Multiset-polymorphic elements are updated by the botmaster to evade spam filters. For example, the {URLS} element, representing the spamvertised sites, is multi-setpolymorphic because the botmaster refreshes the set of URL values at a low average rate (once every 2 days) in reponse to URL blacklisting and new spam campaigns being launched. Other multi-set-polymorphic elements in <ref type="figure" target="#fig_3">Figure 4</ref> are the subject ({DIKSBJ}), the HTML body ({BODY HTML}), and the tags used to form the HTML body ({mac1}, {mac2}).</p><p>A every-set-polymorphic data element uses a dynamically generated set of values on each template sent by the template server. The set of values is chosen as a subset of a larger value set only known to the template server. For example, the {DOMAINS} element, which contains the set of target email addresses to spam, is an everyset-polymorphic element because the template server selects a small subset of the complete email list for each requested template. Other every-set-polymorphic element are {LINK} and {IMG}.</p><p>Every-set-polymorphic elements are most convenient for the botmaster because they provide automated polymorphism without requiring manual intervention. One would expect skilled botmasters to convert as many multi-set-polymorphic elements as possible into everyset-polymorphic elements to improve the efficiency of their spam operations. <ref type="figure">Figure 6</ref> illustrates multi-set-polymorphic and everyset-polymorphic elements in the TS1 templates and how they are updated over time. We see differences in update rates between every-set-polymorphic elements such as {IMG} and {LINK}, whose value sets are dynamically generated for each template, compared to manually updated multi-set-polymorphic elements such as {DIKSBJ}, {BODY HTML}, and {URLS}.</p><p>Evidence of separate management. We find the update rates for multi-set-polymorphic elements particularly interesting because they require sustained effort from the botmaster on continual updates, which provides important information about how the botmaster manages the template servers. We examine the update rates across template servers, focusing on the subject ({DIKSBJ}) due to its use across all template servers. The results are shown in <ref type="table" target="#tab_2">Table 2</ref>. We observe the template servers in Group 1 having similar update rates, i.e., approximately every 3 days, and the template servers in Group 2 significantly slower update rates. This provides more evidence on the fact that both C&amp;C server groups are managed separately.</p><p>Implications of separate management. The clear distinction in update rates between the two C&amp;C server <ref type="figure">Figure 6</ref>: Changes in multi-set and every-set polymorphic data elements in TS1. The vertical axis is the cumulative unique set identifier for each element.  groups aligns with the evidence we previously collected from the C&amp;C architecture and the changes to template structure. A final piece of evidence comes from the differences between the groups in terms of spam campaigns. We find that Group 1 focuses exclusively on Viagra campaigns, while Group 2 runs multiple and diverse campaigns, including Viagra, job scams and money mule recruitment. One might attribute the differences in update rates and spam campaigns between the two groups to profitability, i.e. the spam campaigns in Group 2 may simply be more profitable to justify the more frequent updates. However, this does not explain the need for greater architectural changes as seen in § 4.2. We therefore arrive at the conclusion that the day-to-day activities of MegaD falls under two separate management groups (botmasters). In addition, the subject update rates, as well as the server replacement pattern shown in Section 4 also indicate that the managers of Group 2 are significantly more dynamic than the managers of Group 1 in its operations.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="6">Conclusion</head><p>We have presented a 4-month longitudinal assessment of the control architecture and management of the MegaD botnet by employing our C&amp;C milking, template milking and Google hacking techniques. Our infiltration has culminated in a rich architectural view of MegaD's C&amp;C and provided significant evidence on the MegaD infrastructure being managed by multiple botmasters. Our inside view of the attempted takedown offers new insights on how botnets actually recover from takedowns: instead of relying on reslience mechanisms to recover bots, the botmasters simply push out new binaries.</p></div><figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_0"><head>Figure 1 :</head><label>1</label><figDesc>Figure 1: MegaD Dialogs: (a) Spam dialog and (b) Binary download dialog</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_1"><head>Figure 2 :</head><label>2</label><figDesc>Figure 2: Our evolving view of MegaD's C&amp;C architecture over the infiltration. Each node represents an element of MegaD's infrastructure and C&amp;C servers are labeled with their role and port numbers. Directed arcs represent the points-to relationships between members. The final achitecture reconstructed by the infiltration is shown in (d), where we note the two distinct C&amp;C server groups, and the SMTP server that provides a central point for monitoring.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_2"><head>Figure 3 :</head><label>3</label><figDesc>Figure 3: Timeline of significant infiltration events. The bold lines highlight a subtle pattern where template servers emerge and go offline with overlapping periods of availability to support spam operations.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_3"><head>Figure 4 :</head><label>4</label><figDesc>Figure 4: MegaD spam template sample: structure, polymorphic elements, and how polymorphic elements are combined to form an email body</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_4"><head>Figure 5 :</head><label>5</label><figDesc>Figure 5: Template structure commonalities across servers.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_2" validated="false"><head>Table 2 :</head><label>2</label><figDesc></figDesc><table>Average number of days between updates of subject 
elements ({DIKSBJ}) across template servers, indicating sig-
nificant faster updates in template servers from Group 2. 

</table></figure>
		</body>
		<back>

			<div type="acknowledgement">
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="7">Acknowledgements</head><p>We would like to thank FireEye and in particular Atif Mushtaq for help in understanding the events around the MegaD takedown. We also thank Matt Williamson and the anonymous reviewers for their insightful comments.</p><p>This material is based upon work partially supported by the NSF under Grants 0311808, 0448452, 0627511, 0433702, CNS-0905631, CNS-0831535, and CCF-0424422, by the USAF Office of Scientific Research under grant 22178970-4170, by ARO under grant DAAD19-02-1-0389, and by ONR under MURI Grant N000140911081. Opinions expressed in this material are those of the authors and do not necessarily reflect the views of the sponsors.</p></div>
			</div>

			<div type="references">

				<listBibl>

<biblStruct xml:id="b0">
	<monogr>
		<title/>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Botnetweb</surname></persName>
		</author>
		<ptr target="http://blog.fireeye.com/research/2009/04/botnetweb.htm" />
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b1">
	<analytic>
		<title/>
		<ptr target="http://" />
	</analytic>
	<monogr>
		<title level="j">Killing the beast...part</title>
		<imprint>
			<biblScope unit="volume">4</biblScope>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b2">
	<monogr>
		<title/>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Mega-D</surname></persName>
		</author>
		<ptr target="http://www.m86security.com/trace/i/Mega-D,spambot.896.asp" />
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b3">
	<monogr>
				<ptr target="http://www.darkreading.com/security/attacks/showArticle.jhtml?articleID=212300170" />
		<title level="m">Mega-d botnet returns after mccolo shutdown</title>
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b4">
	<monogr>
				<ptr target="http://www.m86security.com/labs/traceitem.asp?article=1161" />
		<title level="m">Mega-d botnet takes a hit</title>
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b5">
	<analytic>
		<title level="a" type="main">Tor: The second-generation onion router</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Roger</forename><surname>Dingledine</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Nick</forename><surname>Mathewson</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Paul</forename><surname>Syverson</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. USENIX Security</title>
		<meeting>USENIX Security</meeting>
		<imprint>
			<date type="published" when="2004" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b6">
	<analytic>
		<title level="a" type="main">The Heisenbot uncertainty problem: Challenges in separating bots from chaff</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Chris</forename><surname>Kanich</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. LEET</title>
		<meeting>LEET</meeting>
		<imprint>
			<date type="published" when="2008" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b7">
	<analytic>
		<title level="a" type="main">Spamalytics: An empirical analysis of spam marketing conversion</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Chris</forename><surname>Kanich</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">ACM CCS</title>
		<imprint>
			<date type="published" when="2008-10" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b8">
	<analytic>
		<title level="a" type="main">An inside look at spam campaign orchestration</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Christian</forename><surname>Kreibich</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. LEET</title>
		<meeting>LEET</meeting>
		<imprint>
			<date type="published" when="2009" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b9">
	<analytic>
		<title level="a" type="main">Enabling active botnet infiltration using automatic protocol reverse-engineering</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Juan</forename><surname>Caballero</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">ACM CCS</title>
		<imprint>
			<date type="published" when="2009" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b10">
	<analytic>
		<title level="a" type="main">Binary code extraction and interface identification for security applications</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Juan</forename><surname>Caballero</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. NDSS</title>
		<meeting>NDSS</meeting>
		<imprint>
			<date type="published" when="2010-02" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b11">
	<analytic>
		<title level="a" type="main">Measurements and mitigation of peer-to-peerbased botnets: A case study on Storm worm</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Thorsten</forename><surname>Holz</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. LEET</title>
		<meeting>LEET</meeting>
		<imprint>
			<date type="published" when="2008" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b12">
	<analytic>
		<title level="a" type="main">Studying spamming botnets using Botlab</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">John</forename><forename type="middle">P</forename><surname>John</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Alexander</forename><surname>Moshchuk</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Steven</forename><forename type="middle">D</forename><surname>Gribble</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Arvind</forename><surname>Krishnamurthy</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. USENIX NSDI</title>
		<meeting>USENIX NSDI</meeting>
		<imprint>
			<date type="published" when="2009" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b13">
	<monogr>
		<title/>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Atif</forename><surname>Mushtaq</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2010-03" />
		</imprint>
	</monogr>
	<note>Personal communication</note>
</biblStruct>

<biblStruct xml:id="b14">
	<analytic>
		<title level="a" type="main">A multifaceted approach to understanding the botnet phenomenon</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Jay</forename><surname>Moheeb Abu Rajab</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Fabian</forename><surname>Zarfoss</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Andreas</forename><surname>Monrose</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Terzis</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Internet Measurement Conference</title>
		<imprint>
			<date type="published" when="2006-10" />
		</imprint>
	</monogr>
</biblStruct>

				</listBibl>
			</div>
		</back>
	</text>
</TEI>
