<?xml version="1.0" encoding="UTF-8"?>
<TEI xmlns="http://www.tei-c.org/ns/1.0" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
xsi:schemaLocation="http://www.tei-c.org/ns/1.0 /Users/atharsefid/Desktop/grobid-0.5.3/grobid-home/schemas/xsd/Grobid.xsd"
 xmlns:xlink="http://www.w3.org/1999/xlink">
	<teiHeader xml:lang="en">
		<encodingDesc>
			<appInfo>
				<application version="0.5.3" ident="GROBID" when="2020-09-29T04:23+0000">
					<ref target="https://github.com/kermitt2/grobid">GROBID - A machine learning software for extracting information from scholarly documents</ref>
				</application>
			</appInfo>
		</encodingDesc>
		<fileDesc>
			<titleStmt>
				<title level="a" type="main">IPAPI: Designing an Improved Provenance API</title>
			</titleStmt>
			<publicationStmt>
				<publisher/>
				<availability status="unknown"><licence/></availability>
			</publicationStmt>
			<sourceDesc>
				<biblStruct>
					<analytic>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Lucian</forename><surname>Carata</surname></persName>
							<affiliation key="aff0">
								<orgName type="laboratory">Computer Laboratory</orgName>
								<orgName type="institution">University of Cambridge</orgName>
							</affiliation>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Ripduman</forename><surname>Sohan</surname></persName>
							<affiliation key="aff0">
								<orgName type="laboratory">Computer Laboratory</orgName>
								<orgName type="institution">University of Cambridge</orgName>
							</affiliation>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Andrew</forename><surname>Rice</surname></persName>
							<affiliation key="aff0">
								<orgName type="laboratory">Computer Laboratory</orgName>
								<orgName type="institution">University of Cambridge</orgName>
							</affiliation>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Andy</forename><surname>Hopper</surname></persName>
							<affiliation key="aff0">
								<orgName type="laboratory">Computer Laboratory</orgName>
								<orgName type="institution">University of Cambridge</orgName>
							</affiliation>
						</author>
						<title level="a" type="main">IPAPI: Designing an Improved Provenance API</title>
					</analytic>
					<monogr>
						<imprint>
							<date/>
						</imprint>
					</monogr>
				</biblStruct>
			</sourceDesc>
		</fileDesc>
		<profileDesc>
			<abstract>
				<p>We investigate the main limitations imposed by existing provenance systems in the development of provenance-aware applications. In the case of disclosed provenance APIs, most of those limitations can be traced back to the inability to integrate provenance from different sources, layers and of different granularities into a coherent view of data production. We consider possible solutions in the design of an Improved Provenance API (IPAPI), based on a general model of how different system entities interact to generate , accumulate or propagate provenance. The resulting architecture enables a whole new range of provenance capture scenarios, for which available APIs do not provide adequate support.</p>
			</abstract>
		</profileDesc>
	</teiHeader>
	<text xml:lang="en">
		<body>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="1">Introduction</head><p>Capturing provenance metadata by observing the data production process (an approach taken by systems like ES3 <ref type="bibr" target="#b0">[1]</ref> or PASS <ref type="bibr" target="#b1">[2]</ref>) is limited in terms of recovering the exact semantics of each operation across multiple abstraction levels (application, OS, network). This may lead to the existence of false positives when describing dependencies between different data items: for example, a system that observes provenance at the OS level will link each output of a process to all of its inputs, even if a particular output is actually derived at application level from only a few of the inputs. Consequently, the utility of recorded provenance diminishes as one looks further into the history of a particular data item (false relationships accumulate), and real causal dependencies become harder to distinguish for long derivation chains. In addition, systems that observe provenance require the use of provenance-aware kernels, filesystems or runtime environments across all the nodes involved in the processing of data, which hinders their wide adoption in distributed environments.</p><p>It is possible to overcome those drawbacks by requiring applications to explicitly disclose provenance. Doing so trades off the transparency of provenance capture for the possibility of recording it in a semantically accurate way, across various layers. Workflow management systems are particularly suitable for this approach, and implementations like <ref type="bibr">Kepler [3]</ref> or VisTrails <ref type="bibr" target="#b3">[4]</ref> take advantage of the data flow and dependencies disclosed in the workflow's definition to automatically determine provenance.</p><p>Extending this to the general case where data can be derived through any process requires making applications provenance-aware: modifying source code to call specialized provenance APIs for disclosing relationships between pieces of data. Such APIs have already been proposed, either as part of observed-provenance systems, as is the case of DPAPI <ref type="bibr" target="#b4">[5]</ref>, or as general purpose provenance libraries -the case of CPL <ref type="bibr" target="#b5">[6]</ref>. We aim to systematically discuss the issues that limit the generality of those APIs, and explore possible solutions in the design of an improved provenance API (IPAPI).</p><p>Current API limitations: There are four major scenarios for which current available APIs fail to provide adequate support.</p><p>1. Tracking provenance at granularities smaller than file level. The existing solutions (both DPAPI and CPL) are able to create arbitrary provenance objects and annotate them with key/value pairs as the process transforms data. However, the main challenge is recovering the identity of those objects starting from output data. It is not currently possible to search for the provenance of some values in a file, as there is no way to determine which provenance objects hold the corresponding information. The same problem appears for operations that do not directly interact with files, but still generate provenance (as is the case with copy-pasting text between two editors).</p><p>2. Exploring the semantics of disclosed provenance. Existing APIs fail to consider how the key/value annotations can be consumed in automated ways (for example, by applications using provenance to reason about data quality). As long as the meaning of each key/value remains opaque, it is difficult to build applications that use provenance irrespective of its source.</p><p>3. Use in a distributed environment. One of the common aspects of existing provenance capturing systems is their orientation towards centralized storage. However, it would be useful to store provenance close to the data and easily keep them together when transferring between hosts or responsibility domains. Repositories similar to the ones used by distributed versioning systems (like git) would be more appropriate in this scenario, replacing huge provenance databases with structures that are more easily synchronized and managed.</p><p>4. Leveraging existing data as provenance. It is important to recognize that many applications already output information which could be considered provenance (e.g as part of logs or standard IO). Current provenance APIs cannot use this information directly, forcing the developer to disclose it twice when making the application provenance-aware (once as part of normal application output, and subsequently when creating provenance objects). Recognizing existing data as provenance would enable applications to play an active role within a provenance-aware system without having to be modified or recompiled.</p><p>Why IPAPI? We develop IPAPI as a base for experimenting with various design solutions of a general purpose disclosed provenance system that is complete and can be used in practice with few constraints, even in heterogeneous environments (considering that not all applications will expose provenance or use IPAPI to do so).</p><p>When compared to DPAPI or CPL, the effort required from the application developer is not increased yet a whole range of new use cases become possible. The research question we are tackling when considering those new scenarios asks how disclosed provenance from different sources, layers and of different granularities can be combined to understand the behavior of a data transformation process.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2">Classifying Provenance-aware Entities</head><p>Before looking at the core of the API, it is important to get a better understanding of the fundamental entities that have a role in generating, accumulating or propagating provenance metadata. Existing data provenance models (such as PROV-DM, OPM or Provenir) address this at a high-level, making it difficult to clarify the relationships between interacting system entities (processes, files, pipes, etc) and the provenance they produce. Instead, we consider a lower-level model, which allows a direct mapping between system object types and our API data structures.</p><p>The provenance structure and properties for different entities will vary depending on their type. For example, the provenance of some entities needs to take into account versioning (e.g. files), but this is not necessary in other cases (processes, pipes) or might be requested on demand (data structures). Existing APIs prefer a uniform approach instead.</p><p>As illustrated in <ref type="figure">Figure 1</ref>, a distinction is first made between active and passive entities, based on a simple criteria: active objects are the ones through which data </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Data Provenance Process Provenance</head><p>Figure 1: Provenance-aware entity types "flows", while passive objects just store information. This can be directly mapped on the existing classification of process provenance (active) and data provenance (passive). However, in order to obtain a complete typing of provenance, we need to distinguish subcategories within active and passive entities.</p><p>Among active entities, the standalone ones are computational: they can be instantiated from a passive entity (the binary) to produce, derive or transform data. This includes processes and OS kernels, but could also refer to computational abstractions such as middleware services.</p><p>The provenance of such entities is dual: on one hand, it is linked to the provenance of the underlying passive entity, which describes the process used to obtain the executable (the build process, compiler parameters, etc). On the other hand, standalone entities have provenance related to each particular run (command line arguments, environment variables), and are uniquely identifiable during their lifetimes.</p><p>In the other subcategory, dependent entities are only instantiated within the remit of another active standalone entity. They typically represent communication primitives such as pipes, sockets or memory mappings.</p><p>Passive entities map data storage abstractions and are categorized depending on how they change. The persistent ones are accessed or modified through fixed system interfaces (read, write) and store data for longer periods of time. Transient entities on the other hand have limited lifetimes, and might change without the knowledge of the OS. Typically, they live in volatile memory, even though sometimes they might be presented to the enduser as files.</p><p>We are now in the position to give a high level description of how our API considers the accumulation and propagation of provenance: When standalone entities are instantiated, they will map the data from various passive objects (inputs, context) into local data structures (transient entities). They will then proceed to apply transformations, create new data structures, or instantiate other active objects as helpers (for further processing or communication). As dictated by internal control flow, the standalone entity will then map the results back into passive objects (files, standard output, etc). Provenance needs to track the hierarchy of active objects and the two mappings (input→transient entities and transient entities→output).</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3">Design and Implementation</head><p>We have designed IPAPI based on the described entity model, in a way which allows it to scale in both directions: from tracking provenance of individual operations to tracking provenance across multiple hosts and enterprise domains.</p><p>The API is written in C++ and packaged as a library to which applications link either statically or dynamically. For minimum functionality, the application developer just needs to include the IPAPI header file. At runtime, the library self-initializes, overriding part of the program startup sequence. In the process, a number of provenance objects corresponding to the standalone entity that linked to the library are automatically generated, storing information about the running process, its parent and the active context (command line arguments, environment). This means that even with minimal application changes, we manage to track basic process provenance. As in existing APIs, arbitrary key/value pair annotations can be added to provenance objects when required.</p><p>For data provenance, the developer needs to explicitly create those provenance objects representing passive entities, and then disclose the relationships between them and other provenance objects by calling either the obj relation or the key relation member function. The first one discloses actual data flow between two objects (as is the case with basic input-output relationships), while the second enables associations between different key/value pairs (playing the role of a foreign key relationship).</p><p>The key relation function also allows for higher levels of provenance abstraction (provenance of provenance). Unlike CPL, we define provenance of provenance as more than just a way to keep track of the context in which provenance was generated. Instead, we consider higher order provenance as a way to explain existing provenance relationships. Take the example of an application that reads the name of its input file from a configuration file. First-order provenance will identify a link between the application and two particular input files. Second order provenance can explain the relationship more abstractly: namely, that the name of the second input depends on a value read from the configuration file.</p><p>Provenance Repositories: All resulting metadata is persisted in decentralized provenance repositories, grouping data and its associated provenance as a single manageable unit. The provenance objects which are not directly linked to any persistent entity (like the provenance objects of data passing through a pipe) are stored in the location of the active entity that produced them. Also, provenance from one repository can reference objects from other repositories -a key aspect of being able to scale our system across multiple hosts.</p><p>Similar to versioning systems, provenance repositories are managed using a dedicated tool, prov. Its purpose is to maintain correct provenance when entities are relocated (moved locally, transferred to other systems, etc).</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.1">Namespacing and Identity</head><p>We use a custom naming scheme allowing global provenance object identification across multiple granularities. Each object is part of a hierarchical namespace which is partially controlled by the API, with further levels customizable by application developers. For example, consider the namespace OS::ping::sockets. Each level identifies a particular provenance granularity, going from coarse (OS) to fine (sockets). The first two levels are defined by the API when the provenance-aware ping starts execution. The sockets level is then defined by the developer to hold the provenance of dependent entities used by the application.</p><p>The identity of a new provenance object within a namespace is defined by binding each namespace level except the last to an existing provenance object and then assigning a namespace-unique ID to the new object we are creating. In our example, when disclosing the provenance for a particular socket, we need to first bind the OS and ping namespace levels to existing objects (representing provenance metadata for the host machine and the instance of the ping application), then give an ID to our socket. The whole process is simplified by the automatic binding of API-managed namespace levels.</p><p>Using this scheme, we can start from any provenance object and understand it at different granularities by considering the bindings from each level in its namespace.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.2">Granularity Control</head><p>We have seen how namespaces can be used to demarcate granularity boundaries. However, the sub-file granularity issue presented in the introduction is not completely solved. In order to determine the identity of a provenance object that is linked to certain values in a file, one needs to define correspondences between fragments of a passive object and their provenance.</p><p>The map function implements this functionality, allowing developers to link provenance objects to specific locations in passive entities. We currently support mapping continuous (possibly overlapping) regions defined by [start position, end position], but we plan generic support based on the explicit declaration of the output data format in the near future.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.3">Retrieving Provenance Data</head><p>The key requirement for integrating multiple sources of provenance is an extensible provenance retrieval API. As part of IPAPI, we define an interface for fetching provenance objects (the pquery function), which can use plugins along the provenance retrieval path. Those plugins can be easily developed on a per-application basis and have access to the data returned by scanning the provenance repositories. They can augment or modify this data, parsing output files, connecting to other provenance systems' databases or by mapping from one key/value dictionary to another before returning the requested provenance objects.</p><p>Consider the example of a service that evaluates the quality of data based on certain key/value pairs from provenance. In order to integrate a new provenanceaware application with this service, all we have to do is write a plugin that takes existing disclosed provenance key/value pairs from the application and maps them to the format expected by the service. This provides a solution to the variable semantics of data provenance.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4">Use Case</head><p>We highlight a typical use case not supported by existing APIs, in which IPAPI manages to keep track of provenance with minimal developer effort. The example is based on four provenance-aware applications: a shell, provsh, a "sensor" application (which generates data values), a "filter" application and a "plotter" application. The applications are started from provsh, and communicate through pipes (sensor | filter | plotter).</p><p>The sensor application launches a number of threads, and each thread starts outputting data values in the same range. Some of the threads are picked at random to consistently emit values outside the range (simulating defective sensors). Next along the processing chain, the filter application passes all the inputs that meet certain criteria (for example, the ones that are above a certain threshold) to its output. In the plotting application, we look at a graphical display of the values and would like to know from what sensor a particular implausible value came from (we are trying to identify the malfunctioning sensors based on recorded provenance). Even though the applications do not know about each other (they are loosely coupled), their I/O interactions are not based on persistent files (but on pipes), and the requested provenance granularity is that of individual values, the source of the outliers can be successfully identified.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5">Limitations</head><p>The limitation of any provenance API is the reliance on the correctness of developer-disclosed information. This is a problem when using provenance for security related tasks, such as intrusion detection: a virus might choose to disclose false provenance to cover its tracks and make it impossible to determine which parts of the system it has affected. We believe that the way forward is to combine disclosed provenance with a low-overhead observed provenance system, and check for provenance consistency between the two. A trust-based model that classifies active provenance entities could also be a viable solution, but would require more user input.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="6">Conclusion</head><p>We have highlighted the problems and limitations of current provenance APIs, and addressed those problems in the design of IPAPI. We are using IPAPI to understand more about provenance in distributed (heterogeneous) environments, where applications might want to use provenance in computations or automated inferences.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Availability</head><p>In order to encourage discussion and use, we have open-sourced IPAPI, under a BSD License. It is available together with its full documentation from http://github.com/lc525/ipapi</p></div>		</body>
		<back>

			<div type="acknowledgement">
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Acknowledgments</head><p>The authors would like to thank George Coulouris, Sherif Akoush and the other members of the FRESCO project for their insights and feedback on the contents of this research.</p></div>
			</div>

			<div type="references">

				<listBibl>

<biblStruct xml:id="b0">
	<analytic>
		<title level="a" type="main">Automatic capture and reconstruction of computational provenance</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Frew</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Metzger</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><surname>Slaughter</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Concurrency and Computation: Practice and Experience</title>
		<imprint>
			<biblScope unit="volume">20</biblScope>
			<biblScope unit="issue">5</biblScope>
			<biblScope unit="page" from="485" to="496" />
			<date type="published" when="2008" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b1">
	<analytic>
		<title level="a" type="main">Provenance-aware storage systems</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">K</forename><surname>Muniswamy-Reddy</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Holland</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">U</forename><surname>Braun</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Seltzer</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 2006 USENIX Annual Technical Conference</title>
		<meeting>the 2006 USENIX Annual Technical Conference</meeting>
		<imprint>
			<date type="published" when="2006" />
			<biblScope unit="page" from="43" to="56" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b2">
	<analytic>
		<title level="a" type="main">Provenance collection support in the Kepler scientific workflow system</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">I</forename><surname>Altintas</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">O</forename><surname>Barney</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">E</forename><surname>Jaeger-Frank</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the International Provenance and Annotation Workshop</title>
		<meeting>the International Provenance and Annotation Workshop</meeting>
		<imprint>
			<publisher>Springer-Verlag</publisher>
			<date type="published" when="2006" />
			<biblScope unit="page" from="118" to="132" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b3">
	<analytic>
		<title level="a" type="main">Vistrails: Visualization meets data management</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><forename type="middle">P</forename><surname>Callahan</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Freire</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">E</forename><surname>Santos</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><forename type="middle">E</forename><surname>Scheidegger</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><forename type="middle">T</forename><surname>Silva</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">H</forename><forename type="middle">T</forename><surname>Vo</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">ACM SIGMOD</title>
		<imprint>
			<publisher>ACM Press</publisher>
			<date type="published" when="2006" />
			<biblScope unit="page" from="745" to="747" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b4">
	<analytic>
		<title level="a" type="main">Layering in provenance systems</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">K.-K</forename><surname>Muniswamy-Reddy</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">U</forename><surname>Braun</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><forename type="middle">A</forename><surname>Holland</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><surname>Macko</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Maclean</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Margo</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Seltzer</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Smogor</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 2009 conference on USENIX Annual technical conference, USENIX&apos;09</title>
		<meeting>the 2009 conference on USENIX Annual technical conference, USENIX&apos;09<address><addrLine>Berkeley, CA, USA</addrLine></address></meeting>
		<imprint>
			<date type="published" when="2009" />
			<biblScope unit="page">10</biblScope>
		</imprint>
	</monogr>
	<note>USENIX Association</note>
</biblStruct>

<biblStruct xml:id="b5">
	<analytic>
		<title level="a" type="main">A general-purpose provenance library</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><surname>Macko</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Seltzer</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 4th USENIX conference on Theory and Practice of Provenance</title>
		<meeting>the 4th USENIX conference on Theory and Practice of Provenance<address><addrLine>Berkeley, CA, USA</addrLine></address></meeting>
		<imprint>
			<publisher>USENIX Association</publisher>
			<date type="published" when="2012" />
			<biblScope unit="volume">12</biblScope>
		</imprint>
	</monogr>
</biblStruct>

				</listBibl>
			</div>
		</back>
	</text>
</TEI>
