<?xml version="1.0" encoding="UTF-8"?>
<TEI xmlns="http://www.tei-c.org/ns/1.0" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
xsi:schemaLocation="http://www.tei-c.org/ns/1.0 /Users/atharsefid/Desktop/grobid-0.5.3/grobid-home/schemas/xsd/Grobid.xsd"
 xmlns:xlink="http://www.w3.org/1999/xlink">
	<teiHeader xml:lang="en">
		<encodingDesc>
			<appInfo>
				<application version="0.5.3" ident="GROBID" when="2020-09-29T02:33+0000">
					<ref target="https://github.com/kermitt2/grobid">GROBID - A machine learning software for extracting information from scholarly documents</ref>
				</application>
			</appInfo>
		</encodingDesc>
		<fileDesc>
			<titleStmt>
				<title level="a" type="main">ElasTraS: An Elastic Transactional Data Store in the Cloud</title>
			</titleStmt>
			<publicationStmt>
				<publisher/>
				<availability status="unknown"><licence/></availability>
			</publicationStmt>
			<sourceDesc>
				<biblStruct>
					<analytic>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Sudipto</forename><surname>Das</surname></persName>
							<email>sudipto@cs.ucsb.edu</email>
							<affiliation key="aff0">
								<orgName type="department">Department of Computer Science</orgName>
								<orgName type="institution">UC Santa Barbara</orgName>
								<address>
									<region>CA</region>
									<country key="US">USA</country>
								</address>
							</affiliation>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Divyakant</forename><surname>Agrawal</surname></persName>
							<email>agrawal@cs.ucsb.edu</email>
							<affiliation key="aff0">
								<orgName type="department">Department of Computer Science</orgName>
								<orgName type="institution">UC Santa Barbara</orgName>
								<address>
									<region>CA</region>
									<country key="US">USA</country>
								</address>
							</affiliation>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Amr</forename><forename type="middle">El</forename><surname>Abbadi</surname></persName>
							<affiliation key="aff0">
								<orgName type="department">Department of Computer Science</orgName>
								<orgName type="institution">UC Santa Barbara</orgName>
								<address>
									<region>CA</region>
									<country key="US">USA</country>
								</address>
							</affiliation>
						</author>
						<title level="a" type="main">ElasTraS: An Elastic Transactional Data Store in the Cloud</title>
					</analytic>
					<monogr>
						<imprint>
							<date/>
						</imprint>
					</monogr>
				</biblStruct>
			</sourceDesc>
		</fileDesc>
		<profileDesc>
			<abstract>
				<p>Over the last couple of years, &quot;Cloud Computing&quot; or &quot;Elastic Computing&quot; has emerged as a compelling and successful paradigm for internet scale computing. One of the major contributing factors to this success is the elasticity of resources. In spite of the elasticity provided by the infrastructure and the scalable design of the applications, the elephant (or the underlying database), which drives most of these web-based applications, is not very elastic and scalable, and hence limits scalabil-ity. In this paper, we propose ElasTraS which addresses this issue of scalability and elasticity of the data store in a cloud computing environment to leverage from the elastic nature of the underlying infrastructure, while providing scalable transactional data access. This paper aims at providing the design of a system in progress, highlighting the major design choices, analyzing the different guarantees provided by the system, and identifying several important challenges for the research community striving for computing in the cloud.</p>
			</abstract>
		</profileDesc>
	</teiHeader>
	<text xml:lang="en">
		<body>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="1">Introduction</head><p>"Utility Computing" (popularly known in the industry as "Cloud Computing") has been an extremely successful model for providing Infrastructure as a Service (IaaS) over the internet, and has led to the tremendous success of companies such as Amazon as a technology provider through Amazon Web Services (AWS), Salesforce Inc. and many more. It has been widely discussed to be the "dream come true" for the IT industry, with the potential to transform and revolutionize the IT industry by making software even more attractive <ref type="bibr" target="#b1">[2]</ref>. On one end of the spectrum are these IaaS providers that provide compute cycles, storage, network bandwidth etc., while on the other end of the spectrum are providers like Microsoft's Azure and Google's AppEngine who provide Platform as a Service (PaaS), and are at a much higher level of abstraction. The term "Cloud Computing" encompasses this entire spectrum of services, but in this paper, we mainly concentrate on the IaaS models.</p><p>The major reasons for the widespread popularity and success of Cloud Computing are:</p><p>• No up front cost and Pay-as-you-go model: Allows new applications and product ideas to be tested easily and quickly without significant initial overhead.</p><p>• Elasticity and illusion of infinite resources available on demand: The elastic nature of the cloud allows resources to be allocated on demand allowing applications to easily scale up and down with load changes.</p><p>• Transfer of risk: Allows the handling of risk, e.g. failures, to be shifted from the smaller Software as a Service providers, to the larger entities, i.e. the cloud service providers, who are better equipped to mitigate the risks.</p><p>Typically, web-based applications have a 3-tier architecture, the Web Server, Application Server, and the Database Server. In general, different instances of application servers and web servers within the same application do not share any state information. Therefore, when the application load increases, the application server layer and the web server layer can be easily scaled up by spawning new machine instances that absorb the increased load. But in most common cases, the database back-end becomes the scalability bottleneck, since the database servers do not easily scale. In such a scenario, if the database server also had the elastic property of scaling up and down as per the load characteristics, then the entire software stack would scale better. One might argue in favor of data management services like Amazon's SimpleDB which can scale to huge amounts of data and large number of requests, but SimpleDB and similar scalable key-value stores like Bigtable <ref type="bibr" target="#b6">[7]</ref> and Dynamo <ref type="bibr" target="#b9">[10]</ref>, although highly scalable, stop short of providing transactional guarantees even on a single row. In this paper, we propose ElasTraS, an Elastic Transactional Data Store, which is elastic along the same lines as the elastic cloud, while providing transactional guarantees. ElasTraS is designed to be a light-weight data store that supports only a sub-set of the operations supported by traditional database systems, and hence we call ElasTraS a data store, while reserving the term databases for more traditional database systems. ElasTraS is analogous to partitioned databases <ref type="bibr" target="#b2">[3]</ref> which are common in enterprise systems, while adding features and components critical towards elasticity of the data store. In our design, we leverage from proven database techniques <ref type="bibr" target="#b21">[21,</ref><ref type="bibr" target="#b11">12]</ref> for dealing with concurrency control, isolation, and recovery, while using design principles of scalable systems such as Bigtable <ref type="bibr" target="#b6">[7]</ref> to overcome the limitations of distributed database systems <ref type="bibr" target="#b14">[15,</ref><ref type="bibr" target="#b17">18]</ref>. This paper aims at providing the design of a system in progress, highlighting the major design choices, analyzing the different guarantees provided by the system, and identifying new challenges for the research community.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2">Related Work</head><p>Based on the expertise gained from building distributed database systems <ref type="bibr" target="#b14">[15,</ref><ref type="bibr" target="#b17">18]</ref>, researchers and designers have realized that supporting distributed transactions does not allow scalable and available designs. Hence, to satisfy the scalability requirements of web applications, designers have sacrificed the ability to support distributed transactions <ref type="bibr" target="#b12">[13]</ref>. This resulted in the design of simpler data stores based on the key-value schema, where tables are viewed as a huge collection of key-value entries, and the values might have some structure, or may be viewed as uninterpreted strings of bytes <ref type="bibr" target="#b8">[9]</ref>. Examples of these systems include Bigtable <ref type="bibr" target="#b6">[7]</ref>, Dynamo <ref type="bibr" target="#b9">[10]</ref>, PNUTS <ref type="bibr" target="#b7">[8]</ref>, Amazon SimpleDB, Facebook Cassandra, and many more. These systems limit access granularity to single key accesses, while providing minimal consistency and atomicity guarantees on multi-key accesses. This allows the system to horizontally partition the tables, without worrying about the need for distributed synchronization. These systems can be viewed to be the other end of the spectrum of data management solutions when compared to transactional databases. In particular, these systems are designed for high scalability and availability, but not to replace the traditional databases for consistent transactional properties, and recovery.</p><p>Other systems spanning the middle ground include Sinfonia <ref type="bibr" target="#b0">[1]</ref>, where the minitransaction primitive demonstrates that distributed transactions and distributed commitment, if used in a prudent manner, can be used for the design of scalable distributed systems. Similarly, Chubby <ref type="bibr" target="#b4">[5]</ref>, which uses the expensive Paxos consensus protocol <ref type="bibr" target="#b13">[14]</ref>, forms the core of scalable data management systems such as Google File System <ref type="bibr" target="#b10">[11]</ref> and Bigtable <ref type="bibr" target="#b6">[7]</ref>. These systems demonstrate that even though the paradigm of distributed databases was not successful, a lot of important concepts that were developed for these systems can be effectively used in modern scalable systems.</p><p>There have been efforts in designing databases for the cloud. Brantner et al <ref type="bibr" target="#b3">[4]</ref> suggest a design for a database server that can use Amazon's S3 as a storage layer for the database engine, while the transaction manager might be located inside or outside the cloud. On the other hand, Lomet et al. <ref type="bibr" target="#b15">[16]</ref> suggest a radically different approach where they suggest unbundling the transaction and the data manager. Even though these techniques open many interesting research avenues, the authors do not address the problem of elastic scaling of database systems in the cloud. ElasTraS has been designed with the goal of scalable and elastic transaction management in the cloud.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3">System Design</head></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.1">Data Model</head><p>Practice has shown that most application developers do not require a flexible schema as defined in the SQL standard and supported by most database systems. Modern application developers, in most cases, need systems with simple schema for storing their data, while providing fast and efficient access to it. The flexible data model supported by conventional databases is an overkill in most cases <ref type="bibr" target="#b9">[10,</ref><ref type="bibr" target="#b19">19]</ref>. Modern applications need a slightly enhanced version of Indexed Sequential Access Methods, and this forms the basis for the data model of modern scalable systems like Bigtable <ref type="bibr" target="#b6">[7]</ref>, Dynamo <ref type="bibr" target="#b9">[10]</ref>, PNUTS <ref type="bibr" target="#b7">[8]</ref>, SimpleDB etc. For ElasTraS, we choose a key-value based design similar to Bigtable <ref type="bibr" target="#b6">[7]</ref> where values have application specified structure.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.2">Design Overview</head><p>The ElasTraS system has been designed with the intent to provide transactional guarantees in a scalable manner, rather than retrofitting these features into an existing system. <ref type="figure" target="#fig_0">Figure 1</ref> provides a high-level overview of the design of ElasTraS. At the heart of the system is a twolevel hierarchy of Transaction Managers (TM) which are responsible for providing transactional guarantees, while providing elastic scalability with increase in demand. At the top of the stack are the application servers and the web servers that interact with the database. Requests to the database are handled through the load balancer. When a transaction request arrives, the load balancer forwards it to a Higher Level Transaction Manager (HTM) based on some load balancing policy. The HTM then decides whether it can execute the transaction locally, or route it to the appropriate Owning Transaction Manager (OTM) which owns exclusive access rights to the data accessed by the transaction. The actual data for the data store is stored in the distributed storage layer. All critical state information of the system, i.e. the system state <ref type="bibr" target="#b8">[9]</ref> and the metadata for the tables, is managed by the Metadata Manager. All the components of ElasTraS are located in the cloud. In ElasTraS the database tables are partitioned, and ElasTraS can be configured for both static and dynamic partitioning. Static partitioning in ElasTraS is analogous to database partitioning <ref type="bibr" target="#b2">[3]</ref> -the database designer partitions the database, and ElasTraS is responsible for mapping partitions to specific OTMs, and reassigning partitions with changing load characteristics to ensure scalability and elasticity. In this configuration, the application is aware of the partitions, and hence can be designed to limit transactions to single partitions. In such a configuration, ElasTraS can provide ACID transactional guarantees for transactions limited to a partition. Under dynamic partitioning configuration, ElasTraS, in addition to managing partition mapping, is also responsible for database partitioning using range or hash based partitioning schemes. Since the applications are not aware of the partitions, transactions are not guaranteed to be limited to a single partition. To ensure scalability in a dynamic partitioning setup, and avoid distributed transaction, ElasTraS only supports minitransactions <ref type="bibr" target="#b0">[1]</ref>, a scalable and primitive with restricted transactional semantics, which ensures recovery but not global synchronization. We now discuss the different components of the system, and Section 4.1 provides details of various transactional guarantees provided by ElasTraS.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.2.1">Distributed Storage</head><p>The distributed storage layer provides an abstraction of a fault-tolerant shared disk which can be accessed from anywhere in the network. This abstraction of the storage layer has effectively been used in the design of a number of systems such as the use of the Google File System <ref type="bibr" target="#b10">[11]</ref> by Bigtable <ref type="bibr" target="#b6">[7]</ref> and the use of Amazon S3 in designing a database on S3 <ref type="bibr" target="#b3">[4]</ref>. The storage layer takes care of replication and fault-tolerance, while the application accessing the storage should ensure that the same object or file is not being written to concurrently. Considering the fact that synchronous replication is expensive, it can be expected that the storage layer replication will be asynchronous and eventually consistent <ref type="bibr" target="#b20">[20]</ref>. But if there are a limited number of failures, it can be easily assumed that the storage layer provides consistent access to single objects, or in other words, reads and writes to the storage layer are atomic. Since in the presence of failures, the storage layer might return stale data, some notion of versions should be associated with the data. If the storage layer provides support for versioning, then the system can leverage it, otherwise, versioning should be explicitly incorporated.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.2.2">Owning Transaction Managers</head><p>The Owning Transaction Managers (OTM) are the entities responsible for the execution of transactions on the partitions of the databases, and have exclusive access rights to the partitions they own. These are analogous to the tablet servers in Bigtable <ref type="bibr" target="#b6">[7]</ref>, and own disjoint partitions of the database. An OTM is responsible for all the concurrency control and recovery functionality for the partitions it owns. Since an OTM has exclusive access to the set of partitions its owns, it can aggressively cache the contents of the partition in its local disk, thereby preventing expensive accesses to the distributed storage which actually stores the data. To guarantee the durability of committed transactions, all changes made by a transaction should be stored on some medium that can tolerate the failure of the OTM, and allow the system to recover from such failures and guarantee the durability of committed transactions.</p><p>In order to deal with dynamic partition assignments and the failure of OTMs, and to ensure that only one OTM is serving a partition, every OTM acquires a lease for a partition with the metadata manager, which is renewed periodically. If an OTM has successfully acquired a lease, then the metadata manager ensures that the OTM has exclusive access to the partition, and hence the OTM can execute transactions on the partition without the need for distributed synchronization. This mechanism of distributed lease maintenance is similar to that supported by Chubby <ref type="bibr" target="#b4">[5]</ref> and used in Bigtable <ref type="bibr" target="#b6">[7]</ref>.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.2.3">Metadata Manager and Master</head><p>The Metadata Manager and Master (MMM) is the brain of the system that stores the system state <ref type="bibr" target="#b8">[9]</ref>, viz., partition information, mapping of partitions to OTM, leasing information for the OTMs to deal with failures, and monitoring the health of the system. In addition to providing strong durability and consistency guarantees for the metadata of the system, this entity also acts as a Master which monitors the health of the system and performs the necessary system maintenance in the presence of failures. The Master monitors the system and ensures that if an OTM fails, then another OTM is instantiated to serve the partition, and also deals with partition reassignment for load balancing. High consistency of the data stored in the MMM is guaranteed through synchronous replication of the contents. For this purpose, we choose a system design similar to that of the Chubby locking service <ref type="bibr" target="#b4">[5]</ref> that uses the Paxos consensus algorithm <ref type="bibr" target="#b13">[14]</ref> for replica consistency <ref type="bibr" target="#b5">[6]</ref>. Paxos guarantees safety and consistency in the presence of arbitrary failures, but the availability or liveness of the system is not guaranteed in the presence of failures. In the AWS infrastructure, failures in one availability zone are isolated from failures in other availability zones. Hence, high availability can be achieved by the judicious placement of replicas so that correlated failures do not affect a majority of the replicas. Note that the presence of Paxos <ref type="bibr" target="#b13">[14]</ref> in the core makes write accesses to the MMM costly. As a result, the MMM should not be heavily loaded with a huge number of requests. Since the MMM does not reside in the data path, and in most cases the clients of the system can cache the metadata, the MMM should not be a performance bottleneck for the system.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.2.4">Higher level Transaction Managers</head><p>The Higher level Transaction Managers (HTM) are designed to absorb all read-only transactions in the workload. HTMs cache subsets of the database for read-only purposes, and answer queries from its cache. In static partitioning, transactions associated with a single partition are routed to the appropriate OTM which executes the transactions. For minitransactions <ref type="bibr" target="#b0">[1]</ref>, the HTM becomes the coordinator, while OTMs owning the partitions accessed by the minitransaction are the cohorts. Neither readonly transactions nor minitransactions associate any state with the HTMs. In both cases, the HTMs do not have any state coupling with OTMs, and the number of OTM and HTM instances can be different depending on the system configuration and the load on the system. For routing a request to the appropriate OTM, the HTM caches the mapping of partitions to OTMs. Unlike the OTMs, which are responsible for only partitions of the database, the HTMs span the entire database for read-only queries and minitransactions.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4">Implementation Sketch</head></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.1">Transaction Management</head><p>In a statically partitioned setup, applications can limit transactions to single partitions. Within a partition, ElasTraS provides ACID guarantees similar to transactions in databases. The only subtle difference is in the level of consistency (the C in ACID) guaranteed by ElasTraS. To obviate distributed synchronization, and minimize the impact of a single TM failure on the operation of the remaining TMs, ElasTraS guarantees consistency only within a partition of the database and there is no notion of consistency across partitions or global serializability <ref type="bibr" target="#b21">[21]</ref>. Efficient performance can therefore be achieved since an OTM is guaranteed exclusive access to the partitions it owns, and proven techniques for concurrency control, isolation, and recovery in traditional databases <ref type="bibr" target="#b21">[21,</ref><ref type="bibr" target="#b11">12]</ref> can be used in designing the OTM.</p><p>Since an OTM has exclusive access to the partition, it can aggressively cache the database contents in its local disk, and the updates can be asynchronously applied to the distributed store in a manner similar to database checkpointing <ref type="bibr" target="#b21">[21]</ref>. Since dynamic partitioning does not allow applications to limit transactions to a single partition, ElasTraS only supports minitransactions <ref type="bibr" target="#b0">[1]</ref> in this setup, while supporting both forms of transactions for a statically partitioned setup. In executing a minitransaction, there is no need for synchronization amongts participating OTMs, and hence, minitransactions can be efficiently executed within ElasTraS.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.2">Recovery done right</head><p>Failure of OTM: To ensure the durability of transactions, OTMs use write-ahead logging. As a result, techniques such as ARIES <ref type="bibr" target="#b16">[17]</ref> and other similar recovery techniques <ref type="bibr" target="#b21">[21,</ref><ref type="bibr" target="#b11">12]</ref> can be used for efficient recovery. In the AWS model, when a machine instance crashes, its local disk is also lost. Therefore, to guarantee the durability and persistence of transactions beyond the failure of an OTM, the log entries of committed transactions should be stored on some persistent storage. But since logging must be performed during normal transaction execution, the performance of an OTM would suffer if the log entries are forced to a distributed store like S3. AWS provides a better solution in the form of Elastic Block Storage (EBS), which provides persistence beyond instance failures, allowing log entries to be stored on EBS. Our initial experiments with EBS showed that for sequential reads and writes, the performance of EBS is comparable to disks associated with AWS machine instances. Therefore, using EBS for both caching data pages, and storing logs would provide better performance, though at a higher dollar cost. When an OTM fails, its lease with the metadata manager expires, and once the master notices that the OTM instance has failed, it can instantiate a new OTM, which recovers the state of the failed OTM from the logs. A similar mechanism is used in Bigtable <ref type="bibr" target="#b6">[7]</ref> to deal with tablet server failures. Failure of HTM: Very little state is associated with the HTMs and hence, handling HTM failures is easier. All progress of a read-only transaction is lost when the HTM executing it fails. Clients of such transactions time out, and application specific recovery triggered. For minitransactions <ref type="bibr" target="#b0">[1]</ref>, no state is associated with the coordinator, and hence the recovery principles described in Sinfonia <ref type="bibr" target="#b0">[1]</ref> can be used to recover a minitransaction from HTM or coordinator failures.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.3">Elasticity</head><p>The ability of the system to deal with dynamic partition reassignments is the basis for the elasticity of the data store. When the load on the system is low, the system can operate with a small number of HTM and OTM instances. As the load on the system increases, the partitions can be reassigned to lesser loaded OTMs, or new OTMs can be spawned to absorb the load and take ownership of some partitions from the heavily loaded transaction managers. Since the HTMs do not share any state information, spawning new HTMs is easy, and amounts to spawning new instances that can immediately start absorbing the load. On the other hand, when a new OTM instance is created, it has to acquire a lease from the metadata manager, obtain control for some of the partitions, update the metadata to reflect the modified mapping, and perform any partition specific recovery. Once this is done, the new OTM is ready to execute transactions for the partition, while the old OTMs reject or redirect transactions of the reassigned partitions. Similarly, when the load decreases, the system can detect this and decide to remove OTM and/or HTM instances. Removal of HTM instances requires notifying the load balancer about the update, and then stopping the physical instance. Removing OTM instances requires updates to the metadata and the transfer of control of the partitions to some other OTM. Once control is transferred, the physical OTM instance can be stopped. Since AWS uses a pay-as-you-go model, stopped instances do not incur any cost, and hence, at low loads, the cost of operating the data store also reduces.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5">Discussion and Conclusion</head><p>The proposed design of ElasTraS can provide ACID guarantees for transactions that are limited to a single partition. Practice has shown that most web workloads are limited to single object accesses <ref type="bibr" target="#b19">[19,</ref><ref type="bibr" target="#b9">10]</ref>, and hence, these transactional accesses can be trivially supported by ElasTraS. In addition, most enterprise systems are designed for statically partitioned databases, and transactions are limited to a single database partition, and ElasTraS can provide efficient, scalable, and elastic transactional access to the partitioned data store. In such a scenario, the ElasTraS design can still provide elasticity and scalability by dynamic partition reassignment based on the load on the system, while providing serializable transactional guarantees within a partition. Additionally, for applications where the designer does not want to statically partition the database, ElasTraS can dynamically partition the database. In addition to singleobject transactions, ElasTraS can be easily extended to support minitransactions as defined by the Sinfonia system <ref type="bibr" target="#b0">[1]</ref>, but flexible transactions are not supported in the interest of scalability and elasticity. Based on these requirements of modern applications, we are in the process of formalizing the various forms of transactions that can be efficiently executed by ElasTraS, while having minimal impact of application design and preserving the 3-tier architecture of web-servers, application servers, with ElasTraS replacing the database servers in the cloud, thus providing a high degree of elasticity and flexibility throughout the entire architecture.</p></div><figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_0"><head>Figure 1 :</head><label>1</label><figDesc>Figure 1: Overview of the ElasTraS system.</figDesc></figure>
		</body>
		<back>

			<div type="acknowledgement">
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Acknowledgements</head><p>The authors would like to thank the anonymous reviewers for their useful comments and suggestions that helped improve this paper. This work is partly supported by NSF Grants IIS-0744539 and CNS-0423336</p></div>
			</div>

			<div type="references">

				<listBibl>

<biblStruct xml:id="b0">
	<analytic>
		<title level="a" type="main">Sinfonia: a new paradigm for building scalable distributed systems</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><forename type="middle">K</forename><surname>Aguilera</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Merchant</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Shah</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Veitch</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><surname>Karamanolis</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">SOSP</title>
		<imprint>
			<date type="published" when="2007" />
			<biblScope unit="page" from="159" to="174" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b1">
	<monogr>
				<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Armbrust</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Fox</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Griffith</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><forename type="middle">D</forename><surname>Joseph</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Katz</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Konwinski</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">G</forename><surname>Lee</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Patterson</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Rabkin</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">I</forename><surname>Stoica</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Zaharia</surname></persName>
		</author>
		<idno>2009-28</idno>
		<title level="m">Above the Clouds: A Berkeley View of Cloud Computing</title>
		<imprint>
			<date type="published" when="2009" />
		</imprint>
		<respStmt>
			<orgName>UC Berkeley</orgName>
		</respStmt>
	</monogr>
<note type="report_type">Technical Report</note>
</biblStruct>

<biblStruct xml:id="b2">
	<monogr>
		<title level="m" type="main">Whitepaper: Partitioning in Oracle Database 11g</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">H</forename><surname>Baer</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2007-06" />
			<pubPlace>Oracle</pubPlace>
		</imprint>
	</monogr>
<note type="report_type">Technical report</note>
</biblStruct>

<biblStruct xml:id="b3">
	<analytic>
		<title level="a" type="main">Building a database on S3</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Brantner</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Florescu</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Graf</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Kossmann</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><surname>Kraska</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">SIGMOD</title>
		<imprint>
			<date type="published" when="2008" />
			<biblScope unit="page" from="251" to="264" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b4">
	<analytic>
		<title level="a" type="main">The Chubby Lock Service for Loosely-Coupled Distributed Systems</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Burrows</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">OSDI</title>
		<imprint>
			<date type="published" when="2006" />
			<biblScope unit="page" from="335" to="350" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b5">
	<analytic>
		<title level="a" type="main">Paxos made live: an engineering perspective</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><forename type="middle">D</forename><surname>Chandra</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Griesemer</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Redstone</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">PODC</title>
		<imprint>
			<date type="published" when="2007" />
			<biblScope unit="page" from="398" to="407" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b6">
	<analytic>
		<title level="a" type="main">Bigtable: A Distributed Storage System for Structured Data</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">F</forename><surname>Chang</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Dean</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Ghemawat</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">W</forename><forename type="middle">C</forename><surname>Hsieh</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><forename type="middle">A</forename><surname>Wallach</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Burrows</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><surname>Chandra</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Fikes</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><forename type="middle">E</forename><surname>Gruber</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">OSDI</title>
		<imprint>
			<date type="published" when="2006" />
			<biblScope unit="page" from="205" to="218" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b7">
	<analytic>
		<title level="a" type="main">PNUTS: Yahoo!&apos;s hosted data serving platform</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">B</forename><forename type="middle">F</forename><surname>Cooper</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Ramakrishnan</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">U</forename><surname>Srivastava</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Silberstein</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><surname>Bohannon</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">H.-A</forename><surname>Jacobsen</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">N</forename><surname>Puz</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Weaver</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Yerneni</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. VLDB Endow</title>
		<meeting>VLDB Endow</meeting>
		<imprint>
			<date type="published" when="2008" />
			<biblScope unit="volume">1</biblScope>
			<biblScope unit="page" from="1277" to="1288" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b8">
	<monogr>
		<title level="m" type="main">Clouded Data: Comprehending Scalable Data Management Systems</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Das</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Antony</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Agrawal</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><forename type="middle">El</forename><surname>Abbadi</surname></persName>
		</author>
		<idno>2008-18</idno>
		<imprint>
			<date type="published" when="2008" />
			<publisher>UCSB</publisher>
		</imprint>
	</monogr>
<note type="report_type">Technical Report</note>
</biblStruct>

<biblStruct xml:id="b9">
	<analytic>
		<title level="a" type="main">Dynamo: Amazon&apos;s highly available key-value store</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">G</forename><surname>Decandia</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Hastorun</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Jampani</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">G</forename><surname>Kakulapati</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Lakshman</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Pilchin</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Sivasubramanian</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><surname>Vosshall</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">W</forename><surname>Vogels</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">SOSP</title>
		<imprint>
			<date type="published" when="2007" />
			<biblScope unit="page" from="205" to="220" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b10">
	<analytic>
		<title level="a" type="main">The Google file system</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Ghemawat</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">H</forename><surname>Gobioff</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S.-T</forename><surname>Leung</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">SOSP</title>
		<imprint>
			<date type="published" when="2003" />
			<biblScope unit="page" from="29" to="43" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b11">
	<monogr>
		<title level="m" type="main">Transaction Processing: Concepts and Techniques</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Gray</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Reuter</surname></persName>
		</author>
		<imprint>
			<date type="published" when="1992" />
			<publisher>Morgan Kaufmann Publishers Inc</publisher>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b12">
	<analytic>
		<title level="a" type="main">Life beyond distributed transactions: an apostate&apos;s opinion</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><surname>Helland</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">CIDR</title>
		<imprint>
			<date type="published" when="2007" />
			<biblScope unit="page" from="132" to="141" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b13">
	<analytic>
		<title level="a" type="main">The part-time parliament</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">L</forename><surname>Lamport</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">ACM Trans. Comput. Syst</title>
		<imprint>
			<biblScope unit="volume">16</biblScope>
			<biblScope unit="issue">2</biblScope>
			<biblScope unit="page" from="133" to="169" />
			<date type="published" when="1998" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b14">
	<analytic>
		<title level="a" type="main">Computation and communication in R*: a distributed database manager</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">B</forename><forename type="middle">G</forename><surname>Lindsay</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">L</forename><forename type="middle">M</forename><surname>Haas</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><surname>Mohan</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><forename type="middle">F</forename><surname>Wilms</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><forename type="middle">A</forename><surname>Yost</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">ACM Trans. Comput. Syst</title>
		<imprint>
			<biblScope unit="volume">2</biblScope>
			<biblScope unit="issue">1</biblScope>
			<biblScope unit="page" from="24" to="38" />
			<date type="published" when="1984" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b15">
	<analytic>
		<title level="a" type="main">Unbundling transaction services in the cloud</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><forename type="middle">B</forename><surname>Lomet</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Fekete</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">G</forename><surname>Weikum</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><forename type="middle">J</forename><surname>Zwilling</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">CIDR Perspectives</title>
		<imprint>
			<date type="published" when="2009" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b16">
	<analytic>
		<title level="a" type="main">ARIES-RRH: Restricted Repeating of History in the ARIES Transaction Recovery Method</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><surname>Mohan</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">H</forename><surname>Pirahesh</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">ICDE</title>
		<imprint>
			<date type="published" when="1991" />
			<biblScope unit="page" from="718" to="727" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b17">
	<monogr>
		<title/>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><forename type="middle">B</forename><surname>Rothnie</surname><genName>Jr</genName></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><forename type="middle">A</forename><surname>Bernstein</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Fox</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">N</forename><surname>Goodman</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Hammer</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><forename type="middle">A</forename><surname>Landers</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><forename type="middle">L</forename><surname>Reeve</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><forename type="middle">W</forename><surname>Shipman</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">E</forename><surname>Wong</surname></persName>
		</author>
		<imprint/>
	</monogr>
	<note>Introduction to a System for Distributed Databases (SDD-1</note>
</biblStruct>

<biblStruct xml:id="b18">
	<analytic>
		<title/>
	</analytic>
	<monogr>
		<title level="j">ACM Trans. Database Syst</title>
		<imprint>
			<biblScope unit="volume">5</biblScope>
			<biblScope unit="issue">1</biblScope>
			<biblScope unit="page" from="1" to="17" />
			<date type="published" when="1980" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b19">
	<analytic>
		<title level="a" type="main">Data access patterns in the amazon.com technology platform</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">W</forename><surname>Vogels</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">VLDB</title>
		<imprint>
			<date type="published" when="2007" />
			<biblScope unit="page" from="1" to="1" />
		</imprint>
		<respStmt>
			<orgName>VLDB Endowment</orgName>
		</respStmt>
	</monogr>
</biblStruct>

<biblStruct xml:id="b20">
	<analytic>
		<title level="a" type="main">Eventually consistent</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">W</forename><surname>Vogels</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Commun. ACM</title>
		<imprint>
			<biblScope unit="volume">52</biblScope>
			<biblScope unit="issue">1</biblScope>
			<biblScope unit="page" from="40" to="44" />
			<date type="published" when="2009" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b21">
	<monogr>
		<title level="m" type="main">Transactional information systems: theory, algorithms, and the practice of concurrency control and recovery</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">G</forename><surname>Weikum</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">G</forename><surname>Vossen</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2001" />
			<publisher>Morgan Kaufmann Publishers Inc</publisher>
		</imprint>
	</monogr>
</biblStruct>

				</listBibl>
			</div>
		</back>
	</text>
</TEI>
