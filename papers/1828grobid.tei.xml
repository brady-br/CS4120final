<?xml version="1.0" encoding="UTF-8"?>
<TEI xmlns="http://www.tei-c.org/ns/1.0" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
xsi:schemaLocation="http://www.tei-c.org/ns/1.0 /Users/atharsefid/Desktop/grobid-0.5.3/grobid-home/schemas/xsd/Grobid.xsd"
 xmlns:xlink="http://www.w3.org/1999/xlink">
	<teiHeader xml:lang="en">
		<encodingDesc>
			<appInfo>
				<application version="0.5.3" ident="GROBID" when="2020-09-29T02:12+0000">
					<ref target="https://github.com/kermitt2/grobid">GROBID - A machine learning software for extracting information from scholarly documents</ref>
				</application>
			</appInfo>
		</encodingDesc>
		<fileDesc>
			<titleStmt>
				<title level="a" type="main">Fence: Protecting Device Availability With Uniform Resource Control Fence: Protecting Device Availability With Uniform Resource Control</title>
			</titleStmt>
			<publicationStmt>
				<publisher/>
				<availability status="unknown"><licence/></availability>
				<date>July 8-10. 2015</date>
			</publicationStmt>
			<sourceDesc>
				<biblStruct>
					<analytic>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Tao</forename><surname>Li</surname></persName>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Albert</forename><surname>Rafetseder</surname></persName>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Tao</forename><surname>Li</surname></persName>
							<affiliation key="aff3">
								<orgName type="institution">New York University</orgName>
							</affiliation>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Albert</forename><surname>Rafetseder</surname></persName>
							<affiliation key="aff3">
								<orgName type="institution">New York University</orgName>
							</affiliation>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Rodrigo</forename><surname>Fonseca</surname></persName>
							<affiliation key="aff4">
								<orgName type="institution">Brown University</orgName>
							</affiliation>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Justin</forename><surname>Cappos</surname></persName>
							<affiliation key="aff3">
								<orgName type="institution">New York University</orgName>
							</affiliation>
						</author>
						<author>
							<affiliation key="aff0">
								<orgName type="institution">New York University</orgName>
								<address>
									<addrLine>Rodrigo Fonseca</addrLine>
								</address>
							</affiliation>
						</author>
						<author>
							<affiliation key="aff1">
								<orgName type="institution">Brown University</orgName>
								<address>
									<addrLine>Justin Cappos</addrLine>
								</address>
							</affiliation>
						</author>
						<author>
							<affiliation key="aff2">
								<orgName type="institution" key="instit1">New York University</orgName>
								<orgName type="institution" key="instit2">USENIX Association</orgName>
							</affiliation>
						</author>
						<title level="a" type="main">Fence: Protecting Device Availability With Uniform Resource Control Fence: Protecting Device Availability With Uniform Resource Control</title>
					</analytic>
					<monogr>
						<title level="m">Proceedings of the 2015 USENIX Annual Technical Conference (USENIC ATC &apos;15)</title>
						<meeting>the 2015 USENIX Annual Technical Conference (USENIC ATC &apos;15) <address><addrLine>Santa Clara, CA, USA</addrLine></address>
						</meeting>
						<imprint>
							<biblScope unit="page">177</biblScope>
							<date type="published">July 8-10. 2015</date>
						</imprint>
					</monogr>
					<note>This paper is included in the Open access to the Proceedings of the 2015 USENIX Annual Technical Conference (USENIX ATC &apos;15) is sponsored by USENIX.</note>
				</biblStruct>
			</sourceDesc>
		</fileDesc>
		<profileDesc>
			<abstract>
				<p>Applications such as software updaters or a runaway web app, even if low priority, can cause performance degradation , loss of battery life, or other issues that reduce a computing device&apos;s availability. The core problem is that OS resource control mechanisms unevenly apply unco-ordinated policies across different resources. This paper shows how handling resources-e.g., CPU, memory, sockets , and bandwidth-in coordination, through a unifying abstraction, can be both simpler and more effective. We abstract resources along two dimensions of fungibility and renewability, to enable resource-agnostic algorithms to provide resource limits for a diverse set of applications. We demonstrate the power of our resource abstraction with a prototype resource control subsystem, Fence, which we implement for two sandbox environments running on a wide variety of operating systems (Windows, Linux, the BSDs, Mac OS X, iOS, Android, OLPC, and Nokia) and device types (servers, desktops, tablets, lap-tops, and smartphones). We use Fence to provide system-wide protection against resource hogging processes that include limiting battery drain, preventing overheating, and isolating performance. Even when there is interference , Fence can double the battery life and improve the responsiveness of other applications by an order of magnitude. Fence is publicly available and has been deployed in practice for five years, protecting tens of thousands of users.</p>
			</abstract>
		</profileDesc>
	</teiHeader>
	<text xml:lang="en">
		<body>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="1">Introduction</head><p>Unfortunately, it is still common for end-user devices to suffer from unexpected loss of availability: applications run less responsively, media playback skips instead of running smoothly, or a full battery charge lasts hours less than expected. The cause might be a website running JavaScript <ref type="bibr" target="#b3">[5,</ref><ref type="bibr" target="#b4">6]</ref>, a software updater overstepping its bounds <ref type="bibr" target="#b8">[10]</ref>, an inopportune virus scan <ref type="bibr">[20,</ref><ref type="bibr" target="#b17">27]</ref>, or a file sync tool such as Dropbox indexing content <ref type="bibr" target="#b2">[3,</ref><ref type="bibr" target="#b5">7]</ref>. A buggy shell that leaks file descriptors can prevent other applications from running correctly <ref type="bibr" target="#b10">[14]</ref>. Moreover, the cause may be unwanted apps or functionalities bundled with a legitimate application, such as advertisements <ref type="bibr" target="#b62">[71]</ref> or hidden BitCoin miners <ref type="bibr" target="#b12">[18]</ref>. Malicious applications may even attempt to overheat the device to cause permanent damage <ref type="bibr" target="#b43">[54]</ref>.</p><p>Although dealing with resource contention is a problem as old as multiprogrammed operating systems, today's platforms present renewed challenges. Key properties of a system such as battery life, application performance, or device temperature depend on multiple resources. This, along with the resource-constrained nature of mobile devices and the number and ease of installing applications from "app stores," exacerbates the problem. In many cases, one cannot simply identify and kill processes that consume too many resources, because many programs execute useful-but-gluttonous tasks. For example, a web browser may execute inefficient JavaScript code from a site that slows down the device. However, the browser overall consists of many interrelated processes that render and execute code from different sites. Selectively containing resource usage is much better than killing the browser.</p><p>Our work addresses the problem of improving device availability in the presence of useful-but-gluttonous applications that can consume one or more types of resources. We introduce a non-intrusive mechanism that mediates and limits access to diverse resources using uniform resource control. Our approach has two parts: a unifying resource abstraction, and resource control. We abstract resources along two dimensions, allowing uniform reasoning about all system resources, such as CPU, memory, sockets, or I/O bandwidth. The first dimension classifies each resource as fungible (i.e., interchangeable, such as disk space) or non-fungible (i.e., unique, such as a specific TCP port). The second dimension classifies resources as either renewable (i.e., automatically replenished over time, such as CPU quanta) or non-renewable (i.e., time independent, such as RAM space). Using only these two dimensions, we are able to fully define a policy to control a specific resource. Adding a mechanism that quantifies and regulates access to each resource, either through interposition or polling, provides the desired level of control.</p><p>We demonstrate the feasibility of our approach by designing and building a resource control subsystem for sandbox environments, which we call Fence. Fence allows arbitrary limits to be placed on the resource consumption of an application process by applying a resource control policy consistently across resource types. This allows it to provide much better availability, when faced with a diverse set of resource-intensive applications, than would resource-specific tools. As we show in ยง5, when the system is under contention from a resource-hungry process, our current user-space implementation of Fence provides double the battery life and a performance improvement of an order of magnitude relative to widely used OS-level and hardware solutions.</p><p>Fence is the first approach for controlling multiple resources across multiple platforms. By arbitrarily limiting resource consumption, Fence bounds the impact that applications can have on device availability as well as on properties such as heat or battery drain. Fence runs in user space, which makes it usable even within Virtual Machines (VMs) and on already deployed systems, where privileged access might be problematic and lowlevel changes could be disruptive.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2">Scope</head><p>Fence's controls work insofar as it can interpose on applications' requests for resources. As a proof of concept, Fence is targeted at application hosts, such as sandbox environments, VMs, browsers, or plugin hosts. The same unified policies could be implemented in an OS.</p><p>Most modern operating systems have mechanisms for identifying and limiting the resource usage of applications and processes <ref type="bibr">[11,</ref><ref type="bibr">15,</ref><ref type="bibr">25]</ref>. However, as the prevalence of availability problems indicates, and we further demonstrate in ยง5, existing mechanisms do not adequately isolate resources among applications. A major cause of device availability problems is that there is no single resource where contention happens, which implies that any mechanism that controls a single resource will not be effective. Furthermore, because existing mechanisms use different abstractions and control points, it is very hard, if not ineffective, to write coordinated policies across different resources. Priority-based allocation and resource reservation systems (along with hybrids of the two) offer partial solutions in some cases, but the combined properties and guarantees are far from sufficient in practice. They apply ad-hoc and uncoordinated resource control across diverse resource types, and do not offer uniform functionality, abstractions, or behavior.</p><p>Recent developments in Linux's cgroups (cf. ยง7) provide a more unified approach to resource management, but are still restricted to one operating system. We implement Fence's resource control mechanisms -polling and interposition -at the user level, making it easily portable across many different platforms.</p><p>In this paper we assume that hog applications are "useful-but-gluttonous." That is, a hog application may attempt to consume a large amount of resources, but is otherwise desirable. Specifically, we do not attempt to protect against applications that perform clearly malicious actions, such as deleting core OS files, killing random processes, or installing key loggers (existing work addresses such issues). The desired outcome is that the user has control over properties such as the responsiveness, battery  life, and heat for any set of applications, especially hogs. Our main focus in this paper is how to provide the needed mechanisms for resource-control, not on providing a specific resource control policy. As a first step, we demonstrate the effectiveness of Fence with two simple policies, both assuming that we can identify and have the privilege to control the hog process: one in which we manually provide static limits (most scenarios in ยง5), and one in which the policy sets dynamic resource limits to achieve a desired battery lifetime ( ยง5.5). We anticipate, however, that more sophisticated policies are possible and applicable in other scenarios.</p><p>Lastly, a note about who interacts with Fence. Fence's mechanisms are integrated into a platform, e.g., a new sandbox environment, by the authors of the environment. Policies, on the other hand, can be written by the same authors, by third parties such as machine administrators, or by end-users. This paper does not specify higher-level interfaces for specifying policies. Fence should be transparent to applications running within the environment.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3">Managing Resources</head><p>In this section, we present Fence's resource abstraction, and discuss how using a simple classification of resources, along the dimensions of fungibility ( ยง3.1) and renewability ( ยง3.2), makes it possible to control their usage in a unified way. We assume a simple policy of limiting resource consumption by imposing a quota, given in terms of either an absolute quantity or a utilization. 1 Following that, ยง3.3 explains how control is enforced on resources, and ยง3.4 discusses choosing resource limit settings.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.1">Fungible and non-fungible</head><p>One way to characterize low-level resources is by whether or not they are fungible, i.e., whether one instance of the resource can stand in for or indiscernibly replace any other instance. A fungible resource is something like a slot in the file descriptor table. It does not matter to the application that accesses a file where exactly the slot maps into the kernel's table. However, overconsumption of the resource can cause stability issues <ref type="bibr" target="#b10">[14]</ref>. Fungible resources only need to be counted. The maximum allowed utilization by an application is capped by a quota. Fungible resources can be managed by maintaining, according to the resource's usage, an available quantity relative to a quota. <ref type="table" target="#tab_1">Table 1</ref> summarize how gaining access to fungible resources works. As long as the requested resource quantity is within the quota, access is granted and the consumed quantity is logged. If a request exceeds the quota, granting access depends on the renewability of the resource (defined in ยง3.2 below), and will either fail or block until the required quantity becomes available. This will happen either over time (for a renewable resource), or through explicit release by the caller (for a non-renewable resource).</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Lines 1, 2 and 3 of</head><p>For a non-fungible resource, like a listening TCP or UDP port, each resource is unique. Each application may request one specific instance and will effectively block all other uses of this resource instance. Non-fungible resources need to be controlled on a system-wide basis. In most cases, non-fungible resources are assigned by Fence and reserved by applications, even when the application is not executing. Thus, even if a webserver application is not running, it may reserve TCP port 8080 to prevent other applications from using the port (closing a common security hole <ref type="bibr" target="#b74">[83]</ref>).</p><p>Non-fungible resource access is summarized in lines 4, 5 and 6 of Table 1. A non-fungible resource that is not currently allocated can be accessed (after allocating it to the caller). Otherwise, access to a busy resource will either block or raise an error. Similar to fungible resources, nonfungible resources will either replenish over time, or are released explicitly by the caller.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.2">Renewable and non-renewable</head><p>Some low-level resources, such as CPU cycles and network transmit rate, have an innate time dimension wherein the operating system continually schedules the use of the device or resource. These low-level resources are renewable resources because they automatically replenish as time elapses. Put another way, one cannot conserve the resource by not using it. If the CPU remains idle for a quantum, this does not mean there is an extra quantum of CPU available later. The control mechanism for a renewable resource is to limit the rate of usage, or utilization. Utilization is controlled over one or more periods, where the application's use of the resource is first measured and then paused for as long as required to bound it below a threshold, on average.</p><p>For example, to bound data plan costs, one may set a per-month limit for an application. Preventing the application's data usage from impacting the responsiveness of other network applications may also require a persecond limit. If an application attempts to consume a renewable resource at a faster rate than is allowed, the request is not issued until sufficient time has passed. (An extreme version of this involves batching requests together <ref type="bibr">[17,</ref><ref type="bibr" target="#b47">58,</ref><ref type="bibr" target="#b67">76]</ref>.) Lines 1 and 4 in <ref type="table" target="#tab_1">Table 1</ref> show that access is granted when there is sufficient quota or unallocated resources. When a renewable resource is oversubscribed or busy (as shown in lines 2 and 5), it will block access until the resource is replenished, which will happen when the caller refrains from using the resource for an interval.</p><p>Non-renewable resources like memory, file descriptors, or persistent storage space are acquired by an application and (ignoring memory paging) are not time-sliced out or shared by other applications. As a result, granting access to a non-renewable resource is a conceptually permanent allocation from the application's perspective. For resources other than persistent storage space, the allocation usually coincides with the lifespan of the application instance, although the application may often choose to voluntarily relinquish the resource at any time. Short of forcibly stopping the application instance, there is little remedy for reclaiming most non-renewable resources once they are allocated.</p><p>To monitor and control the usage of non-renewable resources, it suffices to keep a table of resource assignments that track and update requests and releases. Once resource caps are set, an application can never request more non-renewable resources than the cap. A request can be met if the requested quantity is no greater than the cap on a fungible resource (see line 1 of <ref type="table" target="#tab_1">Table 1)</ref>, or, for a non-fungible resource, if the resource is not already allocated (line 4). Trying to exceed the cap will result in an error signal (line 3), as will trying to access an already allocated resource (line 6).</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.3">Enforcing Resource Controls</head><p>In the preceding discussion it was assumed that resource consumption can be measured and controlled in some way. While the restrictions Fence intends to place upon resources are fully specified by their fungibility and renewability, the method of enforcing resource controls is not, and will potentially vary across implementations of Fence, on different platforms. We describe two specific types of enforcement that allow Fence to control resources: (1) call interposition and (2) polling and signaling (indicated in <ref type="figure" target="#fig_0">Figure 1</ref>).</p><p>Call interposition. Interposition allows Fence to be called every time a process consumes a resource. However, there are different strategies that one may choose to control resources. For example, consider the case of restricting network I/O rate (a renewable resource). Suppose that a program requests to send 1MB of data over a connected TCP socket. The fundamental question is when Fence's control of this resource should be enforced.</p><p>Pre-call strategy. If an application is only charged for sent data before the call executes, then often times it will be overcharged. Given our example of a 1MB send, the send buffer may not be large enough to accept delivery of the entire amount and so much less may be sent. In such a scenario, Fence would block the program for a longer time than is actually needed. Post-call strategy. If the application is only charged after the call executes, however, it is possible to start threads that make huge requests to transmit information. This could allow the user to monopolize resources in the short term and to consume a large amount of resources.</p><p>Pre-and-post-call strategy. To better meter renewable resources, one can decouple the potential delay of access (done to adjust utilization based on past usage), from accounting, which is best performed after access. With this method, the pre-call portion of control will block until the use from prior calls has replenished; after that, the function is executed and the post-call portion charges the consumed amount.</p><p>Micro-call strategy. Finally, another option is to break a large call up into smaller calls and then allow Fence to handle them separately. However, this has the drawback of changing the original call semantics in some cases. For example, suppose that an application is only permitted to send 20kB of data per second. However, the caller wants to send a UDP datagram of 60kB. Instead of sending one 60kB datagram, the application could send three separate 20kB datagrams. Since each datagram is a "message" and the loss / boundaries between messages are meaningful (unlike the stream abstraction of TCP), sending three 20kB datagrams has a different meaning than does sending one 60kB datagram.</p><p>In practice, Fence is largely used with the pre-and-postcall strategy for renewable resources. For non-renewable resources, the pre-call strategy is predominant, because it will block access to an unauthorized resource before it occurs. Other strategies can be used, depending on how Fence is integrated into a platform.</p><p>Polling and signaling. For resources on which it cannot interpose, Fence uses polling, coupled with some form of limit enforcement, such as signaling, as a complementary mechanism to control resource usage. For example, for CPU scheduling, Fence does not modify the OS; rather, the OS scheduler manages process scheduling directly. Fence needs to poll to understand how often a process has been scheduled and must signal the scheduler to stop or start executing the application. This has a number of implications <ref type="bibr">[80, ยง5.5.3]</ref>, <ref type="bibr">[78, ยง18.3]</ref> that call interposition does not present.</p><p>Atomicity. While trivially implementable for call interposition (e.g., by guarding calls with semaphores), resource access is not guaranteed to be atomic. This raises potential Time-Of-Check To Time-Of-Use (TOCTTOU) issues between threads of the same application as well as other applications wanting to access the resource.</p><p>Interference due to load. Fence's polling and signaling impose a certain amount of overhead that depends on the rate of checking and control. When the machine is under load, Fence might not be able to keep up with its planned check and control schedule. As a result, a process under its control can consume a resource for longer than the time scheduled by Fence. Thus, in the worst case, this causes overconsumption and reinforces the overload condition.</p><p>Rate of checking and control. The fidelity and overhead of resource control depend on the rate at which control is enforced. The minimum rate (i.e. the longest interval between interruptions) is given by the minimal fidelity desired. If the rate is too low, a process might overspend a resource between checks. The maximum rate is bounded by the maximum acceptable overhead -each check and interruption causes additional cost -and the granularity of checking and control (which defines the minimum possible length of interruption).</p><p>Polling and signaling granularity. Granularity is the smallest unit of measurement and control of a resource, e.g., the resolution of the system clock, or the unit job that control functions can handle (process, thread). If the granularity is too coarse, Fence might misapprehend the resource consumption of a process under its control during polling or enforce undue restrictions on the process.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.4">Choosing Resource Control Settings</head><p>A question that follows from the previously discussed framework is how to choose which resources to allocate to a process. This can be viewed along two axes. First, policies can set direct per-resource usage limits or quotas, or indirectly establish limits based on the effect of resource usage on device availability. Second, such limits may be static, set manually and a priori, or dynamic, where policies continually adjust limits to achieve availability goals <ref type="bibr" target="#b1">2</ref>   <ref type="figure">Figure 2</ref>: Fence's uniform control APIs for resources based on fungibility and renewability numbers) or for items that are hard to quantify (like privacy, cf. ยง6), choosing appropriate resource settings is typically done manually during packaging or installation.</p><p>However, the relationship between a limit (say, 30% of CPU or disk bandwidth), and user-observable properties (such as response time, battery life, or heat) is nonobvious and dependent on a number of factors. Accurate resource modeling is very difficult and in general requires advanced techniques <ref type="bibr" target="#b24">[35,</ref><ref type="bibr" target="#b34">45,</ref><ref type="bibr" target="#b58">68,</ref><ref type="bibr" target="#b66">75,</ref><ref type="bibr" target="#b80">89]</ref>, but determining a workload that approximates the maximum negative impact is an easier task.</p><p>Fence provides the capability to automatically choose resource limits, in particular, for fungible resources. When Fence is installed, it can benchmark the platform and check the usage impact on different resources, such as performance degradation, battery usage, or temperature. By understanding the impact of individual resources, one can choose resource settings that provide device availability in the face of contention. In ยง5.5 we show a policy that sets limits both indirectly and dynamically, based on a target battery lifetime.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4">Implementation</head><p>Fence's fully functional open source implementation that runs across various hardware platforms and OSses includes the features and functionality described in the previous sections. The core implementation is 790 lines of Python code (as counted by sloccount). There are two major portions of the Fence code: the uniform resource control code (140 LOC) and the operating system specific code (650 LOC).</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.1">Uniform Resource Control</head><p>Because the uniform resource control code only differs in its characteristics of fungibility and renewability, it fits within 140 LOC. Fence is informed about resource consumption by performing a set of four calls as is shown in <ref type="figure">Figure 2</ref>.</p><p>The specific call made depends on the type of re-  source being consumed. For example, the Seattle sandbox (described in more detail in ยง 6) required an additional 79 lines of code to support Fence, 68 of which were direct calls to Fence <ref type="figure" target="#fig_2">Figure 3</ref> shows some of the code changes made to sendmessage, Seattle's API call for sending UDP datagrams. The first call, is item allowed(), checks whether the UDP port (a non-fungible, non-renewable resource) can be consumed. The tattle add item() call is used to charge for entries in the socket descriptor table to prevent the kernel from being overloaded with active sockets. The tattle quantity() call charges for the consumed bandwidth (a renewable resource), depending on the destination interface.</p><p>In addition, there is an API that can be used to set high level policy. This is done by setting low-level resource quotas for the different resources that Fence manages. For example, if energy is the primary concern, resource quotas can be set to restrict the maximum expected energy consumption over a polling period. Actual energy consumed can be measured and the resource quota values updated appropriately.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.2">Operating System Specific Code</head><p>The bulk of the Fence code (650 LOC) is operating system specific and involves supporting polling or enforcement across various platforms, including Windows XP and later, Mac OS X, Linux, BSD variants, One Laptop Per Child, Nokia devices, iPhones / iPods / iPads, and Android phones and tablets.</p><p>While all these platforms have the necessary low-level functionality, a convergence layer is still required because polling and enforcement semantics differ from platform to platform. For example, resource statistics are gathered in a fundamentally different way across many types of devices. However, the operating systems for many platforms are derived from similar sources and thus share some subset of resource control functionality. For example, the Android port of Fence is based on the convergence layer of the Linux implementation of Fence and reuses almost all of its code.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.3">Operating System Hooks Utilized</head><p>At the lowest level, Fence polls OS specific hooks for performance profiling to obtain statistics about the resource consumption of an application. To gain control over scheduling, Fence uses the job control interface on most OSes (SIGSTOP and SIGCONT), or the SuspendThread / ResumeThread interface on Windows. This informs the scheduler when to suspend or continue a process, in order to impose a different scheduling policy than the underlying OS scheduler. This can give a program less CPU time than it would ordinarily have to limit its performance impact, rate of battery drain, or heat.</p><p>To control resources other than the CPU, Fence constructs a uniform interface to low-level functionality that operates in an OS-specific manner. Consider memory as an example: On Linux and Android, Fence can use proc to read the memory consumption (Resident Set Size) for the process. On Mac OS X, similar actions are performed by interfacing with libproc. On Windows, calls to kernel32 and psapi, the process status API, reveal the required information. Inside of its resource measurement and control routines, Fence can then use a single high-level call to gather the memory usage of a process, no matter what underlying OS or platform is used.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5">Evaluation</head><p>We evaluated Fence's software artifact and its deployment to investigate the following questions.</p><p>In situations with resource contention, how effectively do uniform resource control and legacy ad-hoc techniques provide device availability? ( ยง5.2)</p><p>How well does uniform resource control function across diverse platforms? ( ยง5.3)</p><p>How much overhead is incurred when employing uniform resource control during normal operation? <ref type="figure" target="#fig_3">( ยง5.4)</ref> Can realistic, high level policies be expressed with Fence? ( ยง5.5)</p><p>How diverse are the resources that can be metered by uniform resource control? ( ยง6)</p><p>How time consuming and challenging is it to add a new resource type to Fence? ( ยง6)</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5.1">Experiment Methodology</head><p>To understand the tradeoffs between customized solutions and uniform resource control, we compared Fence to wellknown, deployed tools found on common OSes. These included nice (which sets the scheduling priority of a process), ionice (similarly for I/O priority), ulimit (which imposes hard limits on the overall consumption of resources like file sizes, overall CPU time, and stack size), as well as a combination of these tools. We also included cpufreq-set, which changes the CPU frequency within the device and slows down all processing.</p><p>To create a model hog application that stresses resources, we created a series of processes that were intended to consume the entirety of a specific type of resource. For example, a CPU hog will simply go into an infinite loop, while a memory hog will acquire as much memory as possible and constantly touch different parts of it. We also created an 'everything hog' process that would use all of the memory, CPU, network bandwidth, and storage I/O it was allowed to consume.</p><p>For those experiments that looked at power consumption and temperature, we used the devices' built-in ACPI interfaces. Measurements were taken after a machine had been in a steady load state for ten minutes, to account for heating and cooling effects between load changes.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5.2">Availability of Fence vs Legacy Tools</head></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5.2.1">Performance Degradation</head><p>Setup. To evaluate all of the tested tools' abilities to contain a hog process, we ran an experiment where the 'everything hog' interfered with VLC playback of a 1080p H.264 video <ref type="bibr" target="#b15">[24]</ref> stored on disk. The results presented here were generated on a Dell Inspiron 630m laptop running Ubuntu 10.04; however, our results were similar across different device types and operating systems. We set all of the tools, including Fence, to their most restrictive settings 3 in order to contain the hog processes. For nice and ionice, VLC was additionally set to have the highest possible priority.</p><p>Result. <ref type="figure" target="#fig_3">Figure 4</ref> shows the results 4 in terms of the proportion of frames decoded by the player when competing with hog processes. Existing tools performed very poorly when competing with the 'everything hog' -using nice (19.2%), ionice (17.7%), or ulimit (16.4%) showed not much more impact than not using them (16.7%). Even using a combination of all these tools showed little effect (21.8%). Setting the CPU frequency lower (7.9%) slowed down the entire system, including the video player, causing even more dropped frames. Because Fence limits all types of resources, even the everything hog has very limited impact (Fence delivers 99.8% of the frames).</p><p>One surprising finding was that nice was highly ineffective in protecting the video player against a CPU hog.  It provides little benefit for a high-priority program that exhibits bursty behavior with implicit deadlines for work activities. However, tasks that constantly consume CPU, such as benchmarks, benefited substantially from nice. Evaluations of the 'everything hog' showed that heavy use of one resource tended to cause a performance problem for other resources. Thus, resource conflicts seemed to compound, yet defenses were about the same as the strongest individual defense. This implies that uniformly strong defenses are essential to preventing an application from degrading performance.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5.2.2">Control Of Power And Heat</head><p>Setup. We next compared the effectiveness of popular tools in controlling the rate of power consumption and thermal effect (heat) caused by an application. To make this comparison, we ran an 'everything hog' process on the laptop for ten minutes and examined the ACPI battery and temperature sensors. We then applied Fence, ulimit, cpufreq-set, nice, and ionice on the hog process, for ten minutes each, and read the battery and temperature sensors again. To understand the impact of the tool, we varied the hog's priority or resource settings by choosing a variety of settings, including the lowest to highest settings permitted by the tool. Intermediate settings were used to further understand the tool's effective range of control. An ideal tool would allow the temperature and battery drain of the 'everything hog' to be precisely controlled in a range from idle (no impact from the hog) to full system utilization (full performance of the hog).</p><p>Results. <ref type="figure" target="#fig_4">Figure 5</ref> shows the ability of tools to control the rate of battery consumption and heat. Existing tools, such as ulimit and nice, showed no measurable impact on a hog's ability to consume power (48.4W) or to raise the temperature of a device (71.5ยฐC). This is because when there are available resources, any program (no matter how low its priority) can exhaust the battery and thermal capabilities of a device. In comparison, ulimit can at least slightly improve battery life (41.9W) and thermal effect (67.4ยฐC) because it will reduce memory use. Using all these tools simultaneously on a hog produced a similar effect to ulimit (42.2W, 67.1ยฐC). Thus ulimit, nice, and ionice are not effective in controlling battery drain or heat.</p><p>In our experiment, cpufreq-set was much more effective than were other off-the-shelf tools (30.8W, 47.7ยฐC). However, as described in the previous section, cpufreq-set negatively impacted all applications. It also failed to control access to resources other than the CPU, which resulted in high residual battery drain and temperature (e.g., from wireless network adapters).</p><p>Fence was much more effective in controlling battery consumption; it brought these values down to within .2% of idle. The uniform resource control impacted all power consuming resources, which led to effective control of battery drain and heat.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5.3">Effectiveness on Diverse Platforms</head><p>Setup. We ran a series of benchmarks to investigate whether uniform resource control is effective on diverse platforms. We tested Fence on smartphones (Samsung Galaxy Y, Nokia N800), tablets (Samsung Galaxy Tab, Apple iPad), laptops (MacBook, Inspiron, Thinkpad), desktop PCs (Alienware, Ideacenter), and also the commercial Amazon EC2 cloud computing platform. Operating systems tested included Windows 7, Ubuntu 10.04 to 12.04, Mac OS X 10.8.4, Nokia's OS2008, Android 2.3.5 and 4.0.3, and a jailbroken iOS 5.0.1</p><p>We ran five benchmarks for the Seattle testbed, including an HTTP server serving a large file, an Amazon S3-like block storage service, an HTTP server benchmark with small files / directory entries, a UDP P2P messaging program, and the Richards benchmark <ref type="bibr">[19]</ref>, set up against an 'everything hog'. Note that the last four benchmarks were qualitatively and quantitatively similar, so we only present the results from the S3 blockstore. <ref type="figure" target="#fig_5">Figure 6</ref> shows the results of these benchmarks with both an 'everything hog' with no restrictions and an 'everything hog' under Fence's control. The values are all normalized by dividing by the benchmark time on an idle device. Results. The benchmark performance when the hog was unrestricted ranged from about 60% (Lenovo IdeaCentre running Ubuntu 11.04) down to 2% (Nokia N800). Note that performance results for the unrestricted hog on a jailbroken iPad are not represented because parts of the system crashed when we instantiated an unrestricted hog process.</p><p>If the hog process is bound by Fence to consume at most 1% of a device's resources, a typical VM size in the Seattle testbed <ref type="bibr" target="#b57">[67]</ref>, the hog's impact on a benchmark is minimal. If the hog is restricted to 1%, then the benchmark should run with about 99% of the original performance. The lowest value (90%) was recorded on a Nokia N800 that was purchased in 2007. On very low power devices such as this, Fence's overhead for polling and signaling is significant. However on other platforms, the benchmark's execution time was within 98% of the original performance. Our tests show that uniform resource control provides strong device availability with low overhead across a diverse array of modern platforms.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5.4">Overhead of Fence</head><p>Both interposition and polling can incur overhead on applications. Although the exact overhead will depend on where and how uniform resource control is implemented, it is important to have a rough understanding of the cost. We measured the overhead from both prepost call interposition ( ยง3.3) and polling / signaling using   <ref type="bibr" target="#b66">[75]</ref>. Tap is the longterm power target; reserve rate the maximum currently allowed power. Benchmark idles in shaded regions.</p><p>Pulse-Frequency Modulation <ref type="bibr" target="#b26">[37]</ref>. <ref type="figure" target="#fig_6">Figure 7</ref> shows the relative overhead incurred by the CPU polling mechanism <ref type="bibr" target="#b3">5</ref> used by Fence when compared with an unrestricted benchmark on a Lenovo IdeaCentre K330 desktop PC running Ubuntu 11.04. Results for other operating systems and platforms were qualitatively similar. Fence's current implementation uses a 100ms polling interval for Linux on a desktop machine, which causes an overhead of less than 4% across the range of CPU allowances. If the polling interval was reduced to 20ms, control would be finer-grained, but the overhead would exceed 10% for allowance values above 50%. (Only at 100% allowance, i.e., no CPU restrictions, does the overhead drop again. In this case, Fence never detects that the CPU allowance was exceeded; thus, only polling causes overhead and no signaling overhead is incurred.) Results for many shorter polling rates (e.g., 1ms) are omitted because they do not fit on the graph. Using a 100ms polling interval for Fence results in low overhead across a wide variety of resource restriction settings.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5.5">Expressing a High-Level Policy</head><p>We now explore how a high-level policy can be expressed with Fence. To demonstrate this we implemented a simple policy from Cinder [75, <ref type="figure" target="#fig_0">Fig.1</ref>] to limit the long-term power draw of an application. Cinder uses reserves that store energy and taps that transfer energy between reserves per unit time to control energy use. In this scenario, a fixed-rate tap replenishes a reserve at fixed intervals, and the application can only draw energy from the reserve. (This is analogous to a token bucket where the tap is the filling rate of the bucket and the reserve is the number of tokens in the bucket.) The tap limits the long-term power draw, which is useful to provide battery lifetime guarantees, while the reserve allows for bursts. We implemented the policy as a control loop that reads the battery information from ACPI to determine the power draw for the previous interval, computes the necessary limits for processes, and sets the quota for Fence to enforce.</p><p>We examined the power draw on a Dell M1210 laptop. The long-term power draw goal from the battery was set to 25.4W, corresponding to about 69% between idle (12.0W) and maximum (31.5W) power draw on this machine. The "battery tap" replenished a reserve from which the application drew energy. To read the battery information from the system, we used the power supply API that updated approximately every 15 seconds. The theoretical maximum power draw in the reserve for one period was tracked at the same temporal resolution.</p><p>Fence operates at the user level and as such does not have low-level information about the energy consumption of individual hardware components. To enforce energy consumption restrictions, we requested that Fence set the quota on every renewable resource based on the amount of energy in the reserve. For example, if the reserve allowed for 28W for the next interval, then all renewable resources were set to 82% of their maximum value, as 28W = 12.0W + 0.82% ยท (31.5W โ 12.0W). While this policy has many simplifying assumptions, we find that in practice it works.</p><p>We ran a Richards benchmark <ref type="bibr">[19]</ref> in the following fashion. It ran for 10 periods (where a period is the amount of time between power supply readings), and then slept for 2 periods. After doing this three times, it ran continually for 20 periods. The benchmark was run according to this schedule, both with and without Fence.</p><p>Results of this benchmark are shown in <ref type="figure" target="#fig_7">Figure 8</ref>. The shaded areas indicate when the benchmark was sleeping. The tap rate, representing the long-term power draw goal, was 25.4W for each period. The unrestricted rate shows the benchmark's power draw in absence of any power restrictions: For the majority of time that the benchmark test was active, it caused the battery to drain at approximately the maximum rate.</p><p>The Fence rate shows the benchmark's power draw when run under Fence. Note that unlike the unrestricted benchmark, the behavior of this line is limited by two power rates: The maximum power draw that the system allows, and also the amount in reserve in each period. When the reserve is large (for example, right after a sleep period), Fence behaves similarly to the unrestricted rate, and uses energy at approximately the maximum rate. When the reserve is small, Fence restricts power use to approximately the rate of the tap. Cinder's policy uses Fence to enforce that the overall power use stays within budget, while allowing the application to have flexibility in when it consumes its energy budget.</p><p>Fence's power restrictions are inaccurate, due in part to our implementation working at user space. As such we do not directly account for complex issues of power use in the underlying platform (e.g. tail power consumption <ref type="bibr" target="#b23">[34]</ref>). However, Fence will read the new battery level during the next period and will drain the reserve based upon what was actually consumed. Fence's adjustment in subsequent periods mitigates the effect of this inaccuracy.</p><p>Fence made implementing Cinder's policy very straightforward. The implementation is 150 lines of code and did not require any detailed knowledge of the underlying resource types or control mechanisms. The implementation simply reads the battery level and adjusts the values in the resource table based upon the reserve and tap settings. This demonstrates that uniform resource control may make policy implementation easier, which we hope will lead to more application developers and system designers using such mechanisms.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="6">Practical Fence Deployments</head><p>Seattle's Use of Fence. Fence is deployed as a part of the Seattle testbed <ref type="bibr" target="#b13">[21]</ref>. Seattle runs on laptops, tablets, and smartphones, with more than twenty thousand installs distributed around the world <ref type="bibr" target="#b79">[88]</ref>. The Seattle testbed is used to measure end user connectivity, to build peer-topeer services, and as a platform for apps that measure and avoid Internet censorship <ref type="bibr" target="#b11">[16,</ref><ref type="bibr" target="#b33">44,</ref><ref type="bibr" target="#b35">46,</ref><ref type="bibr" target="#b64">73,</ref><ref type="bibr" target="#b72">81]</ref>. Seattle is also widely used in computer science education where it has been used in more than fifty classes at more than a dozen universities <ref type="bibr" target="#b28">[39,</ref><ref type="bibr" target="#b30">41,</ref><ref type="bibr" target="#b57">67]</ref>.</p><p>Each device running Seattle uses Fence to allocate a fixed percentage (usually 10%) of the device's CPU, memory, disk, and other resources to one or more VMs. When a Seattle sandbox <ref type="bibr" target="#b29">[40]</ref> is started, it reads a text file that lists the resources allocated to the program. Each line contains a resource type and quantity (for fungible resources) or the name of the resource (for nonfungible resources). For example, resource memory 10000000 sets the memory cap to 10 million bytes, and resource udpport 12345 allows the program to send and receive UDP traffic on port 12345.</p><p>Seattle's categorization of resources and enforcement mechanisms are shown in  for Fence to reclaim memory used by an application. As such, Seattle enforces a hard maximum allowed memory limit for an application, so a process trying to exceed the limit will be forcefully killed.</p><p>Lind's Use of Fence.  <ref type="table" target="#tab_3">Table 2</ref> overviews Lind's resource categorization.</p><p>The Sensibility Testbed's Use of Fence. Fence is not limited to controlling traditional computational resources -it is currently being integrated by the Sensibility Testbed <ref type="bibr">[22]</ref> developers. Sensibility Testbed consists of smartphones and tablets where researchers get access to dozens of diverse sensors including WiFi network information, accelerometer readings, battery level, device ID, GPS, and audio. Sensibility Testbed uses the same sandbox as the Seattle testbed. However, in addition to limiting a program's access to resources for performance reasons, Sensibility Testbed allows users who pass an IRB review to get access to devices' sensors at a rate meant to preserve user privacy (e.g. by limiting the rate or accelerometer queries to prevent sniffing keystrokes <ref type="bibr" target="#b60">[70]</ref>). The demonstrated ability of Fence to provide privacy guarantees across "sensor resources" validates the generality of uniform resource control as a technique. Experiences / Limitations. Our experience is that Fence's effectiveness depends on the amount of resource information available to the developer. E.g., it is relatively straightforward for a sandbox operating in user space to limit disk I/O when interposing on a read or write call on a file descriptor for a regular file -the number of disk blocks accessed is fairly easy to predict. However, it is very hard to provide performance isolation for a call like mount: It may perform a substantial number of disk I/O operations in the kernel, which are not predictable by a sandbox in user space. (For similar reasons, a hardware resource like L2 cache may be difficult to meter using software in an OS kernel.)</p><p>The time it takes a developer to understand the resources consumed by a call depends a lot on the implementer. In our experience, adding calls into Fence in the appropriate parts of the code only takes a few minutes per API call. In fact, outside groups have used Fence to provide resource controls on many platforms (Android, iOS, Nokia, Raspberry PI, and OpenWrt) each necessitating only a few days' worth of effort. The bulk of the effort lies in understanding what resources a call will consume.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="7">Related Work</head><p>Our work follows a substantial amount of prior work that has recognized the need to prevent performance degradation, enhance battery control, and manage heat. Fence is unique in that it works across diverse platforms and presents a portable, user-space solution that unifies resource control across resource types.</p><p>Deployed Solutions For Improved Availability. The need for improved device availability has produced strategies for preventing performance degradation, with different levels of required privileges, including per-application, per-user, OS-wide, and hypervisor-based approaches. For example, modern web browsers monitor the run time of their JavaScript engine to detect "runaway" scripts, i.e., programs that take excessive time to execute and allow the user to stop the script. A malicious script can fool the timer however, by partitioning its workload, or by using Web Workers <ref type="bibr" target="#b59">[69]</ref>. The runaway timer also ignores other resources that the JavaScript program may take, such as network and memory. Another application-level example, the Java Virtual Machine <ref type="bibr" target="#b9">[12]</ref>, supports setting a limit on the amount of memory that can be allocated by a process. However, much like Lua <ref type="bibr" target="#b45">[56]</ref>, Flash <ref type="bibr" target="#b0">[1]</ref>, and other programming language VMs, the Java Virtual Machine (JVM) does not support limiting the rate of some fungible/renewable resources, such as CPU -the primary cause of energy drain and heat on many devices.</p><p>Operating system virtual machine monitors control many different resource types, depending on the implementation <ref type="bibr">[13,</ref><ref type="bibr" target="#b16">26,</ref><ref type="bibr">28,</ref><ref type="bibr" target="#b18">29,</ref><ref type="bibr" target="#b25">36,</ref><ref type="bibr" target="#b63">72]</ref>. However, the resource controls are ad hoc and specific to the type of resource. Bare-metal hypervisors <ref type="bibr">[13,</ref><ref type="bibr" target="#b25">36]</ref> require kernel changes, whereas hosted hypervisors <ref type="bibr" target="#b16">[26,</ref><ref type="bibr">28]</ref> have substantial per-VM resource costs. As a result, none of these are practical to deploy on a per application basis, especially on devices like smartphones and tablets.</p><p>More recently, the cgroups <ref type="bibr">[4]</ref> infrastructure in Linux addresses many of the issues discussed in this paper (CPU, memory use, and disk I/O). cgroups, however, is specific to newer versions of Linux. Due to its location in the kernel, it has better resource granularity than Fence. However, cgroups focuses on point solutions for spe-cific resources, rather than a more uniform and general solution. In contrast, Fence provides a user-space uniform resource control solution that works across a wide array of devices without kernel modifications.</p><p>Operating Systems Research. There are many clean slate OS approaches that would achieve the same improvements as Fence. Since many deployed OSes are ineffective at preventing performance degradation, Fence focuses on providing this property in user space. Several OS-level efforts aim at managing processes' low-level resources consumption in a system-wide manner to control battery life. ECOSystem <ref type="bibr" target="#b80">[89]</ref>, Odyssey <ref type="bibr" target="#b37">[48]</ref>, Cinder <ref type="bibr" target="#b66">[75]</ref>, and ErdOS [85] focus on extending battery life. Their reasoning about resources is fixated on the energy consumed by renewable resources. Scheduling decisions are made exclusively on this foundation. Fence also supports energy-aware resource limiting, but we measure resource consumption as "unit of resource," which enables interesting use cases, such as control strategies based on device responsiveness or service availability.</p><p>Research projects <ref type="bibr" target="#b31">[42,</ref><ref type="bibr" target="#b32">43,</ref><ref type="bibr" target="#b43">54,</ref><ref type="bibr" target="#b49">60,</ref><ref type="bibr" target="#b50">61,</ref><ref type="bibr" target="#b56">66,</ref><ref type="bibr" target="#b78">87]</ref> try to manage thermal effects through temperature-aware prioritybased scheduling and thread placement on the CPU. Our work demonstrates that priority-based scheduling is ineffective at upper-bounding a process.</p><p>The efforts presented above require deep changes to applications to support resource aware operation, are based on new kernels, or use forms of priority-based scheduling that do not succeed in limiting resource consumption. In contrast, Fence requires no changes to OSes or applications, and operates entirely in user space. Furthermore, Fence puts boundaries on any type of resource consumption and can affect more than battery drain. This is achieved by reasoning about, tallying, and controlling multiple different resources in a uniform way.</p><p>Controlling resource consumption is well researched in the real-time OS community <ref type="bibr" target="#b20">[31,</ref><ref type="bibr" target="#b53">64,</ref><ref type="bibr" target="#b65">74]</ref>. Our research focuses on techniques to enhance general-purpose OSes with minimal disruption to existing systems.</p><p>There have been a substantial number of complimentary user-space techniques for improving security that involve system-call interposition <ref type="bibr" target="#b41">[52,</ref><ref type="bibr" target="#b42">53,</ref><ref type="bibr" target="#b48">59]</ref>, host intrusion detection <ref type="bibr" target="#b36">[47,</ref><ref type="bibr" target="#b39">50]</ref>, and access control <ref type="bibr" target="#b44">[55,</ref><ref type="bibr" target="#b68">77,</ref><ref type="bibr" target="#b77">86]</ref>. These mechanisms aim to permit or deny access to resources requested by applications based upon how they will impact the security of the system. Fence's goal is fundamentally different: It limits the rate of resources consumption so that the use of allowed resources does not impact the availability or correct operation of a device.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Idle Resource Consumption</head><p>A variety of frameworks, such as Condor <ref type="bibr" target="#b52">[63]</ref>, SETI@Home <ref type="bibr" target="#b14">[23]</ref>, and Folding@Home <ref type="bibr" target="#b7">[9]</ref> allow trusted developers to consume idle resources on a users device. These wait for the user's system to be idle and then run, so as to not interfere with performance. However, once they run, these programs may fully utilize the CPU, GPU, and similar resources on the device, often leading to significant power drain <ref type="bibr" target="#b1">[2]</ref>. Fence may also operate in such an on-off manner, but it is flexible enough to allow more advanced policies.</p><p>One related effort to Fence in this domain was the construction of an idle resource consumption framework by <ref type="bibr">Abe et al. [30]</ref>. This system runs in user space and leverages special functionality from OS-specific hooks in Solaris revolving around dtrace <ref type="bibr" target="#b27">[38]</ref>. While this provides easy control of native code (which Fence lacks), equivalent techniques do not exist across platforms. As such, this will only work for a few environments, such as BSD, that support similar hooks. As a result, Abe's work cannot be deployed on many systems. (For example, Windows lacks a non-bypassable method for interposing on an untrusted application's operating system calls.) Additionally, as this work seeks to enable background execution only when foreground execution is idle, many of the detection and scheduling results from this work do not apply to our domain. Distributed Systems Research Controlling resource utilization is also an important problem in distributed contexts <ref type="bibr" target="#b21">[32,</ref><ref type="bibr" target="#b22">33,</ref><ref type="bibr" target="#b38">49,</ref><ref type="bibr" target="#b40">51,</ref><ref type="bibr" target="#b46">57,</ref><ref type="bibr" target="#b51">62,</ref><ref type="bibr" target="#b70">79,</ref><ref type="bibr" target="#b73">82,</ref><ref type="bibr" target="#b75">84]</ref>. Significant prior work has focused on efficiently allocating available resources between multiple parties. While managing distributed resources is orthogonal to our goals, Fence embraces richer semantics to reason about resource consumption, rather than utilization; we believe that our approach towards uniform resource control would apply well as a heterogeneity-masking technique in distributed contexts.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="8">Conclusion</head><p>This paper introduces uniform resource control by classifying resources along the dimensions of renewability and fungibility. Our system, Fence, demonstrates that uniform resource control provides flexibility by controlling multiple heterogeneous resources across almost a dozen diverse operating systems. Furthermore, we demonstrate that this technique is particularly adept at addressing issues of performance degradation, heat, and battery drain that many users face today.</p><p>In addition to the experimental validation presented in this paper, Fence has been deployed and adopted to provide resource containment of untrusted user code in several testbeds. As a result, tens of thousands of smartphones, tablets, and desktop OSes around the world rely on Fence to prevent device degradation. Beyond our deployment, we believe Fence's abstractions and mechanisms could be used to provide better resource control for sandboxes, web browsers, virtual machine monitors, and operating systems.</p></div><figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_0"><head>Figure 1 :</head><label>1</label><figDesc>Figure 1: Fence's resource control via call interposition and polling/signaling.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_1"><head>if _is_loopback_ipaddr(destip): fence.tattle_quantity('loopsend', bytessent + 64 ) else: fence.tattle_quantity('netsend', bytessent + 64 )</head><label>6464</label><figDesc>def sendmessage(destip,destport,msg,localip,localport): ... # check that we are permitted to use this port... if not fence.is_item_allowed('messport',localport): raise ResourceAccessDenied("...") # get the OS's UDP socket sock = _get_udp_socket(localip, localport) # Register this socket descriptor with fence fence.tattle_add_item("outsockets", id(sock)) # Send this UDP datagram bytessent = sock.sendto(msg, (destip, destport)) # Account for the network bandwidth utilized...</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_2"><head>Figure 3 :</head><label>3</label><figDesc>Figure 3: Fence additions to the Seattle sandbox's sendmessage call. Added lines of code are in bold text.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_3"><head>Figure 4 :</head><label>4</label><figDesc>Figure 4: Proportion of decoded frames during video playback when competing with different resource hogs (averages of ten runs ยฑฯ , larger is better).</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_4"><head>Figure 5 :</head><label>5</label><figDesc>Figure 5: Battery drain and heat control ranges for various tools. The dashed rectangle bounds the minimum observed (when idle) and maximum observed battery drain / heat of the device. Fence effectively sweeps the full range.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_5"><head>Figure 6 :</head><label>6</label><figDesc>Figure 6: Benchmark performance across devices and OSes in the face of a hog (average of eight runs ยฑฯ , larger is better). *The iPad crashed when run with an unrestricted 'everything hog'.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_6"><head>Figure 7 :</head><label>7</label><figDesc>Figure 7: Overhead of CPU limiting which Fence inflicts on a CPU-intensive benchmark, at different polling rates.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_7"><head>Figure 8 :</head><label>8</label><figDesc>Figure 8: Fence restricts a benchmark's power draw using a simple token-bucket high-level policy [75]. Tap is the longterm power target; reserve rate the maximum currently allowed power. Benchmark idles in shaded regions.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_1" validated="false"><head>Table 1 : Accessing resources with different characteristics</head><label>1</label><figDesc></figDesc><table></table></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_3" validated="false"><head>Table 2 .</head><label>2</label><figDesc></figDesc><table>In the Seattle plat-
form's sandbox, the calls to network and disk devices 
are routed through Fence, whereas usage statistics on 
memory and CPU are polled from the operating system. 
Unfortunately, there is not a clean, cross-platform way </table></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_4" validated="false"><head>Table 2 :</head><label>2</label><figDesc></figDesc><table>The user-space Fence implementation's resource 
categorization used in Seattle [40] and Lind [65]. 

</table></figure>

			<note place="foot" n="1"> As we show in ยง5.5, this quota needs not be static.</note>

			<note place="foot" n="2"> We also envision that different stakeholders desire different policies: For example, a programmer could include Fence in their application in order to tame it; a sysadmin may specify policies based on user groups, time of day etc.; the end user sets values with respect to their current workload and usage requirements.</note>

			<note place="foot" n="3"> I.e. nice level +20, ionice class idle, lowest CPU frequency setting, and ulimit memory to 10 MB; for Fence, 1% of the CPU, 10kBps disk rate, 10 MB of memory 4 An video that shows the playback quality in this experiment is available [8].</note>

			<note place="foot" n="5"> Resource types other than CPU have an impact on the order of 100 ns to 8 ยตs per interposition.</note>
		</body>
		<back>
			<div type="references">

				<listBibl>

<biblStruct xml:id="b0">
	<monogr>
		<title/>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Adobe</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Player</surname></persName>
		</author>
		<ptr target="http://www.adobe.com/software/flash/about" />
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b1">
	<monogr>
				<ptr target="http://boinc.berkeley.edu/wiki/Heat_and_energy_considerations" />
		<title level="m">BOINC wiki: Heat and energy considerations</title>
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b2">
	<monogr>
		<title level="m" type="main">Box Sync ruins my rMBP</title>
		<ptr target="https://support.box.com/entries/21766312-Box-Sync-ruins-my-rMBP" />
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b3">
	<analytic>
		<title/>
		<ptr target="http://www.roslindesign.com/2011/04/08/crash-internet-explorer-9-in-one-line-of-javascript" />
	</analytic>
	<monogr>
		<title level="j">Crash Internet Explorer</title>
		<imprint>
			<biblScope unit="volume">9</biblScope>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b4">
	<monogr>
		<title/>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Javascript</forename><surname>Death To</surname></persName>
		</author>
		<ptr target="http://www.goodbyemicrosoft.net/news.php?item.708.4" />
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b5">
	<monogr>
		<title level="m" type="main">Dropbox using 100% of each core when I turn my machine on</title>
		<ptr target="https://forums.dropbox.com/topic.php?id=62054" />
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b6">
	<monogr>
		<title level="m" type="main">Fence vs nice, ionice, ulimit, cpufreq-set demo video</title>
		<ptr target="https://www.youtube.com/user/fencedemo" />
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b7">
	<monogr>
		<title/>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Folding@home</surname></persName>
		</author>
		<ptr target="http://folding.stanford.edu/" />
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b8">
	<monogr>
		<title level="m" type="main">installd took 130% of CPU and sent temperatures through the roof</title>
		<ptr target="https://discussions.apple.com/thread/3738340" />
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b9">
	<monogr>
		<title/>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Java Virtual Machine</surname></persName>
		</author>
		<ptr target="http://docs.oracle.com/javase/specs/jvms/se7/html/index.html" />
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b10">
	<monogr>
		<title level="m" type="main">Linux -File descriptors exhausted</title>
		<ptr target="http://www.linuxquestions.org/questions/linux-newbie-8/linux-file-descriptors-exhausted-how-to-recover-4175417070/" />
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b11">
	<monogr>
		<title/>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Open3gmap</surname></persName>
		</author>
		<ptr target="https://o3gm.cs.univie.ac.at/" />
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b12">
	<monogr>
				<ptr target="http://blog.malwarebytes.org/fraud-scam/2013/11/potentially-unwanted-miners-toolbar-peddlers-use-your-system-to-make-btc/" />
		<title level="m">Potentially Unwanted Miners -Toolbar Peddlers Use Your System To Make BTC</title>
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b13">
	<monogr>
		<title/>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Page</forename><surname>Seattle Web</surname></persName>
		</author>
		<ptr target="https://seattle.poly.edu/" />
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b14">
	<monogr>
		<title/>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Seti@home</surname></persName>
		</author>
		<ptr target="http://setiathome.berkeley.edu/" />
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b15">
	<monogr>
		<title level="m" type="main">Sintel trailer</title>
		<ptr target="http://www.sintel.org/download" />
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b16">
	<monogr>
		<title/>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Virtualbox</surname></persName>
		</author>
		<ptr target="https://www.virtualbox.org/wiki" />
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b17">
	<monogr>
		<title level="m" type="main">VirusScan freezes up completely during full scan</title>
		<ptr target="https://community.mcafee.com/message/211811" />
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b18">
	<monogr>
				<ptr target="http://support.microsoft.com/kb/958559" />
		<title level="m">Windows Virtual PC</title>
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b19">
	<analytic>
		<title level="a" type="main">Enforcing appropriate process execution for exploiting idle resources from outside operating systems</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Y</forename><surname>Abe</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">H</forename><surname>Yamada</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">K</forename><surname>Kono</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 3rd ACM SIGOPS/EuroSys European Conference on Computer Systems</title>
		<meeting>the 3rd ACM SIGOPS/EuroSys European Conference on Computer Systems</meeting>
		<imprint>
			<date type="published" when="2008" />
			<biblScope unit="page" from="27" to="40" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b20">
	<analytic>
		<title level="a" type="main">Integrating multimedia applications in hard real-time systems</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">L</forename><surname>Abeni</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">G</forename><surname>Buttazzo</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Superiore</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Anna</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 19th IEEE Realtime Systems Symposium</title>
		<meeting>the 19th IEEE Realtime Systems Symposium</meeting>
		<imprint>
			<date type="published" when="1998" />
			<biblScope unit="page" from="4" to="13" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b21">
	<analytic>
		<title level="a" type="main">Sleepserver: a software-only approach for reducing the energy consumption of pcs within enterprise environments</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Y</forename><surname>Agarwal</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Savage</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Gupta</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 2010 USENIX conference on USENIX annual technical conference</title>
		<meeting>the 2010 USENIX conference on USENIX annual technical conference</meeting>
		<imprint>
			<date type="published" when="2010" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b22">
	<monogr>
		<title level="m" type="main">Bellagio: An economic-based resource allocation system for planetlab</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Auyoung</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">B</forename><surname>Chun</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><surname>Ng</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Parkes</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Shneidman</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Snoeren</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Vahdat</surname></persName>
		</author>
		<ptr target="http://www.sysnet.ucsd.edu/หaauyoung/bellagio/about.php" />
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b23">
	<analytic>
		<title level="a" type="main">Energy consumption in mobile phones: a measurement study and implications for network applications</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">N</forename><surname>Balasubramanian</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Balasubramanian</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Venkataramani</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 9th ACM SIGCOMM conference on Internet measurement conference</title>
		<meeting>the 9th ACM SIGCOMM conference on Internet measurement conference</meeting>
		<imprint>
			<publisher>ACM</publisher>
			<date type="published" when="2009" />
			<biblScope unit="page" from="280" to="293" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b24">
	<analytic>
		<title level="a" type="main">Resource containers: A new facility for resource management in server systems</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">G</forename><surname>Banga</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><surname>Druschel</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><forename type="middle">C</forename><surname>Mogul</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">the 3rd Symposium on Operating Systems Design and Implementation</title>
		<imprint>
			<date type="published" when="1999" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b25">
	<analytic>
		<title level="a" type="main">Xen and the art of virtualization</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><surname>Barham</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">B</forename><surname>Dragovic</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">K</forename><surname>Fraser</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Hand</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><surname>Harris</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Ho</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Neugebauer</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">I</forename><surname>Pratt</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Warfield</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">the nineteenth ACM symposium on Operating systems principles</title>
		<imprint>
			<date type="published" when="2003" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b26">
	<analytic>
		<title level="a" type="main">Pulse-frequency modulation applied to the digital control of a thyristor</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Broughton</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE Trans. Industrial Electronics and Control Instrumentation</title>
		<imprint>
			<biblScope unit="volume">24</biblScope>
			<biblScope unit="issue">2</biblScope>
			<biblScope unit="page" from="173" to="177" />
			<date type="published" when="1977-05" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b27">
	<analytic>
		<title level="a" type="main">Dynamic instrumentation of production systems</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">B</forename><forename type="middle">M</forename><surname>Cantrill</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><forename type="middle">W</forename><surname>Shapiro</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><forename type="middle">H</forename></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the Annual Conference on USENIX Annual Technical Conference, ATEC &apos;04</title>
		<meeting>the Annual Conference on USENIX Annual Technical Conference, ATEC &apos;04</meeting>
		<imprint>
			<date type="published" when="2004" />
			<biblScope unit="page" from="2" to="2" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b28">
	<analytic>
		<title level="a" type="main">Seattle: a platform for educational cloud computing</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Cappos</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">I</forename><surname>Beschastnikh</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Krishnamurthy</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><surname>Anderson</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">40th ACM technical symposium on Computer science education</title>
		<imprint>
			<date type="published" when="2009" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b29">
	<analytic>
		<title level="a" type="main">Retaining sandbox containment despite bugs in privileged memory-safe code</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Cappos</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Dadgar</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Rasley</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Samuel</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">I</forename><surname>Beschastnikh</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><surname>Barsan</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Krishnamurthy</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><surname>Anderson</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">the 17th ACM conference on Computer and communications security</title>
		<imprint>
			<date type="published" when="2010" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b30">
	<analytic>
		<title level="a" type="main">Teaching the security mindset with reference monitors</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Cappos</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Weiss</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">45th ACM technical symposium on Computer science education</title>
		<imprint>
			<date type="published" when="2014" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b31">
	<analytic>
		<title level="a" type="main">On the minimization fo the instantaneous temperature for periodic realtime tasks</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Chen</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><surname>Hung</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><surname>Kuo</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Real Time and Embedded Technology and Applications Symposium, 2007. RTAS&apos;07. 13th IEEE</title>
		<imprint>
			<publisher>IEEE</publisher>
			<date type="published" when="2007" />
			<biblScope unit="page" from="236" to="248" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b32">
	<analytic>
		<title level="a" type="main">Thermal-aware task scheduling at the system software level</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Choi</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><surname>Cher</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">H</forename><surname>Franke</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">H</forename><surname>Hamann</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Weger</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><surname>Bose</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 2007 international symposium on Low power electronics and design</title>
		<meeting>the 2007 international symposium on Low power electronics and design</meeting>
		<imprint>
			<publisher>ACM</publisher>
			<date type="published" when="2007" />
			<biblScope unit="page" from="213" to="218" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b33">
	<monogr>
		<title level="m" type="main">Et (smart) phone home! In Proceedings of the compilation of the co-located workshops on DSM&apos;11, TMC&apos;11, AGERE!&apos;11, AOOPES&apos;11, NEAT&apos;11, VMIL&apos;11, SPLASH &apos;11 Workshops</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">L</forename><surname>Collares</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><surname>Matthews</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Cappos</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Y</forename><surname>Coady</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Mcgeer</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2011" />
			<publisher>ACM</publisher>
			<biblScope unit="page" from="283" to="288" />
			<pubPlace>New York, NY, USA</pubPlace>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b34">
	<analytic>
		<title level="a" type="main">I/O resource management through system call scheduling</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><forename type="middle">S</forename><surname>Craciunas</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><forename type="middle">M</forename><surname>Kirsch</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">H</forename><surname>Rรถck</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">ACM SIGOPS Operating Systems Review</title>
		<imprint>
			<biblScope unit="volume">42</biblScope>
			<biblScope unit="issue">5</biblScope>
			<biblScope unit="page" from="44" to="54" />
			<date type="published" when="2008" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b35">
	<analytic>
		<title level="a" type="main">Service architectures for the future converged internet: Specific challenges and possible solutions for mobile broad-band traffic management</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Eisl</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Rafetseder</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">K</forename><surname>Tutschku</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Future Internet Services and Service Architectures</title>
		<imprint>
			<biblScope unit="volume">15</biblScope>
			<biblScope unit="page">49</biblScope>
			<date type="published" when="2011" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b36">
	<analytic>
		<title level="a" type="main">Formalizing sensitivity in static analysis for intrusion detection</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">H</forename><surname>Feng</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Giffin</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Y</forename><surname>Huang</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Jha</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">W</forename><surname>Lee</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">B</forename><surname>Miller</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings. 2004 IEEE Symposium on</title>
		<meeting>2004 IEEE Symposium on</meeting>
		<imprint>
			<date type="published" when="2004" />
			<biblScope unit="page" from="194" to="208" />
		</imprint>
	</monogr>
	<note>Security and Privacy</note>
</biblStruct>

<biblStruct xml:id="b37">
	<analytic>
		<title level="a" type="main">Managing battery lifetime with energy-aware adaptation</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Flinn</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Satyanarayanan</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">ACM Transactions on Computer Systems (TOCS)</title>
		<imprint>
			<date type="published" when="2004" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b38">
	<analytic>
		<title level="a" type="main">Quanto: Tracking energy in networked embedded systems</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Fonseca</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><surname>Dutta</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><surname>Levis</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">I</forename><surname>Stoica</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">the 8th USENIX conference on Operating systems design and implementation</title>
		<imprint>
			<date type="published" when="2008" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b39">
	<analytic>
		<title level="a" type="main">A sense of self for unix processes</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Forrest</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Hofmeyr</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Somayaji</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><surname>Longstaff</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Security and Privacy, 1996. Proceedings., 1996 IEEE Symposium on</title>
		<imprint>
			<date type="published" when="1996" />
			<biblScope unit="page" from="120" to="128" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b40">
	<analytic>
		<title level="a" type="main">Sharp: an architecture for secure resource peering</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Y</forename><surname>Fu</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Chase</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">B</forename><surname>Chun</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Schwab</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Vahdat</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the nineteenth ACM symposium on Operating systems principles, SOSP &apos;03</title>
		<meeting>the nineteenth ACM symposium on Operating systems principles, SOSP &apos;03</meeting>
		<imprint>
			<date type="published" when="2003" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b41">
	<analytic>
		<title level="a" type="main">Ostia: A delegating architecture for secure system call interposition</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><surname>Garfinkel</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">B</forename><surname>Pfaff</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Rosenblum</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">NDSS</title>
		<imprint>
			<date type="published" when="2003" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b42">
	<analytic>
		<title level="a" type="main">A secure environment for untrusted helper applications confining the wily hacker</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">I</forename><surname>Goldberg</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Wagner</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Thomas</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">E</forename><forename type="middle">A</forename><surname>Brewer</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 6th Conference on USENIX Security Symposium</title>
		<meeting>the 6th Conference on USENIX Security Symposium</meeting>
		<imprint>
			<date type="published" when="1996" />
			<biblScope unit="volume">6</biblScope>
		</imprint>
	</monogr>
	<note>SSYM&apos;96</note>
</biblStruct>

<biblStruct xml:id="b43">
	<analytic>
		<title level="a" type="main">Heat stroke: Power-density-based denial of service in SMT</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Hasan</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Jalote</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><forename type="middle">N</forename><surname>Vijaykumar</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><forename type="middle">E</forename><surname>Brodley</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 11th International Symposium on High-Performance Computer Architecture, HPCA &apos;05</title>
		<meeting>the 11th International Symposium on High-Performance Computer Architecture, HPCA &apos;05<address><addrLine>Washington, DC, USA</addrLine></address></meeting>
		<imprint>
			<publisher>IEEE Computer Society</publisher>
			<date type="published" when="2005" />
			<biblScope unit="page" from="166" to="177" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b44">
	<analytic>
		<title level="a" type="main">Applicationsensitive access control evaluation using parameterized expressiveness</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><forename type="middle">L</forename><surname>Hinrichs</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Martinoia</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">W</forename><forename type="middle">C</forename><surname>Garrison</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Iii</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><forename type="middle">J</forename><surname>Lee</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Panebianco</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">L</forename><surname>Zuck</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Computer Security Foundations Symposium</title>
		<imprint>
			<date type="published" when="2013" />
		</imprint>
	</monogr>
	<note>26th IEEE</note>
</biblStruct>

<biblStruct xml:id="b45">
	<analytic>
		<title level="a" type="main">Lua -an extensible extension language</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Ierusalimschy</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">L</forename><forename type="middle">H</forename><surname>De Figueiredo</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">W</forename><surname>Celes</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Software: Practice &amp; Experience</title>
		<imprint>
			<date type="published" when="1995" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b46">
	<analytic>
		<title level="a" type="main">Sharing networked resources with brokered leases</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Irwin</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Chase</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">L</forename><surname>Grit</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Yumerefendi</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Becker</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">K</forename><forename type="middle">G</forename><surname>Yocum</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the annual conference on USENIX &apos;06 Annual Technical Conference, ATEC &apos;06</title>
		<meeting>the annual conference on USENIX &apos;06 Annual Technical Conference, ATEC &apos;06</meeting>
		<imprint>
			<date type="published" when="2006" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b47">
	<monogr>
		<title level="m" type="main">Disk scheduling algorithms based on rotational position</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><forename type="middle">M</forename><surname>Jacobson</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Wilkes</surname></persName>
		</author>
		<idno>HPL-CSP-91-7rev1</idno>
		<imprint>
			<date type="published" when="1991" />
		</imprint>
	</monogr>
<note type="report_type">Technical report</note>
</biblStruct>

<biblStruct xml:id="b48">
	<analytic>
		<title level="a" type="main">Analyzing integrity protection in the selinux example policy</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><surname>Jaeger</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Sailer</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">X</forename><surname>Zhang</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 12th Conference on USENIX Security Symposium</title>
		<meeting>the 12th Conference on USENIX Security Symposium<address><addrLine>Berkeley, CA, USA</addrLine></address></meeting>
		<imprint>
			<date type="published" when="2003" />
			<biblScope unit="volume">12</biblScope>
			<biblScope unit="page" from="5" to="5" />
		</imprint>
	</monogr>
<note type="report_type">USENIX Association</note>
	<note>SSYM&apos;03</note>
</biblStruct>

<biblStruct xml:id="b49">
	<analytic>
		<title level="a" type="main">Temperature aware scheduling for embedded processors</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Jayaseelan</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><surname>Mitra</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">22nd International Conference on</title>
		<imprint>
			<publisher>IEEE</publisher>
			<date type="published" when="2009" />
			<biblScope unit="page" from="541" to="546" />
		</imprint>
	</monogr>
	<note>VLSI Design</note>
</biblStruct>

<biblStruct xml:id="b50">
	<analytic>
		<title level="a" type="main">Hybdtm: a coordinated hardware-software approach for dynamic thermal management</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Kumar</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">L</forename><surname>Shang</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">L</forename><surname>Peh</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">N</forename><surname>Jha</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 43rd annual Design Automation Conference</title>
		<meeting>the 43rd annual Design Automation Conference</meeting>
		<imprint>
			<publisher>ACM</publisher>
			<date type="published" when="2006" />
			<biblScope unit="page" from="548" to="553" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b51">
	<analytic>
		<title level="a" type="main">Tycoon: An implementation of a distributed, market-based resource allocation system</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">K</forename><surname>Lai</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">L</forename><surname>Rasmusson</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">E</forename><surname>Adar</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">L</forename><surname>Zhang</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">B</forename><forename type="middle">A</forename><surname>Huberman</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Multiagent Grid Syst</title>
		<imprint>
			<biblScope unit="volume">1</biblScope>
			<biblScope unit="issue">3</biblScope>
			<date type="published" when="2005-08" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b52">
	<analytic>
		<title level="a" type="main">Condor-a hunter of idle workstations</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Litzkow</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Livny</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Mutka</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">8th International Conference on</title>
		<imprint>
			<date type="published" when="1988" />
			<biblScope unit="page" from="104" to="111" />
		</imprint>
	</monogr>
	<note>Distributed Computing Systems</note>
</biblStruct>

<biblStruct xml:id="b53">
	<analytic>
		<title level="a" type="main">Enabling trusted scheduling in embedded systems</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><forename type="middle">J</forename><surname>Masti</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><surname>Marforio</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Ranganathan</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Francillon</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Capkun</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 28th</title>
		<meeting>the 28th</meeting>
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b54">
	<monogr>
				<title level="m">Annual Computer Security Applications Conference, ACSAC &apos;12</title>
		<meeting><address><addrLine>New York, NY, USA</addrLine></address></meeting>
		<imprint>
			<publisher>ACM</publisher>
			<date type="published" when="2012" />
			<biblScope unit="page" from="61" to="70" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b55">
	<analytic>
		<title level="a" type="main">Challenges turning virtual composition into reality</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><surname>Matthews</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Cappos</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Mcgeer</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Neville</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Y</forename><surname>Coady</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Lind</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Freeco 2011 Onward! Workshop: Towards Free Composition of Software Modules</title>
		<imprint>
			<date type="published" when="2011" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b56">
	<analytic>
		<title level="a" type="main">Task activity vectors: a new metric for temperature-aware scheduling</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Merkel</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">F</forename><surname>Bellosa</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">ACM SIGOPS Operating Systems Review</title>
		<imprint>
			<biblScope unit="volume">42</biblScope>
			<biblScope unit="issue">4</biblScope>
			<biblScope unit="page" from="1" to="12" />
			<date type="published" when="2008" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b57">
	<analytic>
		<title level="a" type="main">Towards a Representive Testbed: Harnessing Volunteers for Networks Research</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Monzur</forename><surname>Muhammad</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Justin</forename><surname>Cappos</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">The First GENI Research and Educational Workshop, GREE&apos;12</title>
		<imprint>
			<date type="published" when="2012" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b58">
	<analytic>
		<title level="a" type="main">Energy is just another resource: Energy accounting and energy pricing in the nemesis os</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Neugebauer</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Mcauley</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the Eighth Workshop on</title>
		<meeting>the Eighth Workshop on</meeting>
		<imprint>
			<publisher>IEEE</publisher>
			<date type="published" when="2001" />
			<biblScope unit="page" from="67" to="72" />
		</imprint>
	</monogr>
	<note>Hot Topics in Operating Systems</note>
</biblStruct>

<biblStruct xml:id="b59">
	<monogr>
				<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><surname>Nicholas</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Zakas</surname></persName>
		</author>
		<title level="m">Responsive Interfaces</title>
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b60">
	<analytic>
		<title level="a" type="main">Accessory: Password inference using accelerometers on smartphones</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">E</forename><surname>Owusu</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Han</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Das</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Perrig</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Zhang</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the Twelfth Workshop on Mobile Computing Systems &amp;#38</title>
		<meeting>the Twelfth Workshop on Mobile Computing Systems &amp;#38</meeting>
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b61">
	<monogr>
		<title/>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Applications</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2012" />
			<publisher>ACM</publisher>
			<biblScope unit="volume">12</biblScope>
			<biblScope unit="page" from="1" to="9" />
			<pubPlace>New York, NY, USA</pubPlace>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b62">
	<analytic>
		<title level="a" type="main">Where is the energy spent inside my app?: fine grained energy accounting on smartphones with eprof</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Pathak</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Y</forename><forename type="middle">C</forename><surname>Hu</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Zhang</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 7th ACM european conference on Computer Systems, EuroSys &apos;12</title>
		<meeting>the 7th ACM european conference on Computer Systems, EuroSys &apos;12<address><addrLine>New York, NY, USA</addrLine></address></meeting>
		<imprint>
			<publisher>ACM</publisher>
			<date type="published" when="2012" />
			<biblScope unit="page" from="29" to="42" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b63">
	<analytic>
		<title level="a" type="main">Experiences building planetlab</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">L</forename><surname>Peterson</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Bavier</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><forename type="middle">E</forename><surname>Fiuczynski</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Muir</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 7th Symposium on Operating Systems Design and Implementation, OSDI &apos;06</title>
		<meeting>the 7th Symposium on Operating Systems Design and Implementation, OSDI &apos;06</meeting>
		<imprint>
			<date type="published" when="2006" />
			<biblScope unit="page" from="351" to="366" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b64">
	<analytic>
		<title level="a" type="main">Exploring youtube&apos;s content distribution network through distributed application-layer measurements: a first view</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Rafetseder</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">F</forename><surname>Metzger</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Stezenbach</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">K</forename><surname>Tutschku</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 2011 International Workshop on Modeling, Analysis, and Control of Complex Networks, Cnet &apos;11</title>
		<meeting>the 2011 International Workshop on Modeling, Analysis, and Control of Complex Networks, Cnet &apos;11</meeting>
		<imprint>
			<publisher>ITCP</publisher>
			<date type="published" when="2011" />
			<biblScope unit="page" from="31" to="36" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b65">
	<analytic>
		<title level="a" type="main">Resource kernels: A resource-centric approach to real-time and multimedia systems</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Rajkumar</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">K</forename><surname>Juvva</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Molano</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Oikawa</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the SPIE/ACM Conference on Multimedia Computing and Networking</title>
		<meeting>the SPIE/ACM Conference on Multimedia Computing and Networking</meeting>
		<imprint>
			<date type="published" when="1998" />
			<biblScope unit="page" from="150" to="164" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b66">
	<monogr>
		<title level="m" type="main">Energy management in mobile devices with the cinder operating system</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Roy</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><forename type="middle">M</forename><surname>Rumble</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Stutsman</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><surname>Levis</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Mazรฌ Eres</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">N</forename><surname>Zeldovich</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2011" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b67">
	<monogr>
		<title level="m" type="main">An introduction to disk drive modeling</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><surname>Ruemmler</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Wilkes</surname></persName>
		</author>
		<imprint>
			<date type="published" when="1994" />
			<biblScope unit="volume">27</biblScope>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b68">
	<analytic>
		<title level="a" type="main">Application containers without virtual machines</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Sherr</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Blaze</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 1st ACM Workshop on Virtual Machine Security, VMSec &apos;09</title>
		<meeting>the 1st ACM Workshop on Virtual Machine Security, VMSec &apos;09<address><addrLine>New York, NY, USA</addrLine></address></meeting>
		<imprint>
			<publisher>ACM</publisher>
			<date type="published" when="2009" />
			<biblScope unit="page" from="39" to="42" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b69">
	<monogr>
		<title level="m" type="main">Operating System Concepts</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Silberschatz</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><forename type="middle">B</forename><surname>Galvin</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">G</forename><surname>Gagne</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2008" />
			<publisher>Wiley Publishing</publisher>
		</imprint>
	</monogr>
	<note>8th edition</note>
</biblStruct>

<biblStruct xml:id="b70">
	<monogr>
		<title level="m" type="main">On the duality between resource reservation and proportional share resource allocation</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">I</forename><surname>Stoica</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">H</forename><surname>Abdel-Wahab</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">K</forename><surname>Jeffay</surname></persName>
		</author>
		<imprint>
			<date type="published" when="1996" />
			<pubPlace>Norfolk, VA, USA</pubPlace>
		</imprint>
		<respStmt>
			<orgName>Old Dominion University</orgName>
		</respStmt>
	</monogr>
<note type="report_type">Technical report</note>
</biblStruct>

<biblStruct xml:id="b71">
	<monogr>
		<title level="m" type="main">Modern Operating Systems. Prentice Hall PTR</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><forename type="middle">S</forename><surname>Tanenbaum</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2001" />
			<pubPlace>Upper Saddle River, NJ, USA</pubPlace>
		</imprint>
	</monogr>
	<note>2nd edition</note>
</biblStruct>

<biblStruct xml:id="b72">
	<analytic>
		<title level="a" type="main">Towards sustained multi media experience in the future mobile internet</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">K</forename><surname>Tutschku</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Rafetseder</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Eisl</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">W</forename><surname>Wiedermann</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Intelligence in Next Generation Networks (ICIN), 2010 14th International Conference on</title>
		<imprint>
			<publisher>IEEE</publisher>
			<date type="published" when="2010" />
			<biblScope unit="page" from="1" to="6" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b73">
	<analytic>
		<title level="a" type="main">Resource overbooking and application profiling in a shared internet hosting platform</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">B</forename><surname>Urgaonkar</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><surname>Shenoy</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><surname>Roscoe</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">ACM Trans. Internet Technol</title>
		<imprint>
			<biblScope unit="volume">9</biblScope>
			<biblScope unit="issue">1</biblScope>
			<date type="published" when="2009-02" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b74">
	<monogr>
		<title/>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><forename type="middle">O</forename><surname>Using</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">So</forename><forename type="middle">Exclusiveaddruse</forename><surname>Reuseaddr</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Accessed</surname></persName>
		</author>
		<ptr target="http://msdn.microsoft.com/en-us/library/ms740621%28VS.85%29.aspx" />
		<imprint>
			<date type="published" when="2012-04-14" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b75">
	<analytic>
		<title level="a" type="main">Deep: A deployable energy efficient 802.15.4 mac protocol for sensor networks</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Valero</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Bourgeois</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Beyah</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Communications (ICC), 2010 IEEE International Conference on</title>
		<imprint>
			<date type="published" when="2010" />
			<biblScope unit="page" from="1" to="6" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b76">
	<analytic>
		<title level="a" type="main">Erdos: achieving energy savings in mobile os</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">N</forename><surname>Vallina-Rodriguez</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Crowcroft</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the sixth international workshop on MobiArch, MobiArch &apos;11</title>
		<meeting>the sixth international workshop on MobiArch, MobiArch &apos;11<address><addrLine>New York, NY, USA</addrLine></address></meeting>
		<imprint>
			<publisher>ACM</publisher>
			<date type="published" when="2011" />
			<biblScope unit="page" from="37" to="42" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b77">
	<analytic>
		<title level="a" type="main">Process firewalls: Protecting processes during resource access</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">H</forename><surname>Vijayakumar</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Schiffman</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><surname>Jaeger</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 8th ACM European Conference on Computer Systems, EuroSys &apos;13</title>
		<meeting>the 8th ACM European Conference on Computer Systems, EuroSys &apos;13<address><addrLine>New York, NY, USA</addrLine></address></meeting>
		<imprint>
			<publisher>ACM</publisher>
			<date type="published" when="2013" />
			<biblScope unit="page" from="57" to="70" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b78">
	<analytic>
		<title level="a" type="main">Dynamic thermal management through task scheduling. In Performance Analysis of Systems and software</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Yang</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">X</forename><surname>Zhou</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Chrobak</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Y</forename><surname>Zhang</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">L</forename><surname>Jin</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">IEEE International Symposium on</title>
		<imprint>
			<publisher>IEEE</publisher>
			<date type="published" when="2008" />
			<biblScope unit="page" from="191" to="201" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b79">
	<analytic>
		<title level="a" type="main">Experience with Seattle: A Community Platform for Research and Education</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Yanyan</forename><surname>Zhuang</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Albert</forename><surname>Rafetseder</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Justin</forename><surname>Cappos</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">The Second GENI Research and Educational Workshop, GREE&apos;13</title>
		<imprint>
			<date type="published" when="2013" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b80">
	<analytic>
		<title level="a" type="main">Ecosystem: Managing energy as a first class operating system resource</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">H</forename><surname>Zeng</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><forename type="middle">S</forename><surname>Ellis</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><forename type="middle">R</forename><surname>Lebeck</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Vahdat</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">10th international conference on Architectural support for programming languages and operating systems</title>
		<imprint>
			<date type="published" when="2002" />
		</imprint>
	</monogr>
</biblStruct>

				</listBibl>
			</div>
		</back>
	</text>
</TEI>
