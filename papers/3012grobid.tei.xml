<?xml version="1.0" encoding="UTF-8"?>
<TEI xmlns="http://www.tei-c.org/ns/1.0" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
xsi:schemaLocation="http://www.tei-c.org/ns/1.0 /Users/atharsefid/Desktop/grobid-0.5.3/grobid-home/schemas/xsd/Grobid.xsd"
 xmlns:xlink="http://www.w3.org/1999/xlink">
	<teiHeader xml:lang="en">
		<encodingDesc>
			<appInfo>
				<application version="0.5.3" ident="GROBID" when="2020-09-29T02:57+0000">
					<ref target="https://github.com/kermitt2/grobid">GROBID - A machine learning software for extracting information from scholarly documents</ref>
				</application>
			</appInfo>
		</encodingDesc>
		<fileDesc>
			<titleStmt>
				<title level="a" type="main">Transaction Support using Compound Commands in Key-Value SSDs</title>
			</titleStmt>
			<publicationStmt>
				<publisher/>
				<availability status="unknown"><licence/></availability>
			</publicationStmt>
			<sourceDesc>
				<biblStruct>
					<analytic>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Sang-Hoon</forename><surname>Kim</surname></persName>
							<affiliation key="aff0">
								<orgName type="institution" key="instit1">Ajou University</orgName>
								<orgName type="institution" key="instit2">Sungkyunkwan University</orgName>
								<orgName type="institution" key="instit3">Seoul National University</orgName>
							</affiliation>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Jinhong</forename><surname>Kim</surname></persName>
							<affiliation key="aff0">
								<orgName type="institution" key="instit1">Ajou University</orgName>
								<orgName type="institution" key="instit2">Sungkyunkwan University</orgName>
								<orgName type="institution" key="instit3">Seoul National University</orgName>
							</affiliation>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Kisik</forename><surname>Jeong</surname></persName>
							<affiliation key="aff0">
								<orgName type="institution" key="instit1">Ajou University</orgName>
								<orgName type="institution" key="instit2">Sungkyunkwan University</orgName>
								<orgName type="institution" key="instit3">Seoul National University</orgName>
							</affiliation>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Jin-Soo</forename><surname>Kim</surname></persName>
							<affiliation key="aff0">
								<orgName type="institution" key="instit1">Ajou University</orgName>
								<orgName type="institution" key="instit2">Sungkyunkwan University</orgName>
								<orgName type="institution" key="instit3">Seoul National University</orgName>
							</affiliation>
						</author>
						<title level="a" type="main">Transaction Support using Compound Commands in Key-Value SSDs</title>
					</analytic>
					<monogr>
						<imprint>
							<date/>
						</imprint>
					</monogr>
				</biblStruct>
			</sourceDesc>
		</fileDesc>
		<profileDesc>
			<abstract>
				<p>Recently proposed key-value SSD (KVSSD) provides the popular and versatile key-value interface at the device level, promising high performance and simplified storage management with the minimal involvement of the host software. However , its I/O command set over NVMe is defined on a per key-value pair basis, enforcing the host to post key-value operations to KVSSD independently. This not only incurs high interfacing overhead for small key-value operations but also makes it subtle to support transactions in KVSSDs without a software support. In this paper, we propose compound commands for KVSSDs. The compound command allows the host to specify multiple key-value pairs in a single NVMe operation, thereby effectively amortizing I/O interfacing overhead. In addition, it provides an effective way for defining a transaction comprised of multiple key-value pairs. Our evaluation using a prototype KVSSD and an in-house KVSSD emulator shows promising benefits of the compound command, with improving the performance by up to 55%.</p>
			</abstract>
		</profileDesc>
	</teiHeader>
	<text xml:lang="en">
		<body>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="1">Introduction</head><p>Recent years have witnessed the drastic changes and evolvement of storage systems. New storage media based on the state-of-the-art semiconductor technologies have been introduced, and storage devices built with those emerging media are arriving on the market <ref type="bibr" target="#b9">[10]</ref><ref type="bibr" target="#b10">[11]</ref><ref type="bibr" target="#b11">[12]</ref><ref type="bibr" target="#b17">20]</ref>. To fully leverage their high performance and unique characteristics, it is required to renovate the storage stack and components. Examples include bypassing the deep operating system layers <ref type="bibr" target="#b13">[14,</ref><ref type="bibr" target="#b19">22,</ref><ref type="bibr" target="#b22">26]</ref>, fusing main memory with secondary storage <ref type="bibr" target="#b4">[5]</ref>, making storage devices smarter <ref type="bibr" target="#b8">[9,</ref><ref type="bibr" target="#b14">15]</ref>, and so forth. One of noticeable directions is to reorganize I/O architecture and improving the hostdevice interface. Specifically, NVM Express (NVMe) <ref type="bibr">[18]</ref> allows storage devices to be attached to the host bus via the PCI Express (PCIe) interface. This approach enables storage devices to interface with the host at high bandwidth and low latency which match those of modern storage media.</p><p>In the meantime, key-value stores become one of the most popular software services to build and operate large-scale data-intensive applications and services <ref type="bibr" target="#b1">[2,</ref><ref type="bibr" target="#b3">4,</ref><ref type="bibr" target="#b5">6,</ref><ref type="bibr" target="#b7">8,</ref><ref type="bibr" target="#b16">17]</ref>. Due to their simple yet effective interface, many enterprise services have been adopting the key-value abstraction in their systems. For instance, Amazon S3 <ref type="bibr" target="#b1">[2]</ref> has been the foundation of many IT services with its scalability, data availability, security, and performance. Memcached <ref type="bibr" target="#b7">[8]</ref> is to accelerate services by caching operation results via the key-value interface. Motivated by these software key-value stores and services, key-value SSD (KVSSD hereafter) attempts to provide the key-value store service at a device level <ref type="bibr" target="#b18">[21]</ref>. By completely replacing deep software stack with off-the-shelf hardware, KVSSD can directly respond to data requests from an application with minimal involvement of the host software, thereby increasing performance and simplifying storage management <ref type="bibr" target="#b18">[21]</ref>.</p><p>In spite of those promises, we argue that the host-KVSSD interface is yet to be improved. KVSSD interfaces with the host through the KVSSD command set which is extended from the NVMe command standard <ref type="bibr" target="#b23">[27]</ref>. The current commands are defined on a per key-value pair basis. Thus, the host has to request one key-value operation at a time to KVSSD, and KVSSD should process each key-value pair individually. This becomes problematic when the size of keys and values are small, which is commonly observed from many real key-value store services <ref type="bibr" target="#b2">[3]</ref>. Worse, it is difficult to define a relationship among multiple key-value pairs since the current commands lack of handling multiple key-value pairs collectively.</p><p>In this paper, we strive to break the limitation of the current KVSSD interfaces. We propose a compound command that allows multiple key-value operations to be included in a single NVMe command. This enables multiple small key-value operations to be coalesced into a single NVMe command, thereby effectively amortizing interfacing overhead over NVMe. Furthermore, we can intuitively define a sophisticated semantic on a set of key-value pairs. Examples include transaction support, group prefetching, and so forth.</p><p>We evaluate the performance benefit of compound commands using a prototype KVSSD and an in-house KVSSD emulator. Evaluation result shows compound commands can effectively amortize the interfacing overhead, reducing peroperation latency by up to 55%.</p><p>The rest of this paper is organized as follow; Section 2 explains the proposed the compound command and its APIs. Section 3 compares the benefit of compound commands over the current per-tuple operations, and Section 4 concludes this paper.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2">Compound Commands Design</head></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.1">Motivation</head><p>Exchanging multiple small I/O messages incurs higher overhead than transferring large data between a host and a peripheral device. Thus, many I/O systems try to amortize the interfacing overhead by merging small I/O requests into a single I/O command and transferring the requests in bulk. For example, the eMMC standard <ref type="bibr" target="#b12">[13]</ref> defines the packed command; instead of exchanging I/O requests and results individually, the host (more specifically I/O schedulers and/or device drivers) collects multiple eMMC operations (i.e., writing data on specified blocks), and builds a packed command that coalesces multiple operations in a single eMMC command. When the host posts the packed command, the eMMC device fetches the data from the host in bulk and then internally processes each operation in batch. In this way, eMMC devices can leverage their I/O bandwidth to handle small I/O requests efficiently.</p><p>The same story can be applicable to the KVSSD interface. The KVSSD command set <ref type="bibr" target="#b23">[27]</ref> extended from the standard NVMe command set supports five primitive key-value operations which are STORE, RETRIEVE, DELETE, EXIST, and ITERATE. Specifically, STORE saves a value for a given key. The stored value can be either accessed with the RETRIEVE command or deleted with the DELETE command using the key. The EXIST command is for checking whether KVSSD stores a value for the given key. The ITERATE command is for querying key-value tuples having a specified prefix in keys. All those commands are defined so as to specify one key or one key-value pair in the NVMe command message. Thus, even though the NVMe interface standard features low latency and high bandwidth, KVSSD may not operate at its full performance but spend considerable execution time on frequent interfacing with the host. In addition, it is difficult to support an operation that is defined or has to be applied to multiple key-value pairs all together; each key-value operation is carried out independently using those per key-value commands.</p><p>Based on the observation, we propose a compound command. The compound command complements the current KVSSD command set by allowing multiple key-value operations to be encoded in a single NVMe command. Moreover, we found that using the compound command makes it easy to define a transaction over multiple key-value operations. The rest of this Section explains how the current command set is extended and how the compound command can be used to support transactions in KVSSD.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.2">Compound Command Formats</head><p>The original KVSSD commands comply the 64-byte NVMe command format. Key-value operations with small keys are frequently observed from real workloads <ref type="bibr" target="#b2">[3]</ref>. To efficiently handle this common case, a key can be inlined in the command (i.e., directly written on the NVMe command) if the key length is shorter than or equal to 16 bytes. When the key is longer than 16 bytes, the key is specified in the command indirectly using two fields each of which contains the memory location of the key and the key length. When KVSSD receives a command from a host, it firstly checks whether the key is inlined. If that is the case, KVSSD accesses the inlined key directly from the command. Otherwise, KVSSD fetches the key from the host's main memory. This memory access across device boundaries can impose an additional overhead compared to accessing inlined keys. Unlike keys, values are always specified in the command indirectly with a tuple comprised of the memory address of the value and its length. KVSSD fetches the value from or pushes the value to the host's main memory through memory operations like DMA.</p><p>We extended the original KVSSD command set to support the compound command. Overall, compound commands use the same NVMe command format of the original KVSSD commands but use the key and value fields for other meanings. The fields originally used for holding an inlined key are used for specifying an optional identification number (ID) of the key-value operations grouped in the compound command. The ID is limited to 16-bytes long to be inlined in the NVMe command, and can be utilized to (but not limited to) specify a transaction ID or a group ID for the given key-value list.</p><p>The fields originally used for specifying the value are now used for specifying the location of the command payload that contains multiple key-value pairs in a self-explanatory format.</p><p>For key-value operations requiring both key and value (e.g., STORE), key-value pairs are represented on a contiguous memory buffer in (key length, key, value length, value) format which are preceded by the total number of pairs. For key-value operations requiring only keys (e.g., RETRIEVE, DELETE, and EXIST), the keys are listed on a contiguous memory buffer in (key length, key) format which are preceded by the total number of keys. <ref type="figure">Figure 1</ref> illustrates the layout of the command payload for an extended STORE compound command which</p><p>We opt for this command payload layout to minimize the number of cross-device memory operations. Building <ref type="figure">Figure 1</ref>: The layout of a STORE compound command payload which contains three key-value pairs. In the NVMe message for compound commands, the value field specifies the memory location and the total length of the payload. KVSSD can fetch the entire command payload with a single memory operation.</p><p>a packed command payload involves one memory copy for each key-value pair. To avoid the memory copy overhead, one might suggest to use a vector specifying the address of each key and value. However, to fetch these operands, KVSSD should perform multiple cross-device memory operations since the memory operation can be performed on a contiguous memory region but key-value pairs are likely to be dispersed on the host's main memory. IOMMU might provide KVSSD with a virtually contiguous memory region over the key-value pairs, however, it requires memory mapping and unmapping for each key and value, which incurs non-trivial overhead. This becomes even more problematic when keys and values are small and the number of key-value pairs grouped in a compound is huge. On the other hand, KVSSD can fetch the entire key-value pairs with a single memory operation by using the packed command payload, and by which the memory copy overhead can be amortized.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.3">Transaction Support and User API</head><p>The current KVSSD commands are defined to be processed independently of each other. Thus, even though a set of operations are consecutively requested to KVSSD, they can be interleaved by other operations. This independency among operations makes KVSSD unable to guarantee the atomicity and isolation properties of transaction. Specifically, KVSSD may hold a partially processed state when the host crashes in the middle of processing transaction operations. Moreover, when an operation is interleaved between the transaction operations, it can not only interrupt the ongoing transaction but also access an intermediate state of the transaction, which violates the isolation property. In this sense, the current KVSSD cannot fully realize the ACID properties for transaction without software support, which opposes to the key idea of the hardware-based key-value store to make I/O path short.</p><p>The compound command can complement the current KVSSD command set to support transaction. The compound command enables the host to define a transaction over multiple key-value operations easily; the host can collect key-value operations, compose a compound command with the operations, mark it as a transaction, and post the compound command to KVSSD. KVSSD should ensure the ACID properties while processing the operations in the transaction. To this end, KVSSD can disallow other operations to be interleaved between transaction operations. At the same time, KVSSD leverages traditional write-ahead logging (WAL) techniques to atomically update multiple key-values; write values, metadata updates, and key index updates on a logging area first, and then atomically update key index and metadata all together. These approaches allow KVSSD to guarantee the atomicity and isolation properties of transactions. Also, the durability property can be easily provided by properly and safely storing data in KVSSD.</p><p>Providing the consistency property in KVSSD is, however, subtle. For now, KVSSD can provide limited consistency by using compound commands; KVSSD can check whether each operation does not violate any consistency restriction of the system (i.e., the value should not be NULL). KVSSD can proceed to process the transaction only if all operations satisfy the conditions. Otherwise (e.g., if a STORE operation tries to save NULL as the value), KVSSD can reject the transaction. This level of consistency was sufficient to run Ceph on top of KVSSD with compound commands as discussed in Section 3, and we expect this will be also true for many simple applications. However, it is not possible to provide complicated consistency that requires read-modify-write operations since the current compound command design disallows to merge operations with different types. KVSSD can overcome the limitation by adopting the similar techniques of Amazon DynamoDB transaction <ref type="bibr" target="#b0">[1,</ref><ref type="bibr" target="#b20">23]</ref> where a user can specify preconditions for write operations and the write operations are performed only if all preconditions are met. We leave this as future work, and please refer to Section 5 for the details of the extension.</p><p>We define user APIs for compound commands considering the transaction support. Listing 1 shows a sample code for the user API. Overall, the API is similar to the transaction operations of RocksDB <ref type="bibr" target="#b6">[7]</ref>. A user application can get a 1 int ret ; 2 CC_HANDLE *h; 3 4 h = begin_compound ( CC_TRANSACTION ); 5 ret = retrieve (h , k1 , k1_len , v1 , &amp; v1_len ); 6 ret = retrieve (h , k2 , k2_len , v2 , &amp; v2_len ); 7 ret = commit_compound (h ); 8 9 h = begin_compound ( CC_TRANSACTION ); 10 ret = store (h , k1 , k1_len , v1 , v1_len ); 11 ret = store (h , k2 , k2_len , v2 , v2_len ); 12 ret = commit_compound (h );</p><p>Listing 1: User API for compound commands handle for a compound command as shown in line 4 and 9 of Listing 1. The argument CC_TRANSACTION indicates the handle is for a transaction rather than for a simple collection of operations. After getting the handle, the application can append key-value operations using the handle (line 5-6 and line 10-11). Once a certain type of operation is appended to the handle, the application can only append the same type of operations for the simplicity of implementation and semantic definition (see Section 5 for extension). The compound command library handles the operation appending by building the compound command payload. When the application submits the command (line 7 and 12), the payload is attached to a NVMe command, and posted to KVSSD. When the compound command is marked as a transaction, KVSSD should handle the key-value operations in the compound command as a transaction as we explained above. Otherwise, KVSSD may process each operation independently.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3">Evaluation</head></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.1">Performance Estimation</head><p>We may perform a precise evaluation of compound commands with realistic workload if we had KVSSD that actually understands the compound commands and properly handles enclosed operations. However, it requires KVSSD firmware modification, which was not feasible to us at the time of paper writing. Alternatively, we estimate the performance implication of compound commands from other metrics that we can actually measure from a real KVSSD <ref type="bibr" target="#b18">[21]</ref>.</p><p>Firstly, we measure T key , the key handling time of the KVSSD. We were provided with an alternative firmware of the KVSSD which changes the KVSSD into an ordinary SSD operational on the traditional block interface. Using the block firmware, we compare the time of handling a STORE operation with 16-byte key and 4 KB value to that of handling a single 4 KB block write operation (note that 4 KB is the minimum block size of the device). We find that the key-value operation takes 46.14 us whereas the block operation takes 13.49 us. Since the two configurations are only different in key handling, we can suppose the latency difference (i.e., 32.65 us) as the key handling time. We can observe that key handling takes a significant fraction (about 70.8%) of the keyvalue operation time, which indicates efficient key handling will be the key technology for enabling high-performance KVSSDs.</p><p>Next, we measure T value , the time to handle values in a compound command. We assume that the compound commandcapable KVSSD fetches the command payload similar to the values of ordinary key-value operations and then processes each key-value operation in the payload one after another. We use a 32-byte key and 1,024-byte value configuration, which was the average key-value length of KVCeph workload (See the following subsection for the detail). Thus, a compound command with three key-value pairs will be equivalent to one 16-byte key and 3,196-byte 1 value operation. Since KVSSD will perform one key handling while processing the given keyvalue operation, we compensate the processing by subtracting T key . Dividing the compensated time with the number of pairs yields the value handling time of the KVSSD. <ref type="figure" target="#fig_0">Figure 2</ref> shows the per-operation time estimated from the obtained T key and T value . Note that '1' is the performance of the original KVSSD command for one 32-byte key and 1,024-byte value operation whereas the rest are the performance of compound commands.</p><p>As specified with "Store" and "1", processing one STORE operation with the original KVSSD command takes about 68.4 us. Since the key is longer than 16 bytes, it cannot be inlined in the KVSSD command, and KVSSD should fetch the key with an additional memory operation to the value fetch. Thus, this operation involves (at least) two cross-device memory references, incurring non-trivial overhead. Contrarily, when more than two key-value pairs are packed in a compound command, KVSSD can fetch the entire key-value pairs with a single memory operation. As the number of packed pairs is increased, the reduced I/O interfacing overhead pays back; it takes only 38.5 us per-operation when ten key-value operations are packed, which is 43.7% latency reduction compared to the original per-operation performance. RETRIEVE is similarly improved by compound commands. We assume the KVSSD supporting compound command will return the keys and values in bulk in the command payload format presented in <ref type="figure">Figure 1</ref>. Since all results are on a contiguous payload, KVSSD can return the results with one memory operation. The 92.0 us of RETRIEVE operation latency can be reduced down to 41.5 us.</p><p>The evaluation result clearly shows that the compound command helps the system to efficiently amortize the interfacing overhead. We believe the similar results will be observed from different key-value length configurations. Also, it is noteworthy that we conservatively imposed the key indexing overhead for each key-value operation. We believe the key indexing overhead can be amortized in practice by batching index update, and if that is the case, compound commands can improve the performance further.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.2">KVCeph Performance</head><p>To evaluate the benefit of the proposed compound command on real workloads, we implemented the compound command on top of our key-value SSD emulator called KVEMU <ref type="bibr" target="#b21">[25]</ref>. KVEMU provides a virtual key-value SSD device to a guest OS in a QEMU-provided virtualized environment, similar to FEUM <ref type="bibr" target="#b15">[16]</ref>. The guest OS can access a virtual KVSSD using real key-value commands through a virtualized NVMe interface. In addition to providing the functional features of KVSSD, KVEMU emulates the performance characteristics of real KVSSDs. We used the estimated latency explained above to simulate the performance of compound commandcapable KVSSD with transaction support (i.e., imposed the per-key handling overhead assuming a strongly conservative processing model).</p><p>On top of KVEMU, we setup KVCeph benchmark which is provided as an example of the KVSSD software stack <ref type="bibr">[24]</ref>. KVCeph is a variant of Ceph <ref type="bibr">[19]</ref> that utilizes the hardware KVSSD in place of its original software key-value store of Ceph. Since KVEMU supports the entire KVSSD command set, we can replace KVSSD with KVEMU without a significant modification.</p><p>We attempted to apply the compound command to handle transactions in KVCeph. However, it turned out that the current KVCeph does not handle transaction properly; key-value operations are collected with Ceph transaction APIs, but each key-value operation is processed independently using an individual NVMe command. Thus, transaction properties cannot be guaranteed by the current KVCeph implementation. We believe this case explains the difficulty of defining transaction over multiple independent key-value operations. To properly evaluate software-based transaction performance, we modified the KVCeph implementation to emulate write-ahead-logging (WAL). Entire key-value pairs for a transaction is written to a designated key (simulating the WAL writing) and the operation is followed by individual key-value operations. As shown in <ref type="figure" target="#fig_1">Figure 3</ref>, KVCeph gives 9.2 MB/s of storage bandwidth in this setting. If the hardware supports the transaction (i.e., using KVEMU with compound command support), we can omit the WAL writing and deliver the key-value operations using the compound command. In this case, KVCeph runs at 14.8 MB/s, which is 60.9 % of bandwidth improvement. We believe this result demonstrates the benefit of hardware transaction support enabled by compound commands.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4">Conclusion</head><p>We propose the compound command to amortize interfacing overhead between KVSSD and the host over NVMe. We made the case of the compound command by extending the current KVSSD command set, and demonstrated its benefit from a realistic workload. We are planning to implement the compound command in the real KVSSD and to evaluate its performance to verify the claims.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5">Discussion</head></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Supporting complicated consistency</head><p>As we discussed in Section 2.3, the current KVSSD can only provide limited consistency, but the limitation can be relaxed by adopting the techniques used by Amazon DynamoDB <ref type="bibr" target="#b0">[1,</ref><ref type="bibr" target="#b20">23]</ref>. Specifically, DynamoDB APIs allow user applications to specify preconditions for updating operations, and DyanmoDB performs the operations only if all preconditions are met. For an example, when an application wants to atomically increase a value by 20, it can read the value, increases the original value by 20, and write back the result with a precondition specifying the original value. If the stored value and the precondition values are the same, the update can be safely applied, and otherwise,the transaction is aborted. By adopting the idea, we can define a transaction over split compound commands with preconditions appended. To realize the idea, the KVSSD command payload should be extended to express preconditions, and user APIs should be also revised accordingly. We are working on finding the best way to incorporate these features into the KVSSD command set and compound commands.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Mixed operation types in a transaction</head><p>The current compound command can only merge the operations with the same type in a transaction. It was sufficient to run Ceph, and we also believe many applications only need this type of transaction. Nevertheless, this limitation can be relaxed by adding a field for each enclosed key-value pair specifying its operation type. In such a case, KVSSD should carefully check during the operation admission so that it does not make conflicts between operations in the same transaction.</p><p>Leveraging grouped key-value operations In this paper we focused on utilizing compound commands for supporting transactions, however, compound commands can be also leveraged for accelerate key-value access. Let assume that compound commands allow to define a prefetch group to notify KVSSD of the temporal locality of key-value pairs; when one of the grouped key-value pairs is accessed, KVSSD can prefetch other key-value pairs in advance expecting their access in a near future.</p><p>Quantitative analysis of memory copy and memory mapping Building compound commands in the packed command layout involves a number of memory copy and memory buffer allocation, and its overhead can outweigh the amortized interfacing overhead. However, compound commands are targeting for small key-value operations, and memory copy overhead will be small or comparable at the scale compared to building a scatter-gather list and to access each key-value pair via separate DMA. Nevertheless, we are working on quantitatively analyzing the overhead on real hardware.</p><p>Returning results of multiple operations When the compound command is used for simply collecting multiple operations, each operation might have different result. In this sense, KVSSD should have an interface to efficiently return the result of each operation. We currently assume that KVSSD generates a list of results and returns it to the host. And then the device driver on the host can parse the list and return each result accordingly.</p></div><figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_0"><head>Figure 2 :</head><label>2</label><figDesc>Figure 2: Per-operation latency on various numbers of keyvalue pairs in a compound command. We calculated the performance of compound commands from the I/O performance of a real KVSSD.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_1"><head>Figure 3 :</head><label>3</label><figDesc>Figure 3: KVCeph bandwidth on different level of transaction support. Software TX indicates the bandwidth when the system lacks of hardware transaction support. Hardware TX indicates the performance when the hardware is aware of transactions with the compound commands.</figDesc></figure>

			<note place="foot" n="1"> 3,196 = ( 4 for key length + 32 for key + 4 for value length + 1,024 for value )× 3 + 4 for the number of pairs</note>
		</body>
		<back>

			<div type="acknowledgement">
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Acknowledgements</head><p>This work was supported by the National Research Foundation of Korea(NRF) grants funded by the Korea government(MSIT) <ref type="bibr">(No. 2016R1A2A1A05005494 and</ref><ref type="bibr">No. 2018R1C1B5085902)</ref>. Also, the ICT at Seoul National University provides research facilities for this study.</p></div>
			</div>

			<div type="references">

				<listBibl>

<biblStruct xml:id="b0">
	<monogr>
		<title level="m" type="main">Amazon DynamoDB transactions</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Amazon</surname></persName>
		</author>
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b1">
	<analytic>
		<title/>
		<ptr target="https://aws.amazon.com/s3" />
	</analytic>
	<monogr>
		<title level="j">Amazon. Amazon S3</title>
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b2">
	<analytic>
		<title level="a" type="main">FAWN: A fast array of wimpy nodes</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">David</forename><forename type="middle">G</forename><surname>Andersen</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Jason</forename><surname>Franklin</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Michael</forename><surname>Kaminsky</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Amar</forename><surname>Phanishayee</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Lawrence</forename><surname>Tan</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Vijay</forename><surname>Vasudevan</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 22nd ACM Symposium on Operating Systems Principles (SOSP)</title>
		<meeting>the 22nd ACM Symposium on Operating Systems Principles (SOSP)<address><addrLine>Big Sky, MT</addrLine></address></meeting>
		<imprint>
			<publisher>ACM SIGOPS</publisher>
			<date type="published" when="2009-10" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b3">
	<monogr>
		<title level="m" type="main">Apache Foundation</title>
		<ptr target="https://cassandra.apache.org" />
		<imprint/>
	</monogr>
	<note>Apache Cassandra</note>
</biblStruct>

<biblStruct xml:id="b4">
	<analytic>
		<title level="a" type="main">Better i/o through byte-addressable, persistent memory</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Jeremy</forename><surname>Condit</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Edmund</forename><forename type="middle">B</forename><surname>Nightingale</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Christoper</forename><surname>Frost</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Engin</forename><surname>Ipek</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Benjamin</forename><surname>Lee</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Doug</forename><surname>Burger</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Derrick</forename><surname>Coetzee</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 22nd ACM Symposium on Operating Systems Principles (SOSP)</title>
		<meeting>the 22nd ACM Symposium on Operating Systems Principles (SOSP)<address><addrLine>Big Sky, MT</addrLine></address></meeting>
		<imprint>
			<publisher>ACM SIGOPS</publisher>
			<date type="published" when="2009-10" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b5">
	<monogr>
		<title level="m" type="main">Dynamo: Amazon&apos;s highly available key-value store</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Giuseppe</forename><surname>Decandia</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Deniz</forename><surname>Hastorun</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Madan</forename><surname>Jampani</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Gunavardhan</forename><surname>Kakulapati</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Avinash</forename><surname>Lakshman</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Alex</forename><surname>Pilchin</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Swaminathan</forename><surname>Sivasubramanian</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Peter</forename><surname>Vosshall</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Werner</forename><surname>Vogels</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2007-10" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b6">
	<monogr>
		<title level="m" type="main">RocksDB transactions</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Facebook</surname></persName>
		</author>
		<ptr target="https://github.com/facebook/rocksdb/wiki/Transactions" />
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b7">
	<analytic>
		<title level="a" type="main">Distributed caching with memcached</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Brad</forename><surname>Fitzpatrick</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Linux Journal</title>
		<imprint>
			<date type="published" when="2004-08" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b8">
	<analytic>
		<title level="a" type="main">Biscuit: A framework for near-data processing of big data workloads</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Boncheol</forename><surname>Gu</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Andre</forename><forename type="middle">S</forename><surname>Yoon</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Duck-Ho</forename><surname>Bae</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Insoon</forename><surname>Jo</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Jinyoung</forename><surname>Lee</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Jonghyun</forename><surname>Yoon</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Jeong-Uk</forename><surname>Kang</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Moonsang</forename><surname>Kwon</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Chanho</forename><surname>Yoon</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Sangyeun</forename><surname>Cho</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Jaeheon</forename><surname>Jeong</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Duckhyun</forename><surname>Chang</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 43rd International Symposium on Computer Architecture</title>
		<meeting>the 43rd International Symposium on Computer Architecture<address><addrLine>Seoul, South Korea</addrLine></address></meeting>
		<imprint>
			<date type="published" when="2016-06" />
			<biblScope unit="page" from="153" to="165" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b9">
	<monogr>
		<title level="m" type="main">Intel 3D NAND technology transforms the economics of storage</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Intel</surname></persName>
		</author>
		<ptr target="https://www.intel.com/content/www/us/en/products/docs/memory-storage/solid-state-drives/3d-nand-technology-animation.html" />
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b10">
	<monogr>
		<title level="m" type="main">Intel Optane DC persistent memory</title>
		<ptr target="https://www.intel.com/content/www/us/en/architecture-and-technology/optane-dc-persistent-memory.html" />
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b11">
	<monogr>
		<title level="m" type="main">Intel Optane technology: Revolutionizing memory and storage</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Intel</surname></persName>
		</author>
		<ptr target="https://www.intel.com/content/www/us/en/architecture-and-technology/intel-optane-technology.html" />
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b12">
	<monogr>
		<title level="m" type="main">JEDEC Solid State Technology Association. Embedded multi-media card (eMMC) electrical standard (4.5 device)</title>
		<imprint>
			<date type="published" when="2011-06" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b13">
	<analytic>
		<title level="a" type="main">NVMeDirect: A user-space i/o framework for application-specific optimization on NVMe SSDs</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Hyeong-Jun</forename><surname>Kim</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Young-Sik</forename><surname>Lee</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Jin-Soo</forename><surname>Kim</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 8th USENIX Workshop on Hot Topics in Storage and File Systems (HotStorage)</title>
		<meeting>the 8th USENIX Workshop on Hot Topics in Storage and File Systems (HotStorage)<address><addrLine>Denver, CO</addrLine></address></meeting>
		<imprint>
			<date type="published" when="2016-06" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b14">
	<analytic>
		<title level="a" type="main">Activesort: Efficient external sorting using active ssds in the mapreduce framework</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Young-Sik</forename><surname>Lee</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Luis</forename><forename type="middle">Cavazos</forename><surname>Quero</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Sang-Hoon</forename><surname>Kim</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Jin-Soo</forename><surname>Kim</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Future Generation Computing Systems</title>
		<imprint>
			<date type="published" when="2016-12" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b15">
	<analytic>
		<title level="a" type="main">The CASE of FEMU: Cheap, accurate, scalable and extensible flash emulator</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Huaicheng</forename><surname>Li</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Mingzhe</forename><surname>Hao</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Michael</forename><forename type="middle">Hao</forename><surname>Tong</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Swaminathan</forename><surname>Sundararaman</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Matias</forename><surname>Bjørling</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Haryadi</forename><forename type="middle">S</forename><surname>Gunawi</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 16th USENIX Conference on File and Storage Technologies (FAST)</title>
		<meeting>the 16th USENIX Conference on File and Storage Technologies (FAST)<address><addrLine>Oakland, California, USA</addrLine></address></meeting>
		<imprint>
			<date type="published" when="2018-02" />
			<biblScope unit="page" from="83" to="90" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b16">
	<monogr>
		<title level="m" type="main">MongoDB: The most popular database for modern apps</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Inc</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Mongodb</surname></persName>
		</author>
		<ptr target="https://www.mongodb.com" />
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b17">
	<monogr>
		<title/>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Samsung</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">V-Nand</forename><surname>Samsung</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Technology</surname></persName>
		</author>
		<ptr target="https://www.samsung.com/us/business/oem-solutions/pdfs/V-NAND_technology_WP.pdf" />
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b18">
	<monogr>
		<title level="m" type="main">Samsung key value SSD enables high performance scaling</title>
		<imprint/>
		<respStmt>
			<orgName>Co Samsung Electronics</orgName>
		</respStmt>
	</monogr>
</biblStruct>

<biblStruct xml:id="b19">
	<analytic>
		<title level="a" type="main">Hyeonsang Eom, and Heon Y. Yeom. OS I/O path optimizations for flash solid-state drives</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Woong</forename><surname>Shin</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Qichen</forename><surname>Chen</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Myoungwon</forename><surname>Oh</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 2014 USENIX Annual Technical Conference (ATC)</title>
		<meeting>the 2014 USENIX Annual Technical Conference (ATC)<address><addrLine>Philadelphia, PA</addrLine></address></meeting>
		<imprint>
			<date type="published" when="2014-06" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b20">
	<analytic>
		<title level="a" type="main">Transactions and scalability in cloud databases-can&apos;t we have both?</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Doug</forename><surname>Terry</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 17th USENIX Conference on File and Storage Technologies (FAST)</title>
		<meeting>the 17th USENIX Conference on File and Storage Technologies (FAST)<address><addrLine>Boston, MA</addrLine></address></meeting>
		<imprint>
			<date type="published" when="2019-02" />
		</imprint>
	</monogr>
	<note>USENIX Association, USENIX Association</note>
</biblStruct>

<biblStruct xml:id="b21">
	<analytic>
		<title level="a" type="main">A Blackbox Approach to Performance Modeling of KVSSDs</title>
	</analytic>
	<monogr>
		<title level="m">USENIX Association</title>
		<meeting><address><addrLine>Boston, MA</addrLine></address></meeting>
		<imprint>
			<date type="published" when="2019-02" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b22">
	<analytic>
		<title level="a" type="main">SPDK: A development kit to build high performance storage applications</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Z</forename><surname>Yang</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><forename type="middle">R</forename><surname>Harris</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">B</forename><surname>Walker</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Verkamp</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><surname>Liu</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><surname>Chang</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">G</forename><surname>Cao</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Stern</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">V</forename><surname>Verma</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">L</forename><forename type="middle">E</forename><surname>Paul</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 2017 IEEE International Conference on Cloud Computing Technology and Science (CloudCom)</title>
		<meeting>the 2017 IEEE International Conference on Cloud Computing Technology and Science (CloudCom)</meeting>
		<imprint>
			<date type="published" when="2017" />
			<biblScope unit="page" from="154" to="161" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b23">
	<monogr>
		<title level="m" type="main">KV SSD firmware introduction</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Sang Yong Oh</surname></persName>
		</author>
		<imprint/>
	</monogr>
</biblStruct>

				</listBibl>
			</div>
		</back>
	</text>
</TEI>
