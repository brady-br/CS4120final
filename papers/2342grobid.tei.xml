<?xml version="1.0" encoding="UTF-8"?>
<TEI xmlns="http://www.tei-c.org/ns/1.0" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
xsi:schemaLocation="http://www.tei-c.org/ns/1.0 /Users/atharsefid/Desktop/grobid-0.5.3/grobid-home/schemas/xsd/Grobid.xsd"
 xmlns:xlink="http://www.w3.org/1999/xlink">
	<teiHeader xml:lang="en">
		<encodingDesc>
			<appInfo>
				<application version="0.5.3" ident="GROBID" when="2020-09-29T02:35+0000">
					<ref target="https://github.com/kermitt2/grobid">GROBID - A machine learning software for extracting information from scholarly documents</ref>
				</application>
			</appInfo>
		</encodingDesc>
		<fileDesc>
			<titleStmt>
				<title level="a" type="main">This paper is included in the Proceedings of the 12th USENIX Conference on File and Storage Technologies (FAST &apos;14). Open access to the Proceedings of the 12th USENIX Conference on File and Storage Technologies (FAST &apos;14) is sponsored by CRAID: Online RAID Upgrades Using Dynamic Hot Data Reorganization CRAID: Online RAID Upgrades Using Dynamic Hot Data Reorganization</title>
			</titleStmt>
			<publicationStmt>
				<publisher/>
				<availability status="unknown"><licence/></availability>
				<date>February 17-20, 2014</date>
			</publicationStmt>
			<sourceDesc>
				<biblStruct>
					<analytic>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><roleName>Barcelona</roleName><forename type="first">Alberto</forename><surname>Miranda</surname></persName>
							<affiliation key="aff0">
								<orgName type="laboratory">Barcelona Supercomputing Center (BSC-CNS) and Technical University of Catalonia (UPC) § Barcelona Supercomputing Center (BSC-CNS) ‡ Technical University of Catalonia (UPC)</orgName>
								<address>
									<settlement>Santa Clara</settlement>
									<region>CA</region>
									<country key="US">USA</country>
								</address>
							</affiliation>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Supercomputing</forename><surname>Center</surname></persName>
							<affiliation key="aff0">
								<orgName type="laboratory">Barcelona Supercomputing Center (BSC-CNS) and Technical University of Catalonia (UPC) § Barcelona Supercomputing Center (BSC-CNS) ‡ Technical University of Catalonia (UPC)</orgName>
								<address>
									<settlement>Santa Clara</settlement>
									<region>CA</region>
									<country key="US">USA</country>
								</address>
							</affiliation>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">(bsc-Cns</forename></persName>
							<affiliation key="aff0">
								<orgName type="laboratory">Barcelona Supercomputing Center (BSC-CNS) and Technical University of Catalonia (UPC) § Barcelona Supercomputing Center (BSC-CNS) ‡ Technical University of Catalonia (UPC)</orgName>
								<address>
									<settlement>Santa Clara</settlement>
									<region>CA</region>
									<country key="US">USA</country>
								</address>
							</affiliation>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Toni</forename><surname>Cortes</surname></persName>
							<affiliation key="aff0">
								<orgName type="laboratory">Barcelona Supercomputing Center (BSC-CNS) and Technical University of Catalonia (UPC) § Barcelona Supercomputing Center (BSC-CNS) ‡ Technical University of Catalonia (UPC)</orgName>
								<address>
									<settlement>Santa Clara</settlement>
									<region>CA</region>
									<country key="US">USA</country>
								</address>
							</affiliation>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Miranda</surname></persName>
							<affiliation key="aff0">
								<orgName type="laboratory">Barcelona Supercomputing Center (BSC-CNS) and Technical University of Catalonia (UPC) § Barcelona Supercomputing Center (BSC-CNS) ‡ Technical University of Catalonia (UPC)</orgName>
								<address>
									<settlement>Santa Clara</settlement>
									<region>CA</region>
									<country key="US">USA</country>
								</address>
							</affiliation>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><surname>Cortes</surname></persName>
							<affiliation key="aff0">
								<orgName type="laboratory">Barcelona Supercomputing Center (BSC-CNS) and Technical University of Catalonia (UPC) § Barcelona Supercomputing Center (BSC-CNS) ‡ Technical University of Catalonia (UPC)</orgName>
								<address>
									<settlement>Santa Clara</settlement>
									<region>CA</region>
									<country key="US">USA</country>
								</address>
							</affiliation>
						</author>
						<title level="a" type="main">This paper is included in the Proceedings of the 12th USENIX Conference on File and Storage Technologies (FAST &apos;14). Open access to the Proceedings of the 12th USENIX Conference on File and Storage Technologies (FAST &apos;14) is sponsored by CRAID: Online RAID Upgrades Using Dynamic Hot Data Reorganization CRAID: Online RAID Upgrades Using Dynamic Hot Data Reorganization</title>
					</analytic>
					<monogr>
						<title level="m">USENIX Association 12th USENIX Conference on File and Storage Technologies</title>
						<imprint>
							<biblScope unit="page">133</biblScope>
							<date type="published">February 17-20, 2014</date>
						</imprint>
					</monogr>
				</biblStruct>
			</sourceDesc>
		</fileDesc>
		<profileDesc>
			<abstract>
				<p>Current algorithms used to upgrade RAID arrays typically require large amounts of data to be migrated, even those that move only the minimum amount of data required to keep a balanced data load. This paper presents CRAID, a self-optimizing RAID array that performs an online block reorganization of frequently used, long-term accessed data in order to reduce this migration even further. To achieve this objective, CRAID tracks frequently used, long-term data blocks and copies them to a dedicated partition spread across all the disks in the array. When new disks are added, CRAID only needs to extend this process to the new devices to redistribute this partition, thus greatly reducing the overhead of the upgrade process. In addition, the reorganized access patterns within this partition improve the array&apos;s performance, amortizing the copy overhead and allowing CRAID to offer a performance competitive with traditional RAIDs. We describe CRAID&apos;s motivation and design and we evaluate it by replaying seven real-world workloads including a file server, a web server and a user share. Our experiments show that CRAID can successfully detect hot data variations and begin using new disks as soon as they are added to the array. Also, the usage of a dedicated partition improves the sequentiality of relevant data access , which amortizes the cost of reorganizations. Finally, we prove that a full-HDD CRAID array with a small distributed partition (&lt;1.28% per disk) can compete in performance with an ideally restriped RAID-5 and a hybrid RAID-5 with a small SSD cache.</p>
			</abstract>
		</profileDesc>
	</teiHeader>
	<text xml:lang="en">
		<body>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="1">Introduction</head><p>Storage architectures based on Redundant Arrays of Independent Disks (RAID) <ref type="bibr" target="#b37">[36,</ref><ref type="bibr" target="#b9">10]</ref> are a popular choice to provide reliable, high performance storage at an acceptable economic and spatial cost. Due to the ever-increasing demand of storage capabilities, however, applications often require larger storage capacity or higher performance, which is normally achieved by adding new devices to the existing RAID volume. Nevertheless, several challenges arise when upgrading RAID arrays in this manner:</p><p>1. To regain uniformity in the data distribution, certain blocks must be moved to the new disks. Traditional approaches that try to preserve the round-robin order <ref type="bibr" target="#b14">[15,</ref><ref type="bibr" target="#b6">7,</ref><ref type="bibr" target="#b50">49]</ref> end up redistributing large amounts of data between old and new disks, regardless of the number of new and old disks.</p><p>2. Alternative methods that migrate a minimum amount of data, can have problems to keep a uniform data distribution after several upgrade operations (like the Semi-RR algorithm <ref type="bibr" target="#b12">[13]</ref>) or limit the array's performance (GSR <ref type="bibr" target="#b48">[47]</ref>).</p><p>3. Existing RAID solutions with redundancy mechanisms, like RAID-5 and RAID-6, have the additional overhead of recalculating and updating the associated parities, as well as the necessary metadata updates associated to stripe migration.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.">RAID solutions are widely used in online services</head><p>where clients and applications need to access data constantly. In these services, the downtime cost can be extremely high <ref type="bibr" target="#b36">[35]</ref>, and thus any strategy to upgrade RAID arrays should be able to interleave its job with normal I/O operations.</p><p>To address the challenges above, in this paper we propose a novel approach called CRAID, whose purpose is to minimize the overhead of the upgrade process by redistributing only "relevant data" in real-time. To do that, CRAID tracks data that is currently being used by clients and reorganizes it in a specific partition. This partition allows the volume to maintain the performance and distribution uniformity of the data that is actually being used by clients and, at the same time, significantly reduce the amount of data that must be migrated to new devices.</p><p>Our proposal is based on the notion that providing good levels of performance and load balance for the current working set suffices to preserve the QoS 1 of the RAID array. This notion is born from the following observations about long-term access patterns in storage: (i) data in a storage system displays a non-uniform access frequency distribution: when considering coarse-granularity time spans, "frequently accessed" data is usually a small fraction of the total data; (ii) this active data set exhibits longterm temporal locality and is stable, with small amounts of data losing or gaining importance gradually; (iii) even within the active data set, usage is heavily skewed, with "really popular" data receiving over 90% accesses <ref type="bibr" target="#b29">[29]</ref>. These observations are largely intuitive and similar to the findings on short-term access patterns of other researchers <ref type="bibr" target="#b13">[14,</ref><ref type="bibr" target="#b19">20,</ref><ref type="bibr" target="#b39">38,</ref><ref type="bibr" target="#b1">2,</ref><ref type="bibr" target="#b38">37,</ref><ref type="bibr" target="#b43">42,</ref><ref type="bibr" target="#b42">41,</ref><ref type="bibr" target="#b4">5]</ref>. To our knowledge, however, there have not been any attempts to apply this information to the upgrade process of RAID arrays.</p><p>This paper makes the following contributions: we prove that using a large cache-like partition that uses all storage devices can be better than using dedicated devices due to the improved parallelism, in some cases even when the dedicated devices are faster. Additionally, we demonstrate that information about hot data can be used to reduce the overhead of rebalancing a storage system.</p><p>The paper is organized as follows: (i) we study the characteristics of several I/O workloads and show how the findings motivate CRAID ( §2), (ii) we present the design of an online block reorganization system that adapts to changes in the I/O working set ( §3), (iii) we evaluate several well-known cache management algorithms and their effectiveness in capturing long-term access patterns ( §4), and (iv) we simulate CRAID under several real-system workloads to evaluate its merits and weaknesses ( §5).</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2">Characteristics of I/O Workloads</head><p>In this section we investigate the characteristics of several I/O workloads, focusing on those properties that directly motivate CRAID. In order for CRAID to be successful, the cost of reorganizing data must be lower than the potential gain obtained from the improved distribution, or it would not make sense to reorganize this data. Thus, we need to prove that long-term working sets exist and that they account for a large fraction of I/O. To do that, we analyzed a collection of well-known traces taken from several real systems. To increase the scope of our analysis, we use traces representing many different workloads and collected at different points in time over the last 13 years. Even if some of these traces are rather old, they can be helpful to establish a historical perspective on long-term hot data. <ref type="table">Table 1</ref> summarizes key statistics for one week of these traces, which we describe in detail below:</p><p>• The cello99 traces are a set of well-known block-level traces used in many storage-related studies <ref type="bibr" target="#b21">[22,</ref><ref type="bibr" target="#b35">34,</ref><ref type="bibr" target="#b47">46,</ref><ref type="bibr" target="#b52">51]</ref>. Collected at HP Labs in 1999, they include one year of I/O workloads from a research cluster.</p><p>• The deasna traces <ref type="bibr" target="#b11">[12]</ref> were taken from the NFS system at Harvard's Department of Engineering and Applied Sciences over the course of six weeks, in mid-fall 2002. Workload is a mix of research and email.</p><p>• The home02 traces <ref type="bibr" target="#b11">[12]</ref> were collected in 2001 from one of fourteen disk arrays in the Harvard CAMPUS NFS system. This system served over 10,000 school and administration accounts and consisted of three NFS servers connected to fourteen 53GB disk arrays. The traces collect six weeks worth of I/O operations.</p><p>• The MSRC traces <ref type="bibr" target="#b32">[31]</ref> are block-level traces of storage volumes collected over one week at Microsoft Research Cambridge data center in 2007. The traces collected I/O requests on 36 volumes in 13 servers (179 disks). We use the wdev and proj servers, a test web server (4 volumes) and a server of project files (5 volumes), as they contain the most requests.</p><p>• The SRCMap traces are block-level traces collected by the Systems Research Laboratory (SyLab) at Florida International University in 2009 <ref type="bibr" target="#b42">[41]</ref>. The traces were collected for three weeks at three production systems with several workloads. We use the webresearch and webusers workloads as they include the most requests. The first was an Apache web server managing FIU research projects, and the second a web server hosting faculty, staff, and graduate student web sites.</p><p>Our analysis of the traces shows that the following observations are consistent across all traces and, thus, validate the theoretical applicability of CRAID.</p><p>Obs. 1 Data usage is highly skewed with a small percentage of blocks being heavily accessed. <ref type="figure">Fig. 1</ref> (top row), shows the CDF for block access frequency for each workload. All traces show that the distribution of access frequencies is highly skewed: for read</p><formula xml:id="formula_0">(a) cello99 (b) deasna (c) home02 (d) webresearch (e) webusers (f) wdev (g) proj</formula><p>Figure 1: Block-frequency and working-set overlap for 1-week traces from seven different systems. The top row plots depict the CDF of block accesses for different frequencies: a point ( f , p 1 ) on the block percentage curve indicates that p 1 % of total blocks were accessed at most f times. Bottom row plots depict changes in the daily working-sets of the workloads: a bar (d, p 2 ) indicates that days d and d + 1 had p 2 % blocks in common. This is shown for all blocks and for the 20% blocks receiving more accesses.</p><p>requests ≈76-98% blocks are accessed 50 times or less, while for write requests this value rises to ≈89-98%. On the other hand, a small fraction of blocks (≈0.05-0.7%) is very heavily accessed in all cases (read or write requests). This skew can also be seen in <ref type="table">Table 1</ref>: the top 20% most frequently accessed blocks account for a large fraction (≈51-83%) of all accesses, which are similar results to those reported in previous studies <ref type="bibr" target="#b13">[14,</ref><ref type="bibr" target="#b23">24,</ref><ref type="bibr" target="#b4">5,</ref><ref type="bibr" target="#b42">41,</ref><ref type="bibr" target="#b29">29]</ref>.</p><p>Obs. 2 Working-sets remain stable over long durations.</p><p>Based on the first observation, we hypothesize that data usage exhibits long-term temporal locality. By long-term, we refer to a locality of hours or days, rather than seconds or minutes which is more typical of memory accesses. It is fairly common for a developer to work on a limited number of projects or for a user to access only a fraction of his data (like personal pictures or videos) over a few days or weeks. Even in servers, the popularity of the data accessed may result in long-term temporal locality. For instance, a very popular video uploaded to the web will receive bursts of accesses for several weeks or months. <ref type="figure">Fig. 1</ref> (bottom row), depicts the changes in the daily working-sets for each of the workloads. Each bar represents the percentage of unique blocks that are accessed both in day d and d + 1. Most workloads show a significant overlap (≈55%-80%) between the blocks accessed in immediately successive days, and we also observe that there is a substantial overlap even when considering the top 20% most accessed blocks. Trace deasna is particularly interesting because it shows low values of overlap (≈20%-35%) when considering all accesses, which increases to ≈55%-80% for the top 20% blocks. This means that the working-set for this particular workload is more diverse but still contains a significant amount of heavily reused blocks. Based on the observations above, it seems reasonable that exploiting long-term temporal locality and non-uniform access distribution can deal performance benefits. CRAID's goal is to use these to amortize the cost of data rebalancing during RAID upgrades.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3">CRAID Overview</head><p>The goal behind CRAID is to reduce the amount of data that needs to be migrated in reconfigurations while providing QoS levels similar to those of traditional RAID.</p><p>CRAID claims a small portion of each device and uses it to create a cache partition (P C ) that will be used to place copies of heavily accessed data blocks. The aim of this partition is to separate data that is currently important for clients from data that is rarely (if ever) used. Data not currently being accessed is kept in an archive partition (P A ) that uses the remainder of the disks. Notice that this partition can be managed by any data allocation strategy, but it is important that the archive can grow gracefully and any archived data is accessed with acceptable performance.</p><p>Effectively optimizing the layout of heavily used blocks within a small partition is beneficial for several reasons: (i) It is possible to create a large cache by using a small fraction of all available disks, which allows important data to be cache-resident for longer periods.</p><p>(ii) A disk-based cache is a persistent cache: any optimized layout continues to be valid as long as it is warranted by access semantics, even if it is necessary to shutdown or reconfigure the storage system.</p><p>(iii) The size of the partition can be easily configured by an administrator or an automatic process to better suit storage demands.</p><p>(iv) Clustering frequently accessed data together offers the opportunity to improve access patterns: data accesses that were originally scattered can be sequentialized if the layout is appropriate. This also helps reduce seek times and rotational delays in all disks since "hot" blocks are placed close to each other.</p><p>(v) Whenever new devices are added, current strategies need to redistribute large amounts of data to be able to use them effectively and also to maintain QoS levels (e.g. performance or load balance). A disk-based cache offers a unique possibility to maintain QoS by redistributing only most accessed data. This should reduce the cost of the upgrade process significantly.</p><p>(vi) Extending the partition over all devices has three advantages over using dedicated devices. First, it maximizes the potential parallelism offered by the storage system. Second, it is much more likely to saturate a reduced set of dedicated devices than a large array. Third, benefits can be gained with the existing set of devices, without having to acquire more.   if the accessed data must be considered "active". If so, data blocks are copied to the caching partition if they are not already in it (B.1) and an appropriate mapping 񮽙LBA original , LBA cache 񮽙 is stored in the mapping cache <ref type="bibr">(B.2)</ref>. From this point on, an I/O redirector will redirect all future accesses to LBA original to the caching partition (C.1 and C.2). This continues until the I/O monitor decides that data is no longer active and removes the entry from the mapping cache. Any update to the contents of the data is then written back to P A (D). This flow means that the upgrade process begins immediately when a new disk is added to CRAID (which forces P C to grow), and is interleaved with the array's normal I/O operation. This permits CRAID to use the new disks from the moment they are added to the array.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4">Detailed Design</head><p>This section elaborates on CRAID's design details by discussing its individual components mentioned in §3: the I/O monitor, the I/O redirector and the mapping cache.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.1">I/O Monitor</head><p>The I/O monitor is responsible for analyzing I/O requests to identify the working set and schedule the appropriate operations to copy data between partitions. The I/O monitor uses a conservative definition of working set that includes the latest k distinct blocks that have been more active, where k is P C 's current capacity.</p><p>When a request forces an eviction in P C , the I/O monitor checks if the cached copy is dirty and, if so, schedules the corresponding I/O operations to update the original data. Otherwise, the data is replaced by the newly cached block. Currently, the I/O monitor supports the following simple policies in order to make replacement decisions:</p><p>• Least Recently Used (LRU) uses recency of access to decide if a block has to be replaced.</p><p>• Least Frequently Used with Dynamic Aging (LFUDA) uses popularity of access and replaces the block with the smallest key</p><formula xml:id="formula_1">K i = (C i * F i ) + L,</formula><p>where C i is the retrieval cost, F i is a frequency count and L is a running age factor that starts at 0 and is updated for each replaced block <ref type="bibr" target="#b2">[3]</ref>.</p><p>• Greedy-Dual-Size with Frequency (GDSF) includes the size of the original request, S i , and replaces the block with minimum</p><formula xml:id="formula_2">K i = (C i * F i )/S i + L [21, 9, 3].</formula><p>• Adaptive Replacement Cache (ARC) <ref type="bibr" target="#b28">[28]</ref> balances between recency and frequency in an online and selftuning fashion. ARC adapts to changes in the workload by tracking ghost hits (recently evicted entries) and replaces either the LRU or LFU block depending on recent history.</p><p>• Weighted LRU (WLRU w ) is a simple extension of the LRU algorithm that tries to find the least recently used block that is also clean (i.e. not dirty). In order to avoid lengthy O(k) traversals it uses a parameter w ∈ R to limit the number of blocks that will be evaluated to k * w. If no suitable candidate is found in k * w steps, the LRU block is replaced.</p><p>We evaluate the effectiveness of these basic strategies to accurately predict the workload in §5.1. We implemented these basic strategies instead of more complex ones because these algorithms are typically extremely efficient and consume few resources, which makes them suitable to be included in a RAID controller. Furthermore, their prediction rates are usually quite high. Exploring more sophisticated strategies and/or data mining approaches to model complex data interrelations is left for the future.</p><p>The I/O monitor is also in charge of rebalancing P C . When new devices are added, the I/O monitor invalidates all the blocks contained in P C (writing back to P A the copies that need updating) and starts filling it with the current working set when blocks are requested. This conservative approach allows us to create long sequential chains of potentially related blocks, which improves the sequentiality and parallelism of the data in P C . Note that since P C always holds 'hot blocks', the rebalancing is never completely finished unless the working set remains stable for a long time. Nevertheless, as we show in §5, the cost of this 'on-line' monitoring and rebalancing is amortized by the performance obtained.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.2">Mapping Cache</head><p>The mapping cache is an in-memory data structure used to translate block addresses in the P A to their corresponding copies in P C . The structure stores, for each block copied to P C , the block's LBA in P A , the corresponding LBA in P C and a flag indicating if the cached copy has been modified.</p><p>Our current implementation uses a tree-based binary structure to handle mappings, which ensures that the total time complexity for a lookup operation is given by O(log k). Concerning memory, for every block in P C , CRAID stores 4 bytes for each LBA and 1 dirty bit, plus 8 additional bytes for the structure pointer. Assuming that all k blocks are occupied, that the configured block size is 4KB and P C size of S GB, the worst case memory requirement is 2 × S MB for LBAs, S/2 5 for the dirty information, and 4 × S MB for the tree pointers. Thus, in the worst case, CRAID requires memory of 0.58% the size of the cache partition, or ≈5.9MB per GB, an acceptable requirement for a RAID controller.</p><p>Notice that the destruction of the mapping cache can lead to data loss since block updates are performed in place in the cache partition. Failure resilience of the mapping cache is provided by maintaining a persistent log of which cached data blocks have been modified and their translations. This ensures that these blocks, whose cached copies were not identical to the original data, can be successfully recovered. Blocks that were not dirty in P C don't need to be recovered and are invalidated.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.3">I/O Redirector</head><p>The I/O redirector is responsible for intercepting all read and write requests sent to the CRAID volume and redirect them to the appropriate partition. For each request, it first checks the mapping cache for an existing cached copy. If none is found, the request is served from P A . Otherwise, the request is dispatched to the appropriate location in P C . Multi-block I/Os are split as required.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5">Evaluation</head><p>In this section we evaluate CRAID's behavior using a storage simulator. We seek to answer the following questions: (1) How well does CRAID capture working sets? (2) How does CRAID impact performance? (3) How sensitive is load balance to CRAID's I/O redirection? To answer these questions, we evaluate CRAID under realistic workloads, using detailed simulations where we replay the real-time storage traces described in §2. Since some of these traces include data collected over several weeks or months, which makes them intractable for fine-grained simulations, we simulate an entire continuous week (168 hours) chosen at random from each dataset. Note that in this paper, we only describe the evaluations of several CRAID variants that use RAID-5 in P C . For brevity's sake, we do not include similar results with RAID-0 <ref type="bibr" target="#b3">[4]</ref>.</p><p>Simulation system. The simulator consists of a workload generator and a simulated storage subsystem composed of DiskSim <ref type="bibr" target="#b7">[8]</ref> is an accurate and thoroughly validated disk system simulator developed in the Carnegie Mellon University, which has been used extensively in research projects to study storage architectures <ref type="bibr" target="#b0">[1,</ref><ref type="bibr" target="#b33">32,</ref><ref type="bibr" target="#b51">50,</ref><ref type="bibr" target="#b25">25]</ref>. All experiments use a simulated testbed consisting of Seagate Cheetah 15,000 RPM disks <ref type="bibr" target="#b40">[39]</ref>, each with a capacity of 146GB and 16MB of cache. This is the latest (validated) disk model available to Disksim. Though somewhat old, we decided to use these disks in order to use the detailed simulation model offered by Disksim, rather than a less detailed one. Besides, since our analysis is a comparative one, the disks' performance should benefit or harm all strategies equally. For the simulations involv-  ing SSDs, we use Microsoft Research's idealized SSD model <ref type="bibr" target="#b0">[1]</ref>. Since the capacity and number of disks in the original traced systems differs from our testbed, we determine the datasets for each trace via static analysis. These datasets are mapped onto the simulated disks uniformly so that all disks have the same access probability. Strategies evaluated. All experiments evaluate the six following allocation policies, an overview of which is shown in <ref type="figure" target="#fig_2">Fig. 3</ref>:</p><p>• RAID-5: A RAID-5 configuration that uses all disks available. Stripes are as long as possible but are divided into parity groups to improve the robustness and recov-  erability of the array <ref type="figure" target="#fig_2">(Fig. 3a)</ref>. This policy will help establish a comparison baseline as it provides maximum parallelism and ideal workload distribution. Notice, however, that expanding such an array in real life can be prohibitively expensive.</p><p>• RAID-5 + : A RAID-5 configuration that has been expanded and restriped several times. Each expansion phase adds 30% additional disks <ref type="bibr" target="#b27">[27]</ref> that constitute a new independent RAID-5. Thus the system can be considered a collection of independent RAID-5 arrays (or sets), each with its own stripe size, that have been added to expand the storage capacity (see <ref type="figure" target="#fig_2">Fig. 3b</ref>). This serves as a comparison baseline to a realistic system upgraded many times.</p><p>• CRAID-5 and CRAID-5 + : CRAID configurations that use RAID-5 for the caching partition. CRAID-5 also uses RAID-5 for the archive partition while CRAID-5 + uses RAID-5 + . The first one serves to evaluate the performance impact of using CRAID on an ideally restriped RAID-5 and the effects on performance of data transfers from/to the cache. With the second one, we evaluate the benefits of using CRAID in a storage system that has grown several times, with a P A that grows by aggregation.</p><p>• CRAID-5 ssd and CRAID-5 + ssd : CRAID configurations analogous to CRAID-5 and CRAID-5 + but using a fixed number of SSDs for the cache partition. This allows us to evaluate the advantages, if any, of using diskbased CRAID against using dedicated SSDs, which is a common solution offered by storage vendors.</p><p>We simulate RAID-5 and RAID-5 + in their ideal state, i.e., when the dataset has been completely restriped. The reason is that since CRAID is permanently in an "expansion" phase and sacrifices a small amount of capacity, in order to be useful its performance should be closer to an optimum RAID-5 array, rather than one being restriped. All the arrays simulated use 50 disks, a number chosen based on the datasets of the traces examined, except those for CRAID-5 ssd and CRAID-5 + ssd that include 5 additional SSDs (10%) for the dedicated cache. RAID-5 uses a parity group size of 10 disks both as a stand-alone  allocation policy and as a part of a CRAID configuration. Similarly, RAID-5 + begins with 10 disks and adds a new array of 3, 4, 5, 7, 9 and 12 disks (+30%) in each expansion step until the 50-disk mark is reached. The stripe unit for all policies is 128KB based on Chen's and Lee's work <ref type="bibr" target="#b10">[11]</ref>. In all experiments, the cache partition begins in a cold state.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5.1">Cache Partition Management</head><p>Here we evaluate the effectiveness to capture the working set of the different cache algorithms supported by the I/O monitor (refer to §4.1). In this experiment we are concerned with the ideal results of the prediction algorithms to select the best one for CRAID. Thus, we use a simplified disk model that resolves each I/O instantly, and allows us to measure the properties of each algorithm with no interferences. The remaining experiments use the more realistic disk model. <ref type="table" target="#tab_3">Tables 2 and 3</ref> show, respectively, the hit and replacement ratio delivered by each algorithm using a P C size of 0.1% the weekly working set. We observe that, for each trace, all algorithms except one show similar hit and re-  placement ratios with the ARC algorithm showing the best results in both evaluations. The only exception is the GDSF algorithm, which shows significantly worse results due to the addition of the request size as a metric which does not seem very useful in this kind of scenario.</p><p>For CRAID strategies based on RAID-5, however, evictions of clean blocks are preferred as long as the effectiveness of the algorithm is not compromised. This is because evicting a dirty block forces CRAID to update the original blocks and its parity in the P A , which requires 4 additional I/Os (2 reads and 2 writes). In this regard, the WLRU strategy is more suitable since it helps reduce the number of I/O operations needed to keep consistency: if the data block replaced has not been modified, there's no need to copy it back to P A . Thus, in the following experiments we configure the I/O monitor with the WLRU 0.5 algorithm since it shows hit and replacement ratios similar to ARC, and reduces the amount of dirty evictions.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5.2">Response Time</head><p>In this section we evaluate the performance impact of using CRAID. For each allocation policy and configuration, we measure the response time of each read and write request occurred during the simulations. <ref type="figure" target="#fig_3">Figs. 4 and 6</ref> show the response time measurements 2 of each CRAID variant, 2 95% confidence interval. compared to the RAID-5 and RAID-5 + baselines.</p><p>Note that each strategy was simulated with different cache partition sizes in order to estimate the influence of this parameter on performance. In the results shown in this section, the cache partition is successively doubled until no evictions have to be performed. This represents the best case for CRAID since data movement between the partitions is reduced to a minimum.</p><p>Read requests. The results for read requests are shown in <ref type="figure" target="#fig_3">Fig. 4</ref>. First, we observe that requests take notably longer to complete in RAID-5 + than in RAID-5 in all cases. This is to be expected since the longer stripes in RAID-5 increase its potential parallelism and provide a more effective workload distribution. Second, in most traces, hybrid strategies CRAID-5 and CRAID-5 + offer performance comparable to that of an ideal RAID-5, or even better for certain cache sizes (e.g. webusers trace, <ref type="figure" target="#fig_3">Fig. 4d</ref>). The explanation lies in the fact that CRAID's cache partition is able to better exploit the spatial locality available in commonly used data: colocating hot data in a small area of each disk helps reduce seek times when compared to the same data being randomly spread over the entire disk, and also increases the sequentiality of access patterns. This can be seen in <ref type="figure" target="#fig_5">Fig. 5</ref>, that shows the probability distribution (CDF) of the sequential access percentage for the cello99 and webusers traces (computed as #Seq Access #Accesses and aggregated per second of simulation). Here we see that access sequentiality in CRAID-5 and CRAID-5 + is similar to that of RAID-5 and significantly better than that of RAID-5 + . This helps reduce the response time per request and contributes to the overall performance of the array. Nevertheless, CRAID's effectiveness depends on how well hot data is predicted. Despite the good results shown in §5.1, <ref type="figure" target="#fig_3">Fig. 4f</ref> shows that performance results for the proj trace are not as good as in the other traces. <ref type="table" target="#tab_8">Table 4</ref> shows that CRAID's best hit ratio for the proj trace is lower than in other traces (e.g. 85.25% vs. 99.51% in home02 ) and that its eviction count is higher. These two factors contribute to more data being transferred to the cache partition and explain the drop in performance. Most interestingly, the performance and sequentiality provided by CRAID-5 + is similar to that of CRAID-5, even though it uses a RAID-5 + strategy for the archive partition. This proves that the cache partition is absorbing most of the I/O, and the array behaves like an ideal RAID-5, regardless of the strategy used for stale data. Third, increasing the size of the cache partition improves read response times in all CRAID-5 variants. This is to be expected since a larger cache partition increases the probability of a cache hit and also decreases the number of evictions, which greatly improves the effectiveness of the strategy. In most traces, however, once a certain partition   size S M is reached, response times stop improving (e.g. deasna with S M = 0.16% or home02 with S M = 0.08%, <ref type="figure" target="#fig_3">Figs. 4b and 4c, respectively)</ref>. Examination of these traces shows that CRAID is able to achieve a near maximum hit ratio with a partition of size S M , and increasing it further provides barely noticeable benefits. Finally, we see that the performance with dedicated SSDs is better than using a distributed partition for most traces. This is to be expected since SSDs are significantly faster than HDDs, and requests can be completed fast enough to avoid saturating the devices. Note, however, that for some P C sizes, full-HDD CRAID is able to offer similar performance levels <ref type="figure" target="#fig_3">(Figs. 4a, 4b, 4d</ref>, and 4e), and, given the difference in $/GB between SSDs and HDDs, it might be an appropriate option when it is not possible to add 10% SSDs to the storage architecture. Additionally, a full-SSD RAID should also benefit from the improved parallelism offered by an optimized P C .</p><p>Write requests. The results for write requests are shown in <ref type="figure" target="#fig_6">Fig. 6</ref>. Similarly to read requests, we observe that write requests are significantly slower in RAID-5 + than in RAID-5, for all traces. Most importantly, the hybrid strategies CRAID-5 and CRAID-5 + perform better than traditional RAID-5 in all traces except webusers, where performance is slightly below that of RAID-5. These improved response times can be explained by two reasons. First, since write requests are always served from the cache partition (except in the case of an eviction), response times benefit greatly from the improved spatial locality and sequentiality provided by the cache partition. <ref type="bibr" target="#b2">3</ref> Second, the smaller the P C fragment for each disk <ref type="bibr" target="#b2">3</ref> Obviously, as long as the prediction of the working set is accurate. is, the more likely it is that accesses to this fragment benefit from the disk's internal cache. This explains why response times in <ref type="figure" target="#fig_6">Fig. 6</ref> increase slightly for larger partition sizes: a smaller P C means more evictions in CRAID, but it also means a smaller fragment for each disk and a more effective use of its internal cache. The effect of this internal cache is highly beneficial, to the point that it amortizes the additional work produced by extra evictions. On the other hand, SSD-based strategies CRAID-5 ssd and CRAID-5 + ssd show significantly worse response times than their full-HDD counterparts in some traces (see <ref type="figure" target="#fig_6">Figs. 6a, 6c, 6f, or 6g)</ref>. Examination of these traces reveals that the I/O queues in the dedicated SSDs have significantly more pending requests than those in full-HDD CRAID. Also, the number of concurrently active disks during the simulation is lower (see <ref type="table" target="#tab_9">Table 5</ref>). In ad- dition, we discovered that Disksim's SSD model does not simulate a read/write cache. Thus, the lower number of pending requests coupled with the HDD cache benefit explained above, makes full-HDD CRAID faster for write requests in some traces.</p><formula xml:id="formula_3">Trace CRAID-5 P C CRAID-5 + P C best c v worst c v best c v worst c v cello99 0.02% 0.32% 0.02% 0.32% deasna 0.08% 1.28% 0.08% 1.28% home02 0.02% 0.32% 0.02% 0.32% webresearch 0.002% 0.032% 0.002% 0.032% webusers 0.004% 0.064% 0.004% 0.064% wdev 0.002% 0.032% 0.002% 0.032% proj 0.016% 0.256% 0.016% 0.256%</formula></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5.3">Workload Distribution</head><p>In this experiment we evaluate CRAID's ability to maintain a uniform workload distribution. For each second of simulation we measure the I/O load in MB received by each disk and we compute the coefficient of variation as a metric to evaluate the uniformity of its distribution.</p><p>The coefficient of variation (c v ) expresses the standard deviation as a percentage of the average ( σ µ ), and can be interpreted as how the actual workload deviates from an ideal distribution. <ref type="bibr" target="#b3">4</ref> We perform this experiment for all strategies described and uses the same P C sizes of §5.2.</p><p>Impact of CRAID. <ref type="figure" target="#fig_8">Figs. 7a and 7b</ref> show CDFs of c v per % of samples (seconds) for the deasna and wdev traces, respectively. Notice that for CRAID strategies we show both the best and worst curves obtained <ref type="table" target="#tab_10">(Table 6</ref> shows the correspondence with actual P C sizes) and we compare them with the results for RAID-5 and RAID-5 + . We observe that there is a significant difference between the workload distribution provided by RAID-5 and that of RAID-5 + , which is to be expected since the "segmented" nature of RAID-5 + naturally hinders a uniform workload distribution. Most interestingly, all CRAID strategies demonstrate a workload distribution very similar to (and sometimes better than) RAID-5. More importantly, this benefit appears in even those CRAID configurations that use RAID-5 + for the archive partition, despite its poor performance and uneven distribution. This proves that the cache partition is successful in absorbing most I/O, and that it behaves close to an ideal RAID-5 despite the cost of additional data transfers.</p><p>Influence of the cache partition size. Though barely noticeable, an unexpected result is that, in all traces, the workload distribution degrades as the cache partition grows (see <ref type="table" target="#tab_10">Table 6</ref>). Examination of the traces shows that <ref type="bibr" target="#b3">4</ref> The smaller c v is, the more uniform the data distribution. a larger cache partition slightly increases the probability that certain subsets of disks are more used than others due to the different layout of data blocks. This is reasonable since our current prototype doesn't perform direct actions to enforce a certain workload distribution, but rather relies on the strategy used for the cache partition. Improving CRAID to employ workload-aware layouts is one of the subjects of our future investigation.</p><p>Workload with dedicated SSDs. The curves shown in <ref type="figure" target="#fig_8">Figs. 7a and 7b</ref> show a worse workload distribution for CRAID-5 ssd and CRAID-5 + ssd when compared to the full-HDD strategies. This is to be expected since the dedicated SSDs absorb much of the I/O workload and end up degrading the global workload of the system. Note that this does not necessarily mean that the workload directed to the dedicated disks is unbalanced, but rather that the other devices are underutilized. This proves that a spread partition has a higher chance of producing a balanced workload, and can compete in performance, than a dedicated one, even if the devices used for the latter are faster.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="6">Discussion and Future Work</head><p>While our experiences with CRAID have been positive in RAID-0 and RAID-5 storage, we believe that they can also be applied to RAID-6 or more general erasure codes, since the overall principle still applies: rebalancing hot data should require less work than producing an ideal distribution. The main caveat of our solution, however, is the cost of additional parity computations and I/O operations for dirty blocks, which directly increases with the number of parity blocks required. Whether this cost can be leveraged by the performance benefits obtained, will be explored in a fully-fledged prototype.</p><p>It should also be possible to extend the proposed solution beyond RAID arrays, adapting the techniques to distributed or tiered storage. Specifically, we believe the monitoring of interesting data could be adapted to work with pseudo-randomized data distributions like CRUSH <ref type="bibr" target="#b44">[43]</ref> or Random Slicing <ref type="bibr" target="#b30">[30]</ref> in order to reduce data migration during upgrades. What to do with blocks that stop being interesting is a promising line of research.</p><p>Additionally, while the current CRAID prototype has served to verify that it is possible to amortize the cost of a RAID upgrade by using knowledge about hot data blocks, it uses simple algorithms for prediction and expansion. We envision several ways to improve the current prototype that can serve as subjects of future research.</p><p>Smarter prediction. The current version of CRAID does not take into account the relations between blocks in order to copy them to the caching partition, but rather relies on the fact that blocks accessed consecutively in a short  period of time tend to be related. More sophisticated techniques to detect block correlations could improve CRAID significantly, allowing the I/O monitor to migrate data to P C before it is actually needed.</p><p>Smarter rebalancing. The current invalidation of the entire P C when new disks are added is overkill. Though it benefits the parallelism of the data distribution and new disks can be used immediately, the current strategy was devised to test if our hypothesis held in the simplest case, without complex algorithms. Since working sets should not change drastically, CRAID could benefit greatly from strategies to rebalance the small amount of data in P C more intelligently, like those in §7.2.</p><p>Improved data layout. Similarly, currently CRAID does not make any effort to allocate related blocks close to each other. Alternate layout strategies more focused on preserving semantic relations between blocks might yield great benefits. For instance, it might be interesting to evaluate the effect of copying entire stripes to the cache partition as a way to preserve spatial locality. Besides, this could help reduce the number of parity computations, thus reducing the background I/O present in the array.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="7">Related Work</head><p>We examine the literature by organizing it into data layout optimization techniques and RAID upgrade strategies.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="7.1">Data Layout Optimization</head><p>Early works on optimized data layouts by <ref type="bibr">Wong [45]</ref>, Vongsathorn et al. <ref type="bibr" target="#b43">[42]</ref> and Ruemmler and Wilkes <ref type="bibr" target="#b38">[37]</ref> argued that placing frequently accessed data in the center of the disk served to minimize the expected head movement. Specifically, the latter proved that the best results in I/O performance came from infrequent shuffling (weekly) with small (block/track) granularity. Akyurek and Salem also showed the importance of reorganization at the block level, and the advantages of copying over shuffling <ref type="bibr" target="#b1">[2]</ref>. Hu et al. <ref type="bibr" target="#b49">[48,</ref><ref type="bibr" target="#b34">33]</ref> proposed an architecture called Disk Caching Disk (DCD), where an additional disk (or partition) is used as a cache to convert small random writes into large log appends, thus improving overall I/O performance. Similarly to DCD, iCache <ref type="bibr" target="#b15">[16]</ref> adds a log-disk along with a piece of NVRAM to create a two-level cache hierarchy for iSCSI requests, coalescing small requests into large ones before writing data. HP's AutoRAID <ref type="bibr" target="#b45">[44]</ref>, on the other hand, extends traditional RAID by partitioning storage in a mirrored zone and a RAID-5 zone. Writes are initially made to the mirrored zone and later migrated in large chunks to RAID-5, thus reducing the space overhead of redundancy information and increasing parallel bandwidth for subsequent reads of active data.</p><p>Li et al. proposed C-Miner <ref type="bibr" target="#b26">[26]</ref>, which used data mining techniques to model the correlations between different block I/O requests. Hidrobo and Cortes <ref type="bibr" target="#b17">[18]</ref> accurately model disk behavior and compute placement alternatives to estimate the benefits of each distribution. Similar techniques could be used in CRAID to infer complex access patterns and reorganize hot data more effectively. ALIS <ref type="bibr" target="#b19">[20]</ref> and, more recently, BORG <ref type="bibr" target="#b4">[5]</ref>, reorganize frequently accessed blocks (and block sequences) so that they are placed sequentially on a dedicated disk area. Contrary to CRAID, neither explores multi-disk systems.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="7.2">RAID Upgrade Strategies</head><p>There are several deterministic approaches to improve the extensibility of RAID-5. HP's AutoRAID allows an online capacity expansion without data migration, by which newly created RAID volumes use all disks and previously created ones use only the original disks.</p><p>Conventional approaches redistribute data and preserve the round-robin order. Gonzalez and Cortes proposed a Gradual Assimilation (GA) algorithm <ref type="bibr" target="#b14">[15]</ref> to control the overhead of expanding a RAID-5 system, but it has a large redistribution cost since all parities still need to be modified after data migration. US patent #6000010 presents a method to scale RAID-5 volumes that eliminates the need to rewrite data and parity blocks to the original disks <ref type="bibr" target="#b22">[23]</ref>. This, however, may lead to an uneven distribution of parity blocks and penalize write requests.</p><p>MDM <ref type="bibr" target="#b16">[17]</ref> reduces data movement by exchanging some blocks between the original and new disks. It also eliminates parity modification costs since all parity blocks are maintained, but it is unable to increase (only keep) the storage efficiency by adding new disks. FastScale <ref type="bibr" target="#b51">[50]</ref> minimizes data migration by moving only data blocks between old and new disks. It also optimizes the migration process by accessing physically sequential data with a single I/O request and by minimizing the number of metadata writes. At the moment, however, it cannot be used in RAID-5. More recently, GSR <ref type="bibr" target="#b48">[47]</ref> divides data on the original array into two sections and moves the second one onto the new disks keeping the layout of most stripes. Its main limitation is performance: after upgrades, accesses to the first section are served by original disks, and accesses to the second are served only by newer disks.</p><p>Due to the development of object-based storage, randomized RAID is becoming more popular, since it seems to have better scalability. The cut-and-paste strategy proposed by <ref type="bibr">Brinkmann et al. [6]</ref> uses a randomized function to place data across disks. When a disk is added to disks, it cuts off ranges of data [1/(n + 1), 1/n] from the original n disks, and pastes them to the new disk. Also based on a random hash function, Seo and Zimmermann <ref type="bibr" target="#b41">[40]</ref> proposed finding a sequence of disks additions that minimized the data migration cost. On the other hand, the algorithm proposed in SCADDAR <ref type="bibr" target="#b12">[13]</ref> moves a data block only if the destination disk is one of the newly added disks. This reduces migration significantly, but produces an unbalanced distribution after several expansions.</p><p>RUSH <ref type="bibr" target="#b18">[19]</ref> and CRUSH <ref type="bibr" target="#b44">[43]</ref> are the first methods with dedicated support for replication, and offer a probabilistically optimal data distribution with minimal migration.</p><p>Their main drawback is that they require new capacity to be added in chunks and the number of disks in a chunk must be enough to hold a complete redundancy group. More recently, <ref type="bibr">Miranda et al.'s Random Slicing [30]</ref> used a small table with information on insertion and removal operations to reduce the required randomness and deliver a uniform load distribution with minimal migration.</p><p>These randomized strategies are designed for objectbased storage systems, and focus only on how blocks are mapped to disks, ignoring the inner data layout of each individual disk. In this regard, CRAID manages blocks rather than objects and is thus more similar to deterministic (and extensible) RAID algorithms. To our knowledge, however, it is the first strategy that uses information about data blocks to reduce the overhead of the upgrade process.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="8">Conclusions</head><p>In this paper, we propose and evaluate CRAID, a selfoptimizing RAID architecture that automatically reorganizes frequently used data in a dedicated caching partition. CRAID is designed to accelerate the upgrade process of traditional RAID architectures by limiting it to this partition, which contains the data that is currently important and on which certain QoS levels must be kept.</p><p>We analyze CRAID using seven real-world traces of different workloads and collected at several times in the last decade. Our analysis shows that CRAID is highly successful in predicting the data workload and its variations. Further, if an appropriate data distribution is used for the cache partition, CRAID optimizes the performance of read and write traffic due to the increased locality and sequentiality of frequently accessed data. Specifically, we show that it is possible to achieve a QoS competitive with an ideal RAID-5 or RAID+SSD array, by creating a small RAID-5 partition of at most 1.28% the available storage, regardless of the layout outside the partition.</p><p>In summary, we believe that CRAID is a novel approach to building RAID architectures that can offer reduced expansion times and I/O performance improvements. In addition, its ability to combine several layouts can serve as a starting point to design newer allocation strategies more conscious about data semantics.</p></div><figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_0"><head>Figure 2 :</head><label>2</label><figDesc>Figure 2: CRAID's I/O control flow.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_1"><head>Fig. 2</head><label>2</label><figDesc>Fig. 2 shows the control flow supported by CRAID's architecture: when an I/O request enters the system (A), it is captured by CRAID's I/O monitor which determines if the accessed data must be considered "active". If so, data blocks are copied to the caching partition if they are not already in it (B.1) and an appropriate mapping 񮽙LBA original , LBA cache 񮽙 is stored in the mapping cache (B.2). From this point on, an I/O redirector will redirect all future accesses to LBA original to the caching partition (C.1 and C.2). This continues until the I/O monitor decides that data is no longer active and removes the entry from the mapping cache. Any update to the contents of the data is then written back to P A (D). This flow means that the upgrade process begins immediately when a new disk is added to CRAID (which forces P C to grow), and is interleaved with the array's normal I/O operation. This permits CRAID to use the new disks from the moment they are added to the array.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_2"><head>Figure 3 :</head><label>3</label><figDesc>Figure 3: Overview of the different allocation policies evaluated. an array controller and appropriate storage components. For each request recorded in the traces, the workload generator issues a corresponding I/O request at the appropriate time and sends it down to the array controller. The array controller's main component is the I/O processor which encompasses the functions of both the I/O monitor and the I/O redirector. According to the incoming I/O address, it checks the mapping cache and forwards it to the caching partition's segment of the appropriate disk. The workload generator, the mapping cache and the I/O processor are implemented in C++, while the different storage components are implemented in DiskSim. DiskSim [8] is an accurate and thoroughly validated disk system simulator developed in the Carnegie Mellon University, which has been used extensively in research projects to study storage architectures [1, 32, 50, 25]. All experiments use a simulated testbed consisting of Seagate Cheetah 15,000 RPM disks [39], each with a capacity of 146GB and 16MB of cache. This is the latest (validated) disk model available to Disksim. Though somewhat old, we decided to use these disks in order to use the detailed simulation model offered by Disksim, rather than a less detailed one. Besides, since our analysis is a comparative one, the disks' performance should benefit or harm all strategies equally. For the simulations involv-</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_3"><head>Figure 4 :</head><label>4</label><figDesc>Figure 4: Comparison of I/O response time (read requests).</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_5"><head>Figure 5 :</head><label>5</label><figDesc>Figure 5: Sequential access distribution (CDF) for the cello99 and webusers traces. Sequentiality percentages captured each second. Other traces show similar results.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_6"><head>Figure 6 :</head><label>6</label><figDesc>Figure 6: Comparison of I/O response time (write requests).</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_8"><head>Figure 7 :</head><label>7</label><figDesc>Figure 7: CRAID workload distribution: full-HDD (top) vs SSD-dedicated (bottom). Figures show CDFs of c v per % of samples (seconds) for traces deasna and wdev. Other traces show similar results.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_3" validated="false"><head>Table 2 :</head><label>2</label><figDesc></figDesc><table>Hit ratio (%) for each cache partition management 
algorithm. Best and second best shown in bold. 

</table></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_5" validated="false"><head>Table 3 :</head><label>3</label><figDesc></figDesc><table>Replacement ratio (%) for each cache partition man-
agement algorithm. Best and second best in bold. 

</table></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_8" validated="false"><head>Table 4 : Best hit ratio and worst eviction ratio (all simulations). Strategy Mean 99 th pctile Max</head><label>4</label><figDesc></figDesc><table>Ioq 
Cdev Ioq Cdev Ioq Cdev 

CRAID-5 + 
2.11 8.65 
20 
44 
381 
50 
CRAID-5 + 

ssd 

4.74 6.49 
45 
23 
427 
40 

</table></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_9" validated="false"><head>Table 5 :</head><label>5</label><figDesc></figDesc><table>Comparison of CRAID's SSD-dedicated vs. full-HDD 
approach. Ioq: ioqueue size, Cdev: concurrent devices. Trace: 
wdev, P C size: 0.002%. Other traces show similar results. 

</table></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_10" validated="false"><head>Table 6 :</head><label>6</label><figDesc></figDesc><table>Influence of P C size on workload distribution. 

</table></figure>

			<note place="foot" n="1"> In this paper, the term QoS refers to the performance and load distribution levels offered by the RAID array.</note>
		</body>
		<back>

			<div type="acknowledgement">
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Acknowledgments</head><p>We wish to thank anonymous reviewers and our shepherd C.S. Lui for their comments and suggestions for improvement. Special thanks go to André Brinkmann, María S. Pérez and BSC's SSRG team for insightful feedback that improved initial drafts significantly. This work was partially supported by the <ref type="bibr">Spanish and Catalan Govern- ments (grants SEV-2011</ref><ref type="bibr">-00067, TIN2012-34557, 2009</ref>, and EU's FP7 <ref type="bibr" target="#b50">/2007</ref><ref type="bibr" target="#b40">/ -2013</ref>).</p></div>
			</div>

			<div type="references">

				<listBibl>

<biblStruct xml:id="b0">
	<analytic>
		<title level="a" type="main">Design tradeoffs for SSD performance</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A G R Awa L</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">N</forename><surname>P R A B H A K A R A N</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">V</forename><surname>Wo B B E R</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Av I S</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>M A N A S S E</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>A N D Pa N I G R A H Y</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">USENIX 2008 Annual Technical Conference on Annual Technical Conference</title>
		<imprint>
			<date type="published" when="2008" />
			<biblScope unit="page" from="57" to="70" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b1">
	<analytic>
		<title level="a" type="main">Adaptive block rearrangement</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A K Y ¨ U R E K</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>A N D S A L E M</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">K</forename></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">ACM Transactions on Computer Systems (TOCS)</title>
		<imprint>
			<biblScope unit="volume">13</biblScope>
			<biblScope unit="page" from="89" to="121" />
			<date type="published" when="1995" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b2">
	<analytic>
		<title level="a" type="main">Evaluating content management techniques for web proxy caches</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A R L I T T</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>C H E R K A S O Va</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">L</forename><surname>D I L L E Y</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>F R I E D R I C H</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>A N D J I N</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">ACM SIG-METRICS Performance Evaluation Review</title>
		<imprint>
			<biblScope unit="volume">27</biblScope>
			<biblScope unit="page" from="3" to="11" />
			<date type="published" when="2000" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b3">
	<monogr>
		<title/>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Rt I A G A</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">E</forename><surname>A N D M I R A N D A</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Prace-2ip De</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2012" />
		</imprint>
	</monogr>
	<note>liverable D12.4. Performance Optimized Lustre. INFRA-2011-2.3.5 -Second Implementation Phase of the European High Performance Computing (HPC) service PRACE</note>
</biblStruct>

<biblStruct xml:id="b4">
	<analytic>
		<title level="a" type="main">BORG: block-reORGanization for self-optimizing storage systems</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">B</forename><surname>H A D K A M K A R</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>G U E R R A</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>U S E C H E</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">L</forename><surname>B U R N E T T</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">L I P</forename><surname>Ta K</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>R A N G A S Wa M I</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>A N D H R I S T I D I S</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">V</forename></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proccedings of the 7th conference on File and storage technologies</title>
		<meeting>cedings of the 7th conference on File and storage technologies</meeting>
		<imprint>
			<date type="published" when="2009" />
			<biblScope unit="page" from="183" to="196" />
		</imprint>
	</monogr>
	<note>USENIX Association</note>
</biblStruct>

<biblStruct xml:id="b5">
	<analytic>
		<title level="a" type="main">Distributed Data Placement Strategies for Storage Area Networks</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">B R I N K M A N N</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>S A L Z W E D E L</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">K</forename><surname>A N D S C H E I D E L E R</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><surname>Efficient</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 12 th ACM Symposium on Parallel Algorithms and Architectures (SPAA</title>
		<meeting>the 12 th ACM Symposium on Parallel Algorithms and Architectures (SPAA</meeting>
		<imprint>
			<date type="published" when="2000" />
			<biblScope unit="page" from="119" to="128" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b6">
	<monogr>
		<title level="m" type="main">Online RAID-5 resizing. drivers/md/raid5. c in the source code of Linux Kernel 2.6</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">B R O W N</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">N</forename></persName>
		</author>
		<imprint>
			<date type="published" when="2006" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b7">
	<monogr>
		<title level="m" type="main">The DiskSim Simulation Environment Version</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">B U C Y</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>S C H I N D L E R</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>S C H L O S S E R</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>A N D G A N G E R</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">G</forename></persName>
		</author>
		<idno>4.0 Reference Manual (CMU-PDL-08-101</idno>
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b8">
	<analytic>
		<title level="a" type="main">Cost-aware WWW proxy caching algorithms</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C A O</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><surname>A N D I R A N I</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 1997 USENIX Symposium on Internet Technology and Systems</title>
		<meeting>the 1997 USENIX Symposium on Internet Technology and Systems</meeting>
		<imprint>
			<date type="published" when="1997" />
			<biblScope unit="volume">193</biblScope>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b9">
	<analytic>
		<title level="a" type="main">RAID: High-performance, reliable secondary storage</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C H E N</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><surname>Le E</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">E</forename><surname>G I B S O N</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">G</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">K</forename><surname>At Z</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>A N D Pat T E R S O N</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">ACM Computing Surveys (CSUR)</title>
		<imprint>
			<biblScope unit="volume">26</biblScope>
			<biblScope unit="page" from="145" to="185" />
			<date type="published" when="1994" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b10">
	<monogr>
		<title level="m" type="main">Striping in a RAID level 5 disk array</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C H E N</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><forename type="middle">M</forename><surname>A N D L E E</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">E</forename><forename type="middle">K</forename></persName>
		</author>
		<imprint>
			<date type="published" when="1995" />
			<publisher>ACM</publisher>
			<biblScope unit="volume">23</biblScope>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b11">
	<analytic>
		<title level="a" type="main">Passive NFS tracing of email and research workloads</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">E L L A R D</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>L E D L I E</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>M A L K A N I</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><surname>A N D S E Lt Z E R</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 2nd USENIX Conference on File and Storage Technologies</title>
		<meeting>the 2nd USENIX Conference on File and Storage Technologies</meeting>
		<imprint>
			<date type="published" when="2003" />
			<biblScope unit="page" from="203" to="216" />
		</imprint>
	</monogr>
	<note>USENIX Association</note>
</biblStruct>

<biblStruct xml:id="b12">
	<analytic>
		<title level="a" type="main">SCADDAR: An efficient randomized technique to reorganize continuous media blocks</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">G O E L</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>S H A H A B I</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><surname>Yao</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>A N D Z I M -M E R M A N N</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings. 18th International Conference on</title>
		<meeting>18th International Conference on</meeting>
		<imprint>
			<publisher>IEEE</publisher>
			<date type="published" when="2002" />
			<biblScope unit="page" from="473" to="482" />
		</imprint>
	</monogr>
	<note>Data Engineering</note>
</biblStruct>

<biblStruct xml:id="b13">
	<analytic>
		<title level="a" type="main">Characterizing temporal locality in I/O workload</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">G ´ O M E Z</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>A N D S A N T O N J A</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">V</forename></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. of the International Symposium on Performance Evaluation of Computer and Telecommunication Systems</title>
		<meeting>of the International Symposium on Performance Evaluation of Computer and Telecommunication Systems</meeting>
		<imprint>
			<date type="published" when="2002" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b14">
	<analytic>
		<title level="a" type="main">Increasing the capacity of RAID5 by online gradual assimilation</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">G O N Z A L E Z</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>A N D C O R T E S</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the international workshop on Storage network architecture and parallel I/Os</title>
		<meeting>the international workshop on Storage network architecture and parallel I/Os</meeting>
		<imprint>
			<publisher>ACM</publisher>
			<date type="published" when="2004" />
			<biblScope unit="page" from="17" to="24" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b15">
	<analytic>
		<title level="a" type="main">A caching strategy to improve iSCSI performance</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">H E</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">X</forename><surname>Ya N G</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Q</forename><surname>A N D Z H A N G</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Local Computer Networks, 2002. Proceedings. LCN 2002. 27th Annual IEEE Conference on</title>
		<imprint>
			<publisher>IEEE</publisher>
			<date type="published" when="2002" />
			<biblScope unit="page" from="278" to="285" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b16">
	<analytic>
		<title level="a" type="main">Data storage array scaling method and system with minimal data movement</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">H E T Z L E R</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><forename type="middle">R</forename><surname>E T A L</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">US Patent</title>
		<imprint>
			<biblScope unit="volume">8</biblScope>
			<biblScope unit="page">622</biblScope>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b17">
	<analytic>
		<title level="a" type="main">Autonomic storage system based on automatic learning</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">H I D R O B O</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">F</forename><surname>A N D C O Rt E S</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">High Performance Computing-HiPC</title>
		<imprint>
			<publisher>Springer</publisher>
			<date type="published" when="2004" />
			<biblScope unit="page" from="399" to="409" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b18">
	<analytic>
		<title level="a" type="main">Replication under scalable hashing: A family of algorithms for scalable decentralized data distribution</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">H O N I C K Y</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>A N D M I L L E R</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">E</forename><forename type="middle">L</forename></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Parallel and Distributed Processing Symposium</title>
		<imprint>
			<publisher>IEEE</publisher>
			<date type="published" when="2004" />
			<biblScope unit="page">96</biblScope>
		</imprint>
	</monogr>
	<note>Proceedings. 18th International</note>
</biblStruct>

<biblStruct xml:id="b19">
	<analytic>
		<title level="a" type="main">The automatic improvement of locality in storage systems</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">H S U</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">W</forename><surname>S M I T H</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>A N D Y O U N G</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">H</forename></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">ACM Transactions on Computer Systems (TOCS)</title>
		<imprint>
			<biblScope unit="volume">23</biblScope>
			<biblScope unit="page" from="424" to="473" />
			<date type="published" when="2005" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b20">
	<analytic>
		<title level="a" type="main">GreedyDual* Web caching algorithm: exploiting the two sources of temporal locality in Web request streams</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J I N</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>A N D B E S Tav R O S</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Computer Communications</title>
		<imprint>
			<biblScope unit="volume">24</biblScope>
			<biblScope unit="page" from="174" to="183" />
			<date type="published" when="2001" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b21">
	<analytic>
		<title level="a" type="main">Data allocation in MEMSbased mobile storage devices. Consumer Electronics</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">L E E</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>A N D B A H N</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">H</forename></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE Transactions on</title>
		<imprint>
			<biblScope unit="volume">52</biblScope>
			<biblScope unit="issue">2</biblScope>
			<biblScope unit="page" from="472" to="476" />
			<date type="published" when="2006" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b22">
	<analytic>
		<title level="a" type="main">Method of increasing the storage capacity of a level five RAID disk array by adding</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">L E G G</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">a single step, a new parity block and N-1 new data blocks which respectively reside in a new columns</title>
		<imprint>
			<date type="published" when="1999-07" />
			<biblScope unit="volume">6</biblScope>
			<biblScope unit="page">10</biblScope>
		</imprint>
	</monogr>
	<note>where N is at least two</note>
</biblStruct>

<biblStruct xml:id="b23">
	<analytic>
		<title level="a" type="main">Measurement and analysis of largescale network file system workloads</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">L E U N G</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Pa S U Pat H Y</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>G O O D S O N</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">G</forename><surname>A N D M I L L E R</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">E</forename></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">USENIX</title>
		<imprint>
			<date type="published" when="2008" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b24">
	<monogr>
				<title level="m">Annual Technical Conference on Annual Technical Conference</title>
		<imprint>
			<date type="published" when="2008" />
			<biblScope unit="page" from="213" to="226" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b25">
	<analytic>
		<title level="a" type="main">EERAID: energy efficient redundant and inexpensive disk array</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">L I</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A N D Wa N G</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 11th workshop on ACM SIGOPS European workshop</title>
		<meeting>the 11th workshop on ACM SIGOPS European workshop</meeting>
		<imprint>
			<publisher>ACM</publisher>
			<date type="published" when="2004" />
			<biblScope unit="page">29</biblScope>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b26">
	<analytic>
		<title level="a" type="main">Mining block correlations in storage systems</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">L I</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Z</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C H E N</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Z</forename><surname>S R I N I Va S A N</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>A N D Z H O U</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Y</forename><surname>C-Miner</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 3rd USENIX Conference on File and Storage Technologies</title>
		<meeting>the 3rd USENIX Conference on File and Storage Technologies</meeting>
		<imprint>
			<date type="published" when="2004" />
			<biblScope unit="volume">186</biblScope>
		</imprint>
	</monogr>
	<note>USENIX Association</note>
</biblStruct>

<biblStruct xml:id="b27">
	<monogr>
		<title level="m" type="main">How much information?</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Ly M A N</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename></persName>
		</author>
		<ptr target="http://www.sims.berkeley.edu/research/projects/how-much-info-2003/" />
		<imprint>
			<date type="published" when="2003" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b28">
	<analytic>
		<title level="a" type="main">ARC: A selftuning, low overhead replacement cache</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M E G I D D O</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">N</forename><surname>A N D M O D H A</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 2nd USENIX Conference on File and Storage Technologies</title>
		<meeting>the 2nd USENIX Conference on File and Storage Technologies</meeting>
		<imprint>
			<date type="published" when="2003" />
			<biblScope unit="page" from="115" to="130" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b29">
	<analytic>
		<title level="a" type="main">Analyzing LongTerm Access Locality to Find Ways to Improve Distributed Storage Systems</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M I R A N D A</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>A N D C O Rt E S</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Parallel, Distributed and Network-Based Processing (PDP)</title>
		<imprint>
			<publisher>IEEE</publisher>
			<date type="published" when="2012" />
			<biblScope unit="page" from="544" to="553" />
		</imprint>
	</monogr>
	<note>20th Euromicro International Conference on</note>
</biblStruct>

<biblStruct xml:id="b30">
	<monogr>
		<title/>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M I R A N D A</forename></persName>
			<affiliation>
				<orgName type="collaboration">A N D</orgName>
			</affiliation>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>E F F E R T</surname></persName>
			<affiliation>
				<orgName type="collaboration">A N D</orgName>
			</affiliation>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>K A N G</surname></persName>
			<affiliation>
				<orgName type="collaboration">A N D</orgName>
			</affiliation>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Y</forename><surname>M I L L E R</surname></persName>
			<affiliation>
				<orgName type="collaboration">A N D</orgName>
			</affiliation>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">E</forename><forename type="middle">L</forename><surname>B R I N K M A N N</surname></persName>
			<affiliation>
				<orgName type="collaboration">A N D</orgName>
			</affiliation>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename></persName>
			<affiliation>
				<orgName type="collaboration">A N D</orgName>
			</affiliation>
		</author>
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b31">
	<analytic>
		<title level="a" type="main">Reliable and randomized data distribution strategies for large scale storage systems</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C O R T E S</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">High Performance Computing (HiPC), 2011 18th International Conference on</title>
		<imprint>
			<publisher>IEEE</publisher>
			<date type="published" when="2011" />
			<biblScope unit="page" from="1" to="10" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b32">
	<analytic>
		<title level="a" type="main">Write off-loading: Practical power management for enterprise storage</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">N A R Aya N A N</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>D O N N E L Ly</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>A N D R O W-S T R O N</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">ACM Transactions on Storage (TOS)</title>
		<imprint>
			<biblScope unit="volume">4</biblScope>
			<biblScope unit="page">10</biblScope>
			<date type="published" when="2008" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b33">
	<analytic>
		<title level="a" type="main">Migrating server storage to SSDs: analysis of tradeoffs</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">N A R Aya N A N</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>T H E R E S K A</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">E</forename><surname>D O N N E L Ly</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>E L N I K E T Y</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>A N D R O W S T R O N</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 4th ACM European conference on Computer systems</title>
		<meeting>the 4th ACM European conference on Computer systems</meeting>
		<imprint>
			<publisher>ACM</publisher>
			<date type="published" when="2009" />
			<biblScope unit="page" from="145" to="158" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b34">
	<analytic>
		<title level="a" type="main">The design and implementation of DCD device driver for UNIX</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">N I G H T I N G A L E</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><surname>H U</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Y</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A N D Ya N G</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Q</forename></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 1999 USENIX Technical Conference</title>
		<meeting>the 1999 USENIX Technical Conference</meeting>
		<imprint>
			<date type="published" when="1999" />
			<biblScope unit="page" from="295" to="308" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b35">
	<analytic>
		<title level="a" type="main">A dynamic group-based scheduling algorithm for MEMS-based mobile storage devices</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Pa R K</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C H U N</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">H</forename><surname>B A H N</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">H</forename><surname>A N D K O H</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">K</forename><surname>G-Mst</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Consumer Electronics</title>
		<imprint>
			<date type="published" when="2009" />
			<biblScope unit="volume">55</biblScope>
			<biblScope unit="page" from="570" to="575" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b36">
	<analytic>
		<title level="a" type="main">A simple way to estimate the cost of downtime</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Pat T E R S O N</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>E T A L</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. 16th Systems Administration Conf.-LISA</title>
		<meeting>16th Systems Administration Conf.-LISA</meeting>
		<imprint>
			<date type="published" when="2002" />
			<biblScope unit="page" from="185" to="193" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b37">
	<monogr>
		<title level="m" type="main">A case for redundant arrays of inexpensive disks (RAID)</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Pat T E R S O N</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>G I B S O N</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">G</forename><surname>A N D K At Z</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename></persName>
		</author>
		<imprint>
			<date type="published" when="1988" />
			<publisher>ACM</publisher>
			<biblScope unit="volume">17</biblScope>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b38">
	<monogr>
		<title level="m" type="main">Disk shuffling</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R U E M M L E R</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><surname>A N D W I L K E S</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename></persName>
		</author>
		<idno>HPL-91-156</idno>
		<imprint>
			<date type="published" when="1991" />
		</imprint>
		<respStmt>
			<orgName>Hewlett Packard Laboratories</orgName>
		</respStmt>
	</monogr>
<note type="report_type">Technical Report</note>
</biblStruct>

<biblStruct xml:id="b39">
	<analytic>
		<title level="a" type="main">UNIX disk access patterns</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R U E M M L E R</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><surname>A N D W I L K E S</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the Winter 1993 USENIX Technical Conference</title>
		<meeting>the Winter 1993 USENIX Technical Conference</meeting>
		<imprint>
			<date type="published" when="1993" />
			<biblScope unit="page" from="405" to="420" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b40">
	<monogr>
				<ptr target="http://www.seagate.com/staticfiles/support/disc/manuals/enterprise/cheetah/15K.5/FC/100384772f.pdfLastretrievedSept.9" />
		<title level="m">Seagate Cheetah 15K.5 FC product manual</title>
		<imprint>
			<date type="published" when="2013" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b41">
	<analytic>
		<title level="a" type="main">Efficient disk replacement and data migration algorithms for large disk subsystems</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S E O</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">B</forename><surname>A N D Z I M M E R M A N N</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">ACM Transactions on Storage (TOS)</title>
		<imprint>
			<biblScope unit="volume">1</biblScope>
			<biblScope unit="page" from="316" to="345" />
			<date type="published" when="2005" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b42">
	<analytic>
		<title level="a" type="main">SRCMap: energy proportional storage using dynamic consolidation</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">V E R M A</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>K O L L E R</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>U S E C H E</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">L</forename><surname>A N D R A N G A S Wa M I</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 8th USENIX conference on File and storage technologies</title>
		<meeting>the 8th USENIX conference on File and storage technologies</meeting>
		<imprint>
			<date type="published" when="2010" />
			<biblScope unit="page" from="20" to="20" />
		</imprint>
	</monogr>
	<note>USENIX Association</note>
</biblStruct>

<biblStruct xml:id="b43">
	<analytic>
		<title level="a" type="main">A system for adaptive disk rearrangement</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">V O N G S At H O R N</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><surname>A N D C A R S O N</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Software: Practice and Experience</title>
		<imprint>
			<biblScope unit="volume">20</biblScope>
			<biblScope unit="page" from="225" to="242" />
			<date type="published" when="1990" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b44">
	<analytic>
		<title level="a" type="main">Crush: Controlled, scalable, decentralized placement of replicated data</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">W E I L</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><forename type="middle">A</forename><surname>B R A N D T</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><forename type="middle">A</forename><surname>M I L L E R</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">E</forename><forename type="middle">L</forename><surname>A N D M A Lt Z A H N</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 2006 ACM/IEEE conference on Supercomputing</title>
		<meeting>the 2006 ACM/IEEE conference on Supercomputing</meeting>
		<imprint>
			<publisher>ACM</publisher>
			<date type="published" when="2006" />
			<biblScope unit="page">122</biblScope>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b45">
	<analytic>
		<title level="a" type="main">The HP AutoRAID hierarchical storage system</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">W I L K E S</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>G O L D I N G</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Ta E L I N</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><surname>A N D S U L L I Va N</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">ACM Transactions on Computer Systems (TOCS)</title>
		<imprint>
			<biblScope unit="volume">14</biblScope>
			<biblScope unit="page" from="108" to="136" />
			<date type="published" when="1996" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b46">
	<analytic>
		<title level="a" type="main">Minimizing expected head movement in onedimensional and two-dimensional mass storage systems</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">W O N G</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">ACM Computing Surveys (CSUR)</title>
		<imprint>
			<biblScope unit="volume">12</biblScope>
			<biblScope unit="page" from="167" to="178" />
			<date type="published" when="1980" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b47">
	<monogr>
		<title level="m" type="main">My Cache Or Yours?: Making Storage More Exclusive</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">W O N G</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><surname>Ga N G E R</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">G</forename><surname>W I L K E S</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>E T A L</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2000" />
		</imprint>
		<respStmt>
			<orgName>School of Computer Science, Carnegie Mellon University</orgName>
		</respStmt>
	</monogr>
</biblStruct>

<biblStruct xml:id="b48">
	<analytic>
		<title level="a" type="main">Gsr: A global stripe-based redistribution approach to accelerate raid-5 scaling</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">W U</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><surname>A N D H E</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">X</forename></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Parallel Processing (ICPP), 2012 41st International Conference on</title>
		<imprint>
			<publisher>IEEE</publisher>
			<date type="published" when="2012" />
			<biblScope unit="page" from="460" to="469" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b49">
	<analytic>
		<title level="a" type="main">DCD-disk caching disk: A new approach for boosting I/O performance</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Ya N G</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Q</forename><surname>A N D H U</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Y</forename></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">23rd Annual International Symposium on</title>
		<imprint>
			<publisher>IEEE</publisher>
			<date type="published" when="1996" />
			<biblScope unit="page" from="169" to="169" />
		</imprint>
	</monogr>
	<note>Computer Architecture</note>
</biblStruct>

<biblStruct xml:id="b50">
	<analytic>
		<title level="a" type="main">SLAS: An efficient approach to scaling round-robin striped volumes</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Z H A N G</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">G</forename><surname>S H U</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>X U E</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">W</forename><surname>A N D Z H E N G</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">W</forename></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">ACM Transactions on Storage (TOS)</title>
		<imprint>
			<biblScope unit="volume">3</biblScope>
			<biblScope unit="page">3</biblScope>
			<date type="published" when="2007" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b51">
	<analytic>
		<title level="a" type="main">FastScale: accelerate RAID scaling by minimizing data migration</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Z H E N G</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">W</forename><surname>A N D Z H A N G</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">G</forename></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 9th USENIX Conference on File and Storage Technologies (FAST)</title>
		<meeting>the 9th USENIX Conference on File and Storage Technologies (FAST)</meeting>
		<imprint>
			<date type="published" when="2011" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b52">
	<analytic>
		<title level="a" type="main">Hibernator: helping disk arrays sleep through the winter</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Z H U</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Q</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C H E N</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Z</forename><surname>Ta N</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">L</forename><surname>Z H O U</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Y</forename><surname>K E E -T O N</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">K</forename><surname>A N D W I L K E S</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">In ACM SIGOPS Operating Systems Review</title>
		<imprint>
			<biblScope unit="volume">39</biblScope>
			<biblScope unit="page" from="177" to="190" />
			<date type="published" when="2005" />
			<publisher>ACM</publisher>
		</imprint>
	</monogr>
</biblStruct>

				</listBibl>
			</div>
		</back>
	</text>
</TEI>
