<?xml version="1.0" encoding="UTF-8"?>
<TEI xmlns="http://www.tei-c.org/ns/1.0" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
xsi:schemaLocation="http://www.tei-c.org/ns/1.0 /Users/atharsefid/Desktop/grobid-0.5.3/grobid-home/schemas/xsd/Grobid.xsd"
 xmlns:xlink="http://www.w3.org/1999/xlink">
	<teiHeader xml:lang="en">
		<encodingDesc>
			<appInfo>
				<application version="0.5.3" ident="GROBID" when="2020-09-29T04:25+0000">
					<ref target="https://github.com/kermitt2/grobid">GROBID - A machine learning software for extracting information from scholarly documents</ref>
				</application>
			</appInfo>
		</encodingDesc>
		<fileDesc>
			<titleStmt>
				<title level="a" type="main">Aperator: Making Tweets Enable Actionable Commands on Third Party Web Applications</title>
			</titleStmt>
			<publicationStmt>
				<publisher/>
				<availability status="unknown"><licence/></availability>
			</publicationStmt>
			<sourceDesc>
				<biblStruct>
					<analytic>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Peter</forename><surname>Zakin</surname></persName>
							<email>pzakin@princeton.edu</email>
							<affiliation key="aff0">
								<orgName type="institution" key="instit1">Princeton University</orgName>
								<orgName type="institution" key="instit2">Princeton University</orgName>
								<orgName type="institution" key="instit3">Princeton University</orgName>
							</affiliation>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Soumya</forename><surname>Sen</surname></persName>
							<email>soumyas@princeton.edu</email>
							<affiliation key="aff0">
								<orgName type="institution" key="instit1">Princeton University</orgName>
								<orgName type="institution" key="instit2">Princeton University</orgName>
								<orgName type="institution" key="instit3">Princeton University</orgName>
							</affiliation>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Mung</forename><surname>Chiang</surname></persName>
							<email>chiangm@princeton.edu</email>
							<affiliation key="aff0">
								<orgName type="institution" key="instit1">Princeton University</orgName>
								<orgName type="institution" key="instit2">Princeton University</orgName>
								<orgName type="institution" key="instit3">Princeton University</orgName>
							</affiliation>
						</author>
						<title level="a" type="main">Aperator: Making Tweets Enable Actionable Commands on Third Party Web Applications</title>
					</analytic>
					<monogr>
						<imprint>
							<date/>
						</imprint>
					</monogr>
				</biblStruct>
			</sourceDesc>
		</fileDesc>
		<profileDesc>
			<abstract>
				<p>Twitter has become a persistent part of our digital lives, connecting us not only to our individual audiences but also to an entire landscape of applications built for the web. While much has been done to support the Twit-ter ecosystem outside of Twitter, little has been done within Twitter to power those same applications. This work introduces a service called Aperator, which supports application-specific actionable commands through tweets. This ability creates several interesting opportunities for both end-users and application developers building on the Twitter platform. For example, the action-able command capability allows a link that a Twitter user shares with his followers to be directly added to any of the user&apos;s connected link sharing networks, such as Delicious or Read it Later. The client side of this system has a console for end-users to sign up and provide their login credentials for various web services that our system supports: Delicious, Foursquare, Read it Later, Foursquare etc. The system&apos;s backend has two cron jobs that run every minute to: (a) retrieve and parse tweets from a specific twitter account and store them in a command form in a MySQL database, and (b) execute the unex-ecuted commands found in the users tweets. This paper describes the concept, implementation, and results from an experimental study of this new application.</p>
			</abstract>
		</profileDesc>
	</teiHeader>
	<text xml:lang="en">
		<body>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="1">Introduction</head><p>Since its launch in 2006, Twitter has become one of the most important social properties on the web, trailing only Facebook and YouTube in terms of traffic <ref type="bibr" target="#b0">[1]</ref>. Beyond the popularity of its own service, however, Twitter has also promoted the growth and engagement of third party websites through its API. As of May 2011, there are over 660k developers building applications on the Twitter API and over 900k operating applications <ref type="bibr" target="#b3">[5]</ref>. The Twitter API has four major offerings: Twitter for Websites enables visitors at third party sites to make use of basic Twitter functionalities like following and tweeting on third party sites; the Search API provides query-access to recent Tweets; the REST API provides a way for developers to access user data and execute most of the main functionality of the Twitter service; lastly, the Streaming API permits an uninterrupted connection to the Twitter Firehose for developers to make use of data-sets.</p><p>Generally speaking, consumer web applications predominantly use the REST API and do so in three primary ways: to publicize user activity on the Twitter network (e.g. Foursquare, Quora), to stream user activity (e.g. Summify), or to operate their own Twitter client (e.g. TweetDeck). But the service that this paper describes represents a new mode for relating consumer web applications to Twitter.</p><p>The motivation for this approach is that although today's social web is great for sharing <ref type="bibr" target="#b6">[8,</ref><ref type="bibr" target="#b7">9]</ref>, with so many apps it can be hard to connect what we share in one network to our presence on others. Moreover, for those who spend most of their time on only the major networks, it can be difficult to keep up with their audience on others <ref type="bibr" target="#b5">[7]</ref>. Some networks today do provide limited interactivity through automatic forwarding of all user updates to a few other networks, as shown in <ref type="figure" target="#fig_0">Figure 1</ref>.1. But instead of either forwarding all updates from one network to the others or needing to log in and post on multiple networks, what if a user had the ability to selectively post from one network to all the other networks that the user cares about? Aperator <ref type="bibr" target="#b1">[2,</ref><ref type="bibr" target="#b2">3]</ref> realizes this vision by enabling users to operate real commands on a set of different web apps just by tweeting.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="1.1">Contributions</head><p>Aperator demonstrates a new means of posting, which creates numerous benefits including:</p><p>• A method for granular cross-network posting:</p><p>Cross-network posting is currently possible from</p><p>Twitter to Facebook and from Foursquare to Twitter, among others. But this form of cross-network posting is automatic and applies to all posts or none at all. The selective nature of aperator commands makes cross-network posting granular.</p><p>• A solution to make multi-network online presences more convenient for users: Although users may maintain several presences across a variety of web properties, it can be difficult to actively contribute on all of them. Generally and not at all surprisingly, users spend most of their time on larger networks like Facebook and Twitter as opposed to smaller networks like Delicious or Read it Later. Since aperator enables users to post content on some of those smaller networks from Twitter, it makes the multi-network presence more plausible.</p><p>• A way to increase engagement for third party applications: By making posting on third party applications as simple as tweeting, users can broadcast to multiple networks through one single interface. Thus, aperator can boost engagement on third party applications as another avenue for posting.</p><p>• A new platform for application development: Since users can interact with third party applications through the Twitter interface, aperator demonstrates the possibility of purely back-end applications. As an example, we created a prototype for such an application built on top of the aperator platform. The application, called "sms", provided the basic functionality of a group text messaging application from Twitter by using Twilio's service. Users could sign up by logging into aperator and editing their sms settings, which entailed adding or editing groups of numbers. If users wanted to send a text message to the members of their sms-groups, they would tweet: "@aperator sms #GROUPNAME Message".</p><p>Although increasing connectivity among different web applications in itself is not a new idea, Aperator's key contribution is in demonstrating what this system can enable. Aperator can be seen as a first step towards a TwitterOS, and using Twitter to provide some interesting features and services as discussed below.</p><p>First, there is a familiar and easy to use interface and you can access it from a wide range of clients. As a result, we did not develop a separate stand-alone shellclient on aperator.com and instead let users interface directly through Twitter.</p><p>Second, when users start using aperator services extensively and more features are developed by third-party developers using aperator as a platform, then user's command history will be publicly available for innovating a variety of new services. For example, users can benefit from searching and finding out how their fellow users are using various sequence of commands to accomplish some particular task. While there are privacy concerns to be addressed, the presence of such a platform can create new possibilities for technical innovations.</p><p>Third, while Twitter already permits in-tweet commands for cross-posting to LinkedIn and Facebook, this capability stems from coordinated relationships between Twitter and other applications. Aperator democratizes this capability, making cross-posting simple even for organizations that are smaller than Facebook or LinkedIn. Additionally, Aperator commands have the potential to execute more sophisticated operations than posting, while Twitter's current model for cross-posting seems illpoised to do so.</p><p>It should be noted that Aperator is not a 'tweeting from the command line' application like Twidge, Twitter CLI etc; it is effectively accessible from any Twitter client. Also, since Aperator is not a client interface, the recent moves by Twitter to discourage third party Twitter client developments in favor of consistent user experience <ref type="bibr" target="#b4">[6]</ref> is not at odds with our approach.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="1.2">Approach</head><p>Aperator <ref type="bibr" target="#b1">[2]</ref> is a platform for making tweets actionable on third party web applications. By tweeting to the @aperator account, users are able to post content on web applications like Facebook, Foursquare, Delicious and Read it Later, as illustrated in <ref type="figure">Figure 2</ref>. Just as a command line connects its users to applications on their operating system, Aperator connects its users (through Twitter) to applications on the social web. And like the command line, Aperator operates with a strict syntax, even as it enables powerful capabilities through a simple interface. The syntax currently supports four commands:</p><p>1. Link submission to Delicious: "@aperator delicious www.example.com [optional text]".</p><p>2. Link submission to Read it Later: "@aperator ril www.example.com [optional text]".</p><p>3. Post a status update on Facebook: "@aperator fb This is a status update".</p><p>4. Check-in on Foursquare: "@aperator 4sq Example Location".</p><p>In the absence of a revenue source to pay for users' texting, the sms app has not been featured in the public release of Aperator, but it does demonstrate a potentially powerful model. Building the sms application was greatly simplified since the user interface was almost entirely located on Twitter -the only exception was the group set-up page, on which users created groups and specified the names and numbers of its members. This shows that application developers can build mostly backend applications that require little to no front-end interface since the end-users tweets have been shown to be sufficient as a means for user input.</p><p>This paper is organized as follows: Section 2 describes the client-side and back-end architecture of Aperator. The implementation details, challenges, and limitations are elaborated in Section 3. Initial performance results from a small-scale functionality test of the system is reported in Section 4. Section 5 discusses the potential of app-specific command execution capability and future extensions, followed by conclusions drawn in Section 6.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2">Architecture</head></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.1">Client-side design</head><p>To get started on the service, users are required to sign up with their Twitter credentials. After Twitter authentication, users are redirected to aperator's signup page, where they also create their own Aperator login credentials. When users are logged in, they are presented with a visual display of aperators "Lexicon", which lists the available applications that can be connected alongside their associated command-syntax, like in <ref type="figure" target="#fig_1">Figure 3</ref>.</p><p>In order to start using any of the four apps that are currently supported by aperator -Foursquare, Delicious, Facebook and Read it Later -users first connect them to Aperator. For users wishing to connect aperator to their Foursquare or Facebook accounts, users follow a connect button to either apps' oAuth 2.0 authentication process, which upon verification, will redirect the user back to Aperator. But because Delicious and Read it Later utilize HTTP-Auth, Aperator stores users login credentials for these services. Therefore, when users choose to connect either of these two services to aperator, they are taken to a connect page. Upon successful connection, users are redirected back to the aperator home screen.</p><p>After users have connected aperator to any of the available apps, they can reconnect to an app if they changed their login credentials or if they happened to inadvertently revoke access to aperator. To reflect the ability to reconnect an app with different login credentials, what was previously labeled a "connect" button is now labeled for connected users as "reconnect."</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.2">Back-end design</head><p>While the end-user interface occurs almost entirely on Twitter's cross-platform properties after signup, the implementation and core of the system runs on the services server, which runs as an Amazon Web Services instance. The back-end processes involve two main parts: storing tweet-commands and executing commands that have not been executed.</p><p>Tweets are stored through two cron processes that run every minute, called stream1.php and stream2.php. Both processes are identical but for a sleep cycle in stream2.php which lasts 30 seconds. This way, tweets are captured from Twitter twice every minute -nearly every 30 seconds. The frequency of tweet-capturing can be increased as the service's adoption grows. Although Twitter does not release a formal rate-limit for the Search API, the risks of being throttled seem to advise a conservative approach to tweet queries.</p><p>It should be noted that using the Streaming API is more conducive to the demands of this application since it allows developers to maintain long-lasting connections to the Twitter Firehose. In future releases, the Streaming API should be utilized since it would relinquish the need to run multiple cron processes and concerns about rate-limiting. However, given the prototype nature of the current version, we presently capture tweet-commands using the Search API.</p><p>The following snippet demonstrates the cURL response used to query the Search API: The search is specifically for all @mentions of @aper-ator, specifying tweet-entities as the return type. Specifying "include entitites=true" in the request asks Twitter to include the expanded URL of links that Twitter has converted to the t.co link-shortened format. This request to Twitter returns a JSON response: {"result_type":"recent"}, "profile_image_url":"...., ...., "text":" @aperator ril http://t.co/gzPGiehI", "to_user":"aperator", "to_user_id":427607438, "to_user_id_str":"427607438", "to_user_name":"Aperator", "created_at":"Wed, 11 Jan 2012 19:27:43 +0000", "from_user":"pzakin", ....</p><p>The JSON specifies the constituent elements of a tweet object, e.g. "to user name" and "text", and is easily parsed. From here, the "from user" property of the tweet is checked against a MySQL table of Aperator users in order to make sure that tweets from non-users will not be processed. Assuming that the tweet comes from a registered user and that the app specified is valid, the command is stored in a MySQL table. The second half of the implementation consists of a process that executes commands that are yet to be executed. This process is managed by a cron job that runs each minute. To maximize for speed of execution-i.e., limiting the lag between catching the tweet from the Twitter Search response and its execution-the execution process operates inside a while loop, which iterates not less frequently than every five seconds. Upon execution, the command is designated as executed and ignored by the executing process in the future. <ref type="figure">Figure 4</ref> shows the overall architecture and the processes that constitute the aperator system.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3">Implementation</head><p>The client console was developed using basic HTML, CSS and Javascript-the latter of which was mostly im-  <ref type="figure">Figure 4</ref>: Aperator architecture plemented using the javascript framework, jQuery. The back-end was built on a LAMP stack that was hosted on an EC2 instance from Amazon Web Services. As has already been described, the system itself was powered primarily by the Twitter API, which connected the aperator application to users' tweets. Although our current initial prototype uses the Search API, the use of Streaming API and even the REST API are also feasible. The Streaming API represents the best method for accessing @mentions of @aperator because it streams tweets almost instantaneously. We chose to use the Search API in the current prototype merely to avoid potential complications with maintaining a long-standing HTTP connection. Additionally, we opted against the REST API because of its requirement for authenticated use of the API.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.1">Limitations</head><p>Although the Search and Streaming APIs can rapidly stream @mentions of @aperator, both cannot access @mentions coming from private users. Therefore, Twitter users who maintain a private account viewable only to their followers are presently unable to use the service.</p><p>Going forward, we have considered improving our current implementation by utilizing the Streaming API to catch @mentions of @aperator instantaneously. Additionally, to provide service access to Twitter users with private accounts, we will add a process utilizing the REST API that should run in parallel to our Streaming API connection. Since the REST API requires authentication, private @mentions will be retrievable as long as we require users to follow @aperator when they sign up, which can be easily added to our signup process.</p><p>Additionally, the current implementation for checking in on Foursquare merely "shouts" a venue name. We do not specify a 'venue id' that would enable a traditional Foursquare check-in. In order to retrieve a 'venue id', we would need to specify latitude and longitude coordinates. In fact, this should be possible since users can add their location to their tweets. Unfortunately, at this time, the Tweet entities returned by the Search API have returned "NULL" values for the "geo" field that otherwise should specify the needed coordinates. Until this issue has been resolved by Twitter, we are unable to check-in users to registered Foursquare locations.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.2">Challenges</head><p>Besides the issues discussed regarding the Foursquare client, it is worth mentioning some other challenges and the workarounds we undertook to help coordinate access to Delicious and Read it Later in a user-friendly way.</p><p>First, Twitter shortens all links to the t.co wrapper format. When links are added to Read it Later or Delicious, it is important that they are translated back to an expanded URL. Otherwise, users viewing their saved links would fail to recognize the destinations of their links. Since Twitter provides an "expanded url" field in their JSON response to search queries, we use it so that when the expanded url is valid, the delicious request adds the expanded URL rather than the t.co shortened link.</p><p>Lastly, the Delicious API requires a "description" parameter for link-submission. In order to provide a meaningful description, we decided to scrape its "&lt;title&gt;" tag from its DOM structure. The code we used for that purpose is given below: </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4">Evaluation</head></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.1">Deployment</head><p>The service website <ref type="bibr" target="#b1">[2]</ref> was formally opened up to users on January 2, 2012 for experimentation and testing. Since then, 47 users have signed up for the service and 82 commands have been issued from Twitter, as shown in <ref type="figure">Figure 5</ref>. Although the adoption has been slow in the absence of promotional efforts on our part for this noncommercial service, our focus has been on testing and improving the system functionality as opposed to enlarging user base. Going forward, it will be important to reach out to Twitter users and adapt the service based on user feedback. Increasing the number of applications and services that users can connect to from Aperator will also be explored in the future.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.2">Performance</head><p>We evaluate the performance of the system by measuring the execution time of commands issued to Aperator from    <ref type="table" target="#tab_2">Table 1</ref>. <ref type="figure">Figure 6</ref> shows a more granular picture of the distribution of execution times for tweet commands operated on by Aperator for different applications. The performance figures show that Delicious and Read it Later commands have relatively slower execution because both implementations entail an additional process of scraping titles for submitted links, which we've detailed before.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5">Discussions</head><p>Despite the presence of APIs across the vast majority of popular web services, the flow of data generally moves towards the larger networks as smaller networks publicize activity to a greater audience. In a sense, Aperator is a serious step towards moving more data from the larger networks to the smaller ones-which in effect, amounts merely to the ability to post content from a larger network to a smaller one. Because users spend more time on larger networks, Aperator effectively lowers the barriers to engagement that plague smaller networks.</p><p>While we currently support commands only coming from Twitter, it is possible and perhaps advantageous to replicate the Aperator service for Facebook. Sending commands to third party web applications from Facebook would work quite similarly to the Twitter implementation. Users would merely update their status with specific commands for third party web applications. Admittedly, this would require a syntax adjustment because Facebook does not support user-to-application communication. Thus, to specify an Aperator command in Facebook, we plan on introducing a syntax such as: "## delicious www.example.com".</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5.1">Related Developments</head><p>Increasing connectivity among different web applications is not a unique idea, even though Aperator is in many ways a unique implementation. IFTTT <ref type="bibr">[4]</ref>, for example, works with a host of different applications to automate actions between different services. For instance, if one uploads a file to her dropbox folder, IFTTT might send a tweet or a text message or post a status update on any number of services etc. The range of "recipes" permitted by IFTTT is extremely compelling when considering the potential benefits of inter-app synergy.</p><p>IFTTT has become a popular service in a new category of applications we might well call "API plumbing," but it certainly need not be the last. Aperator differs from IFTTT in the granularity of control it offers and the dynamism with which users can specify executable commands directly as tweets. There is tremendous potential to improve and rethink the relationships between different apps: synergy paves the way for new, unexplored experiences in the consumer web. Some of those experiences that deserve further exploration are presented next.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5.2">Future Use-cases</head><p>Facebook and Twitter have popularized the idea of signing up for web services using their respective login credentials. Supporting Facebook and Twitter authentication on third party applications expands the reach of their networks and for the benefit of third party properties, simplifies the authentication process and increases engagement. One of the ways in which Aperator increases the accessibility of third party web applications might very well be in authentication. Instead of signing up with Facebook or Twitter, users could simply tweet: @aper-ator install APPNAME. Once again, the analogy of the command line serves inspiration well. For just as "yum install emacs" provides a simple model for package installation on the command line, "@aperator install APP-NAME" could provide an easier way for users to register on third party web applications as Aperator funnels authentication tokens in a pipeline from Facebook or Twitter to another application.</p><p>Right now, the Twitter presence of web applications amounts to little more than a stream of updates and announcements. But through Aperator, applications can begin to have actionable presences inside of a network. The suggestion, begged by the use-case, may be that Twitter could function in parallel to HTTP as an application medium. There is some truth, then, to the words of Paul Graham, the founder of Y Combinator, who wrote: "Successful new protocols are rare... So any new protocol is a big deal. Each one of those protocols has spawned many successful companies. Twitter will too."</p><p>Following such thoughts, a package installer for web applications is just the tip of the iceberg when it comes to new apps that can be developed on the Aperator platform.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="6">Conclusions</head><p>This work introduces a new idea and an initial system prototype for a service, called Aperator, which supports application-specific actionable commands through tweets. Aperator facilitates granular cross-network posting and increases user convenience, thus opening up avenues for greater social utility and interactivity across web services. We review several benefits of this approach for both end-users and third-party applications, provide an architecture for enabling such services, report on initial performance results, and outline several potentially interesting extensions of this system.</p></div><figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_0"><head>Figure 1 :</head><label>1</label><figDesc>Figure 1: Partial interactivity among different social network applications</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_1"><head>Figure 3 :</head><label>3</label><figDesc>Figure 3: Signup screen with a list of supported web apps</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_2"><head></head><label></label><figDesc>curl http://search.twitter.com/search.json?q=\% 40aperator&amp;include_entities=true</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_5"><head>Figure 5 :Figure 6 :</head><label>56</label><figDesc>Figure 5: Cumulative growth in tweets sent to Aperator</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_2" validated="false"><head>Table 1 :</head><label>1</label><figDesc></figDesc><table>Command Execution Time Statistics 
Application 
Mean (secs) Std. Dev. (secs) 
Delicious 
50.25 
20.58 
Read It Later 
43.4 
21.72 
Facebook 
44.29 
24.02 
Foursquare 
36.2 
10.98 

</table></figure>
		</body>
		<back>
			<div type="references">

				<listBibl>

<biblStruct xml:id="b0">
	<monogr>
		<title/>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Alexa</forename></persName>
		</author>
		<ptr target="http://www.alexa.com" />
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b1">
	<monogr>
		<title/>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Aperator</surname></persName>
		</author>
		<ptr target="http://www.aperator.com" />
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b2">
	<monogr>
		<title/>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Aperator</forename><surname>Demo</surname></persName>
		</author>
		<ptr target="http://www.youtube.com/watch?v=tBzqShO29Xw" />
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b3">
	<monogr>
		<title/>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Twitter</surname></persName>
		</author>
		<ptr target="http://www.twitter.com" />
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b4">
	<monogr>
		<title level="m" type="main">Twitter Clamps Down On Third Party Clients</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Brown</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2011-03-14" />
		</imprint>
	</monogr>
	<note>Wired [online</note>
</biblStruct>

<biblStruct xml:id="b5">
	<monogr>
		<title level="m" type="main">Validation of Dunbar&apos;s number in Twitter conversations</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Bruno</forename><surname>Goncalves</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Nicola</forename><surname>Perra</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><forename type="middle">V</forename></persName>
		</author>
		<idno type="arXiv">arXiv:1105.5170v2</idno>
		<imprint>
			<date type="published" when="2011-05" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b6">
	<analytic>
		<title level="a" type="main">A few chirps about twitter</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Krishnamurthy</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">B</forename><surname>Gill</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><surname>And</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Arlitt</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the first workshop on Online social networks</title>
		<meeting>the first workshop on Online social networks</meeting>
		<imprint>
			<date type="published" when="2008" />
			<biblScope unit="page" from="19" to="24" />
		</imprint>
	</monogr>
	<note>WOSN &apos;08</note>
</biblStruct>

<biblStruct xml:id="b7">
	<analytic>
		<title level="a" type="main">What is Twitter, a social network or a news media?</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Kwak</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">H</forename><surname>Lee</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><surname>Park</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">H</forename><surname>And</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Moon</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. of the 19th int&apos;l conference on World wide web</title>
		<meeting>of the 19th int&apos;l conference on World wide web</meeting>
		<imprint>
			<publisher>WWW</publisher>
			<date type="published" when="2010" />
			<biblScope unit="page" from="591" to="600" />
		</imprint>
	</monogr>
</biblStruct>

				</listBibl>
			</div>
		</back>
	</text>
</TEI>
