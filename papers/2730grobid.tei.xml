<?xml version="1.0" encoding="UTF-8"?>
<TEI xmlns="http://www.tei-c.org/ns/1.0" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
xsi:schemaLocation="http://www.tei-c.org/ns/1.0 /Users/atharsefid/Desktop/grobid-0.5.3/grobid-home/schemas/xsd/Grobid.xsd"
 xmlns:xlink="http://www.w3.org/1999/xlink">
	<teiHeader xml:lang="en">
		<encodingDesc>
			<appInfo>
				<application version="0.5.3" ident="GROBID" when="2020-09-29T02:51+0000">
					<ref target="https://github.com/kermitt2/grobid">GROBID - A machine learning software for extracting information from scholarly documents</ref>
				</application>
			</appInfo>
		</encodingDesc>
		<fileDesc>
			<titleStmt>
				<title level="a" type="main">Co-evolving Tracing and Fault Injection with Box of Pain</title>
			</titleStmt>
			<publicationStmt>
				<publisher/>
				<availability status="unknown"><licence/></availability>
			</publicationStmt>
			<sourceDesc>
				<biblStruct>
					<analytic>
						<author role="corresp">
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Daniel</forename><surname>Bittman</surname></persName>
							<email>dbittman@ucsc.edu</email>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Santa</forename><surname>Cruz</surname></persName>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Ethan</forename><forename type="middle">L</forename><surname>Miller</surname></persName>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Santa</forename><surname>Cruz</surname></persName>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Peter</forename><forename type="middle">Alvaro</forename><surname>Uc</surname></persName>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Santa</forename><surname>Cruz</surname></persName>
						</author>
						<title level="a" type="main">Co-evolving Tracing and Fault Injection with Box of Pain</title>
					</analytic>
					<monogr>
						<imprint>
							<date/>
						</imprint>
					</monogr>
				</biblStruct>
			</sourceDesc>
		</fileDesc>
		<profileDesc>
			<abstract>
				<p>Distributed systems are hard to reason about largely because of uncertainty about what may go wrong in a particular execution, and about whether the system will mitigate those faults. Tools that perturb executions can help test whether a system is robust to faults, while tools that observe executions can help better understand their system-wide effects. We present Box of Pain, a tracer and fault injector for unmodified distributed systems that addresses both concerns by interpos-ing at the system call level and dynamically reconstructing the partial order of communication events based on causal relationships. Box of Pain&apos;s lightweight approach to tracing and focus on simulating the effects of partial failures on communication rather than the failures themselves sets it apart from other tracing and fault injection systems. We present evidence of the promise of Box of Pain and its approach to lightweight observation and perturbation of distributed systems.</p>
			</abstract>
		</profileDesc>
	</teiHeader>
	<text xml:lang="en">
		<body>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="1">Introduction</head><p>Distributed systems are all around us and yet are riddled with bugs. This should make us uneasy even if it comes as no surprise. The space of possible executions of a distributed system is exponential in the number of communicating processes and in the number of messages, making it difficult to build confidence that distributed programs of even modest complexity are free from errors. Tools that require painstaking instrumentation and fine-grained control of runtime systems, including both bug finding approaches such as software model checking <ref type="bibr" target="#b10">[12,</ref><ref type="bibr" target="#b16">18]</ref> and debugging approaches such as deterministic replay <ref type="bibr" target="#b2">[4,</ref><ref type="bibr" target="#b7">9]</ref>, have made few inroads into distributed systems software quality methodologies. Instead, the field is dominated by incomplete approaches based on testing, which can be effective at finding bugs but cannot rule them out.</p><p>Testing can be extremely effective at finding logic bugs that can be reproduced via replaying local inputs. However, some of the most pernicious bugs in distributed programs involve mistakes in how programs handle partial failure of remote components. These "time-of-fault" bugs <ref type="bibr" target="#b14">[16]</ref> are in general only triggered by rare events such as machine crashes and network partitions, and consequently can lie dormant in otherwise well-tested codebases. To address this issue, the testing community has shown increasing interest in lightweight techniques for observing and perturbing executions during integration tests, such as call graph tracing <ref type="bibr" target="#b21">[23]</ref> and targeted <ref type="bibr" target="#b5">[7]</ref> or random <ref type="bibr" target="#b6">[8]</ref> fault injection. These techniques make it possible to better cover the space of possible executions (e.g., by driving the system into rare cases triggered by events like machine crashes and network partitions) and better understand such events' system-wide effects. Better still, they impose only modest overheads, allowing observability and resiliency to be built up in a pay-as-you-go fashion.</p><p>Unfortunately, these ostensibly lightweight techniques often require instrumentation at the application layer (e.g., propagating annotations to downstream calls or identifying fault interposition points), a process that must be repeated for each application. Existing tracing and fault injection techniques tend to be coarse-grained, leading to low-fidelity signals (e.g. call graphs whose nodes represent service endpoints) and high-overhead experiments (e.g. modeling crash faults by rebooting servers). Moreover, since tracing and fault injection have evolved separately, there is often an impedance mismatch between them. For example, a fine-grained fault injection system is of little use if the granularity of the tracing system is too coarse to interpret the effects of the experiments.</p><p>Our philosophy on tracing and fault-injection is three-fold. First, faults such as machine crashes and network partitions will always manifest themselves at remote nodes as the absence of a message. Hence, all time-of-fault bugs (which by definition are triggered by these fault events), if they exist, can be identified by removing communication edges in an execution graph. Second, we believe (and will provide evidence) that although the space of possible executions of a distributed system is exponentially large in the number of events, in practice some executions are significantly more likely than others; thus, even if an understanding of a system is based on witnessing schedules of executions, we can bound the number of schedules we are likely to see. Third, tracing and fault-injection should co-evolve-tracing is necessary to inform and perform targeted fault-injection, which can only perturb events in a language that is defined by the tracing infrastructure itself; thus, economy of mechanism outweighs separation of concerns.</p><p>We are building a tracing and fault injection system, Box of Pain, which embodies our philosophy. Box of Pain witnesses a schedule of a distributed system execution by tracing at the system-call level and uses those system calls to reconstruct the inter-machine communication graph of the system. We argue that this interposition point is not only effective at faithfully capturing the communication pattern between threads (which constitutes an adequate fault surface), but that it also manages the trade-off between generality, ease of use (as systems need not be instrumented manually), and understanding of application-level semantics. We discuss how Box of Pain is able to effectively trace and inject faults in a distributed system because, while the space of possible executions is large, we often need only a small representation of the whole system to find bugs <ref type="bibr" target="#b12">[14,</ref><ref type="bibr" target="#b23">25]</ref>, but also because these possible different execution schedules will often be consistent with the same partial order, and so are effectively the "same" execution, moving a theoretically intractable problem into the practical realm.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2">Background</head><p>Unlike traditional model checkers that identify bugs in specifications, software model checkers (SMCs) <ref type="bibr" target="#b10">[12,</ref><ref type="bibr" target="#b16">18]</ref> systematically explore the state space of actual implementations via fine-grained control of a program's execution schedule, and backtracking as necessary. When a bug is identified in such a concurrent system, it is often challenging to reproduce when debugging. Deterministic replay systems <ref type="bibr" target="#b2">[4,</ref><ref type="bibr" target="#b7">9]</ref> make this possible by recording traces that capture non-deterministic inputs or events and then, much like SMCs, controlling the runtime schedule during replay to ensure that the same events occur in the same order. Like these "heavyweight" techniques, we want to work with arbitrary, unmodified systems by instrumenting relatively low in the stack. However, fine-grained scheduling is costly to run and implement, and is overkill for the tasks of distributed tracing and fault injection.</p><p>Lightweight approaches to observing distributed executions based on call graph tracing <ref type="bibr" target="#b1">[3,</ref><ref type="bibr" target="#b3">5,</ref><ref type="bibr" target="#b20">22]</ref> have gained a great deal of popularity in recent years, and a number of businesses are devoted to the collection and analysis of call graph traces <ref type="bibr">[1,</ref><ref type="bibr" target="#b0">2]</ref>. These observability infrastructures, based on Google's Dapper <ref type="bibr" target="#b21">[23]</ref> require modifications to application code in order to propagate trace annotations (unique identifiers and other adornments) that are attached to incoming service requests to downstream service calls. This boilerplate, while relatively straightforward to write, imposes a significant burden on the application programmer and must be repeated for each application. While we wish to provide value without requiring work on the part of the application programmer, we would nevertheless like to be able to reconstruct this applicationlevel signal from instrumentation lower in the stack.</p><p>The distributed resiliency community has long advocated combining testing methodologies with fault injection <ref type="bibr" target="#b6">[8,</ref><ref type="bibr" target="#b9">11,</ref><ref type="bibr" target="#b11">13]</ref> to increase confidence that ostensibly fault-tolerant programs operate correctly under the (rare in practice) fault events that they were designed to mitigate. Although as discussed fault injection infrastructures are often used in concert with tracing, they have tended to develop as separate concerns. A stated goal of Box of Pain is to co-evolve these concerns.</p><p>The data management community has used data lineage <ref type="bibr" target="#b8">[10,</ref><ref type="bibr" target="#b13">15,</ref><ref type="bibr" target="#b15">17,</ref><ref type="bibr" target="#b18">20,</ref><ref type="bibr" target="#b22">24]</ref> to explain query answers in much the same way that the resilience community uses call graph tracing to explain distributed executions. Lineage-driven fault injection <ref type="bibr" target="#b3">[5,</ref><ref type="bibr" target="#b4">6]</ref>, a bug-finding technique that we will discuss further in Section 6, directly uses explanations of system outcomes (formal data lineage or execution traces) to automate fault injection experiments. Box of Pain was designed to integrate tightly with such a bug finder, providing it with traces as performing the fault injection experiments that it suggests.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3">A Partial Argument of a Partial Order</head><p>Tracing infrastructure often involves a trade-off between the complexity of kernel-level tracing and the overhead of application-level instrumentation. We can avoid both by tracing at the system-call level while retaining sufficient signal for fault injection in systems that use system-calls for internode communication. Our goal is tracing in the service of fault injection; thus the focus of our tracer needs to be on reconstructing the communication graph, as the bugs we are interested in manifest as perturbations in that graph.</p><p>One significant consequence of tracing system-calls is that the tracer will see a schedule of events with little ordering among them. While each observed event on a per-thread basis is ordered with respect to other events in that thread, there are no immediate constraints on event ordering between threads. Although the tracer sees a sequentially consistent execution consistent with the true partial order of events, it cannot determine a richer partial order beyond this independent collection of total orders from witnessing schedules alone.</p><p>To understand the communication structure of a program as well as to inject faults, however, more than just this weak schedule is needed. Fortunately, since we know the semantics of the system-calls, we can use their meaning to glean more information from them than we could if we strictly observed them in a particular schedule. For example, a given (successful) call to accept cannot return until a paired call to connect is made, or a (successful) call to read on a socket cannot return until a causally-paired call to write is made.</p><p>The ordering constraints available to us from observing socket calls is exactly the communication pattern of the system. We can use that communication pattern to derive happens-before, which characterizes the constraints between events of different threads, thus enabling fine-grained, targeted fault injection that can specify "when" in a distributed execution to inject faults relative to events and not wall-clock time. Furthermore, this pattern can be derived during execution as opposed to afterwards, a requirement of our targeted fault injection goals. We describe how this is done in Section 4.2.</p><p>Reconstructing a causal trace of system execution by observing system-calls has inherent weaknesses. For one thing, it is possible to overlook control and data flow transfers that make no kernel crossings, including asynchronous dispatch and indirection via shared memory, and hence obtain an incomplete picture of the happens-before graph. Worse still, due to inherent timing non-determinism in message delivery and thread scheduling a distributed execution could in principle produce a different trace for every run.</p><p>We are not concerned about these causal side-channels leading to "missing edges" in the happens-before graph. Recall that Box of Pain's tracing capability is intended to be used in concert with fault injection in order to identify bugs in distributed applications. Hence our tracing surface need not be finer-grained than our fault injection capabilities-after all, what is the use of a richer signal if we cannot act on it? If control or data crosses a failure boundary (i.e., a node boundary), a system-call will witness it; if not, it does not correspond to a fault injection opportunity.</p><p>We are also optimistic that the multiplicity of possible runs will not be a problem in practice. As we describe in Section 4, Box of Pain does not record or follow the total order of system-calls witnessed in a particular execution, but rather attempts to infer the happens-before partial order of which the total order is an extension. Hence many concrete executions collapse into a single abstract causal graph. Of course, in principle there may still be exponentially many of these abstract graphs, each corresponding to different communication patterns (induced by, e.g., delay). Nevertheless it is our hypothesis (for which we provide evidence in Section 5) that far from being equally likely, the frequency of these "truly different" executions follows a power law distribution. This makes it possible to cover most of the executions by chopping off the tail wherever resource or time limitations demand. While these two concerns may limit the tractability of Box of Pain as a general purpose tracer, we adopt a pragmatic approach based on our goal of identifying time-of-fault bugs in distributed systems. Instead of focusing on the (myriad) possible causes that could trigger such a bug, we focus on simulating the (few) observable effects of these faults on communication between nodes in different failure domains.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4">Box of Pain</head><p>Box of Pain has three components: a tracer, a tracker, and an injector. These components all operate together entirely in userspace, watching a distributed execution unfold. When run in a loop, Box of Pain will determine if the execution has been seen before, allowing it to build a collection of traces that together characterize the relevant behaviors of the system. Optionally, Box of Pain can be run with a failure specification that indicates precisely which events to interrupt or modify as part of fault injection (which we discuss in Section 4.3). Box of Pain is designed to run in a testing environment for a system, not in a production environment.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.1">Tracing</head><p>Box of Pain operates primarily through the use of ptrace, a system-call that allows a process to perform introspection on another process <ref type="bibr" target="#b17">[19]</ref>. Whenever a traced thread (tracee) issues a system call, the tracee is stopped and Box of Pain wakes up. This occurs both for system-call entry and exit, each referred to as an event, and Box of Pain handles each event in full before signaling the thread to resume. Each event that Box of Pain handles is appended to a per-thread "event log", and is thus in the order that they occur for that thread. An entry-to-syscall event is indicated like read↓, and a returnfrom-syscall event is indicated like read↑.</p><p>The ultimate goal of tracing is to construct a partial order of events out of the schedule that Box of Pain observes. Given just a per-thread event log, we have a partial order (a collection of total orders, one for each thread), but this partial order contains no constraints on events among threads. Since the communication pattern between two threads and the constraints on ordering are equivalent in our model, we can leverage the information available in a TCP connection to provide additional edges in the partial order for a given run.</p><p>When a socket is created, it is tracked in a per-process lookup table (in a way that keeps track of changing file descriptors). During a bind↓ event, Box of Pain reads the process's memory to determine the address and port. After the subsequent accept↑ event, a new socket is tracked (consistent with the semantics of accept). Since it is also tracing the connect-ing thread, it will see the resultant connect↓ and connect↑ events, the first of which provides enough information for Box of Pain to decide which socket it is connecting to, but not necessarily which socket returned by accept the connect-ing thread is actually associated with.</p><p>To get this information, Box of Pain issues system-calls on behalf of the tracees while handling the connect↑ and accept↑ events. It does this by overwriting the registers of the tracee to point to a location known to contain a syscall instruction (determined during the first event handled perprocess), and setting the registers as required for the requested system-call. In this case, the system-calls are getsockname and getpeername, which provide sufficient information to determine the end-points of the TCP stream. The resulting partial order is shown in <ref type="figure" target="#fig_0">Figure 1</ref>.</p><p>For data transfer, we can use the tracked sockets to watch as TCP traffic is communicated between end-points. When handling a write↑, Box of Pain tracks the sequence number of the stream and records to which system-call a particular range of data belongs. When handling a read↑, Box of Pain looks through the recorded write system-calls to decide which writes contributed to the data returned by the read, thus deriving an order based on the communication pattern of data transfer. Note that one read can get data from multiple writes and one write can contribute to multiple reads, or it can be a one-to-one relationship.</p><p>While many of these system-calls have variants (send instead of write, or accept4 instead of accept), the variants are similar enough that they need little additional processing. One exception is the calls sendto and recvfrom, however these calls are infrequently used for TCP communication.</p><p>Finally, while Box of Pain traces a distributed system as a set of threads in processes on a single node, we see it as merely an engineering effort to extend the tracing infrastructure to multiple nodes. A single tracer process can run on each node, forwarding event information to a single, unified tracker node that processes schedules and computes partial orders.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.2">Tracking</head><p>The tracing infrastructure builds a trace of a distributed system that consists of a per-thread event log, where each event can have multiple parents (as derived by the communication pattern). The trace can be serialized and viewed as a PDF, showing the communication pattern. However, executions may differ between runs, and if we want to be able to get an idea of the "true" communication pattern between nodes in a system, we'll need to observe many of the possible schedules.</p><p>Box of Pain facilitates this by allowing previously collected traces to be reloaded into memory before tracing a new run. During execution, Box of Pain tries to track each loaded run by comparing the event that just occurred in the new trace to the "next" event in each loaded run. "Next" here means, "for this thread, what was the next witnessed event". For example, if thread T records events e followed by e , then a run is said to be "followed" if thread T is witnessed executing those events in the same order, even if another thread executes some other event in between e and e . When a particular run cannot be followed, Box of Pain stops tracking it. If all loaded runs are not followed, Box of Pain finishes tracing the execution and serializes the trace as before. If instead, at the end of the execution, a run is followed, Box of Pain does not serialize the current trace since it is equivalent to the followed run.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.3">Fault Injection</head><p>When running Box of Pain on a distributed system, we can provide a fault specification that describes which events to perturb via fault injection. Box of Pain directly simulates (possibly infinite) delay and explicit errors. With the tracing infrastructure that Box of Pain provides, and the corresponding derivation of a partial order that reflects the communication structure of the system, faults in Box of Pain can be thought of in terms of specifying a particular event. Bug-finding software can then consider faults in terms of "after thread T does x but before y", improving how targeted faults can be.</p><p>Delay is simulated by simply "pausing" a process and resuming it after an amount of time (or delaying it indefinitely). This kind of fault is the simplest to inject, as all that is required for the fault specification is an event identification. If a followed run contains such a specification, Box of Pain will pause the process when it observes it executing that event.</p><p>Explicit error manifests more directly as Box of Pain changing the return value (or parameters) during a system-call. For example, interrupting a connection between process A and B is done by changing the socket argument to connect to −1, thus ensuring that the connection fails, while changing the return value to a specified error code (such as -ECONNREFUSED).</p><p>We can map "real" events into our simulation space via a combination of manifesting explicit errors, pausing processes, or silently dropping communications. A lengthy garbagecollection pause can be emulated by pausing a process for some time, while a machine crash can be emulated by either stopping a process indefinitely, restarting the process, or dropping all messages after a point in the partial order. Network partitions are similar; we can observe the destinations of messages and drop them (either silently or via an error) if we simulate them crossing a network partition. Later, healing the network partition can manifest as removing those fault rules.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5">Preliminary Experiments</head><p>We ran the Redis key/value store <ref type="bibr" target="#b19">[21]</ref> under Box of Pain, and counted how many unique runs were generated varying the number of commands performed and the number of clients. We then re-ran our two-client scenario, but simulated network congestion by randomly forcing writes to act as if there were full TCP buffers (manually reducing the count argument of the write system-call to be less than half its requested value). <ref type="figure" target="#fig_1">Figures 2 and 3</ref> show the distribution of runs for executions varying the parameters as described over 2000 iterations. The graphs show the runs that make up 99% of the resulting schedules. Each client executed a simple GET request for all experiments except the experiment where we increased the  number of commands executed by each client (2cl-mc), in which case each client executed four GET and SET commands. In all cases, the distribution rapidly drops after a high initial value, indicating that the majority of runs manifests as one of a few schedules, and while there is a long tail, we can understand much of the system behavior without an intractable number of schedules. Increasing the number of commands issued by each client did not dramatically impact the width of the distribution, indicating that bugs arising from complex series of interactions are tractable to find. While the results in <ref type="figure" target="#fig_2">Figure 3</ref> have longer tails, some runs are still more likely than others and 99% of runs fall within approximately 300 already known schedules after 2000 iterations (which took well under an hour to generate).</p><p>Most of the non-determinism in the many-clients case comes from clients racing to connect. An optimization we plan to make is to derive an equivalence between clients in some cases, thereby collapsing multiple equivalent runs that differ by client connect order into a single run.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="6">The Future for Box of Pain</head><p>As excited as we are to introduce Box of Pain and to argue its potential, we must admit that we have barely begun using it. In this section we describe what comes next, from first steps to a (we believe) far-reaching vision.</p><p>Box of Pain combines two concerns-tracing and fault injection-that are typically considered separate. Before tackling our larger ambitions, we plan to demonstrate its efficacy for both independent tasks. It remains to be shown that it is possible to extrapolate from our low-level traces something akin to the application-level signal provided by call graph tracing. Tracing a large-scale microservice-based application with Box of Pain and showing that the call graphs (e.g., obtained using Zipkin) could be inferred from our traces would provide evidence that technologies like Box of Pain could obviate the need for painstaking application-level instrumentation in some cases. Similarly, we will compare Box of Pain with the state-of-the-art in distributed fault injection. While most of these approaches focus on triggering <ref type="bibr" target="#b6">[8]</ref> or simulating <ref type="bibr" target="#b5">[7]</ref> fault events such as machine crashes, I/O errors, memory pressure and corruption, system load, and so on, our approach focuses instead on simulating the observable effects of such faults from the perspective of other processes with which they communicate. We expect that this much smaller fault surface will be sufficient to uncover bugs in fault tolerance logic and much more efficient at doing so.</p><p>From the beginning our intention has been to use Box of Pain in a tight loop with a trace-driven bug finder such as LDFI. To date, LDFI has shown promise in verifying protocols <ref type="bibr" target="#b4">[6]</ref> as well as in finding bugs in large-scale, microservicebased applications <ref type="bibr" target="#b3">[5]</ref>. In the former, programs must be specified in a custom relational logic language (similar to solvers such as Alloy <ref type="bibr" target="#b12">[14]</ref>), limiting applicability to real-world systems. In the latter, the systems must already be instrumented to support call graph tracing and fine-grained fault injection. By addressing both concerns at the system level, Box of Pain promises to open up the LDFI approach to arbitrary, uninstrumented systems, including distributed data management systems, configuration services, and message queues.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="7">Conclusion</head><p>In our field there are a great many things that are theoretically possible but hopelessly impractical-so much so that the idea is a cliche. However, it is a rare day on which we learn that something which is not possible in theory is not merely possible, but practical. Box of Pain's design for tracing and tracking is predicated on the idea that fault injection naturally fits with tracing; after all, if you want targeted fault injection, what better place to do it than in the tracer itself? The coevolution of these technologies will open a wealth of possibilities that we can make use of to further close the gap between the bugs we can easily find and the bugs we could find if only we had sufficient tracing, a bug-finder, and infrastructure support-all without the need for tracing forethought or huge engineering efforts. We have initial evidence that not only is it possible to trace a distributed system at the systemcall level and recover happens-before such that we can decide and target faults to inject, but we can do this without the nondeterminism becoming intractable. We are excited to keep exploring this work, and evaluating more complex systems, looking for bugs, and further evaluating our hypothesis.</p><p>Box of Pain and the philosophy that underlies it hinge on three design decisions, all of them potentially controversial. We want to draw attention to these decisions as well as to argue that they are all the sort of "hot takes" that make for productive discussion in workshops such as HotCloud.</p><p>First, our shift in focus from modeling the phenomena of partial failure at faulty nodes to modeling merely the observable effects of these faults at other nodes with which they communicate makes Box of Pain look very different from other fault injectors. The advantages are obvious: a much smaller experiment surface means that we can cover the space of possible experiments much more efficiently. But it remains to be rigorously demonstrated that this approach will uncover all of the bugs that classic fault injection would! Second, we have presented some compelling evidence supporting our (arguable!) hypothesis that of the combinatorially many possible executions of a distributed system, the likelihood of executions producing different partial orders of system-calls fall off steeply. We believe it to be true, and are excited about the idea of finding more ways to provide empirical support that the space of abstract Box of Pain traces indeed follow a power law distribution. If true, it has far-reaching practical consequences. Searching all executions is never going to be tractable, but we can cut off the tail wherever our resource limits require and be secure that nearly all of the system's executions have been considered. It is not lost on us that all of the experiments in this paper simulate a distributed system on a single node.</p><p>Although the number of runs needed does scale with system complexity, the drop-off in run likelihood combined with our lightweight approach moves the problem into the potentially tractable realm. We may also be able to improve our algorithm for comparing runs, which has the potential to further reduce runs (we saw this already once before during development). Finally, some system designers will strongly disagree with our argument that tracing and fault injection infrastructure should co-evolve in the first place. Sure, it may seem like a good idea to couple these concerns now, but later we may regret not separating them cleanly. We strongly believe-and are prepared to debate this matter in person-that the requirements of distributed tracing and fault injection are so dependent on one another that these constraints will never be problematic. Any evolution of functionality in one that is not matched in the other is a lost opportunity.</p><p>These design decisions could be misguided. We like to think, however, that the usefulness of Box of Pain as an artifact does not depend on all of our assumptions being correct.</p></div><figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_0"><head>Figure 1 :</head><label>1</label><figDesc>Figure 1: The happens-before relationship of accept and connect system calls that Box of Pain derives. The colors indicate different threads. The accept↑ cannot occur before connect↓ occurs, because the latter causes the former.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_1"><head>Figure 2 :</head><label>2</label><figDesc>Figure 2: Cumulative distribution of runs for one client (1cl), two clients (2cl), and many commands (2cl-mc).</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_2"><head>Figure 3 :</head><label>3</label><figDesc>Figure 3: Cumulative distribution of runs for two clients with full-TCP-buffer simulation (2cl-wt) and four clients (4cl).</figDesc></figure>
		</body>
		<back>

			<div type="acknowledgement">
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="9">Acknowledgements</head><p>We would like to thank Kyle Kingsbury, Ashutosh Raina, Sabrina Tsui and Heiner Litz for their insightful feedback on early drafts of this paper, as well as the anonymous reviewers for their time and helpful comments and criticism. This work was supported by the NSF grants #1652368, #IIP-1266400, the industrial partners of the Center for Research in Storage Systems, and gifts from eBay, Facebook and Huawei.</p></div>
			</div>

			<div type="references">

				<listBibl>

<biblStruct xml:id="b0">
	<monogr>
		<title/>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Lightstep</surname></persName>
		</author>
		<idno>2019-03-01</idno>
		<ptr target="http://lightstep.com/" />
		<imprint>
			<date type="published" when="2016" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b1">
	<monogr>
				<idno>2019-03-01</idno>
		<ptr target="http://opentracing.io/" />
		<title level="m">The OpenTracing Project</title>
		<imprint>
			<date type="published" when="2016" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b2">
	<analytic>
		<title level="a" type="main">ODR: Outputdeterministic replay for multicore debugging</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Gautam</forename><surname>Altekar</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Ion</forename><surname>Stoica</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the ACM SIGOPS 22Nd Symposium on Operating Systems Principles (SOSP &apos;09)</title>
		<meeting>the ACM SIGOPS 22Nd Symposium on Operating Systems Principles (SOSP &apos;09)</meeting>
		<imprint>
			<publisher>ACM</publisher>
			<date type="published" when="2009" />
			<biblScope unit="page" from="193" to="206" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b3">
	<monogr>
		<title level="m" type="main">Automating Failure Testing Research at Internet Scale</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Peter</forename><surname>Alvaro</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Kolton</forename><surname>Andrus</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Ali</forename><surname>Basiri</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Lorin</forename><surname>Hochstein</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Casey</forename><surname>Rosenthal</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Chris</forename><surname>Sanden</surname></persName>
		</author>
		<imprint/>
	</monogr>
	<note>In submission</note>
</biblStruct>

<biblStruct xml:id="b4">
	<analytic>
		<title level="a" type="main">Lineage-driven fault injection</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Peter</forename><surname>Alvaro</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Joshua</forename><surname>Rosen</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Joseph M</forename><surname>Hellerstein</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 2015 ACM SIGMOD International Conference on Management of Data, SIGMOD &apos;15</title>
		<meeting>the 2015 ACM SIGMOD International Conference on Management of Data, SIGMOD &apos;15</meeting>
		<imprint>
			<publisher>ACM</publisher>
			<date type="published" when="2015" />
			<biblScope unit="page" from="331" to="346" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b5">
	<monogr>
				<idno>Ac- cessed 2019-03-01</idno>
		<ptr target="http://techblog.netflix.com/2014/10/fit-failure-injection-testing.html" />
		<title level="m">Netflix Technical Blog. FIT : Failure Injection Testing</title>
		<imprint>
			<date type="published" when="2014" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b6">
	<monogr>
				<idno>2019-03-01</idno>
		<ptr target="http://techblog.netflix.com/2011/07/netflix-simian-army.html" />
		<title level="m">Netflix Technology Blog. The Netflix Simian Army</title>
		<imprint>
			<date type="published" when="2011-07" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b7">
	<analytic>
		<title level="a" type="main">Deterministic replay: A survey</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Yunji</forename><surname>Chen</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Shijin</forename><surname>Zhang</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Qi</forename><surname>Guo</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Ling</forename><surname>Li</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Ruiyang</forename><surname>Wu</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Tianshi</forename><surname>Chen</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">ACM Computing Surveys</title>
		<imprint>
			<biblScope unit="volume">48</biblScope>
			<biblScope unit="issue">2</biblScope>
			<biblScope unit="page">47</biblScope>
			<date type="published" when="2015-09" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b8">
	<monogr>
				<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">James</forename><surname>Cheney</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Laura</forename><surname>Chiticariu</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Wang-Chiew</forename><surname>Tan</surname></persName>
		</author>
		<title level="m">Provenance in Databases: Why, How, and Where. Foundations and Trends in Databases</title>
		<imprint>
			<date type="published" when="2009-04" />
			<biblScope unit="volume">1</biblScope>
			<biblScope unit="page" from="379" to="474" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b9">
	<analytic>
		<title level="a" type="main">OR-CHESTRA: A Fault Injection Environment for Distributed Systems</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Scott</forename><surname>Dawson</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Farnam</forename><surname>Jahanian</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Todd</forename><surname>Mitton</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the International Symposium on Fault-Tolerant Computing (FTCS &apos;96)</title>
		<meeting>the International Symposium on Fault-Tolerant Computing (FTCS &apos;96)</meeting>
		<imprint>
			<date type="published" when="1996" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b10">
	<analytic>
		<title level="a" type="main">Model Checking for Programming Languages Using VeriSoft</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Patrice</forename><surname>Godefroid</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of The 24th ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages (POPL &apos;97)</title>
		<meeting>The 24th ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages (POPL &apos;97)</meeting>
		<imprint>
			<date type="published" when="1997" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b11">
	<analytic>
		<title level="a" type="main">FATE and DESTINI: A framework for cloud recovery testing</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Haryadi</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Thanh</forename><surname>Gunawi</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Pallavi</forename><surname>Do</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Peter</forename><surname>Joshi</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Joseph</forename><forename type="middle">M</forename><surname>Alvaro</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Andrea</forename><forename type="middle">C</forename><surname>Hellerstein</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Arpaci-Dusseau</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">H</forename><surname>Remzi</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Koushik</forename><surname>Arpaci-Dusseau</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Dhruba</forename><surname>Sen</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Borthakur</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 8th USENIX Conference on Networked Systems Design and Implementation (NSDI &apos;11)</title>
		<meeting>the 8th USENIX Conference on Networked Systems Design and Implementation (NSDI &apos;11)</meeting>
		<imprint>
			<date type="published" when="2011" />
			<biblScope unit="page" from="238" to="252" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b12">
	<monogr>
		<title level="m" type="main">Software Abstractions: Logic, Language, and Analysis</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Daniel</forename><surname>Jackson</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2006" />
			<publisher>The MIT Press</publisher>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b13">
	<analytic>
		<title level="a" type="main">FirstOrder Provenance Games</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Sven</forename><surname>Köhler</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Bertram</forename><surname>Ludäscher</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Daniel</forename><surname>Zinn</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Search of Elegance in the Theory and Practice of Computation</title>
		<imprint>
			<publisher>Springer</publisher>
			<date type="published" when="2013" />
			<biblScope unit="volume">8000</biblScope>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b14">
	<monogr>
				<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Haopeng</forename><surname>Liu</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Xu</forename><surname>Wang</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Guangpu</forename><surname>Li</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Shan</forename><surname>Lu</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Feng</forename><surname>Ye</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Chen</forename><surname>Tian</surname></persName>
		</author>
		<title level="m">FCatch: Automatically Detecting Time-of-fault Bugs in Cloud Systems. ASPLOS &apos;18</title>
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b15">
	<analytic>
		<title level="a" type="main">Tiresias: The Database Oracle for How-to Queries</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Alexandra</forename><surname>Meliou</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Dan</forename><surname>Suciu</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 2012 ACM SIGMOD International Conference on Management of Data, SIGMOD &apos;12</title>
		<meeting>the 2012 ACM SIGMOD International Conference on Management of Data, SIGMOD &apos;12</meeting>
		<imprint>
			<date type="published" when="2012" />
			<biblScope unit="page" from="337" to="348" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b16">
	<analytic>
		<title level="a" type="main">CMC: A Pragmatic Approach to Model Checking Real Code</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Madanlal</forename><surname>Musuvathi</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Y</forename><forename type="middle">W</forename><surname>David</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Andy</forename><surname>Park</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Dawson</forename><forename type="middle">R</forename><surname>Chou</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">David</forename><forename type="middle">L</forename><surname>Engler</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Dill</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">SIGOPS Operating Systems Review</title>
		<imprint>
			<biblScope unit="volume">36</biblScope>
			<biblScope unit="issue">SI</biblScope>
			<biblScope unit="page" from="75" to="88" />
			<date type="published" when="2002-12" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b17">
	<monogr>
		<title level="m" type="main">The Linux Man-pages Project. ptrace(2). Linux Programmers Manual</title>
		<imprint>
			<date type="published" when="2018" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b18">
	<analytic>
		<title level="a" type="main">Towards Constraint Provenance Games</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Sean</forename><surname>Riddle</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Sven</forename><surname>Köhler</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Bertram</forename><surname>Ludäscher</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">6th USENIX Workshop on the Theory and Practice of Provenance</title>
		<imprint/>
	</monogr>
	<note>TaPP &apos;14</note>
</biblStruct>

<biblStruct xml:id="b19">
	<monogr>
		<title/>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Salvatore</forename><surname>Sanfilippo</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Redis</surname></persName>
		</author>
		<idno>2019-03-01</idno>
		<ptr target="https://redis.io" />
		<imprint>
			<date type="published" when="2019" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b20">
	<monogr>
		<title level="m" type="main">Uber&apos;s Distributed Tracing System</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Yuri</forename><surname>Shkuro</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Jaeger</surname></persName>
		</author>
		<idno>2019-03-01</idno>
		<ptr target="https://uber.github.io/jaeger/" />
		<imprint>
			<date type="published" when="2017-03" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b21">
	<monogr>
		<title level="m" type="main">Dapper, a Large-Scale Distributed Systems Tracing Infrastructure</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">H</forename><surname>Benjamin</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Luiz</forename><forename type="middle">André</forename><surname>Sigelman</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Mike</forename><surname>Barroso</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Pat</forename><surname>Burrows</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Manoj</forename><surname>Stephenson</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Donald</forename><surname>Plakal</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Saul</forename><surname>Beaver</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Chandan</forename><surname>Jaspan</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Shanbhag</surname></persName>
		</author>
		<ptr target="http://research.google.com/archive/papers/dapper-2010-1.pdf" />
		<imprint>
			<date type="published" when="2010" />
			<publisher>Google, Inc</publisher>
			<biblScope unit="page" from="2019" to="2022" />
		</imprint>
	</monogr>
<note type="report_type">Technical report</note>
</biblStruct>

<biblStruct xml:id="b22">
	<analytic>
		<title level="a" type="main">Answering Why-not Queries in Software-defined Networks with Negative Provenance</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Yang</forename><surname>Wu</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Andreas</forename><surname>Haeberlen</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Wenchao</forename><surname>Zhou</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Boon Thau</forename><surname>Loo</surname></persName>
		</author>
		<idno>1-3:7. ACM</idno>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 12th ACM Workshop on Hot Topics in Networks (HotNets &apos;13)</title>
		<meeting>the 12th ACM Workshop on Hot Topics in Networks (HotNets &apos;13)</meeting>
		<imprint>
			<date type="published" when="2013" />
			<biblScope unit="volume">3</biblScope>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b23">
	<analytic>
		<title level="a" type="main">Simple testing can prevent most critical failures: An analysis of production failures in distributed data-intensive systems</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Ding</forename><surname>Yuan</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Yu</forename><surname>Luo</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Xin</forename><surname>Zhuang</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Guilherme</forename><forename type="middle">Renna</forename><surname>Rodrigues</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Xu</forename><surname>Zhao</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Yongle</forename><surname>Zhang</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Pranay</forename><forename type="middle">U</forename><surname>Jain</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Michael</forename><surname>Stumm</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 11th USENIX Conference on Operating Systems Design and Implementation (OSDI &apos;14)</title>
		<meeting>the 11th USENIX Conference on Operating Systems Design and Implementation (OSDI &apos;14)</meeting>
		<imprint>
			<publisher>USENIX Association</publisher>
			<date type="published" when="2014" />
			<biblScope unit="page" from="249" to="265" />
		</imprint>
	</monogr>
</biblStruct>

				</listBibl>
			</div>
		</back>
	</text>
</TEI>
