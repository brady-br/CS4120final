<?xml version="1.0" encoding="UTF-8"?>
<TEI xmlns="http://www.tei-c.org/ns/1.0" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
xsi:schemaLocation="http://www.tei-c.org/ns/1.0 /Users/atharsefid/Desktop/grobid-0.5.3/grobid-home/schemas/xsd/Grobid.xsd"
 xmlns:xlink="http://www.w3.org/1999/xlink">
	<teiHeader xml:lang="en">
		<encodingDesc>
			<appInfo>
				<application version="0.5.3" ident="GROBID" when="2020-09-29T02:05+0000">
					<ref target="https://github.com/kermitt2/grobid">GROBID - A machine learning software for extracting information from scholarly documents</ref>
				</application>
			</appInfo>
		</encodingDesc>
		<fileDesc>
			<titleStmt>
				<title level="a" type="main">Towards Client-side HTML Security Policies</title>
			</titleStmt>
			<publicationStmt>
				<publisher/>
				<availability status="unknown"><licence/></availability>
			</publicationStmt>
			<sourceDesc>
				<biblStruct>
					<analytic>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Joel</forename><surname>Weinberger</surname></persName>
							<affiliation key="aff0">
								<orgName type="institution">University of California</orgName>
								<address>
									<settlement>Berkeley</settlement>
								</address>
							</affiliation>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Adam</forename><forename type="middle">Barth</forename><surname>Google</surname></persName>
							<affiliation key="aff1">
								<orgName type="institution">University of California</orgName>
								<address>
									<settlement>Berkeley</settlement>
								</address>
							</affiliation>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Dawn</forename><surname>Song</surname></persName>
							<affiliation key="aff1">
								<orgName type="institution">University of California</orgName>
								<address>
									<settlement>Berkeley</settlement>
								</address>
							</affiliation>
						</author>
						<title level="a" type="main">Towards Client-side HTML Security Policies</title>
					</analytic>
					<monogr>
						<imprint>
							<date/>
						</imprint>
					</monogr>
				</biblStruct>
			</sourceDesc>
		</fileDesc>
		<profileDesc>
			<abstract>
				<p>With the proliferation of content rich web applications, content injection has become an increasing problem. Cross site scripting is the most prominent examples of this. Many systems have been designed to mitigate content injection and cross site scripting. Notable examples are BEEP, BLUEPRINT, and Content Security Policy, which can be grouped as HTML security policies. We evaluate these systems, including the first empirical evaluation of Content Security Policy on real applications. We propose that HTML security policies should be the defense of choice in web applications going forward. We argue, however, that current systems are insufficient for the needs of web applications, and research needs to be done to determine the set of properties an HTML security policy system should have. We propose several ideas for research going forward in this area.</p>
			</abstract>
		</profileDesc>
	</teiHeader>
	<text xml:lang="en">
		<body>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="1">Introduction</head><p>Content injection attacks, and in particular cross-site scripting (XSS) attacks, are a significant threat to web applications <ref type="bibr" target="#b24">[26,</ref><ref type="bibr" target="#b2">3]</ref>. These attacks violate the integrity of web applications, steal from users and companies, and erode privacy on the web. Researchers have focused a great deal of effort at preventing these attacks, ranging from static detection to dynamic checking of content.</p><p>The classic approach to stopping content cross-site scripting attacks is by the careful placement of sanitizers. Sanitizing, or filtering, is the removal of potentially harmful content or structure from untrusted data. Sanitization places a heavy burden on developers; they must identify where untrusted data appears in their application, what that data is allowed to do, and the context the data appears in on the final page. Unfortunately, these are not straightforward processes. Sanitization is a very brittle process, prone to error. Besides often missing untrusted data in their application, it is not always obvious what sanitization method to apply in what context <ref type="bibr" target="#b23">[25,</ref><ref type="bibr" target="#b15">16]</ref>.</p><p>In response, several alternatives have been proposed in the literature, most notably, BEEP <ref type="bibr" target="#b7">[8]</ref>, BLUEPRINT <ref type="bibr" target="#b19">[21]</ref>, and Content Security Policy (CSP) <ref type="bibr" target="#b17">[18]</ref>. These proposals suggest very different mechanisms for preventing XSS and, in some of the cases, more general content injection. Previously, these have been viewed separate proposals with different approaches to the same problem. However, we identify these proposals as instances of a more general notion of client-side HTML security policies.</p><p>We argue that HTML security policies are superior to sanitization and should be the core defensive mechanism against content injection in future web applications. However, we also argue and show that the current proposals for HTML security policies fall short of their ultimate design goals. We argue that HTML security policies should be at the core of web application security, but much research still needs to be done in building successful HTML security policy systems. We put forth several suggestions for future research, but generally leave next steps as an open problem.</p><p>HTML Security Policy Systems We focus on BEEP, BLUEPRINT, and Content Security Policy. We examine these systems to understand their respective power and limitations. While all three provide working systems for expressing and implementing HTML security policies, CSP is of particular importance because it is deployed in Firefox 4 <ref type="bibr" target="#b16">[17]</ref>. We evaluate the efficacy of all three, including the first empirical evaluation of CSP on real applications by retrofitting Bugzilla <ref type="bibr" target="#b0">[1]</ref> and HotCRP <ref type="bibr" target="#b1">[2]</ref> to use CSP. We conclude that none of these systems solves the content injection or XSS problems sufficiently:</p><p>• BEEP has serious limitations in dealing with dynamic script generation. This is especially problematic in today's web frameworks that support and encourage templating across all types of code. Additionally, it does not provide any support for non-XSS content injection.</p><p>• BLUEPRINT has significant performance problems. These are not superficial; there are inherent to its approach in avoiding use of the browser's parser.</p><p>• CSP can cause significant performance problems in large applications because of the restrictions on code it enforces. Additionally, it does not fit well into web framework the programming models.</p><p>Proposals We argue that going forward, web frameworks should use HTML security policies instead of sanitization as the basis of their protection against content injection. However, the security community needs to decide on a set of requirements that HTML security policies should hold going forward. In the end, new HTML security policy systems, and perhaps new browser primitives, need to be developed by the research community to solve the content injection problem.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2">HTML Security Policies</head><p>Content injection occurs when untrusted user input changes the intended parse tree of a document <ref type="bibr" target="#b4">[5,</ref><ref type="bibr" target="#b12">13]</ref>.</p><p>In the case of a web page, this happens when a user input is placed on a page, and the user input contains control structures (such as HTML tags or JavaScript code) that the developer did not intend to be present. By definition, this allows an attacker to modify the behavior of the page in unexpected ways, changing the developer's intended semantics. XSS is a specific type of content injection where the attacker modifies the document's structure to place a script on the page. Web developers generally use sanitization to defend from content injection, but sanitization can be difficult to get right. Thus, researchers have proposed several other mechanisms for protecting web applications from content injection. Three well known proposals, BEEP, BLUEPRINT, and Content Security Policy (CSP), are instances of HTML security policy systems. HTML security policy systems provide mechanisms for an application to specify how a document is parsed and interpreted by the browser on the client, in contrast to the syntactic approach of sanitization on the server, where unwanted syntax is removed before it reaches the client.</p><p>In HTML security policy systems, a policy is provided to the browser when a web page is loaded, and as the browser renders the page, it enforces that the page matches the HTML security policy. This is particularly useful in the context of a web server providing dynamically generated content where a policy is hard to enforce statically (such as a page containing user comments, a news aggregator, etc.).</p><p>The advantages of HTML security policy systems over sanitization are several fold. The key improvement is that developers do not need to search for the precise place in code that untrusted data may appear. In sanitization, these places are hard to find, and even when found, it is not necessarily clear what sanitizer to apply (i.e. does the untrusted data appear between HTML tags, or is it part of an attribute, or another context entirely?) <ref type="bibr" target="#b23">[25]</ref>. In comparison, one of the goals of HTML security policy systems is to specify allowed behavior, not to limit the syntax at these precise points.</p><p>Additionally, in HTML security policy systems, there is an explicit policy to enforce, in contrast to the ad-hoc application of sanitizers. This suggests that HTML security policies are easier to audit than sanitization. A developer can check a policy against their security model, rather than searching an application for sanitizers and building a policy from that.</p><p>Because of these properties, and the unreliability of and difficulty in using sanitizers, we argue that HTML security policy systems should be used going forward in web applications to help solve the content injection problem instead of sanitization. However, the current set of available HTML security policy systems have several major problems in their design.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.1">Existing Policy Systems</head><p>While there are many different HTML security policy systems, we focus on three of the most cited, BEEP <ref type="bibr" target="#b7">[8]</ref>, BLUEPRINT <ref type="bibr" target="#b19">[21]</ref> and CSP <ref type="bibr" target="#b17">[18]</ref>. These three systems take two very different approaches to the same problem: how to stop untrusted content from injecting additional structure into a web page. They are all particularly concerned with cross-site scripting attacks.</p><p>BEEP BEEP focuses on XSS instead of the more general content injection problem. BEEP implements a whitelist of trusted scripts that may execute and rejects the execution of any script not on the whitelist. Thus, only trusted, developer-built scripts may execute on the client, and any injected scripts will fail to do so.</p><p>Unfortunately, BEEP's handling of dynamically generated scripts does not match the web framework model. BEEP requires that the hash of a script be statically determined or that the script is added by a trusted script. By definition, if the script is generated dynamically, its hash cannot be determined statically. One can imagine a system with scripts that add dynamically generated scripts, but this is very different from how web applications and frameworks currently handle code generation.</p><p>Additionally, BEEP does not handle content injection other than XSS, which have recently been seen in real sites <ref type="bibr" target="#b20">[22]</ref>. Also, attacks on BEEP have been developed similar to return-to-libc attacks <ref type="bibr" target="#b3">[4]</ref>. While more complex than traditional XSS, the existence of such attacks is cause for concern.</p><p>BLUEPRINT BLUEPRINT presents a system for parsing document content using a trusted, crossplatform, JavaScript parser, rather than browsers' built in parsers. The authors view HTML parsers in different browsers as untrustworthy because of browser quirks and view the cross-site scripting problem as fundamentally arising from this. Their approach provides the browser with a "blueprint" of the structure of the page, and a JavaScript library builds the page from the blueprint rather than trusting the browser's HTML parser.</p><p>This "blueprint" is an HTML security policy. The server parses the document itself and generates the structural blueprint of the document. This is communicated to the browser where it is used by the BLUEPRINT JavaScript library to build the document. The blueprint is a step-by-step instruction set for the structure of the page, and if any of the content violates this structure, it violates the policy and is removed.</p><p>One of the key assumptions of the authors is that server applications "know how to deal with untrusted content." Unfortunately, the authors make this assumption without defending it. There certainly are numerous cases of server applications that do not understand how to properly deal with untrusted content; this is the basis of SQL injection attacks <ref type="bibr" target="#b21">[23]</ref>. A tool that could help wellintentioned developers stop potentially untrusted content would help to alleviate this.</p><p>Additionally, BLUEPRINT unfortunately suffers from several performance problems. In the original paper, the authors report 55% performance overhead in applying BLUEPRINT to Wordpress and 35% performance overhead in applying it to MediaWiki. Because of its very nature, BLUEPRINT cannot use the efficient parsing primitives of the browser; it relies entirely on building the document from the blueprint with the JavaScript parser.</p><p>Content Security Policy (CSP) To our knowledge, CSP is the first HTML security policy system to be implemented and released by one of the major browser vendors (in Firefox 4). CSP takes a different view of the browser than BLUEPRINT. Instead of "not trusting" the browser's parsing decision, CSP implements a declarative policy that the browser then enforces on the application. CSP trusts the browser for enforcement, conceding that an application may be flawed.</p><p>CSP does this by developing a large set of properties that may be set on a per page basis. All trust is based on the page level by CSP properties that state trusted servers for scripts, images, and a variety of other content. This provides a strong fail-safe property. Because the entire page is covered by the policy, the policy will apply to all untrusted content wherever it appears on the page.</p><p>The types of properties that CSP provides include trusted servers for images, scripts, and other content, but it also includes one particularly important property. This is the inline-scripts property, which, by default, is disabled. When disabled, this means that the browser will not allow any scripts to execute within the page; the only scripts that may be run are ones included by the src attribute of a &lt;script&gt; tag. This is fundamentally how CSP prevents XSS attacks. Because no script content is allowed to run within the page, and the developer may set a small number of trusted servers for scripts to come from, an injection attack can add a script but it either will not run because it is inline, or it will not run because it will have a src pointing to an attacker's untrusted server.</p><p>CSP rules are a declarative way of specifying the dynamic semantics of a web page. CSP specifies a set of semantic rules on a per page basis. However, content injection is a syntactic problem where the abstract syntax tree of a document is modified by an untrusted source <ref type="bibr" target="#b18">[19,</ref><ref type="bibr" target="#b12">13]</ref>. It would be possible to keep adding semantic rules to CSP, but a new rule would be needed for each semantic consequence of all possible syntactic changes. Because of this, CSP only provides rules for stopping a small set of injection attacks, namely XSS and specific types of content (such as &lt;iframe&gt; tags whose src attribute points to an untrusted server). CSP does not stop general content injection, and for it do so would require an ever growing set of rules.</p><p>CSPs declarative, page level, fail safe architecture is enticing. However, it places severe restrictions on how web application pages can be structured. We evaluate how these restrictions affect real web applications.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3">Evaluating the Application of CSP</head><p>To evaluate the efficacy of CSP as an HTML security policy, we apply it to two popular, real world applications. We determine the HTML security policies necessary to stop injection attacks and apply the policies to the applications. We modify the applications to work with these policies. We evaluate the performance of these applications using CSP, and measure the effort of modifying these applications.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.1">Methodology</head><p>The applications we experiment on are Bugzilla <ref type="bibr" target="#b0">[1]</ref> and HotCRP <ref type="bibr" target="#b1">[2]</ref>. Bugzilla is a web application for orga-nizing software projects and filing and tracking bugs, used by many large companies and open source projects, including RedHat, Mozilla, Facebook, and Yahoo! <ref type="bibr" target="#b5">[6]</ref>. HotCRP is a conference manager used for paper submission and review by several major conferences.</p><p>We retrofit the applications to execute properly with a known CSP policy that blocks XSS. As a manual process, we run the program and explore its execution space by clicking through the application. We modify the applications to correct any violations of the CSP policy by the applications. This does not provide completeness but we feel this most accurately represents what a developer would need to do to apply CSP to her application. While static and dynamic analysis tools have the potential to help, we are unaware of such tools for the Template Toolkit <ref type="bibr">[20]</ref> language that Bugzilla is written in.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.2">Application Modifications</head><p>The major part of transforming Bugzilla and HotCRP is converting inline JavaScript to external JavaScript files that are sourced by the HTML page. Because CSP policies are of page level granularity, it cannot reason about individual scripts on a page. Thus, in order to prevent XSS with CSP, it must reject inline scripts and only source scripts from trusted servers. The consequence of this is that completely trusted scripts must be moved to separate files.</p><p>Data Access In the implementations of Bugzilla and HotCRP, there are a variety of inline scripts that reference data and variables generated by the templating languages. such as configuration information or the number of search results. This data is not untrusted input. Unfortunately, when the scripts are segregated into separate files from the templated HTML, the variables and data can no longer be referenced by the templating language in the script source file. This is because the templating languages for both Bugzilla and HotCRP treat the individual page as a scoping closure; variables are not shared between separately sourced pages. We address this by creating additional hidden HTML structure and storing the necessary data in an attribute. Later, we extract this via additional JavaScript on the client. DOM Manipulation DOM manipulation becomes necessary in a number of other contexts as well. Take as an example dynamically generated JavaScript. In HotCRP there are several scripts that interact with lists of papers. For each of the papers in the lists, there are inline JavaScript handlers for each entry, such as onclick handlers. Because CSP does not allow inline scripts, including handlers, these handlers must be inserted dynam-</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Page</head><p>No Inline JS Async JS index.php 14.78% ± 4.5 −3.0% ± 4.25 editsettings.php 6.3% ± 4.7 5.1% ± 0.92 enter bug.cgi 57.6% ± 2.5 44.2% ± 2.1 show bug.cgi 51.5% ± 2.8 4.0% ± 3.0 <ref type="table">Table 1</ref>: Percent difference in performance between modified Bugzilla and original with 95% confidence intervals.</p><p>ically by JavaScript. Thus, for each paper entry in the list, we use PHP to generate a span with a predictable name, such as name="paper-name-span", and also contains a data-paper-name attribute. When the JavaScript executes, it searches for all elements with the name paper-name-span, and extracts the name of the element to add a handler to.</p><p>Additional Application Logic Another pattern we observe is the required movement of templating logic into JavaScript. Because the JavaScript is no longer inlined, the conditional branching in the templates no longer can affect it. Thus, it must replicate the same conditionals and checks dynamically. Using the same techniques as we discussed earlier, we replicate where necessary templating conditionals in JavaScript based on data passed in DOM element attributes. This adds additional performance costs to the execution, but also provides additional points of failure for the transformation.</p><p>Total Modifications Overall, the types of modifications to Bugzilla and HotCRP closely mirrored one another. This was particularly interesting given that they used two unrelated templating frameworks, Template Toolkit and PHP, respectively. In both cases, it was necessary to transfer data and variables to JavaScript through HTML structure, create significant additional DOM manipulations to build the application, and to move and duplicate application logic from the server to the client. Our modifications were substantial, adding 1745 lines and deleting 1120 lines of code in Bugzilla and adding 1440 lines and deleting 210 lines of code in HotCRP. We also observed an increase in the number of GET requests and data transferred for Bugzilla and HotCRP.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.3">Performance</head><p>The performance of the applications are affected in several different ways. During the application modification, we observe several particular modifications that relate to performance:</p><p>• Additional script source files In order to remove inline scripts from Bugzilla and HotCRP, we add a number of new script source files. When possible,</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Page</head><p>No Inline JS Async JS JS Template index.php 45.3% ± 6.3 37.2% ± 5.0 27.9% ± 3.7 search.php 52.9% ± 5.4 50.4% ± 3.7 20.2% ± 3.9 settings.php 23.3% ± 2.7 16.1% ± 8.2 -paper.php 61.1% ± 9.5 58.5% ± 8.7 19.1% ± 2.5 contacts.php 67.8% ± 4.8 35.5% ± 4.9 - <ref type="table">Table 2</ref>: Percent difference in performance between modified HotCRP and original with 95% confidence intervals and JQuery Templating performance.</p><p>we consolidate what were separate inline scripts into one source file, but this is not always possible. For example, if a script uses document.write, the script must be placed in a specific location. Additionally, many scripts are conditional on templating branching, and should only occur if specific elements exist or particular properties hold. These extra files have the potential to add latency to page load and execution.</p><p>• New DOM manipulations As discussed above, to transfer data and variables from the template to the script, we attach the data to HTML elements and use JavaScript to extract the data through the DOM. These extra DOM accesses can be costly operations in what would have otherwise been static data.</p><p>Results Our performance evaluation results can be seen in <ref type="table">Tables 1 and 2</ref> for a random set of pages for each application, measured in the Chrome web browser network performance tool. After our experiments finished, we observed that one of the major performance slow downs appeared to be the synchronous loading of script sources. Since our modifications required an increase in the number of external scripts, we modified the pages to use the async attribute in the &lt;script&gt; tags where possible. This allows those scripts to load asynchronously. This change substantially improved the performance of the applications, but in most cases, not enough to approach the original performance.</p><p>Our results show that using CSP for Bugzilla and HotCRP is both a complex task and may harm performance. We show that CSP requires changes to how both applications are structured. While CSP has several desirable properties, such as page level granularity and a fail safe architecture, this shows that, like BEEP and BLUEPRINT, it would be difficult to deploy with a secure setting on complex applications.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4">Related Work</head><p>There is extensive work how to discover and eliminate XSS vulnerabilities in web applications <ref type="bibr" target="#b6">[7,</ref><ref type="bibr" target="#b25">27,</ref><ref type="bibr" target="#b8">9,</ref><ref type="bibr" target="#b9">10,</ref><ref type="bibr" target="#b26">28]</ref>.</p><p>There has been work on both eliminating these vulnerabilities on the server and in the client. This work has focused on treating XSS as a bug to be eliminated from an application, keeping XSS vulnerabilities from even reaching production systems. This means that much of this work is static analysis, but some work has focused on dynamic techniques on the server <ref type="bibr" target="#b22">[24]</ref>. Other work, specifically KUDZU <ref type="bibr" target="#b13">[14]</ref> and FLAX <ref type="bibr" target="#b14">[15]</ref>, have focused on symbolic execution of client-side JavaScript.</p><p>Sanitization, or content filtering, is the elimination of unwanted content from untrusted inputs. Sanitization is applied explicitly by an application or a framework to the untrusted content. Sanitization is almost always done on the server; generally, the goal is to remove the unwanted content before it reaches the client. Sanitization is usually done as a filter over character elements of string looking for "control" characters, such as brackets in HTML. XSS-GUARD <ref type="bibr" target="#b4">[5]</ref> and ScriptGard <ref type="bibr" target="#b15">[16]</ref> argue that it is necessary to look at sanitization as a context sensitive problem.</p><p>There have also been a number of other HTML security policy systems proposed <ref type="bibr" target="#b10">[11,</ref><ref type="bibr" target="#b11">12]</ref>. We focused on three of the most discussed in the literature, but future evaluations would, of course, need to take these into account as well.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5">Towards HTML Security Policies</head><p>While current HTML security policy systems are not sufficient for today's web applications because of their performance problems and requirements on how applications are built, they provide very enticing properties. Research should evaluate HTML security policies and how to build better HTML security policy systems. Towards this goal, we start the conversation with several points and questions about HTML security policy systems.</p><p>• Researchers should determine the set of properties that an HTML security policy system should have. For example, CSP's page-level granularity is simple as a policy, but puts an undue burden on developers in how they write and retrofit applications. Is this the right trade-off to make?</p><p>• From the problems of the systems we observe today, what can we learn? We identified a number of properties systems should not have, such as extensive restrictions on how code is written. Should we just accept these problems to reap the benefit of HTML security policies?</p><p>• Combining these systems may be fruitful. For example, a combination approach of BEEP and CSP that allows inlined scripts if they are on a BEEPlike whitelist but also allows external scripts may be an improvement in usability over either system independently. What features can we extract and combine from current systems to build new ones?</p><p>• Should new HTML security policy systems work in legacy browsers or focus on state-of-the-art browsers? For example, it seems likely that BLUEPRINTs performance shortcomings could be addressed with better browser support. On the other hand, retrofitting applications for new browser primitives can be a struggle, as seen with CSP.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="6">Conclusion</head><p>HTML security policies should be the central mechanism going forward for preventing content injection attacks. They have the potential to be much more effective than sanitization. However, the HTML security policy systems available today have too many problems to be used in real applications. We presented these issues, including the first empirical evaluation of CSP on real-world applications. New HTML security policy systems and techniques need to be developed for applications to use. As a first step, research needs to identify the properties needed in HTML security policy systems.</p></div>		</body>
		<back>

			<div type="acknowledgement">
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Acknowledgments</head></div>
			</div>

			<div type="references">

				<listBibl>

<biblStruct xml:id="b0">
	<monogr>
		<title/>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Bugzilla</surname></persName>
		</author>
		<ptr target="http://www.bugzilla,org/" />
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b1">
	<monogr>
		<title/>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Hotcrp</surname></persName>
		</author>
		<ptr target="http://www.cs.ucla.edu/˜kohler/hotcrp/index.html/" />
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b2">
	<analytic>
		<title/>
		<ptr target="http://www.owasp.org/index.php/Top_10_2007" />
	</analytic>
	<monogr>
		<title level="j">OWASP: Top</title>
		<imprint>
			<biblScope unit="volume">10</biblScope>
			<date type="published" when="2007" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b3">
	<analytic>
		<title level="a" type="main">Code injection attacks in browsers supporting policies</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">E</forename><surname>Athanasopoulos</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">V</forename><surname>Pappas</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">E</forename><surname>Markatos</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of Web 2.0 Security and Privacy</title>
		<meeting>Web 2.0 Security and Privacy</meeting>
		<imprint>
			<date type="published" when="2009" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b4">
	<analytic>
		<title level="a" type="main">Xss-guard: Precise dynamic prevention of cross-site scripting attacks</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><surname>Bisht</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">V</forename><forename type="middle">N</forename><surname>Venkatakrishnan</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 5th international conference on Detection of Intrusions and Malware, and Vulnerability Assessment, DIMVA &apos;08</title>
		<meeting>the 5th international conference on Detection of Intrusions and Malware, and Vulnerability Assessment, DIMVA &apos;08<address><addrLine>Berlin, Heidelberg</addrLine></address></meeting>
		<imprint>
			<publisher>SpringerVerlag</publisher>
			<date type="published" when="2008" />
			<biblScope unit="page" from="23" to="43" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b5">
	<monogr>
		<title level="m" type="main">Bugzilla usage world wide</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">F</forename><surname>Buclin</surname></persName>
		</author>
		<ptr target="http://lpsolit.wordpress.com/bugzilla-usage-worldwide/" />
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b6">
	<analytic>
		<title level="a" type="main">Securing web application code by static analysis and runtime protection</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Y.-W</forename><surname>Huang</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">F</forename><surname>Yu</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><surname>Hang</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C.-H</forename><surname>Tsai</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D.-T</forename><surname>Lee</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S.-Y</forename><surname>Kuo</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 13th international conference on World Wide Web, WWW &apos;04</title>
		<meeting>the 13th international conference on World Wide Web, WWW &apos;04<address><addrLine>New York, NY, USA</addrLine></address></meeting>
		<imprint>
			<publisher>ACM</publisher>
			<date type="published" when="2004" />
			<biblScope unit="page" from="40" to="52" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b7">
	<monogr>
		<title level="m" type="main">Beep: Browser-enforced embedded policies. 16th International World World Web Conference</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><surname>Jim</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">N</forename><surname>Swamy</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Hicks</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2007" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b8">
	<analytic>
		<title level="a" type="main">Finding security errors in Java programs with static analysis</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">B</forename><surname>Livshits</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><forename type="middle">S</forename><surname>Lam</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the Usenix Security Symposium</title>
		<meeting>the Usenix Security Symposium</meeting>
		<imprint>
			<date type="published" when="2005" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b9">
	<monogr>
		<title level="m" type="main">SecuriFly: Runtime protection and recovery from Web application vulnerabilities</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">B</forename><surname>Livshits</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Martin</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><forename type="middle">S</forename><surname>Lam</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2006-09" />
		</imprint>
		<respStmt>
			<orgName>Stanford University</orgName>
		</respStmt>
	</monogr>
<note type="report_type">Technical report</note>
</biblStruct>

<biblStruct xml:id="b10">
	<analytic>
		<title level="a" type="main">Using web application construction frameworks to protect against code injection attacks</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">B</forename><surname>Livshits</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Erlingsson</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 2007 workshop on Programming languages and analysis for security</title>
		<meeting>the 2007 workshop on Programming languages and analysis for security</meeting>
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b11">
	<analytic>
		<title level="a" type="main">ConScript: Specifying and enforcing finegrained security policies for JavaScript in the browser</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">L</forename><surname>Meyerovich</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">B</forename><surname>Livshits</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">IEEE Symposium on Security and Privacy</title>
		<imprint>
			<date type="published" when="2010-05" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b12">
	<analytic>
		<title level="a" type="main">Document structure integrity: A robust basis for cross-site scripting defense</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Y</forename><surname>Nadji</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><surname>Saxena</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Song</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 16th Network and Distributed System Security Symposium</title>
		<meeting>the 16th Network and Distributed System Security Symposium</meeting>
		<imprint>
			<date type="published" when="2009" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b13">
	<analytic>
		<title level="a" type="main">A symbolic execution framework for javascript</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><surname>Saxena</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Akhawe</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Hanna</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">F</forename><surname>Mao</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Mccamant</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Song</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 2010 IEEE Symposium on Security and Privacy, SP &apos;10</title>
		<meeting>the 2010 IEEE Symposium on Security and Privacy, SP &apos;10<address><addrLine>Washington, DC, USA</addrLine></address></meeting>
		<imprint>
			<publisher>IEEE Computer Society</publisher>
			<date type="published" when="2010" />
			<biblScope unit="page" from="513" to="528" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b14">
	<analytic>
		<title level="a" type="main">FLAX: Systematic discovery of client-side validation vulnerabilities in rich web applications</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><surname>Saxena</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Hanna</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><surname>Poosankam</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Song</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Network &amp; Distributed System Security Symposium, (NDSS)</title>
		<imprint>
			<date type="published" when="2010" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b15">
	<monogr>
		<title level="m" type="main">Scriptgard: Preventing script injection attacks in legacy web applications with automatic sanitization</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><surname>Saxena</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Molnar</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">B</forename><surname>Livshits</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2010-09" />
			<pubPlace>Microsoft Research</pubPlace>
		</imprint>
	</monogr>
<note type="report_type">Technical report</note>
</biblStruct>

<biblStruct xml:id="b16">
	<monogr>
		<title level="m" type="main">Content security policy</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Stamm</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2009" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b17">
	<analytic>
		<title level="a" type="main">Reining in the web with content security policy</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Stamm</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">B</forename><surname>Sterne</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">G</forename><surname>Markham</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 19th international conference on World wide web, WWW &apos;10</title>
		<meeting>the 19th international conference on World wide web, WWW &apos;10<address><addrLine>New York, NY, USA</addrLine></address></meeting>
		<imprint>
			<publisher>ACM</publisher>
			<date type="published" when="2010" />
			<biblScope unit="page" from="921" to="930" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b18">
	<monogr>
		<title level="m" type="main">The essence of command injection attacks in web applications</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Z</forename><surname>Su</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">G</forename><surname>Wassermann</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2006" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b19">
	<analytic>
		<title level="a" type="main">BluePrint: Robust Prevention of Cross-site Scripting Attacks for Existing Browsers</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Ter</forename><surname>Louw</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Mike</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">V</forename><forename type="middle">N</forename><surname>Venkatakrishnan</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the IEEE Symposium on Security and Privacy</title>
		<meeting>the IEEE Symposium on Security and Privacy</meeting>
		<imprint>
			<date type="published" when="2009" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b20">
	<monogr>
				<ptr target="http://thenextweb.com/socialmedia/2010/07/04/youtube-hacked-justin-bieber-videos-targeted/" />
		<title level="m">TNW: The Next Web. YouTube hacked, Justin Bieber videos targeted</title>
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b21">
	<analytic>
		<title level="a" type="main">Sound and precise analysis of web applications for injection vulnerabilities</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">G</forename><surname>Wassermann</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Z</forename><surname>Su</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the ACM SIGPLAN conference on Programming language design and implementation</title>
		<meeting>the ACM SIGPLAN conference on Programming language design and implementation<address><addrLine>New York, NY, USA</addrLine></address></meeting>
		<imprint>
			<publisher>ACM</publisher>
			<date type="published" when="2007" />
			<biblScope unit="page" from="32" to="41" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b22">
	<analytic>
		<title level="a" type="main">Dynamic test input generation for web applications</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">G</forename><surname>Wassermann</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Yu</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Chander</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Dhurjati</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">H</forename><surname>Inamura</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Z</forename><surname>Su</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the International symposium on Software testing and analysis</title>
		<meeting>the International symposium on Software testing and analysis</meeting>
		<imprint>
			<date type="published" when="2008" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b23">
	<analytic>
		<title level="a" type="main">A systematic analysis of xss sanitization in web application frameworks</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Weinberger</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><surname>Saxena</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Akhawe</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Finifter</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Shin</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Song</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of 16th European Symposium on Research in Computer Security (ESORICS)</title>
		<meeting>16th European Symposium on Research in Computer Security (ESORICS)</meeting>
		<imprint>
			<date type="published" when="2011" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b24">
	<monogr>
				<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Whitehat</forename><forename type="middle">Whitehat</forename><surname>Security</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Webinar</surname></persName>
		</author>
		<ptr target="http://www.whitehatsec.com/home/resource/presentation.html" />
		<title level="m">Fall 2010 Website Statistics Report</title>
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b25">
	<analytic>
		<title level="a" type="main">Static detection of security vulnerabilities in scripting languages</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Y</forename><surname>Xie</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Aiken</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the Usenix Security Symposium</title>
		<meeting>the Usenix Security Symposium</meeting>
		<imprint>
			<date type="published" when="2006" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b26">
	<analytic>
		<title level="a" type="main">Taint-enhanced policy enforcement: A practical approach to defeat a wide range of attacks</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">W</forename><surname>Xu</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Bhatkar</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Sekar</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 15th USENIX Security Symposium</title>
		<meeting>the 15th USENIX Security Symposium</meeting>
		<imprint>
			<date type="published" when="2006" />
			<biblScope unit="page" from="121" to="136" />
		</imprint>
	</monogr>
</biblStruct>

				</listBibl>
			</div>
		</back>
	</text>
</TEI>
