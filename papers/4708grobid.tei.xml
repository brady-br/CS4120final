<?xml version="1.0" encoding="UTF-8"?>
<TEI xmlns="http://www.tei-c.org/ns/1.0" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
xsi:schemaLocation="http://www.tei-c.org/ns/1.0 /Users/atharsefid/Desktop/grobid-0.5.3/grobid-home/schemas/xsd/Grobid.xsd"
 xmlns:xlink="http://www.w3.org/1999/xlink">
	<teiHeader xml:lang="en">
		<encodingDesc>
			<appInfo>
				<application version="0.5.3" ident="GROBID" when="2020-09-29T04:29+0000">
					<ref target="https://github.com/kermitt2/grobid">GROBID - A machine learning software for extracting information from scholarly documents</ref>
				</application>
			</appInfo>
		</encodingDesc>
		<fileDesc>
			<titleStmt>
				<title level="a" type="main">Alternative (ab)uses for HTTP Alternative Services</title>
			</titleStmt>
			<publicationStmt>
				<publisher/>
				<availability status="unknown"><licence/></availability>
			</publicationStmt>
			<sourceDesc>
				<biblStruct>
					<analytic>
						<author role="corresp">
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Trishita</forename><surname>Tiwari</surname></persName>
							<email>trtiwari@bu.edu</email>
							<affiliation key="aff0">
								<orgName type="institution" key="instit1">Boston University</orgName>
								<orgName type="institution" key="instit2">Boston University</orgName>
							</affiliation>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Ari</forename><surname>Trachtenberg</surname></persName>
							<affiliation key="aff0">
								<orgName type="institution" key="instit1">Boston University</orgName>
								<orgName type="institution" key="instit2">Boston University</orgName>
							</affiliation>
						</author>
						<title level="a" type="main">Alternative (ab)uses for HTTP Alternative Services</title>
					</analytic>
					<monogr>
						<imprint>
							<date/>
						</imprint>
					</monogr>
				</biblStruct>
			</sourceDesc>
		</fileDesc>
		<profileDesc>
			<abstract>
				<p>The HTTP Alternative Services header (Alt-Svc) was introduced in 2013 in a bid to streamline load balancing, protocol optimizations, and client segmentation, and it has since been subsequently implemented in almost all mobile and desktop browsers. We show that the major implementations of the header are independently susceptible to a variety of stealthy abuse. Indeed, we demonstrate how Alternative Services may be leveraged to scan ports blacklisted by browsers, probe fire-walled hosts, and mount Distributed Denial of Service attacks. These services may also be misused to bypass popular phish-ing and malware protection services like Safe Browsing, and also online site checkers like VirusTotal, URLVoid, Sucuri and IPVoid. In the privacy realm, the Alt-Svc header may be abused for user tracking: at the network layer by Internet Service Providers (ISPs), and at the application layer by first and third party websites (where we bypass third-party tracking protections on Firefox, Chrome and Brave). In a similar manner, the header may be used by transiently connected ISPs to exfiltrate parts of a victim&apos;s browser history. Our attacks work, to varying extents, on Firefox, Tor, Chrome, and Brave browser, and have been disclosed accordingly-so far, one of our vulnerabilities been patched by Mozilla as CVE-2019-11728. We conclude with proposed mitigations for some of these abuses.</p>
			</abstract>
		</profileDesc>
	</teiHeader>
	<text xml:lang="en">
		<body>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="1">Introduction</head><p>HyperText Transfer Protocol (HTTP) headers date back to the very earliest web servers, providing an out-of-band mechanism for clients and servers to exchange metadata. Early headers included basic information about the HTTP request context, like the domain name of the server or the name of the client's browser. However, as web content grew in complexity, so did the the the scope of HTTP headers, expanding to include expiration dates, user-side cached data (cookies), and control options for connection reuse. Accompanying this growth in header complexity was a proliferation of attacks to the privacy and security of user data, and corresponding mitigations <ref type="bibr" target="#b38">[43]</ref>.</p><p>The web community now has almost thirty years of experience with the HTTP protocol, and mature browser development teams span a multitude of companies, some with market capitalizations approaching one billion dollars each <ref type="bibr" target="#b7">[10]</ref>. And yet, despite all this knowledge and experience, we aim to show that it is still extremely difficult to introduce even simple improvements to the HTTP protocol without introducing a variety of security vulnerabilities.</p><p>Specifically, in this work we evaluate HTTP Alternative Services header (Alt-Svc), a simple optimization introduced in 2013 with three potential use-cases in mind: streamlining server load-balancing without the need for fine-grained Domain-Name-Service (DNS) maintenance, readily making clients aware of endpoints supporting newer protocols (e.g., HTTP/2 or QUIC), when available, and segmenting clients into groups with prescribed capabilities <ref type="bibr" target="#b23">[26]</ref>. We show that, though well-intentioned and apparently straightforward, this new header may be leveraged for a variety of less innocuous purposes, including third-party network reconnaissance and service denial, bypassing phishing and malware protections, and user tracking. Indeed, the fundamental reason behind all these attacks is that the Alt-Svc header introduces unchecked background connection attempts from the victim's browser to attacker specified endpoints. Worse yet, these endpoints may also be cached to enable automatic future connections.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="1.1">Overview of abuse</head><p>Network reconnaissance is one of the first steps in many electronic attacks, and it is often initiated with a scan of accessible ports on the target. Defenders typically impede port scans in a number of ways, including (i) using an anomaly detection system to recognize scans coming from a common startpoint, and (ii) placing hosts behind firewalls or Network Address Translators (NATs). Unfortunately, the current implementations of Alt-Svc allow attackers to instigate stealthy distributed port scans from a web server under their control. The scans are initiated by victim machines that connect to the controlled server, and thus are both distributed across many startpoints and able to target any machine visible from the victim, even if the victim is behind a firewall. Unlike known JavaScript versions of this attack, the victim sees no indication of the attack within her browser, and the attack can target ports that are otherwise blocked by the browser due to security concerns.</p><p>Indeed, this scanning ability can also be translated into a Distributed Denial of Service (DDoS) attack, wherein an Alt-Svc connection from a browser opens long-lasting connections on a target server, or a short client message leads to a much larger server response against an intended target. Unlike existing DDoS approaches <ref type="bibr" target="#b5">[6,</ref><ref type="bibr" target="#b24">28,</ref><ref type="bibr" target="#b25">29,</ref><ref type="bibr" target="#b31">36,</ref><ref type="bibr">53]</ref>, our methods allow an attacker to target any arbitrary port of the target host by means of client web browsers. The distributed nature of such attacks, coming from a variety of seemingly unrelated and otherwise typical clients, make them very hard to attribute to a root cause or mitigate; indeed, distributed attack mitigation has become the expertise of niche providers such as Cloudflare <ref type="bibr" target="#b0">[1]</ref>. The same scanning ability also carries the potential of confusing Intrusion Detection Systems by triggering anomalies that are tied to unusual patterns of IP or port accesses.</p><p>Another potential abuse of Alt-Svc that we highlight in this work relates to user tracking. Privacy concerns have also lead to a proliferation of client-side blocking tools such as AdBlock, Ghoster, Disconnect, Privacy-Badger and other tracker/advertisement blockers <ref type="bibr" target="#b15">[18]</ref>. Indeed, most modern browsers either block third-party trackers by default, or offer the option to do so <ref type="bibr" target="#b32">[37]</ref>. Furthermore, a number of securityfocused browsers have been introduced from both industry and academia, including Tor, Brave Browser, <ref type="bibr">FuzzyFox [38]</ref> and DeterFox <ref type="bibr" target="#b14">[17]</ref>. On the network layer, privacy protections include web traffic encryption (HTTPS), MAC address randomization <ref type="bibr" target="#b2">[3,</ref><ref type="bibr" target="#b9">12]</ref>, and elimination of other trackable network identifiers (for instance, TLS resumption cache isolation in Tor <ref type="bibr" target="#b3">[4]</ref>). Unfortunately, Alt-Svc can be abused to circumvent a variety of these protections, allowing, for example, tracking by first-and third-party websites, network-layer tracking, and bypass of some standard third-party blocking mechanisms in common use <ref type="bibr" target="#b32">[37]</ref>.</p><p>Similar Alternative Service attacks can be used to perform network-layer browser history exfiltration. Unlike most prior works based on third-party websites <ref type="bibr" target="#b11">[14,</ref><ref type="bibr" target="#b41">46,</ref><ref type="bibr" target="#b50">56]</ref>, our approach for this attack targets a network-level adversary (e.g., an Internet Service Provider or an owner of a Wifi router) that exfiltrates a user's browser history, including web accesses performed outside the observation window of the attacker.</p><p>Finally, Alternative Services also provide a mechanism for bypassing browser defenses against phishing. The prevalence and damage of phishing sites, which impersonate well-known company sites for the purpose of gathering sensitive personal user data <ref type="bibr">[9,</ref><ref type="bibr" target="#b40">45,</ref><ref type="bibr" target="#b42">47]</ref>, has led browsers to implement a variety of blocking filters <ref type="bibr" target="#b12">[15,</ref><ref type="bibr" target="#b36">41]</ref>, which, for example, display conspicuous warnings if the user navigates to a suspicious website, or even a clean website that draws some content from a suspicious site. Indeed, various online tools like VirusTotal, URLVoid, Sucuri and IPVoid also help to identify unsafe websites <ref type="bibr">[35,</ref><ref type="bibr" target="#b43">48,</ref><ref type="bibr" target="#b45">50,</ref><ref type="bibr" target="#b48">54]</ref>. The general approach of these blocking mechanisms is to check website domains against an independently generated blacklist of suspicious content. Unfortunately, this domain checking can be rather simply evaded with the use of the Alt-Svc header.</p><p>Main Contributions The main browser-based attacks presented in this work are thus:</p><p>1. Distributed TCP and UDP port scanning;</p><p>2. Bypass of malware and phishing protections;</p><p>3. Distributed Denial of Service of generic services; and, 4. Tracking and history exfiltration.</p><p>We note that different browsers are affected to varying extents by these different attacks. Further, most of these attacks have direct impact to modern browsers, but others serve as cautionary threats toward future adoption of full Alternative Services functionality.</p><p>Our attacks have been disclosed to Firefox, Tor, Chrome, and Brave browser development teams.</p><p>Roadmap The remainder of this paper is organized as follows: in Section 2 we discuss the background of the Alt-Svc header. We then discuss prior works that relate to our contributions in Section 3. Section 4 describes our various Alt-Svc header attacks, together with potential mitigations for some of them. Finally we conclude in Section 5.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2">Background</head><p>We next provide some historic and current context for the Alternative Services header.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.1">Why Alt-Svc?</head><p>Under the older HTTP/1.1 regimen, servers would typically load balance their clients by means of short-lifetime DNS query responses; as one server would get loaded, the DNS responses would shift toward a different, less busy, server. This worked well because HTTP/1.1 involved many short-lived TCP connections, each with individual HTTP/1.1-requests. However, HTTP/2 introduced various optimizations, most notably the use of longer TCP connections to multiplex multiple HTTP/2 requests. In these cases, clients could bind to DNS queries for longer periods of time, thereby complicating load-balancing efforts among servers.</p><p>The Alternative Services HTTP-header (Alt-Svc) was designed, in part, to help alleviate this problem by allowing a server to specify alternative endpoints for client loads <ref type="bibr" target="#b23">[26]</ref>.</p><p>For example, a client loading a page from www.example.com could receive a server response specifying an Alt-Svc header pointing to another endpoint, say other.example.com. For subsequent requests, the browser may choose from which domain to load the page (i.e., the primary or one of the alternates). It could also cache the header values for a period of time (specified via the ma parameter). By default, these cached values are supposed to be invalidated when the client machine changes network, unless the persist parameter is set. A typical header thus looks as follows:</p><formula xml:id="formula_0">Alt-Svc:</formula><p>http/1.1="other.example.com:443"; ma=2928333; persist=1</p><p>The header here suggests that an alternate endpoint for the HTTP/1.1 protocol (specified via the http/1.1 keyword) is available at other.example.com. This endpoint is valid for 2928333 seconds and should be persisted across network changes. Indeed, the ma parameter could even be as short as a few seconds. This makes Alt-Svc extremely flexiblewebsites can conveniently advertise new endpoints and remove existing ones very quickly -more so than other load balancing approaches such as DNS Round Robin, where such on-the-fly changes may be more limited. Websites may also choose to advertise endpoints for protocols other than HTTP/1.1, such as HTTP/2 over TLS (h2), HTTP/2-over plain text (h2c), QUIC (quic), SPDY (spdy), and the like. This enables gradual adoption of new protocols, and is in fact the main reason why browsers today support the Alt-Svc header. Note that the Alt-Svc header is not used to upgrade a browser's connection to a newer protocol-that happens lower on the network stack, during protocol negotiation. The Alt-Svc header is used merely to make the client browser aware of new endpoints that support other protocols.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.2">Browser implementation</head><p>The typical function of browsers that support Alternative Services (such as Firefox, Tor, Brave and Chrome), when encountering a page or an iframe that presents an Alt-Svc header, follows the scheme in <ref type="figure" target="#fig_0">Figure 1</ref>: the browser attempts to connect to the endpoint specified in the header, in the background, while the content of the page continues to load in the foreground. When the background connection to the alternate endpoint succeeds, the client browser validates the alternate site's certificate against the original domain endpoint. If validation succeeds, the client proceeds to load some of the site content from the alternate endpoint. Note that the reason for this cross-validation of the alternate certificate against the original domain is to establish the original web server's control over the alternate endpoint (i.e. maintaining the "same-origin" policy <ref type="bibr" target="#b23">[26]</ref>).</p><p>However, the mere fact that the browser initiates a connection to any specified endpoint (whether or not the endpoint is eventually deemed as valid) is ripe for exploitation, as we demonstrate in Sections 4.1 and 4.3. When the endpoint specified has been validated, most browsers cache the endpoint for future visits, and this too can be exploited for tracking and history exfiltration (Sections 4.4 and 4.5).</p><p>Note that the user has no control over or browser-based visibility into this alternative services behavior. Worse yet, Alt-Svc header adherence is enabled by default on all four browsers (Firefox, Chrome, Tor, and Brave), making these attacks both more insidious and stealthy.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.3">Uses in the wild</head><p>Alternative Services have grown in their use-cases over the years. On the server-side, Google services (the search engine, Gmail, etc) advertise an alternate endpoint for serving content over their own UDP-based QUIC protocol. Other websites, like Facebook, detect Tor client browsers and use the Alt-Svc header to advertise onion hidden service endpoints. Websites may also use the header to enable opportunistic encryption, "opportunistically" loading some content over an encrypted channel without committing to site-wide HTTPS <ref type="bibr">[27]</ref>.</p><p>On the client side, Chrome and Brave Browser have supported QUIC-based alternative endpoints since 2015 <ref type="bibr" target="#b6">[7]</ref> (where support for the QUIC protocol is, for now, denoted as an experimental feature and is gated by a preference flag). Firefox and Tor browsers, in turn, have supported HTTP/2-based Alt-Svc connections since 2015 <ref type="bibr">[8]</ref>. In fact, most of these browsers aggressively adhere to the Alt-Svc header for the protocol each supports, loading all content from the alternative endpoint for all subsequent requests when the original endpoint did not already serve content over the more advanced HTTP/2 or QUIC protocol. The lone exception is the Tor browser, which tends to be more conservative with Alt-Svc endpoints and only uses them some, not all, of the times. There have been numerous works that demonstrate how a malicious website can force a browser to scan target TCP ports from the context of users that visit the website <ref type="bibr" target="#b26">[30,</ref><ref type="bibr" target="#b29">33,</ref><ref type="bibr" target="#b30">34,</ref><ref type="bibr" target="#b51">57]</ref>. Such third-party scanning enables the attacker to remain hidden from the target, since the scanning is done by the victim's browser. It also allows attackers to scan hosts that are only accessible to the victim (e.g., machines on a private network). However, the potential for cross protocol scripting attacks <ref type="bibr" target="#b44">[49]</ref> has led major modern browsers prohibit access to certain ports <ref type="bibr" target="#b19">[22,</ref><ref type="bibr" target="#b39">44]</ref>. This port blacklist includes most interesting or privileged ports, and this limits the effectiveness of existing browser-based port scanning solutions. A different approach by Heralla <ref type="bibr" target="#b29">[33]</ref> claims to leverage features such as WebRTC to perform the port scan; however, the author insists that this attack only works against a dedicated server, and not against any arbitrary target of the attacker's choice. Instead, we present a method for scanning any TCP port on any host visible to the victim (including hosts on a private subnet) by using Firefox and Tor's implementation of the Alt-Svc header.</p><p>Our approach also works for UDP-port scanning through the Chrome and Brave browsers, albeit only for ports that are not blacklisted because Chrome and Brave's Alt-Svc implementation strictly adheres to the port blacklist <ref type="bibr" target="#b39">[44]</ref>. To the best of our knowledge, this is a new attack capability, since the existing approaches generally leverage TCP-based HTTP-requests for their activities. Herrala <ref type="bibr" target="#b30">[34]</ref> does claim a technique for UDP scanning, but, by his own report, it suffers from the same limitations as in the TCP case, namely that it cannot be used against an arbitrary target.</p><p>Today, there are many services that protect Internet users from malicious websites. Some of these are browser based, such as built-in features in Chrome, Firefox, and Brave <ref type="bibr" target="#b12">[15,</ref><ref type="bibr" target="#b36">41]</ref>. Others are online tools that evaluate any given website or URL <ref type="bibr">[35,</ref><ref type="bibr" target="#b43">48,</ref><ref type="bibr" target="#b45">50,</ref><ref type="bibr" target="#b48">54]</ref>. These scanners operate by blacklisting domain names known to be associated with malicious content. Chrome and Brave will typically display conspicuous warnings if a user directly visits a suspicious website, or even a white-listed website loads some content from a blacklisted domain (see <ref type="figure" target="#fig_3">Figure 4</ref>). Firefox will also display a similar warning page when a user directly visits a malicious website, and it refuses to load and render third-party content from blacklisted domains, throwing a security error visible in the JavaScript Console. The online scanners like VirusTotal, IPVoid, URLVoid, Sucuri, etc. <ref type="bibr">[35,</ref><ref type="bibr" target="#b43">48,</ref><ref type="bibr" target="#b45">50,</ref><ref type="bibr" target="#b48">54]</ref>, on the other hand, maintain independent evaluations of most websites, and will appraise user-specified sites against their database for safety. In this work, we show how we can use Alt-Svc to bypass these blacklists.</p><p>There has also been prior work on browser based BotNets used for DDoS attacks <ref type="bibr" target="#b25">[29,</ref><ref type="bibr" target="#b31">36,</ref><ref type="bibr">53]</ref>. However, since attackers are operating typically through HTML and JavaScript, they are limited to attacking services on TCP ports that are not on the browser blacklist, and thus typically only attack other web servers. However, our techniques on Firefox and Tor allow attackers to flood any port with packets, thus allowing attacks on other services (e.g., e-mail servers) from within the confines of a browser.</p><p>There has also been much work done on browser-based user tracking <ref type="bibr" target="#b8">[11,</ref><ref type="bibr" target="#b13">16]</ref>. Prior literature has shown how various browser caches can be used for tracking users, for example: the HTTP 301 redirect cache <ref type="bibr" target="#b49">[55]</ref>, the HTTP authentication cache <ref type="bibr" target="#b27">[31]</ref>, the HSTS cache <ref type="bibr" target="#b28">[32]</ref> and DNS caches <ref type="bibr" target="#b21">[24]</ref>. There has also been work that demonstrates the ability of several identifiers such as Etag and Last-Modified header values to be used for tracking <ref type="bibr" target="#b4">[5,</ref><ref type="bibr" target="#b10">13]</ref>. More recent independent (and concurrent published) work briefly discussed some of the concerns with tracking using Alt-Svc <ref type="bibr" target="#b46">[51]</ref>. Device fingerprinting presents another class of techniques to statelessly track a user. Various attributes such as the User-Agent string, HTML5 canvas fingerprinting, screen-size, resolution, list of installed plugins, and the like have been shown to reveal identifying information about users <ref type="bibr" target="#b20">[23]</ref>. Other identifying information can be obtained through JavaScript performance and conformance tests <ref type="bibr" target="#b35">[40,</ref><ref type="bibr" target="#b37">42]</ref>, mobile sensors <ref type="bibr" target="#b18">[21]</ref> and font enumeration <ref type="bibr" target="#b22">[25]</ref>. In this work, we present yet another technique for user tracking using the Alt-Svc header. Our techniques bypass third-party tracker blocking options instituted in most browsers today <ref type="bibr" target="#b32">[37]</ref>.</p><p>Further, in addition to browser based tracking, there have also been techniques for network-based tracking and fingerprinting <ref type="bibr" target="#b34">[39,</ref><ref type="bibr" target="#b47">52,</ref><ref type="bibr" target="#b52">58]</ref>. The technique widely used for this is MAC address tracking, which is why most companies today randomize their MAC addresses <ref type="bibr" target="#b2">[3,</ref><ref type="bibr" target="#b9">12]</ref>. To overcome these challenges in tracking, we present a new technique for networklocal adversaries to track a particular user using Alt-Svc. This can be done without the need to install any third-party cookies or known trackers, thus presenting a convenient way to track using network traffic data.</p><p>Finally, we also show how the Alt-Svc header can be used by a network level attacker to exfiltrate a user's browser history. Our attack requires a threat model similar to the history exfiltration technique presented by Dabrowski et. al. <ref type="bibr" target="#b17">[20]</ref>. Their work demonstrates how a Captive Wi-Fi Portal (i.e., an internet provider that also has a network login webpage) can be used to exfiltrate a victim's browser history by leveraging the HSTS cache and cached HTTP cookies. However, the techniques they present have certain limitations-for instance, their exfiltration techniques do not work against websites that are on the browser's pre-loaded HSTS list, or against websites that use secure cookies. Our technique does not face these limitations, and thus may be used to complement their attacks. Our work also differs from other prior works on history inference <ref type="bibr" target="#b11">[14,</ref><ref type="bibr" target="#b50">56]</ref>, which require a browser-based adversary rather than a network-based adversary.</p><p>Finally, unlike most JavaScript based website attacks, our techniques operate at a layer below on the browser level, and thus are not visible to both the victim and any JavaScriptbased detection techniques. This, coupled with the fact that all our attacks require no user interaction and could be mounted via third-party web content, makes our techniques especially pernicious. It is thus essential that these vulnerabilities be fixed at their source-in the browser. For this, we are currently working with the affected browser vendors to implement the appropriate patches, where possible.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4">Attacks</head><p>We next discuss the different ways in which Alt-Svc can be abused. For each attack, we describe, in technical detail, the impact, the browsers affected, and our experimental results. We note that the impact of the attacks in Sections 4.1 through 4.4 depend on browser adoption of Alt-Svc, which is widespread. The impact of the attacks in Sections 4.5 and 4.6, on the other hand, depend on server adoption, which is currently limited to large web companies.</p><p>Threat Model Our attacks can be classified into two different classes, based on the threat model involved. The first class involves an adversary that runs one or more websites (i.e., through a single domain, or multiple colluding domains). The second model involves an attacker that runs one website, but can also monitor the victim's network traffic. The second attacker could be the victim's internet provider or a public network provider akin to those found in coffee shops, both of which typically can monitor the victim's (encrypted) traffic and also control certain web pages that the victim would need to use (e.g., network login pages).</p><p>In both attacker models, we assume that the attacker has no access to the victim's machine outside of the browser sandboxi.e., no hardware or operating system access. Furthermore, even within the browser, we assume that the attacker can only control data within her own website origin. Finally, it is important to stress that none of the attacks require any interaction from the user (assuming, for Chrome and Brave users, that they have the QUIC protocol enabled, which, for now, is an experimental feature behind a preference flag).</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.1">Distributed port scanning</head><p>The Alt-Svc header may be leveraged to force an unwitting Firefox or Tor user to scan any TCP ports of any host that the victim can access. This vulnerability has been publicly disclosed by Mozilla as CVE-2019-11728 <ref type="bibr" target="#b1">[2]</ref>. This includes ports that Firefox and Tor mark as unsafe and are otherwise inaccessible through JavaScript. For Firefox, the attacker can access hosts behind the victim's firewall or even the victim's machine itself (i.e., localhost), and for Tor, the attacker can scan public targets that the exit node can access. The attack naturally lends itself to a stealthy distributed port scanning of a target from multiple victim browsers connecting to the attacker's website. The header can also be used to scan UDP ports on Chrome and Brave, although some of these ports are blacklisted <ref type="bibr" target="#b39">[44]</ref>.</p><p>The basis of this attack is the observation that if a website specifies an Alt-Svc header to a secondary host with an HTTP/2/QUIC endpoint, then browsers immediately try to initiate a handshake with the secondary host, without performing any checks on the host or port; the secondary host could even be a private IP or localhost, and the port could be on the browser's HTTP port blacklist.</p><p>The port-scanning thus proceeds with the attacker creating a webpage (e.g., https://evil.com/p1) whose Alt-Svc is set to the target host and port (see <ref type="figure" target="#fig_1">Figure 2)</ref>. When the victim then visits this page, the victim's browser parses this alternative endpoint and attempts to initiate a connection to the target host on the specified port:</p><p>1. If the target port is in a closed state, the target immediately returns a RST packet to the browser and the browser registers the alternative service as broken.</p><p>2. However, if the target port is in an open state, more packets are typically exchanged (e.g., ACKs) and the browser thus does not immediately know whether the Alt-Svc host is valid.</p><p>To discern between these two possible states of the target port, the attacker then automatically redirects the victim to a second webpage on the same attacker host (e.g., https://evil.com/p2), but whose Alt-Svc host is under the attacker's control (e.g., moreevil.com). Two cases emerge:</p><p>1. The browser has determined that the original Alt-Svc (i.e., the target host and port) is broken, and the redirect will produce an immediate connection to the secondary attacker site (moreevil.com) that can be logged by the attacker.</p><p>2. The browser has not yet determined that the original Alt-Svc is broken, and the redirect will not produce a connection to the secondary attacker site (moreevil.com).</p><p>In this way the attacker can infer whether the target port was open or closed.</p><p>We have implemented this on Firefox and Tor using an h2 (HTTP/2) Alt-Svc endpoint advertisement, sent upon loading a (hidden) iframe embedded within a page. We provide a screenshot of our demo website on Firefox as it scans port 25 (a port whose access is otherwise restricted through the browser) on the victim's localhost in <ref type="figure" target="#fig_2">Figure 3</ref>. Within Firefox, we are able to scan public and even private hosts, including localhost and private IP addresses. Within Tor, we are not able to scan localhost and private IP addresses, presumably because the Tor exit nodes cannot access  We have also implemented this attack on the Chrome and (Chromium based) Brave browser using a quic (QUIC) Alt-Svc endpoint advertisement. Here we are able to scan UDP ports, although both browsers prevent even alternative connections to certain blocked ports (e.g., SMTP port 25) <ref type="bibr" target="#b39">[44]</ref>. We are, however, able to scan arbitrary hosts for UDP ports through the browsers, which we believe is novel. We have disclosed this vulnerability to Google, and are in discussions about mitigations.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.2">Bypassing malware/phishing protections</head><p>Chrome, Firefox and Brave browsers currently block domains known to host malware and phishing websites by checking for blacklisted domains through Google's Safe Browsing <ref type="bibr" target="#b12">[15,</ref><ref type="bibr" target="#b36">41]</ref>. When a user attempts to visit a domain that is known to be associated with deceptive activity, the page is not loaded and a conspicuous warning is displayed (see <ref type="figure" target="#fig_3">Figure 4)</ref>. Safe Browsing is triggered even if the first-party domain is safe but contains any third party content from a suspicious website (e.g., an image from a blacklisted domain). In this scenario, Chrome and Brave display the same warning as in <ref type="figure" target="#fig_3">Figure 4</ref>, blocking all content even from the clean first-party webpage. Firefox, on the other hand, only blocks the the unsafe thirdparty content, while still displaying all content from the safe first-party and other safe third parties. Under these conditions, the victim is precluded from visiting a site that is known to be malicious, even if a white-listed first-party domain is convinced (or colludes) to load content from the malicious website.</p><p>However, if a clean, whitelisted first-party specifies a black- Effectively, Alt-Svcs allow the attacker to have "twofaced" content-clean content on the original endpoint and malicious content on the alternate endpoint. And so, anyone viewing the website through an Alt-Svc-aware browser will see the malicious content, while others will see the clean content. Hence, even if a user tries reporting the "clean" site as malicious to an online clearinghouse (like Safe Browsing's Reporting page), automated tools that are not Alt-Svc-aware will not see any of the malicious content.</p><p>In fact, a website that is itself whitelisted but has a blacklisted Alt-Svc also bypasses many popular online site checking tools like VirusTotal, URLVoid, Sucuri and IPVoid <ref type="bibr">[35,</ref><ref type="bibr" target="#b43">48,</ref><ref type="bibr" target="#b45">50,</ref><ref type="bibr" target="#b48">54]</ref>. These websites accept a user-provided URL and evaluate the safety of the corresponding website by comparing it against their own database. We have found that if the main first-party domain is not on any blacklist for these scanners, the website is reported as safe even if the Alt-Svc points to a blacklisted domain. This should not happen because even though the main domain points to a whitelisted website, all the content is effectively loaded from the blacklisted site. Hence, all protection mechanisms should not only check the first-party domain, but also check the Alt-Svc to see if it is in the blacklist before marking a website as safe.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.3">Distributed Denial of Service</head><p>Firefox and Tor browsers do not maintain a memory of broken Alt-Svc endpoints (unlike the Chrome and Brave browsers). Hence every time a page is reloaded, a connection to its Alt-Svc is attempted (if one is specified). This happens even if the browser had attempted a connection to the same Alt-Svc in a previous load and realized that it was broken (i.e., due to certificate mismatch or some other issue). As such, if we produce a reload loop in an iframe, we could force the victim's browser to repeatedly initiate TLS connections with a target server/port combination (as in the "port scanning" attack in Section 4.1), effectively denying service to it. This is different from the standard JavaScript DDoS attacks, because Firefox and Tor do not check the port number of the Alt-Svc connection. For example, the attacker could force a number of distributed victims to repeatedly initiate TLS handshakes to specific non-HTTP speaking services (e.g., secure email and FTP servers that run on ports whose access is otherwise blocked from JavaScript), and force them to repeatedly present their certificates. This is a classic reflected amplification attack: fairly low effort on the client's part because the client hello packet is very small, but high effort on the server's part as the server hello packet may be quite large due to large server certificates. The ampflication is presented in <ref type="table">Table 1</ref> (columns 2 and 3), for some concrete servers; for example, a connection request to smpt.bu.edu (port 465) requires the server to respond with roughly 60x more data than the client sends. Furthermore, the short TLS handshake round-trips in the final column of the table are reflective of the correspondingly short intervals at which the browser can force the target machine to present its certificate, further amplifying the transmission/reception imbalance over a short period of time. This amplification attack could thus exhaust a target server's resources, either from a single client or as part of a distributed attack where multiple browsers continuously ask these non-HTTP services to present their certificates.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Server</head><p>Amplification attacks, in general, have been known to take down web servers, as happened for hours in 2014 <ref type="bibr" target="#b16">[19,</ref><ref type="bibr">53]</ref> with Wordpress's pingback feature . However, the Wordpress techniques, as well as other prior JavaScript-based DDoS   techniques, were limited to attacking web servers, whereas our attack can attack a broader range of services (e.g., e-mail severs). Needless to say, our attack should not be possible from a typical browser, which should only be connecting to HTTP speaking endpoints. More generally, even services that do not speak TLS can be targeted. Many plain-text email and FTP servers have long timeouts for every connection; an example list of such (live) services is provided in <ref type="table" target="#tab_2">Table 2</ref>. For instance, consider the situation where the attacker forces a victim browser to send a TLS client hello packet to a plain-text email service (i.e., SMTP port 25) by appropriately setting its Alt-Svc to point to that service. Even though the email server does not understand the hello packet, it still keeps the connection open for as long as the browser requests-30-40 seconds, after which point the browser itself typically terminates the connection. If enough victim browsers are made to target a server, it may be possible to exhaust all available connections on the target server as yet another denial of service.</p><p>Both Firefox and Tor have confirmed this issue and have instituted the patch we suggest in Section 4.7. </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.4">Tracking</head><p>By specifying a unique Alt-Svc for each user, and observing subsequent user requests, an attacker could track a user both as a first-party website and a third-party iframe or image, as illustrated in <ref type="figure" target="#fig_5">Figure 6</ref>. On Firefox, if the original endpoint uses HTTP/1.1 and specifies an Alt-Svc endpoint for HTTP/2, the Alt-Svc endpoint is always used over the original, since it presents the newer protocol. Further, the Alt-Svc header is cached for as long as the attacker specifies via the ma parameter, persisting across sessions. Hence, as long as the user does not clear their browsing history, this can be reliably used for persistent tracking. Similar behavior is seen for the QUIC protocol with Chrome, and even Brave, which is supposed to safeguard users from such persistent tracking. In fact, Alt-Svc tracking also bypasses the built-in third-party tracking protection mechanisms on Firefox and Chrome, when such features are enabled. We have notified all affected vendors of this issue and suggested mitigations to prevent abuse of the header. The only exception to this attack is Tor, which disallows disk persistence and supports firstparty cache isolation, thus preventing any cross-session and third-party tracking, but still allowing same-session first-party tracking.</p><p>Finally, since the Alt-Svc header allows specifying a unique IP address and port combination, an ISP, which cannot decrypt connection data, can track the use of a unique Alt-Svc header. Most hardware vendors today randomize MAC addresses, a common tracking identifier of recent use, making Alt-Svc an attractive alternative <ref type="bibr" target="#b2">[3,</ref><ref type="bibr" target="#b9">12]</ref>. In a sample use-case, an ISP can embed within its network login page a tracking iframe that specifies a unique Alt-Svc as in <ref type="figure">Figure 7</ref>. This makes the victim cache the unique Alt-Svc header for the tracking domain as part of the "planting phase" noted as Step 1 in <ref type="figure">Figure 7</ref>. In the "tracking" phase (Step 2 in the figure), the ISP (and this could be a different ISP than before) inserts the same tracking iframe into their network login page and checks which unique Alt-Svc endpoint the client loads. Unique third-party cookies could perform iframe tracking in a similar manner, but they are currently </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>ISP X (can see unique domain)</head><p>Step 2: track</p><p>Step 1: plant <ref type="figure">Figure 7</ref>: Network level tracking using Alt-Svc.</p><p>blocked by many services <ref type="bibr" target="#b32">[37]</ref>. We tested, and appropriately disclosed, ISP tracking on Chrome, Brave and Firefox and Tor, and it is effective on all browsers except Tor (which practices first-party cache isolation).</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.5">Network level browser history exfiltration</head><p>ISPs (or any other active man-in-the-middle attacker) may also abuse Alt-Svc to exfiltrate a browser's history, without requiring any user interaction. This history exfiltration attack involves a technique similar to the network level tracking presented in Section 4.4. Let us assume that the ISP wants to know if a particular user visited www.illegal.com sometime in the past (while on a different ISP that was outside the window of observation of the current ISP). For the sake of exposition, assume that www.illegal.com also sets an Alt-Svc header that points to its load-balancer alt.illegal.com. Now all the ISP needs to be able to do is to insert an image or iframe from www.illegal.com within their login web page (or any other webpage that they control). Then the ISP needs to monitor from where the image/iframe is loaded -the original domain, or the Alt-Svc domain. If it is loaded from the Alt-Svc endpoint, then the user must have visited the website before because there is no other way for the user's browser to know of the Alt-Svc endpoint than to have cached it from a prior visit. Otherwise, the user has not visited the website before. The granularity with which the ISP can exfiltrate history depends on the ma value set in the website's Alt-Svc, which is as short as 4 weeks for websites like the Google search engine.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.6">Triggering anomaly false positives on Intrusion Detection Systems</head><p>Our port access capabilities might be useful in triggering Intrusion Detection Systems (IDSs). An attacker need only specify Alt-Svc values for the target service, and let the victims visit the malicious website to initiate connections to the Alt-Svc endpoint. The victim could, for example, be forced to connect to unusual ports (like port 0 through Firefox or Tor), access long chains of consecutive ports (mimicking a port scan), or send UDP-traffic to services not typically expecting it. All of these unusual behaviors may trigger some IDS systems, adding to their false positive maintenance load. Of course, the effectiveness of this approach depends on the specific configuration of a given IDS, and thus we only present it as a potential malicious use-case for the Alt-Svc header.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.7">Mitigations</head><p>Many of the issues discussed about Alt-Svc are fundamental to its design, and so mitigations are not straightforward. Nevertheless, there are a few fixes that can be employed. First of all, like Chrome and Brave, Firefox and Tor should make Alt-Svc headers adhere to the same port blacklist as regular URLs <ref type="bibr" target="#b19">[22]</ref>. Indeed, Firefox lets a browser access any and every port through an Alt-Svc header, whereas it blacklists certain ports otherwise. Blocking popular non-HTTP ports will make distributed port scanning of these ports a lot harder. It will also deter DDoS attacks, since ports that are likely to be running interesting services will no longer be accessible through Alt-Svc. In response to our disclosure, Mozilla has updated the blacklist to prevent these two attacks, and published this as CVE-2019-11728 <ref type="bibr" target="#b1">[2]</ref>.</p><p>In fact, all browsers should also check both primary domains and alternative service endpoints against their blacklists. Skipping blacklist checks for Alt-Svc allows an attacker to load content from malicious blacklisted domains and undermines the phishing and malware protections of Safe Browsing. For the same reasons, website evaluators such as VirusTotal URLVoid, IPVoid, and Sucuri should also check Alt-Svc endpoints against blacklists. Even automated scanners that assess the content of websites to generate these domain blacklists should be Alt-Svc aware due to the "two-faced" content that Alt-Svc headers make possible.</p><p>Further, like Tor, all browsers-Firefox, Chrome and Brave, should practice first-party cache isolation for the Alt-Svc header, which can prevent the tracking and history exfiltration attacks presented in Section 4.4 and 4.5. If not this, then they should at least prevent websites from setting Alt-Svcs through third-party content like iframes and images. This would help impede third-party tracking.</p><p>Finally, all browser vendors should also present a user option to disable Alt-Svc headers-currently this feature is enabled by default and cannot be disabled by users.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5">Conclusion</head><p>We have shown how the relatively new but widely adopted Alt-Svc header can be abused for various attacks, including distributed port-scanning (of external and internal networks), bypassing domain blacklists, DDoS of non-HTTP services, history exfiltration and tracking (on first-and third-party websites, and at the network layer), and possibly triggering Intrusion Detection Systems. This is despite (i) a considerable history of HTTP attacks and defenses over almost thirty years, (ii) development by independent, highly competent, browserdeveloper teams across several companies, and (iii) the simplicity and straightforwardness of the header. In the immediate mode, we hope that our mitigations will be implemented to resolve as many of these attacks as possible. However, as Alt-Svc gains support throughout the browser community, we further hope that this work highlights and adds to the types of concerns that should be considered.</p></div><figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_0"><head>Figure 1 :</head><label>1</label><figDesc>Figure 1: Typical functioning of Alt-Svc.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_1"><head>Figure 2 :</head><label>2</label><figDesc>Figure 2: A browser based port scanner.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_2"><head>Figure 3 :</head><label>3</label><figDesc>Figure 3: A screenshot of our tool for browser based portscanning in action, as it scans port 25 on the victim's localhost through Firefox</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_3"><head>Figure 4 :</head><label>4</label><figDesc>Figure 4: Warning for deceptive website on Chrome</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_4"><head>Figure 5 :</head><label>5</label><figDesc>Figure 5: Data amplification DDoS attacks.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_5"><head>Figure 6 :</head><label>6</label><figDesc>Figure 6: Third party tracking using Alt-Svc.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_6"><head>&lt;iframe src="orig.tracking.</head><label></label><figDesc>com"&gt; orig.tracking.com GET iframe Alt-Svc: x029.tracking.com ISP X victim login.ispX.com &lt;iframe src="orig.tracking.com"&gt; x029.tracking.com GET iframe HTML ...</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_2" validated="false"><head>Table 2 :</head><label>2</label><figDesc></figDesc><table>Live servers that have long time-outs (at least 30 
seconds) for Alt-Svc connections, making them vulnerable 
to DDoS attacks. 

</table></figure>
		</body>
		<back>
			<div type="references">

				<listBibl>

<biblStruct xml:id="b0">
	<monogr>
		<title level="m" type="main">Advanced ddos attack protection</title>
		<ptr target="https://www.cloudflare.com/ddos/" />
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b1">
	<monogr>
		<title level="m" type="main">CVE-2019-11728: Mozilla found. security advisory</title>
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b2">
	<monogr>
		<title level="m" type="main">Privacy: Mac randomization</title>
		<ptr target="https://source.android.com/devices/tech/connect/wifi-mac-randomization" />
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b3">
	<monogr>
		<title level="m" type="main">Disable tls session resumption and session ids</title>
		<ptr target="https://trac.torproject.org/projects/tor/ticket/4099" />
		<imprint>
			<date type="published" when="2011" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b4">
	<monogr>
				<ptr target="https://www.nikcub.com/posts/persistantand-unblockable-cookies-using-http-headers" />
		<title level="m">Persistent and unblockable cookies using http headers</title>
		<imprint>
			<date type="published" when="2011" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b5">
	<monogr>
		<title level="m" type="main">Ddos attack from browser-based botnets that lasted for 150 hours</title>
		<ptr target="https://thehackernews.com/2013/11/ddos-attack-from-browser-based-botnets.html" />
		<imprint>
			<date type="published" when="2013" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b6">
	<monogr>
		<title level="m" type="main">Issue 392575: Implement the alt-svc spec</title>
		<ptr target="https://bugs.chromium.org/p/chromium/issues/detail?id=392575" />
		<imprint>
			<date type="published" when="2014" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b7">
	<monogr>
		<title level="m" type="main">List of public corporations by market capitalization</title>
		<ptr target="https://en.wikipedia.org/wiki/List_of_public_corporations_by_market_capitalization" />
		<imprint>
			<date type="published" when="2019" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b8">
	<analytic>
		<title level="a" type="main">Device fingerprinting for augmenting web authentication: classification and analysis of methods</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Furkan</forename><surname>Alaca</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Paul C Van</forename><surname>Oorschot</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 32nd Annual Conference on Computer Security Applications</title>
		<meeting>the 32nd Annual Conference on Computer Security Applications</meeting>
		<imprint>
			<publisher>ACM</publisher>
			<date type="published" when="2016" />
			<biblScope unit="page" from="289" to="301" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b9">
	<monogr>
		<title level="m" type="main">What&apos;s really happening with ios 8 mac address randomization?</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Nick</forename><surname>Arnottt</surname></persName>
		</author>
		<ptr target="https://www.imore.com/closer-look-ios-8s-mac-randomization" />
		<imprint>
			<date type="published" when="2014" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b10">
	<monogr>
				<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Dietrich</forename><forename type="middle">James</forename><surname>Mika D Ayenson</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Ashkan</forename><surname>Wambach</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Nathan</forename><surname>Soltani</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Chris</forename><forename type="middle">Jay</forename><surname>Good</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Hoofnagle</surname></persName>
		</author>
		<title level="m">Flash cookies and privacy ii: Now with html5 and etag respawning. Available at SSRN 1898390</title>
		<imprint>
			<date type="published" when="2011" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b11">
	<monogr>
		<title level="m" type="main">visited support allows queries into global history</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">David</forename><surname>Baron</surname></persName>
		</author>
		<ptr target="https://bugzilla.mozilla.org/show_bug.cgi?id=147777" />
		<imprint>
			<date type="published" when="2012" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b12">
	<monogr>
		<title level="m" type="main">Making the world&apos;s information safely accessible</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Google Safe Browsing</surname></persName>
		</author>
		<ptr target="https://safebrowsing.google.com/" />
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b13">
	<monogr>
				<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Tomasz</forename><surname>Bujlow</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Valentín</forename><surname>Carela-Español</surname></persName>
		</author>
		<title level="m">Josep SolePareta, and Pere Barlet-Ros. A survey on web tracking: Mechanisms, implications, and defenses. Proceedings of the IEEE</title>
		<imprint>
			<date type="published" when="2017" />
			<biblScope unit="volume">105</biblScope>
			<biblScope unit="page" from="1476" to="1510" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b14">
	<analytic>
		<title level="a" type="main">Deterministic browser</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Yinzhi</forename><surname>Cao</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Zhanhao</forename><surname>Chen</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Song</forename><surname>Li</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Shujiang</forename><surname>Wu</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 2017 ACM SIGSAC Conference on Computer and Communications Security</title>
		<meeting>the 2017 ACM SIGSAC Conference on Computer and Communications Security</meeting>
		<imprint>
			<publisher>ACM</publisher>
			<date type="published" when="2017" />
			<biblScope unit="page" from="163" to="178" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b15">
	<monogr>
		<title level="m" type="main">Privacy tools: How to block online tracking</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Hanqing</forename><surname>Chen</surname></persName>
		</author>
		<ptr target="https://www.propublica.org/article/privacy-tools-how-to-block-online-tracking" />
		<imprint>
			<date type="published" when="2014" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b16">
	<monogr>
		<title level="m" type="main">More than 162,000 wordpress sites used for distributed denial of service attack</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Daniel</forename><surname>Cid</surname></persName>
		</author>
		<ptr target="https://blog.sucuri.net/2014/03/more-than-162000-wordpress-sites-used-for-distributed-denial-of-service-attack.html" />
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b17">
	<analytic>
		<title level="a" type="main">Browser history stealing with captive wi-fi portals</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Dabrowski</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">G</forename><surname>Merzdovnik</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">N</forename><surname>Kommenda</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">E</forename><surname>Weippl</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">2016 IEEE Security and Privacy Workshops (SPW)</title>
		<imprint>
			<date type="published" when="2016-05" />
			<biblScope unit="page" from="234" to="240" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b18">
	<analytic>
		<title level="a" type="main">Tracking mobile web users through motion sensors: Attacks and defenses</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Anupam</forename><surname>Das</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Nikita</forename><surname>Borisov</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Matthew</forename><surname>Caesar</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">NDSS</title>
		<imprint>
			<date type="published" when="2016" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b19">
	<monogr>
		<title level="m" type="main">Mozilla port blocking</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Mdn Web Docs</surname></persName>
		</author>
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b20">
	<analytic>
		<title level="a" type="main">How unique is your web browser?</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Peter</forename><surname>Eckersley</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">International Symposium on Privacy Enhancing Technologies Symposium</title>
		<imprint>
			<publisher>Springer</publisher>
			<date type="published" when="2010" />
			<biblScope unit="page" from="1" to="18" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b21">
	<analytic>
		<title level="a" type="main">Timing attacks on web privacy</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">W</forename><surname>Edward</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Felten</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Michael</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Schneider</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 7th ACM conference on Computer and communications security</title>
		<meeting>the 7th ACM conference on Computer and communications security</meeting>
		<imprint>
			<publisher>ACM</publisher>
			<date type="published" when="2000" />
			<biblScope unit="page" from="25" to="32" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b22">
	<analytic>
		<title level="a" type="main">Fingerprinting web users through font metrics</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">David</forename><surname>Fifield</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Serge</forename><surname>Egelman</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">International Conference on Financial Cryptography and Data Security</title>
		<imprint>
			<publisher>Springer</publisher>
			<date type="published" when="2015" />
			<biblScope unit="page" from="107" to="124" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b23">
	<monogr>
		<title level="m" type="main">Http alternative services</title>
		<ptr target="https://tools.ietf.org/html/rfc7838" />
		<imprint/>
		<respStmt>
			<orgName>Internet Engineering Task Force</orgName>
		</respStmt>
	</monogr>
</biblStruct>

<biblStruct xml:id="b24">
	<monogr>
		<title level="m" type="main">How a website flaw turned 22,000 visitors into a botnet of ddos zombies</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Dan</forename><surname>Goodin</surname></persName>
		</author>
		<ptr target="https://arstechnica.com/information-technology/" />
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b25">
	<monogr>
				<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Grossman</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Johansen</surname></persName>
		</author>
		<title level="m">Million browser botnet</title>
		<imprint>
			<date type="published" when="2013" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b26">
	<monogr>
		<title level="m" type="main">Browser port scanning without javascript</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Jeremiah</forename><surname>Grossman</surname></persName>
		</author>
		<ptr target="https://blog.jeremiahgrossman.com/2006/11/browser-port-scanning-without.html" />
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b27">
	<monogr>
		<title level="m" type="main">Tracking users with basic auth</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Jeremiah</forename><surname>Grossman</surname></persName>
		</author>
		<ptr target="http://jeremiahgrossman.blogspot.com.es/2007/04/trackingusers-without-cookies.htm" />
		<imprint>
			<date type="published" when="2007" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b28">
	<monogr>
		<title level="m" type="main">The double-edged sword of hsts persistence and privacy</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Leviathan</forename><surname>Security Group</surname></persName>
		</author>
		<ptr target="http://www.leviathansecurity.com/blog/the-double-edged-swordof-hsts-persistence-and-privacy" />
		<imprint>
			<date type="published" when="2012" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b29">
	<monogr>
		<title level="m" type="main">How did i turn my browser into a port scanner? tricksy but doable</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Ossi</forename><surname>Herrala</surname></persName>
		</author>
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b30">
	<monogr>
		<title level="m" type="main">Exposing intranets with reliable browser-based port scanning</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Gareth</forename><surname>Heyes</surname></persName>
		</author>
		<ptr target="https" />
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b31">
	<analytic>
		<title level="a" type="main">Browser-based ddos attacks without javascript</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Ryo</forename><surname>Kamikubo</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Taiichi</forename><surname>Saito</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">International Journal of Advanced Computer Science and Applications</title>
		<imprint>
			<biblScope unit="volume">8</biblScope>
			<biblScope unit="issue">12</biblScope>
			<biblScope unit="page" from="276" to="280" />
			<date type="published" when="2017" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b32">
	<monogr>
		<title level="m" type="main">How to block third-party cookies in every web browser</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Matt</forename><surname>Klein</surname></persName>
		</author>
		<ptr target="https://www.howtogeek.com/241006/how-to-block-third-party-cookies-in-every-web-browser/" />
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b33">
	<analytic>
		<title level="a" type="main">Trusted browsers for uncertain times</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">David</forename><surname>Kohlbrenner</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Hovav</forename><surname>Shacham</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">25th {USENIX} Security Symposium ({USENIX} Security 16)</title>
		<imprint>
			<date type="published" when="2016" />
			<biblScope unit="page" from="463" to="480" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b34">
	<monogr>
		<title level="m" type="main">Exclusive: Google&apos;s web mapping can track your phone</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Declan</forename><surname>Mccullagh</surname></persName>
		</author>
		<ptr target="https://www.cnet.com/news/exclusive-googles-web-mapping-can-track-your-phone/" />
		<imprint>
			<date type="published" when="2016" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b35">
	<analytic>
		<title level="a" type="main">Fingerprinting information in javascript implementations</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Keaton</forename><surname>Mowery</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Dillon</forename><surname>Bogenreif</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Scott</forename><surname>Yilek</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Hovav</forename><surname>Shacham</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of W2SP</title>
		<meeting>W2SP</meeting>
		<imprint>
			<date type="published" when="2011" />
			<biblScope unit="volume">2</biblScope>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b36">
	<monogr>
		<title level="m" type="main">How does built-in phishing and malware protection work?</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Support Mozilla</surname></persName>
		</author>
		<ptr target="https://safebrowsing.google.com/" />
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b37">
	<analytic>
		<title level="a" type="main">Fast and reliable browser identification with javascript engine fingerprinting</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Martin</forename><surname>Mulazzani</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Philipp</forename><surname>Reschl</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Markus</forename><surname>Huber</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Manuel</forename><surname>Leithner</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Sebastian</forename><surname>Schrittwieser</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Edgar</forename><surname>Weippl</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">F</forename><forename type="middle">C</forename><surname>Wien</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Web 2.0 Workshop on Security and Privacy (W2SP)</title>
		<imprint>
			<date type="published" when="2013" />
			<biblScope unit="volume">5</biblScope>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b38">
	<monogr>
		<title level="m" type="main">Web isolation -a paradigm change in enterprise cyber attack defense</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Dror</forename><surname>Nahumi</surname></persName>
		</author>
		<ptr target="https://www.nvp.com/blog/web-isolation-paradigm-change-enterprise-cyber-attack-defense/" />
		<imprint>
			<date type="published" when="2016" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b39">
	<analytic>
		<title/>
		<ptr target="https://chromium" />
	</analytic>
	<monogr>
		<title level="j">The Chromium Project. Ports blocked on chromium</title>
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b40">
	<monogr>
		<title level="m" type="main">Phishing: How many take the bait?</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Get Cyber Safe</surname></persName>
		</author>
		<ptr target="https://www.getcybersafe.gc.ca/cnt/rsrcs/nfgrphcs/nfgrphcs-2012-10-11-en.aspx" />
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b41">
	<analytic>
		<title level="a" type="main">Browser history re: visited</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Michael</forename><surname>Smith</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Craig</forename><surname>Disselkoen</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Shravan</forename><surname>Narayan</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Fraser</forename><surname>Brown</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Deian</forename><surname>Stefan</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">12th {USENIX} Workshop on Offensive Technologies ({WOOT} 18)</title>
		<imprint>
			<date type="published" when="2018" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b42">
	<monogr>
				<ptr target="https://www.thesslstore.com/blog/1-4-million-new-phishing-websites-created-every-month/" />
		<title level="m">The SSL Store. 1.4 million new phishing websites are created every month</title>
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b43">
	<monogr>
		<title level="m" type="main">Free website malware and security scanner</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Sucuri</surname></persName>
		</author>
		<ptr target="https://sitecheck.sucuri.net/" />
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b44">
	<monogr>
		<title level="m" type="main">The html form protocol attack</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Jochen</forename><surname>Topf</surname></persName>
		</author>
		<ptr target="https://www.jochentopf.com/hfpa/hfpa.pdf" />
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b45">
	<monogr>
		<title level="m" type="main">Analyze suspicious files and urls to detect types of malware, automatically share them with the security community</title>
		<ptr target="https://www.virustotal.com/#/home/url" />
		<imprint/>
	</monogr>
	<note>Virus Total</note>
</biblStruct>

<biblStruct xml:id="b46">
	<monogr>
		<title level="m" type="main">Does pushing security on clients make them safer? hotpets</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Matthew</forename><surname>Traudt</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Paul</forename><surname>Syverson</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2019" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b47">
	<monogr>
		<title level="m" type="main">Church street tracking of visitors via wi-fi raises privacy concerns</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Morgan</forename><surname>True</surname></persName>
		</author>
		<ptr target="https://vtdigger.org/2016/03/16/church-street-tracking-of-visitors-via-wi-fi-raises-privacy-concerns/" />
		<imprint>
			<date type="published" when="2016" />
		</imprint>
	</monogr>
	<note>53] Krassi Tzvetanov. Wordpress pingback attack</note>
</biblStruct>

<biblStruct xml:id="b48">
	<monogr>
		<title level="m" type="main">Website reputation checker</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Urlvoid</surname></persName>
		</author>
		<ptr target="https://www.urlvoid.com" />
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b49">
	<monogr>
		<title level="m" type="main">Cache cookies: searching for hidden browser storage</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Patrick</forename><surname>Verleg</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Hpe</forename><surname>Van Eekelen</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Vranken</surname></persName>
		</author>
		<ptr target="https://www.cs.ru.nl/bachelors-theses/2014/Patrick_Verleg___3049701___Cache_Cookies_searching_for_hidden_browser_storage.pdf" />
		<imprint>
			<date type="published" when="2014" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b50">
	<analytic>
		<title level="a" type="main">Jackson. I still know what you visited last summer: Leaking browsing history via user interaction and side channel attacks</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Z</forename><surname>Weinberg</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">E</forename><forename type="middle">Y</forename><surname>Chen</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><forename type="middle">R</forename><surname>Jayaraman</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">2011 IEEE Symposium on Security and Privacy</title>
		<imprint>
			<date type="published" when="2011-05" />
			<biblScope unit="page" from="147" to="161" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b51">
	<monogr>
		<title/>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Jan</forename><surname>Berend</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Wever</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Localnetworkscanner</surname></persName>
		</author>
		<ptr target="https://github.com/SkyLined/LocalNetworkScanner/" />
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b52">
	<monogr>
		<title/>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Michal</forename><surname>Zalewski</surname></persName>
		</author>
		<ptr target="http://lcamtuf.coredump.cx/p0f3/" />
		<imprint>
			<date type="published" when="2014" />
		</imprint>
	</monogr>
	<note>p0f v3 (version 3.09b</note>
</biblStruct>

				</listBibl>
			</div>
		</back>
	</text>
</TEI>
