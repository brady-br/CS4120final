<?xml version="1.0" encoding="UTF-8"?>
<TEI xmlns="http://www.tei-c.org/ns/1.0" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
xsi:schemaLocation="http://www.tei-c.org/ns/1.0 /Users/atharsefid/Desktop/grobid-0.5.3/grobid-home/schemas/xsd/Grobid.xsd"
 xmlns:xlink="http://www.w3.org/1999/xlink">
	<teiHeader xml:lang="en">
		<encodingDesc>
			<appInfo>
				<application version="0.5.3" ident="GROBID" when="2020-09-29T02:55+0000">
					<ref target="https://github.com/kermitt2/grobid">GROBID - A machine learning software for extracting information from scholarly documents</ref>
				</application>
			</appInfo>
		</encodingDesc>
		<fileDesc>
			<titleStmt>
				<title level="a" type="main">Fault Isolation and Quick Recovery in Isolation File Systems</title>
			</titleStmt>
			<publicationStmt>
				<publisher/>
				<availability status="unknown"><licence/></availability>
			</publicationStmt>
			<sourceDesc>
				<biblStruct>
					<analytic>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Lanyue</forename><surname>Lu</surname></persName>
							<affiliation key="aff0">
								<orgName type="department">Computer Sciences Department</orgName>
								<orgName type="institution">University of Wisconsin</orgName>
								<address>
									<settlement>Madison</settlement>
								</address>
							</affiliation>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Andrea</forename><forename type="middle">C</forename><surname>Arpaci-Dusseau</surname></persName>
							<affiliation key="aff0">
								<orgName type="department">Computer Sciences Department</orgName>
								<orgName type="institution">University of Wisconsin</orgName>
								<address>
									<settlement>Madison</settlement>
								</address>
							</affiliation>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Remzi</forename><forename type="middle">H</forename><surname>Arpaci-Dusseau</surname></persName>
							<affiliation key="aff0">
								<orgName type="department">Computer Sciences Department</orgName>
								<orgName type="institution">University of Wisconsin</orgName>
								<address>
									<settlement>Madison</settlement>
								</address>
							</affiliation>
						</author>
						<title level="a" type="main">Fault Isolation and Quick Recovery in Isolation File Systems</title>
					</analytic>
					<monogr>
						<imprint>
							<date/>
						</imprint>
					</monogr>
				</biblStruct>
			</sourceDesc>
		</fileDesc>
		<profileDesc>
			<abstract>
				<p>File systems do not properly isolate faults that occur within them. As a result, a single fault may affect multiple clients adversely, making the entire file system unavailable. We introduce a new file system abstraction, called file pod, to allow applications to manage failure and recovery polices explicitly for a group of files. Based on this abstraction, we propose the isolation file system, which provides fine-grained fault isolation and quick recovery.</p>
			</abstract>
		</profileDesc>
	</teiHeader>
	<text xml:lang="en">
		<body>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="1">Introduction</head><p>High availability is critical for file systems. For desktops and laptops, local file systems directly affect data access for the user; for mobile devices <ref type="bibr" target="#b1">[2,</ref><ref type="bibr" target="#b8">9]</ref>, user data is also stored in a local file system; for file and storage servers, a shared cluster file system may be used to store virtual machine disks from multiple clients <ref type="bibr" target="#b12">[13,</ref><ref type="bibr" target="#b2">3]</ref>.</p><p>File systems must handle a wide range of faults <ref type="bibr" target="#b14">[15]</ref>, including resource allocation failures, metadata corruption, failed I/O operations, and incorrect system state. These faults are caused by both hardware defects <ref type="bibr" target="#b3">[4]</ref> and software bugs <ref type="bibr" target="#b7">[8]</ref>.</p><p>Unfortunately, the effect of a single fault can have a large-scale impact on the operation of the entire file system. Such global failures are prevalent in file systems. For example, when Ext3 detects a corruption in the data block bitmap of a block group, it will re-mount the whole file system as read-only or call panic() to crash the operating system. There are also numerous assertions (e.g., Assert, BUG ON) in file system code, which will crash the file system when only a small piece of system state is not as expected.</p><p>Global failures severely harm the availability of file systems in various scenarios. For example, in server virtualization environments, multiple virtual machines share the same underlying host file system; a fault that arises within a single VM image file may lead to a crash or read-only remount, and thus affect all running VMs. Isolation, a key property of virtualized systems, is not preserved.</p><p>To prevent global failures, we propose isolation file systems, which provide fine-grained fault isolation and quick recovery. Isolation file systems have the following major characteristics. First, they are thoroughly partitioned: file system resources are broken down into many independent units. Second, they are independent: any individual fault within defective units will not affect other healthy units. Finally, they are resilient: faulty units can be identified and repaired quickly.</p><p>In this paper, we begin by analyzing the failure causes and global failure policies of existing file systems. Motivated by this data, we propose a new file system abstraction known as a file pod which allows applications to manage failure policies and recovery polices for their data. We then briefly sketch an implementation of isolation file system based on the existing Ext3 file system.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2">Failure Policies in File Systems</head><p>Before describing the isolation approach, we first analyze existing file systems and their reaction to various faults. This section presents our initial results.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.1">Global Fault-Handling Policies</head><p>Global fault-handling policies are used to react to serious errors within a file system. Such serious errors include metadata corruption, I/O failures, and incorrect system states caused by software bugs. We focus on three major file systems in this section: Ext3 (Linux 2.6.32), Ext4 (Linux 2.6.32) and Btrfs <ref type="bibr">(Linux 3.8)</ref>.</p><p>From our analysis of the code, we have found that there are two types of global reactions in modern file systems: remount read-only and crash. For example, when Ext3 detects a block bitmap is corrupted, it may remount the whole file system as read-only to prevent further corruption. In contrast, the Ext3 journaling layer, JBD, may trigger a BUG ON statement to crash when it finds the journal in an unexpected state.</p><p>We analyze the file system code to identify the error handling functions that cause these reactions; for example, Btrfs calls btrfs handle error() to force the file system read-only. Then, we count how many times these basic error functions are called in different places. Note that we also count wrapper functions which directly call these basic error handling functions. <ref type="figure" target="#fig_0">Figure 1</ref> shows the total number and breakdown of global failure types in Ext3, Ext4, and Btrfs. We find that global failure reactions are common in both young and mature file systems. Over two thirds of these global behaviors will directly crash the whole file system, greatly reducing availability.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.2">Global Failure Causes</head><p>To understand if these global failures are warranted, we identify the root cause of each global failure statement in each file system. We have found that there are three major root causes for each failure case: metadata corruption, I/O failure, and software bugs. <ref type="table" target="#tab_1">Table 1</ref> shows our analysis for the Ext3 file system. Specifically, the table shows the interplay between each major data structure of the file system (e.g., bitmaps, inodes, superblock, directory entries) and the root cause of a global failure involving that data structure.</p><p>Ext3 explicitly validates the integrity of metadata in many places, especially at the I/O boundary when reading from disk. For example, Ext3 validates a directory entry before traversing that directory and Ext3 checks that the inode bitmap is in a correct state before allocating a new inode. Unfortunately, as indicated by the Metadata Corruption column, if Ext3 detects a corruption in any of these structures, it causes a global failure. The I/O Failure column similarly shows that Ext3 causes global failures when an individual I/O request fails. Finally, the Software Bugs column shows that there are a significant number of internal assertions (such as BUG ON), which are utilized to validate file system state at runtime, and these also cause a global failure when invoked. We observe that all of the global failures in Ext3 are due to problems with metadata and other file system internal state, and not user data.</p><p>For each data structure, we also check whether it is shared across different files. As shown in the last column of <ref type="table" target="#tab_1">Table 1</ref>, most metadata structures are organized in a shared manner and thus can cause global failures. However, even for local structures, such as indirect blocks, a global failure can still occur.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.3">Discussion</head><p>A file is the basic file system abstraction used to store the user's data in a logically isolated unit. Users can read from and write to a file. Another basic abstraction is a directory, which maps a file name to the file itself. Files and directories are usually organized as a directory tree.  A namespace holds a logical group of files or directories. To protect files in a shared environment, different applications are isolated within separated namespaces. Typical examples include chroot, BSD jail, Solaris Zones, and virtual machines.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Data Structure MC IOF SB Shared</head><p>However, these abstractions do not provide any fault isolation within a file system. Files and directories only represent and isolate data logically for applications. Within a file system, different files and directories share metadata and system state; when faults are related to these shared metadata, global failure policies are triggered.</p><p>One might think using multiple physical partitions to separate file systems would provide equivalent fault tolerance and protection to a file pod. For example, corrupted data are isolated to a single partition. However, a single panic() on one file system may crash the whole operating system, affecting all partitions. Furthermore, static physical partitions are not elastic; thus the storage space is not efficiently utilized. Therefore, file system abstractions lack a fine-grained fault isolation mechanism. Current file systems implicitly use a single fault domain; a fault in one file may cause a global reaction, thus affecting all clients of the file system.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3">New Abstraction: File Pod</head><p>To address the problem of inadequate fault isolation in file systems, we propose a new abstraction, called a file pod, for fine-grained fault isolation in file systems.</p><p>A file pod is an abstract file system partition that contains a group of files and their related metadata. Each file pod is isolated as an independent fault domain within the file system, with its own failure policy. Any failure related to a file pod only affects itself, not the whole file system. For example, if metadata corruption is detected within a file pod and the failure policy is to remount as read-only, then an isolation file system marks only that pod as readonly, without affecting other consistent file pods.</p><p>File pods allow applications to control the failure policy of their own files and related metadata, instead of letting the file system manage the failures globally. Furthermore, this new abstraction supports flexible bindings between namespaces and fault domains; thus it can be used in a wide range of environments, such as server virtualization (a primary target of ours), security isolation, and personal computer scenarios.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.1">Operations on File Pods</head><p>The file pod abstraction supports following operations.</p><p>Create a file pod: An application can create a file pod when needed. A file pod has a unique ID and attributes. A default global file pod is assigned when creating a new file system using mkfs.</p><p>File pod's attributes: Each file pod has attributes in addition to its ID. An application can get and set a file pod's attributes. Attributes can include: failure policies (e.g., read-only, pure crash, on-going accesses are allowed but new accesses are rejected), file characteristics hints (e.g., large virtual disk files, small configuration files), and recovery policies (e.g., online fsck, offline fsck).</p><p>Set a file's pod: An application can assign a file pod for a file or a directory. If the file or directory has a file pod previously, then its file pod will be changed to this new file pod. For a directory, the file pod is inherited by default for all files and directories created later under this directory.</p><p>Remove a file's pod: An application can remove a file pod for a file or a directory. If the file or directory only has one file pod previously, then its file pod will be changed to the global file pod.</p><p>Share a file between pods: An application can share a file or a directory between several different file pods. A special API is provided for applications to add a file to other file pods in addition to the file's own file pod. If faults are related to a shared file or directory, then different failure policies will be triggered for different file pods containing the faulty file or directory. Thus, applications should be aware of all pods for their files and corresponding failure policies.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.2">Typical Usage Cases</head><p>We envision a number of typical usage scenarios for pods.</p><p>Server virtualization environment. Each virtual machine has its own file pod with its virtual disk files and configuration files. The failure policy can be set specifically per pod, and thus true isolation is enforced across VM domains. Once failures happen, fsck can be run immediately to recovery corrupted files.</p><p>Running untrusted applications. Each untrusted application runs within a separate file pod with its files. The failure policy of this file pod can be set as killing all the related processes and removing the file pod namespace.</p><p>Intermediate data. Big data applications may generate a large amount of intermediate data. A useful failure policy is marking the file pod as erroneous to prevent new processes from accessing it, but to allow running processes to finish. After that, we can run fsck or applications can check their data integrity directly.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4">Fault Isolation</head><p>This section describes how an isolation file system could provide fine-grained fault isolation for file systems. The goal of fault isolation is to allow each file pod to handle its own failures. Our solution consists of two components: metadata isolation and local failure polices.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.1">Metadata Isolation</head><p>Modern file systems manage metadata in a shared manner. For example, an inode block may contain multiple inodes. A single failure that occurs with an inode block may impact multiple files. We argue that shared metadata organization is harmful for fine-grained fault isolation.</p><p>Our idea is to isolate metadata for each file pod. As we described before, a file pod contains all its files and related metadata. Because we organize each file pod's metadata independently without any sharing, then any metadata related failure can be narrowed down to a specific file pod.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.2">Localize Failures</head><p>As we showed earlier, current file systems handle serious failures by remounting as read-only or crashing the whole system. These global actions need to be changed to localize failures within erroneous file pods. Our goal is not to change the failure polices in file systems, but adapt them to local file pods.</p><p>How can we handle a read-only remount locally? If a file pod's failure policy is remounting as read-only, then we simply mark the file pod as read-only instead of marking the whole file system as read-only. We need to prevent further updates for both file system structures and the ondisk journal for a faulty pod. In this manner, only files within this file pod will be affected, while other consistent files are still available for normal accesses.</p><p>How can we handle a pure crash locally? If a file pod's failure policy is to crash, then we need to provide the same states and behaviors for a file pod as for whole file system restarts. When such a pure crash is triggered, an isolation file system immediately stops any file access for this file pod. It may also need to return error codes to all the processes which have opened files of this file pod. Furthermore, an isolation file system needs to clean the file pod's related system states and free resources (such as buffers in the page cache and metadata in the journal). Note that an isolation file system does not preserve or unwind file system states for transparent recovery, but instead provides the same semantics of system crashes for a file pod locally. To warrant a continuous execution while a pure crash is triggered, we need to isolate or even re-design a file pod's in-memory and on-disk states very carefully, preventing incorrect system states to propagate to other pods. We are in progress of solving this problem. An isolation file system may also support other useful failure policies. For example, we may allow processes with opened files of a target file pod to finish their data accesses even when failures are detected. Until then, we mark the file pod as read-only or pure crash the file pod. Otherwise, immediately remounting a faulty file pod as read-only or crashing it may cause data loss for applications.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5">Quick Recovery</head><p>Recovering a whole file system is time consuming, especially running fsck. With the increased capacity of disks, users' file systems also easily scale to multiple TBs. Even when fsck can run at peak disk speed, it still takes a long time to finish checking. For example, it takes nearly seven hours to read a 2 TB disk sequentially.</p><p>Since we isolate faults for each file pod, this provides great opportunities to recover corrupted file pods efficiently. Instead of checking the whole disk, we can narrow down our target to certain file pods which triggered their failure policies.</p><p>When should we run online recovery? We utilize a file system's own internal detection mechanism to identify various failures. For example, when an isolation file system finds a file pod's block bitmap is corrupted, it will first trigger the file pod's failure policy, such as remounting as read-only. Then, custom recovery policies are executed for this file pod. An isolation file system can run checking immediately after such failures are detected. It may also run checking when the file pod is idle without any failure detected. Or it can periodically run checking for some important file pods, such as file pods storing system configuration files.</p><p>How can we improve checking efficiency? Since an isolation file system can only check a small part of the whole file system, it can provide quick checking both online and offline. Metadata of isolation file systems is isolated in such a manner that checking can be done independently for each file pod, avoiding expensive global cross checking. Furthermore, an isolation file system utilizes the file system's fault detection mechanism to provide hints for integrity checking, such as a corrupted block bitmap. This can even narrow down the checking to certain data structures. For online checking, when failures happen, the metadata of the target file pod may be already in memory, thus avoiding slow disk reads.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="6">Implementation</head><p>We sketch out our initial ideas for a standard journaling file system, Ext3. Major changes are described in the following categories.</p><p>File system layout. Each block group only belongs to a single file pod, while a file pod may have multiple block groups. With this new layout, any metadata corruption can be narrowed down to a single file pod. Block groups in Ext style file systems provide a good model for data locality. Our file pod is built on top of block groups to maintain the performance benefits and provide extra fault isolation. For other file systems, such as log-structured file system, we will need a new way to map a file pod to underlying disk structures.</p><p>Data structures. The file pod structure for a block group is stored in the group descriptor of that block group in Ext3. We do not maintain extra mapping structures for file pods. When mounting an Ext3 file system, all group descriptors will be loaded into memory by default. Since all group descriptors are replicated in multiple locations, we can retrieve other replicas if needed. To get a file pod information for a file, we can easily map the file's inode to a block group, and then retrieve its file pod information from the corresponding group descriptor.</p><p>Algorithms. Data, inode, and directory block allocation / de-allocation algorithms need to be changed to be file pod based. Isolation file systems still preserve the locality property of default allocation algorithms of Ext3. But when the allocation moves across block group boundaries, Isolation file systems make sure that the target block group belongs to the same pod or it is an empty block group. Readers may be concerned about the internal fragmentation within a file pod. A possible solution is to provide a de-fragmentation tool for pods. Similar solution exists in Ext4 (online de-fragmentation).</p><p>Journaling. Ext3 consolidates multiple atomic updates from different files into a single transaction. To isolate updates from different file pods, we change the journaling mechanisms for both better reliability and performance. To provide reliability isolation, each transaction contains updates only from a single file pod. When an isolation file system updates its metadata, it will pass the file pod information to its journaling layer. The journaling layer maintains a separate transaction for each active file pod. Thus, once any failure happens in the journaling layer, we can relate the failure to a single transaction of a specific file pod. During the commit phase, three ordering points are enforced for data blocks, metadata blocks and the commit block respectively. To improve journaling performance, an isolation file system commits multiple transactions from different file pods in parallel by using multiple committing threads. In this manner, we hope to get better I/O scheduling for submitted blocks and overlap waiting time from different transactions.</p><p>Failure Policy Support. For read-only, we can mark all the block groups in the file pod as read-only and stop journaling updates for the file pod. For pure crash, we need to clean the file pod's system states, by doing a lightweight restart. This includes returning an error code to processes which are opening files in this file pod, freeing all cached memory objects, and marking errors on disk for later recovery.</p><p>Recovery Policy Support. We can utilize existing fsck code to conduct checking for a file pod. We need to instrument all the global failure polices in Ext3 to use our failure and recovery framework.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="7">Related Work</head><p>Security / Namespace Isolation. Previous file system isolation mechanisms focus purely on the namespace. chroot <ref type="bibr" target="#b0">[1]</ref> confines a process to a portion of a file system. The namespace is limited to a single directory subtree. BSD jail <ref type="bibr" target="#b6">[7]</ref> is based on chroot mechanism. Each jail includes processes, a file system directory and network resources. Solaris zones <ref type="bibr" target="#b10">[11]</ref> are based on jail. Each zone is confined to a disjoint portion of a file system. Hypervisors not only isolate each virtual machine's namespace, they also provide resource and performance isolation. Their fault isolation mechanisms still focus on process and memory faults. Both Solitude <ref type="bibr" target="#b5">[6]</ref> and Denali <ref type="bibr" target="#b13">[14]</ref> target on security isolation for untrusted applications. For all these solutions, they only provide namespace isolation for file systems. The underlying file-system failures are still shared across namespaces, jails, zones, and virtual machines.</p><p>File System Checkers. Windows ReFS <ref type="bibr" target="#b11">[12]</ref> can detect and recover data corruption at runtime. Its recovery mechanism depends on metadata checksum and replicas on multiple disks. Specifically, it can only auto-recover corrupted files if the file system is run on mirrored storage devices. Furthermore, it cannot handle memory corruption and software bugs. Wafliron <ref type="bibr" target="#b9">[10]</ref> is an online file system checker for WAFL file system. It allows data accesses from volumes not being checked. However, no details about how it conducts online checking are available. Chunkfs <ref type="bibr" target="#b4">[5]</ref> partitions a file system into fixed size, independent chunks, and hopefully can check each chunk independently. However, cross-chunk references still exist; for example, a large file may span on multiple chunks. It is also hard to know when to trigger online checking. Furthermore, its design is only based on Ext2, without modern journaling features.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="8">Conclusion</head><p>Global failures are prevalent in modern file systems, which severely harm the availability of file systems in various scenarios. We analyzed global failure policies and failure causes of existing file systems. A new file system abstraction was proposed to allow applications to manage failure policies and recovery polices explicitly. Finally, we briefly discussed the design and implementation of an isolation file system. What we present here is just a first step towards a resilient file system.</p></div><figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_0"><head>Figure 1 :</head><label>1</label><figDesc>Figure 1: Failure Types. This figure shows the failure types for each file system. The total number of global failure instances is on top of each bar.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_1" validated="false"><head>Table 1 :</head><label>1</label><figDesc></figDesc><table>Global Failure Causes of Ext3. This table shows 

the failure causes for Ext3, in terms of data structures, failure 
causes and their related numbers. MC: Metadata Corruption; 
IOF: I/O Failures; SB: Software Bugs; Share: whether this 
structure is shared by multiple files or directories. 

</table></figure>
		</body>
		<back>

			<div type="acknowledgement">
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Acknowledgments</head><p>We thank Ed Nightingale (our shepherd) and the anonymous reviewers for their excellent feedback and suggestions. This material is based upon work supported by the National Science Foundation under the following grants: CNS-1218405, CCF-0937959, CSR-1017518, CCF-1016924, as well as generous support from EMC, Facebook, Fusion-io, Google, Huawei, Microsoft, NetApp, Samsung and VMware. Any opinions, findings, and conclusions or recommendations expressed in this material are those of the authors and do not necessarily reflect the views of the NSF or other institutions.</p></div>
			</div>

			<div type="references">

				<listBibl>

<biblStruct xml:id="b0">
	<monogr>
		<title/>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Change Root Directory</surname></persName>
		</author>
		<ptr target="http://linux.die.net/man/2/chroot/" />
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b1">
	<monogr>
				<ptr target="http://androidspin.com/2011/12/06/first-galaxy-nexus-rom-available-features-ext4-support/" />
		<title level="m">First Galaxy Nexus Rom Available, Features Ext4 Support</title>
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b2">
	<monogr>
		<title level="m" type="main">Oracle Cluster File System (OCFS2)</title>
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b3">
	<analytic>
		<title level="a" type="main">An Analysis of Latent Sector Errors in Disk Drives</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">N</forename><surname>Lakshmi</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Garth</forename><forename type="middle">R</forename><surname>Bairavasundaram</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Shankar</forename><surname>Goodson</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Jiri</forename><surname>Pasupathy</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Schindler</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 2007 ACM SIGMETRICS Conference on Measurement and Modeling of Computer Systems (SIG-METRICS &apos;07)</title>
		<meeting>the 2007 ACM SIGMETRICS Conference on Measurement and Modeling of Computer Systems (SIG-METRICS &apos;07)<address><addrLine>San Diego, California</addrLine></address></meeting>
		<imprint>
			<date type="published" when="2007-06" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b4">
	<analytic>
		<title level="a" type="main">Chunkfs: Using divide-and-conquer to improve file system reliability and repair</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Val</forename><surname>Henson</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Arjan</forename><surname>Van De Ven</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Amit</forename><surname>Gud</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Zach</forename><surname>Brown</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">IEEE 2nd Workshop on Hot Topics in System Dependability (HotDep &apos;06)</title>
		<meeting><address><addrLine>Seattle, Washington</addrLine></address></meeting>
		<imprint>
			<date type="published" when="2006-11" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b5">
	<analytic>
		<title level="a" type="main">Application-Level Isolation and Recovery with Solitude</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Shvetank</forename><surname>Jain</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Fareha</forename><surname>Shafique</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Vladan</forename><surname>Djeric</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Ashvin</forename><surname>Goel</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the EuroSys Conference (EuroSys &apos;08)</title>
		<meeting>the EuroSys Conference (EuroSys &apos;08)<address><addrLine>Glasgow, Scotland UK</addrLine></address></meeting>
		<imprint>
			<date type="published" when="2008-03" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b6">
	<analytic>
		<title level="a" type="main">Jails: Confining the omnipotent root</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Poul-Henning</forename><surname>Kamp</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Robert</forename><forename type="middle">N M</forename><surname>Watson</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Second International System Administration and Networking Conference (SANE &apos;00)</title>
		<imprint>
			<date type="published" when="2000-05" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b7">
	<analytic>
		<title level="a" type="main">A Study of Linux File System Evolution</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Lanyue</forename><surname>Lu</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Andrea</forename><forename type="middle">C</forename><surname>Arpaci-Dusseau</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Remzi</forename><forename type="middle">H</forename><surname>Arpacidusseau</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Shan</forename><surname>Lu</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 11th USENIX Symposium on File and Storage Technologies (FAST &apos;13)</title>
		<meeting>the 11th USENIX Symposium on File and Storage Technologies (FAST &apos;13)<address><addrLine>San Jose, California</addrLine></address></meeting>
		<imprint>
			<date type="published" when="2013-02" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b8">
	<monogr>
		<title level="m" type="main">iOS Forensic Analysis: for iPhone, iPad, and iPod Touch</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Sean</forename><surname>Morrissey</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2010" />
			<publisher>Apress</publisher>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b9">
	<monogr>
		<title level="m" type="main">Overview of WAFL check</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Netapp</surname></persName>
		</author>
		<ptr target="http://uadmin.nl/init/?p=900" />
		<imprint>
			<date type="published" when="2011-09" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b10">
	<analytic>
		<title level="a" type="main">Consolidating Applications with Oracle Solaris Containers</title>
		<ptr target="www.oracle.com/technetwork/server-storage/solaris/documentation/consolidating-apps-163572.pdf" />
	</analytic>
	<monogr>
		<title level="j">Oracle Inc</title>
		<imprint>
			<date type="published" when="2011-07" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b11">
	<monogr>
		<title level="m" type="main">Building the Next Generation File System for Windows: ReFS</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Steven</forename><surname>Sinofsky</surname></persName>
		</author>
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b12">
	<analytic>
		<title level="a" type="main">Virtual Machine File System</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">B</forename><surname>Satyam</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Vaghani</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">ACM SIGOPS Operating Systems Review</title>
		<imprint>
			<biblScope unit="volume">44</biblScope>
			<biblScope unit="issue">4</biblScope>
			<biblScope unit="page" from="57" to="70" />
			<date type="published" when="2010-12" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b13">
	<analytic>
		<title level="a" type="main">Scale and Performance in the Denali Isolation Kernel</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Andrew</forename><surname>Whitaker</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Marianne</forename><surname>Shaw</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Steven</forename><forename type="middle">D</forename><surname>Gribble</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 5th Symposium on Operating Systems Design and Implementation (OSDI &apos;02)</title>
		<meeting>the 5th Symposium on Operating Systems Design and Implementation (OSDI &apos;02)<address><addrLine>Boston, Massachusetts</addrLine></address></meeting>
		<imprint>
			<date type="published" when="2002-12" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b14">
	<analytic>
		<title level="a" type="main">Using Model Checking to Find Serious File System Errors</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Junfeng</forename><surname>Yang</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Paul</forename><surname>Twohey</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Dawson</forename><surname>Engler</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Madanlal</forename><surname>Musuvathi</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 6th Symposium on Operating Systems Design and Implementation (OSDI &apos;04)</title>
		<meeting>the 6th Symposium on Operating Systems Design and Implementation (OSDI &apos;04)<address><addrLine>San Francisco, California</addrLine></address></meeting>
		<imprint>
			<date type="published" when="2004-12" />
		</imprint>
	</monogr>
</biblStruct>

				</listBibl>
			</div>
		</back>
	</text>
</TEI>
