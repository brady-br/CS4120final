<?xml version="1.0" encoding="UTF-8"?>
<TEI xmlns="http://www.tei-c.org/ns/1.0" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
xsi:schemaLocation="http://www.tei-c.org/ns/1.0 /Users/atharsefid/Desktop/grobid-0.5.3/grobid-home/schemas/xsd/Grobid.xsd"
 xmlns:xlink="http://www.w3.org/1999/xlink">
	<teiHeader xml:lang="en">
		<encodingDesc>
			<appInfo>
				<application version="0.5.3" ident="GROBID" when="2020-09-29T04:02+0000">
					<ref target="https://github.com/kermitt2/grobid">GROBID - A machine learning software for extracting information from scholarly documents</ref>
				</application>
			</appInfo>
		</encodingDesc>
		<fileDesc>
			<titleStmt>
				<title level="a" type="main">Mobile Private Contact Discovery at Scale Mobile Private Contact Discovery at Scale</title>
			</titleStmt>
			<publicationStmt>
				<publisher/>
				<availability status="unknown"><licence/></availability>
				<date>August 14-16, 2019</date>
			</publicationStmt>
			<sourceDesc>
				<biblStruct>
					<analytic>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Daniel</forename><surname>Kales</surname></persName>
							<affiliation key="aff0">
								<orgName type="institution" key="instit1">Graz University of Technology</orgName>
								<orgName type="institution" key="instit2">Graz University of Technology</orgName>
								<orgName type="institution" key="instit3">Graz University of Technology</orgName>
								<address>
									<settlement>Darmstadt</settlement>
								</address>
							</affiliation>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Christian</forename><surname>Rechberger</surname></persName>
							<affiliation key="aff0">
								<orgName type="institution" key="instit1">Graz University of Technology</orgName>
								<orgName type="institution" key="instit2">Graz University of Technology</orgName>
								<orgName type="institution" key="instit3">Graz University of Technology</orgName>
								<address>
									<settlement>Darmstadt</settlement>
								</address>
							</affiliation>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Thomas</forename><surname>Schneider</surname></persName>
							<affiliation key="aff0">
								<orgName type="institution" key="instit1">Graz University of Technology</orgName>
								<orgName type="institution" key="instit2">Graz University of Technology</orgName>
								<orgName type="institution" key="instit3">Graz University of Technology</orgName>
								<address>
									<settlement>Darmstadt</settlement>
								</address>
							</affiliation>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Matthias</forename><surname>Senker</surname></persName>
							<affiliation key="aff0">
								<orgName type="institution" key="instit1">Graz University of Technology</orgName>
								<orgName type="institution" key="instit2">Graz University of Technology</orgName>
								<orgName type="institution" key="instit3">Graz University of Technology</orgName>
								<address>
									<settlement>Darmstadt</settlement>
								</address>
							</affiliation>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Christian</forename><surname>Weinert</surname></persName>
							<affiliation key="aff0">
								<orgName type="institution" key="instit1">Graz University of Technology</orgName>
								<orgName type="institution" key="instit2">Graz University of Technology</orgName>
								<orgName type="institution" key="instit3">Graz University of Technology</orgName>
								<address>
									<settlement>Darmstadt</settlement>
								</address>
							</affiliation>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><forename type="middle">U</forename><surname>Darmstadt</surname></persName>
							<affiliation key="aff0">
								<orgName type="institution" key="instit1">Graz University of Technology</orgName>
								<orgName type="institution" key="instit2">Graz University of Technology</orgName>
								<orgName type="institution" key="instit3">Graz University of Technology</orgName>
								<address>
									<settlement>Darmstadt</settlement>
								</address>
							</affiliation>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Daniel</forename><surname>Kales</surname></persName>
							<affiliation key="aff0">
								<orgName type="institution" key="instit1">Graz University of Technology</orgName>
								<orgName type="institution" key="instit2">Graz University of Technology</orgName>
								<orgName type="institution" key="instit3">Graz University of Technology</orgName>
								<address>
									<settlement>Darmstadt</settlement>
								</address>
							</affiliation>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Christian</forename><surname>Rechberger</surname></persName>
							<affiliation key="aff0">
								<orgName type="institution" key="instit1">Graz University of Technology</orgName>
								<orgName type="institution" key="instit2">Graz University of Technology</orgName>
								<orgName type="institution" key="instit3">Graz University of Technology</orgName>
								<address>
									<settlement>Darmstadt</settlement>
								</address>
							</affiliation>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Thomas</forename><surname>Schneider</surname></persName>
							<affiliation key="aff0">
								<orgName type="institution" key="instit1">Graz University of Technology</orgName>
								<orgName type="institution" key="instit2">Graz University of Technology</orgName>
								<orgName type="institution" key="instit3">Graz University of Technology</orgName>
								<address>
									<settlement>Darmstadt</settlement>
								</address>
							</affiliation>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><forename type="middle">U</forename><surname>Darmstadt</surname></persName>
							<affiliation key="aff0">
								<orgName type="institution" key="instit1">Graz University of Technology</orgName>
								<orgName type="institution" key="instit2">Graz University of Technology</orgName>
								<orgName type="institution" key="instit3">Graz University of Technology</orgName>
								<address>
									<settlement>Darmstadt</settlement>
								</address>
							</affiliation>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Matthias</forename><surname>Senker</surname></persName>
							<affiliation key="aff0">
								<orgName type="institution" key="instit1">Graz University of Technology</orgName>
								<orgName type="institution" key="instit2">Graz University of Technology</orgName>
								<orgName type="institution" key="instit3">Graz University of Technology</orgName>
								<address>
									<settlement>Darmstadt</settlement>
								</address>
							</affiliation>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><forename type="middle">U</forename><surname>Darmstadt</surname></persName>
							<affiliation key="aff0">
								<orgName type="institution" key="instit1">Graz University of Technology</orgName>
								<orgName type="institution" key="instit2">Graz University of Technology</orgName>
								<orgName type="institution" key="instit3">Graz University of Technology</orgName>
								<address>
									<settlement>Darmstadt</settlement>
								</address>
							</affiliation>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Christian</forename><surname>Weinert</surname></persName>
							<affiliation key="aff0">
								<orgName type="institution" key="instit1">Graz University of Technology</orgName>
								<orgName type="institution" key="instit2">Graz University of Technology</orgName>
								<orgName type="institution" key="instit3">Graz University of Technology</orgName>
								<address>
									<settlement>Darmstadt</settlement>
								</address>
							</affiliation>
						</author>
						<title level="a" type="main">Mobile Private Contact Discovery at Scale Mobile Private Contact Discovery at Scale</title>
					</analytic>
					<monogr>
						<title level="m">Proceedings of the 28th USENIX Security Symposium</title>
						<meeting>the 28th USENIX Security Symposium <address><addrLine>Santa Clara, CA, USA</addrLine></address>
						</meeting>
						<imprint>
							<date type="published">August 14-16, 2019</date>
						</imprint>
					</monogr>
					<note>This paper is included in the 978-1-939133-06-9 Open access to the Proceedings of the 28th USENIX Security Symposium is sponsored by USENIX. https://www.usenix.org/conference/usenixsecurity19/presentation/kales</note>
				</biblStruct>
			</sourceDesc>
		</fileDesc>
		<profileDesc>
			<abstract>
				<p>Mobile messengers like WhatsApp perform contact discovery by uploading the user&apos;s entire address book to the service provider. This allows the service provider to determine which of the user&apos;s contacts are registered to the messaging service. However, such a procedure poses significant privacy risks and legal challenges. As we find, even messengers with privacy in mind currently do not deploy proper mechanisms to perform contact discovery privately. The most promising approaches addressing this problem revolve around private set intersection (PSI) protocols. Unfortunately , even in a weak security model where clients are assumed to follow the protocol honestly, previous protocols and implementations turned out to be far from practical when used at scale. This is due to their high computation and/or communication complexity as well as lacking optimization for mobile devices. In our work, we remove most obstacles for large-scale global deployment by significantly improving two promising protocols by Kiss et al. (PoPETS&apos;17) while also allowing for malicious clients. Concretely, we present novel precomputation techniques for correlated oblivious transfers (reducing the online communication by factor 2x), Cuckoo filter compression (with a compression ratio of ≈ 70 %), as well as 4.3x smaller Cuckoo filter updates. In a protocol performing oblivious PRF evaluations via garbled circuits, we replace AES as the evaluated PRF with a variant of LowMC (Albrecht et al., EUROCRYPT&apos;15) for which we determine optimal parameters, thereby reducing the communication by factor 8.2x. Furthermore, we implement both protocols with security against malicious clients in C/C++ and utilize the ARM Cryptography Extensions available in most recent smartphones. Compared to previous smartphone implementations, this yields a performance improvement of factor 1,000x for circuit evaluations. The on-line phase of our fastest protocol takes only 2.92 s measured on a real WiFi connection (6.53 s on LTE) to check 1,024 client contacts against a large-scale database with 2 28 entries. As a proof-of-concept, we integrate our protocols in the client application of the open-source messenger Signal.</p>
			</abstract>
		</profileDesc>
	</teiHeader>
	<text xml:lang="en">
		<body>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="1">Introduction</head><p>After installation, mobile messaging applications first perform a so-called contact discovery. This allows new users to automatically connect with all other users of the messaging service whose phone numbers are stored in their address book. There exist various ways to perform contact discovery. For example, WhatsApp simply uploads the user's entire address book on a regular basis to match contacts <ref type="bibr" target="#b0">[1]</ref>.</p><p>However, revealing all personal contacts to a service provider poses significant privacy risks: from the social graph of users a variety of personal information can be inferred and journalists, for example, may need to cover the identity of some of their informants to protect whistleblowers from potential consequences. When installing a mobile messaging application, users also jeopardize the privacy of people who are not even connected to the particular service by transmitting their contact information without consent. An illustrative example of a severe breach of privacy can be seen in the case of WhatsApp, which was acquired by Facebook in 2014 and shared its database with the parent company: Facebook users received friend recommendations of strangers who happened to see the same psychiatrists <ref type="bibr" target="#b34">[33]</ref>.</p><p>Unfortunately, applying simple protection mechanisms like hashing the phone numbers of contacts locally before the upload to the service provider is not helpful since these hashes are vulnerable to brute-force and dictionary attacks due to the relatively small range of possible pre-images. Furthermore, the service provider can still tell whether two users share a contact even a long time after running the discovery routine by storing the received hash values. Custom wrappers 1 for messaging applications can somewhat circumvent these problems by allowing users to manually select contacts to expose to the messaging application. However, this approach only protects the contacts of users actually using such custom wrappers. Furthermore, manually selecting the contacts to match is a usability problem.</p><p>One possible solution to this dilemma is to apply a particular form of secure two-party computation. In general, secure two-party computation allows parties P 1 and P 2 to jointly compute a publicly known function f on their respective inputs X 1 and X 2 s.t. the parties learn no information from the protocol execution but the result. The research area of private set intersection (PSI) focuses on optimized protocols for the case where X 1 and X 2 are sets of elements, and f is the intersection function. PSI has been studied in great depth in the past years, yielding very efficient protocols (e.g., <ref type="bibr" target="#b43">[41,</ref><ref type="bibr" target="#b53">51]</ref>) based on oblivious transfer extensions (OTe, cf. <ref type="bibr" target="#b3">[4,</ref><ref type="bibr" target="#b37">36,</ref><ref type="bibr" target="#b40">39]</ref>). However, while these protocols are very efficient in many scenarios, they turn out to be impractical for use-cases like private contact discovery on mobile devices, where the input set of the service provider is much larger (sometimes by a factor of a few million) than the input set of the user. This is because the online phase of these protocols (which depends on the actual inputs) has a computation and communication complexity that is linear in the size of the larger set.</p><p>Therefore, other PSI protocols for the case of unbalanced set sizes were developed (e.g., <ref type="bibr" target="#b19">[19,</ref><ref type="bibr" target="#b21">21,</ref><ref type="bibr" target="#b42">40,</ref><ref type="bibr" target="#b61">59]</ref>). However, only <ref type="bibr" target="#b42">[40]</ref> actually provides an implementation on real mobile smartphone clients. The experiments performed by the authors of <ref type="bibr" target="#b42">[40]</ref> show a rather large discrepancy between protocol execution on x86-based PC hardware and Android smartphones where performance-critical cryptographic operations are implemented in Java. In fact, their performance results do not encourage real-world deployment. For example, their fastest protocol that can easily be made secure against malicious clients requires more than 52 s on a smartphone with WiFi connection to check a single client contact against a database with only 2 20 entries.</p><p>The developers of Signal, a mobile messaging service similar to WhatsApp but with focus on privacy, considered the use of PSI protocols for contact discovery. However, they refrained from actually implementing PSI since the academic research in PSI and the related private information retrieval (PIR) protocols "is quite a disappointment" <ref type="bibr" target="#b46">[44]</ref>. Instead, they presented a technology preview that protects the contact discovery task on the server side with Intel Software Guard Extensions (SGX), a trusted execution environment that can be attested by remote users <ref type="bibr" target="#b47">[45]</ref>. In theory, this yields a secure contact discovery service with negligible performance overhead compared to plain computation. However, Intel SGX is a proprietary engineering-driven solution with no cryptographic security guarantees and vulnerable to severe attacks, e.g., the recent Foreshadow attack <ref type="bibr" target="#b16">[16]</ref> managed to reliably extract confidential data from enclaves. Moreover, some fixes for hardware security designs such as Intel SGX require hardware changes that can take years to enter the market and result in repeated acquisition costs. In contrast, fixes for flawed implementations of provably secure cryptographic protocols can be deployed quickly via software updates.</p><p>Thus, we revisit state-of-the-art unbalanced PSI protocols which provide cryptographic security and show that using new optimizations and native implementations they turn out to be practical on modern smartphones. Furthermore, we achieve security against malicious clients: since every user could run a manipulated version of the messaging application, deviations from the protocol may lead to revealing information about the server's database. On the other hand, we assume that the server behaves semi-honestly, i.e., it follows the protocol but tries to learn as much information as possible. This is a reasonable assumption since there are legal requirements and financial incentives to behave correctly: once misconduct gets known publicly, users will abandon the misbehaving service and switch to a more trustworthy alternative.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="1.1">Our Contributions</head><p>As a motivation, we investigate how contact discovery is handled in widely used mobile messaging applications. For this, we conduct a survey where we analyze privacy policies, source code, and network traffic. Our results show that in practice none of these applications protect the users' privacy during contact discovery.</p><p>We optimize two protocols for unbalanced PSI that can easily be made secure against malicious clients and are suitable for private contact discovery: one that uses oblivious evaluations of the Naor-Reingold PRF (NR-PSI, cf. <ref type="bibr" target="#b32">[31,</ref><ref type="bibr" target="#b42">40,</ref><ref type="bibr" target="#b49">47]</ref>) and one that uses Yao's garbled circuits (GC-PSI, cf. <ref type="bibr" target="#b42">[40,</ref><ref type="bibr" target="#b54">52,</ref><ref type="bibr" target="#b58">56]</ref>) to run oblivious AES evaluations. For both protocols we apply new forms of correlated random OT precomputation (reducing the online communication by factor 2x, which is of independent interest) and introduce a method for Cuckoo filter compression (with a compression ratio of ≈ 70 % and negligible computational overhead) as well as 4.3x smaller Cuckoo filter updates to reduce the required network communication. Moreover, we improve the GC-PSI protocol by instantiating the PRF with LowMC <ref type="bibr" target="#b1">[2]</ref>, a cipher specifically designed for efficient evaluation in secure protocols, instead of the default choice AES. While this was already proposed in <ref type="bibr" target="#b42">[40]</ref>, we find optimal parameter sets for LowMC and provide implementations. Compared to AES, we thereby reduce the communication by factor 8. <ref type="bibr">2x</ref>.</p><p>We provide C/C++ implementations for both protocols with security against malicious clients that make use of the Cryptography Extensions (CE) in the ARMv8 architecture available in most recent smartphones for hardware-accelerated execution. Thereby, we improve the runtime of the online phase of the GC-PSI protocol by more than a factor of 1,000x compared to the previous work of <ref type="bibr" target="#b42">[40]</ref> that only implements security against semi-honest clients. We overcome further shortcomings of previous works w.r.t security and scalability by evaluating the implementations using recommended security parameters, reasonable false positive probabilities, and considering large-scale set sizes on the server side.</p><p>Our fastest protocol takes only 2.92 s measured on a real WiFi connection (6.53 s on LTE) and 6.07 MiB of communication in the online phase to check 1,024 client contacts against a database with 2 28 entries (more than the number of monthly active users for popular messengers like Telegram <ref type="bibr" target="#b63">[61]</ref>). For the setup phase it is required to transfer a compressed Cuckoo filter once whose size is linear in the number of the database entries (≈ 1 GiB for 2 28 entries); since the filter is identical for all clients, service providers can handle the resulting traffic efficiently via CDNs. To remain practical for even larger set sizes (the market leader WhatsApp currently has more than 1.6 billion users <ref type="bibr" target="#b63">[61]</ref>), we suggest multiple extensions, e.g., combining our protocols with multi-server PIR s.t. the overall client-server communication complexity becomes logarithmic in the size of the server database.</p><p>As a proof-of-concept, we integrate both of our protocols in the Signal Android client, thereby positioning our secure cryptographic approach as a practical alternative to vulnerable trusted execution environments like Intel SGX.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="1.2">Motivating Survey</head><p>To determine how contact discovery is currently being done in practice, we conducted a survey on a comprehensive selection of mobile messengers that are "secure" in the sense that they offer end-to-end encryption. Each application was analyzed by evaluating the mandatory privacy policy, which is supposed to state exactly which data the application transmits to its server and how the server processes and stores that data. Unfortunately, these policies are not always precise enough to determine the employed contact discovery method. In these cases, we inspected the source code (if publicly available) or the network communication by means of the man-in-the-middle proxy mitmproxy 2 . We circumvented certificate pinning by using the Xposed 3 framework together with the JustTrustMe 4 plugin that can disable certificate checking routines in several commonly used security libraries.</p><p>Our results are summarized in Tab. 1. All surveyed messengers upload contact information (at least the contact's phone number) either in the clear or in hashed form. While this form of contact discovery is very efficient (requiring only a few bytes of communication per element), it threatens the privacy of users directly or indirectly via brute-force or dictionary attacks. Furthermore, even if the server cannot determine the actual contact data, it can still tell whether two users share a contact by comparing uploaded hash values.</p><p>This can be somewhat mitigated by using salted hashing s.t. the hashes received by the server are different whenever a client triggers contact discovery. However, only one of the surveyed messengers employs this approach as it requires to  <ref type="table">Table 1</ref>: Results of our contact discovery survey on secure mobile messengers. All applications upload contact information either in the clear or hashed (with salt). Messengers marked with * denote that contact discovery is optional.</p><p>hash the entire server database for each fresh salt received by a client. Furthermore, brute-force attacks are still feasible.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2">Related Work</head><p>In this section, we discuss existing unbalanced PSI protocols and other works that focus on PSI in the smartphone setting.</p><p>Unbalanced PSI. <ref type="bibr">Kiss et al. [40]</ref> discuss multiple unbalanced PSI protocols with precomputation (cf. §3.5) and security against semi-honest adversaries. Their NR-PSI and GC-PSI protocols (based on <ref type="bibr" target="#b32">[31]</ref> and <ref type="bibr" target="#b54">[52]</ref>, respectively) are the foundation of our work. We augment these protocols with new OT precomputation techniques, efficient Cuckoo filters <ref type="bibr" target="#b28">[27,</ref><ref type="bibr" target="#b61">59]</ref>, a specialized cipher <ref type="bibr" target="#b1">[2]</ref> for the GC-PSI protocol, and security against malicious clients. The authors of <ref type="bibr" target="#b42">[40]</ref> also evaluate their protocols on smartphones, but based on less efficient Java implementations. In our work, we present C/C++ implementations that make use of the hardware-accelerated cryptography available in most recent smartphones.</p><p>Resende and de Freitas Aranha <ref type="bibr" target="#b61">[59]</ref> use techniques similar to <ref type="bibr" target="#b42">[40]</ref>, but replace Bloom filters <ref type="bibr" target="#b12">[12]</ref> with the more efficient and versatile Cuckoo filters <ref type="bibr" target="#b28">[27]</ref> to efficiently represent the encrypted server database (cf. §3.4) in a Diffie-Hellman style PSI protocol <ref type="bibr" target="#b7">[7]</ref> with security against semi-honest adversaries. In our work, we optimize communication by proposing methods for Cuckoo filter compression and updates, and perform evaluations with reasonable parameters: while in [59] the authors settle with an error probability of ≈ 2 −13 , which results, on average, in one false positive when 10 clients match 2 10 contacts each, we propose realistic Cuckoo filter parameters for error probabilities ≈ 2 −29 and ≈ 2 −39 .</p><p>Demmler et al. <ref type="bibr" target="#b21">[21]</ref> present a different approach assuming multiple non-colluding servers. Their idea is to first perform a variant of private information retrieval (PIR) to reduce the server's input set and then perform a traditional PSI protocol on the reduced sets. While this approach is very performant, the requirement of non-colluding servers presents challenges for the data-owners: they not only need to guarantee that these servers do not collude, but also need to ensure that their client data is not leaked to other parties. This leads to the difficult situation where the server party needs to trust a second server but simultaneously is assumed to not collude with it. However, even if servers are malicious and/or collude, they cannot learn more about client inputs than in currently deployed naive hashing-based contact discovery methods.</p><p>Chen et al. <ref type="bibr" target="#b19">[19]</ref> give a PSI protocol based on fully homomorphic encryption. The authors present multiple optimizations that make the protocol practically viable. Their work was improved and extended to the special use case of labeled PSI <ref type="bibr" target="#b18">[18]</ref>, where for intersecting items an associated label is transferred and security is not only guaranteed in case of malicious clients but also malicious servers (with some controlled leakage). The advantage of the protocols of <ref type="bibr" target="#b18">[18,</ref><ref type="bibr" target="#b19">19]</ref> is that their communication complexity is sublinear instead of linear in the size of the server set. However, this comes at the cost of repeated high computational overhead, whereas the online phase of our protocols is very efficient and requires no cryptographic operations on the server side.</p><p>Mobile PSI. Huang et al. <ref type="bibr" target="#b35">[34]</ref> provided first performance results for secure computation on smartphones with security against semi-honest adversaries. They implemented a circuit-based PSI protocol on Android. Their implementation managed to evaluate ≈ 100 AND gates per second, taking about 10 min to intersect two sets of 256 items each.</p><p>Asokan et al. <ref type="bibr" target="#b6">[6]</ref> implemented an RSA-based PSI protocol with security against semi-honest adversaries on smartphones for secure mobile resource sharing.</p><p>Carter et al. <ref type="bibr" target="#b17">[17]</ref> presented a maliciously secure system for secure outsourced garbled circuit evaluation on mobile devices. Subsequently, Mood et al. <ref type="bibr" target="#b48">[46]</ref> showed how to further optimize outsourced evaluation. They also point out how their framework can be used to implement a secure friend finder.</p><p>"PROUD" <ref type="bibr" target="#b51">[49]</ref> is a decentralized approach for private contact discovery based on the DNS system. It enables users to privately discover the current network addresses of friends, which differs from the scenario of a centralized messaging service we consider. Moreover, friendship bootstrapping requires an out-of-band communication channel between users.</p><p>Compared to these works, we optimize protocols for unbalanced PSI with a central service provider and provide native implementations for maximum performance on smartphones.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3">Background</head><p>In the following, we introduce cryptographic building blocks that are required for the remainder of this work.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.1">Oblivious Transfer (Extensions)</head><p>Oblivious transfer (OT) <ref type="bibr" target="#b59">[57]</ref> is a cryptographic protocol that in its most basic form allows a sender P 1 to obliviously transfer one out of two messages (m 0 , m 1 ) to a receiver P 2 based on a selection bit b chosen by P 2 s.t. P 1 learns nothing about b and P 2 learns only m b but nothing about m 1−b .</p><p>It was shown in <ref type="bibr" target="#b36">[35]</ref> that performing OTs always requires some form of public key cryptography. However, with OT extension (OTe) protocols <ref type="bibr" target="#b9">[9,</ref><ref type="bibr" target="#b37">36]</ref>, a small number (e.g., 128) of "base OTs" can be extended to a large number of OTs using only efficient symmetric cryptographic operations.</p><p>There exist flavors of OTe with reduced communication complexity <ref type="bibr" target="#b5">[5]</ref>: In random OT (R-OT), neither party inputs any values, but the inputs of sender and receiver are randomly chosen by the protocol. In correlated OT (C-OT), m 0 is chosen at random, whereas m 1 is computed as a function f of m 0 :</p><formula xml:id="formula_0">m 1 = f (m 0 )</formula><p>, where f is privately known to P 1 only.</p><p>It is possible to precompute OTs s.t. all computationally expensive operations are performed via R-OTs in advance <ref type="bibr" target="#b8">[8]</ref>. Later, the random values obtained via R-OTs are used to mask the actual inputs, requiring only cheap XOR operations in the style of one-time-pad encryption.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.2">Garbled Circuits</head><p>Yao's garbled circuits (GC) <ref type="bibr" target="#b64">[62]</ref> is one of the most prominent techniques for secure two-party computation. (In the following the two parties are called garbler and evaluator.) The idea is to represent the function that is evaluated as a Boolean circuit and to replace each logical two-input gate by a garbled gate. Each wire of the garbled gate is given two random wire labels, representing 0 and 1. To garble a gate, the garbler uses all four combinations of the gate's two input wire labels to encrypt the corresponding output wire label, based on the truth table of the original gate, and sends the resulting ciphertexts, the so-called garbled table, to the evaluator. The evaluator can then use the two input wire labels it possesses to decrypt one of the four ciphertexts and receive the output wire label, which is then used as input for subsequent gates.</p><p>We now describe how the evaluator obtains the wire labels corresponding to the inputs of the two parties: Since the garbler knows all wire labels, it can send the wire labels corresponding to its input bits to the evaluator. However, to ensure input privacy for the evaluator, the wire labels corresponding to the evalutor's input bits are retrieved via OTs. The garbler also sends information that allows the evaluator to decode the final output wire labels to 0 or 1.</p><p>Several optimizations for Yao's original scheme have been presented s.t. today it is most efficient to combine the following techniques: Point-and-Permute <ref type="bibr" target="#b10">[10]</ref>, Free-XOR <ref type="bibr" target="#b44">[42]</ref>, fixed-key AES garbling <ref type="bibr" target="#b11">[11]</ref>, and Half-Gates <ref type="bibr" target="#b65">[63]</ref>.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.3">OPRF Evaluation</head><p>An oblivious pseudorandom function (OPRF) is a protocol between two parties: sender P 1 holding key k and receiver P 2 holding input x. After the invocation of the protocol, P 2 learns the output f k (x) of a keyed pseudorandom function (PRF) f . Additionally, it is guaranteed that P 1 does not learn anything about x and P 2 does not learn anything about k.</p><p>OPRF evaluations can be used to build PSI protocols as proposed in <ref type="bibr" target="#b29">[28,</ref><ref type="bibr" target="#b31">30,</ref><ref type="bibr" target="#b42">40,</ref><ref type="bibr" target="#b54">52]</ref>: The server samples a key k uniformly at random, evaluates the PRF f k (x i ) on each of its items x i ∈ X, and sends the results to the client. Server and client now engage in the OPRF protocol, where the server inputs key k and the client inputs elements y j ∈ Y . After this step, the client obtains f k (y j ) for each item y j ∈ Y and can perform a plain intersection between the items f k (x i ) and f k (y j ). The client then outputs the elements y j corresponding to the values in the intersection.</p><p>In this work, we instantiate the PRF either using the NaorReingold PRF <ref type="bibr" target="#b49">[47]</ref> (NR-PSI) or a garbled circuit-based evaluation of a block cipher (GC-PSI). In <ref type="bibr" target="#b38">[37]</ref>, the authors describe an alternative algebraic OPRF construction based on a PRF by Dodis-Yampolskiy <ref type="bibr" target="#b26">[25]</ref>. However, due to the use of Paillier encryption, this construction is likely slower than the NaorReingold PRF and their follow-up work <ref type="bibr" target="#b39">[38]</ref>, the basis for <ref type="bibr" target="#b61">[59]</ref> (cf. §6.2). Moreover, it requires a common reference string in the form of an RSA modulus with unknown factorization.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.4">Cuckoo Filters</head><p>Cuckoo filters <ref type="bibr" target="#b28">[27]</ref> are an alternative to the more popular Bloom filters <ref type="bibr" target="#b12">[12]</ref>. Like Bloom filters, they are a data structure for compact set representation that allows for fast membership testing with controllable false positive probability (FPP). Cuckoo filters employ a hashing technique similar to Cuckoo hashing <ref type="bibr" target="#b50">[48]</ref>, which has been used in the past as a building block in PSI protocols (e.g., <ref type="bibr" target="#b43">[41,</ref><ref type="bibr" target="#b53">51,</ref><ref type="bibr" target="#b55">[53]</ref><ref type="bibr" target="#b56">[54]</ref><ref type="bibr" target="#b57">[55]</ref><ref type="bibr" target="#b58">[56]</ref>).</p><p>Resende and de Freitas Aranha <ref type="bibr" target="#b61">[59]</ref> first used Cuckoo filters in a PSI protocol. This is due to several advantages over Bloom filters when representing the server's database, namely they (i) support inserting and deleting items subsequently, whereas standard Bloom filters only support inserting items, and variants that do support deletion such as counting Bloom filters have much higher storage costs; (ii) have better lookup performance; and (iii) use less space in many scenarios while having the same false positive probability.</p><p>Cuckoo filters consist of a table of buckets with fixed bucket size b. Inside the buckets, so-called tags are stored. Tags are small bitstrings obtained by hashing items. More precisely, to represent an item x in a Cuckoo filter, we first calculate its tag t x = H t (x), where H t is a hash function with output bitlength v. This tag is stored in one out of two possible buckets. The position of the first possible bucket is calculated as p 1 = H(x), where H is another hash function that maps the input to a position in the table of buckets. In case this bucket is already full, the tag is stored in the second possible bucket at position p 2 = p 1 ⊕ H(t x ). Note that it is always possible to determine the other candidate bucket p j just from knowing its tag t x and the current position p i : p j = p i ⊕ H(t x ). If both buckets are full, one tag in one of the buckets is chosen at random, removed from that bucket, and moved to its other possible bucket. This procedure is repeated recursively until no more relocations are necessary.</p><p>To check whether an item is contained in the Cuckoo filter, one computes its tag and both possible bucket locations and compares the tags stored there for equality. For deleting the item, the matching tag is removed from the filter.</p><p>Due to hash collisions, two items may produce equal tags. As a consequence, lookups can lead to false positives. The false positive probability ε max is mainly dependent on the tagsize v and also slightly on the bucket size b since larger buckets result in more possible collisions within each bucket.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.5">Unbalanced PSI with Precomputation</head><p>For private contact discovery, the following properties are desired: (i) the server performs the computationally expensive tasks; (ii) all computationally expensive and communication intensive tasks are performed only once; and (iii) the actual intersection computation is very fast and also allows for efficient updates. Therefore, <ref type="bibr" target="#b42">[40]</ref> suggest to use PSI protocols with precomputation, where most time consuming tasks are performed ahead of the actual intersection.</p><p>Our PSI protocols for unbalanced set sizes share a common structure. Following the precomputation approach of <ref type="bibr" target="#b42">[40]</ref>, they are divided into the following four phases: (i) The base phase is completely independent of any input data and consists, e.g., of OT precomputation. Its complexity is linear in the maximum number of contacts a client expects to match in future protocol executions before the base phase is re-run.</p><p>(ii) The complexity of the setup phase is linear in the size of the large set held by the server. It involves encrypting all elements in the server database via PRF evaluations as described in §3.3 and inserting them into a Cuckoo filter for compact representation, which is transferred to the client. (iii) During the online phase client and server jointly perform OPRF evaluations on all elements of the client. The client then looks up all received encryptions in the Cuckoo filter to determine the intersection. Thus, the complexity of the online phase is only linear in the size of the small client set. (iv) Changes in the server database trigger the update phase, where the Cuckoo filter on the client side is updated by sending a small delta for each inserted or deleted database entry.</p><p>PSI protocols, enable security against malicious clients, and suggest multiple extensions to further increase practicality.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.1">More Efficient Database Representations</head><p>Realistic Cuckoo Filter Parameters. Resende and de Freitas Aranha <ref type="bibr" target="#b61">[59]</ref> propose using Cuckoo filters as an extension to the DH-based PSI protocol of <ref type="bibr" target="#b7">[7]</ref> and they perform experiments to find optimal Cuckoo filter parameters based on the number of server items and the desired error probability. While their findings are directly applicable to our use case, they set very aggressive Cuckoo filter parameters (tagsize v = 16, bucket size b = 3) and settle for a maximum false positive probability (FPP) of ε max ≈ 2 −13 . We find this FPP not practical since it implies that about one in 10 clients performing PSI for 2 10 elements receives a false positive.</p><p>Instead, we propose to use tagsize v = 32 to reach a FPP of ε max ≈ 2 −29 or tagsize v = 42 to reach a FPP of ε max ≈ 2 −39 while still maintaining a bucket size of b = 3. For our experiments, we choose the parameter set v = 32, b = 3, and choose the size of the Cuckoo filter to have a load factor of ≈ 66%, leading to a Cuckoo filter size of 6 MiB per 2 20 items.</p><p>Novel Cuckoo Filter Compression. The size of Cuckoo filters can be reduced by applying a simple but effective compression technique that to the best of our knowledge was not considered before: For each entry of a Cuckoo filter, an additional bit is transmitted that indicates whether this entry is empty or holds a tag. The entry itself is only transmitted if it is not empty. This way, the filter is represented as a bit map and a list of tags. For a Cuckoo filter storing n items with tagsize v, bucket size b, and load factor l, this reduces the size from n l · v bits to n l + n · v bits. In the example above, the size of the Cuckoo filter is reduced from 6 MiB to 4.19 MiB, i.e., by ≈ 30 %. An advanced version of the compression technique presented above encodes the number of tags (0 to b) in each bucket with log 2 (b + 1) bits instead of sending b bits per bucket. This is possible since the actual position of each tag within a bucket is not important.</p><p>This compression technique is especially useful for very sparse Cuckoo filters, which appear in use cases where the set of items is expected to grow fast (e.g., during the release phase of a new messaging application). For example, if only 10 % of a Cuckoo filter storing a maximum of 2 20 items is occupied, it can be compressed by a factor of 8.3x.</p><p>In concurrent and independent work, Breslow and Jayasena <ref type="bibr" target="#b15">[15]</ref> proposed Morton filters, which combine these compression techniques with cache-optimized layouts and further optimizations. Morton filters provide higher insertion, lookup, and deletion throughput than traditional Cuckoo filters, while usually having equal or slightly lower storage costs. We leave the evaluation and usage of Morton filters in our protocols for future work.</p><p>Better Cuckoo Filter Updates. In <ref type="bibr" target="#b61">[59]</ref>, when performing an update after new elements are inserted into or deleted from the server's set, each encrypted element to be updated is sent to the client where it is inserted into the existing Cuckoo filter. However, for Cuckoo filters, all information required to insert a new item is its tag and the index of one of its candidate buckets. From this information, it is possible to calculate the second candidate bucket in case relocations are necessary. The same information is also sufficient to delete an item. For example, the bucket index in a Cuckoo filter storing n = 2 28 items with bucket size b = 3 and load factor ≈ 66 % can be represented with 27 bits. This results in sending 59 bits per updated element for tagsize v = 32. In comparison, in <ref type="bibr" target="#b61">[59]</ref> an encrypted element is represented by one point on the GLS-254 binary elliptic curve, which results in 256 bits of communication when using point compression with two trace bits, which needs 4.3x more communication than our approach.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.2">More Efficient PRF for GC-PSI</head><p>During the online phase of the GC-PSI protocol, both parties interactively evaluate an OPRF on the client's items using garbled circuits. For each of the client's items, the server prepares a garbled circuit PRF k that evaluates the chosen PRF under the server's key k. The choice of this PRF has a significant impact on both the runtime and the communication complexity of the overall protocol. Several improvements for Yao's GC protocol <ref type="bibr" target="#b64">[62]</ref> have appeared in recent years that changed the desired properties of the functions to be evaluated. Most notably is the Free-XOR <ref type="bibr" target="#b44">[42]</ref> optimization, which allows XOR gates to be evaluated securely "for free", meaning all necessary operations can be performed locally without any communication between the parties. This optimization has lead to research in the area of ciphers with a low number of AND and instead many free XOR gates.</p><p>In previous GC-PSI implementations, the choice of the PRF was AES-128. Using the optimized S-Box implementation of <ref type="bibr" target="#b13">[13]</ref>, an AES-128 circuit (without key schedule) has 5,120 AND gates <ref type="bibr" target="#b33">[32]</ref>, serving as a baseline for comparison.</p><p>In this section, we focus on variants of LowMC <ref type="bibr" target="#b1">[2]</ref>, a highly parameterizable block cipher designed for use cases in multiparty computation (MPC) and fully-homomorphic encryption (FHE). <ref type="bibr" target="#b42">[40]</ref> mentioned the possibility of using LowMC instead of AES for GC-PSI. We look at several instantiations of LowMC and present optimized parameter sets specifically for the use case of GC-PSI and mobile contact discovery. In the following, we give a short description of LowMC and highlight the different parameter choices.</p><p>LowMC <ref type="bibr" target="#b1">[2]</ref> is a block cipher where block size n, key size k, number of S-Boxes per substitution layer m, and allowed data complexity d can be chosen freely up to some sanity constraints. The required number of rounds r to reach the security claims is then derived from these parameters.</p><p>Data Complexity. The data complexity of a cipher is the number of plaintext-ciphertext pairs allowed to be released before the security claims no longer hold. In the GC-PSI protocol, we can exactly control the maximum number of published plaintext-ciphertext pairs by limiting the number of client queries, and therefore can reduce the number of LowMC rounds required for security. We set the allowed data complexity to be d = 2 64 , allowing for 2 20 contact discoveries of 2 10 items for each of the 2 28 clients, while still being below the security margin by a factor of over 100x. For smaller-scale applications, we also give a parameter set for 2 32 total data complexity, which suffices to run 2 20 queries of 2 10 items each. While we could also use this parameter set for largerscale applications, the system needs to be re-keyed after the data complexity has been reached.</p><p>Key Schedule. In many MPC applications using OPRF evaluations, one party knows the entire secret key and can, therefore, perform any key-scheduling algorithm (e.g., for AES or LowMC) offline. The circuit is then modified to take the expanded key as an input. In many cases, this can be a performance improvement since the key-schedule algorithm does not have to be computed using the MPC protocol. However, when performing OPRF evaluations using garbled circuits, the party holding the secret key needs to send wire labels for each input bit, increasing the communication. While for AES-128, only 11x more wire labels need to be transferred for the expanded key, some instantiations of LowMC require several hundreds of rounds. Sending labels for the expanded key essentially removes the advantage of the lower AND count that comes with such a large number of rounds. However, we observe that in the GC-PSI protocol the OPRF evaluation is always performed with the same key. Thus, we can bundle all of the client's circuits together into one large circuit and evaluate the key-schedule only once. This means that we only need to send the wire labels corresponding to the non-expanded key once, and therefore save ≈ 2 KiB for each subsequent client item when using a 128-bit key. It is also possible to only evaluate parts of the garbled circuit if the number of client items is lower than the number of precomputed circuits.</p><p>LowMC Instances. For use in our GC-PSI protocol, we highlight several LowMC instances, exploring different parameter choices. In Tab. 2, we give the parameters and compare the number of AND gates to AES-128. The number of rounds is calculated according to the LowMCv3 round formula 5 , which was updated by the LowMC team to take new cryptanalysis of LowMC (cf. <ref type="bibr" target="#b23">[23,</ref><ref type="bibr" target="#b25">24,</ref><ref type="bibr" target="#b60">58]</ref>) into consideration. We can observe some interesting properties: LowMC instances (1) and (2) require the same number of rounds to be secure, but instance <ref type="formula" target="#formula_5">(1)</ref>    <ref type="bibr" target="#b22">[22]</ref>, the large number of linear layer computations can be reduced, bringing the evaluation time of <ref type="formula">(3)</ref> close to (1) and (2). For these reasons, we recommend the use of instance <ref type="formula">(3)</ref> for GC-PSI, which requires 8.2x fewer AND gates than standard AES-128 (6). Thus, we perform all performance evaluations using instance (3). For use cases with small data complexity requirements, we recommend LowMC instance (4), which is a small improvement of 8.3 % in runtime and communication compared to (3). For completeness and direct comparison to AES-128, we also give a variant of LowMC with data complexity of 2 128 in (5).</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.3">Optimized GC-PSI Protocol</head><p>The idea of using Yao's GC protocol for OPRF evaluations was first proposed in <ref type="bibr" target="#b54">[52]</ref> and used to construct a PSI protocol in the precomputation setting in <ref type="bibr" target="#b42">[40]</ref>. The full protocol description is given in <ref type="figure" target="#fig_1">Fig. 1</ref>.We propose an optimization that halves the online communication for the OTs (which is the only communication in the online phase). This optimization is of independent interest as it improves the practicality of Yao's GC protocol in arbitrary use cases with precomputation. It is based on the observation that with the Free-XOR technique <ref type="bibr" target="#b44">[42]</ref> for Yao's GC protocol <ref type="bibr" target="#b64">[62]</ref>, the client receives one of the two labels l 0 and l 1 = l 0 ⊕ ∆ via OT depending on its input bit, where l 0 is chosen at random and ∆ is a random global constant only known by the garbler. A natural consideration would be to replace the real OTs, as used in <ref type="bibr" target="#b42">[40]</ref>, with correlated OTs (C-OTs) (cf. §3.1). Unfortunately, since the client input is unknown in the base phase, this prevents either the precomputation of the garbled circuits or the OTs. This is because in the online phase when using OT precomputation <ref type="bibr" target="#b8">[8]</ref>, the random messages r 0 and r 1 obtained by the sender in the base phase need to be swapped </p><formula xml:id="formula_1">( PRF i k , l 0 i,1 , . . . , l 0 i,α ) = GC.Build(PRF, k, r 0 i,1 , . . . , r 0 i,α , ∆) PRF i k</formula><p>Initialize Cuckoo filter CF with parameters N s , ε, v, b Setup Phase</p><formula xml:id="formula_2">for i = 1 to N S : CF.Insert(PRF k (x i )) CF for i = 1 to N C :</formula><p>Online Phase for i = 1 to N C :</p><p>for j = 1 to α: for j = 1 to α: in case the random choice made by the receiver differs from its actual input. Thus, it would be necessary to swap input wire labels in the garbled circuits, which requires recomputing and resending at least the first layer of those circuits.</p><formula xml:id="formula_3">b i, j = c i, j ⊕ y i [ j] B i, j = r bi, j i, j ⊕ l 0 i, j l i, j = r ci, j i, j ⊕ B i, j PRF k (y i ) = GC.Eval( PRF i k , l i,1 , . . . , l i,α ) If CF.Contains(PRF k (y i )):</formula><p>Our novel precomputation method circumvents this dilemma: In the base phase we run C-OTs via OT extension s.t. the garbler on input ∆ learns the random but correlated values r 0 and r 1 = r 0 ⊕ ∆, whereas the evaluator upon random choice c learns r c . For garbling we choose the labels for the input wires of the circuit as l 0 = r 0 ⊕ δ and l 1 = l 0 ⊕ ∆. Here, δ is a newly introduced random value that in contrast to ∆ is not global but chosen individually for each label pair. In the online phase of the protocol, the evaluator sends a correction bit b = c ⊕ y stating whether its random choice c differs from the actual input y. The garbler responds with B = r b ⊕ l 0 . This way, the evaluator learns either δ or δ ⊕∆. It then sets the label for its input to l = r c ⊕ B. As one can easily verify for the four possible combinations of random choices c and correction bits b, the evaluator always retrieves the correct label.</p><p>The security of the C-OT precomputation is based on the same arguments as standard OT precomputation <ref type="bibr" target="#b8">[8]</ref> and since we use a fresh uniformly random δ for each wire label, the resulting wire label is also uniformly random. In other words, we resolve the problem by fixing the wire labels but if necessary swapping the masks required to retrieve the correct label from the initial C-OT result. </p><formula xml:id="formula_4">b i, j = c i, j ⊕ y i [ j] r i, j = r bi, j i, j r 1−bi, j i, j ⊕ (r bi, j i, j · a j ) r inv i = ( n ∏ j=1 r i, j ) −1 mod q R i, j = r ci, j i, j ⊕ y i [ j] · (r 1−bi, j i, j ⊕ (r bi, j i, j · a j )) ˜ g i = g a0·r inv i mod p C i = α ∏ j=1 R i, j mod q ˜ g i If CF.Contains( ˜ g C i i mod p) then put y i into S Output S</formula><p>Figure 2: Our optimized NR-PSI protocol (based on <ref type="bibr" target="#b32">[31,</ref><ref type="bibr" target="#b42">40,</ref><ref type="bibr" target="#b61">59]</ref>). When using a plain finite field, the modulus p is prime, q is a prime divisor of p − 1, g ∈ Z * p is of order q, and a 0 , a 1 , . . . , a α as well as r 0 i, j , r 1 i, j are random numbers in Z * q . The update phase is omitted since it is similar to the GC-PSI protocol (cf. <ref type="figure" target="#fig_1">Fig. 1</ref>), except using the NR-PRF to compute tag t i and CF position p i .</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.4">Optimized NR-PSI Protocol</head><p>The usage of the Naor-Reingold PRF (NR-PRF) <ref type="bibr" target="#b49">[47]</ref> for PSI was first proposed in <ref type="bibr" target="#b32">[31]</ref> and the resulting PSI protocol transformed into the precomputation setting in <ref type="bibr" target="#b42">[40]</ref>. The NR-PRF for key k and element x i is defined as</p><formula xml:id="formula_5">f k (x i ) = g a 0 ·∏ α j=1 a x i, j i mod p,<label>(1)</label></formula><p>where, when using a plain finite field, p is a prime, q is a prime divisor of p − 1, g ∈ Z * p is a generator of order q, a 0 , a 1 , . . . , a α are random numbers in Z * q forming key k, and α is the bitlength of element x i .</p><p>Among all protocols for mobile contact discovery evaluated in <ref type="bibr" target="#b42">[40]</ref>, NR-PSI is the only protocol besides GC-PSI that can easily be made secure against malicious clients by employing malicious secure OT extensions (cf. §4.5). Furthermore, according to the empirical performance comparison in <ref type="bibr" target="#b42">[40]</ref>, the NR-PSI protocol causes ≈ 30x less communication overhead than GC-PSI without our optimizations. This is why we also consider the NR-PSI protocol in this work and compare it to our optimized GC-PSI implementation in §6.</p><p>The full protocol description is given in <ref type="figure">Fig. 2</ref>. We propose an optimization that improves the online communication for OTs by factor 2x. The optimization is based on the observation that in the definitions of <ref type="bibr" target="#b32">[31]</ref> the client chooses between a random r and r · a depending on the current bit of its input element. This implies that C-OTs (cf. §3.1) can be used instead of real OTs, thereby sending only one message in the size of the symmetric security parameter instead of the two messages when using the OTe protocols of <ref type="bibr" target="#b2">[3]</ref>.</p><p>Since we use the precomputation form of <ref type="bibr" target="#b42">[40]</ref>, we propose a novel combination of OT precomputation <ref type="bibr" target="#b8">[8]</ref> and C-OT <ref type="bibr" target="#b2">[3]</ref>. As in OT precomputation, the client sends a correction bit b stating whether its random choice c in the precomputation phase equals its real input. Depending on b, the server then decides which of the two random messages obtained during OT precomputation is chosen as r and which is used to mask the correlated message r · a that is sent to the client. Likewise, the client either proceeds with the message obtained during OT precomputation as r or uses this message to unmask the received correlated message.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.5">Malicious Security</head><p>As observed already in <ref type="bibr" target="#b42">[40]</ref>, the only messages sent by the client in the GC-PSI and NR-PSI protocols are those in the base OT and OT extension protocols as well as the correction bits during the online phase when applying OT precomputation <ref type="bibr" target="#b8">[8]</ref>. Therefore, both protocols can easily be made secure against a malicious client by using a maliciously secure OTe protocol such as <ref type="bibr" target="#b3">[4]</ref> or <ref type="bibr" target="#b40">[39]</ref>, together with maliciously secure base OTs such as <ref type="bibr" target="#b52">[50]</ref>. As the OT extension contributes only a small percentage to the total runtime of the PSI protocols and today's maliciously secure OTe protocols are only slightly less efficient than the passively secure OT extension of <ref type="bibr" target="#b2">[3]</ref>, the total runtime of the PSI protocols does not increase by a noticeable amount when replacing the OTe protocols. Please note that enumeration attacks (i.e., querying the server repeatedly with different inputs) are still possible when using our protocols. However, even an ideal functionality for PSI (e.g., a trusted third party) and currently deployed non-private contact discovery methods cannot prevent this. We recommend to employ well-established measures like rate limiting to mitigate such attacks.</p><p>The case of a malicious server is different: it could, for example, send wrong wire labels, use wrong circuit descriptions, or send a wrong server set. In general, the client does not reveal the intersection result to the server, so a malicious server can only influence the correctness of the client's computation, but cannot learn any information about the client's items when using maliciously secure OTs. Unfortunately, in most mobile messaging applications, the client sends information about the intersection (most likely even the entire intersection) to the server. This allows a malicious server to learn information about the client's items that are not part of the intersection of the two actual input sets. Therefore, we need to assume a semi-honest server in such scenarios. Preventing malicious behavior on the server side could be done by combining our protocols with a trusted execution environment for hardware-enforced code and remote attestation capabilities s.t. the server's protocol deviation possibilities are restricted to wrong inputs for the Cuckoo filter construction. However, assuming a semi-honest server is reasonable since there are legal requirements and financial incentives for a service provider to behave correctly: once misconduct gets known publicly, users will abandon the malicious service and switch to a more trustworthy alternative.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.6">Further Extensions</head><p>The bottleneck for very large server sets is the communication required to send the Cuckoo filter to the client. For example, a compressed Cuckoo filter for 2 <ref type="bibr" target="#b29">28</ref> server items with false positive probability ε max ≈ 2 −29 has a size of ≈ 1 GiB, which is prohibitively large for transmission on mobile network speeds and data plans. For even larger server databases, the protocols eventually become impractical. For example, for a server database with 2 31 entries, it would be necessary to download a Cuckoo filter of size ≈ 8 GiB. Therefore, we describe how to reduce the overall client-server communication to be logarithmic in the size of the server database. We propose further extensions to increase practicality in App. A.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Combination with Private Information Retrieval (PIR).</head><p>In their PIR-PSI protocol, Demmler et al. <ref type="bibr" target="#b21">[21]</ref> propose the use of multiple non-colluding servers together with a multi-server PIR protocol. Applied to our PSI protocols, the extension works as follows: After the server prepared the Cuckoo filter, it is not transmitted to the client, but to a second non-colluding server instead. Since the Cuckoo filter only contains the results of PRF evaluations, the second server does not learn anything about the items in the main server's set. The client then performs the OPRF evaluation for each of its items with the first server and then runs a multi-server PIR protocol to retrieve the fingerprints stored in the Cuckoo filter.</p><p>The communication complexity for the multi-server PIR lookup is O(κ log n), where κ is the symmetric security parameter and n the size of the server database <ref type="bibr" target="#b14">[14,</ref><ref type="bibr" target="#b21">21]</ref>. Since the overall client-server communication therefore is logarithmic and not linear in the size of the server database, our protocols are expected to remain practical even for server databases with more than a billion items. In practice, the remaining challenge for messaging services is to find a trustworthy partner operating the second PIR server while at the same time making it credible to users that no collusion is happening.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5">Android Implementation</head><p>To demonstrate the feasibility of our optimized PSI protocols for performing private contact discovery on mobile devices, we provide implementations for smartphones running on Android. <ref type="bibr" target="#b6">6</ref> Previous works <ref type="bibr" target="#b35">[34,</ref><ref type="bibr" target="#b42">40]</ref> presented experiments on dedicated mobile devices, but the performance of these implementations was not sufficient for real-world usage. For example, the Java implementation of <ref type="bibr" target="#b42">[40]</ref>, which is based on the ObliVM framework <ref type="bibr" target="#b45">[43]</ref>, takes more than a second to evaluate a single garbled AES-128 circuit. In our implementation, we make use of native C/C++ code support in Android and also use hardware acceleration for cryptographic operations available in modern smartphones. More precisely, native AES-128 instructions are used both as a PRNG and during the creation and evaluation of the garbled circuit. These features allow our implementation to reach truly practical performance. Compared to the Java-based implementation of <ref type="bibr" target="#b42">[40]</ref>, we evaluate a garbled AES-128 circuit more than 1,000x faster.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5.1">Base OTs and OT Extension</head><p>For performing base OTs, we use the OT protocol of Chou and Orlandi <ref type="bibr" target="#b20">[20]</ref> with the additional verification step proposed by Doerner et al. <ref type="bibr" target="#b27">[26]</ref>. Together with the (C-)OT extension protocol of <ref type="bibr">Keller, Orsini, and Scholl [39]</ref>, this results in a maliciously secure protocol (cf. <ref type="bibr" target="#b27">[26]</ref>).</p><p>Our OT implementation is based on libOTe by <ref type="bibr">Rindal [60]</ref>, which is heavily optimized for the x86 architecture. Thus, we ported large parts of the library to the ARMv8 architecture to achieve high performance on mobile devices. At the same time, we kept the library compatible with its x86 counterpart to facilitate natural development of client-server applications.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5.2">GC-PSI Implementation</head><p>For the GC-PSI protocol, we implement Yao's GC protocol (cf. §3.2) with Free-XOR <ref type="bibr" target="#b44">[42]</ref> and Half-Gates <ref type="bibr" target="#b65">[63]</ref>, resulting in no communication for XOR-gates and two wire labels of κ bits each per AND gate, where κ = 128 is the symmetric security parameter.</p><p>For creating and evaluating the garbled tables, the most efficient choice today is fixed-key AES <ref type="bibr" target="#b11">[11]</ref>, mainly due to the hardware support for AES that is widespread in modern x86 CPUs. The ARM Cryptography Extensions (CE) introduced in the ARMv8 architecture similarly provide hardware instructions for AES, SHA-1, and SHA-2 variants, resulting in AES speedups of factor 35x compared to a standard AES software implementation. This allows us to also use fixed-key AES <ref type="bibr" target="#b11">[11]</ref> for garbling in our implementation. <ref type="bibr" target="#b7">7</ref> Additionally, the ARMv8 architecture provides instructions for vector operations on 128-bit registers (the so-called NEON instruction set), which we use to efficiently work with 128-bit wire labels. In Tab. 7 in App. B, we demonstrate the wide availability of ARM CE in most recent smartphone processors.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5.3">NR-PSI Implementation</head><p>For implementing the NR-PSI protocol, we use the modified libOTe version described in §5.1 for C-OT precomputation as well as the GNU GMP 8 library for modular arithmetic operations and the MIRACL 9 library for instantiating the protocol <ref type="bibr" target="#b7">7</ref> As recently reported by <ref type="bibr" target="#b30">[29]</ref>, many secure computation implementations use fixed-key AES incorrectly. However, according to <ref type="bibr" target="#b30">[29]</ref>, our instantiation for garbling following the definitions of <ref type="bibr" target="#b65">[63]</ref> is not affected. In contrast, libOTe <ref type="bibr" target="#b62">[60]</ref> is currently vulnerable. The suggested fixes however are not expected to result in a significant negative performance impact <ref type="bibr" target="#b30">[29]</ref>.</p><p>8 https://gmplib.org 9 https://github.com/miracl/MIRACL with elliptic curve P-256. The advantage of instantiating the NR-PSI protocol with ECC instead of using a plain finite field with comparable security parameters is that the size of the values˜gvalues˜ values˜g i transferred during the online phase (cf. <ref type="figure">Fig. 2</ref>) is reduced by factor 8x. Also, computationally expensive modular exponentiations are replaced with point multiplications. We refer to this variant as ECC-NR-PSI in the following. All libraries are compiled specifically for the ARMv8 architecture.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="6">Performance Evaluation</head><p>We empirically evaluate the performance of our optimized GC-PSI and NR-PSI protocols and compare them to other unbalanced PSI protocols from the literature.</p><p>Benchmark Settings. For easy comparison to related work, we choose similar sizes for the server's and the client's set: N s ∈ {2 20 , 2 24 , 2 26 , 2 28 } and N c ∈ {1, 2 8 , 2 10 }. Here, N c = 1 represents the case where a client wants to check a new contact. All items have a bitlength of α = 128. We instantiate all primitives and protocols with 128-bit security.</p><p>In all of our experiments, the sever is equipped with an Intel Core TM i7-4600U CPU @ 2.6 GHz and 16 GiB of RAM. The client is a Google Pixel XL 2 smartphone with a Snapdragon 835 CPU @ 2.45 GHz and 4 GiB of RAM. We consider two network settings: (i) an IEEE 802.11ac WiFi connection with ≈ 230 Mbit/s down-/upload and 70 ms RTT and (ii) a mobile LTE connection with 42 Mbit/s download (S → C), 4 Mbit/s upload (S ← C), and 80 ms RTT.</p><p>Note that the LTE network speeds are real-world parameters and exhibit a significant difference in the down-and upload rates. This is common in commercially available data plans and often not taken into account in previous evaluations.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="6.1">GC-PSI and NR-PSI Protocol</head><p>The runtime and communication costs for the base, setup, and online phase of our protocols are shown in Tab. 3, Tab. 4, and Tab. 5, respectively, and are averaged over 100 executions (except for the setup phase, where we chose 10 or less executions due to the larger runtime). We use LowMC instance (3) from Tab. 2 for the evaluation. In all tests, only a single thread was used for both the server and the client. Since all phases of our protocols can be parallelized trivially, we expect a near-linear speedup when using multiple threads, except in situations where the bottleneck is network bandwidth. Furthermore, note that in the base and online phases of the GC-PSI protocol, only one party actually performs the computationally expensive task of garbling or evaluating the circuit. Therefore, if both parties are ready, the base and online phases of the GC-PSI protocol can be interleaved in a pipelined fashion, where the server sends the garbled circuits and the client evaluates them as soon as parts of them are available. This   <ref type="table">Table 4</ref>: Setup phase of our PSI protocols. Server setup run once for all clients. The Cuckoo filter parameters are set as described in §4.1 (ε max = 2 −29.4 , v = 32, b = 3). Best results marked in bold. Note that the size of the client set does not influence the runtime of the setup phase and the client does not send any data during the setup phase in any protocol.</p><p>method can reduce the runtime of the combined base and online phase to the runtime of the slower phase. We observe that using LowMC instead of AES in the GC-PSI protocol leads to 7.4x less communication and thus to a much smaller runtime in the base phase, while the online phase of both protocol versions is very comparable. Only during the one-time setup phase, the AES version is more efficient due to AES-NI instructions. Using a hardwareaccelerated implementation of LowMC could reduce this runtime close to the one of AES, but we again stress that the setup phase is a one-time cost. This confirms our choice of LowMC over AES as the PRF in GC-PSI.</p><p>ECC-NR-PSI is the most efficient protocol during the base phase since it does not send garbled circuits to the client: compared to the LowMC version of GC-PSI, it requires 12x less communication. The ECC-NR-PSI online phase is slightly slower than both GC-PSI protocols, while being the fastest for a single item. The one-time setup phase of the ECC-NR-PSI protocol is much slower than both GC-PSI protocol versions due to elliptic curve operations.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="6.2">Comparison with Related Work</head><p>We now highlight differences to other works in the literature and compare our optimized GC-and NR-PSI protocols and implementations to other unbalanced PSI implementations available for Android in Tab. 6. Comparisons with implementations for the x86 architecture are given in App. D.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Parameters</head><p>Time  <ref type="table">Table 5</ref>: Online phase of our PSI protocols. Best results marked in bold. The influence of the server set size on runtime and communication is negligible and therefore not listed.</p><p>Chen et al. <ref type="bibr" target="#b18">[18,</ref><ref type="bibr" target="#b19">19]</ref>. The protocols of <ref type="bibr" target="#b18">[18,</ref><ref type="bibr" target="#b19">19]</ref> for unbalanced PSI are based on leveled fully homomorphic encryption (FHE). They both work as follows: the client encrypts all its items and sends them to the server, which then computes the intersection under encryption with all of its own items and returns the result in encrypted form. The client can then decrypt the received ciphertexts to find the intersection. The protocol in <ref type="bibr" target="#b19">[19]</ref> is only defined for 32 bit strings, a limitation that stems from the parameter choice of the FHE scheme. Since the universe of possible items is larger than 2 32 in the use case of contact discovery, we exclude this protocol from further comparisons. However, this limitation was lifted in the subsequent work <ref type="bibr" target="#b18">[18]</ref> where arbitrary length items are supported. The benefits of <ref type="bibr" target="#b18">[18]</ref> compared to our protocols are that the client is not required to store any data and that the total communication is sublinear in the size of the server database. For example, for N s = 2 28 , the total communication in the protocol of <ref type="bibr" target="#b18">[18]</ref> is only 18.4 MB.</p><p>However, there is a huge computational overhead during the online phase of the protocol: even on a high-end server it takes more than 12 s on 32 threads to compute the intersection with N c = 1024 client elements. Unfortunately, the online phase needs to be repeated whenever there are updates on client or server side. Also, due to the employed FHE batching optimizations, the runtime for a single item is almost equal to the runtime for thousands of items. Assuming that each of the N s = 2 28 registered clients runs one update per day, this would require the service provider to pay for 2 28 · 12.1 · 32 ≈ 28.9 million core hours every day. In contrast, the online phases of our protocols run in ≈ 2 s for N c = 1024 in the WiFi setting on a single-threaded smartphone and require no cryptographic operations on server side. The evaluation of <ref type="bibr" target="#b18">[18]</ref> was performed on two servers with Intel Xeon CPUs in a 10 Gbit/s local network. Therefore, it is also unclear how the FHE encryption and decryption routines perform in a mobile setting on real smartphones.</p><p>Resende and de Freitas Aranha <ref type="bibr" target="#b61">[59]</ref>. In <ref type="bibr" target="#b61">[59]</ref>, the authors present implementation improvements for the PSI protocol of <ref type="bibr" target="#b7">[7]</ref>. For each element in the client's set, they perform 3   <ref type="bibr" target="#b61">[59]</ref> is a significant optimization of the GLS-254 curve for x86 CPUs. It is therefore unclear how their protocol performs on smartphones with ARMv8-A hardware. Furthermore, their Cuckoo filters parameters allow for a false positive probability that is too high for real-world deployment (cf. §4.1). Finally, their protocol assumes semi-honest adversaries, and while a maliciously secure variant <ref type="bibr" target="#b39">[38]</ref> of their basic protocol exists, its performance has not yet been evaluated.</p><p>Kiss et al. <ref type="bibr" target="#b42">[40]</ref>. In <ref type="bibr" target="#b42">[40]</ref>, the authors consider various semihonest PSI protocols, from which their GC-PSI and NR-PSI protocols are the foundation of our work. Their Android implementation (in pure Java) takes about 1.5 s for a single oblivious AES evaluation in their GC-PSI protocol. The authors therefore conclude that instead their ECC-DH-PSI protocol is most suited for the mobile use case since the evaluation time for a single item is 23 ms. However, both of our optimized protocols with security against malicious clients are more than competitive with an evaluation time of less than 2 ms for a single item. For N c = 1024 client elements, the combined base and online time of our optimized GC-and NR-PSI protocols improves by more than a factor of 300x and 30x, respectively, compared to the unoptimized semi-honest implementations of <ref type="bibr" target="#b42">[40]</ref> in both the WiFi and the LTE network setting. Also, the total communication during the base and online phase improves by factors 7.5x and 10.9x compared to the respective GC-and NR-PSI protocols of <ref type="bibr" target="#b42">[40]</ref>.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="7">Conclusion</head><p>Our native implementations of our optimized NR-and GC-PSI protocols are two almost equivalently outstanding solutions for large-scale mobile private contact discovery with security against malicious clients. The Signal developers stated that to actually deploy PSI-based contact discovery, it would need to be able to handle a server database with 1 billion users while address books are assumed to contain up to 10,000 contacts. In terms of latency, lookups are required to take less than 2 s, while in terms of throughput a single core should be able to handle 1,600 contacts per second. Clearly, we cannot meet these demanding requirements yet. Therefore, as part of future work, we suggest to implement and evaluate our proposed extensions (especially the combination with PIR) to take the next important steps towards real-world deployment.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>A Protocol Extensions</head><p>We propose further extensions for improving practicality.</p><p>Combination with FHE Protocols. Protocols for unbalanced PSI based on fully homomorphic encryption (FHE), e.g., <ref type="bibr" target="#b18">[18]</ref>, are computationally expensive and thus much slower during the online phase than our protocols (cf. §6.2). However, their advantage is that the total amount of communication is sublinear in the size of the server database. When clients install a new messaging application and are not connected to a high-speed WiFi network, such FHE-based protocols likely produce faster contact discovery results, which leads to higher user satisfaction. Thus, we recommend the following hybrid use of contact discovery protocols: Directly after installation of a mobile messaging application, a FHEbased protocol (e.g., <ref type="bibr" target="#b18">[18]</ref>) is used to perform the initial contact discovery. Then, while the phone is charging overnight and is connected to a WiFi network, the base and setup phase of one of our protocols is performed. This leads to very efficient online phases for future protocol runs, which are performed regularly when updates on client or server side happen (potentially over mobile data plans where communication matters). See also §6.2 for a more detailed comparison between FHEbased unbalanced PSI protocols and our work.</p><p>Dedicated Server for Cuckoo Filter Membership Tests. In many scenarios, a large number of clients is part of a single organization. For example, consider the mobile malware detection scenario discussed in <ref type="bibr" target="#b42">[40]</ref>, where all applications installed on a client's smartphone are checked against a database of malicious applications. When employing such a malware detection service in an enterprise context, a company usually buys a volume license for all of its employees.</p><p>To reduce the overall data communication, the company could host a dedicated server which would receive the large encrypted database of server items represented as a compressed Cuckoo filter once. If a client then wants to compute the intersection between installed and malicious applications, it only communicates with the malware detection service provider to perform OPRF evaluations and then hands off the encrypted items to the trusted company server, which performs the set intersection on behalf of the clients and reports back the result. Since this trusted server does not have knowledge of the PRF key, it cannot directly deduce which items the client holds.</p><p>However, since the OPRF result is deterministic when using the same secret key, the trusted server can learn when multiple clients request the same item. Furthermore, it could interact with the malware detection service provider itself to obtain encryptions of known items, which it can compare to the encrypted items of the clients. However, this kind of leakage can be argued to be acceptable in many settings, such as the company-internal setting mentioned above.</p><p>Partitioning the Database. A simple solution to reduce the required communication during the setup phase is to partition the server database s.t. clients only download Cuckoo filters relevant for the contacts in their address book (for example w.r.t. number prefixes, states, countries, or regions).</p><p>Assuming that the majority of users has contacts in only very few such partitions, this approach leads to practical data transmission sizes even for services with billions of users. In the worst case (i.e., a user has contacts in all partitions or prefers to leak no information at all), multiple runs of our protocols can cover the worldwide user base.</p><p>However, this solution presents a significant performance / privacy trade-off since clients leak information about their social graph. For example, intelligence agencies might find it suspicious if US citizens evidently have contacts in middle eastern countries. How severe the privacy of users is threatened also depends on how fine-grained the chosen partitions are: if they are too small, it might even be possible to identify an individual just by observing Cuckoo filter downloads.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>B ARM Cryptography Extensions (CE)</head><p>The wide availability of the ARM Cryptography Extensions (CE) in modern smartphone processors is highlighted in Tab. 7.</p><p>System-on-a-Chip (SoC) Example Smartphones and Tablets CE Apple A4, A5, A6 iPhone 4, iPad, iPad 2, iPhone 5 Apple A7, A8, A9 iPhone (5s,6), iPad Air, iPad mini 2 Apple A10, A11, A12 iPhone (7,8,X,Xs), iPad (2018), iPad Pro Snapdragon 801 HTC One (E8), OnePlus One Snapdragon 805</p><p>Galaxy S5+, Nexus 6 Snapdragon 808</p><p>Nexus 5X, LG G4, Moto X Style Snapdragon 810</p><p>OnePlus 2, Nexus 6P, Sony Xperia Z5 Snapdragon 820</p><p>OnePlus 3, Galaxy S7, LG G5 Snapdragon 821</p><p>Google Pixel (XL), LG G6 Snapdragon 835</p><p>Google Pixel 2 (XL), Galaxy S8 Snapdragon 845</p><p>OnePlus 6, Galaxy S9, Sony Xperia Z2 <ref type="table">Table 7</ref>: Availability of ARM Cryptography Extensions (CE) in modern smartphone and tablet systems-on-a-chip (SoCs).</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>C Signal Integration Demonstrator</head><p>As a proof-of-concept, we modified the client application of the open-source messenger Signal to perform contact discovery using our PSI protocols. To be able to run the modified client with the official servers, the integration works as follows: Whenever Signal triggers the contact discovery routine, we run one of the PSI protocols with our own PSI server 10 .</p><p>The resulting matches are then used as input for the unmodified Signal contact discovery routine. This way, the official Signal server only learns the hashes of phone numbers which are already registered to the service. Our changes to the user interface of the Android version of the Signal application are depicted in <ref type="figure" target="#fig_4">Fig. 3</ref>.  </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>D Comparison of Unbalanced PSI Protocols on the x86 Architecture</head><p>The goal of our paper is to provide efficient private contact discovery for mobile messaging applications via improved unbalanced PSI protocols with implementations optimized for smartphones. Therefore, we focus our implementation and evaluation efforts on the mobile use case and perform our experiments on real smartphones with ARMv8 architecture. However, to present the complete picture, we give a comparison to protocols for unbalanced PSI running on x86 hardware and communicating in a local network in Tab. 8.  Numbers for other protocols are taken from <ref type="bibr" target="#b18">[18]</ref>. All numbers are from single-core executions, except those marked with * , which was an execution with 32 cores on the server side and 4 cores on the client side. The bit length α of all items is 128, except for <ref type="bibr" target="#b19">[19]</ref>, where α = 32 due to limitations of the protocol.</p></div><figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_1"><head>Figure 1 :</head><label>1</label><figDesc>Figure 1: Our optimized GC-PSI protocol (based on [40, 52, 59]). Wire labels are computed as l 0 i, j = r 0 i, j ⊕ δ i, j and l 1 i, j = l 0 i, j ⊕ ∆, where the values δ i, j are chosen at random while building the garbled circuit. N pre C ≥ N C denotes the number of precomputed OTs and garbled circuits; the base phase must be repeated before further online phase executions once N pre C queries are exceeded.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_2"><head></head><label></label><figDesc>Initialize Cuckoo filter CF with parameters N S , ε, v, b Setup Phase For i = 1 to N S : C i = a 0 α ∏ j=1 a xi[ j] j mod q CF.Insert(g Ci mod p) CF For i = 1 to N C : Online Phase For i = 1 to N c : For j = 1 to α: For j = 1 to α:</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_4"><head>Figure 3 :</head><label>3</label><figDesc>Figure 3: Screenshots of our prototype integration into the open-source messenger Signal.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_2" validated="false"><head>Table 2 :</head><label>2</label><figDesc></figDesc><table>Comparison of PRF instances for use in the GC-PSI 
protocol. The recommended instance is highlighted in bold. 

ble S-Boxes, while (2) does not. Since instance (2) provides 
the same security as (1) while requiring fewer S-Boxes, and 
therefore a lower amount of AND gates, it should always 
be preferred. LowMC instance (3) has the smallest possi-
ble S-Box layer with only one S-Box per round and also the 
lowest number of AND gates. While its 208 rounds can be 
a drawback in some protocols, Yao's GC protocol [62] has 
a constant number of communication rounds and therefore 
the large number of LowMC rounds does not decrease per-
formance in high-latency networks. Additionally, using the 
optimizations presented by </table></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_4" validated="false"><head>Table 3 : Base phase of our PSI protocols.</head><label>3</label><figDesc></figDesc><table>Precomputation for 
checking N 

pre 

c client contacts. Best results marked in bold. 

Parameters 
Server Setup [s] 
Transmission [s] Comm. [MiB] 
Ns 
Protocol 
WiFi 
LTE 
S →C 

2 28 

AES-GC-PSI 
23.94 
32.66 
211.30 
1072 
LowMC-GC-PSI 
1,869.13 
ECC-NR-PSI 
52,332.38 

2 26 

AES-GC-PSI 
4.87 
8.13 
52.55 
268 
LowMC-GC-PSI 
467.29 
ECC-NR-PSI 
12,787.79 

2 24 

AES-GC-PSI 
1.12 
2.13 
13.05 
67 
LowMC-GC-PSI 
116.66 
ECC-NR-PSI 
3,297.96 

2 20 

AES-GC-PSI 
0.06 
0.25 
0.63 
4.19 
LowMC-GC-PSI 
7.27 
ECC-NR-PSI 
241.54 

</table></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_6" validated="false"><head>Parameters PSI Protocol Base + Online Time [s] Communication [MiB] Setup Communication / Setup Transfer [s] Server Setup [s]</head><label></label><figDesc></figDesc><table>Ns 
Nc 
WiFi 
LTE 
S →C 
S ←C 
Client Storage [MiB] 
WiFi 
LTE 

2 28 

1,024 

AES-GC-PSI [40] 
1,507.73 
2,742.66 177.23 
4.00 
1,380.25 42.05 
272.06 
26.70 
NR-PSI [40] 
171.23 
221.20 
64.25 
2.02 
1,380.25 42.05 
272.06 
194,130.21 
LowMC-GC-PSI (Ours) 
3.54 
8.59 
22.01 
2.02 
1,072.00 32.66 
211.30 
1,869.13 
ECC-NR-PSI (Ours) 
2.92 
6.53 
4.07 
2.00 
1,072.00 32.66 
211.30 
52,332.38 

1 

AES-GC-PSI [40] 
1.53 
2.95 
0.18 
0.02 
1,380.25 42.05 
272.06 
26.70 
NR-PSI [40] 
0.17 
0.21 
0.06 
0.01 
1,380.25 42.05 
272.06 
194,130.21 
LowMC-GC-PSI (Ours) 
0.17 
0.18 
0.04 
0.02 
1,072.00 32.66 
211.30 
1,869.13 
ECC-NR-PSI (Ours) 
0.13 
0.13 
0.01 
0.01 
1,072.00 32.66 
211.30 
52,332.38 

2 24 

1,024 

AES-GC-PSI [40] 
1,507.73 
2,742.66 177.23 
4.00 
86.26 
2.74 
16.80 
1.18 
NR-PSI [40] 
171.23 
221.20 
64.25 
2.02 
86.26 
2.74 
16.80 
12,174.40 
LowMC-GC-PSI (Ours) 
3.54 
8.59 
22.01 
2.02 
67.00 
2.13 
13.05 
116.66 
ECC-NR-PSI (Ours) 
2.92 
6.53 
4.07 
2.00 
67.00 
2.13 
13.05 
3,297.96 

1 

AES-GC-PSI [40] 
1.53 
2.95 
0.18 
0.02 
86.26 
2.74 
16.80 
1.18 
NR-PSI [40] 
0.17 
0.21 
0.06 
0.01 
86.26 
2.74 
16.80 
12,174.40 
LowMC-GC-PSI (Ours) 
0.17 
0.18 
0.04 
0.02 
67.00 
2.13 
13.05 
116.66 
ECC-NR-PSI (Ours) 
0.13 
0.13 
0.01 
0.01 
67.00 
2.13 
13.05 
3,297.96 

2 20 

1,024 

AES-GC-PSI [40] 
1,507.73 
2,742.66 177.23 
4.00 
5.39 
0.32 
0.81 
0.05 
NR-PSI [40] 
171.23 
221.20 
64.25 
2.02 
5.39 
0.32 
0.81 
758.40 
LowMC-GC-PSI (Ours) 
3.54 
8.59 
22.01 
2.02 
4.19 
0.25 
0.63 
7.27 
ECC-NR-PSI (Ours) 
2.92 
6.53 
4.07 
2.00 
4.19 
0.25 
0.63 
241.54 

1 

AES-GC-PSI [40] 
1.53 
2.95 
0.18 
0.02 
5.39 
0.32 
0.81 
0.05 
NR-PSI [40] 
0.17 
0.21 
0.06 
0.01 
5.39 
0.32 
0.81 
758.40 
LowMC-GC-PSI (Ours) 
0.17 
0.18 
0.04 
0.02 
4.19 
0.25 
0.63 
7.27 
ECC-NR-PSI (Ours) 
0.13 
0.13 
0.01 
0.01 
4.19 
0.25 
0.63 
241.54 

</table></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_7" validated="false"><head>Table 6 :</head><label>6</label><figDesc></figDesc><table>Comparison of PSI protocols with smartphone implementations. Numbers for protocols of [40] are obtained by running 
their implementations in our benchmarking environment. In all tests N 

pre 

c = N c . Best in class marked in bold. 

point multiplications and transmit 2 group elements. This 
results in a lower communication than our approaches (64 B 
for 2 group elements vs. 22 KiB per garbled circuit vs. 6 KiB 
per item in NR-PSI). However, one major contribution of </table></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_9" validated="false"><head>Table 8 :</head><label>8</label><figDesc></figDesc><table>Comparison of unbalanced PSI protocols in the LAN setting (10 Gbit/s, 0.02 ms RTT) on PC hardware (x86 architecture). 
</table></figure>

			<note place="foot" n="1"> e.g., https://www.backes-srt.com/en/solutions-2/whatsbox</note>

			<note place="foot" n="4"> Optimizing OPRF-based PSI Protocols We propose more efficient database representations and PRFs, give the full descriptions for our optimized NR-and GC-</note>

			<note place="foot" n="5"> https://github.com/LowMC/lowmc/blob/master/determine_r ounds.py</note>

			<note place="foot" n="6"> https://contact-discovery.github.io</note>

			<note place="foot" n="10"> In practice, this PSI server would be run by Signal and use the actual database of Signal users.</note>
		</body>
		<back>

			<div type="acknowledgement">
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Acknowledgments</head><p>This work was co-funded by the DFG as part of project E4 within the CRC 1119 CROSSING and project A.1 within the RTG 2050 "Privacy and Trust for Mobile Users", by the BMBF and the HMWK within CRISP, and by the European Union's Horizon 2020 research and innovation programme under grant agreement No 644052 (HECTOR). Daniel Kales has been supported by iov42 Ltd.</p></div>
			</div>

			<div type="references">

				<listBibl>

<biblStruct xml:id="b0">
	<monogr>
		<title/>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Whatsapp Legal</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Info</surname></persName>
		</author>
		<ptr target="https://www.whatsapp.com/legal" />
		<imprint>
			<date type="published" when="2019" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b1">
	<analytic>
		<title level="a" type="main">Ciphers for MPC and FHE</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Martin</forename><forename type="middle">R</forename><surname>Albrecht</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Christian</forename><surname>Rechberger</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Thomas</forename><surname>Schneider</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Tyge</forename><surname>Tiessen</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Michael</forename><surname>Zohner</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">EUROCRYPT</title>
		<imprint>
			<publisher>Springer</publisher>
			<date type="published" when="2015" />
			<biblScope unit="volume">9056</biblScope>
			<biblScope unit="page" from="430" to="454" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b2">
	<analytic>
		<title level="a" type="main">More Efficient Oblivious Transfer and Extensions for Faster Secure Computation</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Gilad</forename><surname>Asharov</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Yehuda</forename><surname>Lindell</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Thomas</forename><surname>Schneider</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Michael</forename><surname>Zohner</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">CCS</title>
		<imprint>
			<publisher>ACM</publisher>
			<date type="published" when="2013" />
			<biblScope unit="page" from="535" to="548" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b3">
	<analytic>
		<title level="a" type="main">More Efficient Oblivious Transfer Extensions with Security for Malicious Adversaries</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Gilad</forename><surname>Asharov</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Yehuda</forename><surname>Lindell</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Thomas</forename><surname>Schneider</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Michael</forename><surname>Zohner</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">EUROCRYPT</title>
		<imprint>
			<biblScope unit="volume">9056</biblScope>
			<biblScope unit="page" from="673" to="701" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b4">
	<monogr>
		<title/>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Springer</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2015" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b5">
	<analytic>
		<title level="a" type="main">More Efficient Oblivious Transfer Extensions</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Gilad</forename><surname>Asharov</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Yehuda</forename><surname>Lindell</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Thomas</forename><surname>Schneider</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Michael</forename><surname>Zohner</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Journal of Cryptology</title>
		<imprint>
			<biblScope unit="volume">30</biblScope>
			<biblScope unit="issue">3</biblScope>
			<biblScope unit="page" from="805" to="858" />
			<date type="published" when="2017" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b6">
	<analytic>
		<title level="a" type="main">CrowdShare: Secure Mobile Resource Sharing</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">N</forename><surname>Asokan</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Alexandra</forename><surname>Dmitrienko</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Marcin</forename><surname>Nagy</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Elena</forename><surname>Reshetova</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Ahmad-Reza</forename><surname>Sadeghi</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Thomas</forename><surname>Schneider</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Stanislaus</forename><surname>Stelle</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">ACNS</title>
		<imprint>
			<publisher>Springer</publisher>
			<date type="published" when="2013" />
			<biblScope unit="volume">7954</biblScope>
			<biblScope unit="page" from="432" to="440" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b7">
	<analytic>
		<title level="a" type="main">Countering GATTACA: Efficient and Secure Testing of Fully-Sequenced Human Genomes</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Pierre</forename><surname>Baldi</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Roberta</forename><surname>Baronio</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Emiliano</forename><surname>De Cristofaro</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Paolo</forename><surname>Gasti</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Gene</forename><surname>Tsudik</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">CCS</title>
		<imprint>
			<publisher>ACM</publisher>
			<date type="published" when="2011" />
			<biblScope unit="page" from="691" to="702" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b8">
	<analytic>
		<title level="a" type="main">Precomputing Oblivious Transfer</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Donald</forename><surname>Beaver</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">CRYPTO</title>
		<imprint>
			<publisher>Springer</publisher>
			<date type="published" when="1995" />
			<biblScope unit="volume">963</biblScope>
			<biblScope unit="page" from="97" to="109" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b9">
	<analytic>
		<title level="a" type="main">Correlated Pseudorandomness and the Complexity of Private Computations</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Donald</forename><surname>Beaver</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">STOC</title>
		<imprint>
			<publisher>ACM</publisher>
			<date type="published" when="1996" />
			<biblScope unit="page" from="479" to="488" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b10">
	<analytic>
		<title level="a" type="main">The Round Complexity of Secure Protocols (Extended Abstract)</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Donald</forename><surname>Beaver</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Silvio</forename><surname>Micali</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Phillip</forename><surname>Rogaway</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">STOC</title>
		<imprint>
			<publisher>ACM</publisher>
			<date type="published" when="1990" />
			<biblScope unit="page" from="503" to="513" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b11">
	<analytic>
		<title level="a" type="main">Efficient Garbling from a FixedKey Blockcipher</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Mihir</forename><surname>Bellare</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Tung</forename><surname>Viet</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Sriram</forename><surname>Hoang</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Phillip</forename><surname>Keelveedhi</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Rogaway</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">IEEE Symposium on Security and Privacy</title>
		<imprint>
			<publisher>IEEE Computer Society</publisher>
			<date type="published" when="2013" />
			<biblScope unit="page" from="478" to="492" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b12">
	<analytic>
				<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">H</forename><surname>Burton</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Bloom</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Space/Time Trade-offs in Hash Coding with Allowable Errors</title>
		<imprint>
			<date type="published" when="1970" />
			<biblScope unit="volume">13</biblScope>
			<biblScope unit="page" from="422" to="426" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b13">
	<analytic>
		<title level="a" type="main">A New Combinational Logic Minimization Technique with Applications to Cryptology</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Joan</forename><surname>Boyar</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">René</forename><surname>Peralta</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Symposium on Experimental Algorithms</title>
		<imprint>
			<publisher>Springer</publisher>
			<date type="published" when="2010" />
			<biblScope unit="volume">6049</biblScope>
			<biblScope unit="page" from="178" to="189" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b14">
	<analytic>
		<title level="a" type="main">Function Secret Sharing: Improvements and Extensions</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Elette</forename><surname>Boyle</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Niv</forename><surname>Gilboa</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Yuval</forename><surname>Ishai</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">CCS</title>
		<imprint>
			<publisher>ACM</publisher>
			<date type="published" when="2016" />
			<biblScope unit="page" from="1292" to="1303" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b15">
	<analytic>
		<title level="a" type="main">Morton Filters: Faster, Space-Efficient Cuckoo Filters via Biasing, Compression, and Decoupled Logical Sparsity</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Alexander</forename><surname>Breslow</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Nuwan</forename><surname>Jayasena</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the VLDB Endowment (PVLDB)</title>
		<meeting>the VLDB Endowment (PVLDB)</meeting>
		<imprint>
			<date type="published" when="2018" />
			<biblScope unit="volume">11</biblScope>
			<biblScope unit="page" from="1041" to="1055" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b16">
	<analytic>
		<title level="a" type="main">Foreshadow: Extracting the Keys to the Intel SGX Kingdom with Transient Out-of-Order Execution</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Jo</forename><surname>Van Bulck</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Marina</forename><surname>Minkin</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Ofir</forename><surname>Weisse</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Daniel</forename><surname>Genkin</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Baris</forename><surname>Kasikci</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Frank</forename><surname>Piessens</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Mark</forename><surname>Silberstein</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Thomas</forename><forename type="middle">F</forename><surname>Wenisch</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Yuval</forename><surname>Yarom</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Raoul</forename><surname>Strackx</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">USENIX Security</title>
		<imprint>
			<publisher>USENIX Association</publisher>
			<date type="published" when="2018" />
			<biblScope unit="page" from="991" to="1008" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b17">
	<analytic>
		<title level="a" type="main">Secure Outsourced Garbled Circuit Evaluation for Mobile Devices</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Henry</forename><surname>Carter</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Benjamin</forename><surname>Mood</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Patrick</forename><surname>Traynor</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Kevin</forename><forename type="middle">R B</forename><surname>Butler</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">USENIX Security</title>
		<imprint>
			<publisher>USENIX Association</publisher>
			<date type="published" when="2013" />
			<biblScope unit="page" from="289" to="304" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b18">
	<analytic>
		<title level="a" type="main">Labeled PSI from Fully Homomorphic Encryption with Malicious Security</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Hao</forename><surname>Chen</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Zhicong</forename><surname>Huang</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Kim</forename><surname>Laine</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Peter</forename><surname>Rindal</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">CCS</title>
		<imprint>
			<publisher>ACM</publisher>
			<date type="published" when="2018" />
			<biblScope unit="page" from="1223" to="1237" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b19">
	<analytic>
		<title level="a" type="main">Fast Private Set Intersection from Homomorphic Encryption</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Hao</forename><surname>Chen</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Kim</forename><surname>Laine</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Peter</forename><surname>Rindal</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">CCS</title>
		<imprint>
			<publisher>ACM</publisher>
			<date type="published" when="2017" />
			<biblScope unit="page" from="1243" to="1255" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b20">
	<analytic>
		<title level="a" type="main">The Simplest Protocol for Oblivious Transfer</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Tung</forename><surname>Chou</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Claudio</forename><surname>Orlandi</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">LATINCRYPT</title>
		<imprint>
			<publisher>Springer</publisher>
			<date type="published" when="2015" />
			<biblScope unit="volume">9230</biblScope>
			<biblScope unit="page" from="40" to="58" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b21">
	<monogr>
		<title level="m" type="main">PIR-PSI: Scaling Private Contact Discovery</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Daniel</forename><surname>Demmler</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Peter</forename><surname>Rindal</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Mike</forename><surname>Rosulek</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Ni</forename><surname>Trieu</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2018" />
			<publisher>PoPETs</publisher>
			<biblScope unit="page" from="159" to="178" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b22">
	<analytic>
		<title level="a" type="main">Linear Equivalence of Block Ciphers with Partial Non-Linear Layers: Application to LowMC</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Itai</forename><surname>Dinur</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Daniel</forename><surname>Kales</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Angela</forename><surname>Promitzer</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Sebastian</forename><surname>Ramacher</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Christian</forename><surname>Rechberger</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">EUROCRYPT</title>
		<imprint>
			<publisher>Springer</publisher>
			<date type="published" when="2019" />
			<biblScope unit="volume">11476</biblScope>
			<biblScope unit="page" from="343" to="372" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b23">
	<analytic>
		<title level="a" type="main">Optimized Interpolation Attacks on LowMC</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Itai</forename><surname>Dinur</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Yunwen</forename><surname>Liu</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Willi</forename><surname>Meier</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Qingju</forename><surname>Wang</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">ASIACRYPT</title>
		<imprint>
			<biblScope unit="volume">9453</biblScope>
			<biblScope unit="page" from="535" to="560" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b24">
	<monogr>
		<title/>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Springer</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2015" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b25">
	<analytic>
		<title level="a" type="main">Higher-Order Cryptanalysis of LowMC</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Christoph</forename><surname>Dobraunig</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Maria</forename><surname>Eichlseder</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Florian</forename><surname>Mendel</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">ICISC</title>
		<imprint>
			<publisher>Springer</publisher>
			<date type="published" when="2015" />
			<biblScope unit="volume">9558</biblScope>
			<biblScope unit="page" from="87" to="101" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b26">
	<analytic>
		<title level="a" type="main">A Verifiable Random Function with Short Proofs and Keys</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Yevgeniy</forename><surname>Dodis</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Aleksandr</forename><surname>Yampolskiy</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">PKC</title>
		<imprint>
			<publisher>Springer</publisher>
			<date type="published" when="2005" />
			<biblScope unit="volume">3386</biblScope>
			<biblScope unit="page" from="416" to="431" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b27">
	<analytic>
		<title level="a" type="main">Eysa Lee, and abhi shelat. Secure Two-party Threshold ECDSA from ECDSA Assumptions</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Jack</forename><surname>Doerner</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Yashvanth</forename><surname>Kondi</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">IEEE Symposium on Security and Privacy</title>
		<imprint>
			<publisher>IEEE Computer Society</publisher>
			<date type="published" when="2018" />
			<biblScope unit="page" from="980" to="997" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b28">
	<analytic>
		<title level="a" type="main">Cuckoo Filter: Practically Better Than Bloom</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Bin</forename><surname>Fan</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">David</forename><forename type="middle">G</forename><surname>Andersen</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Michael</forename><surname>Kaminsky</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Michael</forename><surname>Mitzenmacher</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Conference on emerging Networking EXperiments and Technologies (CoNEXT)</title>
		<imprint>
			<publisher>ACM</publisher>
			<date type="published" when="2014" />
			<biblScope unit="page" from="75" to="88" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b29">
	<analytic>
		<title level="a" type="main">Keyword Search and Oblivious Pseudorandom Functions</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Michael</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Yuval</forename><surname>Freedman</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Benny</forename><surname>Ishai</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Omer</forename><surname>Pinkas</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Reingold</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">TCC</title>
		<imprint>
			<publisher>Springer</publisher>
			<date type="published" when="2005" />
			<biblScope unit="volume">3378</biblScope>
			<biblScope unit="page" from="303" to="324" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b30">
	<analytic>
		<title level="a" type="main">Efficient and Secure Multiparty Computation from FixedKey Block Ciphers</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Chun</forename><surname>Guo</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Jonathan</forename><surname>Katz</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Xiao</forename><surname>Wang</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Yu</forename><surname>Yu</surname></persName>
		</author>
		<ptr target="https://ia.cr/2019/074" />
	</analytic>
	<monogr>
		<title level="j">IACR Cryptology ePrint Archive</title>
		<imprint>
			<biblScope unit="page">74</biblScope>
			<date type="published" when="2019" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b31">
	<analytic>
		<title level="a" type="main">Efficient Protocols for Set Intersection and Pattern Matching with Security Against Malicious and Covert Adversaries</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Carmit</forename><surname>Hazay</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Yehuda</forename><surname>Lindell</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">TCC</title>
		<imprint>
			<publisher>Springer</publisher>
			<date type="published" when="2008" />
			<biblScope unit="volume">4948</biblScope>
			<biblScope unit="page" from="155" to="175" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b32">
	<analytic>
		<title level="a" type="main">Efficient Protocols for Set Intersection and Pattern Matching with Security Against Malicious and Covert Adversaries</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Carmit</forename><surname>Hazay</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Yehuda</forename><surname>Lindell</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Journal of Cryptology</title>
		<imprint>
			<biblScope unit="volume">23</biblScope>
			<biblScope unit="issue">3</biblScope>
			<biblScope unit="page" from="422" to="456" />
			<date type="published" when="2010" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b33">
	<analytic>
		<title level="a" type="main">Faster secure two-party computation with less memory</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Wilko</forename><surname>Henecka</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Thomas</forename><surname>Schneider</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">ASIACCS</title>
		<imprint>
			<publisher>ACM</publisher>
			<date type="published" when="2013" />
			<biblScope unit="page" from="437" to="446" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b34">
	<monogr>
		<title level="m" type="main">Facebook recommended that this psychiatrist&apos;s patients friend each other</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Kashmir</forename><surname>Hill</surname></persName>
		</author>
		<ptr target="https://splinternews.com/facebook-recommended-that-this-psychiatrists-patients-f-1793861472" />
		<imprint>
			<date type="published" when="2016" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b35">
	<analytic>
		<title level="a" type="main">PrivacyPreserving Applications on Smartphones</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Yan</forename><surname>Huang</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Peter</forename><surname>Chapman</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">David</forename><surname>Evans</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">HotSec</title>
		<imprint>
			<publisher>USENIX Association</publisher>
			<date type="published" when="2011" />
			<biblScope unit="page" from="4" to="4" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b36">
	<analytic>
		<title level="a" type="main">Limits on the Provable Consequences of One-way Permutations</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Russell</forename><surname>Impagliazzo</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Steven</forename><surname>Rudich</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">STOC</title>
		<imprint>
			<publisher>ACM</publisher>
			<date type="published" when="1989" />
			<biblScope unit="page" from="44" to="61" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b37">
	<analytic>
		<title level="a" type="main">Extending Oblivious Transfers Efficiently</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Yuval</forename><surname>Ishai</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Joe</forename><surname>Kilian</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Kobbi</forename><surname>Nissim</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Erez</forename><surname>Petrank</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">CRYPTO, volume 2729 of LNCS</title>
		<imprint>
			<publisher>Springer</publisher>
			<date type="published" when="2003" />
			<biblScope unit="page" from="145" to="161" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b38">
	<analytic>
		<title level="a" type="main">Efficient Oblivious Pseudorandom Function with Applications to Adaptive OT and Secure Computation of Set Intersection</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Stanislaw</forename><surname>Jarecki</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Xiaomin</forename><surname>Liu</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">TCC</title>
		<imprint>
			<publisher>Springer</publisher>
			<date type="published" when="2009" />
			<biblScope unit="volume">5444</biblScope>
			<biblScope unit="page" from="577" to="594" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b39">
	<analytic>
		<title level="a" type="main">Fast Secure Computation of Set Intersection</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Stanislaw</forename><surname>Jarecki</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Xiaomin</forename><surname>Liu</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">SCN</title>
		<imprint>
			<publisher>Springer</publisher>
			<date type="published" when="2010" />
			<biblScope unit="volume">6280</biblScope>
			<biblScope unit="page" from="418" to="435" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b40">
	<analytic>
		<title level="a" type="main">Actively Secure OT Extension with Optimal Overhead</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Marcel</forename><surname>Keller</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Emmanuela</forename><surname>Orsini</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Peter</forename><surname>Scholl</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">CRYPTO</title>
		<imprint>
			<biblScope unit="volume">9215</biblScope>
			<biblScope unit="page" from="724" to="741" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b41">
	<monogr>
		<title/>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Springer</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2015" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b42">
	<analytic>
		<title level="a" type="main">Private Set Intersection for Unequal Set Sizes with Mobile Applications</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Ágnes</forename><surname>Kiss</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Jian</forename><surname>Liu</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Thomas</forename><surname>Schneider</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">N</forename><surname>Asokan</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Benny</forename><surname>Pinkas</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">PoPETs</title>
		<imprint>
			<biblScope unit="volume">2017</biblScope>
			<biblScope unit="issue">4</biblScope>
			<biblScope unit="page" from="177" to="197" />
			<date type="published" when="2017" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b43">
	<analytic>
		<title level="a" type="main">Efficient Batched Oblivious PRF with Applications to Private Set Intersection</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Vladimir</forename><surname>Kolesnikov</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Ranjit</forename><surname>Kumaresan</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Mike</forename><surname>Rosulek</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Ni</forename><surname>Trieu</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">CCS</title>
		<imprint>
			<publisher>ACM</publisher>
			<date type="published" when="2016" />
			<biblScope unit="page" from="818" to="829" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b44">
	<analytic>
		<title level="a" type="main">Improved Garbled Circuit: Free XOR Gates and Applications</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Vladimir</forename><surname>Kolesnikov</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Thomas</forename><surname>Schneider</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">ICALP</title>
		<imprint>
			<publisher>Springer</publisher>
			<date type="published" when="2008" />
			<biblScope unit="volume">5126</biblScope>
			<biblScope unit="page" from="486" to="498" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b45">
	<analytic>
		<title level="a" type="main">ObliVM: A Programming Framework for Secure Computation</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Chang</forename><surname>Liu</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Xiao</forename><forename type="middle">Shaun</forename><surname>Wang</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Kartik</forename><surname>Nayak</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Yan</forename><surname>Huang</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Elaine</forename><surname>Shi</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">IEEE Symposium on Security and Privacy</title>
		<imprint>
			<publisher>IEEE Computer Society</publisher>
			<date type="published" when="2015" />
			<biblScope unit="page" from="359" to="376" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b46">
	<monogr>
				<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Moxie</forename><surname>Marlinspike</surname></persName>
		</author>
		<ptr target="https://signal.org/blog/contact-discovery" />
		<title level="m">The Difficulty Of Private Contact Discovery</title>
		<imprint>
			<date type="published" when="2014" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b47">
	<monogr>
		<title level="m" type="main">Technology Preview: Private Contact Discovery for Signal</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Moxie</forename><surname>Marlinspike</surname></persName>
		</author>
		<ptr target="https://signal.org/blog/private-contact-discovery" />
		<imprint>
			<date type="published" when="2017" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b48">
	<analytic>
		<title level="a" type="main">Reuse It Or Lose It: More Efficient Secure Computation Through Reuse of Encrypted Values</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Benjamin</forename><surname>Mood</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Debayan</forename><surname>Gupta</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Kevin</forename><forename type="middle">R B</forename><surname>Butler</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Joan</forename><surname>Feigenbaum</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">CCS</title>
		<imprint>
			<publisher>ACM</publisher>
			<date type="published" when="2014" />
			<biblScope unit="page" from="582" to="596" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b49">
	<analytic>
		<title level="a" type="main">Number-Theoretic Constructions of Efficient Pseudo-Random Functions</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Moni</forename><surname>Naor</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Omer</forename><surname>Reingold</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Journal of the ACM</title>
		<imprint>
			<biblScope unit="volume">51</biblScope>
			<biblScope unit="issue">2</biblScope>
			<biblScope unit="page" from="231" to="262" />
			<date type="published" when="2004" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b50">
	<analytic>
		<title level="a" type="main">Cuckoo Hashing</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Rasmus</forename><surname>Pagh</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Flemming</forename><forename type="middle">Friche</forename><surname>Rodler</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Annual European Symposium on Algorithms, volume 2161 of LNCS</title>
		<imprint>
			<publisher>Springer</publisher>
			<date type="published" when="2001" />
			<biblScope unit="page" from="121" to="133" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b51">
	<analytic>
		<title level="a" type="main">Where&apos;s Wally?: How to Privately Discover your Friends on the Internet</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Panagiotis</forename><surname>Papadopoulos</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Antonios</forename><forename type="middle">A</forename><surname>Chariton</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Elias</forename><surname>Athanasopoulos</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Evangelos</forename><forename type="middle">P</forename><surname>Markatos</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">ASIACCS</title>
		<imprint>
			<publisher>ACM</publisher>
			<date type="published" when="2018" />
			<biblScope unit="page" from="425" to="430" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b52">
	<analytic>
		<title level="a" type="main">A Framework for Efficient and Composable Oblivious Transfer</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Chris</forename><surname>Peikert</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Vinod</forename><surname>Vaikuntanathan</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Brent</forename><surname>Waters</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">CRYPTO</title>
		<imprint>
			<publisher>Springer</publisher>
			<date type="published" when="2008" />
			<biblScope unit="volume">5157</biblScope>
			<biblScope unit="page" from="554" to="571" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b53">
	<analytic>
		<title level="a" type="main">Phasing: Private Set Intersection Using Permutation-based Hashing</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Benny</forename><surname>Pinkas</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Thomas</forename><surname>Schneider</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Gil</forename><surname>Segev</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Michael</forename><surname>Zohner</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">USENIX Security</title>
		<imprint>
			<publisher>USENIX Association</publisher>
			<date type="published" when="2015" />
			<biblScope unit="page" from="515" to="530" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b54">
	<analytic>
		<title level="a" type="main">Secure Two-Party Computation Is Practical</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Benny</forename><surname>Pinkas</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Thomas</forename><surname>Schneider</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Nigel</forename><forename type="middle">P</forename><surname>Smart</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Stephen</forename><forename type="middle">C</forename><surname>Williams</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">ASIACRYPT</title>
		<imprint>
			<publisher>Springer</publisher>
			<date type="published" when="2009" />
			<biblScope unit="volume">5912</biblScope>
			<biblScope unit="page" from="250" to="267" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b55">
	<analytic>
		<title level="a" type="main">Efficient Circuit-based PSI with Linear Communication</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Benny</forename><surname>Pinkas</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Thomas</forename><surname>Schneider</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Oleksandr</forename><surname>Tkachenko</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Avishay</forename><surname>Yanai</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">EUROCRYPT, volume 11476 of LNCS</title>
		<imprint>
			<publisher>Springer</publisher>
			<date type="published" when="2019" />
			<biblScope unit="page" from="122" to="153" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b56">
	<analytic>
		<title level="a" type="main">Efficient Circuit-Based PSI via Cuckoo Hashing</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Benny</forename><surname>Pinkas</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Thomas</forename><surname>Schneider</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Christian</forename><surname>Weinert</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Udi</forename><surname>Wieder</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">EUROCRYPT</title>
		<imprint>
			<publisher>Springer</publisher>
			<date type="published" when="2018" />
			<biblScope unit="volume">10822</biblScope>
			<biblScope unit="page" from="125" to="157" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b57">
	<analytic>
		<title level="a" type="main">Faster Private Set Intersection Based on OT Extension</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Benny</forename><surname>Pinkas</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Thomas</forename><surname>Schneider</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Michael</forename><surname>Zohner</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">USENIX Association</title>
		<imprint>
			<date type="published" when="2014" />
			<biblScope unit="page" from="797" to="812" />
		</imprint>
	</monogr>
	<note>USENIX Security</note>
</biblStruct>

<biblStruct xml:id="b58">
	<analytic>
		<title level="a" type="main">Scalable Private Set Intersection Based on OT Extension</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Benny</forename><surname>Pinkas</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Thomas</forename><surname>Schneider</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Michael</forename><surname>Zohner</surname></persName>
		</author>
		<idno>7:1- 7:35</idno>
	</analytic>
	<monogr>
		<title level="j">ACM Transactions on Privacy and Security</title>
		<imprint>
			<biblScope unit="volume">21</biblScope>
			<biblScope unit="issue">2</biblScope>
			<date type="published" when="2018" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b59">
	<monogr>
		<title level="m" type="main">How to Exchange Secrets with Oblivious Transfer</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Michael</forename><surname>Rabin</surname></persName>
		</author>
		<idno>TR-81</idno>
		<imprint>
			<date type="published" when="1981" />
		</imprint>
		<respStmt>
			<orgName>Aiken Computation Laboratory: Harvard University</orgName>
		</respStmt>
	</monogr>
<note type="report_type">Technical Report</note>
</biblStruct>

<biblStruct xml:id="b60">
	<analytic>
		<title level="a" type="main">Cryptanalysis of Low-Data Instances of Full LowMCv2</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Christian</forename><surname>Rechberger</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Hadi</forename><surname>Soleimany</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Tyge</forename><surname>Tiessen</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IACR Transactions on Symmetric Cryptology</title>
		<imprint>
			<biblScope unit="volume">2018</biblScope>
			<biblScope unit="issue">3</biblScope>
			<biblScope unit="page" from="163" to="181" />
			<date type="published" when="2018" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b61">
	<analytic>
		<title level="a" type="main">Amanda Cristina Davi Resende and Diego de Freitas Aranha. Faster Unbalanced Private Set Intersection</title>
	</analytic>
	<monogr>
		<title level="m">FC</title>
		<imprint>
			<publisher>Springer</publisher>
			<date type="published" when="2018" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b62">
	<monogr>
		<title level="m" type="main">libOTe: A fast, portable, and easy to use Oblivious Transfer Library</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Peter</forename><surname>Rindal</surname></persName>
		</author>
		<ptr target="https://github.com/osu-crypto/libOTe" />
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b63">
	<monogr>
		<title level="m" type="main">Most Popular Global Mobile Messenger Apps</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Statista</surname></persName>
		</author>
		<ptr target="https://www.statista.com/statistics/258749/most-popular-global-mobile-messenger-apps" />
		<imprint>
			<date type="published" when="2019" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b64">
	<analytic>
		<title level="a" type="main">How to Generate and Exchange Secrets (Extended Abstract)</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Andrew Chi-Chih</forename><surname>Yao</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">FOCS</title>
		<imprint>
			<publisher>IEEE</publisher>
			<date type="published" when="1986" />
			<biblScope unit="page" from="162" to="167" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b65">
	<analytic>
		<title level="a" type="main">Two Halves Make a Whole -Reducing Data Transfer in Garbled Circuits Using Half Gates</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Samee</forename><surname>Zahur</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Mike</forename><surname>Rosulek</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">David</forename><surname>Evans</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">EUROCRYPT</title>
		<imprint>
			<publisher>Springer</publisher>
			<date type="published" when="2015" />
			<biblScope unit="page" from="220" to="250" />
		</imprint>
	</monogr>
</biblStruct>

				</listBibl>
			</div>
		</back>
	</text>
</TEI>
