<?xml version="1.0" encoding="UTF-8"?>
<TEI xmlns="http://www.tei-c.org/ns/1.0" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
xsi:schemaLocation="http://www.tei-c.org/ns/1.0 /Users/atharsefid/Desktop/grobid-0.5.3/grobid-home/schemas/xsd/Grobid.xsd"
 xmlns:xlink="http://www.w3.org/1999/xlink">
	<teiHeader xml:lang="en">
		<encodingDesc>
			<appInfo>
				<application version="0.5.3" ident="GROBID" when="2020-09-29T02:08+0000">
					<ref target="https://github.com/kermitt2/grobid">GROBID - A machine learning software for extracting information from scholarly documents</ref>
				</application>
			</appInfo>
		</encodingDesc>
		<fileDesc>
			<titleStmt>
				<title level="a" type="main">Teaching with angr: A Symbolic Execution Curriculum and CTF *</title>
			</titleStmt>
			<publicationStmt>
				<publisher/>
				<availability status="unknown"><licence/></availability>
			</publicationStmt>
			<sourceDesc>
				<biblStruct>
					<analytic>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Jacob</forename><forename type="middle">M</forename><surname>Springer</surname></persName>
							<affiliation key="aff0">
								<orgName type="department">Department of Computer Science</orgName>
								<orgName type="institution">Portland State University</orgName>
							</affiliation>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Wu-Chang</forename><surname>Feng</surname></persName>
							<affiliation key="aff0">
								<orgName type="department">Department of Computer Science</orgName>
								<orgName type="institution">Portland State University</orgName>
							</affiliation>
						</author>
						<title level="a" type="main">Teaching with angr: A Symbolic Execution Curriculum and CTF *</title>
					</analytic>
					<monogr>
						<imprint>
							<date/>
						</imprint>
					</monogr>
				</biblStruct>
			</sourceDesc>
		</fileDesc>
		<profileDesc>
			<abstract>
				<p>Symbolic execution is an essential tool in modern program analysis and vulnerability discovery. The technique is used to both find and fix vulnerabilities as well as to identify and exploit them. In order to ensure that symbolic execution tools are used more for the former, rather than the latter, we describe a curriculum and a set of scaf-folded, polymorphic, &quot;capture-the-flag&quot; (CTF) exercises that have been developed to help students learn and utilize the technique to help ensure the software they produce is secure.</p>
			</abstract>
		</profileDesc>
	</teiHeader>
	<text xml:lang="en">
		<body>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="1">Introduction</head><p>Software flaws and vulnerabilities are inevitable, with one occurring in approximately every 100 lines of code written. With the sheer amount of code being produced, it is becoming exceedingly difficult to secure the software we rely upon. The fact that flawed source code is often shared among many projects exacerbates the impact of any underlying vulnerabilities. Unfortunately, developers properly trained in security, though increasingly more important to software development, are scarce. To address this problem, there has been increasing interest in automating the process of vulnerability discovery and patching. Such was the goal of DARPA's recent Cyber Grand Challenge (CGC), a contest where computers were tasked with automatically analyzing, exploiting, and ameliorating vulnerabilities in arbitrary binaries. One of the key techniques used by all of the teams was symbolic execution, significantly reducing the time re- * This material is supported by the National Science Foundation under Grant No. 1623400. Any opinions, findings, and conclusions or recommendations expressed in this material are those of the author and do not necessarily reflect the views of the <ref type="bibr">National Science Foundation.</ref> quired to effectively analyze code paths within a target binary.</p><p>Since it is possible now for adversaries to employ symbolic execution to find vulnerabilities, it is critical that software developers master the technique as well. Unfortunately, the concepts and tools surrounding symbolic execution are rarely taught in computer science curricula, leaving many students at a disadvantage when attempting to write vulnerability-resistant software. To address this problem, this paper describes and evaluates a curriculum for teaching the concepts of symbolic execution along with a scaffolded, polymorphic set of Capture-the-Flag (CTF) challenges. The curriculum and CTF are freely available in order to enable computer science programs across the country to teach these techniques to students within their security and software engineering courses.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2">Background</head><p>Symbolic execution has fundamentally changed how programs are now being tested. Analogous to solving algebraic expressions, symbolic execution explores possible code execution paths until it identifies a potential vulnerability, at which point it attempts to solve for the particular input that will exploit the vulnerability. More specifically, a symbolic execution engine replaces input with "symbolic input"-analogous to an algebraic variable-and walks through code paths, "constraining" the symbolic input at each branch such that an input to the program that satisfies all constraints will cause the program to reach that particular path. The engine can then explore many possible execution paths until it identifies a specific path or program state of interest, at which point it can determine the input which would trigger it.</p><p>One of the key applications for symbolic execution is to catch programming errors. For example, <ref type="figure">Figure 1</ref> shows the bug in Apple's SSL implementation in which a duplicate goto fail; statement in line 7 was injected into code, allowing one to bypass certificate validation with a carefully crafted certificate. In the figure, the duplicate goto fail; is always executed, and, as a result, the code between it and the fail: label is unreachable. Symbolic execution can be used to catch such an error by automatically discovering that no input will allow the program to reach the SSLRawVerify() call in line 11.</p><p>Two key issues with symbolic execution prevent symbolic execution engines from running efficiently. First, executing programs symbolically can lead to state-space explosion as the engine can encounter too many possible execution paths to check in a reasonable amount of time. Second, the engine may place arbitrary constraints on variables and thus satisfying all of them is an instance of satisfiable modulo theories (SMT), which is NP-complete. As a result, symbolic execution engines can borrow from fuzzers in selectively choosing to concretize certain input that is deemed uninteresting in order to save execution overhead. This technique, known as concolic execution, can be extremely powerful and was used in the fast and automatic discovery of the crackaddr vulnerability <ref type="bibr" target="#b0">[1]</ref>. One of the most prominent early examples of concolic testing was SAGE from Microsoft, which is used internally to help secure the Windows operating system since Windows 7. Opensource versions such as KLEE <ref type="bibr" target="#b1">[2]</ref> and S2E <ref type="bibr" target="#b2">[3]</ref> are now widely used in industry and academia to discover and patch security vulnerabilities <ref type="bibr" target="#b3">[4,</ref><ref type="bibr" target="#b4">5]</ref>.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3">Curriculum and CTF</head><p>In order to facilitate the teaching and training of students in applying symbolic execution on program binaries, we have developed a curriculum and set of scaffolded CTF challenges. The curriculum consists of 4 modules offered in 4 classes, each an hour and 50 minutes long. Students are introduced to specific concepts in a lecture format and immediately follow it by attempting to solve levels linked to each concept presented. The symbolic execution CTF exercises leverage MetaCTF, a prior, CTF designed for teaching malware reverse-engineering <ref type="bibr" target="#b5">[6]</ref>. In MetaCTF, reverse engineering is used to determine a password that, when entered, causes the level binary to output the string "Good Job.". Such a construction is helpful since it allows students to focus on a specific goal that does not change for each level.</p><p>Adapting this level design, an analogous set of CTF levels that target the teaching of symbolic execution was designed. The CTF is based upon angr <ref type="bibr" target="#b6">[7]</ref>, an opensource symbolic execution engine from University of California, Santa Barbara. The CTF currently consists of 18 polymorphically generated levels that require students to apply symbolic execution in a variety of ways in order to solve. Specifically the CTF levels task students with writing Python programs using angr that load the binary and symbolically execute it in order to identify the password required to unlock the level. For each level, students are given a template Python script with key parts missing that they must fill in to allow angr to automatically execute and discover the input required to solve each of the polymorphic binaries. The templates contain a detailed description of what students need to implement so that they can focus on the specific concept that the level is attempting to cover. Each template is associated with a specific polymorphic binary. The binaries Figure 2: C source code for MetaCTF level used to introduce symbolic execution themselves are constructed in a way that makes manual reverse-engineering infeasible while at the same time, in a way that allows symbolic exeuction to solve in a modest amount of time. This is done by taking user input and performing a simple hash function on it before passing it into the level. By completing the CTF, students will have gained sufficient experience and skills with symbolic execution to then apply them to more complex cases. In the following section, we describe each of the 4 modules.</p><formula xml:id="formula_0">1 int check_code(int input){ 2 if (input &gt;= USERDEF+88) return 0; 3 if (input &gt; USERDEF+100) return 0; 4 if (input == USERDEF+68) return 0;</formula></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.1">Basic symbolic execution</head><p>The initial module and CTF levels cover basic symbolic execution techniques including the algorithms being used to perform the execution and the abstractions angr uses to access program execution. Within the introductory lecture, a simple example is used to show how symbolic execution works. The level, whose C code is shown in <ref type="figure">Figure 2</ref>, is taken directly from a MetaCTF level that students have solved earlier in the course whose goal is to teach them how to decode conditional branches. In the original level, students are only given the compiled binary. Within the binary, each of the comparisons in the C program is implemented with a variety of conditional branches. By manually keeping track of the contraints that allow the check code function to eventually return 1 and cause the program to print "Good Job.", students then calculate the solu-</p><formula xml:id="formula_1">1 int main(int argc, char * argv[]) { 2 char buf[9]; 3 4</formula><p>printf("Enter the password: "); 5 scanf("%8s", buf); tion. Using this level, we simulate visually how symbolic execution would keep track of all paths through the program, executing each and splitting off states at each conditional branch while updating the constraints in each branch based on the path through the program. When symbolic execution reaches the desired outcome state, the constraints it has accumulated are exactly the same as the constraints students had kept when manually solving the level via reverse-engineering. However, instead of manually solving the constraints, the symbolic execution engine sends them to a constraint solver to automatically determine the input that satisfies them (if any).</p><p>After the initial introduction, we task students with solving their own polymorphically-generated levels using symbolic exeuction. The first level has students use the find method in angr as well as its support for automatically making standard input symbolic, in order to have the engine find an input that reaches a specific line of code in a program. <ref type="figure" target="#fig_2">Figure 3</ref> shows the source code for the level. Students are then given the compiled binary and asked to find the input that causes "Good Job." to be printed. While they could manually reverse-engineer the binary, as shown in the figure, the input they send in is sent through a "complex function" to make reverseengineering the level more difficult than solving the level with an angr script. Instead, students bring up the level in a debugger or disassembler such as radare2, in order to find the line of the binary that they will point angr to in order to find the input that reaches it. For example, <ref type="figure" target="#fig_4">Figure 4</ref> shows the virtual address for the level that contains the code for printing the "Good Job." string (0x0804867a). Students simply use this address in the find method and then run the engine in order to reveal 1 0x804867a ; <ref type="bibr">[gi]</ref>    <ref type="figure">Figure 5</ref> shows the angr script which can solve the level automatically once students fill in the virtual address identified in radare2, thus allowing angr to do the work for them.</p><p>In addition to using angr to find an input that results in a specific program address to be reached, levels in the introductory module also have students apply the avoid condition to automatically terminate execution paths that do not lead to useful states. This is necessary in some cases because symbolic execution can otherwise become prohibitively expensive due to state explosion. Finally, while finding an input that causes the program to reach a specific instruction is one way to apply symbolic execution, one can create arbitrary conditions for angr to either terminate execution or to return a solution. One particularly helpful condition that can be used is to find program input that leads to specific program output. This is appropriate in our levels since each level either outputs "Good Job." or "Try again.". In this case, students learn how to implement find and avoid states and apply them to standard output to get the program to print "Good Job." and avoid "Try again".</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.2">Symbol injection</head><p>For some binaries, only a subset of a program can be symbolically executed. For example, one might wish to symbolically execute a device driver within the kernel rather than the entire operating system. To support this, a common method in symbolic execution is to concretely execute until a certain point, then insert symbolic values for any number of desired locations. Note that while previous levels take advantage of the fact that standard input is automatically made symbolic, typically symbols must be injected manually.</p><p>In the second module of our CTF, levels that require students to programmatically inject symbols into program simulation are given. To facilitate this, students are introduced to the concept of program states and how angr can be used to concretely execute the binary until a certain point in the program is reached. Students are then introduced to the data structures used to instantiate symbols and to inject them into the program's execution state. Specifically, the concept of bitvectors as implemented via Claripy is introduced and example scripts are shown that use the facility. With this, students are given levels in which they must inject symbols into execution state to solve. In one level, they replace specific registers with symbols. In other levels, they replace variables stored either in statically allocated global memory, in dynamically allocated memory in the heap, or in specific locations in the stack. Finally, they are given a level in which the contents of a file are treated as symbolic. <ref type="figure" target="#fig_6">Figure 6</ref> shows the disassembly of the level in which students are asked to start symbolic execution in the middle of a program after making a set of registers symbolic. In the level, a call to the function get user input is made in whicn values are read into three different registers. Students inject symbols into each register and start symbolic execution right after the return from the function (0x80488d1). <ref type="figure">Figure 7</ref> shows part of the angr script that implements the solution. As the script indicates, after specifying the start address for symbolic execution, Claripy bit-vectors are declared and injected into the execution state. Conditions are then defined for success and failure before the execution engine is invoked to solve the level.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.3">Constraints and function hooks</head><p>The third module introduces constraints and function hooks for reducing the state-space being searched in addition to reducing the complexity of well-known functions. Adding contraints on symbols is similar to avoiding certain execution states as described previously. When one can partially constrain certain symbols during exeuction, effectively concretizing certain symbolic input, it allows the symbolic execution engine to focus in on inputs that are more interesting. To practice applying contraints, the third module includes a level in which a constraint can be applied during a specific part of execution that, when met, will allow execution to return a solution without further execution.</p><p>Another way of addressing this problem is to replace complex, but well-known functions, with a simplified equivalent. For example, rather than symbolically execute the complex standard C library routines which is expensive and potentially unnecessary, angr automatically hooks many of them and instead, replaces them 1 import angr 2 import sys  with a simplified summary routine that executes concretely. In order to teach students how to leverage hooks, levels that require them to implement hooks within the symbolic execution engine in order to replace parts of the program being analyzed with simpler summaries are given. <ref type="figure">Figure 8</ref> shows a snippet from a level in which students replace complex calls in the Standard C library with simpler equivalents supplied by angr that are written in Python and executed concretely. In doing so, the level can be solved in significantly less time. Note that while this level could be solved by brute-force, students often insisted on solving the level the intended way in order to learn what the level was attempting to teach them.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.4">Binary exploitation</head><p>The last module caps the curriculum and CTF by having students apply angr to automatically find input that subverts a vulnerable binary and relies upon concepts and techniques in the previous three modules. The first set of levels have students identify vulnerable reads and writes in a program that can be exploited. Memory leaking such as with the Heartbleed vulnerability and memory corruption such as with procedure-link table (PLT) hijacking can occur when adversarial input controls a pointer that is used to either read from or write to memory. To identify this vulnerability, the symbolic execution engine can specifically look for unconstrained or symbolic memory reads and writes, that is, when a memory addressing mode uses a register that is symbolic to either read from or write to memory. In a first step towards leveraging symbolic execution to automatically exploit vulnerabilities, levels that teach students how to set up the engine to look for unconstrained memory access and how to then constrain the access to target specific locations for exploitation are used to solve levels of the CTF.</p><p>The final level serves as the capstone to the CTF. In the level, students find and exploit an unconstrained execution state. Specifically, students use symbolic execution to automatically identify and exploit a vulnerability that allows the input to control a return address stored on the stack. By pointing that return address to a function of their choosing, they can then manipulate the binary's code execution. Consider the source code for the final level of the CTF shown in <ref type="figure">Figure 9</ref>. As the figure shows, in normal operation, the program prints "Try again." and exits. However, a buffer overflow exists in the function read input that can be leveraged to perform a return-oriented exploit that allows the "print good" call to execute. One can use symbolic execution to discover the buffer overflow vulnerability exists because when the symbolic input is made much larger than the size of the local buffers in the read input routine, the address that contains the return address of the function becomes symbolic. When the return associated with the function is then executed, it will then generate an unconstrained state. That is, an input has been found that has led the engine to a state in which the instruction pointer itself is symbolic and can take on any value. Finding this unconstrained state, however, doesn't immediately lead to a level solution. In the case of this particular level, we wish to find an input that will lead to a return to the function "print good". To do so, we need to find its address in assembly, then constrain the unconstrained instruction pointer to it, before invoking the solver to generate the actual input that will lead to the execution of "print good".</p><p>To do so, students first must use a debugger or disassembler to find the address of "print good" as shown in <ref type="figure" target="#fig_9">Figure 10</ref>. Then, they are tasked with adapting an angr script that attempts to find an input that will cause "print good" to be executed. Note that there will be a very large number of potential solutions since all of the bytes used to perform the overflow, aside from the ones written to the return address on the stack can be arbitrary. <ref type="figure" target="#fig_10">Figure 11</ref> shows part of the angr script students write to find a solution to the level. As the figure shows, the symbolic simulation is continuously stepped until an unconstrained execution state is discovered. When one is found, the instruction pointer is constrained to be the address of the "print good" function before given to the solver to produce the input which exploits the vulnerability to solve the level.  </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4">Evaluation</head><p>The first offering of our symbolic execution CTF based on angr occurred in our Winter 2018 offering of Portland State University's CS 492/592 Malware course. The first 8 weeks of the course features a curriculum focused on malware analysis and reverse engineering using a variety of techniques covering both static and dynamic analysis. Students familiarize themselves with both Windows and Linux tools analyzing binaries such as IDA Pro and radare2 with a curriculum that aligns with the first 18 chapters of the course's textbook <ref type="bibr" target="#b7">[8]</ref>. Throughout this time, homework assignments are given via the scaffolded, metamorphic CTF described previously <ref type="bibr" target="#b5">[6]</ref>. Note that, as a direct result of our plan to introduce symbolic execution with angr in the final two weeks of the class, all of the CTF levels of the malware reverse-engineering CTF had to be modified to resist symbolic execution. Without these mechanisms, a single symbolic execution script was able to to solve almost half of the binaries in this CTF.</p><p>In the final two weeks, all 4 modules of the symbolic execution curriculum and CTF were covered. For each, 2 hour class, the first 30-45 minutes were spent introducing the concepts via lecture while the remaining time was spent by students attempting to solve their individual levels. At the beginning of each class, a set of hints were given on earlier levels in order to keep students from falling behind. <ref type="table">Table 1</ref> lists the number of students who completed a certain percentage of assigned levels. The majority of students solved all of the levels indicating the curriculum and the scaffolding of the CTF work well. To provide a subjective measure of assessment, upon completion of the material, an anonymous survey was given. Of the 42 students in the class, 33 responded. <ref type="table" target="#tab_1">Table 2</ref> lists the questions that were asked in the survey, while <ref type="table" target="#tab_2">Table 3</ref> shows the results. As the table shows, students felt that the lecture material and CTF exercises were helpful in learning about symbolic execution and developing skills to apply it. Compared to other methods used in the homework for the course, the CTF exercises were also favored.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5">Conclusion</head><p>Symbolic execution is an important tool for ensuring that the software we develop is free of bugs and vulnerabilites. This paper describes a curriculum and CTF for not only teaching symbolic execution to students, but also developing their skills in applying it to program binaries. Results from an initial offering are promising and the curriculum <ref type="bibr" target="#b8">[9]</ref>, along with a hosted site containing the CTF <ref type="bibr" target="#b9">[10]</ref>, are both publicly available.   </p></div><figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_0"><head></head><label></label><figDesc>Figure 1: Apple's goto fail bug</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_1"><head>5</head><label></label><figDesc>if (input &lt; USERDEF) return 0; 6 if (input &lt;= USERDEF+78) return 0; 7 if (input &amp; 0x1) return 0; 8 if (input &amp; 0x2) return 0; 9 if (input &amp; 0x4) return 0; 10 return 1; 11 } 12 13 int main (int argc, char ** argv) { 14 int input; 15 scanf("%d", &amp;input); 16 if (check_code(input)) 17 printf("Good Job.\n"); 18 else { 19 printf("Try again.\n"); 20 } 21 }</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_2"><head>Figure 3 :</head><label>3</label><figDesc>Figure 3: C code for first CTF level</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_4"><head>Figure 4 :</head><label>4</label><figDesc>Figure 4: radare2 disassembly for first CTF level</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_5"><head>3 4Figure 5 :</head><label>35</label><figDesc>Figure 5: angr solution script for first CTF level</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_6"><head>Figure 6 :</head><label>6</label><figDesc>Figure 6: radare2 disassembly for symbolic register CTF level</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_7"><head>Figure 7 :Figure 8 :</head><label>78</label><figDesc>Figure 7: angr solution script template for symbolic register CTF level</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_8"><head></head><label></label><figDesc>Figure 9: C code for unconstrained jump CTF level</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_9"><head>Figure 10 :</head><label>10</label><figDesc>Figure 10: radare2 disassembly for unconstrained jump CTF level</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_10"><head>Figure 11 :</head><label>11</label><figDesc>Figure 11: angr solution script for unconstrained jump CTF level</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_1" validated="true"><head>Table 2 : Survey questions for the angr CTF and curriculum in CS 492/592: Malware (Winter 2018)</head><label>2</label><figDesc></figDesc><table>Question 1 2 3 
4 
5 
Mean rating 

Q1 
1 1 2 
17 12 4.15 
Q2 
2 1 3 
18 9 
3.94 
Q3 
1 3 3 
16 10 3.94 
Q4 
1 3 12 12 5 
3.52 

</table></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_2" validated="false"><head>Table 3 :</head><label>3</label><figDesc></figDesc><table>Quality and Usefulness of Symbolic Execu-
tion module (1=Very unhelpful, 2=Somewhat unhelpful, 
3=neither helpful nor unhelpful, 4=somewhat helpful, 
5=Very helpful) </table></figure>
		</body>
		<back>
			<div type="references">

				<listBibl>

<biblStruct xml:id="b0">
	<monogr>
		<title level="m" type="main">DARPA&apos;s Cyber Grand Challenge: Final Event Program</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Darpatv</surname></persName>
		</author>
		<ptr target="https://www.youtube.com/watch?v=n0kn4mDXY6I" />
		<imprint>
			<date type="published" when="2017" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b1">
	<monogr>
		<title level="m" type="main">KLEE LLVM Execution Engine</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Klee</forename><surname>The</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Team</surname></persName>
		</author>
		<ptr target="https://klee.github.io/" />
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b2">
	<monogr>
		<title level="m" type="main">S2E: A Platform for In-Vivo Analysis of Software Systems</title>
		<ptr target="https://s2e.systems/" />
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b3">
	<analytic>
		<title level="a" type="main">PO-TUS: Probing Off-The-Shelf USB Drivers with Symbolic Fault Injection</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Patrick-Evans</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">L</forename><surname>Cavallaro</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Kinder</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">USENIX Workshop on Offensive Technologies</title>
		<imprint>
			<date type="published" when="2017-08" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b4">
	<analytic>
		<title level="a" type="main">CAB-Fuzz: Practical Concolic Testing Techniques for COTS Operating Systems</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Kim</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">I</forename><surname>Yun</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">W</forename><surname>Xu</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">B</forename><surname>Lee</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Y</forename><surname>Yun</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><surname>Kim</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">USENIX Annual Technical Conference</title>
		<imprint>
			<date type="published" when="2017-07" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b5">
	<analytic>
		<title level="a" type="main">A Scaffolded, Metamorphic CTF for Reverse Engineering</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">W</forename><surname>Feng</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">USENIX 3GSE</title>
		<imprint>
			<date type="published" when="2015-08" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b6">
	<monogr>
		<title level="m" type="main">angr, a binary analysis framework</title>
		<ptr target="http://angr.io/" />
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b7">
	<monogr>
				<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Sikorski</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Honig</surname></persName>
		</author>
		<title level="m">Practical Malware Analysis: The Hands-On Guide to Dissecting Malicious Software</title>
		<imprint>
			<publisher>No Starch Press</publisher>
			<date type="published" when="2012" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b8">
	<analytic>
		<title/>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">W</forename><surname>Feng</surname></persName>
		</author>
		<ptr target="http://thefengs.com/wuchang/courses/cs492" />
	</analytic>
	<monogr>
		<title level="j">CS</title>
		<imprint>
			<biblScope unit="volume">492</biblScope>
			<publisher>Malware</publisher>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b9">
	<monogr>
		<title level="m" type="main">CS 492/592: Malware CTF site</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">W</forename><surname>Feng</surname></persName>
		</author>
		<ptr target="https://malware.oregonctf.org" />
		<imprint/>
	</monogr>
</biblStruct>

				</listBibl>
			</div>
		</back>
	</text>
</TEI>
