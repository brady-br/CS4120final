<?xml version="1.0" encoding="UTF-8"?>
<TEI xmlns="http://www.tei-c.org/ns/1.0" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
xsi:schemaLocation="http://www.tei-c.org/ns/1.0 /Users/atharsefid/Desktop/grobid-0.5.3/grobid-home/schemas/xsd/Grobid.xsd"
 xmlns:xlink="http://www.w3.org/1999/xlink">
	<teiHeader xml:lang="en">
		<encodingDesc>
			<appInfo>
				<application version="0.5.3" ident="GROBID" when="2020-09-29T01:57+0000">
					<ref target="https://github.com/kermitt2/grobid">GROBID - A machine learning software for extracting information from scholarly documents</ref>
				</application>
			</appInfo>
		</encodingDesc>
		<fileDesc>
			<titleStmt>
				<title level="a" type="main">Static Scheduling in Clouds</title>
			</titleStmt>
			<publicationStmt>
				<publisher/>
				<availability status="unknown"><licence/></availability>
			</publicationStmt>
			<sourceDesc>
				<biblStruct>
					<analytic>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Thomas</forename><forename type="middle">A</forename><surname>Henzinger</surname></persName>
							<affiliation key="aff0">
								<orgName type="institution">IST</orgName>
								<address>
									<country key="AT">Austria</country>
								</address>
							</affiliation>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Anmol</forename><forename type="middle">V</forename><surname>Singh</surname></persName>
							<affiliation key="aff1">
								<orgName type="institution">IST</orgName>
								<address>
									<country key="AT">Austria</country>
								</address>
							</affiliation>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Vasu</forename><surname>Singh</surname></persName>
							<affiliation key="aff2">
								<orgName type="institution">IST</orgName>
								<address>
									<country key="AT">Austria</country>
								</address>
							</affiliation>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Thomas</forename><surname>Wies</surname></persName>
							<affiliation key="aff3">
								<orgName type="institution">IST</orgName>
								<address>
									<country key="AT">Austria</country>
								</address>
							</affiliation>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Damien</forename><surname>Zufferey</surname></persName>
							<affiliation key="aff4">
								<orgName type="institution">IST</orgName>
								<address>
									<country key="AT">Austria</country>
								</address>
							</affiliation>
						</author>
						<title level="a" type="main">Static Scheduling in Clouds</title>
					</analytic>
					<monogr>
						<imprint>
							<date/>
						</imprint>
					</monogr>
				</biblStruct>
			</sourceDesc>
		</fileDesc>
		<profileDesc>
			<abstract>
				<p>Cloud computing aims to give users virtually unlimited pay-per-use computing resources without the burden of managing the underlying infrastructure. We present a new job execution environment Flextic that exploits scal-able static scheduling techniques to provide the user with a flexible pricing model, such as a tradeoff between different degrees of execution speed and execution price, and at the same time, reduce scheduling overhead for the cloud provider. We have evaluated a prototype of Flextic on Amazon EC2 and compared it against Hadoop. For various data parallel jobs from machine learning, image processing, and gene sequencing that we considered, Flextic has low scheduling overhead and reduces job duration by up to 15% compared to Hadoop, a dynamic cloud scheduler.</p>
			</abstract>
		</profileDesc>
	</teiHeader>
	<text xml:lang="en">
		<body>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="1">Introduction</head><p>Computing services that are provided by datacenters over the internet are now commonly referred to as cloud computing. The price that a user is required to pay for the execution of a particular job in the cloud depends on the length of the job and the amount of data transfer involved in the job execution. We believe that this pricing model is intuitive for long term rentals of computing instances on the cloud. However, in our experience of running MapReduce jobs using Amazon Elastic MapReduce <ref type="bibr" target="#b0">[2]</ref>, we observed nonlinearity in pricing due to the fact that instances are rented on per-hour basis. Amazon Elastic MapReduce allows the user to specify the number of instances for the mappers, the mapper and reducer tasks, and the input data. For example, consider a MapReduce job that finishes in 61 minutes using 10 instances, and in 105 minutes using 6 instances. The cloud user certainly pays a lot less for the job with 6 instances. A more user-friendly pricing model will inform the user beforehand about the price of the computation depending upon <ref type="figure">Figure 1</ref>: Flextic Workflow the number of instances rented. However, as clouds conventionally rely on dynamic scheduling, it is not possible for clouds to quote a certain price to the user before the actual execution of the job. Dynamic scheduling is generally justified by the lack of information of the job components (called tasks). It turns out that in a large fraction of jobs from domains of machine learning, biocomputing, and image processing, it is indeed possible to estimate the maximum time required for each task in the job. We believe that static scheduling for these jobs can give significant benefits over dynamic scheduling. First of all, static scheduling imposes less runtime overhead. Moreover, static scheduling allows for pre-fetching required data and pipelining different stages of task execution. At the same time, static scheduling is more userfriendly, as the precomputed schedule allows to quote a price for the computation. Based on static scheduling, we develop Flextic, a system where the user specifies the job in terms of mapper and reducer tasks (in general a directed acyclic graph of tasks), the input data, and instead of choosing the number of instances, chooses a price of execution and the finish time.</p><p>A brief overview of Flextic. We first describe our vision of Flextic (shown in <ref type="figure">Figure 1</ref>). (1) A user writes a program in the Flextic job description language specifying the job characteristics, like maximum task durations and data sizes. (2) The program is parsed into an execution plan. An execution plan is a directed acyclic graph, corresponding to the user program. The execution plan is input to a static job scheduler. (3) The static job scheduler takes the execution plan and computes possible schedules for executing the user job on the cloud. (4) These schedules (in terms of finish time and price) are presented to the user. (5) The user chooses a schedule from the set of presented schedules, thus specifying a price and deadline for her job. (6) The chosen schedule is sent to the job execution platform, which despatches the individual tasks of the execution plan to the virtual machines where they are executed as scheduled. (7) When a task finishes, the execution platform informs the job scheduler about its completion. The user is refunded for the early completion of her job according to the pricing policy.</p><p>Evaluation. We evaluate Flextic on top of the Amazon EC2 cloud. We choose jobs from different domains: gene sequencing, population genetics, machine learning, and image processing. We evaluate the scheduling of Flextic. We show that Flextic has a low scheduling latency: for example, on a cloud with 200 cores, for a MapReduce job with around 6500 tasks, Flextic can compute ten different schedules in around two seconds. In the second part, we consider the image processing MapReduce job, and compare the performance of Flextic with a Hadoop scheduler <ref type="bibr" target="#b1">[3]</ref> on Amazon EC2. We observe that due to the large communication overhead for Hadoop at runtime, Flextic outperforms Hadoop by upto 15% in job execution time.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2">Flextic</head><p>We now describe the different components of Flextic.</p><p>An Example. Consider a user who wants to use ImageMagick <ref type="bibr" target="#b8">[10]</ref> to apply an image transformation on a set of images in a data store. The transformation is composed of the ImageMagick transforms paint, emboss and average. To every image she first applies the paint and emboss transforms separately, producing two new intermediate images. Then she uses the average transform to average the intermediate images together with the original image into a single new output image. The final image is put back into the data store. <ref type="figure">Figure 2</ref> shows a description of this job in the Flextic job description language. We now describe the job language in more detail.</p><p>The Job Language. The Flextic job language is simple, declarative, and dataflow oriented. Our language enables the user to describe data flow graphs consisting of indi-</p><formula xml:id="formula_0">// schemas mapper pnt ([i1]) ([o1]) { timeout 20 * i1 memory 200 o1 = i1 binary 'convert -paint 10' } mapper emb ([i1]) ([o1]) { timeout 10 * i1 memory 200 o1 = i1 binary 'convert -emboss 10' } mapper avg ([i1], [i2], [i3]) ([o1]) { timeout 3 * (i1 + i2 + i3) memory 200 o1 = i1 binary 'convert -average' } // connections pnt.o1 = avg.i1 emb.o1 = avg.i2 pnt.i1 = match * from img_buc emb.i1 = match * from img_buc avg.i3 = match * from img_buc avg.o1 = store $avg.i3 into res_buc</formula><p>Figure 2: Job description for a composed image transformation that is applied to a set of images stored in a data base vidual tasks and intermediate data objects in a concise way. A job consists of schemas describing templates of tasks, and connections describing the primary inputs and outputs of the job, and how the tasks interact. A schema declaration consists of a schema type and a task specification. We distinguish two schema types: mapper and reducer schemas. A task specification consists of (a) the input and output ports, (b) the executable for the task, (c) the timeout duration and estimated memory consumption, and (d) estimates for the size of the output objects. These requirements can be specified as simple functions in terms of the size of input data objects. For instance, in our example the user specifies that each paint task should not run longer than 20 seconds per MB of the size of the input image.</p><p>A connection is either of the following: (i) an output of a schema to one or multiple inputs of other schemas, (ii) a schema input to database objects, or (iii) a schema output to database objects. We provide two methods to retrieve files from the database, fetch file from bucket and match pattern in bucket, and one method to put files into the database, store file into bucket.</p><p>A high-level diagram of parsing a user job is shown in <ref type="figure" target="#fig_0">Figure 3</ref>. The unfolding of a job description into an execution plan works as follows. How connections and schemas are instantiated to objects, respectively tasks, is ultimately determined by the input data connections. Therefore these connections are instantiated first. A connection of the form fetch file from bucket is instantiated to a single data object. For instantiating a connection of the form match pattern in bucket, the job parser interacts with the database associated with the compute nodes to find out the number of matching patterns. It then generates a data object for each match. For every input object, the size of the object is also stored. The remainder of the job description is then instantiated in topological order as follows. A mapper schema results in multiple task instantiations (mappers), where each mapper handles one of the input objects for each input port of the schema and returns one output object per output port. We require that the number of data objects that an input port of a mapper schema is instantiated to, is the same for all input ports of the schema. This number determines the number of mappers. The order in which input objects from multiple input ports are combined by the mappers is determined by the order in which they are retrieved from the database. A reduce schema results in an instantiation of a single task (reducer), where the input objects to the reducer are the input objects appearing on each input port of the schema. The sizes of the input objects are then propagated through the unfolding of the job description to obtain the task durations and output object sizes, according to the estimates specified in the schema declarations. <ref type="figure">Figure 4</ref> shows part of an execution plan for the job in <ref type="figure">Figure 2</ref>: each of the three task schemas results in one task per image that is put in the data store bucket img buc.</p><p>Using the specified resource estimates, Flextic uses static scheduling to compute a selection of possible schedules for executing the execution plan on the datacenter. These schedules and their prices are then pre- <ref type="figure">Figure 4</ref>: An execution plan for the user job in <ref type="figure">Figure 2</ref> sented to the user. The price of a schedule may depend on factors such as the amount of computation needed to execute the job, the number and configuration of machines used for the computation, and the data transfer volume. As jobs scheduled far in the future may allow clouds to optimize resource utilization, we advocate price discounts for schedules that have a delayed start time.</p><p>Scheduling in Flextic. To implement Flextic, we need to tackle some challenges in scheduling. First of all, we need static schedulers that can efficiently schedule large jobs on large data centers. Recently, we developed exciting static scheduling techniques <ref type="bibr" target="#b5">[7]</ref> for large jobs on clouds, based on ideas of abstraction refinement (AR). AR schedulers build abstractions (concise coarse representations) of the job and the data center for scheduling. These abstractions are orders of magnitude smaller than the concrete job and data center. For example, an abstraction of a data center remembers the number of instances belonging to different configurations, instead of every instance in the data center. We showed that AR schedulers can compute static schedules for jobs of up to a thousand tasks on a data center with a few thousand computing nodes within a few seconds <ref type="bibr" target="#b5">[7]</ref>.</p><p>The static scheduler despatches the tasks to the compute nodes as per the static schedule. On each compute node, a job daemon is responsible for the actual task execution. We use existing cloud managing platforms, like EC2 <ref type="bibr">[1]</ref> and Eucalyptus <ref type="bibr" target="#b3">[5]</ref> for managing the virtual machines and the associated data stores (S3 for EC2 and Walrus for Eucalyptus). We use s3curl for communication between the compute nodes and the data store. The job daemon is implemented in C++ and manages all tasks that have been scheduled on a given compute node. The communication between job daemons and the job despatcher, as well as the communication among individ-ual job daemons is implemented using Google protocol buffers.</p><p>The statically computed schedules depend on the user's estimation of the resource requirements of the jobs. Therefore they can only give rough guidelines for the actual execution. The execution platform may reveal many opportunities to further optimize the statically computed schedules at runtime. For example, tasks may finish long before their estimated timeouts. Other tasks whose dependencies are already met may be used to fill the emerging idle time slots. Flextic uses a dynamic scheduling technique, called backfilling <ref type="bibr" target="#b4">[6,</ref><ref type="bibr" target="#b11">13]</ref>, that allows the execution platform to make local scheduling decisions by dynamically reordering tasks assigned to individual compute nodes.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3">Experimental Evaluation</head><p>We first describe the suite of jobs we considered in our evaluation. Then, we evaluate the performance of the job scheduler and the job execution platform. In our evaluation, we consider the AR scheduler FISCH <ref type="bibr" target="#b5">[7]</ref>.</p><p>User jobs. We chose applications from the domains of population genetics, gene sequencing, machine learning, and image processing to evaluate Flextic. Most of these applications were obtained from the scientific research groups at IST Austria. These applications range across the spectrum of computation and data requirements. All jobs are data parallel, however the number of input data and the size of the input varies for each job. The population genetics job is a MapReduce job, where a mapper computes the likelihood for a given set of parameters. The reducer stores the set of likelihoods to a file. The gene sequencing job is a data parallel job that allows to align multiple reads simultaneously. The output of the alignment is a file. The image processing job applies image transformations on a set of images. It is a MapReduce job, where every mapper applies an image transformation to an image. The machine learning job treats the problem of object localization in a natural image. We created a MapReduce job, where a mapper analyzes the localization for one particular image and returns the four coordinates in text form. The reducer concatenates the output of the mappers and puts it in the data store. For all jobs, we asked the user the maximum running time for each task in the job.</p><p>Evaluation of scheduling latency. For computing the scheduling latency, we consider a cloud of Amazon EC2 instances <ref type="bibr">[1]</ref> consisting of types small, large, and extra large. In total, our cloud consists of 200 virtual cores. <ref type="table">Table 1</ref> shows the time required by Flextic to obtain ten different schedules. We also give the size of the execution plan, and the time required to create it after  fetching the required information from Amazon S3. We observe that for the machine learning job with around 6700 tasks, Flextic requires only 2.3 seconds to compute around ten different schedules. The time required by the static scheduler depends on the regularity of the job and the quality measures set for scheduling <ref type="bibr" target="#b5">[7]</ref>. We set the quality measure as 90% cloud utilization. Evaluation of the execution platform. We evaluate the execution platform of Flextic on the image processing job. We choose this job due to large amounts of data transfer (around 3 MB per image) and long computations (around 10 seconds per image transformation). We consider clouds of different sizes, ranging from 10 to 80 virtual cores. We create the clouds in U.S. East (N. Virginia) region. We first use Hadoop streaming (version 0.19.0) to run these jobs. To compare Flextic against Hadoop, we let Flextic choose the fastest schedule obtained using the static scheduler, and use instance-local backfilling. <ref type="figure" target="#fig_1">Fig- ure 5</ref> compares the job duration obtained with Hadoop with that obtained with Flextic. As static scheduling in Flextic frees the runtime from scheduling overheads, we observe that Flextic performs better (by up to 15%) than completely dynamic scheduling techniques like Hadoop.</p><p>Our evaluation inspires us to further explore static scheduling techniques in clouds. We believe that coarse static schedules augmented with dynamic scheduling can reduce the runtime scheduling overheads in clouds, and at the same time, provide users with certain price and deadline guarantees for their jobs.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4">Concluding Remarks</head><p>Related work. Our current job description language serves as a sample input interface to Flextic. It incorporates ideas from existing programming models for dataoriented and computation-oriented programs. In particular, we provide MapReduce constructs to enable a concise description of common patterns of data-parallelism. Unlike the original MapReduce framework <ref type="bibr" target="#b2">[4]</ref> and its derivatives <ref type="bibr" target="#b1">[3,</ref><ref type="bibr" target="#b17">19]</ref>, we allow a more expressive language for user jobs. Our language draws inspiration from systems such as DryadLINQ <ref type="bibr" target="#b16">[18]</ref>, Pig Latin <ref type="bibr" target="#b12">[14]</ref>, and Sawzall <ref type="bibr" target="#b14">[16]</ref>. Work on static multiprocessor scheduling dates back to 1977 <ref type="bibr" target="#b15">[17]</ref>, where the problem of scheduling a directed acyclic graph of tasks to two processors is solved using network flow algorithms. Further research in this direction focused on scheduling distributed applications on a network of homogeneous processors <ref type="bibr" target="#b10">[12]</ref>. As optimal multiprocessor scheduling of directed task graphs is an NP-complete problem <ref type="bibr" target="#b13">[15]</ref>, heuristics are vastly used. A wide range of such static scheduling heuristics have been classified and rigorously studied <ref type="bibr" target="#b9">[11]</ref>. Backfilling techniques <ref type="bibr" target="#b4">[6,</ref><ref type="bibr" target="#b11">13]</ref> have been studied in the context of IBM SP scheduling system.</p><p>Our earlier work in the direction of static scheduling for clouds started with computing concrete greedy schedules for simulated jobs on simulated clouds <ref type="bibr" target="#b6">[8]</ref>. We observed that the large scheduling latencies make static scheduling impractical for large clouds, which led to several interesting research problems <ref type="bibr" target="#b7">[9]</ref>. To reduce the scheduling latencies, we came up with the idea of abstraction refinement based schedulers <ref type="bibr" target="#b5">[7]</ref>.</p><p>Further directions. To develop Flextic into a mature scheduling system comparable to Hadoop, we have to address several issues. Detailed abstractions. At this point, our static schedulers capture compute speed and link bandwidths in their abstractions. It is important to augment Flextic with abstractions with more information about memory, network congestion, etc. Moreover, we need to refine schedules more intelligently. Progress monitoring. Similar to Hadoop, we plan to add a monitoring system to the job execution platform of Flextic, that allows a user to keep track of individual tasks. We observed this requirement while executing jobs on Amazon EC2. While finding the source of job failure was easy for Hadoop (using the JobTracker interface), we currently need to go through the JobDaemon log in order to find the cause of failure in case of <ref type="bibr">Flextic.</ref> Handling incorrect resource estimates. It is important to define strategies for cases when the actual resource requirements are larger than the user provided estimates. First of all, the cause of the overshoot must be discovered. If the cause is interference from other users' jobs, then this should be treated as a fault caused by the cloud provider, and appropriately handled according to the fault tolerance mechanism. Otherwise, if the user provided small estimates and the cloud has enough free resources to continue the execution, the user should be informed that she has to pay more for the job execution than quoted (possibly including a penalty for a bad estimate). In the case that the cloud does not have free resources, the job must be aborted. Fault tolerance. To handle faults, we plan to explore static scheduling techniques that encompass replication and checkpointing in the context of Flextic.</p></div><figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_0"><head>Figure 3 :</head><label>3</label><figDesc>Figure 3: Job Parser</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_1"><head>Figure 5 :</head><label>5</label><figDesc>Figure 5: Comparison of job duration on Flextic and Hadoop.</figDesc></figure>
		</body>
		<back>

			<div type="acknowledgement">
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5">Conclusion</head><p>We presented a new system prototype Flextic that presents the user with a declarative language to express the job, and uses static scheduling techniques to allow the user to choose from multiple scheduling options, according to her price and time constraints. Leaving the responsibility of scheduling the jobs with the cloud provider enables the provider to achieve good utilization of its resources. We believe that our work shall ignite interest in static scheduling techniques in clouds.</p></div>
			</div>

			<div type="references">

				<listBibl>

<biblStruct xml:id="b0">
	<analytic>
		<title/>
		<ptr target="http://aws.amazon.com/elasticmapreduce" />
	</analytic>
	<monogr>
		<title level="j">Amazon Elastic Map Reduce</title>
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b1">
	<monogr>
		<title/>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Apache</forename><surname>Hadoop</surname></persName>
		</author>
		<ptr target="http://wiki.apache.org/hadoop" />
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b2">
	<analytic>
		<title level="a" type="main">MapReduce: Simplified data processing on large clusters</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Dean</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Ghemawat</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Communications of the ACM</title>
		<imprint>
			<biblScope unit="page" from="107" to="113" />
			<date type="published" when="2008" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b3">
	<monogr>
		<title/>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Eucalyptus Public Cloud</surname></persName>
		</author>
		<ptr target="http://open.eucalyptus.com" />
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b4">
	<analytic>
		<title level="a" type="main">Utilization and predictability in scheduling the IBM SP2 with backfilling</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">G</forename><surname>Dror</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Ahuva</forename><surname>Feitelson</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Mu</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">IPPS/SPDP</title>
		<imprint>
			<date type="published" when="1998" />
			<biblScope unit="page" from="542" to="546" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b5">
	<analytic>
		<title level="a" type="main">Scheduling large jobs by abstraction refinement</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><forename type="middle">A</forename><surname>Henzinger</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">V</forename><surname>Singh</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><surname>Wies</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Zufferey</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">EuroSYS</title>
		<imprint>
			<date type="published" when="2011" />
			<biblScope unit="page" from="329" to="342" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b6">
	<analytic>
		<title level="a" type="main">Flex-PRICE: Flexible provisioning of resources in a cloud environment</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Thomas</forename><forename type="middle">A</forename><surname>Henzinger</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Anmol</forename><forename type="middle">V</forename><surname>Singh</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Vasu</forename><surname>Singh</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Thomas</forename><surname>Wies</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Damien</forename><surname>Zufferey</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">IEEE International Conference on Cloud Computing CLOUD</title>
		<imprint>
			<publisher>IEEE</publisher>
			<date type="published" when="2010" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b7">
	<analytic>
		<title level="a" type="main">A marketplace for cloud resources</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Thomas</forename><forename type="middle">A</forename><surname>Henzinger</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Anmol</forename><forename type="middle">V</forename><surname>Singh</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Vasu</forename><surname>Singh</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Thomas</forename><surname>Wies</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Damien</forename><surname>Zufferey</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">EMSOFT. ACM</title>
		<imprint>
			<date type="published" when="2010" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b8">
	<monogr>
		<title/>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Imagemagick</surname></persName>
		</author>
		<ptr target="http://www.imagemagick.org" />
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b9">
	<monogr>
		<title level="m" type="main">Static scheduling algorithms for allocating directed task graphs to multiprocessors</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Y-K</forename><surname>Kwok</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">I</forename><surname>Ahmad</surname></persName>
		</author>
		<imprint>
			<date type="published" when="1999" />
			<publisher>ACM Computing Surveys</publisher>
			<biblScope unit="page" from="406" to="471" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b10">
	<analytic>
		<title level="a" type="main">Optimal task assignment in homogeneous networks</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C-H</forename><surname>Lee</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">K</forename><forename type="middle">G</forename><surname>Shin</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE Transactions on Parallel and Distributed Systems</title>
		<imprint>
			<biblScope unit="page" from="119" to="129" />
			<date type="published" when="1997" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b11">
	<analytic>
		<title level="a" type="main">The ANL/IBM SP scheduling system</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">David</forename><forename type="middle">A</forename><surname>Lifka</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Job Scheduling Strategies for Parallel Processing</title>
		<imprint>
			<date type="published" when="1995" />
			<biblScope unit="page" from="295" to="303" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b12">
	<analytic>
		<title level="a" type="main">Pig Latin: A not-so-foreign language for data processing</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><surname>Olston</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">B</forename><surname>Reed</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">U</forename><surname>Srivastava</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Kumar</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Tomkins</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">ACM SIGMOD Conference</title>
		<imprint>
			<date type="published" when="2008" />
			<biblScope unit="page" from="1099" to="1110" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b13">
	<analytic>
		<title level="a" type="main">Towards an architecture-independent analysis of parallel algorithms</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Christos</forename><surname>Papadimitrious</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Mihalis</forename><surname>Yannakakis</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">STOC</title>
		<meeting><address><addrLine>New York, NY, USA</addrLine></address></meeting>
		<imprint>
			<publisher>ACM</publisher>
			<date type="published" when="1988" />
			<biblScope unit="page" from="510" to="513" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b14">
	<analytic>
		<title level="a" type="main">Interpreting the data: Parallel analysis with Sawzall</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Pike</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Dorward</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Griesemer</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Quinlan</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Scientific Programming</title>
		<imprint>
			<date type="published" when="2005" />
			<biblScope unit="page" from="277" to="298" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b15">
	<analytic>
		<title level="a" type="main">Multiprocessor scheduling with the aid of network flow algorithms</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">H</forename><forename type="middle">S</forename><surname>Stone</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE Transactions on Software Engineering</title>
		<imprint>
			<biblScope unit="page" from="85" to="93" />
			<date type="published" when="1977" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b16">
	<analytic>
		<title level="a" type="main">DryadLINQ: A system for general-purpose distributed data-parallel computing using a high-level language</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Y</forename><surname>Yu</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Isard</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Fetterly</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Budiu</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">U</forename><surname>Erlingsson</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><forename type="middle">K</forename><surname>Gunda</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Currey</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">OSDI</title>
		<imprint>
			<date type="published" when="2008" />
			<biblScope unit="page" from="1" to="14" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b17">
	<analytic>
		<title level="a" type="main">Improving MapReduce performance in heterogeneous environments</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Zaharia</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Konwinski</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><forename type="middle">D</forename><surname>Joseph</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><forename type="middle">H</forename><surname>Katz</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">I</forename><surname>Stoica</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">OSDI</title>
		<imprint>
			<date type="published" when="2008" />
			<biblScope unit="page" from="29" to="42" />
		</imprint>
	</monogr>
</biblStruct>

				</listBibl>
			</div>
		</back>
	</text>
</TEI>
