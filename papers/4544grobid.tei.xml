<?xml version="1.0" encoding="UTF-8"?>
<TEI xmlns="http://www.tei-c.org/ns/1.0" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
xsi:schemaLocation="http://www.tei-c.org/ns/1.0 /Users/atharsefid/Desktop/grobid-0.5.3/grobid-home/schemas/xsd/Grobid.xsd"
 xmlns:xlink="http://www.w3.org/1999/xlink">
	<teiHeader xml:lang="en">
		<encodingDesc>
			<appInfo>
				<application version="0.5.3" ident="GROBID" when="2020-09-29T04:24+0000">
					<ref target="https://github.com/kermitt2/grobid">GROBID - A machine learning software for extracting information from scholarly documents</ref>
				</application>
			</appInfo>
		</encodingDesc>
		<fileDesc>
			<titleStmt>
				<title level="a" type="main">Picviz: finding a needle in a haystack</title>
			</titleStmt>
			<publicationStmt>
				<publisher/>
				<availability status="unknown"><licence/></availability>
			</publicationStmt>
			<sourceDesc>
				<biblStruct>
					<analytic>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Sebastien</forename><surname>Tricaud</surname></persName>
							<affiliation key="aff0">
								<orgName type="institution">INL</orgName>
							</affiliation>
						</author>
						<title level="a" type="main">Picviz: finding a needle in a haystack</title>
					</analytic>
					<monogr>
						<imprint>
							<date/>
						</imprint>
					</monogr>
				</biblStruct>
			</sourceDesc>
		</fileDesc>
		<profileDesc>
			<abstract>
				<p>When considering log files for security, usual applications available today either look for patterns using signature databases or use a behavioral approach. In both cases, information can be missed. The problem becomes bigger with systems receiving a massive amount of logs. Parallel coordinates is an answer to display an infinity of events in multiple dimensions. As security data are multivariate, parallel coordinates provides a neat way to display and ease abnormal behaviors detection. Picviz implements the use of parallel coordinates on acquired data, such as logs, to create a parallel coordinates image. Using this image, the analyst can use Picviz to improve the output image, filter information and visually detect things. Finally, based on what the image helped to detect , the analyst can then write automatic tools and avoid the human interaction with the image.</p>
			</abstract>
		</profileDesc>
	</teiHeader>
	<text xml:lang="en">
		<body>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="1">Introduction</head></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="1.1">Parallel coordinates plot</head><p>Since this paper uses parallel coordinates as a core technique, it is necessary to recall some simple facts on parallel coordinates plots (later abbreviated as -coords) <ref type="bibr" target="#b5">[6]</ref> for the reader who may not be familiar with the concept.</p><p>Imagine one has to collect elementary events of a given type (temperatures of all capitals of Asia, network traffic on a network adapter, etc.). Let's suppose that each given elementary event carries N kinds of information and that N is not small (greater than 4). Since it is not easy to plot vectors belonging to a space of more than 3 dimensions in a 3 dimensional physical space (not counting the time), it becomes necessary to adapt the representation technique.</p><p>In an N -dimensional vector space E, one needs a basis of N vectors. Then each vector u ∈ E corresponds to an N -tuple of the form (x 1 , x 2 , . . . , x n ). In the usual euclidean space of dimension N , denoted R N , the canonical basis is orthogonal, which means that axes are considered pairwise perpendicular. Since it is impossible to draw more than 3 perpendicular axes in a 3 dimensional physical space, the idea behind -coords is to draw the axes side by side, all parallel to a given direction. It is then possible to draw all these axes in a 2d plane : That point of R 4 has become a polygonal line incoords. At first sight, it might seem that we have lost simplicity. Of course, on one side, it is obvious that many points will lead to many polygonal lines, overlapping each other in a very cumbersome manner. But on the other side, it is a fact that certain relationship between coordinates of the point correspond to interesting patterns in -coords. For example, if x 1 and x 2 are linked by an affine relationship x 2 = αx 1 + β, a bow tie pattern appears in -coords: It has been shown recently that points all belonging to certain hypersurfaces of R N induce complicated but structured patterns in -coords, opening a way towards data classification.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="1.2">Data acquisition</head><p>The data acquisition process we used in this paper aims to transform logs into the PCV file before Picviz treatment. In this paper, log is used interchangeably with data to express something that is captured from one or several machines. That being one in:</p><p>• Syslog: System and application log files. Containing at least four variables: time, machine, application and the logged event.</p><p>• Network: Sniffed data.</p><p>• Database: Structured information storage.</p><p>• Specific: Log file for applications not using standard log functions.</p><p>• Other: Any other way to record events.</p><p>CSV being a common format to read and write such data, Picviz can take it as input and will translate it into PCV.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="1.3">Picviz</head><p>Picviz is a software transforming acquired data into a parallel coordinates plot image to visualize data and discover interesting results quickly. Picviz is composed in three parts, each facilitating the creation, tuning and interaction of -coords graphs:</p><p>1. Data acquisition: log parsers and enricher 2. Console program: transforms PCV into a svg or png image. Unlike the graphical frontend, it does not require graphical canvas to display the lines, it is fast and able to generate millions of lines.</p><p>3. Graphical Frontend: transforms PCV into a graphical canvas for user interaction. It was written because of a lack of visualization tools able to work with a large set of data. Graphviz is very close to how Picviz works, except that is has limitations regarding the number of dimensions that can be handled by a directed graph, such as when dealing with time.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="1.4">Understanding 10000 lines of log</head><p>Visualization is an answer to analyze a massive amount of lines of logs. -coords helps to organize them and see correlations and issues by looking at the generated graph <ref type="bibr" target="#b3">[4]</ref>.</p><p>Each axis strictly defines a variable: logs, even those that are unorganized, are always composed by a set of variables. At least they are: time when the event occurred, machine where the log comes from, service providing the log information, facility to get the type of program that logged, and the log itself.</p><p>The log variable is a string that varies widely based on the application writing it and what it is trying to convey. This variability of the string is what makes the logs disorganized. From this string, other variables can be extracted: username, IP address, failure or success etc.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Log sample: PAM session</head><p>Aug 11 13:05:46 quinificated su <ref type="bibr">[789]</ref>:</p><p>pam_unix(su:session): session opened for user root by toady(uid=0)</p><p>Looking at the PAM session log, we know how the user authenticates with the common pam unix module. We know that the command su was used by the user toady to authenticate as root on the machine quinificated on August 11th at 1:05pm. This is useful information to care about when dealing with computer security. In this graph we clearly identify:</p><p>• If a user sometime fails to give the correct password</p><p>• If a user logged in using a non-common pam module or service</p><p>• Time when users log in <ref type="figure" target="#fig_4">Figure 5</ref> shows the representation of the auth syslog facility: </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Analysis</head><p>What one can easily see in <ref type="figure" target="#fig_4">figure 5</ref> is how many users logged in as root on the machine: red lines means root destination user. Also, the leftmost axis (time) is interesting: it has a blank area and using the frontend we discover that no one opened a session between 2:29am and 5:50am: The second axis is the machine where the logs originated. Since this example is a single machine analysis, lines converge to a single point. This third axis is the service or application that wrote the log. We can quickly see four services (one red, three blacks, the line at the bottom is also a connection between two axes): moving the mouse above the red line at the service on top of the figure shows that only the 'su' service is used to log a user as root. Hopefully no one logs in using gdm, kdm or login as root.</p><p>The fourth axis is the pam module that was used to perform the login authentication: again, as only local authentication was done using the pam unix module, lines are converging. If we would have had a remote authentication, or other modules opening the session, we would see them on this axis. As experts might know, -coords are already used in computer security <ref type="bibr" target="#b0">[1]</ref> but face a problem of not being easy to automate or with various data formats. This paper focuses on how relevant security information can be extracted from logs, whatever format they have, how anyone can discover attacks or software malfunctions and how the analyst can then filter and dig into data to discover high level issues. The next part covers how Picviz was designed, its internals. After we will see how malicious attacks can be extracted, and how it can help you to write correlation rules.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2">Picviz architecture</head></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.1">The PCV language</head><p>It has been designed to be easy to generate and as close as possible to the Graphviz <ref type="bibr" target="#b2">[3]</ref> language (mostly for properties names). It is a description language for -coords which allows to specify all kinds of properties for a given line (data), set each axis variable axes and give instructions to the engine in the engine section. Also, a graph title can be set in the header section.</p><p>Below is an example of a source PCV file as structured to represent a single line:</p><p>header { title = "foobar"; } axes { integer axis1 [label="First"]; string axis2 [label="Second"]; } data { x1="123",x2="foobar" [color="red"]; }</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.1.1">The axes section</head><p>It defines possible types you can set to each axis, as well as setting axis properties. Labels can be set to axes with the label property. Axes types must be one of them: Type Range Description timeline "00:00" -"23:59" The key=value pair allows to identify which axis has which value. Since axis variable type was defined in the previous axis section, the order does not matter.</p><p>As of now, two properties are available: color and penwidth, which allow to set the line color and width respectively.</p><p>Data lines are generated by scripts from various sources, ranging from logs to network data or anything a script can capture and transform into PCV language data section. This paper focuses on logs, and Perl was choosen for its convenience with Perl Compatible Regular Expressions (PCRE) built-in with the language. The next part explains how such a script can be written to generated the PCV language.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.2">Generating the language</head><p>Picviz delivers a set of tools to automate the PCV language generation from various sources, such as apache logs, iptables logs, tcpdump, syslog, SSH connections, . . . Perl being suited language for this kind of task, it was chosen as the default generator language. Of course, nothing prevent other people to write generators for their favorite language.</p><p>The PCV language is generated with the Perl print function, along with Perl pattern matching capabilities to write the data section. The syslog to PCV takes 25 lines of code, including lines colorization where the word 'segfault' shows up in the log file. Then, to use the generator, type:</p><formula xml:id="formula_0">perl syslog2pcv /var/log/syslog \ &gt; syslog.pcv</formula><p>To help finding evilness, a Picviz::Dshield class was written. Calling it will check if the port or IP address match with dshield.org database: It can be used to set the line color, to help seing an event correlated with dshield information database.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.3">Understand the graph</head></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.3.1">Graphical frontend</head><p>Aside from having a good looking graph, it is good to dig into it, and see what was generated. An interactive frontend was written for this purpose. It is even a good example on how Picviz library can be embeded in a Python application. The application picviz-gui was written in Python and Trolltech QT4 library.</p><p>The frontend provides a skillful interaction to find relationship among variables, allows to apply filters, drag the mouse over the lines to see the information displayed and to see the time progression of plotted events. Realtime capabilities are also possible, since the frontend listen to a socket waiting for lines to be written.</p><p>The frontend has limitations: on a regular machine, more than 10000 events makes the interface sluggish. As Picviz was designed to deal with million of events, a console program was written.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.3.2">Command line interface</head><p>The pcv program is the CLI binary that takes PCV language as input, uses the picviz library output plugins and generate the graph using the called plugin. To generate a SVG, the program can be called like this:</p><p>pcv -Tsvg syslog.pcv &gt; syslog.svg</p><p>As SVG is a vectorial format, this is reporting the scalability issue encountered with the frontend to thirdparty applications. So a PNG capable plugin was written, based on plplot <ref type="bibr" target="#b0">1</ref>  </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.3.3">Grand tour</head><p>Because choosing the right order for the right axis is one of -coords disadvantages, Picviz provides via the plplot plugin a Grand tour capability. The Grand tour generates as much images as pairs permutation of axes possible, the idea is to show every possible relation among every available axes. Plugin arguments are provided with the -A command. So to generate a grand tour on graphs, pcv should be called like this:</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.3.4">Filtering</head><p>To select lines one want to be displayed, Picviz provides filters. They can be used on the real value to match a 1 http://www.plplot.org With the CLI, they can be called like this:</p><p>pcv -Tplplot syslog.pcv \ 'your filter here'</p><p>With the frontend, filter can be called like this:</p><p>picviz-gui syslog.pcv \ 'your filter here'</p><p>Filter syntax is:</p><p>display type relation value \ on axis number &amp;&amp; ...</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Where:</head><p>• display: show or hide, select if we hide or display the selected value</p><p>• type: value, plot, color or freq, choose what is filtered</p><p>• relation: &lt;, &gt;, &lt;=, &gt;=, ! =, =, relation with selected value</p><p>• value: selected value to compare data with</p><p>• on axis: text to express the axis selection</p><p>• number: axis number to filter values on For example, to display all lines plotted under a hundred on the second axis, one can replace your filter here by show only plot &lt; 100 on axis 2. Specific data can also be removed, such as: pcv -Tplplot syslog.pcv \ 'hide value = "sudo" on axis 2'</p><p>A percentage can be applied to avoid knowing the value that can be filtered: 'show plot &gt; 42% on axis 3 and plot &lt; 20% on axis 1'.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.3.5">String positioning</head><p>One of the basic string algorithm displaying is to simply add the ascii code to create a number. Among pros of using this very naive algorithm, is to be able to display scans (strings very close to each other coming from one source) very easily. As for the cons there is the collision risk, but in practice this low risk of having such events. As Picviz is very flexible, it still offer other string alignment algorithms, using Levenstein <ref type="bibr" target="#b6">[7]</ref> or Hamming distance <ref type="bibr" target="#b4">[5]</ref> from a reference string. This still makes collision possible, but differently.</p><p>The basic algorithm highlights scans evidences, and then one can quickly spot an issue. This way, without having any knowledge of how the log must be read, little changes will appear close enough to each other to grab the reader attention.</p><p>The following lines are logs taken from ssh authentication, and appear like this: time="05:08", source="192.168.0.42", log="Failed keyboard-interactive/pam for invalid user lindsey"; time="05:08", source="192.168.0.42", log="Failed keyboard-interactive/pam for invalid user ashlyn"; time="05:08", source="192.168.0.42", log="Failed keyboard-interactive/pam for invalid user carly"; <ref type="figure" target="#fig_1">Figure 3</ref> shows a generated graph from twenty lines of a ssh scan.</p><p>On the third axis, one can clearly see the lines sweep, showing the scan.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.3.6">Correlations</head><p>With -coords, several correlations are possible, as shown in <ref type="figure" target="#fig_4">figure 5</ref>, where it is known for sure all events share a common variable.</p><p>Because -coords are multi-dimensional, what can be seen in <ref type="figure" target="#fig_2">figure 4</ref> which is in two dimension can lead to more interesting pattern discovery of a bow tie generates an other, which generates again an other, and so forth. . . It draws a path where every value is guessable.</p><p>One other way to correlate is applying a line colorization for their frequency of apparition between two axes and colorize the whole line, according to the highest  As of today, only the svg and pngcairo handle this feature. Picviz CLI should be called like this:</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.3.7">Section summary</head><p>Picviz has been designed to be very flexible and let anyone capable to generate the language, filter data and visualize them. This can be done statically on a plain generated file, and with the graphical interface, this is even possible in real-time. Of course the knowledge of logs lines is better to set more axis and have more information to understand the graph. However, the naive approach is sometime enough to see scanning activities. Now that the Picviz architecture and features have been explained, we will show how we can efficiently use it to dig into logs and extract relevant information.</p><p>The next section covers how we can efficiently see attacks from many lines of log and finally write a correlation script in perl.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3">Catch me if you can!</head></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.1">Introduction</head><p>Let's suppose one account has been compromised. But the attacker is smart enough not to be noisy, so that the attacked account user does not even know it has been attacked: no altered files, no suspect behavior. Paranoid, the attacker does not log in out of office hours. We are on a five hundred (500) machines network, logs are aggregated.</p><p>When a SSH connection occurs, one in the following lines of log is written in the syslog auth facility, which is in the file /var/log/auth.log on a Linux Debian system: Aug 18 20:45:53 jazz sshd <ref type="bibr">[26424]</ref> </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.2">Generating the language</head><p>We Generate PCV files with a perl script using the following regular expression to get all SSH connection attempts: Picviz::Dshield class we have seen earlier so IP addresses matching the Dshield database will appear in red.</p><p>Our perl script is executed:</p><p>ssh-auth2pcv.pl /var/log/auth.log \ &gt; auth.pcv</p><p>It will dig dshield for IP addresses in the top 10000 of those matching firewall logs subscribed to dshield.org, and match ssh logs against those IP addresses, and draw them in red if they match (see <ref type="figure" target="#fig_5">figure 6)</ref>.</p><p>First of all, a few fact that can be seen interactively but impossible to see on a static printed paper like here. On the time axis, midnight is at the bottom and 23:59:59 at the very top. Two authentication types (second axis) are extracted: 'Failed password' and 'Accepted keyboardinteractive/pam'. On the third axis, IP Source are various, as one can see in the graph and there is only one login used to open a session.</p><p>There are several things that are instantaneously seen in the resulted graph:</p><p>• Accepted logins are mostly time-wise grouped</p><p>• A red dshielded IP address appears fortunately with a failed login, however it is not interesting since login attempts were unsuccessful</p><p>• Various sources are used to log a single user in (four with success)</p><p>• No public key is used to log the user in, just regular password (keyboard-interactive)</p><p>• By looking at the bottom of the last axis (Login), we easily notice one single source had both successful and unsuccessful logins, attempt done on a single login The discovered IP source address is none if those the target user uses to log in, its account may have been compromised, at least one need to investigate why the person behind this login logs from several IP sources. -coords are surprisingly good to catch those things. As a conclusion, most Host IDS will generate an alert upon authentication. However, few administrators will really consider them. In this case, visualization can help them to wonder why several IP addresses were used to log in. Just looking over the visualized logs was enough to make us have the idea and want to automate the detection of this kind of behavior. The next section explains how two correlation rules can easily be written using the Perl programming language.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4">Automate attack detection</head><p>In the last section, using -coords, two possible attacks were discovered. Showing how insightful they led us to wonder how several IP addresses can actually be used to log into an account without the operator being able to catch the alert sent by the Host IDS. Fortunately, its automation is easy and the goal of this section is to show a perl script can in this particular case replace the visualization.</p><p>It is good to consider visualization as a tool, that can sometime be very helpful but can often hardly be automated. The point we want to focus here is that visualization helped us to have the idea. Picviz can help to write correlation rulesets for intrusion detection and help to understand better than an isolated event <ref type="bibr" target="#b1">[2]</ref>.</p><p>Our perl script should be able to automate the following:</p><p>• Discover if an account logged in from several IP addresses</p><p>• Discover if a user login from at least two IP addresses had success and failures on one of them</p><p>• Match IP address against Dshield</p><p>• Warn about the possible intrusion attempt.</p><p>All of what is needed is to write Perl code to construct information we will then use to send alerts <ref type="bibr" target="#b7">[8]</ref>: </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.1">Conclusion</head><p>This paper explained what we can do with -coords and system logs. Ranging from better understanding, see some network security anomalies and see how unexpected things can be discovered. That can lead to write a simple script to warn about a specific behavior. Visualization is an important and growing part of security that can be used for several things: one is to have non-expert able to understand complex attack they can latter report to the analyst, the other is to help the analyst to dig where he he would not do normally but also, help to write better tools to automate intrusion detection. The future of Picviz will be to automate visually correlations and go further than -coords to make a better representation of axes correlations. </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.2">Acknowledgments</head></div><figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_0"><head>Figure 1 :</head><label>1</label><figDesc>Figure 1: Orthogonal basis in R 3</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_1"><head>Figure 3 :</head><label>3</label><figDesc>Figure 2: Four axes</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_2"><head>Figure 4 :</head><label>4</label><figDesc>Figure 4: 2D Line relationship</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_3"><head>Figure 1 :</head><label>1</label><figDesc>Figure 1: Picviz simplified architecture</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_4"><head>Figure 5 :</head><label>5</label><figDesc>Figure 5: Picviz frontend showing pam sessions opening</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_5"><head>Figure 6 :</head><label>6</label><figDesc>Figure 6: Zoom on time axis</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_6"><head>Figure 7 :</head><label>7</label><figDesc>Figure 7: PAM module convergence</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_7"><head></head><label></label><figDesc>The data section Data are written line by line, each value coma separated. Four data entries with their relatives axes can be written like this: data { t="11:30",src="192.168.0.42", \ port="80" [color="red"]; t="11:33",src="10.0.0.1",port="445"; t="11:35",src="127.0.0.1",port="22"; t="23:12",src="213.186.33.19", \ port="31337"; }</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_9"><head>Figure 2 :</head><label>2</label><figDesc>Figure 2: Syslog grand tour</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_10"><head>Figure 3 :</head><label>3</label><figDesc>Figure 3: SSH scan</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_11"><head>Figure 5 :</head><label>5</label><figDesc>Figure 5: Syslog heatline with virus mode</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_12"><head></head><label></label><figDesc>Figure 6: SSH authentications -coords</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_13"><head>Figure 7 :</head><label>7</label><figDesc>Figure 7: Something interesting</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_14"><head></head><label></label><figDesc>And to send the alert: while(($key, $value) = each(%users)) { if (@{$value} &gt;= 2) { print " *** Alert *** \n"; print "Different IP addresses for one user\n"; ($ipsrc,$ipauth) = split(/,/,$value); print "Source IP: $ipsrc" $client &lt;&lt; $idmef; } }</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_15"><head>I</head><label></label><figDesc>would like to thank Alfred Inselberg for his great achievements with -coords, and his encouragements upon my work with Picviz. Philippe Saadé for the re- search conducted together on improving -coord and Pierre Chifflier on IDS correlation. Steve Grubb, Lukas Kuklinek and Tomas Heinrich for their work done at Red Hat in intrusion detection, Prelude IDS and their Picviz package available in next Fedora release. Yoann Van- doorselaere for his great work leading the Prelude IDS project. As well as INL, a very good place to work sur- rounded by bright people and their will to innovate in the computer security area.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_0" validated="false"><head>.</head><label></label><figDesc>PNG output is preferred to the use of a frontend, to handle million of events. You can then use the filtering Picviz provides to remove useless information and finally use the frontend with those filtered data. Section 2.3.4 explains how events can be filtered.</figDesc><table>That can be called like this: 

pcv -Tplplot syslog.pcv 
Plotting Options: 
... 
&lt; 3&gt; psc 
PostScript File (color) 
&lt; 4&gt; xfig 
Fig file 
... 
&lt;16&gt; pngcairo Cairo PNG Driver 

</table></figure>
		</body>
		<back>
			<div type="references">

				<listBibl>

<biblStruct xml:id="b0">
	<analytic>
		<title level="a" type="main">Passive visual fingerprinting of network attack tools</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Conti</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">G</forename><surname>And</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Abdullah</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">K</forename></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">VizSEC/DMSEC &apos;04: Proceedings of the 2004 ACM workshop on Visualization and data mining for computer security</title>
		<meeting><address><addrLine>New York, NY, USA</addrLine></address></meeting>
		<imprint>
			<publisher>ACM</publisher>
			<date type="published" when="2004" />
			<biblScope unit="page" from="45" to="54" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b1">
	<analytic>
		<title level="a" type="main">Aggregation and correlation of intrusion-detection alerts</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Debar</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">H</forename><surname>And</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Wespi</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Recent Advances in Intrusion Detection</title>
		<imprint>
			<publisher>Springer-Verlag</publisher>
			<date type="published" when="2001" />
			<biblScope unit="volume">2212</biblScope>
			<biblScope unit="page" from="85" to="103" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b2">
	<analytic>
		<title level="a" type="main">A technique for drawing directed graphs</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Gansner</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">E</forename><forename type="middle">R</forename><surname>Koutsofios</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">E</forename><surname>North</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><forename type="middle">C</forename><surname>And</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">K</forename><surname>Vo</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE Transactions on Software Engineering</title>
		<imprint>
			<biblScope unit="volume">19</biblScope>
			<biblScope unit="page" from="214" to="230" />
			<date type="published" when="1993" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b3">
	<analytic>
		<title level="a" type="main">Visualizing multidimensional (multivariate) data and relations</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Grinstein</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">G</forename><surname>Mihalisin</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><surname>Hinterberger</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">H</forename><surname>And</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">In-Selberg</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">VIS &apos;94: Proceedings of the conference on Visualization &apos;94</title>
		<meeting><address><addrLine>Los Alamitos, CA, USA</addrLine></address></meeting>
		<imprint>
			<publisher>IEEE Computer Society Press</publisher>
			<date type="published" when="1994" />
			<biblScope unit="page" from="404" to="409" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b4">
	<analytic>
		<title level="a" type="main">Error detecting and error correcting codes</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Hamming</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Bell Syst. Tech. J</title>
		<imprint>
			<biblScope unit="volume">29</biblScope>
			<biblScope unit="page" from="147" to="160" />
			<date type="published" when="1950" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b5">
	<analytic>
		<title level="a" type="main">Parallel coordinates: a tool for visualizing multi-dimensional geometry</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Inselberg</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>And</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Dimsdale</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">B</forename></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">VIS &apos;90: Proceedings of the 1st conference on Visualization &apos;90</title>
		<meeting><address><addrLine>Los Alamitos, CA, USA</addrLine></address></meeting>
		<imprint>
			<publisher>IEEE Computer Society Press</publisher>
			<date type="published" when="1990" />
			<biblScope unit="page" from="361" to="378" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b6">
	<monogr>
		<title level="m" type="main">Binary codes capable of correcting deletions, insertions, and reversals</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Levenshtein</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">V</forename><forename type="middle">I</forename></persName>
		</author>
		<imprint>
			<date type="published" when="1966" />
		</imprint>
	</monogr>
<note type="report_type">Tech. Rep. 8</note>
</biblStruct>

<biblStruct xml:id="b7">
	<monogr>
		<title/>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Tricaud</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename></persName>
		</author>
		<ptr target="http://www.wallinfire.net/files/artcor.pl" />
		<imprint/>
	</monogr>
</biblStruct>

				</listBibl>
			</div>
		</back>
	</text>
</TEI>
