<?xml version="1.0" encoding="UTF-8"?>
<TEI xmlns="http://www.tei-c.org/ns/1.0" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
xsi:schemaLocation="http://www.tei-c.org/ns/1.0 /Users/atharsefid/Desktop/grobid-0.5.3/grobid-home/schemas/xsd/Grobid.xsd"
 xmlns:xlink="http://www.w3.org/1999/xlink">
	<teiHeader xml:lang="en">
		<encodingDesc>
			<appInfo>
				<application version="0.5.3" ident="GROBID" when="2020-09-29T04:11+0000">
					<ref target="https://github.com/kermitt2/grobid">GROBID - A machine learning software for extracting information from scholarly documents</ref>
				</application>
			</appInfo>
		</encodingDesc>
		<fileDesc>
			<titleStmt>
				<title level="a" type="main">VoteAgAin: A scalable coercion-resistant voting system VOTEAGAIN: A scalable coercion-resistant voting system</title>
			</titleStmt>
			<publicationStmt>
				<publisher/>
				<availability status="unknown"><licence/></availability>
				<date>August 12-14, 2020</date>
			</publicationStmt>
			<sourceDesc>
				<biblStruct>
					<analytic>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><roleName>EPFL;</roleName><forename type="first">Wouter</forename><surname>Lueks</surname></persName>
							<affiliation key="aff0">
								<orgName type="department" key="dep1">EPFL, SPRING Lab</orgName>
								<orgName type="department" key="dep2">EPFL, SPRING Lab</orgName>
								<orgName type="institution" key="instit1">Universidad Carlos III Madrid/ITEFI</orgName>
								<orgName type="institution" key="instit2">CSIC; Carmela Troncoso</orgName>
								<orgName type="institution" key="instit3">Universidad Carlos III Madrid ITEFI</orgName>
								<address>
									<region>EPFL, CSIC</region>
								</address>
							</affiliation>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Iñigo</forename><surname>Querejeta-Azurmendi</surname></persName>
							<affiliation key="aff0">
								<orgName type="department" key="dep1">EPFL, SPRING Lab</orgName>
								<orgName type="department" key="dep2">EPFL, SPRING Lab</orgName>
								<orgName type="institution" key="instit1">Universidad Carlos III Madrid/ITEFI</orgName>
								<orgName type="institution" key="instit2">CSIC; Carmela Troncoso</orgName>
								<orgName type="institution" key="instit3">Universidad Carlos III Madrid ITEFI</orgName>
								<address>
									<region>EPFL, CSIC</region>
								</address>
							</affiliation>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Wouter</forename><surname>Lueks</surname></persName>
							<affiliation key="aff0">
								<orgName type="department" key="dep1">EPFL, SPRING Lab</orgName>
								<orgName type="department" key="dep2">EPFL, SPRING Lab</orgName>
								<orgName type="institution" key="instit1">Universidad Carlos III Madrid/ITEFI</orgName>
								<orgName type="institution" key="instit2">CSIC; Carmela Troncoso</orgName>
								<orgName type="institution" key="instit3">Universidad Carlos III Madrid ITEFI</orgName>
								<address>
									<region>EPFL, CSIC</region>
								</address>
							</affiliation>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Iñigo</forename><surname>Querejeta-Azurmendi</surname></persName>
							<affiliation key="aff0">
								<orgName type="department" key="dep1">EPFL, SPRING Lab</orgName>
								<orgName type="department" key="dep2">EPFL, SPRING Lab</orgName>
								<orgName type="institution" key="instit1">Universidad Carlos III Madrid/ITEFI</orgName>
								<orgName type="institution" key="instit2">CSIC; Carmela Troncoso</orgName>
								<orgName type="institution" key="instit3">Universidad Carlos III Madrid ITEFI</orgName>
								<address>
									<region>EPFL, CSIC</region>
								</address>
							</affiliation>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Carmela</forename><surname>Troncoso</surname></persName>
							<affiliation key="aff0">
								<orgName type="department" key="dep1">EPFL, SPRING Lab</orgName>
								<orgName type="department" key="dep2">EPFL, SPRING Lab</orgName>
								<orgName type="institution" key="instit1">Universidad Carlos III Madrid/ITEFI</orgName>
								<orgName type="institution" key="instit2">CSIC; Carmela Troncoso</orgName>
								<orgName type="institution" key="instit3">Universidad Carlos III Madrid ITEFI</orgName>
								<address>
									<region>EPFL, CSIC</region>
								</address>
							</affiliation>
						</author>
						<title level="a" type="main">VoteAgAin: A scalable coercion-resistant voting system VOTEAGAIN: A scalable coercion-resistant voting system</title>
					</analytic>
					<monogr>
						<title level="m">Proceedings of the 29th USENIX Security Symposium</title>
						<meeting>the 29th USENIX Security Symposium						</meeting>
						<imprint>
							<date type="published">August 12-14, 2020</date>
						</imprint>
					</monogr>
					<note>This paper is included in the Open access to the Proceedings of the 29th USENIX Security Symposium is sponsored by USENIX.</note>
				</biblStruct>
			</sourceDesc>
		</fileDesc>
		<profileDesc>
			<abstract>
				<p>The strongest threat model for voting systems considers coer-cion resistance: protection against coercers that force voters to modify their votes, or to abstain. Existing remote voting systems either do not provide this property; require expensive operations for tallying; or burden users with the need to store cryptographic key material and with the responsibility to deceive their coercers. We propose VOTEAGAIN, a scalable voting scheme that relies on the revoting paradigm to provide coercion resistance. VOTEAGAIN uses a novel deterministic ballot padding mechanism to ensure that coercers cannot see whether a vote has been replaced. This mechanism ensures tallying takes quasilinear time, making VOTEAGAIN the first revoting scheme that can handle elections with millions of voters. We prove that VOTEAGAIN provides ballot privacy, coercion resistance, and verifiability; and we demonstrate its scalability using a prototype implementation of its core cryptographic primitives.</p>
			</abstract>
		</profileDesc>
	</teiHeader>
	<text xml:lang="en">
		<body>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="1">Introduction</head><p>Remote electronic voting in which voters cast their ballot outside a poll-booth environment, from their own devices, is susceptible to large-scale vote buying and coercion <ref type="bibr" target="#b28">[29]</ref>. Yet, many deployed electronic voting systems <ref type="bibr" target="#b1">[2,</ref><ref type="bibr" target="#b23">24,</ref><ref type="bibr" target="#b35">36]</ref> do not support coercion resistance. This might be suitable in Western democracies where freedom and privacy are well rooted in society. However, under authoritarian regimes <ref type="bibr" target="#b26">[27]</ref> or in younger democracies <ref type="bibr" target="#b31">[32]</ref>, coercion is a serious problem.</p><p>There are two kind of coercion-resistant electronic voting systems in the literature. The first kind provides users with fake voting credentials that voters use/produce when coerced, enabling deletion of coerced votes <ref type="bibr" target="#b10">[11,</ref><ref type="bibr" target="#b28">29]</ref>. This approach has several downsides: (i) voters need to store their true voting credential on their devices, (ii) the system cannot give feedback on whether the correct credential was used, and thus voters cannot be sure if their vote has been recorded correctly at the * This author's work was partly performed while working at Minsait, Indra. time of voting, and (iii) voters need to convincingly lie while being coerced which may be a challenge. The second kind relies on the revoting paradigm <ref type="bibr" target="#b0">[1,</ref><ref type="bibr" target="#b22">23,</ref><ref type="bibr" target="#b29">30,</ref><ref type="bibr" target="#b32">33]</ref>. These schemes avoid the drawbacks associated with the fake-credential approach by allowing voters to submit fully to coercers, and later on supersede coerced votes by casting a new ballot. This approach requires that the coercer cannot detect whether a voter has cast new ballots. To achieve this, state-of-the-art schemes <ref type="bibr" target="#b0">[1,</ref><ref type="bibr" target="#b29">30]</ref> require a quadratic number of operations, concretely a pair-wise comparison of all ballots, to privately filter superseded ballots. As an example, for the Iowa Democratic caucus with only 176,574 voters, Achenbach et al.'s solution <ref type="bibr" target="#b0">[1]</ref> would require 1.1 core years to filter the ballots.</p><p>We propose VOTEAGAIN, a scalable coercion-resistant (re)voting scheme. VOTEAGAIN's efficiency relies on two key insights: First, one can hide the number of ballots per user by inserting a deterministic number of dummy ballots which depends solely on the number of voters and the number of cast ballots. Thus, it reveals nothing about the number of ballots cast by individual voters, hiding any (re)voting patterns induced by voters or coercers. Second, because of the deterministic nature of the approach one can execute filtering in the clear, reducing the filtering time from quadratic to quasilinear: O(n log n) where n is the number of ballots. As a result, for the Iowa caucus our construction requires under 14 core minutes. We estimate that VOTEAGAIN using 224 cores (less than $50 on Amazon, or $75K on dedicated hardware) can filter hundreds of millions of ballots in hours.</p><p>We make the following contributions:</p><p>We introduce VOTEAGAIN, a novel remote electronic revoting scheme based on well defined and widely used cryptographic constructions.</p><p>We introduce a novel efficient deterministic padding scheme that hides revoting at a low cost. The complexity of the resulting filtering phase is O(n log n) where n is the number of ballots. Our experiments show that in many practical scenarios the cost can be even lower.</p><p>We show that previous definitions of coercion resistance in</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>USENIX Association</head><p>29th USENIX Security Symposium 1553  JCJ <ref type="bibr" target="#b7">[8,</ref><ref type="bibr" target="#b10">11,</ref><ref type="bibr" target="#b28">29]</ref> No 1 Yes n 2 Yes k-out-of-t k-out-of-t k-out-of-t k-out-of-t + AC Black-box <ref type="bibr" target="#b20">[21]</ref> TTP No n Yes Unclear k-out-of-t TTP TTP Revote <ref type="bibr" target="#b0">[1,</ref><ref type="bibr" target="#b29">30]</ref> k-out-of-t Yes n 2 Yes TTP k-out-of-t TTP k-out-of-t + AC Helios <ref type="bibr" target="#b1">[2]</ref> revoting is not possible No TTP k-out-of-t TTP N/A VOTEAGAIN TTP Yes n log n No TTP k-out-of-t TTP TTP the revoting setting are vacuous. We provide a new coercionresistance definition and we adapt modern definitions of ballot privacy <ref type="bibr" target="#b5">[6]</ref> and verifiability <ref type="bibr" target="#b11">[12,</ref><ref type="bibr" target="#b12">13]</ref> to the revoting setting. We prove that VOTEAGAIN satisfies these definitions.</p><p>We evaluate the scalability of VOTEAGAIN on a prototype implementation of the core cryptographic primitives. Our results show that VOTEAGAIN can support elections with millions of users.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2">Related Work</head><p>Coercion-resistant voting schemes fall under two categories: either they enable voters to generate fake authentication credentials or they allow the voter to revote. Coercion-resistant schemes using fake credentials, introduced by Juels et al. <ref type="bibr" target="#b28">[29]</ref> (JCJ), are used in several voting schemes <ref type="bibr" target="#b2">[3,</ref><ref type="bibr" target="#b7">8,</ref><ref type="bibr" target="#b9">10,</ref><ref type="bibr" target="#b10">11]</ref>. In these schemes, the voter has both real and fake authentication credentials (or pre-registered passwords and panic passwords <ref type="bibr" target="#b9">[10,</ref><ref type="bibr" target="#b15">16]</ref>). When coerced, the voter lies to the coercer, using a fake authentication credential (or handling it to the coercer), resulting in a non-counted ballot. Ballots cast with the real credential are counted. These schemes provide the real authentication credential to the voter during registration phase (in which the coercer must be absent). The voter must securely store these authentication credentials for later use, i.e., voters need to maintain cryptographic state.</p><p>Coercion resistant schemes based on revoting allow voters to cast multiple ballots and then filter these ballots, typically counting the last ballot per voter. For such a scheme to be coercion resistant, the filtering stage must be deniable <ref type="bibr" target="#b0">[1]</ref>, i.e., it must not expose which ballots are filtered, as this would expose revoting actions. Black box filtering where a trusted third party (TTP) performs the filtering privately is deniable <ref type="bibr" target="#b20">[21]</ref>, but not verifiable. To the best of our knowledge, there exist two publicly-verifiable deniable re-voting schemes <ref type="bibr" target="#b0">[1,</ref><ref type="bibr" target="#b29">30]</ref>. To obtain public verifiability, these schemes use a distributed authority to compare each pair of ballots before shuffling to privately mark superseded ballots, requiring O(n 2 ) operations. After shuffling, these marks are decrypted and the tallying server verifiably filters superseded ballots. As literally specified in these papers, these schemes are 'not efficient for large scale elections'. We confirm in Section 7 that Achenbach et al.'s scheme <ref type="bibr" target="#b0">[1]</ref> cannot efficiently handle small elections of a hundred thousand users.</p><p>Both the JCJ based and the private revoting based schemes offer a solution with a k-out-of-t assumption for coercion resistance. However, on top of that, these schemes require the existence of anonymous communications channels (AC) to avoid coercion attacks such as forced abstention.</p><p>For authentication, most schemes require users to store cryptographic state <ref type="bibr" target="#b0">[1,</ref><ref type="bibr" target="#b7">8,</ref><ref type="bibr" target="#b10">11,</ref><ref type="bibr" target="#b20">21,</ref><ref type="bibr" target="#b28">29,</ref><ref type="bibr" target="#b29">30,</ref><ref type="bibr" target="#b34">35]</ref>, or remember special passwords <ref type="bibr" target="#b9">[10,</ref><ref type="bibr" target="#b15">16]</ref>. Helios <ref type="bibr" target="#b1">[2]</ref> and Apollo <ref type="bibr" target="#b19">[20]</ref> rely on regular username/password. To improve verifiability by distributing the trust of the entity deciding which users are eligible voters, some schemes require that voters authenticate to k out of t parties <ref type="bibr" target="#b2">[3,</ref><ref type="bibr" target="#b7">8,</ref><ref type="bibr" target="#b10">11,</ref><ref type="bibr" target="#b28">29]</ref>. However, this results in a complex registration phase for the user Revoting based schemes (including VOTEAGAIN) can be extended to this setting to reduce the trust assumptions required for authentication correctness (and hence verifiability). <ref type="table" target="#tab_0">Table 1</ref> summarizes the comparison between VOTEAGAIN and previous work. by the voters. During the tally phase, the tally server and trustees post their proofs and results to the bulletin board. Ad-hoc implementations <ref type="bibr" target="#b24">[25]</ref> or blockchain-based implementations <ref type="bibr" target="#b17">[18,</ref><ref type="bibr" target="#b18">19]</ref> would be suitable for VOTEAGAIN's PBB.</p><p>Tally Server (TS). The TS filters the ballots. It adds dummy ballots, shuffles the ballots, groups them by voter, and selects the last ballot for each voter.</p><p>Trustees. The trustees mix and decrypt the selected ballots to reveal the outcome of the election. Each trustee has a partial decryption key for a k-out-of-t encryption system.</p><p>Threat model. We assume an adversary A whose goal it is to coerce voters into casting votes for a particular candidate or to abstain. This adversary, although computationally bounded, may coerce any voter -but not all voters. Under coercion, the coerced voter does exactly as instructed (without needing to lie). The coercer learns all information stored and received by the voter at the time of coercion. We assume that after coercion, and before the end of the election, the coercer does not control a voter, such that the voter can cast at least one more vote. We also assume that the user's means of authentication is inalienable <ref type="bibr" target="#b0">[1]</ref>, that is, a coercer can neither eliminate nor duplicate a voter's means of authentication. While these assumptions are strong, we point out that so are the assumptions behind coercion resistant solutions that rely on fake credentials <ref type="bibr" target="#b7">[8,</ref><ref type="bibr" target="#b10">11,</ref><ref type="bibr" target="#b28">29]</ref> (see <ref type="table" target="#tab_1">Table 2</ref>). Fake-credential based solutions assume that users cannot be coerced during registration and hence need inalienable means of authentication during this phase; that users can store and hide cryptographic key material and hence are required to have access to where this material is stored during the voting phase; and that users can lie convincingly. These assumptions are not needed in VOTEAGAIN. Our construction allows users to vote from any device, preventing coercion attacks that rely on destroying or stealing the voting device.</p><p>In VOTEAGAIN, voters authenticate against the PA every time they vote to obtain an ephemeral voting token. The PA must be honest with respect to verifiability and coercion resistance. To enable quasilinear filtering we also require that the TS is honest with respect to coercion resistance. This assumption is stronger than Achenbach et al.'s k-out-of-t assumption on the trustees <ref type="bibr" target="#b0">[1]</ref>, but their relaxation comes at a quadratic computational cost, see <ref type="table" target="#tab_0">Table 1</ref>.</p><p>Finally, we require VOTEAGAIN to satisfy the following informal properties. We formalize these properties in Section 6. <ref type="table" target="#tab_2">Table 3</ref> summarizes the trust in each party required for achieving them.</p><p>Definition 1 (Ballot privacy <ref type="bibr" target="#b5">[6]</ref>). Assuming at most k − 1 malicious trustees, no coalition of malicious parties (including the PA and TS) can learn the vote of an honest user.</p><p>Definition 2 (Coercion resistance). Assuming that the PA, the TS, and the PBB are honest, no coercer can use the information made public on PBB to determine if coercion was successful or not, provided that the election outcome does not leak this information.</p><p>If voters use an anonymous communication system to post their ballots to the PBB, then the trust assumption on the PBB for coercion is not necessary.</p><p>Definition 3 (Verifiability). Assuming that the PA is honest, VOTEAGAIN guarantees that: (i) the last ballot per voter will be tallied, (ii) adversary A cannot include more malicious votes in the tally than the number of voters it controls, and (iii) honest ballots cannot be replaced. If voters do not verify that their ballots are correctly appended to the PBB, ballots can be dropped or replaced by earlier ballots if those exist.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4">VOTEAGAIN: High-level overview</head><p>We sketch the key ideas of VOTEAGAIN. For simplicity, in this section we omit the zero-knowledge proofs that parties <ref type="bibr">135</ref>   <ref type="figure">Figure 1</ref>: Basic filtering process by tally server without using dummies. Ballots consist of an encrypted voter identifier ( ), an encrypted ballot index ( ), and an encrypted vote ( ).</p><p>use to show that they performed operations correctly. We describe the protocols in detail in Section 5.1. VOTEAGAIN proceeds in three phases: the pre-election phase, the election phase, and the tally phase. During the preelection phase, the polling authority (PA) assigns to each voter i a random voter identifier vid i , and a random initial ballot index m i . These values are known only to the PA. Casting ballots. During the election phase, voters can cast as many votes as they want. To cast a vote, voter i first authenticates to the PA using her inalienable authentication means to obtain an ephemeral voting token. This voting token includes: an encrypted voter identifier γ, containing vid i , and an encrypted ballot index I, containing m i . After each authentication, the PA increases m i by one. Next, the voter encrypts her choice of candidate as v. Finally, the voter sends the encrypted vote v, the encrypted voter identifier γ, the encrypted ballot number I, and a signature using the ephemeral token to the bulletin board. Filtering ballots. The encrypted voter identifiers and ballot indices enable the tally server (TS) to efficiently select the last ballot for each voter. The TS uses the simplest mechanism possible: It shuffles the ballots, and then decrypts the voter identifiers and ballot indices. The ballots can then publicly be grouped per voter, and the last ballot can be identified by inspection. Finally, the trustees tally the last ballot of each voter. See <ref type="figure">Figure 1</ref>. Hiding patterns using dummies. By itself, shuffling and filtering is not a coercion-resistant mechanism. A coercer can still perform the 1009 attack <ref type="bibr" target="#b36">[37]</ref> in which the coercer forces a voter to cast a specific number of ballots and looks for a group of that size in the filtering step. If such group does not exist, the coerced voter has revoted. In VOTEAGAIN, the TS inserts a deterministic number of dummy ballots and dummy voters before shuffling the ballots to hide such patterns while maintaining the simple public filtering procedure.</p><p>We illustrate VOTEAGAIN's dummy mechanism in <ref type="figure" target="#fig_1">Fig- ure 2</ref>, in a scenario with two voters (A and B) where, the coercer forces voter A to cast 2 ballots. At the end of the election phase the coercer observes 4 ballots and must determine whether A revoted (situation 2) or not (situation 1). Without dummies, distinguishing these situations is trivial: if A revoted there is a group of 3 ballots and one of 1 ballot, and there are two groups of 2 ballots otherwise. We add dummy ballots and voters to make both situations look identical. The idea is to find a cover of ballots that could result from both situations. For instance, adding to either situation two dummy voters that cast four dummy ballots total yields groups of 1, 2, 2, and 3 ballots. This observation makes both situations indistinguishable for the coercer <ref type="figure" target="#fig_1">(Figure 2, right)</ref>.</p><p>To ensure that the cover is independent from the voters' real actions, its appearance must depend only on the information available to the coercer: (1) the number of ballots n B posted by users to the bulletin board; and (2) the number of voters ν that cast a ballot. The goal of the dummy generation strategy is to allocate dummy ballots such that the adversary observes the same cover regardless of the actual distributions of the n B ballots over ν voters.</p><p>Consider the case of two voters, i.e., ν = 2, and 9 ballots, i.e., n B = 9. As the filtering stage only reveals the sizes of the groupings and not their relation to voters the adversary's possible observations are <ref type="bibr" target="#b0">(1,</ref><ref type="bibr" target="#b7">8)</ref>, (2, 7), (3, 6), and (4, 5). To cover all these scenarios one needs 8 voters (6 of which are dummy) casting 1, 2, 3, 4, 5, 6, 7, and 8 ballots, for a total of 36 − 9 = 27 dummy ballots.</p><p>We add dummy ballots to real voters as well to reduce the number of group sizes that are possible. For example, in the previous scenario one can pad the cases <ref type="bibr" target="#b3">(4,</ref><ref type="bibr" target="#b7">8)</ref>. This can be covered with a cover containing voters with 1, 2, 4, 8 ballots each. Building this cover requires only 2 dummy voters and 15 − 9 = 6 dummy ballots. We stress that the number of added dummy ballots is independent of how the real ballots are actually distributed among the two voters.</p><formula xml:id="formula_0">(1, 8), (2, 7), (3, 6), (4, 5) to (1, 8), (2, 8), (4, 8),</formula><p>We refer to Section 5.2 for a generic, efficient algorithm for computing a cover. Filtering with dummies. Before shuffling the ballots, the TS adds dummy ballots to achieve the desired grouping. To ensure that the TS cannot modify the election outcome, the TS assigns different tags to real and dummy ballots.</p><p>To determine how to add dummies, the TS inspects the decrypted voter identifiers and ballot indices; determines a cover; and then computes how many dummies to add to exist- ing voters, and how many dummies to add to dummy voters.</p><p>Consider the example in <ref type="figure" target="#fig_2">Figure 3</ref>. Given 3 voters and 5 ballots, a cover with groups of size 1,1,2,2, and 3 suffices. The TS therefore adds 4 dummy ballots in step 2: 2 dummies to existing voter 531, and two dummy voters, 74 and 103, each with one dummy vote. After adding the dummy ballots, the TS shuffles all ballots. Next, the TS decrypts the voter identifiers and ballot indices; groups ballots per voter, and selects the last ballot per voter. The tags enable the TS to prove that it did not omit real ballots cast by real voters, and it did not count dummy votes cast by dummy voters. In particular, the TS proves in zero-knowledge that the selected votes are either tagged as a real vote and therefore must correspond to the last ballot of a real voter; or the selected vote corresponds to a dummy voter (i.e., all the ballots in the group are tagged as dummies). Finally, the TS privately discards the selected votes corresponding to dummy voters. We refer the reader to Section 5.1 for the full details.</p><p>Design choices. Obtaining coercion resistance requires strong assumptions on some of the parties. In this section, we discuss our design choices and motivate our trust assumptions (see <ref type="table" target="#tab_1">Table 2</ref> for a comparison with other protocols). First, we believe that revoting is an easy to understand solution to achieve coercion resistance. It requires no extra devices, no memorization, no interaction with several entities during registration, and no lying. For instance, Estonians have used a revoting model for years for their elections <ref type="bibr" target="#b25">[26]</ref> with 44% of the electorate having used internet voting <ref type="bibr" target="#b14">[15]</ref>. Second, it does not require voters to securely store cryptographic material, allowing a vote cast from any device. This further reduces the possibility of coercion attacks by confiscating the credential storage device.</p><p>All coercion resistance schemes require absence of the coercer at some point during the process. Fake-credential solutions assume that the coercer is absent during registration and at some point during the voting phase. Revoting, instead, assumes that a voter will have time after the coercion to cast the last vote. In the case of a remote registration process, a targeted attack will most likely succeed in both scenarios. However, attacks scale much better in the fake-credential setting: coercers have the entire registration period (e.g., 24 days in Spain) to coerce a voter. In contrast, coercers in the revoting setting must monitor all coerced voters after coercion to prevent them from revoting before the election closes.</p><p>We decide to trade-off trust with respect to coercion resistance on the PA and TS to obtain high gains in usability and efficiency: trust on the PA relieves users from keeping cryptographic state; and trust on the TS enables VOTEAGAIN's quasilinear filtering of ballots.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5">The VOTEAGAIN voting scheme</head><p>Preliminaries. Let be a security parameter. Let G be a cyclic group of prime order p generated by generator g. We write Z p for the integers modulo p. We write a ∈ R A to denote that a is chosen uniformly at random from the set A.</p><p>VOTEAGAIN uses ElGamal's encryption scheme given by: A key generation algorithm EC.KeyGen(G, g, p) which outputs a public-private key-pair (pk = g sk , sk) for sk ∈ R Z p ; an encryption function EC.Enc(pk, m) which takes as input a public key pk and a message m ∈ G and returns a ciphertext c = (c 1 , c 2 ) = (g r , m·pk r ) for r ∈ R Z p ; and an decryption algorithm EC.Dec(sk, c) which returns the message m = c 2 · c −sk 1 . VOTEAGAIN uses deterministic encryption (with randomness zero) as a cheap verifiable 'encoding' for the ballot tags. Because the encryption is deterministic, verifiers can cheaply check that the encrypted tags have been correctly formed.</p><p>We use a traditional signature scheme given by: A key generation algorithm Sig.Keygen(1 ) that generates a public-private key-pair (pk σ , sk σ ); a signing algorithm σ = Sig.Sign(sk σ , m) that signs messages m ∈ {0, 1} * ; and a veri-fication algorithm Sig.Verify(pk σ , σ, m) that outputs if σ is a valid signature on m and ⊥ otherwise.</p><p>We use verifiable shuffles <ref type="bibr" target="#b3">[4]</ref> to support coercion resistance in a private way. These enable an entity to verifiably shuffle a list of homomorphic ciphertexts in such a way that it is infeasible for a computationally bounded adversary to match input and output ciphertexts.</p><p>VOTEAGAIN uses mixnets, a standard approach <ref type="bibr" target="#b6">[7,</ref><ref type="bibr" target="#b27">28,</ref><ref type="bibr" target="#b33">34]</ref> to compute the election result given the filtered ballots output by the TS. The trustees jointly run the Vote.DKeyGen(1 , k,t, n C ) protocol where is the security parameter , n C the number of candidates, t the number of trustees, and k is the number of trustees needed to decrypt ciphertexts. This protocol outputs a public encryption key pk T and each trustee i obtains a private decryption key sk T,i . To encrypt her vote for candidate c, a voter calls (v, π) = Vote.Enc(pk T , c) to obtain an encrypted vote v and proof π that v encrypts a choice for a valid candidate. We denote the encryption of the zero candidate (i.e., no candidate) with explicit randomizer r ∈ R Z p by Vote.ZEnc(pk T ; r). The algorithm Vote.Verify(pk T , v, π) outputs if the encrypted vote v is correct, and ⊥ otherwise. Given a list of selected votes {V 1 , . . . ,V κ }, the trustees jointly run the (r, Π) ← Vote.MixDecryptTally(pk T , {V 1 , . . . ,V κ }) protocol to compute the election result r and a proof of correctness Π. Internally, Vote.MixDecryptTally uses a standard verifiable mix network and verifiable decryption to shuffle and decrypt the ballots, and then computes the final result in the clear. Any verifier can run Vote.VerifyTally(pk T , {V 1 , . . . ,V κ }, r, Π) to verify whether the result r is computed correctly.</p><p>The TS uses standard zero-knowledge proofs of knowledge <ref type="bibr" target="#b21">[22]</ref> to prove that it operated correctly. We use the FiatShamir heuristic <ref type="bibr" target="#b16">[17]</ref> to convert them into non-interactive proofs of knowledge. We adopt the Camenisch-Stadler notation <ref type="bibr" target="#b8">[9]</ref> to denote such proofs and write, for example,</p><formula xml:id="formula_1">SPK{(sk) : pk = g sk ∧ m = EC.Dec(sk, I)}</formula><p>to denote the non-interactive signature proof of knowledge that the prover knows the private key sk corresponding to pk and that I decrypts to m under sk.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5.1">VOTEAGAIN description</head><p>VOTEAGAIN proceeds in three phases: the pre-election phase, the election phase, and the tally phase. See <ref type="table" target="#tab_4">Table 4</ref> for a summary of frequently used symbols.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5.1.1">Pre-election phase</head><p>In the pre-election phase, the PBB publishes the candidates, and the TS and the trustees prepare their cryptographic material. The PA assigns a unique, random voter identifier vid i to each eligible voter. The correspondence between voters and their identifiers is private to the PA. The PA also generates a Procedure 1 (Setup). To setup an election system with security parameter , electoral roll E, candidate list C , threshold k, and t trustees, the different entities run the Setup(1 , E,C , k,t)</p><p>procedure. First, they pick a group G with generator g and prime order p. They then proceed with the following steps: that the trustees keep private.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5.1.2">Election phase</head><p>In the election phase (see <ref type="figure">Figure 4</ref>), voters first authenticate to the PA to obtain an ephemeral voting token τ. They use this token to sign their ballot β, and post the ballot on the bulletin board. The bulletin board verifies that the ballot is valid. We formalize this phase in three procedures:</p><p>Procedure 2 (GetToken(id, Auth)). On input her identity id and her inalienable means of authentication Auth:</p><p>1. The voter authenticates to the PA using Auth. 2. The PA looks up the corresponding voter identifier vid i and ballot index m i . Then, the PA encrypts the voter identifier γ = EC.Enc(pk TS , vid i ) and ballot number I = EC.Enc(pk TS , m i ) (it first encodes m i as an element of G), and increments the ballot index m i := m i + 1. The PA hides the index m i from the user to prevent coercerswho can see what users can see under coercion -from being able to detect whether the user revoted. 3. The PA creates an ephemeral signing key (pk, sk) = Sig.Keygen() and signs this key together with the encrypted voter identifier and ballot number:</p><formula xml:id="formula_2">σ τ = Sig.Sign(sk PA , pk γ I)</formula><p>and returns the token τ = (pk, sk, γ, I, σ τ ) to the user. 4. The user verifies the token τ = (pk, sk, γ, I, σ τ ) by checking that Sig.Verify(pk PA , σ τ , pk γ I) = .</p><p>Procedure 3 (Vote(τ, c)). To cast a vote, the voter takes as private input the ephemeral voting token τ = (pk, sk, γ, I, σ τ ) and a candidate c ∈ C , and then proceeds as follows:</p><p>1. Encrypts her candidate c as (v, π) = Vote.Enc(pk T , c) to obtain ciphertext v and zero-knowledge proof of correct encryption π.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.">Creates the ballot</head><formula xml:id="formula_3">β = (v, π, pk, γ, I, σ τ , σ)</formula><p>where σ = Sig.Sign(sk, v π pk γ I σ τ ). The voter posts the ballot β to the public bulletin board. 3. The public bulletin board runs <ref type="bibr">Valid(β)</ref>, see below, to check that the ballot is valid, before appending it. 4. Finally, the voter verifies that the ballot β has been appended to the bulletin board. The PBB checks the correctness of the encrypted vote; of the user's signature using the ephemeral key pk; and the PA's signature on this ephemeral key pk, the encrypted voter identifier γ, and the encrypted ballot number I:</p><formula xml:id="formula_4">Vote.Verify(pk T , v, π) = Sig.Verify(pk, σ, v π pk γ I σ τ ) = Sig.Verify(pk PA , σ τ , pk γ I) = .</formula><p>2. The PBB checks that neither the encrypted vote v nor the key pk appear in any ballot β on the bulletin board.</p><p>If any of these checks fails, the bulletin board returns ⊥, otherwise, the PBB returns .</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5.1.3">Tally phase</head><p>In the tally phase (see <ref type="figure">Figure 5</ref>), the TS takes the ballots from the PBB, adds dummy ballots, and shuffles them. Then, it selects the last vote per voter (see <ref type="figure">Figure 6</ref>). To prevent dummy voters from causing overhead in the trustees' shuffle and decrypt phase, the TS shuffles the selected ballots and removes all ballots cast by dummy voters. Finally, the trustees shuffle and decrypt the selected ballots from real voters. Formally, we define two procedures, one to filter votes (Filter), and one to tally the selected ballots (Tally):</p><p>Procedure 5 (Filter). After the election closes, the TS selects the selected votes V i and produces the filter proof Φ. If it aborts, it publishes the current Φ to the public bulletin board.</p><p>1. The tally server (TS) retrieves an ordered list of ballots [β 1 , . . . , β n B ] from the PBB, where</p><formula xml:id="formula_5">β i = (v i , π i , pk i , γ i , I i , σ τ i , σ i ).</formula><p>The TS verifies the ballots by running step 1 of Valid and verifies that there are are no duplicate votes v i or ephemeral public keys pk i on the bulletin board. If any of these checks fails, the TS sets Φ = ⊥, posts it to the bulletin board, and aborts. 2. The TS removes the proofs and signatures to obtain stripped ballots. It provably tags the ballots as 'real' ballots using a deterministic ElGamal encryption (with randomness zero) of the value  <ref type="figure">Figure 6</ref>: High-level overview of ballot filtering and grouping. Let n B be the number of ballots, n D be the number of dummies, n T = n B + n D be their sum, κ be the number of voters plus number of dummy voters, and χ i be the number of (dummy) ballots for (dummy) voter i. First, the TS adds dummy ballots and proves they are well-formed. Then shuffles all ballots without the proofs, hiding which ballots were dummies. Then it verifiably decrypts both the encrypted voter identifiers γ i and the encrypted indices I i to group the ballots by vid and to select the last votes V i . Finally, it outputs the selected votes V i without dummies.</p><formula xml:id="formula_6">g 0 = 1 G , θ R = EC.Enc(pk TS , g 0 ) = (g 0 , g 0 pk 0 ) = (1 G , 1 G ):</formula><formula xml:id="formula_7">β i = (v i , γ i , I i , θ R ).</formula><p>Next, the TS creates n D dummy ballots and provably tags them as such using a deterministic ElGamal encryption of the value g, θ D = EC.Enc(pk TS , g) = (1 G , g · pk 0 ):</p><formula xml:id="formula_8">β i = (v ε , γ i , I i , θ D ),</formula><p>where i &gt; n B and v ε = Vote.ZEnc(pk T ; 0 , which it adds, together with a proof π σ that this shuffle was performed correctly, to Φ. 4. The TS now operates on each shuffled ballot</p><formula xml:id="formula_9">β i = (v i , γ i , I i , θ i ).</formula><p>It decrypts γ i to recover the shuffled and decrypted identifier vid i . It also decrypts I i to obtain the shuffled ballot index m i and proves it did so correctly:</p><formula xml:id="formula_10">π dec i = SPK{(sk TS ) : pk TS = g sk TS ∧ vid i = EC.Dec(sk TS , γ i )∧ m i = EC.Dec(sk TS , I i )} It then adds C = [(vid 1 , m 1 , π dec 1 ), . . . , (vid n B +n D , m n B +n D , π dec n B +n D )] to Φ.</formula><p>The TS aborts and adds ⊥ to Φ if the decrypted ballot indices m i are not unique for a given voter identifier. More precisely, it aborts if there exists indices i, j; i = j such that (vid i , m i ) = (vid j , m j ). 5. The TS groups the ballots with the same voter identifier, and selects the ballot with the highest ballot index from each group. Let G 1 , . . . , G κ be the sets of ballot indices grouped by voter identifier. Consider group G j of size χ j . Let j * = argmax k,k∈G j m k be the index for which the ballot index m j * is maximal. Group G j either corresponds to a real voter, or to a fake voter. The TS produces a reencryption V j of the encrypted votes as follows:</p><p>(a) If the group G j corresponds to a real voter, then the TS simply reencrypts the vote corresponding to the last ballot, i.e., it picks r j at random and sets</p><formula xml:id="formula_11">V j = v j * · Vote.ZEnc(pk T ; r j ),</formula><p>to a randomized encryption of v j * . (b) If the group G j corresponds to a fake voter, then picks r j at random and sets V j to an empty vote: </p><formula xml:id="formula_12">V j = Vote.ZEnc(pk T ; r j ).</formula><formula xml:id="formula_13">) = g 1 . Let G j = {i 1 , . . . , i χ j } and θ = ∏ χ j k=1 θ i k</formula><p>, then the TS constructs the proof</p><formula xml:id="formula_14">π sel j = SPK{(r j , sk TS ) : pk TS = g sk TS ∧ ((g 0 = EC.Dec(sk TS , θ j * )∧V j = v j * ·Vote.ZEnc(pk T ; r j ))∨ (g χ j = EC.Dec(sk TS , θ)∧V j = Vote.ZEnc(pk T ; r j )))}.</formula><p>The TS adds the list of filtered encrypted votes 8. Finally, the TS publishes the remaining votes S = [V 1 , . . . ,V n ] and the full proof Φ to the public bulletin board.</p><formula xml:id="formula_15">F = [(vid 1 ,V 1 , π sel 1 ), . . . , (vid κ ,V κ , π sel κ )] to Φ. 6. The list S D = [V 1 , . . . ,V κ ] of selected</formula><p>The filter procedure ensures that the TS cannot replace ballots by real voters: a selected vote must either correspond to a ballot by a real voter (condition a) or the selected vote is empty and the voter is a dummy voter (condition b). Moreover, the TS can only remove votes cast by dummy voters.</p><p>Procedure 6 (Tally). To compute the final tally, the trustees proceed as follows:</p><p>1. The trustees verify that the TS operated honestly by running the VerifyFilter() algorithm (see below). If VerifyFilter returns ⊥ they return (r, Π) = (⊥, ⊥).</p><formula xml:id="formula_16">2. Let S = [V 1 , . . . ,V n ].</formula><p>The trustees jointly run the (r, Π) ← Vote.MixDecryptTally(pk T , S). They publish the election result r and the zero knowledge proof of correctness Π to the public bulletin board.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5.1.4">Verification</head><p>Any external auditor can use the PBB to verify that all steps in the tally and filtering phases were performed correctly. We define the following verification procedures:</p><p>Procedure 7 (VerifyFilter). Any party can verify that the filtering processes was performed correctly by running VerifyFilter(). This algorithm examines the content of the bulletin board and performs the following checks: </p><formula xml:id="formula_17">1</formula><formula xml:id="formula_18">S = [S D [i] | i / ∈ D].</formula><p>If any of the checks fail, it returns ⊥, and otherwise.</p><p>Procedure 8 (Verify). Any party can verify the result r and proof Π against the public bulletin board. To do so, they proceed as follows:</p><p>1. Verify that the TS operated honestly by running the VerifyFilter() algorithm. If VerifyFilter returns ⊥, then return if (r, Π) = (⊥, ⊥), otherwise return ⊥.</p><p>2. Given the selected votes S, return the result of Vote.VerifyTally(pk T , S,r,Π).</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5.2">Hiding revoting patterns with dummies</head><p>In this section we provide a formal description of the dummy generation algorithm introduced in Section 4. Finding a cover. Formally, a cover is a set C = {(s i , z i )} i formed by groupings (s i , z i ) ∈ Z + × Z + . Here, s i is the size of the ballot groups within that grouping, and z i is the upper bound on the number of times that such a ballot group can occur in any distribution of the n B real ballots among real voters. We aim to find a cover of minimal size |C| = ∑ i s i · z i to minimize the number of dummies added. A sufficient cover. We derive an upper bound on the amount of dummies required to build a cover. We do not use the number of real voters for this bound. Let n B be the number of real ballots on the PBB. For simplicity, assume padded group sizes are powers of two, i.e., s i = 2 i for i ≥ 0. Given n B ballots, any distribution can have at most z 0 = n B groups of size s 0 = 1 (one ballot per voter). Similarly, any distribution can have at most z 1 = n B /2 groups of size s 1 = 2. Recall we pad ballot groups to the next bigger size, so a ballot group of 3 would be padded to one of size s 2 = 4 ballots, therefore z 2 = n B /3. More generally, there can be at most z i = n B /(2 i−1 + 1) groups of s i = 2 i ballots. The biggest possible group (if all ballots were cast by the same voter), has size 2 log 2 n B . Therefore, the size of the cover |C| is bounded by:</p><formula xml:id="formula_19">|C| = log 2 n B ∑ i=0 z i · s i = n B + log 2 n B ∑ i=1 2 i n B 2 i−1 + 1 ≤ n B + log 2 n B ∑ i=1 2 i 2 i−1 + 1 n B ≤ n B + log 2 n B ∑ i=1 2n B = (1 + 2log 2 n B )n B .</formula><p>An efficient cover. Knowing the number of real voters ν enables to obtain a tighter cover. Consider the example of Sec-</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>USENIX Association 29th USENIX Security Symposium 1561</head><p>tion 4 with ν = 2 and n B = 9. If we only consider n B = 9, one of the possible distributions of votes would be having s 1 = 9/2 = 4 groups of size 2. However, knowing ν = 2 rules out this possibility. There can be at most one group of size two: if there were 2 groups, each of the 2 voters could only cast 2 ballots, i.e., 4 ballots in total. However, we know there are 9 ballots so at least one voter has voted more than twice, implying that s 1 = 1. When the number of ballots grows this reasoning becomes intractable. Consider ballot groups with group sizes, s = k i for i ∈ [0, . . . , log k n B ] for a real number k &gt; 1. We assume that n B &gt; ν, otherwise the cover would be trivial: C = {(s 0 = 1, z 0 = ν)}. We compute the cover as follows.</p><p>1. Consider groups of size s 0 = k 0 = 1. As n B &gt; ν, at least one voter must cast more than one ballot, resulting in (s 0 , z 0 ) = (1, ν − 1). 2. Consider groups of size s i = k i . We know that given n B , there can be at most α i = n B /(k i−1 + 1) groups of size k i . The number of groups is also bound by the number of voters. If ν · s i ≥ n B then all ballots can be assigned to the ν voters given groups of maximum size s i , and we set ν i = ν, otherwise set ν i = ν − 1 so that one voter is not in this grouping. Finally, we need at least z i (k i−1 + 1) ballots to make z i groups, but we must have enough ballots left over to make ν groups in total, i.e., n B ≥ z i (k i−1 + 1) + (ν − z i ). Rewriting gives bound</p><formula xml:id="formula_20">β i = (n B − ν)/k i−1 . We set z i = min(α i , ν i , β i ).</formula><p>Assuming n B &gt; ν, the cover has |C| = ∑ log k n B i=0</p><p>z i s i &gt; n B ballots, necessitating dummy ballots, and ∑ log k n B i=1</p><p>z i &gt; ν groups, necessitating dummy voters.</p><p>Creating dummy voters and allocating dummy ballots. The TS recovers all voter identifiers vid by decrypting the γ i s, and the corresponding ballot indices by decrypting the I i s.</p><p>So far, we assumed that ballot index sequences are continuous. However, there can be gaps if some tokens were not used (e.g., the coercer does not use some tokens to identify index gaps in the filtering phase). The TS first requests the number of obtained tokens n B from the PA, and adds exactly n B − n B dummy ballots to fill up any gaps, such that n B equals the number of obtained tokens. The TS can create a dummy ballot for voter vid by setting γ = EC.Enc(pk TS , vid).</p><p>Given the current number of ballots n B and the number of real voters ν the TS computes a cover C = {(s i , z i )} i . To this end the TS performs a search to find the best k, i.e., the one that gives the smaller cover. In our experiments in Section 7, k tends to be in the 2 to 4 range, and the search takes less than a second. The TS performs the following steps:</p><p>1. For every voter vid j , j ∈ {1, . . . , ν} with t ballots, let (s i , z i ) ∈ C be the cover group with the smallest size s i such that s i ≥ t. To ensure that dummy ballots are never counted, the TS adds t − s i dummy votes to vid j with descending (and unused) ballot counters smaller than the last cast vote by this voter. 2. For each grouping (s i , z i ) ∈ C let z i be the number of real voters that were assigned to this group. The TS adds z i − z i dummy voters. For each dummy voter, it picks a random vid and initial ballot index m and creates s i dummy ballots with increasing ballot indices.</p><p>The algorithms Filter and VerifyFilter are quasilinear in the number of real ballots n B . The TS first adds n D dummies, so that the bulletin board contains a total of n T = n B + n D = O(n B log n B ) ballots (see the bound above). All other steps in Filter and Verify filter are linear in n T . The claim follows.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="6">Security Analysis</head><p>We analyze VOTEAGAIN's ballot privacy, verifiability, and coercion resistance. We follow Bernhard et al. <ref type="bibr" target="#b5">[6]</ref> and model the trustees as a single trusted party with keys (pk T , sk T ), but we note that the result holds when trustees are distributed. We explicitly model the bulletin board PBB as an append only string BB. To ease modeling, we use the following redefinition of our voting scheme V = (Setup, GetToken, Vote, Valid, Filter, VerifyFilter, Tally, Verify) where the algorithms output changes to the bulletin board rather than posting to it directly. While Bernhard et al. model voter registration implicitly, we make the registration step explicit using the GetToken function because it forms an integral part of our voting scheme and may happen more than once. The redefined algorithms in V are as follows:</p><p>• Setup(1 , E,C ) as in Setup in procedure 1 but explicitly returns the public key pk = (pk PA , pk TS , pk T ) and the corresponding private keys sk PA , sk TS , sk T .</p><p>• GetToken(i) returns a token τ as in GetToken() in procedure 2.</p><p>• Vote(τ, c) returns β as in Vote(τ, c) in procedure 3 but does not post the ballot to the bulletin board. Moreover, the voter first verifies the token τ as in step 4 of procedure 2, and returns ⊥ if it does not validate.</p><p>• Valid(BB, β) returns the result of Valid(β) in procedure 4 with respect to the bulletin board BB.</p><p>• Filter(BB, n B , sk TS ) as in Filter in procedure 5, but takes the number of registrations n B as explicit input, and returns S Φ instead of adding them to the board.</p><p>• VerifyFilter(BB, S,Φ) runs VerifyFilter from procedure 7 on BB = BB S Φ and returns the result.</p><p>• Tally(BB, sk T ) returns (r, Π) as in Tally in procedure 6.</p><p>• Verify(BB, r, Π) is as in Verify in procedure 8 operating on the bulletin board BB r Π.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="6.1">Ballot privacy</head><p>We base our ballot privacy definition on the game-based definition by Bernhard et al. <ref type="bibr" target="#b5">[6]</ref>. They model ballot privacy using</p><formula xml:id="formula_21">Exp bpriv,b A,V (, E,C ): (pk, sk PA , sk TS , sk T ) ← Setup(1 , E,C ) b ← A O (pk, sk PA , sk TS )</formula><p>Output b</p><p>OvoteLR(τ,c 0 , c 1 ):</p><formula xml:id="formula_22">Let β 0 = Vote(τ, c 0 ) and β 1 = Vote(τ, c 1 ) If Valid(BB b , β b ) = ⊥ return ⊥ Else BB 0 ← BB 0 β 0 and BB 1 ← BB 1 β 1</formula><p>Ocast(β): an indistinguishability game which simultaneously tracks two bulletin boards, BB 0 for the "real" world and BB 1 for the "fake" world. Only one is accessible to the adversary (see <ref type="figure" target="#fig_5">Fig- ure 7)</ref>. The adversary, controlling the polling authority (PA) and the tally server (TS), needs to determine whether the tally was evaluated over the "real" or "fake" world. It can decide how voters vote. Formally, the adversary can make calls to the oracle OvoteLR(τ,c 0 , c 1 ) to let a user with token τ cast a vote for candidate c 0 on BB 0 and a vote for c 1 on BB 1 ; and to the oracle Ocast(β) to cast ballots β (constructed by the adversary) on BB 0 and BB 1 . Because the adversary controls the PA, it can create as many voting tokens as it needs. The outcome of the election is always computed on the real bulletin board BB 0 . The adversary can once ask to compute the outcome by calling the oracle Otally(S,Φ) where S, Φ is the output of Filter computed by the adversary. The tally oracle aborts if S,Φ is not valid. If the adversary saw the "real" result corresponding to BB 0 , the tally protocol proceeds as normal and publishes a correct tally proof Π with respect to BB 0 . If the adversary saw the "fake" bulletin board BB 1 , the experiment simulates the tally proof Π with respect to BB 1 using the algorithm SimTally and returns the real result r.</p><formula xml:id="formula_23">If Valid(BB b , β) = ⊥ return ⊥ Else BB 0 ← BB 0 β and BB 1 ← BB 1 β Oboard(): return BB b Otally(S,Φ) If VerifyFilter(BB b , S,Φ) = ⊥ return ⊥ BB b ← BB b S Φ BB 1−b ← BB 1−b Filter(BB 1−b , |BB 1−b |, sk TS ) (r, Π 0 ) ← Tally(BB 0 , sk T ) Π 1 = SimTally(BB 1 , r) return (r, Π b )</formula><p>Definition 4. Consider a voting scheme V = (Setup, GetToken, Vote, Valid, Filter, VerifyFilter, Tally, Verify) for an electoral roll E and candidate list C . We say the scheme has ballot privacy if there exists an algorithm SimTally such that for all probabilistic polynomial time adversaries A Pr</p><formula xml:id="formula_24">Exp bpriv,0 A,V (, E,C ) = 1 − Pr Exp bpriv,1 A,V (, E,C ) = 1</formula><p>is a negligible function in .</p><p>In the extended version of this paper <ref type="bibr" target="#b30">[31]</ref>, we prove the following theorem. Theorem 1. VOTEAGAIN provides ballot privacy under the DDH assumption in the random oracle model.</p><p>Bernhard et al. <ref type="bibr" target="#b5">[6]</ref> also define strong consistency, to ensure that the result r does not leak information about individual ballots, and strong correctness to ensure that valid ballots are never refused by the bulletin board. We restate these notions and prove that VOTEAGAIN satisfies them in the extended version of this paper <ref type="bibr" target="#b30">[31]</ref>.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="6.2">Coercion resistance</head><p>Coercion resistance means that a coercer should not be able to determine whether a coerced user submitted to coercion -assuming it cannot learn this by seeing the result of the election (e.g., if there are zero votes for the selected candidate, the coercer knows the coerced user did not submit). In VOTEAGAIN, this means that the coercer should not be able to determine whether a coerced user voted again, or not. Existing coercion resistant models are insufficient. Juels, Catalano and Jakobsson (JCJ) model coercion resistance by comparing a real-world game with an ideal game <ref type="bibr" target="#b28">[29]</ref>. In JCJ, voters evade coercion by providing the coercer with a fake credential. The real-world models normal execution. The adversary plays the role of the coercer and chooses a set of corrupted voters and identifies the coerced voter. Then, the honest voters cast their ballots (or abstain). If the coerced voter does not submit she also casts her true ballot. Thereafter, the adversary is given the credentials of all corrupt users, a credential for the coerced voter (which is fake if that voter resists), and the current bulletin board. The adversary can now cast more ballots. Upon seeing the result and the tally proof the adversary decides if the coerced voter submitted. In the ideal game, the adversary is not shown the content of the bulletin board, and she is given the true credential of the coerced voter and can therefore cast real ballots for the coerced voter. However, a modified tally function does not count ballots for the coerced voter cast by the adversary if the coerced voter resists. Once the election phase is over, the adversary is shown only the tally result, not the tally proof.</p><p>The JCJ model does not work for the revoting setting where the coerced voter casts another ballot after casting the ballot under coercion. Achenbach et al. <ref type="bibr" target="#b0">[1]</ref> propose a variant in which the coerced voter acts after the adversary has cast his votes, revoting if she resists or doing nothing if she submits. Thereafter, the adversary is shown the new bulletin board and the resulting tally and proof. In the ideal model, the adversary is only provided the length of the bulletin board.</p><p>The model proposed by Achenbach et al. <ref type="bibr" target="#b0">[1]</ref> does not capture coercion resistance. Following the real/ideal paradigm, in the ideal game it should hold with overwhelming probability that the adversary cannot distinguish between a submitting and a resisting coerced voter. Then, the proof would show that the adversary cannot learn more in the real world than it could in the ideal world. However, in the ideal game proposed by Achenbach et al., the coercion resistance property does not hold. The adversary can always distinguish between these two cases by simply observing the length of the bulletin board (which increases by one ballot if the coerced voter revotes). Therefore, proofs in this model say nothing about whether the real scheme offers coercion resistance. The Achenbach et al. <ref type="bibr" target="#b0">[1]</ref> scheme seems to be coercion resistant, but coercion resistance does not follow from the proof in their model. Finally, the model by Achenbach et al. does not capture the leakage resulting from the state kept by the voter, or as in our protocol, by the polling authority. Our protocol deliberately hides the ballot counter from the voter, so that if the coercer coerces the voter again, it cannot determine whether the coerced voter re-voted based on this counter. Achenbach et al.'s model does not capture this property, as the coercer is not allowed to coerce a voter more than once.</p><p>A new coercion resistance definition. We propose a new game-based coercion resistance definition inspired by Bernhard et al.'s ballot privacy definition. The game tracks two bulletin boards, BB 0 and BB 1 , of which only one is accessible to the adversary (depending on the bit b). We ensure that regardless of the bit b, the same number of ballots are added to the bulletin board. The goal of the adversary is to determine b (see <ref type="figure">Figure 8</ref>). Recall that we assume that the PA, TS, and trustees are honest with respect to coercion resistance. We model honesty of the PBB (respectively, the use of an anonymous communication channel) by not revealing which voter posted to the bulletin board.</p><p>To model submits versus resists, we provide the adversary with an OvoteLR(i 0 , c 0 , i 1 , c 1 ) oracle to let voter i 0 , a "coerced" cast votes using any user by calling Ogettoken(i) to obtain a voting token τ for voter i on the board that it can see, and a token τ for the other board. It can then run β = Vote(τ, c) and β = Vote(τ , c) itself to create ballots for candidate c, on both boards and cast them using Ocast(β,β ). Note that per our assumptions, the adversary does not get access to the voter's means of authentication. Moreover, we require that the adversary always casts valid ballots to both boards (but the encoded candidate need not be the same).</p><p>Finally, the adversary can make one call to Otally() which performs the filtering step and returns the result r (always computed on BB 0 ) and the tally proof. The result of Filter is accessible using Oboard. To correct for leakage stemming from the tally result, as in the ballot privacy game, we simulate the filter and tally proofs if the adversary sees BB 1 . This game models all the coercion attacks applicable to VOTEAGAIN:</p><p>• The 1009 attack. The adversary casts a ballot as co- Definition 5. Consider a voting scheme V = (Setup, GetToken, Vote, Filter, VerifyFilter, Tally, Verify) for an electoral roll E and candidate list C . We say the scheme has coercion resistance if there exist algorithms SimFilter and SimTally such that for all probabilistic polynomial time adver-</p><formula xml:id="formula_25">saries A Pr Exp cr,0 A,V (, E,C ) = 1 − Pr Exp cr,1 A,V (, E,C ) = 1</formula><p>is a negligible function in .</p><p>In Appendix A, we prove the following theorem.</p><p>Theorem 2. VOTEAGAIN provides coercion resistance under the DDH assumption in the random oracle model.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="6.3">Verifiability</head><p>In  <ref type="bibr" target="#b11">[12]</ref>, our game does not model voter's intent, and assumes that the voting hardware, i.e., the device and software running Vote, is honest. We refer to Cortier et al. <ref type="bibr" target="#b12">[13]</ref> for a formal process-based computational model that does model verifiability with voter intent. We note that the correctness definition by Juels et al. <ref type="bibr" target="#b28">[29]</ref> was renamed to 'verifiability' by Cortier et al. <ref type="bibr" target="#b11">[12]</ref>, and therefore any model satisfying the latter also satisfies the former. In a nutshell, a voting scheme is verifiable <ref type="bibr" target="#b11">[12]</ref> if for n C corrupt voters, the result of the election always includes: (1) all votes by honest voters that verified whether their ballots were cast correctly, (2) at most n C corrupted votes, and (3) a subset of the votes by honest voters that did not check if their ballots were cast correctly. These conditions ensure that while a malicious bulletin board can drop ballots of voters that do not check, it can insert at most n C new votes.</p><p>Extending the current verifiability definition. We extend the definition presented by Cortier et al. <ref type="bibr" target="#b11">[12]</ref> for the revoting setting to explicitly consider the number of votes cast by a voter, see <ref type="figure" target="#fig_8">Figure 9</ref>. The PA is honest, but the adversary controls the bulletin board, the TS, and the trustees. The system implicitly tracks the number of tokens #tokens(i) that have been obtained by voter i. The game tracks when each voter is corrupted in a (initially empty) list of corruption events C, and tracks the honest votes in HVote. The adversary can call two oracles: Ovote(i,c) to request that honest voter i outputs a ballot for candidate c, and Ogettoken(i) to get a voting token for user i. This models both corruption and coercion of voter i. After a call to Ogettoken(i), voter i is considered corrupted until it casts an honest ballot using Ovote(i,c). Eventually, the adversary outputs a bulletin board BB, the selected votes S and proof Φ, the election outcome r ∈ R, and a tally proof Π (line 3). The adversary loses if Φ or Π do not verify (line 4). If it verifies, the adversary wins if the result does not satisfy the three intuitive conditions above.</p><p>The game computes the following groups of voters:</p><p>• Corrupted (line 6): voters considered corrupted, i.e., voters that were once corrupted (by calling Ogettoken) and thereafter never cast a checked honest vote.</p><p>• Checked (line 7): voters that verified a ballot and were not corrupted thereafter.</p><p>• Unchecked (line 8): voters that were never corrupted, but did not check their ballots either.</p><p>The game computes allowed candidates for honest voters:</p><p>• AllowedVotes[i] (line 9): A list of candidates that voter i honestly voted for in or after the last checked ballot. If voter i never checked a ballot, this list includes all candidates this voter ever voted for.</p><p>The adversary wins if the result r verifies but violates any of the following conditions (lines 10-13): (1) For each honest voter that verified a ballot and was not thereafter corrupted (i.e., voters in Checked) the result should include either the candidate in that ballot, or a candidate in a later ballot. This corresponds to the candidates {c V i } n V i=1 in the game. (2) Of the honest voters that did not check their ballots but were never corrupted (i.e., voters in Unchecked), at most one candidate that the honest voter voted for (in any ballot) can be included. This corresponds to the candidates {c U i } n U i=1 in the game. Note that n U can be smaller than |Unchecked| or in fact zero. (3) At most n C corrupted (or bad) votes were counted (i.e., the candidates {c B i } n B i=1 ). In the game, the sum of these choices is modeled by the tallying function ¯ A,V (, E,C ):</p><formula xml:id="formula_26">1 (pk, sk PA , sk TS , sk T ) ← Setup(1 , E,C ) 2 Set HVote ← / 0 and C ← / 0 3 (BB, S,Φ,r,Π) ← A O (pk, sk TS , sk T ) 4</formula><p>If VerifyFilter(BB, S,Φ) = ⊥ or Verify(BB S Φ, r, Π) = ⊥ return 0 5 Let Verified = {(i 1 , ctr 1 ), . . . , (i λ , ctr λ )} correspond to checked ballots.</p><formula xml:id="formula_27">6 Let Corrupted = {i | (i, ctr) ∈ C ∧ ∀(i, ctr ) ∈ Verified : ctr &lt; ctr} 7 Let Checked = {i | (i, _) ∈ Verified} \ Corrupted 8 Let Unchecked = {i | (i, _, _) ∈ HVote ∧ (i, _) ∈ C} \ Checked 9 Let AllowedVotes[i] = {c | (i, ctr, c) ∈ HVote s.t. ∀(i, ctr ) ∈ Verified : ctr ≥ ctr } 10 If ∃ c V 1 , . . . , c V n V s.t. c j ∈ AllowedVotes[i V j ] where Checked = {i V 1 , . . . , i V n V } 11 ∃ (i U 1 , c U 1 ), . . . , (i U n U , c U n U ) s.t. i U j ∈ Unchecked, c U j ∈ AllowedVotes[i U j ], i U j different 12 ∃ c B 1 , . . . , c B n B ∈ C s.t. 0 ≤ n B ≤ |Corrupted| 13 s.t. r = ¯ ρ({c V i } n V i=1 ) R ¯ ρ({c U i } n U i=1 ) R ¯ ρ({c B i } n B i=1 ) 14</formula><p>Then return 0, otherwise return 1</p><p>Ovote(i,c):</p><formula xml:id="formula_28">Let τ = GetToken(i) Add (i, #tokens(i), c) to HVote Return Vote(τ, c)</formula><p>Ogettoken(i): A,V , the adversary A has access to the oracles O = {Ogettoken, Ovote}.</p><formula xml:id="formula_29">Let τ = GetToken(i) Add (i,</formula><p>partial tallying, i.e., for any two lists S 1 and S 2 we have that</p><formula xml:id="formula_30">¯ ρ(S 1 ∪S 2 ) = ¯ ρ(S 1 ) R ¯ ρ(S 2 )</formula><p>for a commutative binary operator R : R × R → R. Note that a tally function that outputs the number of votes per candidate naturally admits partial tallying.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Definition 6. Consider a voting scheme V = (Setup,</head><p>GetToken, Vote, Filter, VerifyFilter, Tally, Verify) for an electoral roll E and candidate list C . We say the scheme is verifiable if for all probabilistic polynomial time adversary A Pr</p><formula xml:id="formula_31">Exp ver,0 A,V (, E,C ) = 1 − Pr Exp ver,1 A,V (, E,C ) = 1</formula><p>is a negligible function in .</p><p>In the extended version of this paper <ref type="bibr" target="#b30">[31]</ref>, we prove the following theorem.</p><p>Theorem 3. VOTEAGAIN is verifiable under the DDH assumption in the random oracle model.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="7">Performance Evaluation</head><p>We evaluate the performance of VOTEAGAIN using a Python prototype implementation of its core cryptographic operations. <ref type="bibr" target="#b1">2</ref> We did not implement the GetToken protocol, but we note that as it relies on standard cryptography it can be implemented easily and cheaply; nor did we implement the bulletin board as it is not core to our design. We use the petlib <ref type="bibr" target="#b13">[14]</ref> binding to OpenSSL for the group operations using the fast NIST P-256 curve. We ran all experiments in Linux on a single core of an Intel i3-8100 processor running at 3.60GHz. We expect nation-wide elections to have much more processing power available. For example, the Swiss CHVote system, which aims to support 8 million voters, has around 32 cores available per party in the system. We also include performance estimates of running the system on a large machine with 8 Intel Xeon Platinum 8280L processors with 28 cores each, running at 2.7Ghz. As our scheme is almost completely parallelizable (only the hash functions for the non-interactive zero-knowledge proofs need to be computed sequentially), we estimate a 90% parallelization gain: a speedup of 170 times when using the 8x28 cores with respect to the single core.</p><p>For all experiments we empirically select the best cover size k by sweeping over values from 1 to 64. In the majority of cases the optimal k is in the range <ref type="bibr" target="#b1">[2,</ref><ref type="bibr" target="#b3">4]</ref>.</p><p>Creating a ballot. We use an ElGamal ciphertext to encrypt the voter's choice, and a Bayer and Groth <ref type="bibr" target="#b4">[5]</ref> zero-knowledge proof of membership to show that the selected candidate is eligible. Creating a ballot from 1000 eligible candidates costs 1.2 seconds, while verifying its correctness costs 0.17 seconds. The size of this proof is 1.5 kB.</p><p>Impact of revoting. <ref type="figure">Figure 10</ref> shows the overhead depending on the number of votes, in terms of number of dummies per real ballot. This overhead influences the computation time of shuffling and filtering in the tally phase. In the leftmost figure we model users' revoting behaviour as a percentage of the number of voters: 50% models that half of the voters revoted once, and 200% models that all voters revote twice. We note that the overhead of 100% voters revoting once is equivalent to, for example, 25% of the voters revoting 4 times. As expected, the overhead increases with both the number of voters and the number of revoted ballots. However, even for 100 million voters revoting twice (200% revotes), the overhead is at most a factor of 32 <ref type="figure">(Figure 10 left)</ref>.</p><p>Casting a vote takes time. Thus, revoting patterns are constrained by the number of ballots that can be cast during an election. We consider an election period of 24h (larger than most countries), and bound how often a single voter can vote <ref type="bibr" target="#b9">10</ref>   (1 ballot per second, per ten seconds, and per minute). As this limits the number of voters with a large amount of ballots, we do not need large covers, reducing the overhead (see <ref type="figure">Fig- ure 10, center)</ref>. Similarly, assuming that all voters will revote is very conservative. In a normal election one expects the vast majority of voters to vote once. In <ref type="figure">Figure 10</ref>, right, we show the overhead when the number of voters that cast more than one vote is limited. As fewer voters revote, the total amount of votes is smaller and so are the covers.</p><p>Filtering. We implemented a non-optimized version of BayerGroth's verifiable shuffle protocol <ref type="bibr" target="#b3">[4]</ref> to implement steps 3 and 6 of Procedure 5. We measure the execution time of filtering and verifying, when varying the number of voters. <ref type="figure" target="#fig_9">Figure 11</ref> left shows the times to run Filter and VerifyFilter on a single core machine. <ref type="figure" target="#fig_9">Figure 11</ref> middle shows the estimated processing times on the big 8 processor Xeon machine. We estimate that the 8 processor machine can filter and tally the second round presidential election in Brazil (147 million registered voters) in 65 minutes if no voter revotes, and within 11 hours assuming 50% extra ballots and at most one ballot per voter per ten seconds. We note that elections usually tally ballots per state, city, or smaller electoral district. In general we expect the number of ballots to be much smaller. All ballot groups in <ref type="figure" target="#fig_9">Figure 11</ref> left and center have size one. <ref type="figure" target="#fig_9">Figure 11</ref> right shows the effect of larger ballot groups resulting from revoting and dummy voters. As the average group size increases, the computation time goes down. Therefore, <ref type="figure" target="#fig_9">Figure 11</ref> gives an upper bound on the processing time, given a known cover size.</p><p>For comparison we computed a lower bound on the filter cost of Achenbach et al.'s filter method by counting the number of group operations needed per ballot. We used this number to compute the estimate in <ref type="figure" target="#fig_9">Figure 11</ref> left. A smalltown election with 100.000 ballots takes 5 core months to filter in their scheme. Even on the large Xeon machine, an election with 1 million ballots takes over four months to complete. Our method needs respectively 7 core minutes and 30 seconds. The sizes of the tally proofs in VOTEAGAIN for these examples are 54 and 501 MB respectively.</p><p>Smaller regions. Many countries report election results per region, such as a province, a city, or a neighborhood. In those cases, results can be computed per region at lower computation cost. However, even in this setting, Achenbach et al.'s quadratic approach scales poorly. We note that the allowable size of reporting regions depend on local regulations, with the smallest regions likely being cities or neighborhoods, which can easily total 100.000s of voters. As <ref type="figure" target="#fig_9">Figure 11</ref> (left) shows, even in this configuration, Achenbach et al.'s quadratic approach requires 3 to 4 orders of magnitude more computation resources than VOTEAGAIN.</p><p>Tallying. We also measured the execution time of a single step of the mix network -a single shuffle and one verifiable decryption -using our verifiable shuffle implementation. Our results show that one step is a factor of three times faster than our filter protocol, e.g., mix-and-decrypting the 100.000 ballots takes less than 2 core minutes and 1 million ballots take less than 7 seconds on the Xeon machine.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="8">Conclusion</head><p>Due to its complexity and cost, coercion resistance has been often overlooked in remote voting schemes. We introduced VOTEAGAIN, a revoting scheme that enables cleartext filtering thanks to efficient deterministic padding. VOTEAGAIN does not require users to store cryptographic material, and can efficiently handle millions of votes. We provided a new coercion resistance definition and updated existing definitions for ballot privacy and verifiability to the revoting setting. We have proven that VOTEAGAIN satisfies all of them.</p></div><figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_1"><head>Figure 2 :</head><label>2</label><figDesc>Figure 2: The original ballots' groups ( ) create distinguishable situations. Adding 2 dummy voters casting a total of 4 dummy ballots ( ), the situations become indistinguishable.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_2"><head>Figure 3 :</head><label>3</label><figDesc>Figure 3: Filtering process by tally server including dummies. Labels as in Figure 1. To enable correctness proofs, the TS tags real ballots and dummy ballots with an encrypted marker ( ).</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_3"><head></head><label></label><figDesc>Figure 4: Election phase: Overview.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_4"><head>Procedure 4 (Figure 5 :</head><label>45</label><figDesc>Figure 5: Tally phase: Overview</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_5"><head>Figure 7 :</head><label>7</label><figDesc>Figure 7: In the ballot privacy experiment Exp bpriv,b A,V , the adversary A has access to the oracles O = {OvoteLR, Ocast,Oboard,Otally}. The adversary controls the TS and the PA. It can call Otally only once.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_6"><head></head><label></label><figDesc>erced voter i 0 using τ, τ = Ogettoken(i 0 ), β = Vote(τ, c), β = Vote(τ , c) and then Ocast(β,β ) 1009 times. (Both boards now contain 1009 ballots by voter i 0 .) Then it calls OvoteLR(i 0 , c, i 1 , c). If b = 0 the coerced voter revotes for candidate c on BB 0 , otherwise it does not, and the alternative voter casts a ballot for candidate c on BB 1 visible to the adversary. Note that if the result of Filter Φ reveals the size of a group of ballots, the adver- sary can win this game (SimFilter does not model this leakage as it only gets n B and r as input). • Returning coercer. Let voter i 0 be the coerced voter. First the coercer runs τ, τ = GetToken(i 0 ), β = Vote(τ, c) and β = Vote(τ , c), and Ocast(β,β ) to cast one vote as the coerced user on both boards and to observe the token τ corresponding to the board BB b it can see. Then it runs OvoteLR(i 0 , c 0 , i 1 , c 1 ), causing i 0 to cast a vote on the bulletin board BB b if b = 0, and i 1 to casts a vote on BB b if b = 1. Thereafter, it can examine the state by running τ, τ = GetToken(i 0 ) again. If the new token τ leaks whether voter i 0 voted again (on board BB b ), then the adversary wins the coercion resistance game.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_7"><head>ρ</head><label></label><figDesc>: C * → R that maps the voter's choices in C to an election result in R. This function should support USENIX Association 29th USENIX Security Symposium 1565 0 Exp ver,b</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_8"><head>Figure 9 :</head><label>9</label><figDesc>Figure 9: In the verifiability game experiment Exp ver,b</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_9"><head>Figure 11 :</head><label>11</label><figDesc>Figure 11: Cost of Filter and VerifyFilter: Measured cost on single core (left); estimated cost on 8 processor machine (8 × 28 cores, center); and effect of different distributions of 50 000 ballots (including dummies) among voters (right). Note that one ballot per voter causes the highest processing time.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_0" validated="false"><head>Table 1 : Comparison of different voting schemes.</head><label>1</label><figDesc></figDesc><table></table></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_1" validated="true"><head>Table 2 : Comparison of assumptions in pre-election phase and election phase required to mitigate coercion attacks in fake credentials and revoting-based systems.</head><label>2</label><figDesc></figDesc><table>Assumptions 
Fake Credentials Revoting 

Pre-election phase 

No coercion 

N/A 

Inalienable authentication 

N/A 

Election phase 

Lie convincingly 



Coercer absent at some point 


during election 

Absence of coercer after 


coercion 

Device holding voting secrets or 


need to remember special pwds 

Inalienable authentication 



</table></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_2" validated="true"><head>Table 3 : Trust assumptions on VOTEAGAIN entities to achieve each property.</head><label>3</label><figDesc></figDesc><table>Ballot Privacy Verifiability Coercion resistance 

PA 
Untrusted 
Trusted 
Trusted 
TS 
Untrusted 
Untrusted 
Trusted 
PBB 
Untrusted 
Untrusted 
Trusted 
Trustees 
k-out-of-t 
Untrusted 
Untrusted 

</table></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_4" validated="true"><head>Table 4 : Summary of notation.</head><label>4</label><figDesc></figDesc><table>Symbol 
Description 

(G, g, p) 
Group, generator and prime order 
Z p 
Integers modulo the group order p 

N 
Number of eligible voters 
t, k 
Number of trustees and decryption threshold 
pk PA , pk TS , pk T 
Public keys of PA, TS, and trustees 
sk PA , sk TS , sk T,i Private keys of PA, TS, and trustee i 

vid i , m i 
Voter identifier and ballot index of voter i 
γ, I 
The encrypted vid and ballot index 

pk, sk 

Ephemeral signing keys 
τ, σ τ 
Ephemeral voting token and signature by PA 
β, σ 
Ballot and signature using ephemeral key pk 
v, π 
Encrypted vote and zero knowledge proof of 
correct encryption 

n B , n D 
Number of real and dummy ballots on the board 
θ, θ R , θ D 
Ballot tags for unknown, real, and dummy ballots 
vid i , m i 
Decrypted voter identifier and ballot index 
π dec 
i , π sel 

i 

Zero knowledge proof of correct decryption 
and vote selection 
V i 
Selected vote for group i 
r 
Election result 
Φ, Π 
Full filter and tally proofs 

random token index m i for each of the voters to enable the 
selection of the last ballot per voter. More formally: 

</table></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_5" validated="false"><head>1 .</head><label>1</label><figDesc></figDesc><table>The PBB initializes the bulletin board, and adds the list 

of candidates C to the bulletin board. 
2. The PA stores the electoral roll E. Let N be the number 

of eligible voters on the electoral roll. The PA generates 
a random and unique voter identifier vid i ∈ G and ballot 

index m i ∈ {2 −2 , . . . , 2 −1 − 1} for each voter V i on 

the electoral roll and stores them internally. Finally, the 
PA generates a public-private key-pair (pk PA , sk PA ) = 
Sig.Keygen(1 ) to sign tokens. It publishes pk PA . 
3. The TS generates a public-private ElGamal key-pair 
(pk TS , sk TS ) = EC.KeyGen(G, g, p). It publishes pk TS . 
4. The trustees run Vote.DKeyGen(1 , k,t, |C |) to generate 
a public encryption key pk T and decryption keys sk T,i 
</table></figure>

			<note place="foot" n="1"> Revoting is possible, but revotes are not deniable. JCJ instead achieves coercion resistance using fake authentication credentials.</note>

			<note place="foot" n="2"> The code is open source and can be found here: https://github.com/ spring-epfl/voteagain.</note>
		</body>
		<back>

			<div type="acknowledgement">
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Acknowledgments</head><p>Iñigo Querejeta-Azurmendi was supported by Ministerio de Economía, Industria y Competitividad (MINECO), Agencia Estatal de Investigación (AEI), and European Regional Development Fund (ERDF, EU), through project COPCIS, grant no. TIN2017-84844-C2-1-R.</p></div>
			</div>

			<div type="annex">
<div xmlns="http://www.tei-c.org/ns/1.0"><head>A Proof of Coercion Resistance</head><p>Proof of theorem 2. We first specify how to construct SimTally and SimFilter. As in the ballot privacy proof, SimTally(BB, r) simply simulates the proof of shuffle and the proof of correct decryption in Tally, so that regardless of the values in S, r is the correct outcome.</p><p>The algorithm SimFilter(BB, n B , r) proceeds similarly. It takes as input the bulletin board BB, which it uses to determine the number of ballots n B , the number of registrations n B , and the result r. Moreover, it derives the number of real voters n using r. It uses these data to compute the cover, and it adds the correct number of dummy ballots (for these, it sets γ and I to random ciphertexts) to obtain B . Then it computes a list of zero ciphertexts (encryptions of zero) of equal length, and simulates the shuffle proof π σ . It then generates fake voter identifiers vid and m corresponding to the cover it computed earlier, associates these to shuffled ballot β i , and simulates the proofs π dec i . Next, for each resulting group, it generates a random encryption of zero V j = Vote.ZEnc(pk T , r j ) and simulates the corresponding proof π sel j . Then, it returns the randomness r j and the indices of the dummy voters corresponding to the cover it computed early. Finally, for each remaining vote, it generates a random V j and simulates the shuffle proof π σ . In this proof, we will step by step replace all the ciphertexts that depend on the bit b by random ciphertexts. In particular, we first show that the adversary learns nothing about b during the election phase. We then show that it also learns nothing about b during the tally phase. The result follows.</p><p>(Note that contrary to the proof of ballot privacy we do not fix the value for b.) Game G 2 . Game G 2 is as game G 1 , but we compute the result directly based on the ballots on BB 0 . Let [β 1 , . . . , β n B ] be the list of ballots where</p><p>, and m i = EC.Dec(sk TS , I i ). Then compute the result:</p><p>As per strong consistency, games G 2 and G 1 are indistinguishable. Game G 3 . Game G 3 is as game G 2 , but with all the zeroknowledge proofs replaced by simulations. This includes the shuffle proof π σ , the decryption proofs of π dec i of the shuffled γ i and I i s, the reencryption proofs π sel i , and the shuffle proof π σ produced in Filter; as well as the tally proof Π 0 which we replace by the output of SimTally(BB 0 , r). We use the random oracle to simulate this step, which is indistinguishable by the simulatability of the zero-knowledge proof system. Game G 4 . Game G 4 is as game G 3 but we do not decrypt the γ i and I i anymore when running Filter. Instead, we proceed as follows. All ballots</p><p>on the bulletin boards are valid. Hence, σ i is a valid signature by PA 0 resp. PA 1 on γ i and I i . Since the signature scheme is unforgeable, we know these ciphertexts were created by PA 0 resp. PA 1 . Hence, we can associate to them the corresponding plaintexts vid i and m i . Moreover, we know the permutation used by the TS during Filter, so we can also provide the correct plaintexts in step 4 of Filter on BB 0 (recall the proofs of decryption π dec i are already simulated). Game G 5 . Game G 5 is as game G 4 , but we replace the ciphertexts γ i and I i in the token τ i by random ciphertexts for all tokens. Similarly, we replace the γ i and I i ciphertexts for the dummy ballots by random ciphertexts. Note that per the change in game G 4 we still associate the correct plaintexts vid i and m i in the Filter protocol. A hybrid argument with reductions to the CPA security of the ElGamal encryption scheme shows that games G 5 and G 4 are indistinguishable. This reduction is possible since we no longer need to decrypt these ciphertexts. Game G 6 . Game G 6 is as game G 5 , but we replace the encrypted votes v i in the OvoteLR() call by encryptions of the zero vector, i.e., v i = Vote.ZEnc(pk T , r) for a uniformly random randomizer r. As in the ballot privacy proof, a hybrid argument with a reduction to the NM-CPA security of the ElGamal encryption scheme with zero-knowledge proof shows that games G 6 and G 5 are indistinguishable.</p><p>Note that in this reduction we use the Odec of the NM-CPA challenger to decrypt votes in the adversary-determined ballots before computing the result r.</p><p>Note that as of game G 6 , the adversary's view of the bulletin board before calling Otally() is independent of the value of b. (The ballots resulting from the OvoteLR call also contain a random ephemeral public key pk and the signatures σ τ and σ, but these are also independent of the actual voter selected.)</p><p>We now proceed to show that the adversary also cannot learn anything from the output of Filter. Notice that, regardless of the value of b, the filter step is computed with the same number of voters ν, the same number of ballots n B and the same number of obtained tokens n B . Therefore, the output of Filter applied to BB 0 and that of SimFilter applied to BB 1 should be indistinguishable. In the following game steps we replace the ciphertexts after shuffling by zero-ciphertexts and show that these steps are indistinguishable for the adversary.</p><p>Game G 7 . Game G 7 is the same as game G 6 , but we replace the ciphertexts γ i , I i and θ i after shuffling by random encryptions of zero. We proceed as if they still decrypt to the correct values. Note that we already simulate the shuffle proof and decryption proofs. Again, a hybrid argument with reductions to the CPA security of the ElGamal encryption scheme shows that the games G 7 and G 6 are indistinguishable. This reduction is possible since we no longer need to decrypt these ciphertexts. Game G 8 . Game G 8 is the same as game G 7 , but we replace the shuffled encrypted votes v i by random encryptions of zero. Similarly, we replace the randomizations, R, of the votes corresponding to dummy voters by the corresponding new randomization. This causes the pre-selected votes V j per group to be incorrect, but this does not matter as we simulate the second shuffle proof, π σ , anyway. As before, the indistinguishability of this step follows from the NM-CPA security of the vote encryption scheme. Game G 9 . Game G 9 is the same as game G 9 , but we replace the second shuffled votes V j by random encryption of zero. This causes the selected votes V j after the shuffle to be incorrect with respect to the result, but this does not matter as we simulate the proof of the tally. As before, the indistinguishability of this step follows from the NM-CPA security of the vote encryption scheme. <ref type="bibr">Game G 10</ref> . Game G 10 is as game G 8 , but we replace the filter and tally proofs on BB 0 by simulations: we set (S 0 , Φ 0 ) ← SimFilter(BB 0 , n B , r) and Π 0 ← SimTally(BB 0 , r). Note that this difference is purely syntactic, as per the changes we made before, we already computed exactly the output of SimFilter on BB 0 and the result r.</p><p>Clearly the resulting view is independent of b. And coercion resistance follows.</p></div>			</div>
			<div type="references">

				<listBibl>

<biblStruct xml:id="b0">
	<analytic>
		<title level="a" type="main">Improved Coercion-Resistant Electronic Elections through Deniable Re-Voting</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Dirk</forename><surname>Achenbach</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Carmen</forename><surname>Kempka</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Bernhard</forename><surname>Löwe</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Jörn</forename><surname>Müller-Quade</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">USENIX Journal of Election Technology and Systems</title>
		<imprint>
			<biblScope unit="issue">2</biblScope>
			<date type="published" when="2015" />
		</imprint>
	</monogr>
	<note>JETS</note>
</biblStruct>

<biblStruct xml:id="b1">
	<analytic>
		<title level="a" type="main">Helios: Web-based Open-audit Voting</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Ben</forename><surname>Adida</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">USENIX</title>
		<imprint>
			<date type="published" when="2008" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b2">
	<analytic>
		<title level="a" type="main">Remote Electronic Voting Can Be Efficient, Verifiable and Coercion-Resistant</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Roberto</forename><surname>Araújo</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Amira</forename><surname>Barki</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Solenn</forename><surname>Brunet</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Jacques</forename><surname>Traoré</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">VOTING</title>
		<imprint>
			<date type="published" when="2016" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b3">
	<analytic>
		<title level="a" type="main">Efficient zeroknowledge argument for correctness of a shuffle</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Stephanie</forename><surname>Bayer</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Jens</forename><surname>Groth</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">EUROCRYPT</title>
		<imprint>
			<date type="published" when="2012" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b4">
	<analytic>
		<title level="a" type="main">Zero-knowledge argument for polynomial evaluation with application to blacklists</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Stephanie</forename><surname>Bayer</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Jens</forename><surname>Groth</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">EUROCRYPT</title>
		<imprint>
			<date type="published" when="2013" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b5">
	<analytic>
		<title level="a" type="main">Sok: A comprehensive analysis of game-based ballot privacy definitions</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">David</forename><surname>Bernhard</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Véronique</forename><surname>Cortier</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">David</forename><surname>Galindo</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Olivier</forename><surname>Pereira</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Bogdan</forename><surname>Warinschi</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">S&amp;P</title>
		<imprint>
			<date type="published" when="2015" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b6">
	<analytic>
		<title level="a" type="main">Running mixnet-based elections with helios</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Philippe</forename><surname>Bulens</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Damien</forename><surname>Giry</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Olivier</forename><surname>Pereira</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">EVT/WOTE</title>
		<imprint>
			<date type="published" when="2011" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b7">
	<analytic>
		<title level="a" type="main">Trivitas: Voters Directly Verifying Votes</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Sergiu</forename><surname>Bursuc</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Gurchetan</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Grewal</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Mark D Ryan</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">VOTE-ID</title>
		<imprint>
			<date type="published" when="2012" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b8">
	<analytic>
		<title level="a" type="main">Efficient Group Signature Schemes for Large Groups (Extended Abstract)</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Jan</forename><surname>Camenisch</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Markus</forename><surname>Stadler</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">CRYPTO</title>
		<imprint>
			<date type="published" when="1997" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b9">
	<analytic>
		<title level="a" type="main">Selections: Internet Voting with Over-the-Shoulder Coercion-Resistance</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Jeremy</forename><surname>Clark</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Urs</forename><surname>Hengartner</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">FC</title>
		<imprint>
			<date type="published" when="2012" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b10">
	<analytic>
		<title level="a" type="main">Civitas: Toward a secure voting system</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Michael</forename><forename type="middle">R</forename><surname>Clarkson</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Stephen</forename><surname>Chong</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Andrew</forename><forename type="middle">C</forename><surname>Myers</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">S&amp;P</title>
		<imprint>
			<date type="published" when="2008" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b11">
	<analytic>
		<title level="a" type="main">Election Verifiability for Helios under Weaker Trust Assumptions</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Véronique</forename><surname>Cortier</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">David</forename><surname>Galindo</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Stéphane</forename><surname>Glondu</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Malika</forename><surname>Izabachène</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">ESORICS</title>
		<imprint>
			<date type="published" when="2014" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b12">
	<analytic>
		<title level="a" type="main">SoK: Verifiability Notions for E-Voting Protocols</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Véronique</forename><surname>Cortier</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">David</forename><surname>Galindo</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Ralf</forename><surname>Küsters</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Johannes</forename><surname>Müller</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Tomasz</forename><surname>Truderung</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">S&amp;P</title>
		<imprint>
			<date type="published" when="2016" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b13">
	<monogr>
		<title level="m" type="main">Petlib: A python library that implements a number of privacy enhancing technolgies</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">George</forename><surname>Danezis</surname></persName>
		</author>
		<ptr target="https://github.com/gdanezis/petlib.Accessed" />
		<imprint>
			<date type="published" when="2020-06-22" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b14">
	<monogr>
		<title level="m" type="main">e-governance / i-voting</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Official E Estonia Website</surname></persName>
		</author>
		<ptr target="https://e-estonia.com/solutions/e-governance/i-voting/" />
		<imprint>
			<date type="published" when="2014-05-21" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b15">
	<analytic>
		<title level="a" type="main">Cobra: Toward concurrent ballot authorization for internet voting</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Aleksander</forename><surname>Essex</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Jeremy</forename><surname>Clark</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Urs</forename><surname>Hengartner</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">EVT/WOTE</title>
		<imprint>
			<date type="published" when="2012" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b16">
	<analytic>
		<title level="a" type="main">How to Prove Yourself: Practical Solutions to Identification and Signature Problems</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Amos</forename><surname>Fiat</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Adi</forename><surname>Shamir</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">CRYPTO</title>
		<imprint>
			<date type="published" when="1986" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b17">
	<analytic>
		<title level="a" type="main">A Decentralized Public Key Infrastructure with Identity Retention</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Conner</forename><surname>Fromknecht</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Dragos</forename><surname>Velicanu</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Sophia</forename><surname>Yakoubov</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Cryptology ePrint Archive</title>
		<imprint>
			<date type="published" when="2014" />
		</imprint>
	</monogr>
<note type="report_type">Report</note>
</biblStruct>

<biblStruct xml:id="b18">
	<analytic>
		<title level="a" type="main">Decentralized Anonymous Credentials</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Christina</forename><surname>Garman</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Matthew</forename><surname>Green</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Ian</forename><surname>Miers</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">NDSS</title>
		<imprint>
			<date type="published" when="2014" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b19">
	<monogr>
		<title level="m" type="main">Apollo -End-to-end verifiable internet voting with recovery from vote manipulation</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Dawid</forename><surname>Gaweł</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Maciej</forename><surname>Kosarzecki</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Poorvi</forename><forename type="middle">L</forename><surname>Vora</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Hua</forename><surname>Wu</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Filip</forename><surname>Zagórski</surname></persName>
		</author>
		<editor>E-VOTE-ID</editor>
		<imprint>
			<date type="published" when="2016" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b20">
	<monogr>
		<title level="m" type="main">Analysis of an Internet Voting Protocol. Cryptology ePrint Archive</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Kristian</forename><surname>Gjøsteen</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2010" />
		</imprint>
	</monogr>
<note type="report_type">Report</note>
</biblStruct>

<biblStruct xml:id="b21">
	<analytic>
		<title level="a" type="main">The Knowledge Complexity of Interactive Proof-systems</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Goldwasser</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><surname>Micali</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Rackoff</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">STOC</title>
		<imprint>
			<date type="published" when="1985" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b22">
	<analytic>
		<title level="a" type="main">Multiple Cast in Online Voting -Analyzing Chances</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Rüdiger</forename><surname>Grimm</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Melanie</forename><surname>Volkamer</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Electronic Voting</title>
		<imprint>
			<date type="published" when="2006" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b23">
	<analytic>
		<title/>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Rolf</forename><surname>Haenni</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Reto</forename><forename type="middle">E</forename><surname>Koenig</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Philipp</forename><surname>Locher</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Eric</forename><surname>Dubuis</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">CHVote System Specification. Cryptology ePrint Archive</title>
		<imprint>
			<date type="published" when="2017" />
		</imprint>
	</monogr>
<note type="report_type">Report</note>
</biblStruct>

<biblStruct xml:id="b24">
	<analytic>
		<title level="a" type="main">The Append-Only Web Bulletin Board</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">James</forename><surname>Heather</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">David</forename><surname>Lundin</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Formal Aspects in Security and Trust</title>
		<imprint>
			<date type="published" when="2009" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b25">
	<analytic>
		<title level="a" type="main">Verifiable internet voting in Estonia</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Sven</forename><surname>Heiberg</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Jan</forename><surname>Willemson</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">6th International Conference on Electronic Voting: Verifying the Vote (EVOTE)</title>
		<imprint>
			<publisher>IEEE</publisher>
			<date type="published" when="2014" />
			<biblScope unit="page" from="1" to="8" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b26">
	<monogr>
				<ptr target="https://www.ecp.gov.pk/ivoting/IVTF%20Report%20Executive%20Version%201.5%20Final.pdf" />
		<title level="m">Internet Voting Task Force. Findings and assessment report of Internet Voting Task Force (IVTF) on voting rights of overseas Pakistanis</title>
		<imprint>
			<date type="published" when="2018" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b27">
	<analytic>
		<title level="a" type="main">Making mix nets robust for electronic voting by randomized partial checking</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Markus</forename><surname>Jakobsson</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Ari</forename><surname>Juels</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Ronald</forename><forename type="middle">L</forename><surname>Rivest</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">USENIX Security Symposium</title>
		<imprint>
			<date type="published" when="2002" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b28">
	<analytic>
		<title level="a" type="main">Coercion-resistant electronic elections</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Ari</forename><surname>Juels</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Dario</forename><surname>Catalano</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Markus</forename><surname>Jakobsson</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">WPES</title>
		<imprint>
			<date type="published" when="2005" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b29">
	<analytic>
		<title level="a" type="main">Coercion-Resistant Internet Voting with Everlasting Privacy</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Philipp</forename><surname>Locher</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Rolf</forename><surname>Haenni</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Reto E</forename><surname>Koenig</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">FC</title>
		<imprint>
			<date type="published" when="2016" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b30">
	<monogr>
		<title level="m" type="main">VoteAgain: A scalable coercion-resistant voting system</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Wouter</forename><surname>Lueks</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Iñigo</forename><surname>Querejeta-Azurmendi</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Carmela</forename><surname>Troncoso</surname></persName>
		</author>
		<ptr target="https://arxiv.org/abs/2005.11189" />
		<imprint>
			<date type="published" when="2020" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b31">
	<monogr>
		<title level="m" type="main">Corruption and coercion: The year in elections</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Pippa</forename><surname>Norris</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Thomas</forename><surname>Wynter</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Sarah</forename><surname>Cameron</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2017" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b32">
	<analytic>
		<title level="a" type="main">Using re-voting to reduce the threat of coercion in elections</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Gerald</forename><forename type="middle">V</forename><surname>Post</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Electronic Government</title>
		<imprint>
			<biblScope unit="volume">7</biblScope>
			<biblScope unit="issue">2</biblScope>
			<biblScope unit="page" from="168" to="182" />
			<date type="published" when="2010" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b33">
	<analytic>
		<title level="a" type="main">Prêt à voter: a voter-verifiable voting system</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><forename type="middle">Y A</forename><surname>Ryan</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Bismark</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Heather</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Schneider</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Z</forename><surname>Xia</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE Transactions on Information Forensics and Security</title>
		<imprint>
			<biblScope unit="volume">4</biblScope>
			<biblScope unit="issue">4</biblScope>
			<biblScope unit="page" from="662" to="673" />
			<date type="published" when="2009-12" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b34">
	<analytic>
		<title level="a" type="main">Selene: Voting with Transparent Verifiability and Coercion-Mitigation</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Y A</forename><surname>Peter</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Ryan</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Vincenzo</forename><surname>Peter B Rønne</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Iovino</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Financial Cryptography Workshop VOTING</title>
		<imprint>
			<date type="published" when="2015" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b35">
	<monogr>
		<title level="m" type="main">Fully Verifiable and Secure Online Voting</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Scytl</surname></persName>
		</author>
		<ptr target="https://www.scytl.com/en/online-voting-technology-security/" />
		<imprint>
			<date type="published" when="2018" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b36">
	<analytic>
		<title level="a" type="main">New cryptographic election protocol with best-known theoretical properties</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">W</forename><forename type="middle">D</forename><surname>Smith</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Workshop Frontiers in Electronic Elections (FEE)</title>
		<imprint>
			<date type="published" when="2005" />
		</imprint>
	</monogr>
</biblStruct>

				</listBibl>
			</div>
		</back>
	</text>
</TEI>
