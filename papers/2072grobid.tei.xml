<?xml version="1.0" encoding="UTF-8"?>
<TEI xmlns="http://www.tei-c.org/ns/1.0" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
xsi:schemaLocation="http://www.tei-c.org/ns/1.0 /Users/atharsefid/Desktop/grobid-0.5.3/grobid-home/schemas/xsd/Grobid.xsd"
 xmlns:xlink="http://www.w3.org/1999/xlink">
	<teiHeader xml:lang="en">
		<encodingDesc>
			<appInfo>
				<application version="0.5.3" ident="GROBID" when="2020-09-29T02:25+0000">
					<ref target="https://github.com/kermitt2/grobid">GROBID - A machine learning software for extracting information from scholarly documents</ref>
				</application>
			</appInfo>
		</encodingDesc>
		<fileDesc>
			<titleStmt>
				<title level="a" type="main">A Retargetable System-Level DBT Hypervisor A Retargetable System-Level DBT Hypervisor</title>
			</titleStmt>
			<publicationStmt>
				<publisher/>
				<availability status="unknown"><licence/></availability>
				<date>July 10-12, 2019</date>
			</publicationStmt>
			<sourceDesc>
				<biblStruct>
					<analytic>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Tom</forename><surname>Spink</surname></persName>
							<affiliation key="aff0">
								<orgName type="institution" key="instit1">University of Edinburgh</orgName>
								<orgName type="institution" key="instit2">University of Edinburgh</orgName>
								<orgName type="institution" key="instit3">University of Edinburgh</orgName>
								<orgName type="institution" key="instit4">University of Edinburgh</orgName>
							</affiliation>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Harry</forename><surname>Wagstaff</surname></persName>
							<affiliation key="aff0">
								<orgName type="institution" key="instit1">University of Edinburgh</orgName>
								<orgName type="institution" key="instit2">University of Edinburgh</orgName>
								<orgName type="institution" key="instit3">University of Edinburgh</orgName>
								<orgName type="institution" key="instit4">University of Edinburgh</orgName>
							</affiliation>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Björn</forename><surname>Franke</surname></persName>
							<affiliation key="aff0">
								<orgName type="institution" key="instit1">University of Edinburgh</orgName>
								<orgName type="institution" key="instit2">University of Edinburgh</orgName>
								<orgName type="institution" key="instit3">University of Edinburgh</orgName>
								<orgName type="institution" key="instit4">University of Edinburgh</orgName>
							</affiliation>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Tom</forename><surname>Spink</surname></persName>
							<affiliation key="aff0">
								<orgName type="institution" key="instit1">University of Edinburgh</orgName>
								<orgName type="institution" key="instit2">University of Edinburgh</orgName>
								<orgName type="institution" key="instit3">University of Edinburgh</orgName>
								<orgName type="institution" key="instit4">University of Edinburgh</orgName>
							</affiliation>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Harry</forename><surname>Wagstaff</surname></persName>
							<affiliation key="aff0">
								<orgName type="institution" key="instit1">University of Edinburgh</orgName>
								<orgName type="institution" key="instit2">University of Edinburgh</orgName>
								<orgName type="institution" key="instit3">University of Edinburgh</orgName>
								<orgName type="institution" key="instit4">University of Edinburgh</orgName>
							</affiliation>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Björn</forename><surname>Franke</surname></persName>
							<affiliation key="aff0">
								<orgName type="institution" key="instit1">University of Edinburgh</orgName>
								<orgName type="institution" key="instit2">University of Edinburgh</orgName>
								<orgName type="institution" key="instit3">University of Edinburgh</orgName>
								<orgName type="institution" key="instit4">University of Edinburgh</orgName>
							</affiliation>
						</author>
						<title level="a" type="main">A Retargetable System-Level DBT Hypervisor A Retargetable System-Level DBT Hypervisor</title>
					</analytic>
					<monogr>
						<title level="m">Proceedings of the 2019 USENIX Annual Technical Conference</title>
						<meeting>the 2019 USENIX Annual Technical Conference <address><addrLine>Renton, WA, USA</addrLine></address>
						</meeting>
						<imprint>
							<date type="published">July 10-12, 2019</date>
						</imprint>
					</monogr>
					<note>This paper is included in the Open access to the Proceedings of the 2019 USENIX Annual Technical Conference is sponsored by USENIX. https://www.usenix.org/conference/atc19/presentation/spink</note>
				</biblStruct>
			</sourceDesc>
		</fileDesc>
		<profileDesc>
			<abstract>
				<p>System-level Dynamic Binary Translation (DBT) provides the capability to boot an Operating System (OS) and execute programs compiled for an Instruction Set Architecture (ISA) different to that of the host machine. Due to their performance-critical nature, system-level DBT frameworks are typically hand-coded and heavily optimized, both for their guest and host architectures. While this results in good performance of the DBT system, engineering costs for supporting a new, or extending an existing architecture are high. In this paper we develop a novel, retargetable DBT hypervisor, which includes guest specific modules generated from high-level guest machine specifications. Our system simplifies retargeting of the DBT, but it also delivers performance levels in excess of existing manually created DBT solutions. We achieve this by combining offline and online optimizations, and exploiting the freedom of a Just-in-time (JIT) compiler operating in a bare-metal environment provided by a Virtual Machine (VM) hypervisor. We evaluate our DBT using both targeted micro-benchmarks as well as standard application benchmarks, and we demonstrate its ability to outperform the de-facto standard QEMU DBT system. Our system delivers an average speedup of 2.21× over QEMU across SPEC CPU2006 integer benchmarks running in a full-system Linux OS environment, compiled for the 64-bit ARMv8-A ISA and hosted on an x86-64 platform. For floating-point applications the speedup is even higher, reaching 6.49× on average. We demonstrate that our system-level DBT system significantly reduces the effort required to support a new ISA, while delivering outstanding performance.</p>
			</abstract>
		</profileDesc>
	</teiHeader>
	<text xml:lang="en">
		<body>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="1">Introduction</head><p>System-level DBT is a widely used technology that comes in many disguises: it powers the Android Open Source Project (AOSP) Emulator for mobile app development, provides backwards compatibility for games consoles <ref type="bibr" target="#b51">[52]</ref>, implements sandbox environments for hostile program analysis <ref type="bibr" target="#b40">[41]</ref> and enables low-power processor implementations for popular ISAs <ref type="bibr" target="#b16">[17]</ref>. All these applications require a complete and faithful, yet efficient implementation of a guest architecture, including privileged instructions and implementation-defined behaviors, architectural registers, virtual memory, memorymapped I/O, and accurate exception and interrupt semantics.</p><p>The broad range of applications has driven an equally broad range of system-level DBT implementations, ranging from manually retargetable open-source solutions such as QEMU <ref type="bibr" target="#b3">[4]</ref> to highly specialized and hardware supported approaches designed for specific platforms, e.g. Transmeta Crusoe <ref type="bibr" target="#b16">[17]</ref>. As a de-facto industry standard QEMU supports all major platforms and ISAs, however, retargeting of QEMU to a new guest architecture requires deep knowledge of its integrated Tiny Code Generator (TCG) as it involves manual implementation of guest instruction behaviors. Consequently, retargeting is time-consuming and error-prone: e.g. the official QEMU commit logs contain more than 90 entries to bugfixes related to its ARM model alone.</p><p>In this paper we present Captive, our novel system-level DBT hypervisor, where users are relieved of low-level implementation effort for retargeting. Instead users provide highlevel architecture specifications similar to those provided by processor vendors in their ISA manuals. In an offline stage architecture specifications are processed, before an architecturespecific module for the online run-time is generated. Captive applies aggressive optimizations: it combines the offline optimizations of the architecture model with online optimizations performed within the generated JIT compiler, thus reducing the compilation overheads while providing high code quality. Furthermore, Captive operates in a virtual bare-metal environment provided by a VM hypervisor, which enables us to fully exploit the underlying host architecture, especially its system related and privileged features not accessible to other DBT systems operating as user processes.</p><p>The envisaged use of Captive is to provide software developers with early access to new platforms, possibly hosted in a cloud environment. To facilitate this goal, ease of retargetability is as important as delivering performance levels sufficient to drive substantial workloads, i.e. software development tool chains and user applications. Whilst we currently focus on a single-core implementation, the key ideas can be translated to multi-core architectures.</p><p>We evaluate the implementation of Captive using a 64-bit ARMv8-A guest model and an x86-64 host. From a description comprising just 8100 lines of code <ref type="bibr" target="#b0">1</ref> we generate a DBT hypervisor outperforming QEMU by a factor of 2.21× for SPEC CPU2006 integer applications, and up to 6.49× for floating-point workloads. This means Captive is capable of hosting a full and unmodified ARM Linux OS environment while delivering around 40% of the performance of a physical system comprising a 2.0GHz server-type Cortex-A57 processor. <ref type="figure" target="#fig_0">Figure 1</ref> shows a high-level overview of Captive: an ARMv8-A 2 architecture description is processed by an offline tool to produce a platform-specific DBT module. Already at this stage optimizations are applied, which aid later JIT code generation. The software stack on the x86-64 host machine comprises a Kernel Virtual Machine (KVM)-based DBT hypervisor, operating on top of the host's Linux OS. This provides a virtual bare-metal x86-64 Host Virtual Machine (HVM) in which Captive together with the previously generated DBT module and a minimal execution engine reside to provide the Guest Virtual Machine (GVM), which can boot and run an unmodified ARMv8-A Linux kernel image. Since the JIT compiler in our system-level DBT system operates in a bare-metal HVM it has full access to the virtual host's resources and can generate code to exploit these resources.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="1.1">Overview and Motivating Example</head><p>For example, consider <ref type="figure">Figure 2</ref>. A conventional systemlevel DBT system hosted on an x86-64 architecture, e.g. QEMU, operates entirely as a user process in protection ring 3 on top of a host OS operating in ring 0. This means that any code generated by QEMU's JIT compiler, either guest user or system code, also operates in the host's ring 3, which restricts access to system features such as page tables. Such a system operating exclusively in ring 3 needs to provide software abstractions and protection mechanisms for guest operations, which modify guest system state. In contrast, Captive operates in VMX root mode, and provides a bare-metal HVM with rings 0-3. Our execution engine and DBT operate in the virtual machine's ring 0, and track the guest system's mode. This enables us to generate code operating in ring 0, for guest system code, and ring 3, for guest user code. This means we can use the HVM's hardware protection features to efficiently implement memory protection or allow the hypervisor to modify the HVM's page tables in order to directly map the GVM's virtual address space onto host physical memory.</p><p>Porting to a different host architecture can be accomplished by utilising similar features offered by that architecture, e.g. Arm offers virtualization extensions that are fully supported by KVM, and privilege levels PL0 and PL1, which are similar to x86's ring 3 and ring 0, respectively. These similarities also enable our accelerated virtual memory system to work across platforms.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="1.2">Contributions</head><p>Captive shares many concepts with existing DBT systems, but it goes beyond and introduces unique new features. We provide a feature comparison in <ref type="table">Table 1</ref>, and present further information on related work in Section 4. Among the contributions of this paper are:</p><p>1. We develop a generic system-level DBT framework, where the effort to support new guest platforms is reduced by using high-level architecture descriptions.</p><p>2. We use split compilation in a DBT, combining offline and online optimization to reduce pressure on the performance critical JIT compiler while maintaining code quality.</p><p>3. We pioneer a DBT approach where the integrated JIT compiler is part of a DBT hypervisor and can generate code that takes full advantage of this execution context.</p><p>Captive has been released as an open-source project, to enable community-driven development and independent performance evaluation. <ref type="bibr" target="#b2">3</ref> </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2">Retargetable DBT Hypervisor</head></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.1">Overview</head><p>In this section, we describe the key concepts of Captive, which comprises two main components, (1) an offline generation component, and <ref type="formula">(2)</ref>   Memory Management Unit (MMU)) are described in regular source-code files, and compiled together with the generated source-code. The online runtime component is discussed in Section 2.3, and comprises a further two sub-components,</p><p>(1) a user-mode application that activates and configures a KVM Virtual Machine, and (2) a unikernel that runs inside the KVM VM, and implements guest instruction translation and general guest machine execution. The DBT system itself runs inside a VM with no standard OS support. Normally, a virtual machine provides a baremetal environment in which an OS is loaded, and then user applications are executed. We instead skip the OS entirely, and implement our DBT on the virtual bare-metal hardware. Whilst this adds complexity to the implementation of the DBT, it also allows the DBT to directly use host architectural features, without having to negotiate with an OS. This is in contrast to the majority of other system-level DBTs, which typically run as user-mode applications in an OS. The trade-off here is that Captive relies on KVM, reducing host operating system portability.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.2">Offline Stage</head></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.2.1">Architecture Description</head><p>The guest machine architecture is described using a highlevel Architecture Description Language (ADL) that defines instruction syntax (i.e. how to decode instructions) and instruction semantics (i.e. how to execute instructions). The ADL is also used to describe architectural features, such as the register file size and layout, word sizes, endianness, etc.</p><p>The ADL is based on a modified version of ArchC <ref type="bibr" target="#b0">[1]</ref>, and our offline generator tool processes the description into an intermediate form, performs some optimization and analysis, before finally producing modules for the DBT as output.</p><p>Instruction semantics (the functional behavior of guest machine instructions) are described in a high-level C-like lan- guage. This Domain Specific Language (DSL) allows the behavior of instructions to be specified easily and naturally, by, e.g. translating the pseudo-code found in architecture manuals into corresponding C-like code. <ref type="figure" target="#fig_1">Figure 3</ref> provides an example description of an add instruction that loads the value from two guest registers (lines 3 and 4), adds them together (line 5), then stores the result to another guest register (line 6). This example shows how a typical instruction might look, and how its behavior can be naturally expressed. Of course, this is a simple example: most 'real-world' instruction descriptions contain branching paths to select specific instruction variants (e.g., flag-setting or not), more complex calculations, and floating point and vector operations, all of which can be handled by the ADL.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.2.2">Intermediate SSA Form</head><p>During the offline phase, instruction behavior descriptions are translated into a domain-specific Static Single Assignment (SSA) form, and aggressively optimized. The optimization passes used have been selected based on common idioms in instruction descriptions. For example, very few loop-based optimizations are performed, since most individual instructions do not contain loops. Optimizing the model at the offline stage makes any simplifications utilized by the designer in the description less of a performance factor in the resulting code.</p><p>The domain-specific SSA contains operations for reading architectural registers, performing standard arithmetic operations on values of integral, floating-point and vector types, memory and peripheral device access and communication, and a variety of built-in functions for common architectural behaviors (such as flag calculations and floating point NaN/Infinity comparisons).</p><p>Additionally, meta-information about the SSA is held, indicating whether each operation is fixed or dynamic. Fixed operations are evaluated at instruction translation time, whereas dynamic operations must be executed at instruction run-time. For example, the calculation of a constant value, or control flow based on instruction fields is fixed, but computations which depend on register or memory values are dynamic <ref type="bibr" target="#b45">[46]</ref>. Fixed operations can produce dynamic values, but dynamic operations must be executed as part of instruction emulation. <ref type="figure">Figure 4</ref> shows the direct translation of the instruction behavior (from <ref type="figure" target="#fig_1">Figure 3)</ref> into corresponding SSA form. A series of optimizations (given in <ref type="table" target="#tab_2">Table 2</ref>) are then applied to this SSA, until a fixed-point is reached. <ref type="figure" target="#fig_2">Figure 5</ref> shows the optimized form of the SSA.</p><p>The offline optimizations allow the user to be expressive and verbose in their implementation of the model, whilst retaining a concise final representation of the user's intent. For example, dead code elimination is necessary in the case where helper functions have been inlined, and subsequently subjected to constant propagation/folding, which eliminates a particular control-flow path through the function.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.2.3">Generator Function</head><p>The domain-specific SSA itself is not used at runtime, but instead is used in the final offline stage to build simulatorspecific generator functions. These functions are either compiled in, or dynamically loaded, by the DBT, and are invoked at JIT compilation time. The generator functions call into the DBT backend, which produces host machine code. When an instruction is to be translated by the DBT, the corresponding generator function is invoked. <ref type="figure">Figure 6</ref> shows the corresponding generator function, produced from the optimized SSA form in <ref type="figure" target="#fig_2">Figure 5</ref>. The generator function is clearly machine generated, but host compiler optimizations (in the offline stage) will take care of any inefficiencies in the output source-code. Additionally (and not shown for brevity) the offline stage generates source-code comments, to assist in debugging.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.3">Online Stage</head><p>The online stage of Captive involves the actual creation and running of the guest virtual machine. This takes the form of a KVM-based DBT hypervisor, which instantiates an empty host virtual machine, which then loads the execution engine (a small, specialized unikernel) that implements the DBT. The KVM-based portion of the hypervisor also includes software emulations of guest architectural devices (such as the interrupt controller, UARTs, etc). The DBT comprises four main phases, as shown in <ref type="figure" target="#fig_4">Figure 7</ref>: Instruction Decoding, Translation, Register Allocation, and finally Instruction Encoding.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.3.1">Instruction Decoding</head><p>The first phase in our execution pipeline is the instruction decoder, which will decode one guest basic block's worth of instructions at a time. The decoder routines are automatically generated from the architecture description during the offline stage, utilizing techniques such as Krishna and Austin <ref type="bibr" target="#b26">[27]</ref>, Theiling <ref type="bibr" target="#b42">[43]</ref>.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.3.2">Translation</head><p>During the translation phase, a generator function (that was created in the offline stage) is invoked for each decoded instruction. The generator function calls into an invocation Directed Acyclic Graph (DAG) builder, which builds a DAG representing the data-flow and control-flow of the instruction under translation. Operations (represented by nodes in the DAG) that have side effects result in the collapse of the DAG at that point, and the emission of low-level Intermediate Representation (IR) instructions representing the collapsed nodes.</p><p>A node with side effects is one through which control-flow cannot proceed without the state of the guest being mutated in some way. For example, a STORE node is considered to have side-effects, as the guest machine register file has been changed.</p><p>During emission, the tree rooted at that node is traversed, emitting IR for the operations required to produce the input values for that node. This feed-forward technique removes the need to build an entire tree then traverse it later. Collapsing nodes immediately to IR improves the performance of the DBT, as instructions are generated as soon as possible.   This strategy enables high-level operations to take place on transparent values, and implements a weak form of tree pattern matching on demand. When a node is collapsed, specializations can be made depending on how the tree is formed at the node. For example, the STORE node ((d) in <ref type="figure" target="#fig_5">Figure 8</ref>) that updates the PC by incrementing its value, can be emitted as a single x86 instruction. Instruction selection also takes place at this level, where the generator can utilize host instructions, such as fused-multiply-add when available.</p><p>In the case of an x86 host machine, the low-level IR is effectively x86 machine instructions, but with virtual register operands in place of physical registers, as shown in <ref type="figure">Figure 9</ref>. For other host machines, the IR is similar.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.3.3">Register Allocation</head><p>After the low-level IR has been produced by the translation phase, the register allocator makes a forward pass over these instructions to discover live ranges, and then a backward pass to split live ranges into live intervals. During live-range split-1 mov (% rbp ) , % VREG0 ; Load guest reg. into temporary 2 add $1 , % VREG0</p><p>; Add one. 3 mov % VREG0 , (% rbp ) ; Store temporary to guest reg. 4 mov (% rbp ) , % VREG1 ; Load guest reg. into temporary 5 mov % VREG1 , 8(% rbp ) ; Store temporary to guest reg. 6 lea 4(% r15 ) , % VREG2 ; Load PC+4 into temporary 7 mov % VREG2 , 0 xf8 (% rbp ) ; Store into guest reg. 8 add $12 , % r15</p><p>; Increment PC by 12</p><p>Figure 9: As each node with side-effects is inserted into the DAG, low-level IR is emitted that implements that node. This IR represents host instructions, but with virtual registers instead of physical registers.</p><p>ting, host machine registers are allocated to virtual registers, and conflicts are resolved. Whilst not producing an optimal solution, the register allocator is fast. The allocator also marks dead instructions, so that at encoding time those instructions are ignored. Our register allocation algorithm is similar to the simplified graph-coloring scheme from Cai et al. <ref type="bibr" target="#b8">[9]</ref>, but with additional dead code elimination.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.3.4">Instruction Encoding</head><p>After register allocation is complete, the low-level intermediate form of instructions can be directly lowered into machine code. The list of instructions is traversed for a final time, and the machine code is generated directly from the instruction's meta-data, into a code buffer. Any instructions that were classified as dead during register allocation are skipped.</p><p>Once machine code emission is completed, a final pass is made to apply patches to relative jump instructions, as this value is only known once each instruction has been emitted, and therefore sized.</p><p>1 fmov d0 , #1.5</p><p>; Store constant 1.5 in d0 2 fmul d0 , d1 , d2 ; Multiply d1 with d2, and store in d0 </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.4">Exploiting Host Architectural Features</head><p>System-level DBT naturally involves emulating a range of guest architectural components, most notably the MMU. Traditionally, this emulation is performed in software, where each memory access must perform an address translation that takes a virtual address, and translates it via the guest page tables to a corresponding guest physical address. In QEMU, a cache is used to accelerate this translation, but in Captive we utilize the host MMU directly by mapping guest page table entries to equivalent host page table entries. This reduces the overhead of memory access instructions significantly, as we do not need to perform cache look-ups, and can work with the guest virtual address directly. Larger guest page sizes are supported by the host MMU directly, as multiple host pages can represent a single larger guest page. In the case of smaller guest pages, we must emulate memory accesses carefully to ensure permissions within a page are not violated. In general, we support an n : m mapping between guest and host page sizes, where n, m are powers of 2.</p><p>This technique is not possible with a DBT that runs in usermode, as the OS retains control of the host MMU page tables (although attempts have been made to emulate this by using the mmap system call <ref type="bibr" target="#b50">[51]</ref>). However, with Captive, we are operating in a bare-metal environment (see <ref type="figure" target="#fig_0">Figure 1)</ref>, and are able to configure the host architecture in any way we want. By tracking the protection ring of the guest machine, and executing the translated guest code in the corresponding host protection ring, we can take advantage of the host system's memory protection mechanism, for efficient implementation of guest memory protection.</p><p>We also take advantage of the x86 software interrupt mechanism (invoked using the int instruction), the x86 port-based I/O instructions (in and out), and the x86 fast system call instructions (syscall and sysret). These features are used to accelerate implementations of instructions that require additional non-trivial behaviors, e.g. accessing co-processors, manipulation of page tables, flushing Translation Lookaside Buffers (TLBs), and other operations specific to system-level DBT.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.5">Floating Point/SIMD Support</head><p>In order to reduce JIT complexity, QEMU uses a software floating-point implementation, where helper methods are used to implement floating-point operations. This results in the emission of a function call as part of the instruction execution, adding significant overhead to the emulation of these instruc-1 movabs $0x3ff8000000000000 , % rbp ; Store const FP value 2 mov %rbp , 0 x8c0 (% r14 ) ; of 1.5 in guest 3 movq $0 , 0 x8c8 (% r14 ) ; register file. <ref type="bibr" target="#b3">4</ref>   1 movabs $0x3ff8000000000000 ,% rax ; Store const FP value 2 mov %rax ,0 x100 (% rbp ) ; of 1.5 in guest 3 movq $0x0 ,0 x108 (% rbp ) ; register file. 4 add $0x4 ,% r15 ; Increment PC 5 movq 0 x110 (% rbp ) ,% xmm0 ; Load FP multiply operand 6 mulsd 0 x120 (% rbp ) ,% xmm0</p><p>; Perform multiplication 7 movq % xmm0 ,0 x100 (% rbp ) ; Store result 8 movq $0x0 ,0 x108 (% rbp ) 9 add $0x4 ,% r15 ; Increment PC tions. <ref type="figure" target="#fig_0">Figure 10</ref> gives an example of two ARM floating-point instructions, which are translated by QEMU to the x86 code in <ref type="figure" target="#fig_0">Figure 11</ref>, and by Captive to the code in <ref type="figure" target="#fig_0">Figure 12</ref>. Whilst QEMU implements the fmov directly (lines 1-3), in much the same way as Captive, QEMU issues a function call for the floating-point multiplication (fmul). In contrast, Captive emits a host floating-point multiplication instruction, which operates directly on the guest register file. Not all floating-point operations are trivial, however. Notably, there are significant differences with the way floatingpoint flags, NaNs, rounding modes, and infinities are handled by the underlying architecture, and in some cases this incompatibility between floating-point implementations needs to be accounted for. In these cases, Captive emits fix-up code that will ensure the guest machine state is bit-accurate with how the guest machine would normally operate. Captive only supports situations where the host machine is at least as precise as the guest. This is the most common scenario for our use cases, but in the event of a precision mismatch, we can either (a) use the x86 80-bit FPU (to access additional precision), or (b) utilise a software floating-point library.</p><p>Like QEMU, Captive emits Single Instruction Multiple Data (SIMD) instructions when translating a guest vector instruction, however QEMU's support is restricted to integer and bit-wise vector operations whereas Captive more aggressively utilizes host SIMD support.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.6">Translated Code Management</head><p>Captive employs a code cache, similar to QEMU, which maintains the translated code sequences. The key difference is that we index our translations by guest physical address, while QEMU indexes by guest virtual address. The consequence of this is that our translations are retained and re-used for longer, whereas QEMU must invalidate all translations when the guest page tables are changed. In contrast, we only invalidate translations when self-modifying code is detected. We utilize our ability to write-protect virtual pages to efficiently detect when a guest memory write may modify translated code, and hence invalidate translations only when necessary. A further benefit is that translated code is re-used across different virtual mappings to the same physical address, e.g. when using shared libraries.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.7">Virtual Memory Management</head><p>To accelerate virtual memory accesses in the guest, we dedicate the lower half of the host VMs virtual address space for the guest machine, and utilise the upper half for use by Captive. The lower half of the address space is mapped by taking corresponding guest page table entries, and turning them into equivalent host page table entries.</p><p>To make a memory access, the guest virtual address is masked, to keep it within the lower range, and if the address actually came from a higher address, the host page tables are switched to map the lower addresses to guest upper addresses. The memory access is then performed using the masked address directly, thus benefitting from host MMU acceleration.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3">Evaluation</head><p>Performance comparisons in the DBT space are difficult: most of the existing systems are not publicly available, and insufficient information is provided to reconstruct these systems from scratch. Furthermore, results published in the literature often make use of different guest/host architecture pairs and differ in supported features, which prohibit meaningful relative performance comparisons. <ref type="bibr" target="#b3">4</ref> For this reason we evaluate Captive against the widely used QEMU DBT as a baseline, supported by targeted micro-benchmarks and comparisons to physical platforms.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.1">Experimental Set-up</head><p>While we support a number of guest architectures, we choose to evaluate Captive using an ARMv8-A guest and an x86-64 <ref type="bibr" target="#b3">4</ref> For example, Harmonia <ref type="bibr" target="#b30">[31]</ref> achieves a similar speedup of 2.2 over QEMU, but this is for user-level DBT of a 32-bit guest on a 64-bit host system whereas we achieve a speedup of 2.2 over QEMU for the harder problem of system-level DBT of a 64-bit guest onto a 64-bit host system.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>System</head></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>HP z440</head><p>Architecture    <ref type="bibr" target="#b4">5</ref> We conducted the following experiments on the host machine described in <ref type="table" target="#tab_5">Table 3</ref>, and performed our comparison to native architectures on a Raspberry PI 3B, and an AMD Opteron A1100 <ref type="table" target="#tab_6">(Table 4)</ref>. We utilized both the integer and C++ floating-point benchmarks from SPEC CPU2006. Our comparisons to QEMU were made with version 2.12.1.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.2">Application Benchmarks</head><p>We have evaluated the performance of Captive and QEMU using the standard SPEC2006 benchmark suite with the Reference data set. As can be seen in <ref type="figure" target="#fig_0">Figure 13</ref>, we obtain significant speedups in most Integer benchmarks, with a geometric mean speedup of 2.2×. The two benchmarks where we experience a slow-down are 456.hmmer and 462.libquantum, which can be attributed to suboptimal register allocation in hot code. <ref type="figure" target="#fig_0">Figure 14</ref> shows the speed up of Captive over QEMU on the C++ Floating Point portion of the benchmark suite. <ref type="bibr" target="#b5">6</ref> Here we obtain a geometric mean speedup of 6.49×. This large speedup can mainly be attributed to QEMU's use of a software floating point implementation, while we use the host FPU and vector units directly.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.3">Additional Guest Architectures</head><p>We also have descriptions in our ADL for other guest architectures, detailed in <ref type="table" target="#tab_7">Table 5</ref>. However, with the exception of ARMv7-A, these implementations currently lack full-system support. For the ARMv7-A case, we have observed similar average speed-ups of 2.5×, and up to 6× across the SPEC CPU2006 benchmark suite using Captive.   </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.4">JIT Compilation Performance</head><p>Captive is on average 2.6× slower at translating guest basic blocks than QEMU. This is due in part to the more aggressive online optimizations we perform, but additionally QEMU's DBT has had years of hand-tuning, and benefits from a monolithic implementation. However, the previous results clearly indicate that our compilation latency does not affect the runtime of the benchmarks. In fact, the extra effort we put into compilation ensures that our code quality surpasses that of QEMU's, as will be demonstrated in Section 3.6. <ref type="figure" target="#fig_0">Figure 15</ref> shows that indeed, when using the SimBench micro-benchmark suite <ref type="bibr" target="#b46">[47]</ref>, the LargeBlocks and Small-Blocks benchmark indicate that our code generation speed is 65% and 85% slower, respectively. These    <ref type="figure" target="#fig_0">Figure 16</ref> provides a further breakdown of the time spent for JIT compilation: instruction translation (including invocation DAG generation and instruction selection) takes up more than 50% of the total JIT compilation time, followed by register allocation (including liveness analysis and dead code elimination), then host instruction encoding. Guest instruction decoding takes up 2.75% of the compilation pipeline.</p><formula xml:id="formula_0">- H o t - M M U M e m - H o t - N o M M U M e m - C o ld - M M U M e m - C o ld - N o M M U U n d e f - I n s t r u c t io n S y s c a ll D a t a - F a u lt I n s t r u c t io n - F a u lt S m a ll -B lo</formula><p>We have also collected aggregate translation size statistics for 429.mcf. We found that Captive generates larger code than QEMU, with Captive generating 67.53 bytes of host code per guest instruction, compared to QEMU's 40.26 bytes. This is due the use of vector operations in the benchmarks: while QEMU frequently emits (relatively small) function calls for these operations, Captive emits vector operations directly. In particular, vector load and store operations require that vectors are packed and unpacked element by element, each of which can require 2-3 instructions.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.5">Targeted Micro-Benchmarks</head><p>As well as using the SPEC benchmark suite, we have also evaluated the performance of both Captive and QEMU using SimBench <ref type="bibr" target="#b46">[47]</ref>. This is a targeted suite of micro-benchmarks designed to analyze the performance of full system emulation platforms in a number of categories, such as the performance of the memory emulation system, control flow handling, and translation speed (in the case of DBT-based systems). <ref type="figure" target="#fig_0">Figure 15</ref> shows the results of running SimBench on Captive and QEMU, in terms of speedup over QEMU. Captive outperforms QEMU in most categories, except for code generation (Large-Blocks and Small-Blocks) and Data Fault handling. Captive's use of the host memory management systems results in large speedups on the memory benchmarks.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.6">Code Quality</head><p>We assess code quality by measuring the individual basic block execution time for each block executed as part of a benchmark. For example, consider the scatter plot in <ref type="figure" target="#fig_0">Fig- ure 17</ref>, where we show the measured aggregated block execution times across the 429.mcf benchmark for Captive and QEMU. In order to limit the influence of infrastructure components of both platforms we have disabled block chaining for both platforms. Block execution times have been measured in the same way for both systems using the host's rdtscp instruction, inserted around generated native code regions representing a guest block.</p><p>A regression line and 1:1 line are also plotted in the loglog scale plot. Most points are above the 1:1 line, indicating that the vast majority of blocks are executed more quickly on Captive than on QEMU. In fact, we observe a code quality related speedup of 3.44 for this benchmark, represented by the positive shift of the regression line along the y-axis.</p><p>Further investigation reveals that Captive emits and executes, on average, 10 host instructions per guest instruction in addition to any block prologue and epilogue.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.6.1">Impact of offline optimizations</head><p>Our offline generation system has four levels of optimization (O1-O4), although in practice we only use the maximum optimization level. These optimizations directly affect the amount of source code generated in the offline phase, where lower levels (e.g. O1) emit longer code sequences in the generator functions. This translates to more operations to perform at JIT compilation time, and therefore (a) larger JIT compilation latency, and (b) poorer code quality.    </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.6.2">Hardware Floating-point Emulation</head><p>In contrast to QEMU, Captive utilises a hardware emulated floating-point approach, where guest floating-point instructions are directly mapped to corresponding host floating-point instructions, if appropriate. Any fix-ups required to maintain bit-accuracy are performed inline, rather than calling out to helper functions. This increases the complexity of host portability, but significantly improves performance.</p><p>To determine the effect of this, we utilised a microbenchmark that exercised a small subset of (common) floating-point operations, and observed a speed-up of 2.17× of Captive (with hardware floating-point emulation) over QEMU (with software floating-point emulation). We then replaced our DBT's floating-point implementation with a software-based one (taken directly from the QEMU source-code), and observed a speed-up of 1.68×. This translates to a speed-up of 1.3× within Captive itself.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.7">Comparison to Native Execution</head><p>We also compare the performance of Captive against two ARMv8-A hardware platforms: a Raspberry Pi 3 Model B and an AMD Opteron A1170 based server (see <ref type="table" target="#tab_6">Table 4</ref>). The results of this comparison can be seen in <ref type="figure" target="#fig_0">Figure 18</ref> and enable us to compare absolute performance levels in relation to physical platforms: across the entire SPEC CPU2006 suite Captive is about twice as fast as a 1.2GHz Cortex-A53 core of a Raspberry Pi 3, and achieves about 40% of the performance of a 2.0GHz Cortex-A57 core of the A1170. While outperformed by server processors it indicates that Captive can deliver performance sufficient for complex applications.</p><p>Finally, we compare the performance of Captive against native execution of the benchmarks compiled for and directly executed on the x86-64 host. Across all benchmarks we observe a speedup of 7.24 of native execution over system-level DBT, i.e. the overhead is still substantial, but Captive has significantly narrowed the performance gap between native execution, and system-level DBT.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4">Related Work</head><p>Due to their versatility DBT systems have found extensive interest in the academic community, especially since the mid90s. In <ref type="table" target="#tab_9">Table 6</ref> we compare features and highlight specific contributions of many relevant DBT systems and techniques presented in the academic literature. The vast majority of existing DBT systems only provide support for user-level applications, but there also exist a number of system-level DBT approaches to which we compare Captive. In addition, numerous individual compilation techniques have been developed specifically for binary translators. Those relevant to our work on Captive are summarized in <ref type="table" target="#tab_10">Table 7.</ref> Captive is inspired by existing system-level DBT systems and we have adopted proven features while developing novel. Like Shade <ref type="bibr" target="#b12">[13]</ref>, Embra <ref type="bibr" target="#b52">[53]</ref>, and QEMU <ref type="bibr" target="#b3">[4]</ref> Captive is interpreter-less and uses a basic block compiler with block chaining and trace caching. Our binary translator, however, is not hand-coded, but generated from a machine description. This allows for ease-of-retargeting comparable to Pydgin <ref type="bibr" target="#b28">[29]</ref>, but at substantially higher performance levels. Unlike Walkabout <ref type="bibr" target="#b11">[12]</ref>, Yirr-Ma <ref type="bibr" target="#b43">[44]</ref>, or ISAMAP <ref type="bibr" target="#b37">[38]</ref>, which similarly rely on machine descriptions, Captive employs split compilation and applies several optimizations offline, i.e. at module generation time, rather than relying on expensive runtime optimizations only. Instead of software emulation of floating-point (FP) arithmetic like QEMU or unsafe FP implementation like HQEMU <ref type="bibr" target="#b20">[21]</ref>, our FP implementation is bit-accurate, but still leverages the host system's FP capabilities wherever possible. Similar to IA-32 EL <ref type="bibr" target="#b27">[28,</ref><ref type="bibr" target="#b53">54]</ref> Captive translates guest SIMD instructions to host SIMD instructions wherever possible, but this mapping is generalized for any guest/host architecture pair. Like QuickTransit <ref type="bibr" target="#b25">[26]</ref> or HyperMAMBO <ref type="bibr" target="#b14">[15]</ref> Captive operates as a hypervisor, but provides a full-system environment rather than hosting only a single application. Captive shares this property with MagiXen <ref type="bibr" target="#b9">[10]</ref>, but provides full support for 64-bit guests on a 64-bit host rather than only 32-bit guests on a 64-bit host (which avoids address space mapping challenges introduced by same word-size system-level DBT).</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5">Summary &amp; Conclusion</head><p>In this paper we developed a novel system-level DBT hypervisor, which can be retargeted to new guest systems using a high-level ADL. We combine offline and online optimizations as well as a JIT compiler operating in a virtual bare-metal environment with full access to the virtual host processor to deliver performance exceeding that of conventional, manually optimized DBT systems operating as normal user processes. We demonstrate this using an ARMv8-A guest running a full unmodified ARM Linux environment on an x86-64 host, where Captive outperforms the popular QEMU DBT across SPEC CPU2006 application benchmarks while on average reaching 2× the performance of a 1.2GHz entry-level Cortex-A53 or 40% of a 2.0GHz server-type Cortex-A57.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5.1">Future Work</head><p>Our future work will consider support for multi-and manycore architectures, heterogeneous platforms, and support for various ISA extensions, e.g. for virtualization or secure enclaves, inside the virtualized guest system. We also plan to investigate possibilities for synthesizing guest and host architecture descriptions in the spirit of Buchwald et al. <ref type="bibr" target="#b7">[8]</ref>, or using existing formal specifications. We are also investigating a tiered compilation approach, to aggressively optimize hot code, and adding support for host retargeting, by using the same ADL as for our guest architectures.</p></div><figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_0"><head>Figure 1 :</head><label>1</label><figDesc>Figure 1: High-level overview of Captive.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_1"><head>Figure 3 :</head><label>3</label><figDesc>Figure 3: High-level C-like representation of instruction behavior</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_2"><head>Figure 5 :</head><label>5</label><figDesc>Figure 4: Unoptimized domain-specific SSA form of the add instruction from Figure 3.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_3"><head></head><label></label><figDesc>Figure 6: Generator function produced from ADL code shown in Figure 3</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_4"><head>Figure 7 :</head><label>7</label><figDesc>Figure 7: Online flow including decoder, translator, register allocation and instruction encoder.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_5"><head>Figure 8 :</head><label>8</label><figDesc>Figure 8: Example ARM assembly, and the corresponding (uncollapsed) DAG built during translation. Nodes (a), (b), (c), and (d) have side effects, causing the emission of low-level IR based on the tree rooted at that node.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_6"><head>Figure 10 :</head><label>10</label><figDesc>Figure 10: Arm floating-point input assembly</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_7"><head>Figure 11 :</head><label>11</label><figDesc>Figure 11: QEMU output assembly for the instruction sequence in Figure 10.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_8"><head>Figure 12 :</head><label>12</label><figDesc>Figure 12: Captive output assembly for the instruction sequence in Figure 10.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_9"><head></head><label></label><figDesc>Figure 13: Application Performance: SPEC CPU2006 Integer benchmark results for Captive vs QEMU. Architecture Challenges Solution ARMv8-A 64-bit guest on 64-bit host emulation Additional techniques for MMU emulation ARMv7-A If-then-else blocks, possibly spanning page boundaries Complex control-flow handling in the JIT x86-64 Complex instruction encoding, requiring stateful decoder. Use of an external decoder library [23] RISC-V No significiant challenges None required TI TMS320C6x DSP VLIW instructions, nested branch delay slots Extensions to decoder generator, control-flow recovery Arm Mali-G71 GPU Complex instruction bundle headers External "pre"-decoder for bundle headers.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_10"><head>Figure 14 :</head><label>14</label><figDesc>Figure 14: Speed-up of Captive over QEMU on the Floating Point portion of the SPEC2006 benchmark suite (higher is better)</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_13"><head>Figure 15 :</head><label>15</label><figDesc>Figure 15: Speed-up of Captive over QEMU on the SimBench micro-benchmark suite</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_14"><head>Figure 16 :</head><label>16</label><figDesc>Figure 16: % time spent in each compilation phase: Decode, Translate, Register Allocation and Encode.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_15"><head>Figure 17 :Figure 18 :</head><label>1718</label><figDesc>Figure 17: Measuring code quality: accumulated execution times of guest basic blocks from 429.mcf. Blocks compiled by Captive execute, on average, 3.44× faster than their QEMU counterparts.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_16"><head></head><label></label><figDesc>At the O1 optimization level, only function inlining is performed, and results in the ARMv8A model comprising 271,299 lines of generated code. At O4 (where a series of ag- gressive domain specific optimizations are performed), there is a reduction of 56%, to 120,162 lines of generated code.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_1" validated="false"><head></head><label></label><figDesc>an online runtime component. The offline phase involves describing the target machine architecture, and is discussed in Section 2.2. In this phase, modules for inclusion in the runtime component are generated. Complex architectural behaviour (such as the operation of the</figDesc><table>Optimization 

Active in Opt. Level 
Dead Code Elimination 
O1-4 
Unreachable Block Elimination 
O1-4 
Control Flow Simplification 
O1-4 
Block Merging 
O1-4 
Inlining 
O1-4 
Dead Variable Elimination 
O1-4 
Jump Threading 
O2-4 
Constant Folding 
O3-4 
Constant Propagation 
O3-4 
Value Propagation 
O3-4 
Load Coalescing 
O3-4 
Dead Write Elimination 
O3-4 
PHI Analysis 
O4 
PHI Elimination 
O4 

</table></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_2" validated="false"><head>Table 2 : Optimizations applied in the offline stage.</head><label>2</label><figDesc></figDesc><table></table></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_5" validated="true"><head>Table 3 : DBT Host System</head><label>3</label><figDesc></figDesc><table>System 
AMD Opteron A1170 
Architecture 
ARMv8-A 
Model 
Cortex A57 
Cores/Threads 
8/8 
Frequency 2.0 GHz 
L1 Cache 
I$48kB/D$32kB 
L2 Cache 
4 × 1 MB 
L3 Cache 
8 MB 
Memory 
16 GB 
System 
Raspberry Pi 3 Model B 
Architecture 
ARMv8-A 
Model 
Cortex A53 
Cores/Threads 
4/4 
Frequency 1.2 GHz 
L1 Cache 
I$16kB/D$16kB 
L2 Cache 
512kB 
L3 Cache 
-/-
Memory 
1 GB 

</table></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_6" validated="false"><head>Table 4 :</head><label>4</label><figDesc></figDesc><table>Native Arm Host Systems 

host. </table></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_7" validated="false"><head>Table 5 :</head><label>5</label><figDesc></figDesc><table>Architectures currently supported by Captive, and the architecture-specific challenges that required special attention for 
implementation. 

0 

5 

10 

15 

20 

25 

4 
8 
2 
.s 
p 
h 
in 
x 
3 

4 
3 
3 
.m 
il 
c 

4 
3 
5 
.g 
r 
o 
m 
a 
c 
s 

4 
4 
4 
.n 
a 
m 
d 

4 
7 
0 
.l 
b 
m 

G 
e 
o 
. 
M 
e 
a 
n 

Speed-up 

Speed-up over QEMU 

</table></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_8" validated="false"><head>DBT System (Year)</head><label></label><figDesc></figDesc><table>Guest ISA 
Host ISA 
Distinct Contributions 

User-Level DBT 

Shade [13] (1993) 
SPARC/MIPS 
SPARC 
DBT, code caching, tracing 
DAISY [19] (1997) 
RS/6000 
VLIW 
Dyn. parallel scheduling 
FX!32 [11] (1998) 
IA-32 
Alpha 
profiling &amp; static BT 
UQDBT [45] (2000) 
IA-32 
SPARC 
Retargetability 
Dynamo [2] (2000) 
PA-RISC, IA-32 
PA-RISC, IA-32 
Same ISA Optimization 
Strata [34, 35] (2001) 
SPARC/MIPS/IA-32 
SPARC/MIPS 
Extensibility 
Vulcan [42] (2001) 
IA-32, IA-64, MSIL 
IA-32, IA-64, MSIL 
Het. binaries, distr. opt. 
bintrans [32] (2002) 
PowerPC 
Alpha 
Dynamic liveness analysis 

Walkabout [12] (2002) 
Retargetable 
Retargetable 
Arch. Descr. Lang. 
(SPARC v8) 
(SPARC v9) 
Interpreter and JIT generated 
DynamoRIO [7] (2003) 
IA-32 
IA-32 
Dyn. Adapt. Optimization 
QuickTransit [26] (2004) 
MIPS, PowerPC, SPARC 
IA-32, IA-64, x86-64 
KVM for memory translation 

Yirr-Ma [44] (2005) 
Retargetable 
Retargetable 
Dyn. Opt., Part. Inlining 
(SPARC, IA-32, ARM, PowerPC) 
(SPARC, IA-32, PowerPC) 
Gen. from Spec. 
IA-32 EL [28] (2006) 
IA-32 
IA-64 
SIMD Support 
StarDBT [48] (2007) 
IA-32, x86-64 
IA-32, x86-64 
Trace lengthening 
N/A [6] (2008) 
MIPS, VLIW 
x86-64 
LLVM JIT Compilation 
EHS [24] (2008) 
ARC700 
IA-32 
Large translation regions 
Strata-ARM [30] (2009) 
ARM 
ARM, IA-32 
Handling of exposed PC 
ISAMAP [38] (2010) 
PowerPC 
IA-32 
Arch. Descr. Language 
ARCSim [5] (2011) 
ARC700 
x86-64 
Parallel JIT task farm 

Harmonia [31] (2011) 
ARM 
IA-32 
Reg. Map., Cond. codes 
Tiered compilation 
HQEMU [21] (2012) 
ARMv7A 
x86-64 
Multithreaded Compilation 
HERMES [55] (2015) 
IA-32, ARM 
MIPS 
Post-Optimization 
Pydgin [29] (2015) 
ARM/MIPS 
x86-64 
Meta-Tracing JIT Compiler 

MAMBO-X64 [16] (2017) 
AArch32 
AArch64 

Dyn. mapping of FP regs. 
Overflow address calculations 
Return address prediction 
HyperMAMBO-X64 [15] (2017) 
AArch32 
AArch64 
Hypervisor support 
Pico [14] (2017) 
x86-64, AArch64 
x86-64, POWER8 
multicore, multi-threaded DBT 

System-Level DBT 

Embra [53] (1996) 
MIPS 
MIPS 
Multi-core, block chaining 
MMU relocation array 

Transmeta CMS [17] (2003) 
IA-32 
Custom VLIW 

Aggressive speculation 
Hardware support 
Adaptive recompilation 
QEMU [4] (2204) 
Retargetable 
Retargetable 
Pseudo Instructions 
MagiXen [10] 
IA-32 
IA-64 
Integration with XEN 
PQEMU [18] (2011) 
ARM 
x86-64 
Multi-core guest platform 
LIntel [37] (2012) 
IA-32 
Elbrus 
Adapt. background opt. 
Captive [40] 
ARMv7A 
x86-64 
VT Hardware Acceleration 
HybridDBT [33] (2017) 
RISC-V 
VLIW 
Custom DBT Hardware 

Captive 
Retargetable 
Retargetable 
Aggressive offline optim. 
(ARMv8) 
(x86-64 + VT) 
VM &amp; bare-metal JIT 

</table></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_9" validated="true"><head>Table 6 : Related Work: Feature comparison of existing DBT systems.</head><label>6</label><figDesc></figDesc><table>Reference 
Guest ISA 
Host ISA 
Static/Dynamic 
User/System 
Distinct Contribution 

Xu et al. [54] 
IA-32 
IA-64 
Dynamic 
User 
Compiler Metadata 

Bansal and Aiken [3] 
PowerPC 
IA-32 
Static 
User 
Peephole translation rules 
learned by superoptimizer 
Kedia and Bansal [25] 
x86-64 
x86-64 
Dynamic 
System 
Kernel-level DBT 
Hawkins et al. [20] 
x86-64 
x86-64 
Dynamic 
User 
Optimization of Dyn. Gen. Code 
Spink et al. [39] 
ARMv5T 
x86-64 
Dynamic 
User 
Support for Dual-ISA 
Wang et al. [49] 
IA-32 
x86-64 
Dynamic 
User 
Persistent code caching 
Shigenobu et al. [36] 
ARMv7A 
LLVM-IR 
Static 
User 
ARM-to-LLVM IR 
Wang et al. [50] 
ARMv5 
x86-64 
Dynamic 
System 
Learning of translation rules 
Hong et al. [22] 
ARM NEON 
x86 AVX2/AVX-512 
Dynamic 
User 
Short-SIMD to Long-SIMD 

</table></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_10" validated="false"><head>Table 7 : Related Work: Individual compilation techniques for Binary Translation systems.</head><label>7</label><figDesc></figDesc><table></table></figure>

			<note place="foot" n="1"> Compared to 17766 LoC for QEMU&apos;s ARM model plus a further 7948 LoC in their software floating-point implementation. 2 Or any other guest architecture, e.g. RISC-V.</note>

			<note place="foot" n="3"> See https://gensim.org/simulators/captive</note>

			<note place="foot" n="1"> action void add (Instruction sym_1_3_parameter_inst ) [</note>

			<note place="foot" n="1"> bool generator :: translate_add (const test_decode_test_F1 &amp; insn , dbt_emitter &amp; emitter ) {</note>

			<note place="foot" n="5"> Additional RISC-V and x86 models will be released together with Captive. 6 Missing Fortran benchmarks are due to the benchmarks not working both natively, and in QEMU.</note>
		</body>
		<back>
			<div type="references">

				<listBibl>

<biblStruct xml:id="b0">
	<analytic>
		<title level="a" type="main">The ArchC architecture description language and tools</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Rodolfo</forename><surname>Azevedo</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Sandro</forename><surname>Rigo</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Marcus</forename><surname>Bartholomeu</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Guido</forename><surname>Araujo</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Cristiano</forename><surname>Araujo</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Edna</forename><surname>Barros</surname></persName>
		</author>
		<idno type="doi">10.1007/s10766-005-7301-0</idno>
		<idno>1573-7640. doi: 10. 1007/s10766-005-7301-0</idno>
		<ptr target="https://doi.org/10.1007/s10766-005-7301-0" />
	</analytic>
	<monogr>
		<title level="j">International Journal of Parallel Programming</title>
		<imprint>
			<biblScope unit="volume">33</biblScope>
			<biblScope unit="issue">5</biblScope>
			<biblScope unit="page" from="453" to="484" />
			<date type="published" when="2005-10" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b1">
	<analytic>
		<title level="a" type="main">Dynamo: A transparent dynamic optimization system</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Vasanth</forename><surname>Bala</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Evelyn</forename><surname>Duesterwald</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Sanjeev</forename><surname>Banerjia</surname></persName>
		</author>
		<idno type="doi">10.1145/349299.349303</idno>
		<idno>1-58113-199-2. doi: 10. 1145/349299.349303</idno>
		<ptr target="http://doi.acm.org/10.1145/349299.349303" />
	</analytic>
	<monogr>
		<title level="m">Proceedings of the ACM SIGPLAN 2000 Conference on Programming Language Design and Implementation, PLDI &apos;00</title>
		<meeting>the ACM SIGPLAN 2000 Conference on Programming Language Design and Implementation, PLDI &apos;00<address><addrLine>New York, NY, USA</addrLine></address></meeting>
		<imprint>
			<publisher>ACM</publisher>
			<date type="published" when="2000" />
			<biblScope unit="page" from="1" to="12" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b2">
	<analytic>
		<title level="a" type="main">Binary translation using peephole superoptimizers</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Sorav</forename><surname>Bansal</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Alex</forename><surname>Aiken</surname></persName>
		</author>
		<ptr target="http://dl.acm.org/citation.cfm?id=1855741.1855754" />
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 8th USENIX Conference on Operating Systems Design and Implementation, OSDI&apos;08</title>
		<meeting>the 8th USENIX Conference on Operating Systems Design and Implementation, OSDI&apos;08<address><addrLine>Berkeley, CA, USA</addrLine></address></meeting>
		<imprint>
			<date type="published" when="2008" />
			<biblScope unit="page" from="177" to="192" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b3">
	<analytic>
		<title level="a" type="main">Qemu, a fast and portable dynamic translator</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Fabrice</forename><surname>Bellard</surname></persName>
		</author>
		<ptr target="http://dl.acm.org/citation.cfm?id=1247360.1247401" />
	</analytic>
	<monogr>
		<title level="m">Proceedings of the Annual Conference on USENIX Annual Technical Conference, ATEC &apos;05</title>
		<meeting>the Annual Conference on USENIX Annual Technical Conference, ATEC &apos;05<address><addrLine>Berkeley, CA, USA</addrLine></address></meeting>
		<imprint>
			<date type="published" when="2005" />
			<biblScope unit="page" from="41" to="41" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b4">
	<analytic>
		<title level="a" type="main">Generalized just-in-time trace compilation using a parallel task farm in a dynamic binary translator</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Igor</forename><surname>Böhm</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><forename type="middle">K</forename><surname>Tobias</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Edler Von</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Stephen</forename><forename type="middle">C</forename><surname>Koch</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Björn</forename><surname>Kyle</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Nigel</forename><surname>Franke</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Topham</surname></persName>
		</author>
		<idno type="doi">978-1-4503-0663-8.doi:10.1145/1993498.1993508</idno>
		<ptr target="http://doi.acm.org/10.1145/1993498.1993508" />
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 32Nd ACM SIGPLAN Conference on Programming Language Design and Implementation, PLDI &apos;11</title>
		<meeting>the 32Nd ACM SIGPLAN Conference on Programming Language Design and Implementation, PLDI &apos;11<address><addrLine>New York, NY, USA</addrLine></address></meeting>
		<imprint>
			<publisher>ACM</publisher>
			<date type="published" when="2011" />
			<biblScope unit="page" from="74" to="85" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b5">
	<analytic>
		<title level="a" type="main">Fast and accurate simulation using the LLVM compiler framework</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Florian</forename><surname>Brandner</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Andreas</forename><surname>Fellnhofer</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Andreas</forename><surname>Krall</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">David</forename><surname>Riegler</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Workshop on Rapid Simulation and Performance Evalution: Methods and Tools (RAPIDO)</title>
		<imprint>
			<date type="published" when="2008" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b6">
	<analytic>
		<title level="a" type="main">An infrastructure for adaptive dynamic optimization</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Derek</forename><surname>Bruening</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Timothy</forename><surname>Garnett</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Saman</forename><surname>Amarasinghe</surname></persName>
		</author>
		<idno>ISBN 0-7695-1913</idno>
		<ptr target="http://dl.acm.org/citation.cfm?id=776261.776290" />
	</analytic>
	<monogr>
		<title level="m">Proceedings of the International Symposium on Code Generation and Optimization: Feedbackdirected and Runtime Optimization, CGO &apos;03</title>
		<meeting>the International Symposium on Code Generation and Optimization: Feedbackdirected and Runtime Optimization, CGO &apos;03<address><addrLine>Washington, DC, USA</addrLine></address></meeting>
		<imprint>
			<publisher>IEEE Computer Society</publisher>
			<date type="published" when="2003" />
			<biblScope unit="page" from="265" to="275" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b7">
	<analytic>
		<title level="a" type="main">Synthesizing an instruction selection rule library from semantic specifications</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Sebastian</forename><surname>Buchwald</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Andreas</forename><surname>Fried</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Sebastian</forename><surname>Hack</surname></persName>
		</author>
		<idno type="doi">978-1-4503-5617-6.doi:10.1145/3168821</idno>
		<ptr target="http://doi.acm.org/10.1145/3168821" />
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 2018 International Symposium on Code Generation and Optimization, CGO 2018</title>
		<meeting>the 2018 International Symposium on Code Generation and Optimization, CGO 2018<address><addrLine>New York, NY, USA</addrLine></address></meeting>
		<imprint>
			<publisher>ACM</publisher>
			<date type="published" when="2018" />
			<biblScope unit="page" from="300" to="313" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b8">
	<analytic>
		<title level="a" type="main">Performance comparison of register allocation algorithms in dynamic binary translation</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Z</forename><surname>Cai</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Liang</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Z</forename><surname>Qi</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">L</forename><surname>Jiang</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">X</forename><surname>Li</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">H</forename><surname>Guan</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Y</forename><surname>Chen</surname></persName>
		</author>
		<idno type="doi">doi:10.1109/KSE.2009.16</idno>
	</analytic>
	<monogr>
		<title level="m">2009 International Conference on Knowledge and Systems Engineering</title>
		<imprint>
			<date type="published" when="2009-10" />
			<biblScope unit="page" from="113" to="119" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b9">
	<analytic>
		<title level="a" type="main">Magixen: Combining binary translation and virtualization</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Matthew</forename><surname>Chapman</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Daniel</forename><forename type="middle">J</forename><surname>Magenheimer</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Parthasarathy</forename><surname>Ranganathan</surname></persName>
		</author>
		<idno>HPL-2007-77</idno>
	</analytic>
	<monogr>
		<title level="m">Enterprise Systems and Software Laboratory</title>
		<imprint>
			<date type="published" when="2007" />
		</imprint>
		<respStmt>
			<orgName>HP Laboratories Palo Alto</orgName>
		</respStmt>
	</monogr>
<note type="report_type">Technical Report</note>
</biblStruct>

<biblStruct xml:id="b10">
	<analytic>
		<title level="a" type="main">Fx!32: A profile-directed binary translator</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Anton</forename><surname>Chernoff</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Mark</forename><surname>Herdeg</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Ray</forename><surname>Hookway</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Chris</forename><surname>Reeve</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Norman</forename><surname>Rubin</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Tony</forename><surname>Tye</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Bharadwaj Yadavalli</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">John</forename><surname>Yates</surname></persName>
		</author>
		<idno type="doi">0272-1732.doi:10.1109/40.671403</idno>
		<ptr target="http://dx.doi.org/10.1109/40.671403" />
	</analytic>
	<monogr>
		<title level="j">IEEE Micro</title>
		<imprint>
			<biblScope unit="volume">18</biblScope>
			<biblScope unit="issue">2</biblScope>
			<biblScope unit="page" from="56" to="64" />
			<date type="published" when="1998-03" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b11">
	<monogr>
		<title level="m" type="main">Walkabout: A retargetable dynamic binary translation framework</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Cristina</forename><surname>Cifuentes</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Brian</forename><surname>Lewis</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">David</forename><surname>Ung</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2002" />
			<publisher>Sun Microsystems, Inc</publisher>
			<pubPlace>Mountain View, CA, USA</pubPlace>
		</imprint>
	</monogr>
<note type="report_type">Technical report</note>
</biblStruct>

<biblStruct xml:id="b12">
	<monogr>
		<title level="m" type="main">Shade: A fast instruction set simulator for execution profiling</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">F</forename><surname>Robert</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">David</forename><surname>Cmelik</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Keppel</surname></persName>
		</author>
		<imprint>
			<date type="published" when="1993" />
			<publisher>Sun Microsystems, Inc</publisher>
			<pubPlace>Mountain View, CA, USA</pubPlace>
		</imprint>
	</monogr>
<note type="report_type">Technical report</note>
</biblStruct>

<biblStruct xml:id="b13">
	<analytic>
		<title level="a" type="main">Cross-isa machine emulation for multicores</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Emilio</forename><forename type="middle">G</forename><surname>Cota</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Paolo</forename><surname>Bonzini</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Alex</forename><surname>Bennée</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Luca</forename><forename type="middle">P</forename><surname>Carloni</surname></persName>
		</author>
		<idno>978-1-5090-4931-8</idno>
		<ptr target="http://dl.acm.org/citation.cfm?id=3049855" />
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 2017 International Symposium on Code Generation and Optimization</title>
		<editor>Vijay Janapa Reddi, Aaron Smith, and Lingjia Tang</editor>
		<meeting>the 2017 International Symposium on Code Generation and Optimization<address><addrLine>Austin, TX, USA</addrLine></address></meeting>
		<imprint>
			<publisher>ACM</publisher>
			<date type="published" when="2017-02-04" />
			<biblScope unit="page" from="210" to="220" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b14">
	<analytic>
		<title level="a" type="main">Hypermambo-x64: Using virtualization to support high-performance transparent binary translation</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Cosmin</forename><surname>Amanieu D&amp;apos;antras</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Jim</forename><surname>Gorgovan</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">John</forename><surname>Garside</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Mikel</forename><surname>Goodacre</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Luján</surname></persName>
		</author>
		<idno type="doi">978-1-4503-4948-2.doi:10.1145/3050748.3050756</idno>
		<ptr target="http://doi.acm.org/10.1145/3050748.3050756" />
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 13th ACM SIGPLAN/SIGOPS International Conference on Virtual Execution Environments, VEE &apos;17</title>
		<meeting>the 13th ACM SIGPLAN/SIGOPS International Conference on Virtual Execution Environments, VEE &apos;17<address><addrLine>New York, NY, USA</addrLine></address></meeting>
		<imprint>
			<publisher>ACM</publisher>
			<date type="published" when="2017" />
			<biblScope unit="page" from="228" to="241" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b15">
	<analytic>
		<title level="a" type="main">Low overhead dynamic binary translation on arm</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Cosmin</forename><surname>Amanieu D&amp;apos;antras</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Jim</forename><surname>Gorgovan</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Mikel</forename><surname>Garside</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Luján</surname></persName>
		</author>
		<idno type="doi">978-1-4503-4988-8.doi:10.1145/3062341.3062371</idno>
		<ptr target="http://doi.acm.org/10.1145/3062341.3062371" />
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 38th ACM SIG-PLAN Conference on Programming Language Design and Implementation, PLDI 2017</title>
		<meeting>the 38th ACM SIG-PLAN Conference on Programming Language Design and Implementation, PLDI 2017<address><addrLine>New York, NY, USA</addrLine></address></meeting>
		<imprint>
			<publisher>ACM</publisher>
			<date type="published" when="2017" />
			<biblScope unit="page" from="333" to="346" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b16">
	<analytic>
		<title level="a" type="main">The transmeta code morphing&amp;trade; software: Using speculation, recovery, and adaptive retranslation to address real-life challenges</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">James</forename><forename type="middle">C</forename><surname>Dehnert</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Brian</forename><forename type="middle">K</forename><surname>Grant</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">John</forename><forename type="middle">P</forename><surname>Banning</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Richard</forename><surname>Johnson</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Thomas</forename><surname>Kistler</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Alexander</forename><surname>Klaiber</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Jim</forename><surname>Mattson</surname></persName>
		</author>
		<idno>ISBN 0-7695- 1913-X</idno>
		<ptr target="http://dl.acm.org/citation.cfm?id=776261.776263" />
	</analytic>
	<monogr>
		<title level="m">Proceedings of the International Symposium on Code Generation and Optimization: Feedback-directed and Runtime Optimization, CGO &apos;03</title>
		<meeting>the International Symposium on Code Generation and Optimization: Feedback-directed and Runtime Optimization, CGO &apos;03<address><addrLine>Washington, DC, USA</addrLine></address></meeting>
		<imprint>
			<publisher>IEEE Computer Society</publisher>
			<date type="published" when="2003" />
			<biblScope unit="page" from="15" to="24" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b17">
	<analytic>
		<title level="a" type="main">Pqemu: A parallel system emulator based on qemu</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Jiun-Hung</forename><surname>Ding</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Po-Chun</forename><surname>Chang</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Wei-Chung</forename><surname>Hsu</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Yeh-Ching</forename><surname>Chung</surname></persName>
		</author>
		<idno type="doi">doi:10.1109/ICPADS.2011.102</idno>
		<ptr target="https://doi.org/10.1109/ICPADS.2011.102" />
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 2011 IEEE 17th International Conference on Parallel and Distributed Systems, ICPADS &apos;11</title>
		<meeting>the 2011 IEEE 17th International Conference on Parallel and Distributed Systems, ICPADS &apos;11<address><addrLine>Washington, DC, USA</addrLine></address></meeting>
		<imprint>
			<publisher>IEEE Computer Society</publisher>
			<date type="published" when="2011" />
			<biblScope unit="page" from="276" to="283" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b18">
	<analytic>
		<title level="a" type="main">Daisy: Dynamic compilation for 100</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Kemal</forename><surname>Ebcio˘ Glu</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Erik</forename><forename type="middle">R</forename><surname>Altman</surname></persName>
		</author>
		<idno type="doi">10.1145/264107.264126</idno>
		<idno>ISBN 0-89791-901-7. doi: 10. 1145/264107.264126</idno>
		<ptr target="http://doi.acm.org/10.1145/264107.264126" />
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 24th Annual International Symposium on Computer Architecture, ISCA &apos;97</title>
		<meeting>the 24th Annual International Symposium on Computer Architecture, ISCA &apos;97<address><addrLine>New York, NY, USA</addrLine></address></meeting>
		<imprint>
			<publisher>ACM</publisher>
			<date type="published" when="1997" />
			<biblScope unit="page" from="26" to="37" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b19">
	<analytic>
		<title level="a" type="main">Optimizing binary translation of dynamically generated code</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Byron</forename><surname>Hawkins</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Brian</forename><surname>Demsky</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Derek</forename><surname>Bruening</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Qin</forename><surname>Zhao</surname></persName>
		</author>
		<idno>978-1-4799-8161-8</idno>
		<ptr target="http://dl.acm.org/citation.cfm?id=2738600.2738610" />
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 13th Annual IEEE/ACM International Symposium on Code Generation and Optimization, CGO &apos;15</title>
		<meeting>the 13th Annual IEEE/ACM International Symposium on Code Generation and Optimization, CGO &apos;15<address><addrLine>Washington, DC, USA</addrLine></address></meeting>
		<imprint>
			<publisher>IEEE Computer Society</publisher>
			<date type="published" when="2015" />
			<biblScope unit="page" from="68" to="78" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b20">
	<analytic>
		<title level="a" type="main">Hqemu: A multi-threaded and retargetable dynamic binary translator on multicores</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Ding-Yong</forename><surname>Hong</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Chun-Chen</forename><surname>Hsu</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Pen-Chung</forename><surname>Yew</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Jan-Jan</forename><surname>Wu</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Wei-Chung</forename><surname>Hsu</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Pangfeng</forename><surname>Liu</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Chien-Min</forename><surname>Wang</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Yeh-Ching</forename><surname>Chung</surname></persName>
		</author>
		<idno type="doi">doi:10.1145/2259016.2259030</idno>
		<ptr target="http://doi.acm.org/10.1145/2259016.2259030" />
	</analytic>
	<monogr>
		<title level="m">Proceedings of the Tenth International Symposium on Code Generation and Optimization, CGO &apos;12</title>
		<meeting>the Tenth International Symposium on Code Generation and Optimization, CGO &apos;12<address><addrLine>New York, NY, USA</addrLine></address></meeting>
		<imprint>
			<publisher>ACM</publisher>
			<date type="published" when="2012" />
			<biblScope unit="page" from="978" to="979" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b21">
	<analytic>
		<title level="a" type="main">Improving simd parallelism via dynamic binary translation</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Ding-Yong</forename><surname>Hong</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Yu-Ping</forename><surname>Liu</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Sheng-Yu</forename><surname>Fu</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Jan-Jan</forename><surname>Wu</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Wei-Chung</forename><surname>Hsu</surname></persName>
		</author>
		<idno type="doi">1539-9087.doi:10.1145/3173456</idno>
		<ptr target="http://doi.acm.org/10.1145/3173456" />
	</analytic>
	<monogr>
		<title level="j">ACM Trans. Embed. Comput. Syst</title>
		<imprint>
			<biblScope unit="volume">17</biblScope>
			<biblScope unit="issue">3</biblScope>
			<biblScope unit="page">27</biblScope>
			<date type="published" when="2018-02" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b22">
	<monogr>
		<title level="m" type="main">Intel xed</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Intel</surname></persName>
		</author>
		<ptr target="https://intelxed.github.io/.Retrievedon01/11/2018" />
		<imprint>
			<date type="published" when="2018" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b23">
	<analytic>
		<title level="a" type="main">High speed cpu simulation using ltu dynamic binary translation</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Daniel</forename><surname>Jones</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Nigel</forename><surname>Topham</surname></persName>
		</author>
		<idno type="doi">978-3-540-92989-5.doi:10.1007/978-3-540-92990-1_6</idno>
		<ptr target="http://dx.doi.org/10.1007/978-3-540-92990-1_6" />
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 4th International Conference on High Performance Embedded Architectures and Compilers, HiPEAC &apos;09</title>
		<meeting>the 4th International Conference on High Performance Embedded Architectures and Compilers, HiPEAC &apos;09<address><addrLine>Berlin, Heidelberg</addrLine></address></meeting>
		<imprint>
			<publisher>Springer-Verlag</publisher>
			<date type="published" when="2009" />
			<biblScope unit="page" from="50" to="64" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b24">
	<analytic>
		<title level="a" type="main">Fast dynamic binary translation for the kernel</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Piyus</forename><surname>Kedia</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Sorav</forename><surname>Bansal</surname></persName>
		</author>
		<idno type="doi">978-1-4503-2388-8.doi:10.1145/2517349.2522718</idno>
		<ptr target="http://doi.acm.org/10.1145/2517349.2522718" />
	</analytic>
	<monogr>
		<title level="m">Proceedings of the Twenty-Fourth ACM Symposium on Operating Systems Principles, SOSP &apos;13</title>
		<meeting>the Twenty-Fourth ACM Symposium on Operating Systems Principles, SOSP &apos;13<address><addrLine>New York, NY, USA</addrLine></address></meeting>
		<imprint>
			<publisher>ACM</publisher>
			<date type="published" when="2013" />
			<biblScope unit="page" from="101" to="115" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b25">
	<monogr>
		<title level="m" type="main">Transitive and QuickTransit overview</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Paul</forename><surname>Knowles</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2008" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b26">
	<analytic>
		<title level="a" type="main">Efficient software decoder design</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Rajeev</forename><surname>Krishna</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Todd</forename><surname>Austin</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Technical Committee on Computer Architecture (TCCA) Newsletter</title>
		<imprint>
			<date type="published" when="2001-10" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b27">
	<analytic>
		<title level="a" type="main">Optimizing dynamic binary translation for simd instructions</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Jianhui</forename><surname>Li</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Qi</forename><surname>Zhang</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Shu</forename><surname>Xu</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Bo</forename><surname>Huang</surname></persName>
		</author>
		<idno type="doi">ISBN0-7695-2499-0.doi:10.1109/CGO.2006.27</idno>
		<ptr target="http://dx.doi.org/10.1109/CGO.2006.27" />
	</analytic>
	<monogr>
		<title level="m">Proceedings of the International Symposium on Code Generation and Optimization, CGO &apos;06</title>
		<meeting>the International Symposium on Code Generation and Optimization, CGO &apos;06<address><addrLine>Washington, DC, USA</addrLine></address></meeting>
		<imprint>
			<publisher>IEEE Computer Society</publisher>
			<date type="published" when="2006" />
			<biblScope unit="page" from="269" to="280" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b28">
	<analytic>
		<title level="a" type="main">Pydgin: generating fast instruction set simulators from simple architecture descriptions with meta-tracing jit compilers</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Lockhart</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">B</forename><surname>Ilbeyi</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><surname>Batten</surname></persName>
		</author>
		<idno type="doi">doi:10.1109/ISPASS.2015.7095811</idno>
	</analytic>
	<monogr>
		<title level="m">2015 IEEE International Symposium on Performance Analysis of Systems and Software (ISPASS)</title>
		<imprint>
			<date type="published" when="2015-03" />
			<biblScope unit="page" from="256" to="267" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b29">
	<analytic>
		<title level="a" type="main">Addressing the challenges of dbt for the arm architecture</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Ryan</forename><forename type="middle">W</forename><surname>Moore</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">José</forename><forename type="middle">A</forename><surname>Baiocchi</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Bruce</forename><forename type="middle">R</forename><surname>Childers</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Jack</forename><forename type="middle">W</forename><surname>Davidson</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Jason</forename><forename type="middle">D</forename><surname>Hiser</surname></persName>
		</author>
		<idno type="doi">978-1-60558-356-3.doi:10.1145/1542452.1542472</idno>
		<ptr target="http://doi.acm.org/10.1145/1542452.1542472" />
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 2009 ACM SIGPLAN/SIGBED Conference on Languages, Compilers, and Tools for Embedded Systems, LCTES &apos;09</title>
		<meeting>the 2009 ACM SIGPLAN/SIGBED Conference on Languages, Compilers, and Tools for Embedded Systems, LCTES &apos;09<address><addrLine>New York, NY, USA</addrLine></address></meeting>
		<imprint>
			<publisher>ACM</publisher>
			<date type="published" when="2009" />
			<biblScope unit="page" from="147" to="156" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b30">
	<analytic>
		<title level="a" type="main">Harmonia: A transparent, efficient, and harmonious dynamic binary translator targeting the intel architecture</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Guilherme</forename><surname>Ottoni</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Thomas</forename><surname>Hartin</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Christopher</forename><surname>Weaver</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Jason</forename><surname>Brandt</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Belliappa</forename><surname>Kuttanna</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Hong</forename><surname>Wang</surname></persName>
		</author>
		<idno type="doi">978-1-4503-0698-0.doi:10.1145/2016604.2016635</idno>
		<ptr target="http://doi.acm.org/10.1145/2016604.2016635" />
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 8th ACM International Conference on Computing Frontiers, CF &apos;11</title>
		<meeting>the 8th ACM International Conference on Computing Frontiers, CF &apos;11<address><addrLine>New York, NY, USA</addrLine></address></meeting>
		<imprint>
			<publisher>ACM</publisher>
			<date type="published" when="2011" />
			<biblScope unit="volume">26</biblScope>
			<biblScope unit="page" from="1" to="26" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b31">
	<analytic>
		<title level="a" type="main">Register liveness analysis for optimizing dynamic binary translation</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Probst</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Krall</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">B</forename><surname>Scholz</surname></persName>
		</author>
		<idno type="doi">doi:10.1109/WCRE.2002.1173062</idno>
	</analytic>
	<monogr>
		<title level="m">Ninth Working Conference on Reverse Engineering, 2002. Proceedings</title>
		<imprint>
			<date type="published" when="2002" />
			<biblScope unit="page" from="35" to="44" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b32">
	<analytic>
		<title level="a" type="main">Hardwareaccelerated dynamic binary translation</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Rokicki</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">E</forename><surname>Rohou</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Derrien</surname></persName>
		</author>
		<idno>doi: 10.23919/ DATE.2017.7927147</idno>
	</analytic>
	<monogr>
		<title level="m">Design, Automation Test in Europe Conference Exhibition</title>
		<imprint>
			<date type="published" when="2017-03" />
			<biblScope unit="page" from="1062" to="1067" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b33">
	<analytic>
		<title level="a" type="main">Retargetable and reconfigurable software dynamic translation</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">K</forename><surname>Scott</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">N</forename><surname>Kumar</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Velusamy</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">B</forename><surname>Childers</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><forename type="middle">W</forename><surname>Davidson</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><forename type="middle">L</forename><surname>Soffa</surname></persName>
		</author>
		<idno>ISBN 0-7695- 1913-X</idno>
		<ptr target="http://dl.acm.org/citation.cfm?id=776261.776265" />
	</analytic>
	<monogr>
		<title level="m">Proceedings of the International Symposium on Code Generation and Optimization: Feedback-directed and Runtime Optimization, CGO &apos;03</title>
		<meeting>the International Symposium on Code Generation and Optimization: Feedback-directed and Runtime Optimization, CGO &apos;03<address><addrLine>Washington, DC, USA</addrLine></address></meeting>
		<imprint>
			<publisher>IEEE Computer Society</publisher>
			<date type="published" when="2003" />
			<biblScope unit="page" from="36" to="47" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b34">
	<monogr>
		<title level="m" type="main">Strata: A software dynamic translation infrastructure</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Kevin</forename><surname>Scott</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Jack</forename><surname>Davidson</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2001" />
			<pubPlace>Charlottesville, VA, USA</pubPlace>
		</imprint>
		<respStmt>
			<orgName>University of Virginia</orgName>
		</respStmt>
	</monogr>
<note type="report_type">Technical report</note>
</biblStruct>

<biblStruct xml:id="b35">
	<analytic>
		<title level="a" type="main">A translation method of arm machine code to llvmir for binary code parallelization and optimization</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">K</forename><surname>Shigenobu</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">K</forename><surname>Ootsu</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><surname>Ohkawa</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><surname>Yokota</surname></persName>
		</author>
		<idno type="doi">doi:10.1109/CANDAR.2017.75.URLdoi.ieeecomputersociety.org/10.1109/CANDAR.2017.75</idno>
	</analytic>
	<monogr>
		<title level="m">2017 Fifth International Symposium on Computing and Networking (CANDAR)</title>
		<imprint>
			<date type="published" when="2018-11" />
			<biblScope unit="volume">00</biblScope>
			<biblScope unit="page" from="575" to="579" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b36">
	<analytic>
		<title level="a" type="main">Background optimization in full system binary translation</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><forename type="middle">A</forename><surname>Sokolov</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><forename type="middle">V</forename><surname>Ermolovich</surname></persName>
		</author>
		<idno type="doi">10.1134/S0361768812030073</idno>
		<idno>1608-3261. doi: 10.1134/ S0361768812030073</idno>
		<ptr target="https://doi.org/10.1134/S0361768812030073" />
	</analytic>
	<monogr>
		<title level="j">Programming and Computer Software</title>
		<imprint>
			<biblScope unit="volume">38</biblScope>
			<biblScope unit="issue">3</biblScope>
			<biblScope unit="page" from="119" to="126" />
			<date type="published" when="2012-06" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b37">
	<analytic>
		<title level="a" type="main">Isamap: Instruction mapping driven by dynamic binary translation</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Maxwell</forename><surname>Souza</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Daniel</forename><surname>Nic</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">$</forename><surname>#225;Cio</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Guido</forename><surname>Araújo</surname></persName>
		</author>
		<idno type="doi">10.1007/978-3-642-24322-6_11</idno>
		<idno>doi: 10.1007/ 978-3-642-24322-6_11</idno>
		<ptr target="http://dx.doi.org/10.1007/978-3-642-24322-6_11" />
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 2010 International Conference on Computer Architecture, ISCA&apos;10</title>
		<meeting>the 2010 International Conference on Computer Architecture, ISCA&apos;10<address><addrLine>Berlin, Heidelberg</addrLine></address></meeting>
		<imprint>
			<publisher>SpringerVerlag</publisher>
			<date type="published" when="2012" />
			<biblScope unit="page" from="117" to="138" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b38">
	<analytic>
		<title level="a" type="main">Efficient dual-isa support in a retargetable, asynchronous dynamic binary translator</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Tom</forename><surname>Spink</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Harry</forename><surname>Wagstaff</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Björn</forename><surname>Franke</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Topham</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">SAMOS</title>
		<imprint>
			<date type="published" when="2015" />
			<biblScope unit="page" from="103" to="112" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b39">
	<analytic>
		<title level="a" type="main">Hardware-accelerated cross-architecture full-system virtualization</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Tom</forename><surname>Spink</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Harry</forename><surname>Wagstaff</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Björn</forename><surname>Franke</surname></persName>
		</author>
		<idno type="doi">1544-3566.doi:10.1145/2996798</idno>
		<ptr target="http://doi.acm.org/10.1145/2996798" />
	</analytic>
	<monogr>
		<title level="j">ACM Trans. Archit. Code Optim</title>
		<imprint>
			<biblScope unit="volume">13</biblScope>
			<biblScope unit="issue">4</biblScope>
			<date type="published" when="2016-10" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b40">
	<analytic>
		<title level="a" type="main">Mobilesandbox: Combining static and dynamic analysis with machine-learning techniques</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Michael</forename><surname>Spreitzenbarth</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Thomas</forename><surname>Schreck</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Florian</forename><surname>Echtler</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Daniel</forename><surname>Arp</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Johannes</forename><surname>Hoffmann</surname></persName>
		</author>
		<idno type="doi">1615-5262.doi:10.1007/s10207-014-0250-0</idno>
		<ptr target="http://dx.doi.org/10.1007/s10207-014-0250-0" />
	</analytic>
	<monogr>
		<title level="j">Int. J. Inf. Secur</title>
		<imprint>
			<biblScope unit="volume">14</biblScope>
			<biblScope unit="issue">2</biblScope>
			<biblScope unit="page" from="141" to="153" />
			<date type="published" when="2015-04" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b41">
	<monogr>
		<title level="m" type="main">Vulcan: Binary transformation in a distributed environment</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Amitabh</forename><surname>Srivastava</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Andrew</forename><surname>Edwards</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Hoi</forename><surname>Vo</surname></persName>
		</author>
		<ptr target="https://www.microsoft.com/en-us/research/publication/vulcan-binary-transformation-in-a-distributed-environm" />
		<imprint>
			<date type="published" when="2001-04" />
			<pubPlace>Microsoft Research</pubPlace>
		</imprint>
	</monogr>
<note type="report_type">Technical report</note>
</biblStruct>

<biblStruct xml:id="b42">
	<analytic>
		<title level="a" type="main">Generating decision trees for decoding binaries</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Henrik</forename><surname>Theiling</surname></persName>
		</author>
		<idno type="doi">1-58113-426-6.doi:10.1145/384198.384213</idno>
		<ptr target="http://doi.acm.org/10.1145/384198.384213" />
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 2001 ACM SIG-PLAN Workshop on Optimization of Middleware and Distributed Systems, OM &apos;01</title>
		<meeting>the 2001 ACM SIG-PLAN Workshop on Optimization of Middleware and Distributed Systems, OM &apos;01<address><addrLine>New York, NY, USA</addrLine></address></meeting>
		<imprint>
			<publisher>ACM</publisher>
			<date type="published" when="2001" />
			<biblScope unit="page" from="112" to="120" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b43">
	<monogr>
		<title level="m" type="main">Specification-driven dynamic binary translation</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Jens</forename><surname>Tröger</surname></persName>
		</author>
		<ptr target="https://eprints.qut.edu.au/16007/" />
		<imprint>
			<date type="published" when="2005" />
		</imprint>
		<respStmt>
			<orgName>Queensland University of Technology</orgName>
		</respStmt>
	</monogr>
<note type="report_type">PhD thesis</note>
</biblStruct>

<biblStruct xml:id="b44">
	<analytic>
		<title level="a" type="main">Machine-adaptable dynamic binary translation</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">David</forename><surname>Ung</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Cristina</forename><surname>Cifuentes</surname></persName>
		</author>
		<idno type="doi">1-58113-241-7.doi:10.1145/351397.351414</idno>
		<ptr target="http://doi.acm.org/10.1145/351397.351414" />
	</analytic>
	<monogr>
		<title level="m">Proceedings of the ACM SIGPLAN Workshop on Dynamic and Adaptive Compilation and Optimization, DYNAMO &apos;00</title>
		<meeting>the ACM SIGPLAN Workshop on Dynamic and Adaptive Compilation and Optimization, DYNAMO &apos;00<address><addrLine>New York, NY, USA</addrLine></address></meeting>
		<imprint>
			<publisher>ACM</publisher>
			<date type="published" when="2000" />
			<biblScope unit="page" from="41" to="51" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b45">
	<analytic>
		<title level="a" type="main">Early partial evaluation in a jit-compiled, retargetable instruction set simulator generated from a high-level architecture description</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">H</forename><surname>Wagstaff</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Gould</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">B</forename><surname>Franke</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">N</forename><surname>Topham</surname></persName>
		</author>
		<idno type="doi">doi:10.1145/2463209.2488760</idno>
	</analytic>
	<monogr>
		<title level="m">50th ACM/EDAC/IEEE Design Automation Conference (DAC)</title>
		<imprint>
			<date type="published" when="2013-05" />
			<biblScope unit="page" from="1" to="6" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b46">
	<analytic>
		<title level="a" type="main">Simbench: A portable benchmarking methodology for fullsystem simulators</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">H</forename><surname>Wagstaff</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">B</forename><surname>Bodin</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><surname>Spink</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">B</forename><surname>Franke</surname></persName>
		</author>
		<idno>doi: 10.1109/ ISPASS.2017.7975293</idno>
	</analytic>
	<monogr>
		<title level="m">2017 IEEE International Symposium on Performance Analysis of Systems and Software (ISPASS)</title>
		<imprint>
			<date type="published" when="2017-04" />
			<biblScope unit="page" from="217" to="226" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b47">
	<analytic>
		<title level="a" type="main">Stardbt: An efficient multi-platform dynamic binary translation system</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Cheng</forename><surname>Wang</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Shiliang</forename><surname>Hu</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Ho-Seop</forename><surname>Kim</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Sreekumar</forename><forename type="middle">R</forename><surname>Nair</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Mauricio</forename><surname>Breternitz</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Zhiwei</forename><surname>Ying</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Youfeng</forename><surname>Wu</surname></persName>
		</author>
		<idno>3-540-74308-1, 978- 3-540-74308-8</idno>
		<ptr target="http://dl.acm.org/citation.cfm?id=2392163.2392166" />
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 12th AsiaPacific Conference on Advances in Computer Systems Architecture, ACSAC&apos;07</title>
		<meeting>the 12th AsiaPacific Conference on Advances in Computer Systems Architecture, ACSAC&apos;07<address><addrLine>Berlin, Heidelberg</addrLine></address></meeting>
		<imprint>
			<publisher>Springer-Verlag</publisher>
			<date type="published" when="2007" />
			<biblScope unit="page" from="4" to="15" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b48">
	<analytic>
		<title level="a" type="main">A general persistent code caching framework for dynamic binary translation (dbt)</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Wenwen</forename><surname>Wang</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Pen-Chung</forename><surname>Yew</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Antonia</forename><surname>Zhai</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Stephen</forename><surname>Mccamant</surname></persName>
		</author>
		<idno>978-1-931971-30-0</idno>
		<ptr target="http://dl.acm.org/citation.cfm?id=3026959.3027013" />
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 2016 USENIX Conference on Usenix Annual Technical Conference, USENIX ATC &apos;16</title>
		<meeting>the 2016 USENIX Conference on Usenix Annual Technical Conference, USENIX ATC &apos;16<address><addrLine>Berkeley, CA, USA</addrLine></address></meeting>
		<imprint>
			<date type="published" when="2016" />
			<biblScope unit="page" from="591" to="603" />
		</imprint>
	</monogr>
	<note>USENIX Association</note>
</biblStruct>

<biblStruct xml:id="b49">
	<analytic>
		<title level="a" type="main">Enhancing cross-isa dbt through automatically learned translation rules</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Wenwen</forename><surname>Wang</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Stephen</forename><surname>Mccamant</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Antonia</forename><surname>Zhai</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Pen-Chung</forename><surname>Yew</surname></persName>
		</author>
		<idno type="doi">978-1-4503-4911-6.doi:10.1145/3173162.3177160</idno>
		<ptr target="http://doi.acm.org/10.1145/3173162.3177160" />
	</analytic>
	<monogr>
		<title level="m">Proceedings of the Twenty-Third International Conference on Architectural Support for Programming Languages and Operating Systems, ASPLOS &apos;18</title>
		<meeting>the Twenty-Third International Conference on Architectural Support for Programming Languages and Operating Systems, ASPLOS &apos;18<address><addrLine>New York, NY, USA</addrLine></address></meeting>
		<imprint>
			<publisher>ACM</publisher>
			<date type="published" when="2018" />
			<biblScope unit="page" from="84" to="97" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b50">
	<analytic>
		<title level="a" type="main">Hspt: Practical implementation and efficient management of embedded shadow page tables for cross-isa system virtual machines</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Zhe</forename><surname>Wang</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Jianjun</forename><surname>Li</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Chenggang</forename><surname>Wu</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Dongyan</forename><surname>Yang</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Zhenjiang</forename><surname>Wang</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Wei-Chung</forename><surname>Hsu</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Bin</forename><surname>Li</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Yong</forename><surname>Guan</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">ACM SIGPLAN Notices</title>
		<imprint>
			<publisher>ACM</publisher>
			<date type="published" when="2015" />
			<biblScope unit="volume">50</biblScope>
			<biblScope unit="page" from="53" to="64" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b51">
	<monogr>
		<title level="m" type="main">Microsoft built an xbox 360 emulator to make games run on the xbox one</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Tom</forename><surname>Warren</surname></persName>
		</author>
		<ptr target="https://www.theverge.com/2015/6/15/8785955/microsoft-xbox-one-xbox-360-emulator-software" />
		<imprint>
			<date type="published" when="2015" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b52">
	<analytic>
		<title level="a" type="main">Embra: Fast and flexible machine simulation</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Emmett</forename><surname>Witchel</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Mendel</forename><surname>Rosenblum</surname></persName>
		</author>
		<idno type="doi">ISBN0-89791-793-6.doi:10.1145/233013.233025</idno>
		<ptr target="http://doi.acm.org/10.1145/233013.233025" />
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 1996 ACM SIGMETRICS International Conference on Measurement and Modeling of Computer Systems, SIGMETRICS &apos;96</title>
		<meeting>the 1996 ACM SIGMETRICS International Conference on Measurement and Modeling of Computer Systems, SIGMETRICS &apos;96<address><addrLine>New York, NY, USA</addrLine></address></meeting>
		<imprint>
			<publisher>ACM</publisher>
			<date type="published" when="1996" />
			<biblScope unit="page" from="68" to="79" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b53">
	<analytic>
		<title level="a" type="main">Metadata driven memory optimizations in dynamic binary translator</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Chaohao</forename><surname>Xu</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Jianhui</forename><surname>Li</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Tao</forename><surname>Bao</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Yun</forename><surname>Wang</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Bo</forename><surname>Huang</surname></persName>
		</author>
		<idno type="doi">978-1-59593-630-1.doi:10.1145/1254810.1254831</idno>
		<ptr target="http://doi.acm.org/10.1145/1254810.1254831" />
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 3rd International Conference on Virtual Execution Environments, VEE &apos;07</title>
		<meeting>the 3rd International Conference on Virtual Execution Environments, VEE &apos;07<address><addrLine>New York, NY, USA</addrLine></address></meeting>
		<imprint>
			<publisher>ACM</publisher>
			<date type="published" when="2007" />
			<biblScope unit="page" from="148" to="157" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b54">
	<analytic>
		<title level="a" type="main">Hermes: A fast cross-isa binary translator with post-optimization</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Xiaochun</forename><surname>Zhang</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Qi</forename><surname>Guo</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Yunji</forename><surname>Chen</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Tianshi</forename><surname>Chen</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Weiwu</forename><surname>Hu</surname></persName>
		</author>
		<idno>978-1-4799-8161-8</idno>
		<ptr target="http://dl.acm.org/citation.cfm?id=2738600.2738631" />
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 13th Annual IEEE/ACM International Symposium on Code Generation and Optimization, CGO &apos;15</title>
		<meeting>the 13th Annual IEEE/ACM International Symposium on Code Generation and Optimization, CGO &apos;15<address><addrLine>Washington, DC, USA</addrLine></address></meeting>
		<imprint>
			<publisher>IEEE Computer Society</publisher>
			<date type="published" when="2015" />
			<biblScope unit="page" from="246" to="256" />
		</imprint>
	</monogr>
</biblStruct>

				</listBibl>
			</div>
		</back>
	</text>
</TEI>
