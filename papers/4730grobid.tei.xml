<?xml version="1.0" encoding="UTF-8"?>
<TEI xmlns="http://www.tei-c.org/ns/1.0" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
xsi:schemaLocation="http://www.tei-c.org/ns/1.0 /Users/atharsefid/Desktop/grobid-0.5.3/grobid-home/schemas/xsd/Grobid.xsd"
 xmlns:xlink="http://www.w3.org/1999/xlink">
	<teiHeader xml:lang="en">
		<encodingDesc>
			<appInfo>
				<application version="0.5.3" ident="GROBID" when="2020-09-29T04:30+0000">
					<ref target="https://github.com/kermitt2/grobid">GROBID - A machine learning software for extracting information from scholarly documents</ref>
				</application>
			</appInfo>
		</encodingDesc>
		<fileDesc>
			<titleStmt>
				<title level="a" type="main">USENIX Association Proceedings of HotOS IX: The 9th Workshop on Hot Topics in Operating Systems HotOS IX: The 9th Workshop on Hot Topics in Operating Systems Towards a Semantic-Aware File Store HotOS IX: The 9th Workshop on Hot Topics in Operating Systems USENIX Association 182</title>
			</titleStmt>
			<publicationStmt>
				<publisher/>
				<availability status="unknown"><licence/></availability>
				<date>May 18-21, 2003</date>
			</publicationStmt>
			<sourceDesc>
				<biblStruct>
					<analytic>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Zhichen</forename><surname>Xu</surname></persName>
							<email>zhichen@hpl.hp.com</email>
							<affiliation key="aff0">
								<orgName type="institution">HP Laboratories</orgName>
								<address>
									<addrLine>1501 Page Mill Rd., MLS 1177</addrLine>
									<postCode>94304</postCode>
									<settlement>Lihue, Palo Alto</settlement>
									<region>Hawaii, CA</region>
									<country key="US">USA</country>
								</address>
							</affiliation>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Magnus</forename><surname>Karlsson</surname></persName>
							<email>karlsson@hpl.hp.com</email>
							<affiliation key="aff0">
								<orgName type="institution">HP Laboratories</orgName>
								<address>
									<addrLine>1501 Page Mill Rd., MLS 1177</addrLine>
									<postCode>94304</postCode>
									<settlement>Lihue, Palo Alto</settlement>
									<region>Hawaii, CA</region>
									<country key="US">USA</country>
								</address>
							</affiliation>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Chunqiang</forename><surname>Tang</surname></persName>
							<email>chunqian@hpl.hp.com</email>
							<affiliation key="aff0">
								<orgName type="institution">HP Laboratories</orgName>
								<address>
									<addrLine>1501 Page Mill Rd., MLS 1177</addrLine>
									<postCode>94304</postCode>
									<settlement>Lihue, Palo Alto</settlement>
									<region>Hawaii, CA</region>
									<country key="US">USA</country>
								</address>
							</affiliation>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Christos</forename><surname>Karamanolis</surname></persName>
							<email>christos@hpl.hp.com</email>
							<affiliation key="aff0">
								<orgName type="institution">HP Laboratories</orgName>
								<address>
									<addrLine>1501 Page Mill Rd., MLS 1177</addrLine>
									<postCode>94304</postCode>
									<settlement>Lihue, Palo Alto</settlement>
									<region>Hawaii, CA</region>
									<country key="US">USA</country>
								</address>
							</affiliation>
						</author>
						<title level="a" type="main">USENIX Association Proceedings of HotOS IX: The 9th Workshop on Hot Topics in Operating Systems HotOS IX: The 9th Workshop on Hot Topics in Operating Systems Towards a Semantic-Aware File Store HotOS IX: The 9th Workshop on Hot Topics in Operating Systems USENIX Association 182</title>
					</analytic>
					<monogr>
						<imprint>
							<date type="published">May 18-21, 2003</date>
						</imprint>
					</monogr>
					<note>THE ADVANCED COMPUTING SYSTEMS ASSOCIATION 181 Common types of semantic: versioning, dependencies, contents, contexts,</note>
				</biblStruct>
			</sourceDesc>
		</fileDesc>
		<profileDesc>
			<abstract>
				<p>Traditional hierarchical namespaces are not sufficient for representing and managing the rich semantics of today&apos;s storage systems. In this paper, we discuss the principles of semantic-aware file stores. We identify the requirements of applications and end-users and propose to use a generic data model to capture and represent file semantics. A distinct challenge that we face is to handle dynamic evolution of the data schemas. Further, we outline a framework of basic relations and tools for generating and using semantic metadata. The proposed data model and framework are aimed to be more generic and flexible than what is offered by existing semantic file systems. We envision a range of applications and tools that will exploit semantic information, ranging from personal storage systems with features for advanced searching and roaming access, to enterprise systems supporting distributed data location or archiving. 1 Motivation Over the last several years, we have witnessed an unprecedented growth of the volume of stored digital data. In 1999, a study estimated the amount of original digital data generated annually to be in excess of 1,700 petabyte [15]. It is estimated that this number has been nearly doubling annually since then [22]. This explosive growth is reflected on the ever increasing complexity and cost for storage management. One instance of this problem occurs in file stores. The traditional hierarchical file system is no longer adequate for systems that need to store billions of files and capture different types of semantic information that is required to efficiently access, share, and manage those files. Consider, for example, the case of a digital movie production studio. Digital movies consist of hundreds of scenes. Each scene is composed of thousands of different data objects , including character models, backgrounds, and lighting models. These objects are typically implemented as files that are shared by tens of artists. There is a range of semantic information that needs to be captured and used in this environment. When a new version of the hair of a character is created, it has to be annotated with the changes done. Further, it is compatible with only certain * Chunqiang Tang is with Department of Computer Science, University of Rochester, Rochester, NY. versions of the head. Such information about versions and dependencies among files is important when rendering a scene; it is required to combine objects that are compatible with each other and make sense in some context. When composing a scene, an artist uses material that other people have edited and stored in the system. Content-based searching (e.g., search for &quot;green lush grass&quot;) as opposed to searching by file name can greatly simplify collaboration and improve productivity. The view of what data are stored in the system may potentially be different depending on application and user. For example, an artist wants to see only objects that are compatible with the version of the character she is working on; a backup system only sees files that are marked as &quot;persistent&quot; by the artists. Further, tracking context information, such as the files accessed before , and other statistical information may enable intelligent resource provisioning, data caching and prefetching, and improve search efficiency and accuracy. Examples of common types of semantic information that needs to be captured include: (i) file versioning, (ii) application-based dependencies, (iii) attribute-based semantics , (iv) content-based semantics, and (v) context-based information. Considered individually, some of these types of semantic information are captured and used by existing applications and tools, such as versioning control systems or software configuration tools. However, different types of semantic information often depend on each other and are related to other functions of a storage system. For example , application-based dependencies are defined on versions of files. Also, dependencies need to be considered during archiving, to save a consistent snapshot of the application state. We argue that it is easier and more efficient to manage all the above types of semantic information in a single, general-purpose system, that many applications can use. Along these lines, we propose a semantic-aware file store, named pStore, that extends file systems-a storage abstraction assumed by many applications-to support semantic metadata. The paper makes the following contributions. â€¢ Proposes using a generic data model to represent semantic information in file systems. The data model has two main features. First, it is extensible to cover semantic information other than the types described above.</p>
			</abstract>
		</profileDesc>
	</teiHeader>
	<text xml:lang="en">
		<body>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="1">Motivation</head><p>Over the last several years, we have witnessed an unprecedented growth of the volume of stored digital data. In 1999, a study estimated the amount of original digital data generated annually to be in excess of 1,700 petabyte <ref type="bibr" target="#b14">[15]</ref>. It is estimated that this number has been nearly doubling annually since then <ref type="bibr" target="#b21">[22]</ref>. This explosive growth is reflected on the ever increasing complexity and cost for storage management. One instance of this problem occurs in file stores. The traditional hierarchical file system is no longer adequate for systems that need to store billions of files and capture different types of semantic information that is required to efficiently access, share, and manage those files. Consider, for example, the case of a digital movie production studio. Digital movies consist of hundreds of scenes. Each scene is composed of thousands of different data objects, including character models, backgrounds, and lighting models. These objects are typically implemented as files that are shared by tens of artists. There is a range of semantic information that needs to be captured and used in this environment. When a new version of the hair of a character is created, it has to be annotated with the changes done. Further, it is compatible with only certain * Chunqiang Tang is with Department of Computer Science, University of Rochester, Rochester, NY.</p><p>versions of the head. Such information about versions and dependencies among files is important when rendering a scene; it is required to combine objects that are compatible with each other and make sense in some context. When composing a scene, an artist uses material that other people have edited and stored in the system. Content-based searching (e.g., search for "green lush grass") as opposed to searching by file name can greatly simplify collaboration and improve productivity. The view of what data are stored in the system may potentially be different depending on application and user. For example, an artist wants to see only objects that are compatible with the version of the character she is working on; a backup system only sees files that are marked as "persistent" by the artists. Further, tracking context information, such as the files accessed before, and other statistical information may enable intelligent resource provisioning, data caching and prefetching, and improve search efficiency and accuracy. Examples of common types of semantic information that needs to be captured include: (i) file versioning, (ii) application-based dependencies, (iii) attribute-based semantics, (iv) content-based semantics, and (v) contextbased information. Considered individually, some of these types of semantic information are captured and used by existing applications and tools, such as versioning control systems or software configuration tools. However, different types of semantic information often depend on each other and are related to other functions of a storage system. For example, application-based dependencies are defined on versions of files. Also, dependencies need to be considered during archiving, to save a consistent snapshot of the application state. We argue that it is easier and more efficient to manage all the above types of semantic information in a single, general-purpose system, that many applications can use. Along these lines, we propose a semantic-aware file store, named pStore, that extends file systems-a storage abstraction assumed by many applications-to support semantic metadata. The paper makes the following contributions.</p><p>â€¢ Proposes using a generic data model to represent semantic information in file systems. The data model has two main features. First, it is extensible to cover semantic information other than the types described above. Second, handles schema evolution, which is essential for many data management applications where semantic information is discovered incrementally.</p><p>â€¢ Introduces a framework with built-in support for representing and providing access to a set of basic types of semantic information in file systems.</p><p>â€¢ Outlines a range of applications and tools that can exploit rich semantic information.</p><p>â€¢ Concludes with a list of research challenges that need to be addressed to realize the vision.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2">Architecture of pStore</head><p>The architecture of pStore is illustrated in <ref type="figure" target="#fig_0">Figure 1</ref>. pStore makes no particular assumption of the underlying file repository, except that it provides a flat space of unique object IDs. The core of pStore is a generic data model that is used to represent semantic information. On top of the data model, a set of basic functionality modules are provided to programmers that wish to develop tools of applications that use or change the semantic data. We describe the basic components of pStore in the following sections.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.1">Semantic data model</head><p>pStore proposes using a generic data model to capture different types of semantic information in file stores. The data model should meet the following requirements.</p><p>â€¢ Allow to specify well-defined schemata (schema definition language).</p><p>â€¢ Support dynamic schema evolution to capture new or evolving types of semantic information.</p><p>â€¢ Be simple to use, lightweight, make no assumptions about the semantics of the metadata.</p><p>â€¢ Be platform independent and provide interoperability between applications that manage and exchange metadata.</p><p>â€¢ Facilitate integration with resources outside the file store and support exporting metadata to the web.</p><p>â€¢ Leverage existing standards and corresponding tools, such as query languages.</p><p>Database systems do not fulfill the above requirements, because of two main reasons. First, DBs typically require a predefined schema and impose strict integrity constraints. They cannot effectively deal with incremental and dynamic schema evolution, which is common in managing unstructured data. Second, not all applications require the heavyweight ACID properties and all the features of a fully-fleshed DB. For example, Unix file systems do not guarantee the ACID properties in the face of system failures.</p><p>Based on these requirements, we propose using a data model that is based in the Resource Description Framework (RDF) <ref type="bibr" target="#b22">[23]</ref>. RDF has been proposed to encode, exchange and reuse metadata on the Web (a fundamental tool for realizing the Semantic Web vision <ref type="bibr" target="#b20">[21]</ref>). RDF has two main advantages. First, it provides the means to capture schemata for metadata that are both human-readable and machine-processable (RDF notations are typically defined in XML). Second, it is designed to allow reuse and extensions of existing schemata for an ever evolving set of semantic metadata. RDF is a model that describes resources. Relations, in RDF, are expressed as tuples of the form: subject property object</p><p>In our case, the subject is a file in the file store. The properties (one or more) that are associated with the subject capture some type of semantic property of the corresponding file. The object of the relation corresponds to the value of the property for the subject, which may be another file or some metadata structure (a literal or composite). Thus, files and metadata structures are both considered resources. In fact, relations themselves can be used as resources for constructing more complex metadata relations. RDF provides no vocabulary that assumes or refers to application-specific semantic information, e.g., certain properties for media files or relations of files that are accessed by the same user. Instead, such classes of resources and properties are defined in the form of an RDF schema. The same RDF notation is used to specify RDF schemata <ref type="bibr" target="#b23">[24]</ref>. This is achieved by providing a set of predefined resources, namely Classes and Properties. For example, in our case, a Class may refer to files with a certain type of content or files that are used by a certain application. For the model, the specific files are resources that are instances of a certain Class. A Property is defined in the schema to have a domain and a range. Each of them can be defined to refer to resources of one or more classes. Classes and Properties can be defined in a hierarchical fashion resulting in schemata that capture complex semantic information. The principles of RDF resemble those of graph-based data models that have been proposed to handle structural irregularity and incompleteness of schemata and rapid schema evolution <ref type="bibr" target="#b0">[1]</ref>. In such systems, the schema is nonmandatory, i.e., it provides some information about the current type of the data, but it does not constrain the format of the data. We have chosen RDF, as it is simple and standardized. A remaining issue is how to implement a repository of RDF relations in a system. We intend to use some lightweight, RISC-style database systems, like the one proposed by Chaudhui and Weikum <ref type="bibr" target="#b3">[4]</ref>.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.2">Basic relations</head><p>In the following, we describe a number of relations that cover the set of common types of semantic information listed in Section 1. An RDF schema is defined for each of these relations, but it is not provided here, due to space restrictions. Neither do we use RDF notation to describe relations. Instead, we use an informal triplet notation, as above, using curly brackets to represent composite properties (constructed by means of blank properties or containers in RDF). File versioning. Each file in pStore corresponds to one file object and multiple file version objects <ref type="bibr" target="#b0">1</ref> . Each update to the file automatically creates a new file version. The notion of a "file" will be represented by a data object that captures some of the basic attributes of the file (owner, file name, etc). For example, it could be the root node in a hierarchical content-addressable storage system <ref type="bibr" target="#b16">[17]</ref>. As soon as the file has some content, each version of the file is represented by another object. There are two types of relations between a file and its versions. Relation o1 has version{o2, v1} states that object with id o2 is version v1 of o1. Similarly, o1 latest version{o2} states that object o2 is the latest version of o1. Property has version may have additional attributes, such as creation time, and comment. Hierarchical name space. The traditional hierarchical name space is defined using the is parent of and in directory properties. E.g., "movie1 is parent of sequence2" represents the file path "movie1/Sequence2". File system access control is represented by the access control property. The range of this property is a Class that defines, e.g., an ACL structure. Dependencies. In addition to the hierarchical relations, a user can define other types of dependencies among objects. In fact, is parent of is just one instance of Property schema Depend on. Instances of this Property may be application specific. For example, the relation Shrek char dep Ogre, where char dep is an instance of Depend on, means that file Shrek has a dependency on file Ogre. Another example of dependency is the relationship between the master copy of the data and its replicas. Associative semantics. Another common relationship is that of a metadata object describing an ordinary file. For instance, Fiona comments text indicates that object text describes the Fiona character. Such metadata will, in many cases, be automatically extracted and used for searching, as explained in the next section. Context information. The data model can also be used to track context information from the file system and user behavior. Examples of related properties include no reads, no writes, accessed before, accessed by, and accessed from. For example, we can use hair accessed before {time=5s, nose} to record the fact that file hair is accessed 5 seconds before accessing file nose. This information can be used, to gather statistics that pStore (or applications) can use to improve the performance of the system. Examples include prefetching and caching in distributed environments, data placement, as well as advanced searching. An important challenge that needs to be addressed is automatically extracting various types of semantic information from data. E.g., people use vector space models to extract features from text documents and images <ref type="bibr" target="#b1">[2,</ref><ref type="bibr" target="#b4">5]</ref>. Similarly, they derive frequency, amplitude, and tempo feature vectors from music data <ref type="bibr" target="#b5">[6]</ref>. More recently, Soules and Ganger <ref type="bibr" target="#b18">[19]</ref> proposed methods for capturing file attributes and inter-file relations, by analyzing user access patterns.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.3">Dynamic evolution of schema</head><p>We expect pStore to provide a set of default schemata, like the ones above (and possibly more). However, we expect users to modify these schemata. For example, in many data management applications, relationships among data objects are identified after the objects are created and may change during the lifetime of the objects, as their usage changes. The usage of data and metadata is often unpredictable and may depend on the actual user or workload. Incremental elaboration of data object classes and their properties is often inevitable. We also expect users to define their own schemata and share them in ad-hoc manners to cover application or site-specific requirements among communities of users. RDF supports dynamic evolution of schema in multiple ways. First, it supports refinement of schema through class inheritance and property polymorphism. Second, the namespace feature of RDF allows for schemata to evolve differently in different contexts, such as application versions or user communities. Last, but not least, the fact that RDF provides a machine-readable notation, facilitates the design of programmable interfaces and tools that allow for automatic extraction, manipulation and exchange of relations and schemata.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.4">Framework</head><p>The pStore framework offers built-in support for representing and accessing semantic metadata in file stores. Event model/consistency control. Inter-file dependencies is an important type of semantic information captured by pStore. Often, such dependencies imply some consistency requirement users assume between the related files. Such requirements vary for different instances of a relation, or even across time. We capture such consistency requirements by augmenting dependency relations with an associated relation of type Event. An event consists of an ordered list of ñ®½™precondition: actionñ®½™ tuples (implemented as a rdf:seq container in RDF). When a data object is accessed (e.g., open, write), the system checks each of these preconditions and executes the corresponding actions if the precondition holds. Suppose that object Shrek depends on object Ogre. One of the events associated with that relation may look like ñ®½™modified: rebuild(Shrek)ñ®½™, specifying that Shrek needs to be regenerated if Ogre is modified. Customized name space views. In addition to the conventional hierarchical name space, the data model provides the basis on which customized per-user or per-application name spaces can be constructed. We sketch several ways that this can be done. One way to construct customized name spaces is by constraining the corresponding relations. A special case is when the customized name space is a sub-graph of the original file system hierarchy. For instance, Shrek is parent of {user=Mary, script} states that object Shrek is a parent directory of object script only for user Mary. Another possibility is to exploit Property inheritance in the schema. For example, Property land mammal{feet} can be regarded as a super class of Property elephant{feet, trunk}. In principle, a virtual directory can be created to include links to an arbitrary set of files, e.g., searching results <ref type="bibr" target="#b7">[8]</ref>. Security and access control. In an enterprise environment such as a digital movie studio, data is its biggest asset. Thus, data dependability is of paramount importance. They use mechanisms such as encryption and access control to protect the data and mechanisms such as erasure coding and replication for high reliability and availability. We envision that such data dependability mechanisms can be represented using our data model. RDF Property inheritance can be used to fine tune the relations for certain types of data. Advanced searching capabilities. One of the open research questions in storage systems today is how to perform advanced and efficient searching of content in large corpuses of data. Our model and framework provide a uniform platform for integrating content, attribute, and context-based searching. For example, it can be used in combination with information retrieval algorithms <ref type="bibr" target="#b1">[2]</ref> that depend on semantic information from the data. Similarly, our model can capture context information (such as access patterns) and inter-file relationships that can be used for advanced context-based searching <ref type="bibr" target="#b18">[19]</ref>. We would also like to provide searching with variable recall and precision to be able to trade-off this against speed. Especially for queries where the recall and precision are not 100%, the ranking of the search results becomes important. This is an area where context information has been successfully used, for example in Google. Archival support. An on-line archival storage system is one of the main applications we envision for pStore. Compression and versioning are essential given the volume and complexity of the data <ref type="bibr" target="#b16">[17]</ref>. The semantic information that our model can capture about the data can be used to reduce storage consumption <ref type="bibr" target="#b10">[11]</ref> and facilitate efficient data organization for fast data storage and retrieval.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3">Application Scenarios</head><p>In the following paragraphs, we describe some examples of applications of pStore other than a digital movie studio to demonstrate the generality of our proposal. Online data sharing. In general, it is desirable that each object can have an arbitrary metadata structure suitable for describing its contents as well as its relationships with other objects. Objects can relate to each other in many different ways: an object may overlap with or include other objects; multiple objects may share descriptive data. In practice, meaningful objects are often identified and associated with their descriptive data incrementally and dynamically, after the data is stored in the system. To provide adequate control, users can be given different access privileges. To facilitate collaboration, in addition to a shared global view of all the data, there may also be customized per-user and per-application views. Advanced searching capabilities are needed to allow people to effectively navigate among the various digital components. A semantic, deep archival system. It is now practically affordable to archive each individual version of a file. Such archival storage system are becoming essential for many critical applications. We list some desirable features. First, a user would like the file store to have a "travel-intime" capability-every change to an object or to the name space is recorded, and a user can travel arbitrary back in time to retrieve any version of a file that ever existed <ref type="bibr" target="#b10">[11]</ref>. An important challenge is to maintain the various dependencies among different versions of objects and handle time as yet another type of semantic information. Second, to reduce storage space consumption, objects should be stored efficiently. Various data clustering and compression techniques are being explored. One way to do this is to exploit the available semantic information. E.g., when generating a new version of a file, the semantic information is used to identify an existing (base) file with similar contents. Only the differences between the new and the base file are stored.</p><p>Last, in restoring a backed-up version, the biggest headache is to find the right document and the right version. With pStore's rich metadata model, the semantic information of files can be associated with files. In the restoring operation, the user describes a desired feature that is known to exist in the recovered version. For example, the system may use content extracts to locate the right version, without requiring the user remembering the exact name or creation date of the restored file. Digital content distribution. In addition to search capabilities, a large-scale distributed file system can utilize the relationships among files to guide data placement, and perform caching and prefetching. CDN more efficient. Another related application is to support data hoarding for mobile users. Before disconnected from the network, all frequently used data for the user are identified through examining the metadata, and are automatically moved to a portable device. Systems such as SEER <ref type="bibr" target="#b9">[10]</ref> use simple semantic hints such as user activity and directory membership for hoarding related files. Their effectiveness is limited by operations such as running the UNIX find utility across an entire file system. Personal storage for desktop users. Many of the features described above can benefit ordinary desktop users as well. As desktop users, we would like to keep every version of important files that we ever created or downloaded, add arbitrary annotations to the files, relate them to the their sources, and create cross links among them. Automated file hoarding can relieve much of the pain to manually identify and move files among computers and mobile devices. Many of us have painful experiences of not finding files. The advanced searching capability would make search much easier.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4">Related Work</head><p>Contemporary file systems use file type information to associate files with the appropriate applications to access them. Further, several systems have experimented with the idea of attribute-based file naming <ref type="bibr" target="#b6">[7,</ref><ref type="bibr" target="#b7">8,</ref><ref type="bibr" target="#b12">13,</ref><ref type="bibr" target="#b15">16,</ref><ref type="bibr" target="#b17">18]</ref>. The file system supports searching on the basis of attributes; the results are reflected on virtual directories that contain pointers to the actual locations of files. SFS <ref type="bibr" target="#b6">[7]</ref> uses a hierarchical directory structure to organize refinements to previous query results. HAC <ref type="bibr" target="#b7">[8]</ref> attempts to combine the benefits of hierarchical and content-based access to files at the same time. A virtual directory (resulting from a query) is an actual directory that allows ordinary file system operations. To maintain the consistency between links in a virtual directory and the files they point to, HAC re-executes queries periodically to update the links in virtual directories. Several systems allow for more flexible ways to combine the hierarchical name space with attribute-based file naming. A file system by Transarc <ref type="bibr" target="#b2">[3]</ref> allows each file to have an associated wrapper, called a synopsis, that contains tag/value attributes and defines methods to manipulate those attributes. Synopses are organized in inheritance hierarchies. Similarly, in a system described in <ref type="bibr" target="#b17">[18]</ref>, each query is given a label. Users can impose "ancestordescendant" relationship on labels, and consequently can name files by specifying either the path name that contains labels, or a list of queries the files satisfy, or both. In the Prospero system <ref type="bibr" target="#b12">[13]</ref>, users can program "filters" that create personalized views of file systems. In Presto <ref type="bibr" target="#b15">[16]</ref>, documents can be organized according to properties (attributes) that are associated with the documents, without the limitations of hierarchies. Properties can be specific to an individual document consumer. Unlike HAC, Presto does not intend to handle backward compatibility to the traditional file system abstraction. All these systems focus mainly on simple attributes; queries are limited to ad-hoc attribute match. pStore provides a generic data model and implementation that capture a more extensive set of semantics. We anticipate that these attributed-based file systems can be easily implemented using pStore and pStore's generality can be explored to provide new functionalities that do not exist in these systems. Several projects study metadata management in a file system setting. Roma <ref type="bibr" target="#b19">[20]</ref> provides an available, centralized repository of metadata to "synchronize" a single user's files across a diversity of digital storage devices. Roma metadata include fully-extensible attributes that could be used for organizing and locating files. However, its current prototype does not utilize attributes for searching. The Inversion file system <ref type="bibr" target="#b13">[14]</ref> runs on top of the POST-GRES database. It allows fine-grained time travel-a user may ask to see the state of the file system at any time in the past. Accesses to the file system are transactional. It is possible to issue ad-hoc queries on the file system metadata, or even to file data. IBM's DataLink <ref type="bibr" target="#b8">[9]</ref> project uses a relational database to capture a wide set of semantic information in file systems. The database contains references to objects in the file system. However, not all applications require the heavyweight ACID properties and features of a fully-fleshed database system. Moreover, database systems cannot effectively handle the incremental evolution of schema, common when managing unstructured data. It is interesting to note that, as early as 1986, Mogul <ref type="bibr" target="#b11">[12]</ref> has proposed a model of files that includes the concept of file properties. Mogul also agrees that database systems are too heavyweight, and relationships between files are important. Our work complements the semantic Web <ref type="bibr" target="#b20">[21]</ref> by concentrating on the system aspects and metadata management in a storage setting. Further, pStore provides additional functionality, e.g., tunable consistency based on an eventframework. It is a framework that provides predefined but customizable components. One example is the predefined types of metadata (e.g., content-and context-based semantics) each possibly with predetermined consistency models.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5">Conclusion and Open Issues</head><p>The paper motivates the need to incorporate semantic metadata in file stores. We identify the basic types of semantic information required by applications and end-users and propose a generic data model to capture and represent file semantics. The model provides the basis for a framework of tools and APIs for generating and using semantic metadata. There is a large number of research problems that need to be addressed to realize a semantic-aware file store. We enumerate some of them below.</p><p>â€¢ The basic semantic relations sketched in section 2.2 are yet to be evaluated and finalized through the use of real applications.</p><p>â€¢ Investigate the design of semantic-aware deep-archival systems.</p><p>In particular, what kind of semantic information can be used for improved data clustering and compression techniques. Also, how to maintain rich semantics for multiple versions of files; inheritance of semantic relations and their representation and use.</p><p>â€¢ Use semantic metadata for intelligent data placement in distributed storage systems. The goal is to satisfy the QoS requirements of end-users or applications with low infrastructure cost.</p><p>â€¢ Design and implement a basic set of tools and APIs for using the semantic information captured in such systems. These tools should be extensible and customizable. What these tools will be and how they will interact with each other is an open issue.</p><p>â€¢ Devise a simple declarative query language that can be used to specify constraints on both structured and unstructured data components.</p><p>â€¢ Investigate how the proposed data model and framework can be implemented in a distributed file system efficiently. One hard question is how to store RDF relations using a lightweight DB.</p><p>We are currently implementing a prototype of pStore to demonstrate its benefits in an online archival storage system.</p></div><figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_0"><head>Figure 1 :</head><label>1</label><figDesc>Figure 1: Architecture of pStore.</figDesc></figure>

			<note place="foot" n="1"> These are data objects, not necessarily related with the object of an RDF relation.</note>
		</body>
		<back>
			<div type="references">

				<listBibl>

<biblStruct xml:id="b0">
	<analytic>
		<title level="a" type="main">Querying semi-structured data</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">6th International Conference in Database Theory -ICDT &apos;97</title>
		<meeting><address><addrLine>Delphi, Greece</addrLine></address></meeting>
		<imprint>
			<date type="published" when="1997-01" />
			<biblScope unit="page" from="1" to="18" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b1">
	<analytic>
		<title level="a" type="main">Matrices, vector spaces, and information retrieval</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Berry</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Z</forename><surname>Drmac</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">E</forename><surname>Jessup</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">SIAM Review</title>
		<imprint>
			<biblScope unit="volume">41</biblScope>
			<biblScope unit="issue">2</biblScope>
			<biblScope unit="page" from="335" to="362" />
			<date type="published" when="1999" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b2">
	<analytic>
		<title level="a" type="main">Managing Diversity in Wide-Area File Systems</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Bowman</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Second IEEE Metadata Conference</title>
		<imprint>
			<date type="published" when="1997-09" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b3">
	<analytic>
		<title level="a" type="main">Rethinking database system architecture: Towards a self-tuning RISC-style database system</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Chaudhuri</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">G</forename><surname>Weikum</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">The VLDB Journal</title>
		<imprint>
			<date type="published" when="2000" />
			<biblScope unit="page" from="1" to="10" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b4">
	<analytic>
		<title level="a" type="main">Efficient and effective querying by image content</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><surname>Faloutsos</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Barber</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Flickner</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Hafner</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">W</forename><surname>Niblack</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Petkovic</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">W</forename><surname>Equitz</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Journal of Intelligent Information Systems</title>
		<imprint>
			<biblScope unit="volume">3</biblScope>
			<biblScope unit="issue">3/4</biblScope>
			<biblScope unit="page" from="231" to="262" />
			<date type="published" when="1994" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b5">
	<analytic>
		<title level="a" type="main">An overview of audio information retrieval</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Foote</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Multimedia Systems</title>
		<imprint>
			<biblScope unit="volume">7</biblScope>
			<biblScope unit="issue">1</biblScope>
			<biblScope unit="page" from="2" to="10" />
			<date type="published" when="1999" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b6">
	<analytic>
		<title level="a" type="main">Semantic file systems</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><forename type="middle">K</forename><surname>Gifford</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><surname>Jouvelot</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><forename type="middle">A</forename><surname>Sheldon</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><forename type="middle">W</forename><surname>O&amp;apos;toole</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 13th ACM Symposium on Operating Systems Principles</title>
		<meeting>the 13th ACM Symposium on Operating Systems Principles</meeting>
		<imprint>
			<date type="published" when="1991" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b7">
	<analytic>
		<title level="a" type="main">Intergrating content-based access machanisms with hierarchical file systems</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">B</forename><surname>Gopal</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">U</forename><surname>Manber</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">the 3rd Symposium on Operating Systems Design and Implementation (OSDI)</title>
		<meeting><address><addrLine>New Orleans, Louisiana, USA</addrLine></address></meeting>
		<imprint>
			<date type="published" when="1999" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b8">
	<analytic>
		<title level="a" type="main">DLFM: A Transactional Resource Manager</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">H.-I</forename><surname>Hsiao</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">I</forename><surname>Narang</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">SIGMOD Conference</title>
		<imprint>
			<date type="published" when="2000" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b9">
	<analytic>
		<title level="a" type="main">Automated hoarding for mobile computers</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">G</forename><forename type="middle">H</forename><surname>Kuenning</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">G</forename><forename type="middle">J</forename><surname>Popek</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Symposium on Operating Systems Principles</title>
		<imprint>
			<date type="published" when="1997" />
			<biblScope unit="page" from="264" to="275" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b10">
	<analytic>
		<title level="a" type="main">Towards a semantic, deep archival file system</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Mahalingam</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><surname>Tang</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Z</forename><surname>Xu</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">The 9th International Workshop on Future Trends of Distributed Computing Systems (FTDCS)</title>
		<imprint>
			<date type="published" when="2003-05" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b11">
	<monogr>
		<title level="m" type="main">Representing Information About Files</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><forename type="middle">C</forename><surname>Mogul</surname></persName>
		</author>
		<imprint>
			<date type="published" when="1986-03" />
		</imprint>
		<respStmt>
			<orgName>Stanford University</orgName>
		</respStmt>
	</monogr>
<note type="report_type">PhD thesis</note>
</biblStruct>

<biblStruct xml:id="b12">
	<analytic>
		<title level="a" type="main">The prospero file system: A global file system based on the virtual system model</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">B</forename><forename type="middle">C</forename><surname>Neuman</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Computing Systems</title>
		<imprint>
			<biblScope unit="volume">5</biblScope>
			<biblScope unit="issue">4</biblScope>
			<biblScope unit="page" from="407" to="432" />
			<date type="published" when="1992" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b13">
	<analytic>
		<title level="a" type="main">The design and implementation of the Inversion file system</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><forename type="middle">A</forename><surname>Olson</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the USENIX Winter 1993 Technical Conference</title>
		<meeting>the USENIX Winter 1993 Technical Conference<address><addrLine>San Diego, CA, USA</addrLine></address></meeting>
		<imprint>
			<date type="published" when="1993" />
			<biblScope unit="page" from="25" to="29" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b14">
	<monogr>
		<title level="m" type="main">How much information</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><surname>Lyman</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">H</forename><forename type="middle">R</forename><surname>Varian</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Dunn</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Strygin</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">K</forename><surname>Searingen</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2000-10" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b15">
	<analytic>
		<title level="a" type="main">Using properties for uniform interaction in the presto document system</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><forename type="middle">L</forename><surname>Paul Dourish</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">W</forename><forename type="middle">Keith</forename><surname>Edwards</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Salisbury</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">The 12th Annual ACM Symposium on User Interface Software and Technology</title>
		<meeting><address><addrLine>Asheville, NC, USA</addrLine></address></meeting>
		<imprint>
			<date type="published" when="1999-10" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b16">
	<analytic>
		<title level="a" type="main">Venti: a new approach to archival storage</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Quinlan</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Dorward</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">First USENIX conference on File and Storage Technologies</title>
		<meeting><address><addrLine>Monterey, CA, USA</addrLine></address></meeting>
		<imprint>
			<date type="published" when="2002" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b17">
	<analytic>
		<title level="a" type="main">Blending hierarchical and attribute-based file naming</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Sechrest</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Mcclennen</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">12th International Conference on Distributed Computer System</title>
		<meeting><address><addrLine>Yokohama, Japan</addrLine></address></meeting>
		<imprint>
			<date type="published" when="1992-06" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b18">
	<analytic>
		<title level="a" type="main">Why can&apos;t i find my files? new methods for automating attribute assignment</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">G</forename><forename type="middle">A N</forename><surname>Soules</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">G</forename><forename type="middle">R</forename><surname>Ganger</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">9th Workshop on Hot Topics in Operating Systems (HotOS-IX)</title>
		<meeting><address><addrLine>Lihue, Hawaii</addrLine></address></meeting>
		<imprint>
			<date type="published" when="2003" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b19">
	<analytic>
		<title level="a" type="main">The roma personal metadata service</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">E</forename><surname>Swierk</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">E</forename><surname>Kiciman</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">V</forename><surname>Laviano</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Baker</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the Third IEEE Workshop on Mobile Computing Systems and Applications</title>
		<meeting>the Third IEEE Workshop on Mobile Computing Systems and Applications<address><addrLine>Monterey, CA, USA</addrLine></address></meeting>
		<imprint>
			<date type="published" when="2000-12" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b20">
	<monogr>
		<title level="m" type="main">The semantic web. Scientific American</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><surname>Berners-Lee</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Hendler</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">O</forename><surname>Lassila</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2001-05" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b21">
	<monogr>
		<title level="m" type="main">Reference information: The next wave &quot;the summary of: A snapshot research study by the enterprise storage group</title>
		<ptr target="http://www.enterprisestoragegroup.com" />
		<imprint>
			<date type="published" when="2002" />
		</imprint>
		<respStmt>
			<orgName>The Enterprise Storage Group</orgName>
		</respStmt>
	</monogr>
</biblStruct>

<biblStruct xml:id="b22">
	<monogr>
		<title level="m" type="main">Resource description framework (rdf) model and syntax specification</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>W3c</surname></persName>
		</author>
		<ptr target="http://www.w3.org/TR/REC-rdf-syntax/" />
		<imprint>
			<date type="published" when="1999-02-22" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b23">
	<monogr>
		<title level="m" type="main">Resource description framework (rdf) schema specification</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>W3c</surname></persName>
		</author>
		<ptr target="http://www.w3.org/TR/1999/PR-rdf-schema-19990303/" />
		<imprint>
			<date type="published" when="1999-03-03" />
		</imprint>
	</monogr>
</biblStruct>

				</listBibl>
			</div>
		</back>
	</text>
</TEI>
