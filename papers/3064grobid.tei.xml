<?xml version="1.0" encoding="UTF-8"?>
<TEI xmlns="http://www.tei-c.org/ns/1.0" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
xsi:schemaLocation="http://www.tei-c.org/ns/1.0 /Users/atharsefid/Desktop/grobid-0.5.3/grobid-home/schemas/xsd/Grobid.xsd"
 xmlns:xlink="http://www.w3.org/1999/xlink">
	<teiHeader xml:lang="en">
		<encodingDesc>
			<appInfo>
				<application version="0.5.3" ident="GROBID" when="2020-09-29T02:59+0000">
					<ref target="https://github.com/kermitt2/grobid">GROBID - A machine learning software for extracting information from scholarly documents</ref>
				</application>
			</appInfo>
		</encodingDesc>
		<fileDesc>
			<titleStmt>
				<title level="a" type="main">Reliability and Timeliness Analysis of Fault-tolerant Distributed Publish / Subscribe Systems</title>
			</titleStmt>
			<publicationStmt>
				<publisher/>
				<availability status="unknown"><licence/></availability>
			</publicationStmt>
			<sourceDesc>
				<biblStruct>
					<analytic>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Thadpong</forename><surname>Pongthawornkamol</surname></persName>
							<affiliation key="aff0">
								<orgName type="institution" key="instit1">University of Illinois Urbana</orgName>
								<orgName type="institution" key="instit2">University of Illinois Urbana</orgName>
								<orgName type="institution" key="instit3">Boeing Research &amp; Technology Seattle</orgName>
								<address>
									<region>IL, IL, WA</region>
								</address>
							</affiliation>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Klara</forename><surname>Nahrstedt</surname></persName>
							<affiliation key="aff0">
								<orgName type="institution" key="instit1">University of Illinois Urbana</orgName>
								<orgName type="institution" key="instit2">University of Illinois Urbana</orgName>
								<orgName type="institution" key="instit3">Boeing Research &amp; Technology Seattle</orgName>
								<address>
									<region>IL, IL, WA</region>
								</address>
							</affiliation>
						</author>
						<author role="corresp">
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Guijun</forename><surname>Wang</surname></persName>
							<email>guijun.wang@boeing.com</email>
							<affiliation key="aff0">
								<orgName type="institution" key="instit1">University of Illinois Urbana</orgName>
								<orgName type="institution" key="instit2">University of Illinois Urbana</orgName>
								<orgName type="institution" key="instit3">Boeing Research &amp; Technology Seattle</orgName>
								<address>
									<region>IL, IL, WA</region>
								</address>
							</affiliation>
						</author>
						<title level="a" type="main">Reliability and Timeliness Analysis of Fault-tolerant Distributed Publish / Subscribe Systems</title>
					</analytic>
					<monogr>
						<imprint>
							<date/>
						</imprint>
					</monogr>
				</biblStruct>
			</sourceDesc>
		</fileDesc>
		<profileDesc>
			<abstract>
				<p>Distributed publish / subscribe paradigm is a powerful data dissemination paradigm that offers both scalability and flexibility for time-sensitive applications. However, its nature of high expressiveness makes it difficult to analyze or predict the performance of publish / subscribe systems such as event delivery probability and end-to-end delivery delay, especially when the publish / subscribe systems are deployed over distributed, large-scale networks. While several fault tolerance techniques to increase reliability in distributed publish / subscribe systems have been proposed, event delivery probability and timeliness of publish / subscribe systems with such reliability enhancement techniques have not yet been analyzed. This paper proposes a generic model that abstracts the basic distributed publish / subscribe protocol, along with several commonly used fault-tolerant techniques , on top of distributed, large-scale networks. The overall goal of this model is to predict quality of service (QoS) in terms of event delivery probability and time-liness based on statistical attributes of each component in the distributed publish / subscribe systems. The evaluation results via extensive simulations with parameters computed from real-world traces verifies the correctness of the proposed prediction model. The proposed prediction model can be used as a building block for automatic QoS control in distributed, time-sensitive publish / subscribe systems such as subscriber admission control, broker deployment, and reliability optimization.</p>
			</abstract>
		</profileDesc>
	</teiHeader>
	<text xml:lang="en">
		<body>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="1">Introduction</head><p>Recently, distributed publish / subscribe systems have emerged as an effective multi-source, multi-sink communication paradigm for large-scale, time-sensitive applications such as stock report, live sportcasting, and social network messaging. The main concept of publish / subscribe paradigm is that senders and receivers of informa- * The author is currently employed at Google Inc.</p><p>tion are connected loosely based on the content of the information. Specifically, in a publish / subscribe system, a publisher (i.e., sender) can produce its events (i.e. messages) without specifying the set of subscribers (i.e., receivers). Instead, each subscriber specifies the content (or topic) of event it is interested to receive. All events produced from publishers containing content (or topic) that match a subscriber's interest are then delivered to that subscriber via a network of intermediary servers called brokers. Since the information flows based on the content of the information, publishers and subscribers are decoupled in space, time, and synchronization <ref type="bibr" target="#b12">[16]</ref>. Such transparency allows the system to scale and adapt well under dynamic environments, resulting in wide adoption of publish / subscribe paradigm in many contexts such as cloud computing <ref type="bibr" target="#b22">[26]</ref>, mobile computing <ref type="bibr" target="#b5">[9]</ref>, and peerto-peer services <ref type="bibr" target="#b32">[36]</ref>.</p><p>While distributed publish / subscribe systems achieve scalability and fault tolerance, failures at brokers or links between brokers can still cause time-sensitive events to be lost or expired before being delivered to the subscribers <ref type="bibr" target="#b15">[19,</ref><ref type="bibr" target="#b24">28]</ref>. Several reports have shown that while high-end commercial servers with high maintenance generally achieve at least 99.9% availability (i.e., available 99.9% of the time) <ref type="bibr">[4]</ref>, most standard, off-the-shelf commodity servers with low to moderate maintenance may have less than 90% availability <ref type="bibr">[3]</ref>. To cope with such component failures in the context of publish / subscribe systems, several fault-tolerant / fault-recovery techniques have been proposed to increase service availability in distributed publish / subscribe systems <ref type="bibr" target="#b9">[13,</ref><ref type="bibr" target="#b10">14]</ref>. However, to the best of our knowledge, the effect of such commonlyused fault-tolerant techniques to a publish / subscribe system's reliability and timeliness has not been analyzed yet.</p><p>In this paper, we propose a quantitative, analytical model to predict the effect of failures and commonly used recovery techniques to the quality of service (QoS) each subscriber receives in distributed, time-sensitive publish / subscribe systems. The primary goal of such analytical model is to estimate each subscriber's real-time re-USENIX Association liability, which is the percentage of events that are successfully delivered to each subscriber on time (i.e., before the event is expired). The analytical model covers common component failures and recovery mechanisms, resulting in the model's high applicability. The evaluation results via simulations with parameters computed from real-world traces yield correctness of the proposed analytical model. The proposed model can be used as a building block for automatic QoS control in distributed, time-sensitive publish / subscribe systems such as subscriber admission control, broker deployment, and reliability optimization.</p><p>The organization of this paper is as follows. In Section 2, we first describe the basic publish / subscribe model, failure model, and commonly used fault tolerance / recovery techniques. In Section 3, we then formulate the subscriber real-time reliability estimation problem and propose a generic, protocol-independent analytical framework to solve such problem. In Section 4, we propose a set of protocol-dependent, publisher-subscriber pairwise reliability estimation models for each fault tolerance / recovery mechanism from Section 2. Section 5 then presents the evaluation results to validate the proposed analytical model via simulations. Related work is summarized in Section 6. Conclusions and future work are then discussed in Section 7.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2">Model and Assumptions</head><p>In this section, we describe the details of the distributed publish / subscribe architecture model, quality of service (QoS) model, failure model, and commonly used faulttolerant techniques used in this paper. In the next section, we will then present the mathematical framework that realizes the model described in this section in order to predict QoS level each subscriber receives.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.1">Distributed Publish / Subscribe Model</head><p>We model the publish / subscribe network as a network of brokers. Brokers can be placed inside the same domain (e.g, brokers within cloud), across different private domains (e.g., federated clouds), or across different public domains (e.g., peer-to-peer systems). Each subscriber / publisher is connected to only one of the brokers. The broker that is connected to a subscriber / publisher is called the home broker with respect to that subscriber / publisher. <ref type="figure">Figure 1</ref> shows an example of a publish / subscribe network with 4 brokers , where the home brokers of subscriber s 1 , subscriber s 2 , and publisher p 1 are broker b 3 , b 4 , and b 1 respectively.</p><p>When a subscriber joins the system, it chooses a broker in the system as its home broker and sends its subscription message to the home broker. The subscription message specifies a topic 1 value, which describes the category of event that the subscriber wants to receive. Upon receiving the subscription from the subscriber, the home broker stores the subscription and the subscriber into its routing table before propagating the subscription message to other brokers. Each published event has topic and deadline associated with it. When a publisher publishes a new event, the publisher sends the published event to its home broker, who then routes the event via the broker network to all subscribers whose subscriptions have the same topic as the published event. If the event arrives at a subscriber before the event's deadline, we say that the event is delivered to that subscriber on time. Otherwise, we consider that event to be expired with respect to that subscriber.</p><p>For genericity, this paper does not make any assumption about subscription propagation / event routing processes within broker network. The only assumptions are that the broker network must be stable (i.e., neighborhood relationships between brokers do not change frequently over time) and the event routing path must be consistent (i.e., for each publisher-subscriber pair, brokers will always use the same path to route all events from the publisher to the subscriber). For demonstration, this paper focuses on tree-based forwarding (e.g., <ref type="figure">Fig- ure 1)</ref>, which is a publish / subscribe routing scheme that satisfies path consistency assumption. In tree-based forwarding scheme, a broker tree overlay is arbitrarily but consistently formed for each topic. When a broker receives a new subscription, the broker stores the subscription and its source to the broker's routing table before forwarding the subscription to its neighbors in the subscription's topic broker tree. <ref type="figure">Figure 1(a)</ref> shows an example when subscriber s 1 subscribes to topic "Stock", which forms the broker tree rooted at broker b 2 . Note that subscriptions with different topics can have different corresponding broker trees. For example in <ref type="figure">Figure 1</ref>(b), subscriber s 2 subscribes to topic "Temp", which forms the broker tree rooted at broker b 3 . Upon receiving a published event from a publisher, the publisher's home broker checks the event with each subscription stored in its routing table. For each subscription whose topic matches the event, the broker forwards the event to the link which it receives that subscription from. Note that an event is forwarded once per link even though there are multiple matching subscriptions from that link. The event forwarding process then continues, and the event is propagated hop-by-hop along the topic tree in the reverse direction of the subscription until it reaches the designated subscribers. <ref type="figure">Figure 1(c)</ref> shows an example of publisher p 1 publishing an event with topic "Stock".</p><p>While <ref type="figure">Figure 1</ref> describes topic-based, tree-based pub- </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.2">QoS Model</head><p>In our previous work, we proposed the subscriber-level QoS metric called subscriber real-time reliability <ref type="bibr" target="#b26">[30]</ref>. Subscriber real-time reliability can be defined as follows: A subscriber s is said to receive the service with real-time reliability r s ∈ [0, 1], where r s is defined as the fraction of all events of s's interest that arrives at s before its deadline (i.e., delivery delay less than the message lifetime). This metric both standard reliability and timeliness properties, making it a suitable indicator of QoS in time-sensitive publish / subscribe applications.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.3">Failure Model</head><p>In this paper, we discuss two types of failures that could affect subscriber real-time reliability : link failures and broker failures. We assume crash-recovery failure model for both broker failures and link failures, which means each broker / link is assumed to be either on or off at any point of time. When a broker fails (i.e., is in off state), it stops its activity until it recovers (i.e., is repaired back to on state). When a failed broker recovers, it loses all of its soft-state information (e.g., subscription routing table and queued events) that it had before the failure. However, we assume that the failed broker does not lose the broker graph information (i.e., the list of all brokers and their neighborhood relationship), which is stored in each broker's persistent, non-volatile storage. When a link fails, any event that is sent to the link will be lost.</p><p>In this paper, we assume that link failures and broker failures are independent and exponentially distributed for analysis feasibility. Previous studies also have shown that the assumption of exponential time between failures is true in many distributed systems <ref type="bibr">[3,</ref><ref type="bibr" target="#b31">35]</ref>.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.4">Fault-Tolerant Mechanisms</head><p>In order to cope with broker and link failures, several fault tolerance / recovery schemes for publish / subscribe systems have been proposed <ref type="bibr" target="#b3">[7,</ref><ref type="bibr" target="#b4">8,</ref><ref type="bibr" target="#b9">13,</ref><ref type="bibr" target="#b15">19,</ref><ref type="bibr" target="#b18">22]</ref>. This section summarizes and discusses such techniques. Note that some of these techniques are generic and not limited to publish / subscribe systems. However, this paper focuses on the analysis of such techniques in the publish / subscribe context.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.4.1">Periodic Subscription</head><p>In periodic subscription scheme <ref type="bibr" target="#b29">[33]</ref>, each subscriber periodically re-issues its subscription message to its home broker, which then propagates the subscription to other brokers in the network. Each broker also maintains a timestamp for each subscription entry in its routing table. The timestamp is refreshed every time the broker receives the corresponding subscription. The broker discards any subscription from its routing table if the subscription is not refreshed within a period of time (i.e., timeout). The periodic subscription scheme can help prevent subscription loss, but it cannot prevent event loss. More details about periodic subscription can be found by several previous works <ref type="bibr" target="#b15">[19,</ref><ref type="bibr" target="#b16">20]</ref>.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.4.2">Event Buffering / Retransmission</head><p>In event buffering scheme <ref type="bibr" target="#b4">[8,</ref><ref type="bibr" target="#b9">13]</ref>, each broker ensures event delivery to its next hop neighbor as follows. When a broker receives an event from one of its immediate neighbors, it performs the event matching and calculates the event's forwarding set (i.e., the set of immediate neighbors to forward the event to). The broker then stores the event and its forwarding set into the broker's non-volatile storage and sends the acknowledgment message (ACK) containing the event sequence number back to its upstream neighbor. The broker then forwards the event to the event's forwarding set. The broker then waits for the ACK message from each next-hop neighbor in the event's forwarding set. The broker discards the event from its non-volatile storage once it collects all the ACK messages from all brokers in the forward set, as now it is certain that the event has been received by all of the next-hop brokers. If, due to failures, the broker does not receive ACK messages from some next-hop neighbors, it retransmits the event to each of such neighbors until all ACK messages are collected or the buffered event becomes expired. <ref type="figure">Figure 2</ref> illustrates an example of event buffering / retransmission scheme. The event buffering / retransmission guarantees that the events will not be lost due to broker / link failures. However, if the routing path is disconnected for too long, the event may be expired before it is delivered to the subscribers.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.4.3">Redundant Path Bypassing</head><p>Redundant path bypassing scheme relies on the fact that even when the routing path between a publisher to a subscriber is disconnected due to broker / link failures, it might be possible to find another publisher-subscriber path that excludes the failed brokers / links <ref type="bibr" target="#b4">[8,</ref><ref type="bibr" target="#b15">19,</ref><ref type="bibr" target="#b18">22,</ref><ref type="bibr" target="#b19">23]</ref>.</p><p>The detail of the redundant path bypassing in the context of tree-based publish / subscribe is as follows 2 . Whenever a broker detects a change of its neighbor's state (e.g., neighbor fails, neighbor recovers), it uses a link state protocol to broadcast the update message to all other reachable brokers. Each broker can update the global view of the entire broker network. With the up-todate global view of the network, each broker can identify the set of immediately reachable children of a failed broker along the tree. The immediately reachable children of a broker b is the set of b's next-hop brokers that are available and reachable. For example in <ref type="figure">Figure 3</ref>, the immediately reachable children set of failed broker b2 are b3 and b4. Hence, each event that is supposed to be sent to the failed broker will be forwarded to the failed broker's immediately reachable children instead (i.e., detour <ref type="figure">Figure 3</ref>: Example of path bypassing scheme where broker b1 bypasses failed broker b2 routing). The same approach applies to subscription forwarding as well.</p><p>The goal of this paper is to estimate each subscriber's real-time reliability when each of such fault-tolerant techniques is employed in the publish / subscribe system. Section 3 will present the generic estimation framework while Section 4 will present the estimation algorithm for each specific fault-tolerant technique.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3">Subscriber Real-time Reliability Estimation Framework</head><p>In this section, we propose a mathematical model of the publish / subscribe system and use the proposed model to formulate the subscriber real-time reliability estimation problem. We then present the generic estimation algorithm to solve the problem.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.1">Problem Formulation</head><p>We present the mathematical model of each component in the publish / subscribe system as follows.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.1.1">Real-time Event Model</head><p>Let E be the set of all events ever published in the system. Each event e ∈ E contains topic τ e and lifetime d e , which is the duration since the time the event was published until the time the event is expired. Without loss of generality, we assume that all events in the system have the same lifetime D (i.e., ∀e ∈ E : d e = D), which is a known constant. Our scheme can be modified to work when events have different lifetime values as well.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.1.2">Publisher / Subscriber Model</head><p>Let P and S be the set of all publishers / subscribers in the system. Each publisher p ∈ P publishes events with topic τ p with rate λ p . Each subscriber s ∈ S is interested in events with topic τ s . A subscriber s is said to be a recipient of a publisher p if they share the same topic of interest (i.e., τ s = τ p ). We assume that λ p , τ p , and τ s are known for all publishers and subscribers.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.1.3">Broker / Link Model</head><p>Let B be the set of all brokers in the system. We model , respectively. Hence, broker b's availability, denoted by a b , is the fraction of time the broker b is on, which can be com-</p><formula xml:id="formula_0">each broker b ∈ B as a tuple (γ b , σ b ),</formula><formula xml:id="formula_1">puted as a b = 1 γ b 1 γ b + 1 σ b .</formula><p>Likewise, let L be the set of all links in the system. Each link l ∈ L has exponentially distributed time between failure and time to repair with rate γ l and σ l respectively 3 . Link l's availability value a l is also</p><formula xml:id="formula_2">calculated as a l = 1 γ l 1 γ l + 1 σ l</formula><p>We assume that each broker's failure / repair rates (γ b , σ b ) and each link's failure / repair rates (γ l , σ l ) are known via statistical history data collection <ref type="bibr" target="#b0">[1,</ref><ref type="bibr" target="#b13">17,</ref><ref type="bibr" target="#b17">21]</ref>.</p><p>With the described mathematical model, we formulate the subscriber real-time reliability estimation as follows.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Subscriber Real-time Reliability Estimation Problem :</head><p>Given a publish / subscribe overlay network G = (N, L) where N = B ∪ P ∪ S, estimate the value of subscriber real-time reliability r s for each subscriber s ∈ S.</p><p>We use the term r ′ s to denote the estimated value of subscriber real-time reliability r s . The goal of our analytical model is to calculate r ′ s that estimates r s as accurately as possible (i.e., min|r ′ s − r s |).</p><p>3 Without loss of generality, we assume that the local link connected between publish / subscriber to its home broker does not fail. Our scheme can be simply modified for non-reliable local link scenarios.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.2">Generic Estimation Framework</head><p>This section describes a generic framework to estimate subscriber real-time reliability. The subscriber realtime reliability estimation problem can be generally broken down into two sub-problems, which are estimating publisher-subscriber pairwise flow rate and estimating publisher-subscriber pairwise flow reliability.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.2.1">Pairwise Flow Rate</head><p>The publisher-subscriber pairwise flow rate is the average event traffic flow rate from a publisher to a subscriber when no failure occurs. The publisher-subscriber pairwise flow rate λ ps between a publisher p ∈ P and a subscriber s ∈ S can be calculated as follows.</p><formula xml:id="formula_3">λ ps = 񮽙 λ p if τ p = τ s 0 otherwise (1)</formula><p>That is, the pairwise traffic flow rate from publisher p to subscriber s is equal to publisher p's publishing rate if they share the same topic, and equal to zero otherwise. Since λ p , τ p , and τ s are known for each publisher p ∈ P and subscriber s ∈ S in the system, we can calculate pairwise traffic flow rate λ ps for each publisher-subscriber pair in the system.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.2.2">Pairwise Reliability</head><p>The publisher-subscriber pairwise reliability is the probability that a publisher's event of a subscriber's interest will be delivered to that subscriber before it is expired. We use the notation r ′ ps ∈ [0, 1] to denote the pairwise reliability between publisher p ∈ P and subscriber s ∈ S. As mentioned, the pairwise reliability depends on the faulttolerant technique used in the publish / subscribe system. Section 4 presents the calculation of pairwise reliability for each technique discussed in Section 2.4.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.2.3">Generic Estimation Algorithm</head><p>Subscriber s's real-time reliability r s is the probability that s will receive an event of its interest successfully before the deadline D. Hence, the estimated value of r s , denoted by r s can be calculated as the weighted average of publisher-subscriber pairwise reliability between each publisher to that subscriber, with the weight equal to the pairwise event flow rate from the corresponding publisher to that subscriber. That is, </p><formula xml:id="formula_4">r ′ s = E[</formula><formula xml:id="formula_5">= ∑ p∈P (r ′ ps · λ ps ) ∑ p∈P λ ps<label>(2)</label></formula><p>Equation <ref type="formula" target="#formula_5">(2)</ref> is a generic equation that can be used with any fault-tolerant mechanism discussed in Section 2.4. However, different mechanisms require different equations to estimate pairwise reliability r ′ ps , which will be demonstrated in the next Section.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4">Pairwise Reliability Estimation</head><p>This section proposes an analytical model to calculate the estimated publisher-subscriber pairwise reliability r ′ ps for each different fault tolerance/recovery protocols presented in Section 2.4.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.1">Static Path</head><p>Without any reliable mechanism, the subscription information stored at each broker about the subscriber will be eventually lost when that broker fails. If a subscriber does not have reliable subscription or periodic subscription mechanisms, its subscription along the routing path will be eventually lost, preventing any subsequently published event to be delivered to the subscriber. Hence, the steadystate pairwise reliability each publisher-subscriber pair (p, s) will be zero (i.e., r ′ ps = 0).</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.2">Static Path + Periodic Subscription</head><p>With the use of periodic subscription (Section 2.4.1), each failed broker can recover its routing information once it recovers from its failure. However, event loss is still possible as there is no reliable acknowledgement. We analyze the pairwise reliability of each publishersubscriber pair with static path as follows. Let δ ps denote the event routing path between a publisher p and a subscriber s. Since we assume our publish / subscribe routing scheme to be consistent, δ ps is static and known for each publisher-subscriber pair (p, s). We define path length, denoted by |δ ps |, as the number of brokers in the path. Hence, a path δ ps can be expressed as the sequence (p, l 0 , b 0 , l 1 , b 1 , ..., l |δ ps |−1 , b |δ ps |−1 , l |δ ps | , s). <ref type="figure" target="#fig_2">Fig- ure 4</ref> shows an example of a path of length 3.</p><p>Since the static path scheme always uses only one path δ ps to forward events between publisher-subscriber pair (p, s), the pairwise real-time reliablity r ′ ps is equal to the fraction of time that the path δ ps is connected. That is,</p><formula xml:id="formula_6">r ′ ps = P[path δ ps is connected] = a b 0 Π |δ ps |−1 i=1 (a l i · a b i )<label>(3)</label></formula><p>where a x is the availability of component (broker or link) x.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.3">Static Path + Event Buffering</head><p>With the reliable acknowledgment protocol (i.e., Section 2.4.2) in static path, an event of a subscriber s's interest that is published by a publisher p will be eventually delivered to s, given that p's home broker is available when p publishes the event (since we assume that p does not have retransmission capability). This is because the event will always be buffered at some broker along the path between p and s, even when the path is disconnected <ref type="bibr">4</ref> . The event will then be forwarded when the next-hop broker and link are available, and eventually delivered to the subscriber. However, the delay the event spends in the buffer may be longer than its lifetime, which causes the event to be expired.</p><p>To analyze the pairwise reliability r ′ ps between a publisher p and a subscriber s under static path with event buffering scheme, consider the single, unique path δ ps connecting p and s. Assuming the event arrival time to be independent from the path δ ps 's state, we estimate the path real-time reliability as follows. </p><formula xml:id="formula_7">= a b 0 · P[d ps &lt; D]<label>(4)</label></formula><p>where d ps is the end-to-end delivery delay and D is the event lifetime. Thus, it is necessary to calculate the end-to-end delivery delay distribution d ps first in order to estimate path reliability r ′ ps . To calculate delay distribution d ps for path δ ps , we need to calculate per-hop buffering delay at each broker b i (0 ≤ i &lt; |δ ps |) in the path (we assume that link transmission delay and broker processing delay are negligible compared to buffering delay). Consider when the event is received successfully at broker b i and hence broker b i will try to forward the event to broker b i+1 . If both link l i+1 and broker b i+1 are up at the moment, the event will be transmitted successfully to broker b i+1 immediately, thus incurring zero buffering delay at broker b i . However, if either link l i+1 or broker b i+1 is down at the moment, the event will be buffered at the broker b i , which will keep retransmitting the event until the event gets through to broker b i+1 . The broker b i discards the event if the event expires. Note that the event will get through only when all b i , l i+1 , and b i+1 are up at the same time.</p><p>Let d b i be the buffering delay at each broker b i (0 ≤ i &lt; |δ ps |). We first calculate the probability that d b i = 0 (i.e., the probability that the event is successfully delivered to b i+1 immediately), which can be calculated as</p><formula xml:id="formula_8">P[d b i = 0] = P[b i , l i+1 , b i+1 are on|b i is on] = P[l i+1 , b i+1 are on] = a l i+1 · a b i+1</formula><p>(5) Given that delay is always non-negative, we have</p><formula xml:id="formula_9">P[d b i &gt; 0] = 1 − P[d b i = 0] = 1 − a l i+1 · a b i+1</formula><p>(6) Now, in the case that the buffering delay at each broker b i is not zero (with probability 1 − a l i+1 .a b i+1 ), we need to find the delay distribution in such case. is equal to the time it takes for the next-hop path to be repaired (i.e., time until l i+1 and b i+1 are both in on state). Assuming each component's time between failure and time to repair to be exponentially distributed, we can calculate such delay distribution by using continuous-time Markov process diagram that represents the state of broker b i , link l i+1 , and b i+1 . The diagram is shown in <ref type="figure" target="#fig_5">Figure  5</ref>. Each of 8 states depicts each possible state of sub-path (b i ,l i+1 ,b i+1 ), with each bit representing each individual component's state (0 = off, 1 = on). The first bit (least significant bit) represents b i 's state. The second bit represents l i+1 's state. The third bit (most significant bit) represent b i+1 's state. For example, state "011" represents the state where broker b i is on, link l i+1 is on, and broker b i+1 is off. Note that in the scenario where an event arrives at broker b i and needs to be buffered at b i , an event will find the system state in either state "001", "011", or "101" with probability</p><formula xml:id="formula_10">(1−a l i+1 )(1−a b i+1 ) 1−a l i+1 .a b i+1 , a l i+1 (1−a b i+1 ) 1−a l i+1 .a b i+1</formula><p>, and</p><formula xml:id="formula_11">(1−a l i+1 )a b i+1 1−a l i+1 .a b i+1</formula><p>respectively. The event will continue</p><p>to be buffered at broker b i (note that b i can also fail but the event is kept in its non-volatile storage) until the state becomes "111", which the event will be transmitted to broker b i+1 successfully. Hence, the diagram depicts the absorbing Markov process with three start states = "001", "011", "101" and one absorbing state "111"with the corresponding transition rate matrix ˙ Q as</p><formula xml:id="formula_12">˙ Q =         − ˙ q 0 σ b i σ l i+1 0 σ b i+1 0 0 0 γ b i − ˙ q 1 0 σ l i+1 0 σ b i+1 0 0 γ l i+1 0 − ˙ q 2 σ b i 0 0 σ b i+1 0 0 γ l i+1 γ b i − ˙ q 3 0 0 0 σ b i+1 γ b i+1 0 0 0 − ˙ q 4 σ b i σ l i+1 0 0 γ b i+1 0 0 γ b i − ˙ q 5 0 σ l i+1 0 0 γ b i+1 0 γ l i+1 0 − ˙ q 6 σ b i 0 0 0 0 0 0 0 0        <label>(7)</label></formula><p>where γ x and σ x are component x's exponential failure rate and exponential repair rate described in Section 3.1, and ˙ q i is state i's total outgoing rate. For example, ˙ q 0 = (σ b i + σ l i + σ b i+1 ). Thus, the conditional buffering delay at broker b i is equal to the time to absorption of the absorbing matrix ˙ Q, which is a phase-type distri- </p><formula xml:id="formula_13">˙ Q = � ˙ S ˙ S 0 0 0 � (8)</formula><p>Where ˙ S and ˙ S 0 are the 7x7 top-left sub-matrix and the 7x1 top-right sub-vector of ˙ Q defined in Equation <ref type="formula" target="#formula_12">(7)</ref>  can be calculated as</p><formula xml:id="formula_14">P[d + b i &lt; t] = 1 − α· exp( ˙ St)· 1<label>(9)</label></formula><p>where exp( ˙ S) is the matrix exponential <ref type="bibr" target="#b23">[27]</ref> of ˙ S, α is the 1x7 starting state vector</p><formula xml:id="formula_15">α = [0, (1 − a l i+1 )(1 − a b i+1 ) 1 − a l i+1 .a b i+1 , 0, a l i+1 (1 − a b i+1 ) 1 − a l i+1 .a b i+1 , 0, (1 − a l i+1 )a b i+1 1 − a l i+1 .a b i+1 , 0]</formula><p>and 1 is an 7x1 vector with every element being 1. With Equation <ref type="formula" target="#formula_14">(9)</ref> </p><formula xml:id="formula_16">d b i = � d + b i with probability 1 − a l i+1 · a b i+1 0 with probability a l i+1 · a b i+1<label>(10)</label></formula><p>Once we calculate per-hop buffering delay d b i with Equation (10), we then can calculate the end-to-end buffering delay d ps for path</p><formula xml:id="formula_17">δ ps = (p, l 0 , b 0 , l 1 , b 1 , ..., l |δ ps |−1 , b |δ ps |−1 , l |δ ps | , s) as d ps = |δ ps |−1 ∑ i=0 d b i<label>(11)</label></formula><p>Hence, Equation (11) completes the calculation of pairwise reliability for static path with event buffering scheme in Equation (4).</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.4">Path Bypassing + Periodic Subscription</head><p>With the path bypassing scheme discussed in Section 2.4.3, a new routing path between p and s will be used if the old path fails. Hence, an event of a subscriber s's interest that is published by a publisher p will be delivered to s as long as the broker graph G is not partitioned between p and s. Thus, pairwise reliability r ′ ps is then equal to the graph G's connection probability between p and s. However, the calculation of such connection probability for any generic graph is considered to be a #P-complete problem <ref type="bibr" target="#b30">[34]</ref>, which has higher complexity that a NPcomplete problem.</p><p>Due to such computational complexity, we propose an algorithm to approximate the lower bound of graph G's connection probability between any publisher-subscriber pair (p, s) by constructing a subgraph G ′ ⊆ G that consists only parallel, broker-disjoint paths between p's home broker and s's home broker.</p><p>That is, the multi-path subgraph G ′ contains multiple, broker-disjoint path between p's home broker and s's home broker, assuming there are m of such paths in subgraph G ′ , namely δ </p><formula xml:id="formula_18">ps = (p, l (i) 0 , b (i) 0 , l (i) 1 , b (i) 1 , ..., l (i) |δ (i) ps |−1 , b (i) |δ (i) ps |−1 , l (i) |δ (i) ps | , s)</formula><p>Note that b </p><formula xml:id="formula_19">≥ a b 0 · a b |δps|−1 · (1 − Π m−1 i=0 (1 − r (i) ps a b 0 · a b |δps|−1 ))<label>(12)</label></formula><p>where r</p><formula xml:id="formula_20">(i)</formula><p>ps is the pairwise reliability of each path δ (i) ps in subgraph G ′ , which can be calculated by Equation (3).</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.5">Path Bypassing + Event Buffering</head><p>We can combine the path bypassing scheme with the event buffering scheme in order to exploit path diversity as well as guarantee eventual delivery as follows. Each broker uses the event acknowledgement / buffering scheme as mentioned in Section 4.3. When a broker b 1 detects its neighbor b 2 's failure, it uses the bypass routing without acknowledgement to forward the event to the failed broker b 2 's immediately reachable children. The broker b 1 also keeps the event in its buffer and keeps retransmitting the event to the failed broker b 2 until b 2 recovers, receives the event, and sends the acknowledgement back to b 1 . b 1 then discards the event. This scheme combines eventual delivery guarantee of the retransmission scheme with path diversity of the path bypassing scheme. The drawback of this approach is the additional overhead and potential event duplication at the subscribers. Event duplication, however, can be filtered out at the last-hop broker.</p><p>We can calculate the publisher-subscriber pairwise reliability for the path bypassing with event buffering scheme as follows. Let r ′A ps be the estimated publishersubscriber pairwise reliability for the path bypassing scheme (i.e., Equation <ref type="formula" target="#formula_5">(12)</ref> and d ps be the end-to-end buffering delay for the event buffering scheme (i.e., Equation <ref type="formula" target="#formula_17">(11)</ref>). We can calculate the estimated pairwise reliability for the combined scheme as</p><formula xml:id="formula_21">r ′ ps = P[event delivered immediately] + P[partition]· P[event delivered on time] = r ′A ps + (1 − r ′A ps )· P[d ps ≤ D] P[d ps &gt; 0] (13)</formula><p>where D is event lifetime. That is the total reliability is the probability that either the event can be delivered immediately via path bypassing scheme, or the event suffers network partition but the delay caused by the buffering scheme is still less than the event lifetime.</p><p>Note that estimated pairwise reliability r ′ ps can be either calculated by Equation (3), Equation (4), Equation (12), or Equation <ref type="formula" target="#formula_6">(13)</ref>, depending on which fault-tolerant technique is used. Once the estimated reliability r ′ ps values of all publisher-subscriber pairs are calculated, they can be used to calculate the estimated subscriber reliability r ′ s using Equation (2).</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5">Evaluation</head><p>We evaluate the proposed analytical model via simulations with NS-2 network simulator <ref type="bibr">[2]</ref>. In the simulator, we implement a topic-based, tree-based publish / subscribe protocol with four different reliability mechanisms described in Section 2.4 and analyzed in Section 4. In the experiment, we assume each publisher publishes its own unique topic. We assign a topic to each subscriber such that each topic's popularity follows Power law model.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5.1">Parameter Settings</head><p>We investigated several host availability traces and reports, ranging from commercial server log to distributed testbed log <ref type="bibr">[3,</ref><ref type="bibr">4,</ref><ref type="bibr" target="#b14">18,</ref><ref type="bibr" target="#b31">35]</ref>. In most cases, server's time between failures tends to range from several days to weeks, while time to repair usually range within hours. Motivated by such finding, we describe a component 5 from availability perspective by two metrics, period and availability. We define the term period of a component as the summation of the component's mean time between failure and mean time to repair (i.e., mean failure-repair cycle length) and the term availability as the fraction of time the component is on. Thus, given a component x's period PR x and availability a x , we can calculate x's mean time between failures MT BF x = a x .PR x and mean time to repair MT T R x = (1 − a x ).PR x respectively.</p><p>In the simulation, a component x will be on for the time period which is drawn from the exponential distribution with mean MT BF x before going to off state. Likewise, the component x will then be off for the time period drawn from the exponential distribution with mean MT T R x before going to on state again. Thus, such component x will have exponential failure rate γ x = 1</p><p>MT BF x and exponential repair rate σ x = 1</p><formula xml:id="formula_22">MT T R x .</formula><p>Based on the previous work <ref type="bibr" target="#b7">[11]</ref>, we set each overlay link's availability set to 0.99 and period to 60,000 seconds. Each publisher has default publishing interval equal to 1 minute. Each event has default lifetime equal to 3,600 seconds (1 hours). Each simulation is run for 14 days of simulation time. The evaluation result of each simulation parameter set is averaged from 10 runs.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5.2">Evaluation Results</head><p>We conduct the experiment with two sets of broker network topology. The first set is tree-based broker topology in order to study the performance of static path schemes (Section 4.2 and 4.3) without the effect of path diversity. The second set is random broker topology in order to study both static path schemes and path bypassing schemes (Section 4.4 and 4.5) with the effect of path diversity.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5.2.1">Tree-based Broker Network Topology</head><p>To study the performance of static-path reliability schemes (Section 4.2 and 4.3), we generate a random broker tree consisting of 10 brokers, 10 publishers, and 500 subscribers. We randomly assign a home broker to each publisher and each subscriber. We divide all generated trees into four sets. The first set of trees has  <ref type="bibr">[4]</ref>. <ref type="figure">Figure 6</ref> shows the predicted subscriber reliability on x axis and the actual subscriber reliability on y axis. Each point in the graph represents one subscriber. The color of the point represents the broker configuration and faulttolerant scheme used. As shown in the graph, our proposed analytical model can accurately predict the subscriber reliability for each subscriber (i.e., all the points are clustered around x=y diagonal line). Also, there is a clear distinction of reliability value between different groups of broker configuration. The group with lowest reliability is the low-end servers with periodic subscription scheme, followed by the low-end servers with event buffering scheme. Notice that the event buffering scheme could achieve high reliability than the periodic subscription scheme, although the performance gain effect may be less, compared to the performance gain from the server's quality.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5.2.2">Random Broker Network Topology</head><p>We generate a random graph consisting of 10 brokers, 10 publishers, and 500 subscribers. Publishers and subscribers are randomly assigned to each broker. Again, we run the simulations with two broker availability specifications named low-end (0.9 -0.95 availability) and highend (0.99 -0.999 availability). We compare the perfor- mance in terms of subscriber reliability among four faulttolerant techniques (i.e., from Section 4.2 -4.5). <ref type="figure" target="#fig_10">Figure 7</ref> shows the performance comparison between the four protocols in 10-broker overlay graph. Again, our analytical model accurately predicts the real-time reliability of each subscriber. For the low-end broker configuration, the path bypassing scheme with event buffering has the best performance, followed by the path bypassing scheme with periodic subscription, the static path scheme with event buffering, and the static path scheme with periodic subscription respectively. However, for the high-end broker configuration, the static path scheme with event buffering performs best and as well as the path bypassing scheme with event buffering. This finding suggests that one should prefer to use the static path scheme with event buffering in high-end broker configuration, as it has lower overhead than the path bypassing scheme with event buffering.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="6">Related Work</head><p>Improving reliability, timeliness, and other QoS metrics in wide-area overlay networks have been a significant topic of researchs for many years <ref type="bibr" target="#b1">[5,</ref><ref type="bibr" target="#b2">6,</ref><ref type="bibr" target="#b8">12]</ref>. However, the approaches in this category are designed for pointto-point routing and do not specifically address decoupling nature between publishers and subscribers in publish/subscribe systems.</p><p>Several fault-tolerant mechanisms have been proposed specially for publish/subscribe systems under failures without considering timeliness property <ref type="bibr" target="#b4">[8,</ref><ref type="bibr" target="#b6">10,</ref><ref type="bibr" target="#b9">13,</ref><ref type="bibr" target="#b19">23]</ref>. On the other hand, several works have proposed performance analytical model to predict timeliness in publish/subscribe systems in perfect scenarios (i.e., without broker/link failures) <ref type="bibr" target="#b20">[24,</ref><ref type="bibr" target="#b27">31,</ref><ref type="bibr" target="#b28">32]</ref>. This paper bridges such two approaches by quantitatively analyzing commonly used fault-tolerant techniques and their effect to both reliability and timeliness of publish/subscribe systems. There have been a few works that discuss timeliness of event delivery in publish/subscribe systems under component failures <ref type="bibr" target="#b10">[14,</ref><ref type="bibr" target="#b16">20]</ref>. However, they did not provide analytical model of their proposed systems. Recently, Esposito et al proposed and analyzed the use of network coding and gossiping to provide reliability and timeliness in tree-based publish / subscribe systems <ref type="bibr" target="#b11">[15]</ref>. In contrast, our model discusses more commonly used faulttolerant techniques such as path diversity and buffering. Also, our work does not assume tree-based publish / subscribe, but also works for any generic broker topology.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="7">Conclusions</head><p>In this paper, we proposed an analytical model to estimate the subscriber real-time reliability for publish / subscribe systems with faulty brokers and links. We first described broker failure and link failure model before discussing several existing fault-tolerant techniques for distributed publish / subscribe systems. We then proposed the generic analytical model to estimate subscriber reliability. The evaluation via simulation has proved the correctness of our predictive model. Our proposed model can then be used as a building block for optimization problems such as subscriber assignment problem or broker network planning problem.</p><p>There are a few possible directions for future works. The first direction is to use the proposed analytical model to optimize performance of the publish / subscribe systems. Second, the analytical model could be extended to the case where component failure time is not exponentially distributed. Finally, another possible direction is to validate the proposed analytical model using data collected from real systems.</p></div><figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_0"><head>(</head><label></label><figDesc>Figure 1: Example of subscription propagation and event routing in a tree-based publish / subscribe network</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_1"><head>(</head><label></label><figDesc>Figure 2: Example of event buffering / retransmission scheme</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_2"><head>Figure 4 :</head><label>4</label><figDesc>Figure 4: Example of a publisher-subscriber path with length 3</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_3"><head>r</head><label></label><figDesc>′ ps = P[an event from p arrives at s on time] = P[p's home broker is on]. P[end-to-end delay less than event lifetime]</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_4"><head></head><label></label><figDesc>Let d + b i be the conditional buffering delay at broker b i under the condi- tion that d b i &gt; 0. Assuming the event arrives at arbitrary time at broker b i , the conditional buffering delay d + b i</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_5"><head>Figure 5 :</head><label>5</label><figDesc>Figure 5: 8-state continuous, absorbing Markov process diagram for per-hop buffering delay analysis</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_6"><head></head><label></label><figDesc>respectively. Hence, the cumulative distribution of d + b i</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_8"><head></head><label></label><figDesc>(i) 0 refers to the same broker for all 0 ≤ i &lt; m, which is publisher p's home broker. Likewise, b (i) |δ (i) ps |−1 refers to the same broker, which is the subscriber s's home broker. Let b 0 and b |δ ps |−1 denote publisher p's home broker and subscriber s's home broker respectively. Hence, the pairwise reliability r ′ ps between publisher p and subscriber s in dynamic tree scheme is estimated as r ′ ps = P[G is connected between p and s] ≥ P[G ′ is connected between p and s] ≥ P[p's home broker is on]· P[s's home broker is on]· P[at least one path is connected]</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_9"><head></head><label></label><figDesc>Figure 6: Subscriber reliability in static random tree with 10 brokers and 60K s period</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_10"><head>Figure 7 :</head><label>7</label><figDesc>Figure 7: Subscriber reliability in 10-broker overlay graph with average degree 4 and 60K s period</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_0" validated="false"><head>where γ b and σ b are</head><label></label><figDesc></figDesc><table>exponentially distributed failure rate and repair rate, 
respectively. That is, the broker b has exponentially dis-
tributed time between failures and time to repair with 
mean 1 

γ b 

and 1 

σ b 

</table></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_1" validated="false"><head>rate of events delivered on time to s ] E[total rate of events of s's interest]</head><label></label><figDesc></figDesc><table></table></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_2" validated="false"><head>, we can compute the conditional buffering delay distribution d + b i at broker b i . Hence, we can estimate buffering delay d b i at broker b i as</head><label></label><figDesc></figDesc><table></table></figure>

			<note place="foot" n="1"> While this paper focuses on topic-based publish / subscribe, our approach can be extended to support content-based publish / subscribe as well [29].</note>

			<note place="foot" n="2"> The path bypassing technique can be used with other routing schemes as well.</note>

			<note place="foot" n="4"> In the analysis, we assume each broker to have unbounded buffer such that it can always store any incoming event.</note>
		</body>
		<back>
			<div type="references">

				<listBibl>

<biblStruct xml:id="b0">
	<monogr>
		<title level="m" type="main">Apache logging services</title>
		<ptr target="http://logging.apache.org/" />
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b1">
	<analytic>
		<title level="a" type="main">Reliable communication in overlay networks</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Amir</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Y</forename><surname>And</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Danilov</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">DSN</title>
		<imprint>
			<publisher>IEEE Computer Society</publisher>
			<date type="published" when="2003" />
			<biblScope unit="page" from="511" to="520" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b2">
	<monogr>
		<title level="m" type="main">Improving End-to-End Availability Using Overlay Networks</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Andersen</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><forename type="middle">G</forename></persName>
		</author>
		<imprint>
			<date type="published" when="2005-02" />
		</imprint>
	</monogr>
<note type="report_type">Ph.D.</note>
	<note>Massachusetts Institute of Technology</note>
</biblStruct>

<biblStruct xml:id="b3">
	<monogr>
		<title level="m" type="main">Optimizing publish/subscribe systems with congestion handling</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Arianfar</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename></persName>
		</author>
		<imprint>
			<date type="published" when="2008" />
		</imprint>
		<respStmt>
			<orgName>Helsinki University of Technology</orgName>
		</respStmt>
	</monogr>
	<note>Master&apos;s thesis</note>
</biblStruct>

<biblStruct xml:id="b4">
	<analytic>
		<title level="a" type="main">Xnet: A reliable content-based publish/subscribe system</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Chand</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>And</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Felber</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">SRDS &apos;04: Proceedings of the 23rd IEEE International Symposium on Reliable Distributed Systems</title>
		<meeting><address><addrLine>Washington, DC, USA</addrLine></address></meeting>
		<imprint>
			<publisher>IEEE Computer Society</publisher>
			<date type="published" when="2004" />
			<biblScope unit="page" from="264" to="273" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b5">
	<analytic>
		<title level="a" type="main">Using publish/subscribe middleware for mobile systems</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Cugola</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">G</forename><surname>And</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Jacobsen</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">H.-A</forename></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">SIGMOBILE Mob. Comput. Commun. Rev</title>
		<imprint>
			<biblScope unit="volume">6</biblScope>
			<biblScope unit="page" from="25" to="33" />
			<date type="published" when="2002" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b6">
	<analytic>
		<title level="a" type="main">Towards dynamic reconfiguration of distributed publish-subscribe middleware</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Cugola</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">G</forename><surname>Picco</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">G</forename><forename type="middle">P</forename><surname>And</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Murphy</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><forename type="middle">L</forename></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">SEM</title>
		<editor>A. Coen-Porisini and A. van der Hoek</editor>
		<imprint>
			<publisher>Springer</publisher>
			<date type="published" when="2002" />
			<biblScope unit="volume">2596</biblScope>
			<biblScope unit="page" from="187" to="202" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b7">
	<analytic>
		<title level="a" type="main">End-to-end wan service availability</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Dahlin</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Chandra</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">B</forename><forename type="middle">B V</forename><surname>Gao</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">L</forename><surname>And</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Nayate</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE/ACM Trans. Netw</title>
		<imprint>
			<biblScope unit="volume">11</biblScope>
			<biblScope unit="page" from="300" to="313" />
			<date type="published" when="2003" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b8">
	<analytic>
		<title level="a" type="main">Service overlay networks: Slas, qos, and bandwidth provisioning</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Duan</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Z</forename><surname>Zhang</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Z.-L</forename><surname>And</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Hou</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Y</forename><forename type="middle">T</forename></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE/ACM Trans. Netw</title>
		<imprint>
			<biblScope unit="volume">11</biblScope>
			<biblScope unit="page" from="870" to="883" />
			<date type="published" when="2003" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b9">
	<analytic>
		<title level="a" type="main">Reliable publish/subscribe middleware for time-sensitive internet-scale applications</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Esposito</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><surname>Cotroneo</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>And</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Gokhale</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><forename type="middle">S</forename></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">DEBS</title>
		<editor>A. S. Gokhale and D. C. Schmidt</editor>
		<imprint>
			<publisher>ACM</publisher>
			<date type="published" when="2009" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b10">
	<analytic>
		<title level="a" type="main">Reliable event dissemination over wide-area networks without severe performance fluctuations</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Esposito</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><surname>Cotroneo</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>And</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Russo</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">ISORC &apos;10: Proceedings of the 2010 13th IEEE International Symposium on Object/Component/ServiceOriented Real-Time Distributed Computing</title>
		<meeting><address><addrLine>Washington, DC, USA</addrLine></address></meeting>
		<imprint>
			<publisher>IEEE Computer Society</publisher>
			<date type="published" when="2010" />
			<biblScope unit="page" from="97" to="101" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b11">
	<analytic>
		<title level="a" type="main">Achieving reliable and timely event dissemination over wan</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Esposito</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><surname>Russo</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Beraldi</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Platania</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>And</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Baldoni</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 13th international conference on Distributed Computing and Networking</title>
		<meeting>the 13th international conference on Distributed Computing and Networking<address><addrLine>Berlin, Heidelberg</addrLine></address></meeting>
		<imprint>
			<publisher>Springer-Verlag</publisher>
			<date type="published" when="2012" />
			<biblScope unit="page" from="265" to="280" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b12">
	<analytic>
		<title level="a" type="main">The many faces of publish/subscribe</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Eugster</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><forename type="middle">T</forename><surname>Felber</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><forename type="middle">A</forename><surname>Guerraoui</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>And</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Ker-Marrec</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A.-M</forename></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">ACM Comput. Surv</title>
		<imprint>
			<biblScope unit="volume">35</biblScope>
			<biblScope unit="page" from="114" to="131" />
			<date type="published" when="2003" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b13">
	<monogr>
		<title level="m" type="main">The Syslog Protocol. RFC 5424 (Proposed Standard)</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Gerhards</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename></persName>
		</author>
		<imprint>
			<date type="published" when="2009-03" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b14">
	<monogr>
		<title level="m" type="main">Repository of availability traces</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Godfrey</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><forename type="middle">B</forename></persName>
		</author>
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b15">
	<monogr>
		<title level="m" type="main">Self-Managing Publish/Subscribe Systems</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Jaeger</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><forename type="middle">A</forename></persName>
		</author>
		<imprint>
			<date type="published" when="2007" />
		</imprint>
		<respStmt>
			<orgName>Technische Universität Berlin</orgName>
		</respStmt>
	</monogr>
<note type="report_type">PhD thesis</note>
</biblStruct>

<biblStruct xml:id="b16">
	<analytic>
		<title level="a" type="main">Soft state in publish/subscribe</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Jerzak</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Z</forename><surname>And</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Fetzer</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">DEBS &apos;09: Proceedings of the Third ACM International Conference on Distributed Event-Based Systems</title>
		<meeting><address><addrLine>New York, NY, USA</addrLine></address></meeting>
		<imprint>
			<publisher>ACM</publisher>
			<date type="published" when="2009" />
			<biblScope unit="page" from="1" to="12" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b17">
	<monogr>
		<title level="m" type="main">The statistical analysis of failure time data</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Kalbfleisch</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><forename type="middle">D</forename><surname>And</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Prentice</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><forename type="middle">L</forename></persName>
		</author>
		<imprint>
			<date type="published" when="2011" />
			<publisher>Wiley-Interscience</publisher>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b18">
	<analytic>
		<title level="a" type="main">Reliable and highly available distributed publish/subscribe service</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Kazemzadeh</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><forename type="middle">S</forename><surname>And</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Jacobsen</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">H.-A</forename></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">SRDS &apos;09: Proceedings of the 2009 28th IEEE International Symposium on Reliable Distributed Systems</title>
		<meeting><address><addrLine>Washington, DC, USA</addrLine></address></meeting>
		<imprint>
			<publisher>IEEE Computer Society</publisher>
			<date type="published" when="2009" />
			<biblScope unit="page" from="41" to="50" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b19">
	<analytic>
		<title level="a" type="main">Opportunistic multipath forwarding in content-based publish/subscribe overlays</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Kazemzadeh</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><forename type="middle">S</forename><surname>And</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Jacobsen</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">H.-A</forename></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Middleware</title>
		<imprint>
			<date type="published" when="2012" />
			<biblScope unit="page" from="249" to="270" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b20">
	<analytic>
		<title level="a" type="main">A methodology for performance modeling of distributed eventbased systems</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Kounev</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Sachs</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">K</forename><surname>Bacon</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>And</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Buchmann</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><forename type="middle">P</forename></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">In ISORC</title>
		<imprint>
			<biblScope unit="page" from="13" to="22" />
			<date type="published" when="2008" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b21">
	<monogr>
		<title/>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Latouche</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">G</forename><surname>And</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Ramaswami</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">V</forename></persName>
		</author>
		<editor>Stochastic Modelling, 1 ed. ASA SIAM</editor>
		<imprint>
			<date type="published" when="1999" />
			<publisher>PH Distributions</publisher>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b22">
	<analytic>
		<title level="a" type="main">A scalable and elastic publish/subscribe service</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">L</forename><forename type="middle">I</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Ye</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">F</forename><surname>Kim</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Chen</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">H</forename><surname>And</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Lei</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">H</forename></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 2011 IEEE International Parallel &amp; Distributed Processing Symposium</title>
		<meeting>the 2011 IEEE International Parallel &amp; Distributed Processing Symposium<address><addrLine>Washington, DC, USA</addrLine></address></meeting>
		<imprint>
			<date type="published" when="2011" />
			<biblScope unit="page" from="1254" to="1265" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b23">
	<analytic>
		<title level="a" type="main">Nineteen dubious ways to compute the exponential of a matrix</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Moler</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><surname>And</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Loan</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><forename type="middle">V</forename></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">SIAM Review</title>
		<imprint>
			<biblScope unit="page" from="801" to="836" />
			<date type="published" when="1978" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b24">
	<monogr>
		<title level="m" type="main">Large-scale Content-based Publish/Subscribe Systems</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Muhl</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">G</forename></persName>
		</author>
		<imprint>
			<date type="published" when="2002" />
		</imprint>
		<respStmt>
			<orgName>University of Technology Darmstadt</orgName>
		</respStmt>
	</monogr>
<note type="report_type">PhD thesis</note>
</biblStruct>

<biblStruct xml:id="b25">
	<monogr>
		<title level="m" type="main">Towards timeliness and reliability analysis of distributed content-based publish/subscribe systems over best-effort networks</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Pongthawornkamol</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><surname>And</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Nahrstedt</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">K</forename></persName>
		</author>
		<imprint/>
	</monogr>
<note type="report_type">Tech</note>
</biblStruct>

<biblStruct xml:id="b26">
	<analytic>
		<title level="a" type="main">Probabilistic qos modeling for reliability/timeliness prediction in distributed content-based publish/subscribe systems over besteffort networks</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Pongthawornkamol</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><surname>Nahrstedt</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">K</forename><surname>And</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Wang</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">G</forename></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">ICAC &apos;10: Proceeding of the 7th international conference on Autonomic computing</title>
		<meeting><address><addrLine>New York, NY, USA</addrLine></address></meeting>
		<imprint>
			<publisher>ACM</publisher>
			<date type="published" when="2010" />
			<biblScope unit="page" from="185" to="194" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b27">
	<analytic>
		<title level="a" type="main">Performance Modeling and Benchmarking of EventBased Systems</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Sachs</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">K</forename></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">SPEC Distinguished Dissertation Award</title>
		<imprint>
			<date type="published" when="2010" />
		</imprint>
		<respStmt>
			<orgName>TU Darmstadt</orgName>
		</respStmt>
	</monogr>
<note type="report_type">PhD thesis</note>
</biblStruct>

<biblStruct xml:id="b28">
	<analytic>
		<title level="a" type="main">Stochastic performance analysis and capacity planning of publish/subscribe systems</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Schr¨oterschr¨</forename><surname>Schr¨oter</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Uhl</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">G</forename><surname>Kounev</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Parzyjegla</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">H</forename><surname>And</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Richling</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the Fourth ACM International Conference on Distributed EventBased Systems</title>
		<meeting>the Fourth ACM International Conference on Distributed EventBased Systems<address><addrLine>New York, NY, USA</addrLine></address></meeting>
		<imprint>
			<publisher>ACM</publisher>
			<date type="published" when="2010" />
			<biblScope unit="page" from="258" to="269" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b29">
	<monogr>
		<title level="m" type="main">Time-dependent distributed systems: Proving safety, liveness and real-timeproperties</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><forename type="middle">U</forename><surname>Shankar</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Lam</forename><surname>And</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><forename type="middle">S</forename></persName>
		</author>
		<imprint>
			<date type="published" when="1985" />
			<pubPlace>Austin, TX, USA</pubPlace>
		</imprint>
	</monogr>
<note type="report_type">Tech. rep</note>
</biblStruct>

<biblStruct xml:id="b30">
	<analytic>
		<title level="a" type="main">The complexity of enumeration and reliability problems</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">L</forename><forename type="middle">G</forename><surname>Valiant</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">SIAM Journal on Computing</title>
		<imprint>
			<biblScope unit="volume">8</biblScope>
			<biblScope unit="page" from="410" to="421" />
			<date type="published" when="1979" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b31">
	<analytic>
		<title level="a" type="main">Beyond availability: Towards a deeper understanding of machine failure characteristics in large distributed systems</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Yalagandula</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><surname>Nath</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Y</forename><forename type="middle">U</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">H</forename><surname>Gibbons</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><forename type="middle">B</forename><surname>And</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Seshan</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. of USENIX Workshop on Real, Large Distributed Systems</title>
		<meeting>of USENIX Workshop on Real, Large Distributed Systems</meeting>
		<imprint>
			<publisher>WORLDS</publisher>
			<date type="published" when="2004" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b32">
	<analytic>
		<title level="a" type="main">Combining flexibility and scalability in a peer-to-peer publish/subscribe system</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Zhang</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><surname>Krishnamurthy</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Wang</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><forename type="middle">Y</forename><surname>And</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Singh</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><forename type="middle">P</forename></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the ACM/IFIP/USENIX 2005 International Conference on Middleware</title>
		<meeting>the ACM/IFIP/USENIX 2005 International Conference on Middleware<address><addrLine>New York, NY, USA</addrLine></address></meeting>
		<imprint>
			<publisher>Springer-Verlag New York, Inc</publisher>
			<date type="published" when="2005" />
			<biblScope unit="page" from="102" to="123" />
		</imprint>
	</monogr>
	<note>Middleware &apos;05</note>
</biblStruct>

				</listBibl>
			</div>
		</back>
	</text>
</TEI>
