<?xml version="1.0" encoding="UTF-8"?>
<TEI xmlns="http://www.tei-c.org/ns/1.0" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
xsi:schemaLocation="http://www.tei-c.org/ns/1.0 /Users/atharsefid/Desktop/grobid-0.5.3/grobid-home/schemas/xsd/Grobid.xsd"
 xmlns:xlink="http://www.w3.org/1999/xlink">
	<teiHeader xml:lang="en">
		<encodingDesc>
			<appInfo>
				<application version="0.5.3" ident="GROBID" when="2020-09-29T02:55+0000">
					<ref target="https://github.com/kermitt2/grobid">GROBID - A machine learning software for extracting information from scholarly documents</ref>
				</application>
			</appInfo>
		</encodingDesc>
		<fileDesc>
			<titleStmt>
				<title level="a" type="main">An Empirical Study of File-System Fragmentation in Mobile Storage Systems</title>
			</titleStmt>
			<publicationStmt>
				<publisher/>
				<availability status="unknown"><licence/></availability>
			</publicationStmt>
			<sourceDesc>
				<biblStruct>
					<analytic>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Cheng</forename><surname>Ji</surname></persName>
							<affiliation key="aff0">
								<orgName type="department">Department of Computer Science</orgName>
								<orgName type="institution">City University of Hong Kong</orgName>
								<address>
									<settlement>Hong Kong</settlement>
								</address>
							</affiliation>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Li-Pin</forename><surname>Chang</surname></persName>
							<affiliation key="aff1">
								<orgName type="department">Department of Computer Science</orgName>
								<orgName type="institution">National Chiao-Tung University</orgName>
								<address>
									<country key="TW">Taiwan</country>
								</address>
							</affiliation>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Liang</forename><surname>Shi</surname></persName>
							<affiliation key="aff2">
								<orgName type="department">College of Computer Science</orgName>
								<orgName type="institution">Chongqing University</orgName>
								<address>
									<settlement>Chongqing</settlement>
									<country key="CN">China</country>
								</address>
							</affiliation>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Chao</forename><surname>Wu</surname></persName>
							<affiliation key="aff0">
								<orgName type="department">Department of Computer Science</orgName>
								<orgName type="institution">City University of Hong Kong</orgName>
								<address>
									<settlement>Hong Kong</settlement>
								</address>
							</affiliation>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Qiao</forename><surname>Li</surname></persName>
							<affiliation key="aff2">
								<orgName type="department">College of Computer Science</orgName>
								<orgName type="institution">Chongqing University</orgName>
								<address>
									<settlement>Chongqing</settlement>
									<country key="CN">China</country>
								</address>
							</affiliation>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Chun</forename><forename type="middle">Jason</forename><surname>Xue</surname></persName>
							<affiliation key="aff0">
								<orgName type="department">Department of Computer Science</orgName>
								<orgName type="institution">City University of Hong Kong</orgName>
								<address>
									<settlement>Hong Kong</settlement>
								</address>
							</affiliation>
						</author>
						<title level="a" type="main">An Empirical Study of File-System Fragmentation in Mobile Storage Systems</title>
					</analytic>
					<monogr>
						<imprint>
							<date/>
						</imprint>
					</monogr>
				</biblStruct>
			</sourceDesc>
		</fileDesc>
		<profileDesc>
			<abstract>
				<p>Nowadays, mobile devices have become the necessities of everyday life. However, users may notice that after a long period of usage, mobile devices will start experiencing sluggish response. In this paper, by conducting an empirical study of filesystem fragmentation on several aged mobile devices, we found that: 1) Files may suffer from severe fragmentation, and database files are among the most severely fragmented files; 2) Filesys-tem fragmentation does affect the performance of mobile devices, and the impact varies from devices to devices. Conventional defragmentation schemes do not work well on mobile devices because they do not consider the characteristics specific to mobile storage. Two pilot solutions were then suggested to enhance file defragmentation for mobile devices.</p>
			</abstract>
		</profileDesc>
	</teiHeader>
	<text xml:lang="en">
		<body>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="1">Introduction</head><p>Mobile devices, including smartphones, tablets and wearable devices, have become the necessities of daily life. For mobile devices, storage performance has been identified as a critical factor of the overall device performance <ref type="bibr" target="#b7">[7]</ref>. However, recent studies reported that the underlying flash-based storages of mobile devices are not efficiently used when the operations of file system and database are combined <ref type="bibr" target="#b9">[9]</ref>. In addition to the inefficient usage, another factor, fragmentation in file systems, has not been well studied in the literature.</p><p>Fragmentation in file systems is highly correlated with the space management methods of file systems. As the default file system of many mobile devices, EXT4 employs extent-based allocation and delayed allocation schemes to alleviate file fragmentation. However, our experiments show that with EXT4 file systems, SQLite database files still suffer from severe fragmentation. As we shall explain later, this result is closely related to how SQLite files grow and how free space is allocated to them.</p><p>In this work, we conducted several studies on file fragmentation in mobile devices. First of all, we examined how files are fragmented in several aged smartphones with normal user usages, such as social networking, web browsing, and instant messaging. We found that files are either severely or barely fragmented, and database files are among the mostly fragmented files. For example, on an one-year-old Google Nexus 5, the file newsfeed db-journal of the Facebook application is fragmented into several pieces whose average size is only 7 KB, and its fragments are widely dispersed over a range of 1.5 GB storage space. Next, we evaluated how file fragmentation impacts I/O performance, and identified at least two reasons for I/O latency degradation: First, accessing fragmented files results in frequent block I/Os, which accumulate a large time overhead on the I/O path. Second, file fragmentation incurs highly dispersed I/O patterns, which diminish spatial localities. To enable efficient random access with limited resource, flash storages may adopt demandbased caching of the page-level mapping table. Accessing highly fragmented files imposes high overhead on the management of the mapping cache and amplifies the latencies of block reading and writing.</p><p>Conventional disk defragmentation methods are considered harmful to flash memory because they involve intensive data copy. They do not proactively avoid file fragmentation either. To the best of our knowledge, no file defragmentation schemes have been proposed for mobile devices. Finally, we suggested two pilot solutions with the consideration of the flash management overhead and file access characteristics in mobile storage systems.</p><p>This study makes following contributions: 1) We identified that file fragmentation is a serious problem in mobile devices, and SQLite database files were among the mostly fragmented files. 2) We evaluated how application performance of mobile devices can be affected by fragmentation in mobile devices; 3) We suggested two pilot solutions to optimize file defragmentation in mobile devices.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2">Background and Related Work</head></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.1">Fragmentation in File Systems</head><p>File systems, including EXT4, FAT, and even the logstructured file system, F2FS, suffer from fragmentation. Fragmentation in file systems is caused by the aging problem <ref type="bibr" target="#b12">[12]</ref>, and it emerges when the file system cannot find continuous free space for files. Take EXT4 as an example, which is the default file system since Android version 4.0.4, it suffers from three types of fragmentation: single file fragmentation, relevant file fragmentation, and free space fragmentation <ref type="bibr" target="#b11">[11]</ref>. These types of fragmentation did affect the performance of hard disk drives <ref type="bibr" target="#b3">[4]</ref>. However, there is little work targeting on how they affect the performance of mobile storage systems.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.2">Conventional Defragmentation</head><p>Previous studies propose to restore the continuity of fragmented files through re-locating file fragments to a continuous free space. The DFS <ref type="bibr" target="#b1">[2]</ref> file system proactivaly performs file defragmentation when severe fragmentation is detected. EXT4 employs a user-mode tool, e4defrag <ref type="bibr" target="#b11">[11]</ref>, to defragment files in an on-demand manner. Defragmenting Solid-State Disks (SSDs) of desktop computers was reported having little effect and even considered harmful to SSD lifetime <ref type="bibr" target="#b6">[6]</ref>. However, applications in smartphones exhibit very unique file accessing behaviors, and the design of flash storage for smartphones is resource conservative. We observed that fragmentation is a serious problem in smartphones and it noticeably affects the performance of file accessing on flash storage.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3">Fragment Measurement Setup</head><p>In this section, we present the setups for our fragmentation study including the mobile platforms, measurement softwares and benchmarks.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.1">Smartphone Platforms</head><p>Our study is based on four Android phones, including Google Nexus 5, Google Nexus 6, Huawei Honor 6, and Huawei Ascend P7. These phones were from randomly selected people to avoid potential biases. These phones had underwent at least six months of daily use of their owners. The use patterns of these phones involved common Android user activities, including web surfing, sending/receiving emails, social networking, instant messaging, and taking pictures. These activities were based on popular Android applications, including Facebook, Twitter, WeChat, Chrome, Gmail, Google Earth, and the built-in applications like Camera. Observations and experiments regarding file fragmentation were conducted on the Android data partition, which was formatted in EXT4. The data partition sizes of the selected phones were 26.8, 26.0, 11.6 and 11.8 (GB), respectively.</p><p>Upon the arrivals of these phones, the file system utilizations of their data partitions were 93%, 57%, 44%, and 90%, respectively.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.2">Measurement Softwares and Application Benchmarks</head><p>e4defrag is used for inspecting the file fragmentation and performing file defragmentation if needed. To manually execute SQL statements on a SQLite database, we use the command-line utility sqlite3. To study the I/O pattern of the fragmented files, we use blktrace to collect block-level traces for device I/O and use MOST <ref type="bibr" target="#b5">[5]</ref> to identify the source file of each I/O request. Several popular Android applications, including Facebook, Twitter, WeChat and Google Earth are used to assess the impacts of fragmentation. With these applications, we read news feed, chat with friends, and view online satellite maps for one minute, respectively.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4">Characteristics of Fragmentation</head><p>In this section, we characterize fragmentation in Android devices. Degree of Fragmentation (DoF) is used to represent the degree of single file fragmentation. DoF is computed by Equation 1, where n ext is the current number of extents and n lowest ext is the ideal (smallest) number of extents of the file, respectively. The larger the DoF is, the more serious the fragmentation is. In the following, fragmentation is analyzed against file types and file system utilizations.</p><formula xml:id="formula_0">DoF = n ext /n lowest ext (1)</formula><p>Fragmentation vs. File Types: We examined the fragmentation of different types of files using the smartphones described in Section 3.1. <ref type="figure" target="#fig_1">Figure 1</ref> shows the DoF of database files (with extensions .db, .db-journal, and .wal), executable files (with extensions .apk, .dex, .odex, and .so) and all files. We found that the file fragmentation has two extremes: most of the executable files are barely fragmented, while the database files, especially those with the .db and .db-journal extensions, are severely fragmented.</p><p>We are particularly interested in the fragmentation of database files, because they contribute to about 70% of all block writes in Android devices <ref type="bibr" target="#b9">[9]</ref>. We examined the single file fragmentation of database files from a selected set of Android applications on the Google Nexus 5. As shown in <ref type="figure" target="#fig_2">Figure 2(b)</ref>, almost all the database files are severely fragmented. Particularly, each of the database file of Facebook is fragmented into four pieces on average (47 files have 162 fragments). Most fragmented files are those with extensions .db and .db-journal, and their fragment sizes range from tens to hundreds of kilobytes. This is because when database files are appended with new data, record by record, an aged file system can   barely find continuous free space for them to grow, especially when multiple database files in the same directory are growing in parallel. Similar results are obtained on the other three smartphones. Fragmentation vs. File System Utilizations: Even when the space utilization of file system is low or moderate, database journal files are still prone to fragmentation, regardless of any specific Android device. To verify this, we performed a factory reset on the Nexus 5 described in Section 3.1 to clear up the file system. After the reset, we re-installed all applications back and manually ran the applications for one hour. By the end of this test, the file system utilization was only 19% (previously 93%). However, we found that many database files, especially the .db-journal files, were still severely fragmented as they were in aged file systems. Take Facebook as example, where the SQLite library employed the default DELETE mode for database journaling, the DoF of Facebook's database files was 4, which was not lower than the DoF shown in <ref type="figure" target="#fig_1">Figure 1(a)</ref>, and the fragmented pieces of several files (9 out of 48) were dispersed over 1 GB storage space. This is closely related to the way how database files grow, as explained in the previous paragraph. Based on our observations, the way how SQLite writes database files plays a more important role than application-level usage patterns do in terms of fragmentation production. Because most of Android apps employ SQLite for structural data management, as <ref type="figure" target="#fig_1">Figure 1</ref> shows, the DoF of different phones appear quite similar.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5">Evaluation of Fragmentation</head><p>In this section, we investigate how file fragmentation impact the file access performance in Android devices.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5.1">Overall Problem</head><p>We performed experiments to illustrate the performance degradation caused by fragmentation on the Huawei P7. We emulated an aged file system by creating large files (≥ 100 MB) and small files (≤ 100 KB) alternatively until the file system is completely full, and then randomly deleting some small files until the file system utilization dropped to 95%. Specifically, during an instance of the aging process, 86 large files of 9.4 GB and 24,000 small files of 1.8 GB were created, and about 10,000 small files were then deleted. To ensure that our experiments are repeatable, we cleaned up all previously created files and performed the same aging procedure again before each experiment. We then used Mobibench <ref type="bibr" target="#b5">[5]</ref> to replay the file-system traces collected from Twitter, Facebook, and WeChat. <ref type="figure" target="#fig_2">Figure 2</ref> shows that, during the trace replays, the replay time increased as the file fragmentation got worse. This observation confirms that file fragmentation affects the I/O performance in mobile devices.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5.2">Increased Block I/O Frequency</head><p>Accessing fragmented files will result in a high I/O frequency. We used Google Earth to examine how fragmentation increases the I/O frequency, and show the impact of an increased I/O frequency on I/O performance. We aged the Google Nexus 5 in the same way as that described in Section 5.1. We then viewed maps online, and 129 MB of new map resources were downloaded and appended to the file mirth cache.db. At the end of map viewing, we found that the database file was fragmented into 1605 pieces. Next, we manually performed an SQLite query to scan the entire database tables in the file. Block level trace was collected during the scan. Finally, we defragment the file and performed the same query on the defragmented file again. Results show that, after the database file is defragmented, the total block I/O count is reduced by 13%, and the elapsed time of the database table scan is reduced by 10%. The results confirm that, accessing fragmented files introduces a high overhead on the I/O path of mobile storage system.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5.3">Dispersed Block I/O Pattern</head></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5.3.1">Characteristics of Dispersed I/O</head><p>Since database files are among the mostly fragmented files and they contribute to the majority of all block writes, we are interested in the block write patterns associated with the database files. We ran the benchmarks  <ref type="figure" target="#fig_3">Figure 3</ref> shows that the block writes on the fragmented database files were widely dispersed over the entire address space.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5.3.2">Impacts of Dispersed I/O</head><p>As fragmented database files contribute to random block writes, we are interested in how bad the performance of random writes will be on different smartphones. For comparison, on each of the phones listed in Section 3.1, we performed 10,000 synchronous file writes on an 1 GB file that had been defragmented beforehand. The synchronous file writes were randomly distributed with a region in the file, and the region size varied from 1 MB to 1 GB. <ref type="figure" target="#fig_4">Figure 4</ref>(a) shows that, on the P7 and Honor 6, random writes in large regions are significantly slower than in small regions. As the write region is enlarged, the average write latency is increased by 130% and 69% on the P7 and Honor 6, respectively. On the Nexus 5 and Nexus 6, the write latency is less sensitive to the write region size, and noticeable degradation appeared only when the write region was as large as 1GB.</p><p>We further performed a similar test to evaluate the performance of dispersed reads. Interestingly, <ref type="figure" target="#fig_4">Figure  4</ref>(b) also indicates that random reads are unfavorable to flash storage. As pointed out in <ref type="bibr" target="#b2">[3]</ref>, random writes should be confined to a small area of disk space; otherwise, dispersed random writes can cause serious write performance degradation due to the amplified garbage collection overhead. However, as flash reads do not incur garbage collection, the results in <ref type="figure" target="#fig_4">Figures 4(a)</ref> and 4(b) suggest that dispersed I/O patterns impose some overheads on flash management other than garbage collection.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5.3.3">Mapping Cache Management Overhead</head><p>To deploy page-mapping FTL with a limited mapping structure size, demand-based page-level mapping scheme <ref type="bibr" target="#b0">[1]</ref> is proposed to selectively cache an active portion of the entire mapping table. Map caching is a popular design option for flash storage in mobile devices <ref type="bibr" target="#b8">[8]</ref>, including eMMCs in smartphones. Demand-based map caching exploits spatial locality by prefetching multiple mapping entries of a set of continuous logical pages [10]. The poor performance of the dispersed I/Os may be related to the management overhead of the mapping cache. If the access pattern appears random, the prefetching mechanism not only has little effect but also imposes a high pressure on the mapping cache.</p><p>Cache Simulation: To verify our theory, we implemented a page-mapping FTL simulator with a demandbased mapping cache. The simulated flash page size is 4KB, which consists of 1024 mapping entries. The unit for cache fetching and evicting is one page, and the cache replacement policy is the LRU algorithm. The simulation settings are based on the mostly common features that we learned from industry. We believe that our simulation results can reflect the performance characteristics of real eMMC mapping cache designs.</p><p>Our simulation involves two sets of block I/O traces from the same applications. The first set of traces were those collected in Section 5.3.1, and they were collected under severe file fragmentation. We produce the second set of traces based on the first set of traces, as follows: First, we defragmented the database files (which were severely fragmented) and recorded the block migration history during the defragmentation. Second, based on the block migration history, we converted the old block traces into a set of new traces. The old (dispersed) and new (defragmented) trace sets were both replayed.</p><p>We measured the increases in translation page reads and writes due to file fragmentation. Cache Write Ratio is the ratio of the total number of translation page writes with fragmentation to that without fragmentation. Cache Read Ratio is defined accordingly. <ref type="figure" target="#fig_5">Figure 5</ref> shows that Cache Write (and Read) Ratios are larger than 1 under all applications, and therefore the mapping cache incurs a much higher overhead under the dispersed I/O patterns than it does under the defragmented patterns. </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="6">Pilot Solutions</head><p>Conventional defragmentation methods are based on data copying and may unnecessarily wear flash memory in mobile storage. They do not proactively avoid fragmentation either. We suggest two pilot solutions to the fragmentation problem in mobile storage. Defragmenting Flash Storage: We suggest to exploit the mapping scheme in the FTL to speed up the defragmentation process without actual data copying. A new block command REMAP is introduced. As shown in <ref type="figure" target="#fig_6">Figure 6</ref>, by adjusting the FTL mapping information, the logical addresses of two pieces of data are exchanged for file defragmentation. The implementation of REMAP is similar to that of TRIM in EXT4. The defragment tool (i.e., e4defrag) makes ioctl() requests to inform the file system of moving all data from a fragmented file to a contiguous donor file. The file system then prepares corresponding REMAP commands, which will be flushed to the flash storage on transaction committing. Upon receiving a REMAP command, the FTL adjusts the mapping information accordingly. During this process, file system metadata does not employ REMAP and they must undergo data copy operations.</p><p>Proactive Fragmentation Avoidance: Based on the accessing behaviors of files, we suggest to proactively avoid fragmentation by allocating sufficient continuous space for files to grow. To minimize the impact on the current space allocation method in file systems, we suggest to perform fragmentation avoidance on database files only, because they are most likely to be fragmented and their sizes are usually small. Applications can pre-allocate free space for SQLite database files via the posix fallocate() system call. For example, most .db-journal files are smaller than 100KB, which can be a good choice of the pre-allocation size.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="7">Conclusion</head><p>In this study, we examined how severe file fragmentation is in real Android devices. We found that SQLite database files are among the most severely fragmented files, and also identified that fragmentation really affects mobile device performance: frequent block I/Os increase the time overhead on the I/O path, and dispersed I/O patterns impose a high pressure on the mapping-cache management. Two pilot solutions were suggested to enhance conventional disk defragmentation methods by considering the characteristics of mobile storages.</p></div><figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_1"><head>Figure 1 :</head><label>1</label><figDesc>Figure 1: (a) The degree of fragmentation (DoF) of SQLite database files, executable files, and all files. (b) Fragment count of SQLite database files of a selected set of applications on an aged Google Nexus 5. The total file number, the total number of fragments, and the average fragment sizes were reported.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_2"><head>Figure 2 :</head><label>2</label><figDesc>Figure 2: Normalized total I/O time in replaying filesystem call traces on Ascend P7. The number above each bar is the file fragment counts at the end of the replay.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_3"><head>Figure 3 :</head><label>3</label><figDesc>Figure 3: I/O pattern of writes on fragmented database files. (described in Section 3.2) on the aged Google Nexus 5, and collected the block I/O traces. We extracted the block I/Os associated with database files only. Figure 3 shows that the block writes on the fragmented database files were widely dispersed over the entire address space.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_4"><head>Figure 4 :</head><label>4</label><figDesc>Figure 4: Normalized elapsed time when changing the size of I/O region. I/O size: 4 KB, I/O number: 10000, direct IO mode is used in read.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_5"><head>Figure 5 :</head><label>5</label><figDesc>Figure 5: Amplifications of translation page writes and translation page reads.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_6"><head>Figure 6 :</head><label>6</label><figDesc>Figure 6: Defragmentation based on FTL re-mapping. A new block command REMAP is introduced. As shown in Figure 6, by adjusting the FTL mapping information, the logical addresses of two pieces of data are exchanged for file defragmentation. The implementation of REMAP is similar to that of TRIM in EXT4. The defragment tool (i.e., e4defrag) makes ioctl() requests to inform the file system of moving all data from a fragmented file to a contiguous donor file. The file system then prepares corresponding REMAP commands, which will be flushed to the flash storage on transaction committing. Upon receiving a REMAP command, the FTL adjusts the mapping information accordingly. During this process, file system metadata does not employ REMAP and they must undergo data copy operations. Proactive Fragmentation Avoidance: Based on the accessing behaviors of files, we suggest to proactively avoid fragmentation by allocating sufficient continuous space for files to grow. To minimize the impact on the current space allocation method in file systems, we suggest to perform fragmentation avoidance on database files only, because they are most likely to be fragmented and their sizes are usually small. Applications can pre-allocate free space for SQLite database files</figDesc></figure>
		</body>
		<back>

			<div type="acknowledgement">
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="8">Acknowledgments</head><p>We are grateful to our shepherd Beomseok Nam and the anonymous reviewers for their insightful feedbacks. This work is supported by the Fundamental Research Funds for the Central Universities (106112016CDJZR185512 and 106112014CDJZR185502), NSFC (61402059 and 61572411), and National 863 Programs 2015AA015304.</p></div>
			</div>

			<div type="references">

				<listBibl>

<biblStruct xml:id="b0">
	<analytic>
		<title level="a" type="main">DFTL: a flash translation layer employing demand-based selective caching of pagelevel address mappings</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Gupta</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Y</forename><forename type="middle">K</forename><surname>And</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Urgaonkar</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">B</forename></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. of ASPLOS</title>
		<meeting>of ASPLOS</meeting>
		<imprint>
			<publisher>ACM</publisher>
			<date type="published" when="2009" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b1">
	<analytic>
		<title level="a" type="main">DFS: A defragmented file system</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Ahn</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">W</forename><forename type="middle">H</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Kim</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">K</forename><surname>Choi</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Y</forename><surname>And</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Park</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. of MASCOTS</title>
		<meeting>of MASCOTS</meeting>
		<imprint>
			<publisher>IEEE</publisher>
			<date type="published" when="2002" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b2">
	<monogr>
				<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Bouganim</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">L</forename><surname>Onsson</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">B</forename><surname>And Bonnet</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><surname>Uflip</surname></persName>
		</author>
		<idno type="arXiv">arXiv:0909.1780</idno>
		<title level="m">Understanding flash io patterns</title>
		<imprint>
			<date type="published" when="2009" />
		</imprint>
	</monogr>
<note type="report_type">arXiv preprint</note>
</biblStruct>

<biblStruct xml:id="b3">
	<analytic>
		<title level="a" type="main">The effects of filesystem fragmentation</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">G</forename><surname>De Nijs</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Biesheuvel</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Denissen</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Lam-Bert</forename><surname>And</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">N</forename></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc</title>
		<meeting>null</meeting>
		<imprint>
			<date type="published" when="2006" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b4">
	<monogr>
				<title level="m">Linux Symposium</title>
		<imprint>
			<date type="published" when="2006" />
			<biblScope unit="volume">1</biblScope>
			<biblScope unit="page" from="193" to="208" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b5">
	<analytic>
		<title level="a" type="main">Framework for analyzing android i/o stack behavior: from generating the workload to analyzing the trace</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Jeong</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Lee</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">K</forename><surname>Hwang</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Lee</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>And</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Won</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Y</forename></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Future Internet</title>
		<imprint>
			<date type="published" when="2013" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b6">
	<monogr>
		<title level="m" type="main">O&amp;O defrag and solid state drives</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Kehrer</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">O</forename></persName>
		</author>
		<ptr target="http://www.oo-software.com/en/docs/whitepaper/oodssd.pdf" />
		<imprint>
			<date type="published" when="2014" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b7">
	<analytic>
		<title level="a" type="main">Revisiting storage for smartphones</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Kim</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">H</forename><surname>Agrawal</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">N</forename><surname>And</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Ungureanu</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. of FAST</title>
		<meeting>of FAST</meeting>
		<imprint>
			<date type="published" when="2012" />
			<biblScope unit="page" from="273" to="285" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b8">
	<analytic>
		<title level="a" type="main">Map cache design in mobile storage</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Kim</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">K</forename></persName>
		</author>
		<ptr target="http://dcslab.hanyang.ac.kr/nvramos14/presentation/s9.pdf" />
	</analytic>
	<monogr>
		<title level="j">NVRAMOS</title>
		<imprint>
			<date type="published" when="2014" />
		</imprint>
	</monogr>
	<note>SK hynix</note>
</biblStruct>

<biblStruct xml:id="b9">
	<analytic>
		<title level="a" type="main">Smart layers and dumb result: Io characterization of an android-based smartphone</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Lee</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">K</forename><surname>And</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Won</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Y</forename></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. of EMSOFT</title>
		<meeting>of EMSOFT</meeting>
		<imprint>
			<date type="published" when="2012" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b10">
	<analytic>
		<title level="a" type="main">A two-level caching mechanism for demand-based page-level address mapping in nand flash memory storage systems</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Qin</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Z</forename><surname>Wang</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Y</forename><surname>Liu</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>And</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Z</forename><surname>Shao</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">In RTAS</title>
		<imprint>
			<date type="published" when="2011" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b11">
	<analytic>
		<title level="a" type="main">ext4 online defragmentation</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><surname>Sato</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the Linux Symposium</title>
		<meeting>the Linux Symposium</meeting>
		<imprint>
			<date type="published" when="2007" />
			<biblScope unit="volume">2</biblScope>
			<biblScope unit="page" from="179" to="86" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b12">
	<analytic>
		<title level="a" type="main">File system agingincreasing the relevance of file system benchmarks</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Smith</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">K</forename><forename type="middle">A</forename><surname>And</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Seltzer</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><forename type="middle">I</forename></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">In ACM SIGMETRICS Performance Evaluation Review</title>
		<imprint>
			<biblScope unit="issue">1</biblScope>
			<date type="published" when="1997" />
		</imprint>
	</monogr>
</biblStruct>

				</listBibl>
			</div>
		</back>
	</text>
</TEI>
