<?xml version="1.0" encoding="UTF-8"?>
<TEI xmlns="http://www.tei-c.org/ns/1.0" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
xsi:schemaLocation="http://www.tei-c.org/ns/1.0 /Users/atharsefid/Desktop/grobid-0.5.3/grobid-home/schemas/xsd/Grobid.xsd"
 xmlns:xlink="http://www.w3.org/1999/xlink">
	<teiHeader xml:lang="en">
		<encodingDesc>
			<appInfo>
				<application version="0.5.3" ident="GROBID" when="2020-09-29T02:35+0000">
					<ref target="https://github.com/kermitt2/grobid">GROBID - A machine learning software for extracting information from scholarly documents</ref>
				</application>
			</appInfo>
		</encodingDesc>
		<fileDesc>
			<titleStmt>
				<title level="a" type="main">A Study of Linux File System Evolution</title>
			</titleStmt>
			<publicationStmt>
				<publisher/>
				<availability status="unknown"><licence/></availability>
			</publicationStmt>
			<sourceDesc>
				<biblStruct>
					<analytic>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Lanyue</forename><surname>Lu</surname></persName>
							<affiliation key="aff0">
								<orgName type="department">Computer Sciences Department</orgName>
								<orgName type="institution">University of Wisconsin</orgName>
								<address>
									<settlement>Madison</settlement>
								</address>
							</affiliation>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Andrea</forename><forename type="middle">C</forename><surname>Arpaci-Dusseau</surname></persName>
							<affiliation key="aff0">
								<orgName type="department">Computer Sciences Department</orgName>
								<orgName type="institution">University of Wisconsin</orgName>
								<address>
									<settlement>Madison</settlement>
								</address>
							</affiliation>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Remzi</forename><forename type="middle">H</forename><surname>Arpaci-Dusseau</surname></persName>
							<affiliation key="aff0">
								<orgName type="department">Computer Sciences Department</orgName>
								<orgName type="institution">University of Wisconsin</orgName>
								<address>
									<settlement>Madison</settlement>
								</address>
							</affiliation>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Shan</forename><surname>Lu</surname></persName>
							<affiliation key="aff0">
								<orgName type="department">Computer Sciences Department</orgName>
								<orgName type="institution">University of Wisconsin</orgName>
								<address>
									<settlement>Madison</settlement>
								</address>
							</affiliation>
						</author>
						<title level="a" type="main">A Study of Linux File System Evolution</title>
					</analytic>
					<monogr>
						<imprint>
							<date/>
						</imprint>
					</monogr>
				</biblStruct>
			</sourceDesc>
		</fileDesc>
		<profileDesc>
			<abstract>
				<p>We conduct a comprehensive study of file-system code evolution. By analyzing eight years of Linux file-system changes across 5079 patches, we derive numerous new (and sometimes surprising) insights into the file-system development process; our results should be useful for both the development of file systems themselves as well as the improvement of bug-finding tools.</p>
			</abstract>
		</profileDesc>
	</teiHeader>
	<text xml:lang="en">
		<body>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="1">Introduction</head><p>Open-source local file systems, such as Linux Ext4 <ref type="bibr" target="#b31">[31]</ref>, XFS <ref type="bibr" target="#b46">[46]</ref>, and Btrfs <ref type="bibr" target="#b30">[30]</ref>, remain a critical component in the world of modern storage. For example, many recent distributed file systems, such as Google GFS <ref type="bibr" target="#b17">[17]</ref> and Hadoop DFS <ref type="bibr" target="#b43">[43]</ref>, all replicate data objects (and associated metadata) across local file systems. On smart phones, most user data is managed by a local file system; for example, Google Android phones use Ext4 <ref type="bibr" target="#b1">[2,</ref><ref type="bibr" target="#b23">23]</ref> and Apple's iOS devices use HFSX <ref type="bibr" target="#b34">[34]</ref>. Finally, many desktop users still do not backup their data regularly <ref type="bibr" target="#b21">[21,</ref><ref type="bibr" target="#b29">29]</ref>; in this case, the local file system clearly plays a critical role as sole manager of user data.</p><p>Open-source local file systems remain a moving target. Developed by different teams with different goals, these file systems evolve rapidly to add new features, fix bugs, and improve performance and reliability, as one might expect in the open-source community <ref type="bibr" target="#b38">[38]</ref>. Major new file systems are introduced every few years <ref type="bibr" target="#b12">[12,</ref><ref type="bibr" target="#b30">30,</ref><ref type="bibr" target="#b32">32,</ref><ref type="bibr" target="#b39">39,</ref><ref type="bibr" target="#b46">46]</ref>; with recent technology changes (e.g., Flash <ref type="bibr" target="#b11">[11,</ref><ref type="bibr" target="#b18">18]</ref>), we can expect even more flux in this domain.</p><p>However, despite all the activity in local file system development, there is little quantitative understanding of their code bases. For example, where does the complexity of such systems lie? What types of bugs are common? Which performance features exist? Which reliability features are utilized? These questions are important to answer for different communities: for developers, so that they can improve current designs and implementations and create better systems; for tool builders, so that they can improve their tools to match reality (e.g., by finding the types of bugs that plague existing systems).</p><p>One way to garner insight into these questions is to study the artifacts themselves. Compared with proprietary software, open source projects provide a rich resource for source code and patch analysis. The fact that every version of Linux is available online, including a detailed set of patches which describe how one version transforms to the next, enables us to carefully analyze how file systems have changed over time. A new type of "systems software archeology" is now possible.</p><p>In this paper, we perform the first comprehensive study of the evolution of Linux file systems, focusing on six major and important ones: Ext3 <ref type="bibr" target="#b47">[47]</ref>, <ref type="bibr">Ext4 [31]</ref>, XFS <ref type="bibr" target="#b46">[46]</ref>, Btrfs <ref type="bibr" target="#b30">[30]</ref>, ReiserFS <ref type="bibr" target="#b13">[13]</ref>, and JFS <ref type="bibr" target="#b10">[10]</ref>. These file systems represent diverse features, designs, implementations and even groups of developers. We examine every filesystem patch in the Linux 2.6 series over a period of eight years including 5079 patches. By carefully studying each patch to understand its intention, and then labeling the patch accordingly along numerous important axes, we can gain deep quantitative insight into the file-system development process. We can then answer questions such as "what are most patches for?", "what types of bugs are common?", and in general gain a new level of insight into the common approaches and issues that underlie current file-system development and maintenance.</p><p>We make the following high-level observations ( ยง3). A large number of patches (nearly 50%) are maintenance patches, reflecting the constant refactoring work needed to keep code simple and maintainable. The remaining dominant category is bugs (just under 40%, about 1800 bugs), showing how much effort is required to slowly inch towards a "correct" implementation; perhaps this hard labor explains why some have found that the quality of open source projects is better than the proprietary software average <ref type="bibr" target="#b0">[1]</ref>. Interestingly, the number of bugs does not die down over time (even for stable file systems), rather ebbing and flowing over time.</p><p>Breaking down the bug category further ( ยง4), we find that semantic bugs, which require an understanding of file-system semantics to find or fix, are the dominant bug category (over 50% of all bugs). These types of bugs are vexing, as most of them are hard to detect via generic bug detection tools <ref type="bibr" target="#b9">[9,</ref><ref type="bibr" target="#b35">35]</ref>; more complex model checking <ref type="bibr" target="#b52">[52]</ref> or formal specification <ref type="bibr" target="#b24">[24]</ref> may be needed. Concurrency bugs are the next most common (about 20% of bugs), more prevalent than in user-level software <ref type="bibr" target="#b26">[26,</ref><ref type="bibr" target="#b42">42,</ref><ref type="bibr" target="#b45">45]</ref>. Within this group, atomicity violations and deadlocks dominate. Kernel deadlocks are common (many caused by incorrectly using blocking kernel functions), hinting that recent research <ref type="bibr" target="#b22">[22,</ref><ref type="bibr" target="#b49">49]</ref> might be needed in-kernel. The remaining bugs are split relatively 1 evenly across memory bugs and improper error-code handling. In the memory bug category, memory leaks and null-pointer dereferences are common; in the error-code category, most bugs simply drop errors completely <ref type="bibr" target="#b19">[19]</ref>.</p><p>We also categorize bugs along other axes to gain further insight. For example, when broken down by consequence, we find that most of the bugs we studied lead to crashes or corruption, and hence are quite serious; this result holds across semantic, concurrency, memory, and error code bugs. When categorized by data structure, we find that B-trees, present in many file systems for scalability, have relatively few bugs per line of code. When classified by whether bugs occur on normal or failure-handling paths, we make the following important discovery: nearly 40% of all bugs occur on failure-handling paths. File systems, when trying to react to a failed memory allocation, I/O error, or some other unexpected condition, are highly likely to make further mistakes, such as incorrect state updates and missing resource releases. These mistakes can lead to corruption, crashes, deadlocks and leaks. Future system designs need better tool or language support to make these rarely-executed failure paths correct.</p><p>Finally, while bug patches comprise most of our study, performance and reliability patches are also prevalent, accounting for 8% and 7% of patches respectively ( ยง5). The performance techniques used are relatively common and widespread (e.g., removing an unnecessary I/O, or downgrading a write lock to a read lock). About a quarter of performance patches reduce synchronization overheads; thus, while correctness is important, performance likely justifies the use of more complicated and time saving synchronization schemes. In contrast to performance techniques, reliability techniques seem to be added in a rather ad hoc fashion (e.g., most file systems apply sanity checks non-uniformly). Inclusion of a broader set of reliability techniques could harden all file systems.</p><p>Beyond these results, another outcome of our work is an annotated dataset of file-system patches, which we make publicly available for further study (at this URL: pages.cs.wisc.edu/หll/fs-patch) by file-system developers, systems-language designers, and bug-finding tool builders. We show the utility of PatchDB by performing a case study ( ยง6); specifically, we search the dataset to find bugs, performance fixes, and reliability techniques that are unusually common across all file systems. This example brings out one theme of our study, which is that there is a deep underlying similarity in Linux local file systems, even though these file systems are significantly different in nature (e.g., designs, features, and groups of developers). The commonalities we do find are good news: by studying past bug, performance, and reliability patches, and learning what issues and challenges lie therein, we can greatly improve the next generation of file systems and tools used to build them.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2">Methodology</head><p>In this section, we first give a brief description of our target file systems. Then, we illustrate how we analyze patches with a detailed example. Finally, we discuss the limitations of our methodology.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.1">Target File Systems</head><p>Our goal in selecting a collection of disk-based file systems is to choose the most popular and important ones. The selected file systems should include diverse reliability features (e.g., physical journaling, logical journaling, checksumming, copy-on-write), data structures (e.g., hash tables, indirect blocks, extent maps, trees), performance optimizations (e.g., asynchronous thread pools, scalable algorithms, caching, block allocation for SSD devices), advanced features (e.g., pre-allocation, snapshot, resize, volumes), and even a range of maturity (e.g., stable, under development). For these reasons, we selected six file systems and their related modules: Ext3 with JBD <ref type="bibr" target="#b47">[47]</ref>, Ext4 with JBD2 <ref type="bibr" target="#b31">[31]</ref>, XFS <ref type="bibr" target="#b46">[46]</ref>, Btrfs <ref type="bibr" target="#b30">[30]</ref>, ReiserFS <ref type="bibr" target="#b13">[13]</ref>, and JFS <ref type="bibr" target="#b10">[10]</ref>. Ext3, JFS, ReiserFS and XFS were all stable and in production use before the Linux 2.6 kernel. Ext4 was introduced in Linux 2.6.19 and marked stable in Linux 2.6.28. Btrfs was added into Linux 2.6.29 and is still under active development.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.2">Classification of File System Patches</head><p>For each file system, we conduct a comprehensive study of its evolution by examining all patches from Linux 2.6.0 (Dec '03) to 2.6.39 <ref type="bibr">(May '11)</ref>. These are Linux mainline versions, which are released every three months with aggregate changes included in change logs. Patches consist of all formal modifications in each new kernel version, including new features, code maintenance, and bug fixes, and usually contain clear descriptions of their purpose and rich diagnostic information. On the other hand, Linux Bugzilla <ref type="bibr" target="#b2">[3]</ref> and mailing lists <ref type="bibr" target="#b3">[4,</ref><ref type="bibr" target="#b4">5]</ref> are not as well organized as final patches, and may only contain a subset or superset of final changes merged in kernel.</p><p>To better understand the evolution of different file systems, we conduct a broad study to answer three categories of fundamental questions:</p><p>โข Overview: What are the common types of patches in file systems and how do patches change as file systems evolve? Do patches of different types have different sizes?  To answer these questions, we manually analyzed each patch to understand its purpose and functionality, examining 5079 patches from the selected Linux 2.6 file systems. Each patch contains a patch header, a description body, and source-code changes. The patch header is a high-level summary of the functionality of the patch (e.g., fixing a bug). The body contains more detail, such as steps to reproduce the bug, system configuration information, proposed solutions, and so forth. Given these details and our knowledge of file systems, we categorize each patch along a number of different axes, as described later. <ref type="figure" target="#fig_0">Figure 1</ref> shows a real Ext3 patch. We can infer from the header that this patch fixes a null-pointer dereference bug. The body explains the cause of the null-pointer dereference and the location within the code. The patch also indicates that the bug was detected with Coverity <ref type="bibr" target="#b9">[9]</ref>.</p><p>This patch is classified as a bug (type=bug). The size is 1 (size=1) as one line of code is added. From the related source file (super.c), we infer the bug belongs to Ext3's superblock management (data-structure=super). A nullpointer access is a memory bug (pattern=memory,nullptr) and can lead to a crash (consequence=crash).</p><p>However, some patches have less information, making our analysis harder. In these cases, we sought out other sources of information, including design documents, forum and mailing-list discussions, and source-code analysis. Most patches are analyzed with high confidence given all the available information and our domain knowledge. Examples are shown throughout to give more insight as to how the classification is performed.</p><p>Limitations: Our study is limited by the file systems we chose, which may not reflect the characteristics of other file systems, such as other non-Linux file systems and flash-device file systems. We only examined kernel patches included in Linux 2.6 mainline versions, thus omitting patches for Ext3, JFS, ReiserFS, and XFS from Linux 2.4. As for bug representativeness, we only studied the bugs reported and fixed in patches, which is a biased subset; there may be (many) other bugs not yet reported. A similar study may be needed for user-space utilities, such as mkfs and fsck <ref type="bibr" target="#b33">[33]</ref>. </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3">Patch Overview</head><p>File systems evolve through patches. A large number of patches are discussed and submitted to mailing lists, bugreport websites, and other forums. Some are used to implement new features, while others fix existing bugs. In this section, we investigate three general questions regarding file-system patches. First, what are file-system patch types? Second, how do patches change over time? Lastly, what is the distribution of patch sizes?</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.1">Patch Type</head><p>We classify patches into five categories <ref type="table">(Table 1)</ref>: bug fixes (bug), performance improvements (performance), reliability enhancements (reliability), new features (feature), and maintenance and refactoring (maintenance). Each patch usually belongs to a single category. <ref type="figure" target="#fig_1">Figure 2</ref>(a) shows the number and relative percentages of patch types for each file system. Note that even though file systems exhibit significantly different levels of patch activity (shown by the total number of patches), the percentage breakdowns of patch types are relatively similar.</p><p>Maintenance patches are the largest group across all file systems (except Btrfs, a recent and not-yet-stable file system). These patches include changes to improve readability, simplify structure, and utilize cleaner abstractions; in general, these patches represent the necessary costs of keeping a complex open-source system well-maintained. Because maintenance patches are relatively uninteresting, we do not examine them further.</p><p>Bug patches have a significant presence, comprising nearly 40% of patches. Not surprisingly, the Btrfs has a larger percentage of bug patches than others; however, stable and mature file systems (such as Ext3) also have a sizable percentage of bug patches, indicating that bug fixing is a constant in a file system's lifetime ( <ref type="figure" target="#fig_4">Figure 5</ref>). Because this class of patch is critical for developers and tool builders, we characterize them in detail later ( ยง4).</p><p>Both performance and reliability patches occur as well, although with less frequency than maintenance and bug patches. They reveal a variety of techniques used by different file systems, motivating further study ( ยง5).  Finally, feature patches account for a small percentage of total patches; as we will see, most of feature patches contain more lines of code than other patches.</p><p>Summary: Nearly half of total patches are for code maintenance and documentation; a significant number of bugs exist in not only new file systems, but also stable file systems; all file systems make special efforts to improve their performance and reliability; feature patches account for a relatively small percentage of total patches.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.2">Patch Trend</head><p>File systems change over time, integrating new features, fixing bugs, and enhancing reliability and performance. Does the percentage of different patch types increase or decrease with time?</p><p>We studied the changes in patches over time and found few changes (not shown). While the number of patches per version increased in general, the percentage of maintenance, bug, reliability, performance, and feature patches remained relatively stable. Although there were a few notable exceptions (e.g., Btrfs had a time where a large number of performance patches were added), the statistics shown in the previous section are relatively good summaries of the behavior at any given time. Perhaps most interestingly, bug patches do not decrease over time; living code bases constantly incorporate bug fixes (see ยง4).</p><p>Summary: The patch percentages are relatively stable over time; newer file systems (e.g., Btrfs) deviate occasionally; bug patches do not diminish despite stability.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.3">Patch Size</head><p>Patch size is one approximate way to quantify the complexity of a patch, and is defined here as the sum of lines of added and deleted by a patch. <ref type="figure" target="#fig_2">Figure 3</ref> displays the size distribution of bug, performance, reliability, and feature patches. Most bug patches are small; 50% are less than 10 lines of code. However, more complex file systems   tend to have larger bug patches (e.g., Btrfs and XFS) (not shown due to lack of space). Interestingly, feature patches are significantly larger than other patch types. Over 50% of these patches have more than 100 lines of code; 5% have over 1000 lines of code. Summary: Bug patches are generally small; complicated file systems have larger bug patches; reliability and performance patches are medium-sized; feature patches are significantly larger than other patch types.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4">File System Bugs</head><p>In this section, we study file-system bugs in detail to understand their patterns and consequences comprehensively. First, we show the distribution of bugs in filesystem logical components. Second, we describe our bug pattern classification, bug trends, and bug consequences. Finally, we analyze each type of bug with a more detailed classification and a number of real examples.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.1">Correlation Between Code and Bugs</head><p>The code complexity of file systems is growing. able fair comparison, we partition each file system into nine logical components <ref type="table" target="#tab_4">(Table 2</ref>). <ref type="figure" target="#fig_3">Figure 4</ref> shows the percentage of bugs versus the percentage of code for each of the logical components across all file systems and versions. Within a plot, if a point is above the y = x line, it means that a logical component (e.g., inodes) has more than its expected share of bugs, hinting at its complexity; a point below said line indicates a component (e.g., a tree) with relatively few bugs per line of code, thus hinting at its relative ease of implementation.</p><p>We make the following observations. First, for all file systems, the file, inode, and super components have a high bug density. The file component is high in bug density either due to bugs on the fsync path (Ext3) or custom file I/O routines added for higher performance (XFS, Ext4, ReiserFS, JFS), particularly so for XFS, which has a custom buffer cache and I/O manager for scalability <ref type="bibr" target="#b46">[46]</ref>. The inode and superblock are core metadata structures with rich and important information for files and file systems, which are widely accessed and updated; thus, it is perhaps unsurprising that a large number of bugs arise therein (e.g., forgetting to update a time field in an inode, or not properly using a superblock configuration flag).  Second, transactional code represents a substantial percentage of each code base (as shown by the relatively high x-axis values) and, for most file systems, has a proportional amount of bugs. This relationship holds for Ext3 as well, even though Ext3 uses a separate journaling module (JBD); Ext4 (with JBD2) has a slightly lower percentage of bugs because it was built upon a more stable JBD from Linux 2.6.19. In summary, transactions continue to be a double-edged sword in file systems: while transactions improve data consistency in the presence of crashes, they often add many bugs due to their large code bases.</p><p>Third, the percentage of bugs in tree components of XFS, Btrfs, ReiserFS, and JFS is surprisingly small compared to code size. One reason may be the care taken to implement such trees (e.g., the tree code is the only portion of ReiserFS filled with assertions). File systems should be encouraged to use appropriate data structures, even if they are complex, because they do not induce an inordinate amount of bugs.</p><p>Although bug patches also relate to feature patches, it is difficult to correlate them precisely. Code changes partly or totally overlap each other overtime. A bug patch may involve both old code and recent feature patches.</p><p>Summary: The file, inode, and superblock components contain a disproportionally large number of bugs; transactional code is large and has a proportionate number of bugs; tree structures are not particularly error-prone, and should be used when needed without much worry.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.2">Bug Patterns</head><p>To build a more reliable file system, it is important to understand the type of bugs that are most prevalent and the typical patterns across file systems. Since different types of bugs require different approaches to detect and fix, these fine-grained bug patterns provide useful information to developers and tool builders alike. We partition file-system bugs into four categories based on their root causes as shown in <ref type="table" target="#tab_6">Table 3</ref>. The four major categories are semantic <ref type="bibr" target="#b26">[26,</ref><ref type="bibr" target="#b44">44]</ref>, concurrency <ref type="bibr" target="#b16">[16,</ref><ref type="bibr" target="#b28">28]</ref>, memory <ref type="bibr" target="#b14">[14,</ref><ref type="bibr" target="#b26">26,</ref><ref type="bibr" target="#b44">44]</ref>, and error code bugs <ref type="bibr" target="#b19">[19,</ref><ref type="bibr" target="#b40">40]</ref>.  <ref type="formula">4)</ref> shows the total number and percentage of each type of bug across file systems. There are about 1800 total bugs, providing a great opportunity to explore bug patterns at scale. Semantic bugs dominate other types (except for ReiserFS). Most semantic bugs require file-system domain knowledge to understand, detect, and fix; generic bug-finding tools (e.g., Coverity <ref type="bibr" target="#b9">[9]</ref>) may have a hard time finding these bugs. Concurrency bugs account for about 20% on average across file systems (except for ReiserFS), providing a stark contrast to user-level software where fewer than 3% of bugs are concurrencyrelated <ref type="bibr" target="#b26">[26,</ref><ref type="bibr" target="#b42">42,</ref><ref type="bibr" target="#b45">45]</ref>. ReiserFS stands out along these measures because of its transition, in Linux 2.6.33, away from the Big Kernel Lock (BKL), which introduced a large number of concurrency bugs. There are also a fair number of memory-related bugs in all file systems; their percentages are lower than that reported in user-level software <ref type="bibr" target="#b26">[26,</ref><ref type="bibr" target="#b45">45]</ref>. Many research and commercial tools have</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Type Description</head></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Corruption</head><p>On-disk or in-memory data structures are corrupted (e.g., file data or metadata corruption, wrong statistics)</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Crash</head><p>File system becomes unusable (e.g., dereference null pointer, assertion failures, panics)</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Error</head><p>Operation failure or unexpected error code returned (e.g., failed write operation due to ENOSPC error) Deadlock Wait for resources in circular chain</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Hang</head><p>File system makes no progress (e.g., infinite loop, live lock)</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Leak</head><p>System resources are not freed after usage (e.g., forget to free allocated file-system objects)</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Wrong</head><p>Diverts from expectation, excluding the above ones (e.g., undefined behavior, security vulnerability) been developed to detect memory bugs <ref type="bibr" target="#b9">[9,</ref><ref type="bibr" target="#b35">35]</ref>, and some of them are used to detect file-system bugs. Error code bugs account for only 10% of total bugs. Summary: Beyond maintenance, bug fixes are the most common patch type; over half of file-system bugs are semantic bugs, likely requiring domain knowledge to find and fix; file systems have a higher percentage of concurrency bugs compared with user-level software; memory and error code bugs arise but in smaller percentages.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.3">Bug Trends</head><p>File systems mature from the initial development stage to the stable stage over time, by applying bug-fixing, performance and reliability patches. Various bug detection and testing tools are also proposed to improve file-system stability. A natural question arises: do file-system bug patterns change over time, and in what way? Our results ( <ref type="figure" target="#fig_4">Figure 5)</ref> show that within bugs, the relative percentage of semantic, concurrency, memory, and error code bugs varies over time, but does not converge; a great example is XFS, which under constant development goes through various cycles of higher and lower numbers of bugs. Interesting exceptions occasionally arise (e.g., the BKL removal from ReiserFS led to a large increase in concurrency bugs in 2.6.33). JFS does experience a decline in bug patches, perhaps due to its decreasing usage and development <ref type="bibr" target="#b5">[6]</ref>. JFS and ReiserFS both have relatively small developer and user bases compared to the more active file systems XFS, Ext4 and Btrfs.</p><p>Summary: Bug patterns do not change significantly over time, increasing and decreasing cyclically; large deviations arise due to major structural changes.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.4">Bug Consequences</head><p>As shown in <ref type="figure" target="#fig_1">Figure 2(</ref>  system hangs and resource leaks), and other wrong behaviors. <ref type="table" target="#tab_7">Table 4</ref> provides more detail on these categories. <ref type="figure" target="#fig_6">Figure 6</ref>(a) shows the per-system breakdowns. Data corruption is the most predominant consequence (40%), even for well-tested and mature file systems. Crashes account for the second largest percentage (20%); most crashes are caused by explicit calls to BUG() or Assert() as well as null-pointer dereferences. If the patch mentions that the crash also causes corruption, then we classify this bug with multiple consequences. Unexpected errors and deadlocks occur quite frequently (just under 10% each on average), whereas other bug consequences arise less often. For example, exhibiting the wrong behavior without more serious consequences accounts for only 5-10% of consequences in file systems, whereas it is dominant in user applications <ref type="bibr" target="#b26">[26]</ref>.</p><p>Given that file-system bugs are serious bugs, we were curious: do certain bug types (e.g., semantic, concurrency, memory, or error code) exhibit different levels of severity? <ref type="figure" target="#fig_6">Figure 6</ref>(b) shows the relationship between consequences and bug patterns. Semantic bugs lead to a large percentage of corruptions, crashes, errors, hangs, and wrong behaviors. Concurrency bugs are responsible for nearly all deadlocks (almost by definition) and a fair percentage of corruptions and hangs. Memory bugs lead to many memory leaks (as expected) and a fair amount of crashes. Finally, error code bugs lead to a relatively small percentage of corruptions, crashes, and (unsurprisingly) errors. Summary: File system bugs cause severe consequences; corruptions and crashes are most common; wrong behavior is uncommon; semantic bugs can lead to significant amounts of corruptions, crashes, errors, and hangs; all bug types have severe consequences.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.5">Bug Pattern Examples and Analysis</head><p>To gain further insight into the different classes of bugs, we now describe each class in more detail. We present examples of each and further break down each major class (e.g., memory bugs) into smaller sub-classes (e.g., leaks, null-pointer dereferences, dangling pointers, uninitialized reads, double frees, and buffer overflows).</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.5.1">Semantic Bugs</head><p>Semantic bugs are dominant in file systems, as shown in <ref type="figure" target="#fig_1">Figure 2</ref>(b). Understanding these bugs often requires file-system domain knowledge. Semantic bugs usually are difficult to categorize in an informative and general way. However, we are the first to identify several common types of file-system specific semantic bugs based on extensive analysis and careful generalization of many semantic bugs across file systems. These common types and typical patterns provide useful guidelines for analysis and detection of file-system semantic bugs. We partition the semantic bugs into five categories as described in <ref type="table" target="#tab_6">Table 3</ref> File systems maintain a large amount of in-memory and on-disk state. Generally, operations transform the file system from one consistent state to another; a mistaken state update or access may lead to serious consequences. As shown in <ref type="figure" target="#fig_8">Figure 7</ref>(a), these state bugs contribute to roughly 40% of semantic bugs.</p><p>An example of a state bug is shown in S1 of <ref type="table" target="#tab_10">Table 5</ref> (on page 9), which misses an inode-field update. Specifically, the buggy version of ext3 rename() does not update the mtime and ctime of the directory into which the file is moved, leaving metadata in an incorrect state.</p><p>There are also numerous logic bugs, which arise via the use of wrong algorithms, bad assumptions, and incorrect implementations. An example of a wrong algorithm is shown in S2 of <ref type="table" target="#tab_10">Table 5</ref>: find group other() tries to find a block group for inode allocation, but does not check all candidate groups; the result is a possible ENOSPC error even when the file system has free inodes.</p><p>File system behavior is also affected by various configuration parameters, such as mount options and special hardware support. Unfortunately, file systems often forget or misuse such configuration information (about 10% to 15% of semantic bugs are of this flavor). A semantic configuration bug is shown in S3 of <ref type="table" target="#tab_10">Table 5</ref>; when Ext4 loads the journal from disk, it forgets to check if the device is read-only before updating the on-disk superblock.</p><p>Correct  that only a small percentage of semantic bugs (3-9%) are I/O timing bugs; however, these bugs can lead to potential data loss or corruption.</p><p>A fair amount of generic bugs also exist in all file systems, such as using the wrong variable type or simple typos. These bugs are general coding mistakes (such as comparing unsigned variable with zero <ref type="bibr" target="#b48">[48]</ref>), and may be fixed without much file-system knowledge.</p><p>Summary: Incorrect state update and logic mistakes dominate semantic bug patterns; configuration errors are also not uncommon; incorrect I/O orderings are rare (but can have serious consequences); generic bugs require the least file-system knowledge to understand.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.5.2">Concurrency Bugs</head><p>Concurrency bugs have attracted a fair amount of attention in the research community as of late <ref type="bibr" target="#b16">[16,</ref><ref type="bibr" target="#b22">22,</ref><ref type="bibr" target="#b28">28,</ref><ref type="bibr" target="#b49">49,</ref><ref type="bibr" target="#b50">50]</ref>. To better understand file-system concurrency bugs, we classify them into six types as shown in <ref type="table" target="#tab_6">Table 3</ref> (on page 5): atomicity violations, deadlocks, order violations, missed unlocks, double unlocks, and wrong locks. An example of an atomicity violation bug in Ext4 is shown in C1 of <ref type="table" target="#tab_10">Table 5</ref>. For this bug, when two CPUs simultaneously allocate blocks, there is no protection for the i cached extent structure; this atomicity violation could thus cause the wrong location on disk to be read or written. A simple spin-lock resolves the bug.</p><p>There are a large number of deadlocks in file systems (about 40%). Two typical causes are the use of the wrong kernel memory allocation flag and calling a blocking function when holding a spin lock. These patterns are not common in application-level deadlocks, and thus are useful to both developers (who should be wary of such patterns) and tool builders (who should detect them).</p><p>Many deadlocks are found in ReiserFS, once again due to the BKL. The BKL could be acquired recursively; replacing it introduced a multitude of locking violations, many of which led to deadlock.</p><p>A typical memory-related deadlock is shown in C2 of <ref type="table" target="#tab_10">Table 5</ref>. Btrfs uses extent readpages() to read free space information; however, it should not use GFP KERNEL flag to allocate memory, since the VM memory allocator kswapd will recursively call into filesystem code to free memory. The fix changes the flag to GFP NOFS to prevent VM re-entry into file-system code.</p><p>The remaining four categories account for a small percentage. Missing unlocks happen mostly in exit or failure paths (e.g., putting resource releases at the end of functions with goto statements). C3 of <ref type="table" target="#tab_10">Table 5</ref> shows a missing-unlock bug. ext3 group add() locks super block (line 1) but forgets to unlock on an error (line 4).</p><p>Summary: Concurrency bugs are much more common in file systems than in user-level software. Atomicity and deadlock bugs represent a significant majority of concurrency bugs; many deadlock bugs are caused by wrong kernel memory-allocation flags; most missing unlocks happen on exit or failure paths.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.5.3">Memory Bugs</head><p>Memory-related bugs are common in many source bases, and not surprisingly have been the focus of many bug detection tools <ref type="bibr" target="#b9">[9,</ref><ref type="bibr" target="#b35">35]</ref>. We classify memory bugs into six categories, as shown in <ref type="table" target="#tab_6">Table 3</ref>: resource leaks, null pointer dereferences, dangling pointers, uninitialized reads, double frees, and buffer overflows.</p><p>Resource leaks are the most dominant, over 40% in aggregate; in contrast, studies of user-level programs show notably lower percentages <ref type="bibr" target="#b26">[26,</ref><ref type="bibr" target="#b42">42,</ref><ref type="bibr" target="#b45">45]</ref>. We find that roughly 70% of resource leaks happen on exit or failure paths; we investigate this further later ( ยง4.6).</p><p>An example of resource leaks (M1 of  As we see in <ref type="figure" target="#fig_8">Figure 7</ref>(c), null-pointer dereferences are also common in both mature and young file systems (the remaining memory bugs account for small percentages). An example is shown in M2 of <ref type="table" target="#tab_10">Table 5</ref>; a return statement is missing, leading to a null-pointer dereference.</p><p>Summary: Resource leaks are the largest category of memory bug, significantly higher than that in user-level applications; null-pointer dereferences are also common; failure paths contribute strongly to these bugs; many of these bugs have simple fixes.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.5.4">Error Code Bugs</head><p>File systems need to handle a wide range of errors, including memory-allocation failures, disk-block allocation failures, I/O failures <ref type="bibr" target="#b6">[7,</ref><ref type="bibr" target="#b7">8]</ref>, and silent data corruption <ref type="bibr" target="#b37">[37]</ref>. Handling such faults, and passing error codes through a complex code base, has proven challenging <ref type="bibr" target="#b19">[19,</ref><ref type="bibr" target="#b40">40]</ref>. Here, we further break down error-code errors. We partition the error code bugs into missing error codes and wrong error codes as described in <ref type="table" target="#tab_6">Table 3</ref>. <ref type="figure" target="#fig_8">Fig- ure 7(d)</ref> shows the breakdown of error code bugs. Missing errors are generally twice as prevalent as wrong errors (except for JFS, which has few of these bugs overall).</p><p>A missing error code example is shown in E1 of Table 5. The routine posix acl from disk() could return an error code (line 2). However, without error checking, acl is accessed and thus the kernel crashes (line 3).</p><p>An example of a wrong error code is shown in E2 of <ref type="table" target="#tab_10">Table 5</ref>. diAlloc()'s return value should be -EIO. However, in line 3, the original code returns the close (but wrong) error code EIO; callers thus fail to detect the error.</p><p>Summary: Error handling bugs occur in two flavors, missing error handling or incorrect error handling; the bugs are relatively simple in nature.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.6">The Failure Path</head><p>Many bugs we found arose not in common-case code paths but rather in more unusual fault-handling cases <ref type="bibr" target="#b19">[19,</ref><ref type="bibr" target="#b52">52]</ref>. This type of error handling (i.e., reacting to disk or memory failures) is critical to robustness, since bugs on failure paths can lead to serious consequences. We now quantify bug occurrences on failure paths; <ref type="table" target="#tab_13">Tables 6 (a)</ref> and (b) present our accumulated results. As we can see from the first table, roughly a third of bugs are introduced on failure paths across all file systems. Even mature file systems such as Ext3 and XFS make a significant number of mistakes on these rarer code paths.</p><p>When broken down by bug type in the second table, we see that roughly a quarter of semantic bugs occur on failure paths, usually in the previously-defined state and logic  categories. Once a failure happens (e.g., an I/O fails), the file system needs to free allocated disk resources and update related metadata properly; however, it is easy to forget these updates, or perform them incorrectly, leading to many state bugs. In addition, wrong algorithms (logic bugs) are common; for example, when block allocation fails, most file systems return ENOSPC immediately instead of retrying after committing buffered transactions.</p><p>A quarter of concurrency bugs arise on failure paths. Sometimes, file systems forget to unlock locks, resulting in deadlock. Moreover, when file systems output errors to users, they sometimes forget to unlock before calling blocking error-output functions (deadlock). These types of mistakes rarely arise in user-level code <ref type="bibr" target="#b28">[28]</ref>.</p><p>For memory bugs, most resource-leak bugs stem from forgetting to release allocated resources when I/O or other failures happen. There are also numerous null-pointer dereference bugs which incorrectly assume certain pointers are still valid after a failure. Finally (and obviously), all error code bugs occur on failure paths (by definition).</p><p>It is difficult to fully test failure-handling paths to find all types of bugs. Most previous work has focused on memory resource leaks <ref type="bibr" target="#b41">[41,</ref><ref type="bibr" target="#b52">52]</ref>, missing unlock <ref type="bibr" target="#b41">[41,</ref><ref type="bibr" target="#b52">52]</ref> and error codes <ref type="bibr" target="#b19">[19,</ref><ref type="bibr" target="#b40">40]</ref>; however, existing work can only detect a small portion of failure-handling errors, especially omitting a large amount of semantic bugs on failure paths. Our results provide strong motivation for improving the quality of failure-handling code in file systems.</p><p>Summary: A high fraction of bugs occur due to improper behavior in the presence of failures or errors across all file systems; memory-related errors are particularly common along these rarely-executed code paths; a quarter of semantic bugs are found on failure paths.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5">Performance and Reliability</head><p>A small but important set of patches improve performance and reliability, which are quantitatively different than bug patches ( <ref type="figure" target="#fig_2">Figure 3</ref>). Performance and reliability patches account for 8% and 7% of patches respectively.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5.1">Performance Patches</head><p>Performance is critical for all file systems. Performance patches are proposed to improve existing designs or implementations. We partition these patches into six categories as shown in <ref type="table" target="#tab_14">Table 7</ref>, including synchronization (sync), access optimization (access), scheduling (sched),</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Type Description</head><p>Inefficient usage of synchronization methods Synchronization (e.g., removing unnecessary locks, using smaller locks, using read/write locks) Access Apply smarter access strategies Optimization (e.g., caching metadata and statistics, avoiding unnecessary I/O and computing)</p><p>Schedule Improve I/O operations scheduling (e.g., batching writes, opportunistic readahead) Scale on-disk and in-memory data structures Scalability (e.g., using trees or hash tables, per block group structures, reducing memory usage of inodes)</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Locality</head><p>Overcome sub-optimal data block allocations (e.g., reducing file fragmentation, clustered I/Os)</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Other</head><p>Other performance improvement techniques (e.g., reducing function stack usage)  Synchronization-based performance improvements account for over a quarter of all performance patches across file systems. Typical solutions used include removing a pair of unnecessary locks, using finer-grained locking, and replacing write locks with read/write locks. A sync patch is shown in P1 of <ref type="table" target="#tab_10">Table 5</ref>; ext4 fiemap() uses write instead of read semaphores, limiting concurrency.</p><p>Access patches use smarter strategies to optimize performance, including caching and work avoidance. For example, Ext3 caches metadata stats in memory, avoiding I/O. <ref type="figure" target="#fig_11">Figure 8(a)</ref> shows access patches are popular. An example Btrfs access patch is shown in P2 of <ref type="table" target="#tab_10">Table 5</ref>; before searching for free blocks, it first checks whether there is enough free space, avoiding unnecessary work.</p><p>Sched patches improve I/O scheduling for better performance, such as batching of writes, opportunistic readahead, and avoiding unnecessary synchrony in I/O. As can be seen, sched has a similar percentage compared to sync and access. Scale patches utilize scalable on-disk and inmemory data structures, such as hash tables, trees, and per block-group structures. XFS has a large number of scale patches, as scalability was always its priority.</p><p>Summary: Performance patches exist in all file systems; sync, access, and sched each account for a quarter of the total; many of the techniques used are fairly standard (e.g., removing locks); while studying new synchronization primitives, we should not forget about performance.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5.2">Reliability Patches</head><p>Finally we study our last class of patch, those that aim to improve file-system reliability. Different from bug-fix patches, reliability patches are not utilized for correctness. Rather, for example, such a patch may check whether the super block is corrupted before mounting the file system; further, a reliability patch might enhance error propagation <ref type="bibr" target="#b19">[19]</ref> or add more debugging information. <ref type="table" target="#tab_15">Table 8</ref> presents the classification of these reliability patches, including adding assertions and other functional robustness</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Type Description</head><p>Enhance file-system robustness Robust (e.g., boundary limits and access permission checking, additional internal assertions) Corruption Improve file systems' ability to handle various Defense possible corruptions Error Improve original error handling (e.g., gracefully Enhancement handling failures, more detailed error codes)</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Annotation</head><p>Add endianness, user/kernel space pointer and lock annotations for early bug detection Debug Add more internal debugging or tracing support (robust), corruption defense (corruption), error enhancement (error), annotation (annotation), and debugging (debug). <ref type="figure" target="#fig_11">Figure 8</ref>(b) displays the distributions. Robust patches check permissions, enforce file-system limits, and handle extreme cases in a more friendly manner. Btrfs has the largest percentage of these patches, likely due to its early stage of development.</p><p>Corruption defense patches validate the integrity of metadata when reading from disk. For example, a patch to the JBD (used by Ext3) checks that the journal length is valid before performing recovery; similarly, a patch to Ext4 checks that a directory entry is valid before traversing that directory. In general, many corruption patches are found at the I/O boundary, when reading from disk.</p><p>Error enhancement patches improve error handling in a variety of ways, such as more detail in error codes, removing unnecessary error messages, and improving availability, for example by remounting read-only instead of crashing. This last class is common in all file systems, which each slowly replaced unnecessary BUG() and assertion statements with more graceful error handling.</p><p>Annotation patches label variables with additional type information (e.g., endianness) and locking rules to enable better static checking. ReiserFS uses lock annotations to help prevent deadlock, whereas XFS uses endianness annotations for numerous variable types. Debug patches simply add more diagnostic information at failure-handling points within the file system.</p><p>Interestingly, reliability patches appear more ad hoc than bug patches. For bug patches, most file systems have similar pattern breakdowns. In contrast, file systems make different choices for reliability, and do so in a generally non-uniform manner. For example, Btrfs focuses more on Robust patches, while Ext3 and Ext4 prefer to add more Corruption defense patches.</p><p>Summary: We find that reliability patches are added to file systems over time as part of hardening; most add simple checks, defend against corruption upon reading from disk, or improve availability by returning errors instead of crashing; annotations help find problems at compile time; debug patches add diagnostic information; reliability patch usage, across all file systems, seems ad hoc.  </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="6">Case Study Using PatchDB</head><p>The patch dataset constructed from our analysis of 5079 patches contains fine-grained information, including characterization of bug patterns (e.g., which semantic bugs forget to synchronize data), detailed bug consequences (e.g., crashes caused by assertion failures or null-pointer dereferences), incorrect bug fixes (e.g., patches that are reverted after being accepted), performance techniques (e.g., how many performance patches remove unnecessary locks), and reliability enhancements (e.g., the location of metadata integrity checks). These details enable further study to improve file-system designs, propose new system language constructs, build custom bug-detection tools, and perform realistic fault injection.</p><p>In this section, we show the utility of PatchDB by examining which patches are common across all file systems. Due to space concerns, we only highlight a few interesting cases. A summary is found in <ref type="table" target="#tab_17">Table 9</ref>.</p><p>We first discuss specific common bugs. Within semantic bugs is forget sync, in which a file system forgets to force data or metadata to disk. Most forget sync bugs relate to fsync. Even for stable file systems, there are a noticeable number of these bugs, leading to data loss or corruption under power failures. Another common mistake is forget config, in which mount options, feature sets, or hardware support are overlooked. File systems also return the ENOSPC error code despite the presence of free blocks (early enospc); Btrfs has the largest number of these bugs, and even refers to the Ext3 fix strategy in its patches. Even though semantic bugs are dominant in file systems, few tools can detect semantic bugs due to the difficulty of specifying correct behavior <ref type="bibr" target="#b15">[15,</ref><ref type="bibr" target="#b25">25,</ref><ref type="bibr" target="#b27">27]</ref>. Fortunately, we find that many semantic bugs appear across file systems, which can be leveraged to improve bug detection.</p><p>For concurrency bugs, forgetting to lock an inode when updating it is common; perhaps a form of monitors <ref type="bibr" target="#b20">[20]</ref>   would help. Calling a blocking function when holding a spin lock (lock sleep) occurs frequently (also in drivers <ref type="bibr" target="#b14">[14,</ref><ref type="bibr" target="#b36">36]</ref>). As we saw earlier ( ยง4.5.2), using the wrong kernel memory allocation flag is a major source of deadlock (particularly XFS). All file systems miss unlocks frequently, in contrast to user applications <ref type="bibr" target="#b28">[28]</ref>. For memory bugs, leaks happen on failure or exit paths frequently. For error code bugs, there are a large number of missed I/O error bugs. For example, Ext3, JFS, ReiserFS and XFS all ignore write I/O errors on fsync before Linux 2.6.9 <ref type="bibr" target="#b37">[37]</ref>; as a result, data could be lost even when fsync returned successfully. Memory allocation errors are also often ignored (especially in Btrfs). Three file systems mistakenly dereference error codes.</p><p>For performance patches, removing locks (without sacrificing correctness) is common. File systems also tend to write redundant data (e.g., fdatasync unnecessarily flushes metadata). Another common performance improvement case is check before work, in which missing specific condition checking costs unnecessary I/O or CPU overhead.</p><p>Finally, for reliability patches, metadata validation (i.e., inode, super block, directory and journal) is popular. Most of these patches occur in similar places (e.g., when mounting the file system, recovering from the journal, or reading an inode). Also common is replacing BUG() and Assert() calls with more graceful error handling.</p><p>Summary: Despite their diversity, file-system patches share many similarities across implementations; some examples occur quite frequently; PatchDB affords new opportunities to study such phenomena in great detail.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="7">Related Work</head><p>Operating-System Bugs: Faults in Linux have been studied <ref type="bibr" target="#b14">[14,</ref><ref type="bibr" target="#b36">36]</ref>. Static analysis tools are used to find potential bugs in Linux 1.0 to 2.4.1 <ref type="bibr" target="#b14">[14]</ref> and Linux 2.6.0 to 2.6.33 <ref type="bibr" target="#b36">[36]</ref>. Most detected faults are generic memory and concurrency bugs. Both studies find that device drivers contain the most faults, while <ref type="bibr">Palix et al. [36]</ref> also show that file-system errors are rising. <ref type="bibr">Yin et al. [53]</ref> analyze incorrect bug-fixes in several operating systems. Our work embellishes these studies, focusing on all file-system bugs found and fixed over eight years and providing more detail on which bugs plague file systems. User-Level Bugs: Various aspects of modern user-level open source software bugs have also been studied, including patterns, impacts, reproducibility, and fixes <ref type="bibr" target="#b16">[16,</ref><ref type="bibr" target="#b26">26,</ref><ref type="bibr" target="#b28">28,</ref><ref type="bibr" target="#b42">42,</ref><ref type="bibr" target="#b50">50]</ref>. As our findings show, file-systems bugs display different characteristics compared with user-level software bugs, both in their patterns and consequences (e.g., file-system bugs have more serious consequences than user-level bugs; concurrency bugs are much more common). One other major difference is scale; the number of bugs (about 1800) we study is larger than previous efforts <ref type="bibr" target="#b16">[16,</ref><ref type="bibr" target="#b26">26,</ref><ref type="bibr" target="#b28">28,</ref><ref type="bibr" target="#b42">42,</ref><ref type="bibr" target="#b50">50]</ref> File-System Bugs: Several research projects have been proposed to detect and analyze file-system bugs. For example, Yang et al. <ref type="bibr" target="#b51">[51,</ref><ref type="bibr" target="#b52">52]</ref> use model checking to detect file-system errors; Gunawi et al. <ref type="bibr" target="#b19">[19]</ref> use static analysis techniques to determine how error codes are propagated in file systems; Rubio-Gonzalez et al. <ref type="bibr" target="#b40">[40]</ref> utilize static analysis to detect similar problems; Prabhakaran et al. <ref type="bibr" target="#b37">[37]</ref> study how file systems handle injected failures and corruptions. Our work complements this work with insights on bug patterns and root causes. Further, our public bug dataset provides useful hints and patterns to aid in the development of new file-system bug-detection tools.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="8">Conclusions</head><p>We performed a comprehensive study of 5079 patches across six Linux file systems; our analysis includes one of the largest studies of bugs to date (nearly 1800 bugs). Our observations, summarized in the introduction and throughout, should be of utility to file-system developers, systems-language designers, and tool makers; the careful study of these results should result in a new generation of more robust, reliable, and performant file systems.</p></div><figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_0"><head>Figure 1 :</head><label>1</label><figDesc>Figure 1: An Example Patch. An Ext3 patch.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_1"><head>Figure 2 :</head><label>2</label><figDesc>Figure 2: Patch Type and Bug Pattern. This figure shows the distribution of patch types and bug patterns. The total number of patches is on top of each bar.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_2"><head>Figure 3 :</head><label>3</label><figDesc>Figure 3: Patch Size. This figure shows the size distribution for different patch types, in terms of lines of modifications. Name Description</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_3"><head>Figure 4 :</head><label>4</label><figDesc>Figure 4: File System Code and Bug Correlation. This figure shows the correlation between code and bugs. The x-axis shows the average percent of code of each component (over all versions); the y-axis shows the percent of bugs of each component (over all versions).</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_4"><head>Figure 5 :</head><label>5</label><figDesc>Figure 5: Bug Pattern Evolution. This figure shows the bug pattern evolution for each file system over all versions.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_5"><head>Figure 2 (</head><label>2</label><figDesc>Figure 2(b) (page 4) shows the total number and percentage of each type of bug across file systems. There are about 1800 total bugs, providing a great opportunity to explore bug patterns at scale. Semantic bugs dominate other types (except for ReiserFS). Most semantic bugs require file-system domain knowledge to understand, detect, and fix; generic bug-finding tools (e.g., Coverity [9]) may have a hard time finding these bugs. Concurrency bugs account for about 20% on average across file systems (except for ReiserFS), providing a stark contrast to user-level software where fewer than 3% of bugs are concurrencyrelated [26, 42, 45]. ReiserFS stands out along these measures because of its transition, in Linux 2.6.33, away from the Big Kernel Lock (BKL), which introduced a large number of concurrency bugs. There are also a fair number of memory-related bugs in all file systems; their percentages are lower than that reported in user-level software [26, 45]. Many research and commercial tools have</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_6"><head>Figure 6 :</head><label>6</label><figDesc>Figure 6: Bug Consequences. This figure displays the breakdown of bug consequences for file systems and bug patterns. The total number of consequences is shown on top of each bar. A single bug may cause multiple consequences; thus, the number of consequences instances is slightly higher than that of bugs in Figure 2(b).</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_7"><head></head><label></label><figDesc>, including state, logic, config, I/O timing and generic. Fig- ure 7(a) shows the percentage breakdown and total num- ber of semantic bugs; each is explained in detail below.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_8"><head>Figure 7 :</head><label>7</label><figDesc>Figure 7: Detailed Bug Patterns. The detailed classification for each bug pattern; total number of bugs is shown on top of each bar.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_9"><head>Figure 7 (</head><label>7</label><figDesc>b) shows the percentage and total number of each category of concurrency bugs. Atomicity violation bugs are usually caused by a lack of proper synchroniza- tion methods to ensure exclusive data access, often lead- ing to data corruption.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_10"><head></head><label></label><figDesc>scalability (scale), locality (locality), and other. Fig- ure 8(a) shows the breakdown.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_11"><head>Figure 8 :</head><label>8</label><figDesc>Figure 8: Performance and Reliability Patches. This figure shows the performance and reliability patterns. The total number of patches is shown on top of each bar.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_0" validated="false"><head>โข Bugs: What types of bugs appear in file systems?</head><label>โข</label><figDesc></figDesc><table>Do some components of file systems contain more 
bugs than others? What types of consequences do 
different bugs have? 
โข Performance and Reliability: What techniques are 
used by file systems to improve performance? What 
common reliability enhancements are proposed in 
file systems? [PATCH] fix possible NULL pointer in fs/ext3/super.c. 

In fs/ext3/super.c::ext3 get journal() at line 1675 
'journal' can be NULL, but it is not handled right 
(detect by Coverity's checker). 

---
/fs/ext3/super.c 
+++ 
/fs/ext3/super.c 
@@ -1675,6 +1675,7 @@ journal_t *ext3_get_journal() 

1 
if (!journal){ 
2 
printk(KERN_ERR "EXT3: Could not load ... "); 
3 
iput(journal_inode); 
4 + 
return NULL; 
5 
} 
6 
journal-&gt;j_private = sb; 

</table></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_3" validated="false"><head>balloc Data block allocation and deallocation dir Directory management extent Contiguous physical blocks mapping file File read and write operations inode Inode-related metadata management trans Journaling or other transactional support super Superblock-related metadata management tree Generic tree structure procedures other Other</head><label></label><figDesc></figDesc><table>supporting components (e.g., xattr, ioctl, resize) 

</table></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_4" validated="false"><head>Table 2 :</head><label>2</label><figDesc></figDesc><table>Logical Components. This table shows the classifi-

cation and definition of file-system logical components. 

</table></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_6" validated="false"><head>Table 3 :</head><label>3</label><figDesc>Bug Pattern Classification. This table shows the classification and definition of file-system bugs.</figDesc><table></table></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_7" validated="false"><head>Table 4 :</head><label>4</label><figDesc></figDesc><table>Bug Consequence Classification. This table shows 

the definitions of various bug consequences. 

</table></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_9" validated="false"><head></head><label></label><figDesc>I/O request ordering is critical for crash con- sistency in file systems. The I/O timing category contains bugs involving incorrect I/O ordering. For example, in ordered journal mode, a bug may flush metadata to disk before the related data blocks are persisted. We found</figDesc><table>0% 

20% 

40% 

60% 

80% 

100% 

XFS 
Ext4 
Btrfs 
Ext3 
Reiser 
JFS 
All 

316 
270 
196 
138 
66 
36 
1022 

State 

I/O Timing 

Logic 

Generic 

Config 

(a) Semantic Bugs 

0% 

20% 

40% 

60% 

80% 

100% 

XFS 
Ext4 
Btrfs 
Ext3 
Reiser 
JFS 
All 

95 
80 
65 
38 
67 
21 
366 

Atomicity 

Miss_UL 

Deadlock 

Double_UL 

Order 

Wrong_L 

(b) Concurrency Bug 

0% 

20% 

40% 

60% 

80% 

100% 

XFS 
Ext4 
Btrfs 
Ext3 
Reiser 
JFS 
All 

56 
62 
47 
26 
13 
15 
219 

Leak 

Uninit_R 

Null 

Double_F 

Dangling 

Overflow 

(c) Memory Bugs 

0% 

20% 

40% 

60% 

80% 

100% 

XFS 
Ext4 
Btrfs 
Ext3 
Reiser 
JFS 
All 

44 
38 
50 
27 
12 
8 
179 

Miss Error 
Wrong Error 

(d) Error Code Bugs 

</table></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_10" validated="false"><head>Table 5 )</head><label>5</label><figDesc>is found in btrfs new inode() which allocates an inode but forgets to free it upon failure.</figDesc><table>ext3/namei.c, 2.6.26 
Semantic (S1) 
ext3/ialloc.c, 2.6.4 
Semantic (S2) 
1 
ext3 rename(...){ 
1 
find group other(...){ 
2 + 
new dir-&gt;i ctime = CURRENT TIME SEC; 
2 -
group = parent group + 1; 
3 + 
new dir-&gt;i mtime = CURRENT TIME SEC; 
3 -
for (i = 2; i &lt; ngroups; i++) { 
4 + 
ext3 mark inode dirty(handle, new dir); 
4 + 
group = parent group; 
5 + 
for (i = 0; i &lt; ngroups; i++) { 
ext4/super.c, 2.6.37 
Semantic (S3) 
ext4/extents.c, 2.6.30 
Concurrency (C1) 
1 
ext4 load journal(...){ 
1 
ext4 ext put in cache(...){ 
2 -
if (journal devnum &amp;&amp; ...) 
2 + 
spin lock(i block reservation lock); 
3 + 
if (!read only &amp;&amp; journal devnum ...) 
3 
cex = &amp;EXT4 I(inode)-&gt;i cached extent; 
4 
es-&gt;s journal dev = devnum; 
4...6 cex-&gt;ec FOO = FOO; // elided for brevity 
7 + 
spin unlock(i block reservation lock); 
btrfs/extent io.c, 2.6.39 
Concurrency (C2) 
ext3/resize.c, 2.6.17 
Concurrency (C3) 
1 
extent readpages(...){ 
1 
lock super(sb); 
2 
if (!add to page cache lru(page, mapping, 
2 
if (input-&gt;group != sbi-&gt;s groups count){ 
3 -
page-&gt;index, GFP KERNEL)) { 
3 
... ... 
4 + 
page-&gt;index, GFP NOFS)) { 
4 + 
unlock super(sb); 
5 
extent read full page(...); 
5 
err = -EBUSY; 
6 
goto exit journal; 
btrfs/inode.c, 2.6.30 
Memory (M1) 
ext3/super.c, 2.6.7 
Memory (M2) 
1 
btrfs new inode(...){ 
1 
ext3 get journal(...){ 
2 
inode = new inode(...); 
2 
if (!journal) { 
3 
ret = btrfs set inode index(...); 
3 
... ... 
4 -
if (ret) 
4 + 
return NULL; 
5 -
return ERR PTR(ret); 
5 
} 
6 + 
if (ret) { 
6 
journal-&gt;j private = sb; 
7 + 
iput(inode); return ERR PTR(ret); 
8 + 
} 
reiserfs/xattr acl.c, 2.6.16 
Error Code (E1) 
jfs/jfs imap.c, 2.6.27 
Error Code (E2) 
1 
reiserfs get acl(...){ 
1 
diAlloc(...){ 
2 
acl = posix acl from disk(...); 
2 
jfs error(...); 
3 -
*p acl = posix acl dup(acl); 
3 -
return EIO; 
4 + 
if (!IS ERR(acl)) 
4 + 
return -EIO; 
5 + 
*p acl = posix acl dup(acl); 
ext4/extents.c, 2.6.31 
Performance (P1) 
btrfs/free-space-cache.c, 2.6.39 
Performance (P2) 
1 
ext4 fiemap(...){ 
1 
btrfs find space cluster(...){ 
2 -
down write(&amp;EXT4 I(inode)-&gt;i data sem); 
2 + 
if (bg-&gt;free space &lt; min bytes){ 
3 + 
down read(&amp;EXT4 I(inode)-&gt;i data sem); 
3 + 
spin unlock(&amp;bg-&gt;tree lock); 
4 
error = ext4 ext walk space(...); 
4 + 
return -ENOSPC; 
5 -
up write(&amp;EXT4 I(inode)-&gt;i data sem); 
5 + 
} 
6 + 
up read(&amp;EXT4 I(inode)-&gt;i data sem); 
6 
/* start to search for blocks */ 

</table></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_11" validated="false"><head>Table 5 : Code Examples. This table shows the code examples of bug patterns and performance patches.</head><label>5</label><figDesc></figDesc><table></table></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_13" validated="false"><head>Table 6 :</head><label>6</label><figDesc></figDesc><table>Failure Related Bugs. This table shows the number 

and percentage of the bugs related to failures in file systems. 

</table></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_14" validated="false"><head>Table 7 :</head><label>7</label><figDesc></figDesc><table>Performance Patch Type. This table shows the 

classification and definition of performance patches. 

</table></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_15" validated="false"><head>Table 8 :</head><label>8</label><figDesc></figDesc><table>Reliability Patch Type. This table shows the classi-

fication and definition of reliability patches. 

</table></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_17" validated="false"><head>Table 9 :</head><label>9</label><figDesc></figDesc><table>Common File System Patches. This table shows 

the classification and count of common patches across all file systems. 

</table></figure>
		</body>
		<back>

			<div type="acknowledgement">
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Acknowledgments</head><p>We thank Ric Wheeler (our shepherd) and the anonymous reviewers for their excellent feedback and suggestions. We also thank the members of the ADSL research group for their insightful comments. This material is based upon work supported by the National Science Foundation under the following grants: CNS-1218405, CCF-0937959, CSR-1017518, CCF-1016924, as well as generous support from NetApp, EMC, and Google. Any opinions, findings, and conclusions or recommendations expressed in this material are those of the authors and do not necessarily reflect the views of NSF or other institutions.</p></div>
			</div>

			<div type="references">

				<listBibl>

<biblStruct xml:id="b0">
	<monogr>
		<title level="m" type="main">Open Source Integrity Report</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Coverity</forename><surname>Scan</surname></persName>
		</author>
		<ptr target="http://www.coverity.com/library/pdf/coverity-scan-2011-open-source-integrity-report.pdf" />
		<imprint>
			<date type="published" when="2011" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b1">
	<monogr>
				<ptr target="http://androidspin.com/2011/12/06/first-galaxy-nexus-rom-available-features-ext4-support/" />
		<title level="m">First Galaxy Nexus Rom Available, Features Ext4 Support</title>
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b2">
	<monogr>
		<title/>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Kernel Bug Tracker</surname></persName>
		</author>
		<ptr target="http://bugzilla.kernel.org/" />
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b3">
	<monogr>
		<title level="m" type="main">Linux Filesystem Development List</title>
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b4">
	<analytic>
		<title/>
		<ptr target="http://lkml.org/" />
	</analytic>
	<monogr>
		<title level="j">Linux Kernel Mailing List</title>
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b5">
	<monogr>
				<ptr target="http://en.wikipedia.org/wiki/JFS(filesystem" />
		<title level="m">IBM Journaled File System</title>
		<imprint>
			<date type="published" when="2012-09" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b6">
	<analytic>
		<title level="a" type="main">An Analysis of Latent Sector Errors in Disk Drives</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">N</forename><surname>Lakshmi</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Garth</forename><forename type="middle">R</forename><surname>Bairavasundaram</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Shankar</forename><surname>Goodson</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Jiri</forename><surname>Pasupathy</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Schindler</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 2007 ACM SIGMETRICS Conference on Measurement and Modeling of Computer Systems (SIGMETRICS &apos;07)</title>
		<meeting>the 2007 ACM SIGMETRICS Conference on Measurement and Modeling of Computer Systems (SIGMETRICS &apos;07)<address><addrLine>San Diego</addrLine></address></meeting>
		<imprint>
			<date type="published" when="2007-06" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b7">
	<monogr>
		<title/>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">N</forename><surname>Lakshmi</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Garth</forename><forename type="middle">R</forename><surname>Bairavasundaram</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Bianca</forename><surname>Goodson</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Andrea</forename><forename type="middle">C</forename><surname>Schroeder</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Arpaci-Dusseau</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">H</forename><surname>Remzi</surname></persName>
		</author>
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b8">
	<analytic>
		<title level="a" type="main">An Analysis of Data Corruption in the Storage Stack</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Arpaci-Dusseau</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 6th USENIX Symposium on File and Storage Technologies (FAST &apos;08)</title>
		<meeting>the 6th USENIX Symposium on File and Storage Technologies (FAST &apos;08)<address><addrLine>San Jose, California</addrLine></address></meeting>
		<imprint>
			<date type="published" when="2008-02" />
			<biblScope unit="page" from="223" to="238" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b9">
	<analytic>
		<title level="a" type="main">A Few Billion Lines of Code Later: Using Static Analysis to Find Bugs in the Real World</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Al</forename><surname>Bessey</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Ken</forename><surname>Block</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Ben</forename><surname>Chelf</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Andy</forename><surname>Chou</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Bryan</forename><surname>Fulton</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Seth</forename><surname>Hallem</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Charles</forename><surname>Henri-Gros</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Asya</forename><surname>Kamsky</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Scott</forename><surname>Mcpeak</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Dawson</forename><surname>Engler</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Communications of the ACM</title>
		<imprint>
			<date type="published" when="2010-02" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b10">
	<monogr>
		<title/>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Steve</forename><surname>Best</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Overview</surname></persName>
		</author>
		<ptr target="http://jfs.sourceforge.net/project/pub/jfs.pdf" />
		<imprint>
			<date type="published" when="2000" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b11">
	<analytic>
		<title level="a" type="main">Write Endurance in Flash Drives: Measurements and Analysis</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Simona</forename><surname>Boboila</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Peter</forename><surname>Desnoyers</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 8th USENIX Symposium on File and Storage Technologies (FAST &apos;10)</title>
		<meeting>the 8th USENIX Symposium on File and Storage Technologies (FAST &apos;10)<address><addrLine>San Jose, California</addrLine></address></meeting>
		<imprint>
			<date type="published" when="2010-02" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b12">
	<monogr>
		<title level="m" type="main">ZFS: The Last Word in File Systems</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Jeff</forename><surname>Bonwick</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Bill</forename><surname>Moore</surname></persName>
		</author>
		<ptr target="http://opensolaris.org/os/community/zfs/docs/zfs_last.pdf" />
		<imprint>
			<date type="published" when="2007" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b13">
	<monogr>
		<title level="m" type="main">The structure of the Reiser file system</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Florian</forename><surname>Buchholz</surname></persName>
		</author>
		<ptr target="http://homes.cerias.purdue.edu/หflorian/reiser/reiserfs.php" />
		<imprint>
			<date type="published" when="2006-01" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b14">
	<analytic>
		<title level="a" type="main">An Empirical Study of Operating System Errors</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Andy</forename><surname>Chou</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Junfeng</forename><surname>Yang</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Benjamin</forename><surname>Chelf</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Seth</forename><surname>Hallem</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Dawson</forename><surname>Engler</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 18th ACM Symposium on Operating Systems Principles (SOSP &apos;01)</title>
		<meeting>the 18th ACM Symposium on Operating Systems Principles (SOSP &apos;01)<address><addrLine>Banff, Canada</addrLine></address></meeting>
		<imprint>
			<date type="published" when="2001-10" />
			<biblScope unit="page" from="73" to="88" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b15">
	<analytic>
		<title level="a" type="main">Bugs as Deviant Behavior: A General Approach to Inferring Errors in Systems Code</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Dawson</forename><surname>Engler</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">David</forename><forename type="middle">Yu</forename><surname>Chen</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Seth</forename><surname>Hallem</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Andy</forename><surname>Chou</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Benjamin</forename><surname>Chelf</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 18th ACM Symposium on Operating Systems Principles (SOSP &apos;01)</title>
		<meeting>the 18th ACM Symposium on Operating Systems Principles (SOSP &apos;01)<address><addrLine>Banff, Canada</addrLine></address></meeting>
		<imprint>
			<date type="published" when="2001-10" />
			<biblScope unit="page" from="57" to="72" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b16">
	<analytic>
		<title level="a" type="main">A Study of the Internal and External Effects of Concurrency Bugs</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Pedro</forename><surname>Fonseca</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Cheng</forename><surname>Li</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Vishal</forename><surname>Singhal</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Rodrigo</forename><surname>Rodrigues</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the International Conference on Dependable Systems and Networks (DSN &apos;10)</title>
		<meeting>the International Conference on Dependable Systems and Networks (DSN &apos;10)<address><addrLine>Chicago, USA</addrLine></address></meeting>
		<imprint>
			<date type="published" when="2010-06" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b17">
	<analytic>
		<title level="a" type="main">The Google File System</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Sanjay</forename><surname>Ghemawat</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Howard</forename><surname>Gobioff</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Shun-Tak</forename><surname>Leung</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 19th ACM Symposium on Operating Systems Principles (SOSP &apos;03)</title>
		<meeting>the 19th ACM Symposium on Operating Systems Principles (SOSP &apos;03)<address><addrLine>Bolton Landing, New York</addrLine></address></meeting>
		<imprint>
			<date type="published" when="2003-10" />
			<biblScope unit="page" from="29" to="43" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b18">
	<analytic>
		<title level="a" type="main">Characterizing Flash Memory: Anomalies, Observations, and Applications</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">L</forename><forename type="middle">M</forename><surname>Grupp</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><forename type="middle">M</forename><surname>Caulfield</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Coburn</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Swanson</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">E</forename><surname>Yaakobi</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><forename type="middle">H</forename><surname>Siegel</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><forename type="middle">K</forename><surname>Wolf</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 42nd Annual IEEE/ACM International Symposium on Microarchitecture (MICRO&apos;09)</title>
		<meeting>the 42nd Annual IEEE/ACM International Symposium on Microarchitecture (MICRO&apos;09)<address><addrLine>New York, New York</addrLine></address></meeting>
		<imprint>
			<date type="published" when="2009-12" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b19">
	<analytic>
		<title level="a" type="main">EIO: Error Handling is Occasionally Correct</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Haryadi</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Cindy</forename><surname>Gunawi</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Andrea</forename><forename type="middle">C</forename><surname>Rubio-Gonzalez</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Arpaci-Dusseau</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">H</forename><surname>Remzi</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Ben</forename><surname>Arpaci-Dusseau</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Liblit</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 6th USENIX Symposium on File and Storage Technologies (FAST &apos;08)</title>
		<meeting>the 6th USENIX Symposium on File and Storage Technologies (FAST &apos;08)<address><addrLine>San Jose, California</addrLine></address></meeting>
		<imprint>
			<date type="published" when="2008-02" />
			<biblScope unit="page" from="207" to="222" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b20">
	<analytic>
		<title level="a" type="main">Monitors: An Operating System Structuring Construct</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><forename type="middle">A R</forename><surname>Hoare</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Communications of the ACM</title>
		<imprint>
			<biblScope unit="volume">17</biblScope>
			<biblScope unit="issue">10</biblScope>
			<date type="published" when="1974" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b21">
	<monogr>
		<title level="m" type="main">Keynote Address. Apple World-wide Developers Conference</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Steve</forename><surname>Jobs</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Bertrand</forename><surname>Serlet</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Scott</forename><surname>Forstall</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2006" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b22">
	<analytic>
		<title level="a" type="main">Deadlock Immunity: Enabling Systems to Defend Against Deadlocks</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Horatiu</forename><surname>Jula</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Daniel</forename><surname>Tralamazza</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Cristian</forename><surname>Zamfir</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">George</forename><surname>Candea</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 8th Symposium on Operating Systems Design and Implementation (OSDI &apos;08)</title>
		<meeting>the 8th Symposium on Operating Systems Design and Implementation (OSDI &apos;08)<address><addrLine>San Diego, California</addrLine></address></meeting>
		<imprint>
			<date type="published" when="2008-12" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b23">
	<analytic>
		<title level="a" type="main">Revisiting Storage for Smartphones</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Hyojun</forename><surname>Kim</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Nitin</forename><surname>Agrawal</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Cristian</forename><surname>Ungureanu</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 10th USENIX Symposium on File and Storage Technologies (FAST &apos;12)</title>
		<meeting>the 10th USENIX Symposium on File and Storage Technologies (FAST &apos;12)<address><addrLine>San Jose, California</addrLine></address></meeting>
		<imprint>
			<date type="published" when="2012-02" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b24">
	<analytic>
		<title level="a" type="main">seL4: Formal Verification of an OS Kernel</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Gerwin</forename><surname>Klein</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Kevin</forename><surname>Elphinstone</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Gernot</forename><surname>Heiser</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">June</forename><surname>Andronick</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">David</forename><surname>Cock</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Philip</forename><surname>Derrin</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Dhammika</forename><surname>Elkaduwe</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Kai</forename><surname>Engelhardt</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Michael</forename><surname>Norrish</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Rafal</forename><surname>Kolanski</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Thomas</forename><surname>Sewell</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Harvey</forename><surname>Tuch</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Simon</forename><surname>Winwood</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 22nd ACM Symposium on Operating Systems Principles (SOSP &apos;09)</title>
		<meeting>the 22nd ACM Symposium on Operating Systems Principles (SOSP &apos;09)<address><addrLine>Big Sky, Montana</addrLine></address></meeting>
		<imprint>
			<date type="published" when="2009-10" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b25">
	<analytic>
		<title level="a" type="main">CP-Miner: A Tool for Finding Copy-paste and Related Bugs in Operating System Code</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Zhenmin</forename><surname>Li</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Shan</forename><surname>Lu</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Suvda</forename><surname>Myagmar</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Yuanyuan</forename><surname>Zhou</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 6th Symposium on Operating Systems Design and Implementation (OSDI &apos;04)</title>
		<meeting>the 6th Symposium on Operating Systems Design and Implementation (OSDI &apos;04)<address><addrLine>San Francisco, California, December</addrLine></address></meeting>
		<imprint>
			<date type="published" when="2004" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b26">
	<analytic>
		<title level="a" type="main">Have Things Changed Now? -An Empirical Study of Bug Characteristics in Modern Open Source Software</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Zhenmin</forename><surname>Li</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Lin</forename><surname>Tan</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Xuanhui</forename><surname>Wang</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Shan</forename><surname>Lu</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Yuanyuan</forename><surname>Zhou</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Chengxiang</forename><surname>Zhai</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Workshop on Architectural and System Support for Improving Software Dependability (ASID &apos;06)</title>
		<meeting><address><addrLine>San Jose, California</addrLine></address></meeting>
		<imprint>
			<date type="published" when="2006-10" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b27">
	<analytic>
		<title level="a" type="main">Automatically Extracting Implicit Programming Rules and Detecting Violations in Large Software Code</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Zhenmin</forename><surname>Li</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Yuanyuan</forename><surname>Zhou</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Pr-Miner</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 13th ACM SIGSOFT International Symposium on Foundations of Software Engineering (FSE &apos;05)</title>
		<meeting>the 13th ACM SIGSOFT International Symposium on Foundations of Software Engineering (FSE &apos;05)<address><addrLine>Lisbon, Portugal</addrLine></address></meeting>
		<imprint>
			<date type="published" when="2005-09" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b28">
	<analytic>
		<title level="a" type="main">Learning from Mistakes -A Comprehensive Study on Real World Concurrency Bug Characteristics</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Shan</forename><surname>Lu</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Soyeon</forename><surname>Park</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Eunsoo</forename><surname>Seo</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Yuanyuan</forename><surname>Zhou</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 13th International Conference on Architectural Support for Programming Languages and Operating Systems (ASPLOS XIII)</title>
		<meeting>the 13th International Conference on Architectural Support for Programming Languages and Operating Systems (ASPLOS XIII)<address><addrLine>Seattle, Washington</addrLine></address></meeting>
		<imprint>
			<date type="published" when="2008-03" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b29">
	<monogr>
		<title level="m" type="main">You just have to move on&quot;: Rethinking Personal Digital Archiving. Keynote at FAST</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Cathy</forename><surname>Marshall</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2008-02" />
		</imprint>
	</monogr>
	<note>It&apos;s like a fire</note>
</biblStruct>

<biblStruct xml:id="b30">
	<monogr>
		<title level="m" type="main">The Btrfs Filesystem</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Chris</forename><surname>Mason</surname></persName>
		</author>
		<ptr target="oss.oracle.com/projects/btrfs/dist/documentation/btrfs-ukuug.pdf" />
		<imprint>
			<date type="published" when="2007-09" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b31">
	<analytic>
		<title level="a" type="main">The New Ext4 filesystem: Current Status and Future Plans</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Avantika</forename><surname>Mathur</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Mingming</forename><surname>Cao</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Suparna</forename><surname>Bhattacharya</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Alex</forename><forename type="middle">Tomas</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Andreas</forename><surname>Dilge</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Laurent</forename><surname>Vivier</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Ottawa Linux Symposium (OLS &apos;07)</title>
		<meeting><address><addrLine>Ottawa, Canada</addrLine></address></meeting>
		<imprint>
			<date type="published" when="2007-07" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b32">
	<analytic>
		<title level="a" type="main">A Fast File System for UNIX</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Marshall</forename><forename type="middle">K</forename><surname>Mckusick</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">William</forename><forename type="middle">N</forename><surname>Joy</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Sam</forename><forename type="middle">J</forename><surname>Leffler</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Robert</forename><forename type="middle">S</forename><surname>Fabry</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">ACM Transactions on Computer Systems</title>
		<imprint>
			<biblScope unit="volume">2</biblScope>
			<biblScope unit="issue">3</biblScope>
			<biblScope unit="page" from="181" to="197" />
			<date type="published" when="1984-08" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b33">
	<monogr>
		<title level="m" type="main">Fsck -The UNIX File System Check Program. Unix System Manager&apos;s Manual -4.3 BSD Virtual VAX-11 Version</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Marshall</forename><surname>Kirk Mckusick</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Willian</forename><forename type="middle">N</forename><surname>Joy</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Samuel</forename><forename type="middle">J</forename><surname>Leffler</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Robert</forename><forename type="middle">S</forename><surname>Fabry</surname></persName>
		</author>
		<imprint>
			<date type="published" when="1986-04" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b34">
	<monogr>
		<title level="m" type="main">iOS Forensic Analysis: for iPhone, iPad, and iPod Touch</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Sean</forename><surname>Morrissey</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2010" />
			<publisher>Apress</publisher>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b35">
	<analytic>
		<title level="a" type="main">Documenting and Automating Collateral Evolutions in Linux Device Drivers</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Yoann</forename><surname>Padioleau</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Julia</forename><surname>Lawall</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Gilles</forename><surname>Renรฉ Rydhof Hansen</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Muller</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the EuroSys Conference (EuroSys &apos;08)</title>
		<meeting>the EuroSys Conference (EuroSys &apos;08)<address><addrLine>Glasgow, Scotland UK</addrLine></address></meeting>
		<imprint>
			<date type="published" when="2008-03" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b36">
	<analytic>
		<title level="a" type="main">Faults in Linux: Ten Years Later</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Nicolas</forename><surname>Palix</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Gael</forename><surname>Thomas</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Suman</forename><surname>Saha</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Christophe</forename><surname>Calves</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Julia</forename><surname>Lawall</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Gilles</forename><surname>Muller</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 15th International Conference on Architectural Support for Programming Languages and Operating Systems (ASPLOS XV)</title>
		<meeting>the 15th International Conference on Architectural Support for Programming Languages and Operating Systems (ASPLOS XV)<address><addrLine>Newport Beach, California</addrLine></address></meeting>
		<imprint>
			<date type="published" when="2011-03" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b37">
	<analytic>
		<title level="a" type="main">IRON File Systems</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Vijayan Prabhakaran</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">N</forename><surname>Lakshmi</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Nitin</forename><surname>Bairavasundaram</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Haryadi</forename><forename type="middle">S</forename><surname>Agrawal</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Andrea</forename><forename type="middle">C</forename><surname>Gunawi</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Remzi</forename><forename type="middle">H</forename><surname>Arpaci-Dusseau</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Arpaci-Dusseau</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 20th ACM Symposium on Operating Systems Principles (SOSP &apos;05)</title>
		<meeting>the 20th ACM Symposium on Operating Systems Principles (SOSP &apos;05)<address><addrLine>Brighton, United Kingdom</addrLine></address></meeting>
		<imprint>
			<date type="published" when="2005-10" />
			<biblScope unit="page" from="206" to="220" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b38">
	<monogr>
		<title level="m" type="main">The Cathedral &amp; the Bazaar: Musings on Linux and Open Source by an Accidental Revolutionary</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Eric</forename><forename type="middle">S</forename><surname>Raymond</surname></persName>
		</author>
		<imprint>
			<date type="published" when="1999-10" />
			<pubPlace>O&apos;Reilly</pubPlace>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b39">
	<analytic>
		<title level="a" type="main">The Design and Implementation of a Log-Structured File System</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Mendel</forename><surname>Rosenblum</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">John</forename><surname>Ousterhout</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">ACM Transactions on Computer Systems</title>
		<imprint>
			<biblScope unit="volume">10</biblScope>
			<biblScope unit="issue">1</biblScope>
			<biblScope unit="page" from="26" to="52" />
			<date type="published" when="1992" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b40">
	<analytic>
		<title level="a" type="main">Error Propagation Analysis for File Systems</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Cindy</forename><surname>Rubio-Gonzalez</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Haryadi</forename><forename type="middle">S</forename><surname>Gunawi</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Ben</forename><surname>Liblit</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">H</forename><surname>Remzi</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Andrea</forename><forename type="middle">C</forename><surname>Arpaci-Dusseau</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Arpacidusseau</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the ACM SIGPLAN 2009 Conference on Programming Language Design and Implementation (PLDI &apos;09)</title>
		<meeting>the ACM SIGPLAN 2009 Conference on Programming Language Design and Implementation (PLDI &apos;09)<address><addrLine>Dublin, Ireland</addrLine></address></meeting>
		<imprint>
			<date type="published" when="2009-06" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b41">
	<analytic>
		<title level="a" type="main">Finding Resource-Release Omission Faults in Linux</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Suman</forename><surname>Saha</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Julia</forename><surname>Lawall</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Gilles</forename><surname>Muller</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Workshop on Programming Languages and Operating Systems (PLOS &apos;11)</title>
		<meeting><address><addrLine>Cascais, Portugal</addrLine></address></meeting>
		<imprint>
			<date type="published" when="2011-10" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b42">
	<analytic>
		<title level="a" type="main">An Empirical Study of Reported Bugs in Server Software with Implications for Automated Bug Diagnosis</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Swarup Kumar</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">John</forename><surname>Sahoo</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Vikram</forename><surname>Criswell</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Adve</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 32nd ACM/IEEE International Conference on Software Engineering (ICSE &apos;10)</title>
		<meeting>the 32nd ACM/IEEE International Conference on Software Engineering (ICSE &apos;10)<address><addrLine>Cape Town, South Africa</addrLine></address></meeting>
		<imprint>
			<date type="published" when="2010-05" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b43">
	<analytic>
		<title level="a" type="main">The Hadoop Distributed File System</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Konstantin</forename><surname>Shvachko</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Hairong</forename><surname>Kuang</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Sanjay</forename><surname>Radia</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Robert</forename><surname>Chansler</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 26th IEEE Symposium on Mass Storage Systems and Technologies (MSST &apos;10)</title>
		<meeting>the 26th IEEE Symposium on Mass Storage Systems and Technologies (MSST &apos;10)<address><addrLine>Incline Village, Nevada</addrLine></address></meeting>
		<imprint>
			<date type="published" when="2010-05" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b44">
	<analytic>
		<title level="a" type="main">Software Defects and their Impact on System Availability -A Study of Field Failures in Operating Systems</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Mark</forename><surname>Sullivan</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Ram</forename><surname>Chillarege</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 21st International Symposium on Fault-Tolerant Computing (FTCS-21)</title>
		<meeting>the 21st International Symposium on Fault-Tolerant Computing (FTCS-21)<address><addrLine>Montreal, Canada</addrLine></address></meeting>
		<imprint>
			<date type="published" when="1991-06" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b45">
	<analytic>
		<title level="a" type="main">A Comparison of Software Defects in Database Management Systems and Operating Systems</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Mark</forename><surname>Sullivan</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Ram</forename><surname>Chillarege</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 22st International Symposium on Fault-Tolerant Computing (FTCS-22)</title>
		<meeting>the 22st International Symposium on Fault-Tolerant Computing (FTCS-22)<address><addrLine>Boston, USA</addrLine></address></meeting>
		<imprint>
			<date type="published" when="1992-07" />
			<biblScope unit="page" from="475" to="484" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b46">
	<analytic>
		<title level="a" type="main">Scalability in the XFS File System</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Adan</forename><surname>Sweeney</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Doug</forename><surname>Doucette</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Wei</forename><surname>Hu</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Curtis</forename><surname>Anderson</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Mike</forename><surname>Nishimoto</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Geoff</forename><surname>Peck</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the USENIX Annual Technical Conference (USENIX &apos;96)</title>
		<meeting>the USENIX Annual Technical Conference (USENIX &apos;96)<address><addrLine>San Diego, California</addrLine></address></meeting>
		<imprint>
			<date type="published" when="1996-01" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b47">
	<analytic>
		<title level="a" type="main">Journaling the Linux ext2fs File System</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><surname>Stephen</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Tweedie</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">The Fourth Annual Linux Expo</title>
		<meeting><address><addrLine>Durham, North Carolina</addrLine></address></meeting>
		<imprint>
			<date type="published" when="1998-05" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b48">
	<analytic>
		<title level="a" type="main">Improving Integer Security for Systems</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Xi</forename><surname>Wang</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Haogang</forename><surname>Chen</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Zhihao</forename><surname>Jia</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Nickolai</forename><surname>Zeldovich</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Frans Kaashoek</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 10th Symposium on Operating Systems Design and Implementation (OSDI &apos;12)</title>
		<meeting>the 10th Symposium on Operating Systems Design and Implementation (OSDI &apos;12)<address><addrLine>Hollywood, California</addrLine></address></meeting>
		<imprint>
			<date type="published" when="2012-10" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b49">
	<analytic>
		<title level="a" type="main">Gadara: Dynamic Deadlock Avoidance for Multithreaded Programs</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Yin</forename><surname>Wang</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Terence</forename><surname>Kelly</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Manjunath</forename><surname>Kudlur</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Stphane</forename><surname>Lafortune</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Scott</forename><surname>Mahlke</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 8th Symposium on Operating Systems Design and Implementation (OSDI &apos;08)</title>
		<meeting>the 8th Symposium on Operating Systems Design and Implementation (OSDI &apos;08)<address><addrLine>San Diego, California</addrLine></address></meeting>
		<imprint>
			<date type="published" when="2008" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b50">
	<analytic>
		<title level="a" type="main">Ad Hoc Synchronization Considered Harmful</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Weiwei</forename><surname>Xiong</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Soyeon</forename><surname>Park</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Jiaqi</forename><surname>Zhang</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Yuanyuan</forename><surname>Zhou</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Zhiqiang</forename><surname>Ma</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 9th Symposium on Operating Systems Design and Implementation (OSDI &apos;10)</title>
		<meeting>the 9th Symposium on Operating Systems Design and Implementation (OSDI &apos;10)<address><addrLine>Vancouver, Canada</addrLine></address></meeting>
		<imprint>
			<date type="published" when="2010-12" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b51">
	<analytic>
		<title level="a" type="main">EXPLODE: A Lightweight, General System for Finding Serious Storage System Errors</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Junfeng</forename><surname>Yang</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Can</forename><surname>Sar</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Dawson</forename><surname>Engler</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 7th Symposium on Operating Systems Design and Implementation (OSDI &apos;06)</title>
		<meeting>the 7th Symposium on Operating Systems Design and Implementation (OSDI &apos;06)<address><addrLine>Seattle, Washington</addrLine></address></meeting>
		<imprint>
			<date type="published" when="2006-11" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b52">
	<analytic>
		<title level="a" type="main">Using Model Checking to Find Serious File System Errors</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Junfeng</forename><surname>Yang</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Paul</forename><surname>Twohey</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Dawson</forename><surname>Engler</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Madanlal</forename><surname>Musuvathi</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 6th Symposium on Operating Systems Design and Implementation (OSDI &apos;04)</title>
		<meeting>the 6th Symposium on Operating Systems Design and Implementation (OSDI &apos;04)<address><addrLine>San Francisco, California</addrLine></address></meeting>
		<imprint>
			<date type="published" when="2004-12" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b53">
	<analytic>
		<title level="a" type="main">How Do Fixes Become Bugs? -A Comprehensive Characteristic Study on Incorrect Fixes in Commercial and Open Source Operating Systems</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Ding</forename><surname>Zuoning Yin</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Yuanyuan</forename><surname>Yuan</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Shankar</forename><surname>Zhou</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Lakshmi</forename><surname>Pasupathy</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Bairavasundaram</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the Joint Meeting of the European Software Engineering Conference and the ACM SIGSOFT Symposium on the Foundations of Software Engineering (ESEC/FSE &apos;11)</title>
		<meeting>the Joint Meeting of the European Software Engineering Conference and the ACM SIGSOFT Symposium on the Foundations of Software Engineering (ESEC/FSE &apos;11)<address><addrLine>Szeged, Hungary</addrLine></address></meeting>
		<imprint>
			<date type="published" when="2011-09" />
		</imprint>
	</monogr>
</biblStruct>

				</listBibl>
			</div>
		</back>
	</text>
</TEI>
