<?xml version="1.0" encoding="UTF-8"?>
<TEI xmlns="http://www.tei-c.org/ns/1.0" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
xsi:schemaLocation="http://www.tei-c.org/ns/1.0 /Users/atharsefid/Desktop/grobid-0.5.3/grobid-home/schemas/xsd/Grobid.xsd"
 xmlns:xlink="http://www.w3.org/1999/xlink">
	<teiHeader xml:lang="en">
		<encodingDesc>
			<appInfo>
				<application version="0.5.3" ident="GROBID" when="2020-09-29T02:55+0000">
					<ref target="https://github.com/kermitt2/grobid">GROBID - A machine learning software for extracting information from scholarly documents</ref>
				</application>
			</appInfo>
		</encodingDesc>
		<fileDesc>
			<titleStmt>
				<title level="a" type="main">Accelerating External Sorting via On-the-fly Data Merge in Active SSDs</title>
			</titleStmt>
			<publicationStmt>
				<publisher/>
				<availability status="unknown"><licence/></availability>
			</publicationStmt>
			<sourceDesc>
				<biblStruct>
					<analytic>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Young-Sik</forename><surname>Lee</surname></persName>
							<affiliation key="aff0">
								<orgName type="institution">Sungkyunkwan University</orgName>
							</affiliation>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Luis</forename><surname>Cavazos Quero</surname></persName>
							<affiliation key="aff0">
								<orgName type="institution">Sungkyunkwan University</orgName>
							</affiliation>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Youngjae</forename><surname>Lee</surname></persName>
							<affiliation key="aff0">
								<orgName type="institution">Sungkyunkwan University</orgName>
							</affiliation>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Jin-Soo</forename><surname>Kim</surname></persName>
							<affiliation key="aff0">
								<orgName type="institution">Sungkyunkwan University</orgName>
							</affiliation>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Seungryoul</forename><surname>Maeng</surname></persName>
							<affiliation key="aff0">
								<orgName type="institution">Sungkyunkwan University</orgName>
							</affiliation>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">â€ </forename><surname>Kaist</surname></persName>
							<affiliation key="aff0">
								<orgName type="institution">Sungkyunkwan University</orgName>
							</affiliation>
						</author>
						<title level="a" type="main">Accelerating External Sorting via On-the-fly Data Merge in Active SSDs</title>
					</analytic>
					<monogr>
						<imprint>
							<date/>
						</imprint>
					</monogr>
				</biblStruct>
			</sourceDesc>
		</fileDesc>
		<profileDesc>
			<abstract>
				<p>The concept of active SSDs (solid state drives) has been introduced in order to cope with the demands required to process the ever-increasing volumes of data. In active SSDs, some of the data-processing tasks are offloaded to SSDs, freeing host system resources and improving overall performance of data analysis. In this paper, we propose a novel active SSD architecture focused on improving the external sorting algorithm that is used extensively in data-intensive computing. By performing merge operations on-the-fly in active SSDs, our method can remove the extra data transfer and enhance the lifetime of SSDs. Our evaluation results on a real SSD platform indicate that the proposed scheme out-performs the traditional external sorting by up to 39%.</p>
			</abstract>
		</profileDesc>
	</teiHeader>
	<text xml:lang="en">
		<body>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="1">Introduction</head><p>We are witnessing the proliferation of solid state drives (SSDs) in various storage systems due to their high performance, low power consumption, small form factor, light weight, and shock resistance. In particular, SSDs are being widely adopted for data-intensive computing as the I/O performance becomes critical in processing the ever-increasing volumes of data.</p><p>The recent trend is to make SSDs play a more important role in data-intensive computing by revisiting the notion of active disks <ref type="bibr" target="#b3">[6]</ref>. The so-called active SSDs offload data-processing functions (e.g., min/max, scan, count, histogram, etc.) to SSDs where the data is already stored <ref type="bibr" target="#b4">[7,</ref><ref type="bibr" target="#b5">8,</ref><ref type="bibr" target="#b9">12,</ref><ref type="bibr" target="#b10">13,</ref><ref type="bibr" target="#b14">17]</ref>. The host system reads the results directly from active SSDs without excessive data transfer nor host-side computation, thereby improving performance and saving energy. As the computing capability of SSDs becomes more powerful, this approach will be more promising to enhance the efficiency and scalability of data-intensive computing.</p><p>In this paper, we propose a novel active SSD architecture which performs external sorting efficiently, leveraging the characteristics of SSDs. External sorting is one of the core data-processing algorithms in data-intensive computing because of its need to handle large-scale data using very limiting memory. For example, the MapReduce frameworks extensively utilize external sorting to generate intermediate and final outputs from map/reduce tasks <ref type="bibr" target="#b0">[1,</ref><ref type="bibr" target="#b6">9]</ref>. Also, external sorting is a key component for many query processing algorithms in database systems <ref type="bibr" target="#b7">[10]</ref>.</p><p>The key idea behind the proposed architecture is to let the host system avoid computing the final sorted output of external sorting, and storing it in SSDs. Instead, the final output is created in real time from the partially sorted data inside the active SSD, when the host system issues read requests to the result. In other words, the active SSD internally performs data merge operations on-the-fly and transfers the merged data to the host as a result of read requests. What makes this feasible is that (1) SSDs already exploit parallelism across multiple flash channels operating independently, and (2) reads can be done much faster than writes in SSDs.</p><p>The benefits of the propose scheme can be summarized as follows. First, it eliminates extra data transfer and host-side merge operations which are otherwise needed to compute and store the final output. This reduces the processing power and memory requirements of the host system. Second, the lifetime of SSDs is enhanced as the expensive writes are replaced with reads, not to mention that performance and energy efficiency are improved. Our experimental results with a prototype on a real SSD platform indicate that the proposed scheme outperforms the traditional external sorting by up to 39%.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2">Background</head></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.1">Solid State Drives (SSDs)</head><p>A typical SSD is composed of a single SSD controller, DRAM, and an array of NAND flash memory chips. Unlike hard disk drives, NAND flash memory has several unique characteristics. First, the previous data should be erased before another data is written into the same area. Second, write operations are much slower than read op- Merge 5HDG 5HDG 5HDG 5HDG</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>6RUWHGGDWD</head><p>:ULWH :ULWH :ULWH :ULWH Next processing 5HDG 5HDG 5HDG 5HDG <ref type="figure">Figure 1</ref>: The process of the traditional external sorting.</p><p>erations. Finally, as flash memory cells wear out over time, there is a limitation in the number of erase operations that can be performed.</p><p>In order to deal with these characteristics of NAND flash memory, the SSD controller runs sophisticated firmware called flash translation layer (FTL). FTL manages the physical storage space in a log-structured manner and performs wear-leveling to prolong the lifetime of SSDs. The functions of FTL are getting complex to match the increasing host interface speed and to exploit parallelism across a number of NAND flash chips connected to multiple channels. Accordingly, the hardware computing resources of SSDs become more powerful; Samsung 840 Evo, one of the latest high-end SSDs, features ARM-based triple cores operating at 400MHz and 1GB of DRAM with eight parallel NAND channels <ref type="bibr" target="#b2">[4]</ref>.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.2">External Sorting</head><p>External sorting is a type of sorting algorithms to handle large-scale data efficiently which does not fit into memory. As illustrated in <ref type="figure">Figure 1</ref>, the traditional external sorting consists of two phases: partial sorting and merge.</p><p>During the partial sorting phase, the input data is divided into chunks where the size of a single chunk is smaller than the available memory. The data of each chunk is sorted via in-memory sorting algorithms and the sorted data of the chunk is written to the disk (Step 1). In the merge phase, the partially sorted chunks are read from the disk and merged to produce the final sorted output (Step 2). Some of read requests to the partially sorted chunks can be served by page cache. However, since the data size is much larger than the available memory size, the hit ratio of the page cache is very low. The final sorted output is written into the disk (Step 3), and usually sent to the other task later for further data processing (Step 4).</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3">Design and Implementation</head></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.1">External Sorting with Active SSDs</head><p>We propose a new external sorting scheme called ActiveSort using on-the-fly data merge in active SSDs. In ActiveSort, the final sorted output is synthesized by merging data on-the-fly from multiple partially sorted chunks, when the host requires the final output. Since the final sorted output is not stored in active SSDs, ActiveSort can remove the read and write operations (Step 2 and 3 in <ref type="figure">Figure 1</ref>) which are needed to merge partially sorted chunks and to store the final output. <ref type="figure" target="#fig_0">Figure 2</ref> outlines the process of ActiveSort. In ActiveSort, the partial sorting phase is the same as that of the traditional external sorting (Step 1). However, the merge phase is skipped in ActiveSort until the host issues read requests to the final sorted output. When a read request to the final output arrives from the host, ActiveSort performs on-the-fly data merge inside active SSDs and transfers the result as the response of the read request (Step 2).</p><p>Compared to the traditional external sorting, ActiveSort requires only half of read and write operations to obtain the final sorted output. Since writes take longer than reads in SSDs, ActiveSort can achieve significant performance gain in spite of the run-time data merge operations during reads. Reducing the amount of writes is also helpful to enhance the lifetime of SSDs.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.2">On-the-fly Data Merge</head><p>The on-the-fly data merge is activated by the read request for the final sorted output from the host. Initially, ActiveSort arranges a chunk buffer in DRAM for each partially sorted chunk and prefetches several records from each chunk to the associated chunk buffer. And then, ActiveSort compares the keys in chunk buffers which come from different chunks. The record with the minimum key value is copied to the output buffer for the read request. These steps are repeated until the output buffer is filled, at which point the read request is returned to the host. When the contents of a chunk buffer runs out, ActiveSort issues another prefetch request to the NAND flash memory to fill the chunk buffer.</p><p>The overhead of comparing keys and the additional memory copy between the chunk buffer and the output buffer is critical to the performance of ActiveSort because they are performed on-the-fly. Fortunately, the overhead can be reduced by overlapping key comparison and memory copy with reading the data from NAND flash memory to chunk buffers. This is possible because SSDs have embedded CPUs for computation while data transfer between DRAM buffers and NAND flash memory is done by another flash memory controller dedicated to each NAND flash channel. In practice, ActiveSort allocates more than one chunk buffer for each partially sorted chunk to maximize the overlap between CPUs and flash memory controllers even when there is a skew in the key values.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.3">Prototype Implementation</head><p>To evaluate the performance of ActiveSort, we implement a prototype SSD based on the OpenSSD platform <ref type="bibr">[3]</ref>. The OpenSSD platform consists of 87.5MHz ARM7TDMI embedded CPU, 64MB DRAM, and four 32GB flash memory modules each connected to the different flash channel. The prototype SSD is connected to the host machine via the SATA2 interface. The on-the-fly data merge has been implemented by modifying a pagemapped FTL.</p><p>For fast prototyping, we statically fix the locations of partially sorted chunks and the final sorted output in the prototype SSD's address space and access them directly without passing file system layers. The other information such as key length and record length has been delivered to the prototype SSD using a special sector as in <ref type="bibr" target="#b14">[17]</ref>. The contents of each partially sorted chunk are striped across four flash channels to maximize sequential performance.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4">Experiments</head></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.1">Evaluation Methodology</head><p>We compare the performance of ActiveSort with that of two other sorting algorithms: NSORT and QSORT. NSORT <ref type="bibr" target="#b1">[2]</ref> is a representative external sorting library which records good performance in the Sort Benchmark contest <ref type="bibr">[5]</ref>. QSORT is a famous quick sort implementation for in-memory sorting available in the Linux library.</p><p>For all the experiments, we use a Linux machine equipped with a 3.4GHz Intel Core i5 CPU and 16GB of memory running the Ubuntu 12.04. It also has a separate commercial Samsung 840 Pro SSD for its root file system and swap device. All of input, output, and intermediate results are stored in the prototype SSD when we run the three sorting algorithms. For NSORT and QSORT, the prototype SSD acts like a normal SSD with the unmodified page-mapped FTL. For input data, we generate a 2GB data set using the gensort program from the Sort Benchmark contest homepage. Each record is set to 4KB in size including a 10-byte key to focus on the I/O traffic. The original record size of the benchmark is 100 bytes. In order to evaluate the effect of the available memory on the performance, the main memory size is varied from 1GB to 3GB using the Linux kernel boot option. <ref type="table" target="#tab_1">Table 1</ref> shows the bandwidth of sequential read and write operations of the prototype SSD. We have also measured the read bandwidth when we enable the on-the-fly data merge on the already sorted data set (sorted) and on the randomly generated data set (random). When we fully utilize four NAND flash channels, the read bandwidth achieves 137MB/s which is almost two times higher than the write bandwidth. If we perform the on-the-fly data merge on the sorted data, the read bandwidth drops to 116MB/s due to the overhead of comparing keys and copying records. When the data set is already sorted, the partially sorted chunks are perfectly striped into four NAND channels and ActiveSort can retrieve data sequentially with the full bandwidth provided by four channels. On the other hand, the random data set hurts the interleaving efficiency since ActiveSort sometimes has to read two or more records from the same chunk. Although the on-the-fly data merge lowers the read bandwidth slightly, the resulting bandwidth is still higher than the write bandwidth. Since ActiveSort removes expensive writes during sorting, we can expect improved performance.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.2">Base Performance</head></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.3">Sort Benchmarks</head><p>While running the three sorting algorithms, we measure the elapsed time to compare the performance. The elapsed time includes the time for reading the input data set, performing sorting, and writing the sorted output. Since ActiveSort does not write the final output, we also include the time for reading the final output after the sorting is completed. <ref type="figure" target="#fig_1">Figure 3</ref> compares the elapsed times for each sorting algorithm with various memory size. We can see that QSORT suffers from excessive page swapping when the memory is not enough to contain the input data. With 1GB of memory, the number of swapped-out and swapped-in pages in QSORT is 3.3x and 300x higher than that in ActiveSort, respectively.</p><p>ActiveSort shows the steady performance independent  of the available memory size, especially achieving best performance when the memory size is smaller than the data set size. Compared to NSORT, ActiveSort takes slightly longer time to read the sorted result due to onthe-fly data merge, but overall it generates the final sorted result more quickly. This is because ActiveSort reduces the amount of I/O needed to merge intermediate results. <ref type="table" target="#tab_2">Table 2</ref> shows the amount of I/O received by the prototype SSD while running ActiveSort and NSORT with 1GB of memory. ActiveSort just issues one read for the input data and one read/write for the partially sorted chunks. On the other hand, NSORT generates more reads and writes as the merge phase of NSORT requires data transfer between the main memory and the prototype SSD. From <ref type="table" target="#tab_2">Table 2</ref>, it is apparent that ActiveSort can almost double the lifetime of SSDs.</p><p>Note that NSORT performs even better than QSORT when the memory size is 3GB. This is because NSORT switches to in-memory sorting when the memory is sufficiently large to maintain all of the input data. In all experiments, ActiveSort and NSORT have about 6% CPU usages because of I/O-bound processing.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5">Discussion</head><p>The current implementation of ActiveSort has several limitations as well as rooms for improvements. First, we note that the computing resource of the prototype SSD is much inferior to the latest SSDs described in Section 2.1 in aspects of embedded CPU power, DRAM size, and internal bandwidth. We expect that the overhead of comparing keys and the additional memory copy can be reduced as the number of CPU cores and its processing power increase. The interleaving efficiency during on-the-fly data merge can be improved with the increased number of flash channels and the use of aggressive prefetching and more sophisticated buffer management techniques.</p><p>Second, the current implementation performs the partial sorting phase in the host as in the traditional external sorting. However, if the computing resource is sufficient, the partial sorting phase can be also offloaded into active SSDs further reducing the amount of I/O.</p><p>Another possible approach is to use multiple active SSDs to enhance the scalability of data-intensive computing. Similar to the scheme presented in <ref type="bibr" target="#b13">[16]</ref>, the scalability of external sorting can be improved by partitioning the input data into multiple active SSDs and then performing partial sorting completely in each active SSD. In this way, low-power microservers combined with multiple active SSDs can be a new energy-efficient vehicle for next-generation data-intensive computing.</p><p>To enable the on-the-fly data merge, the information on key length, key type, record length, sizes and locations of partially sorted chunks that constitute the final output should be available to active SSDs. Those information can be delivered to active SSDs by defining an additional interface <ref type="bibr" target="#b14">[17]</ref> or more easily by using the object-based interface <ref type="bibr" target="#b11">[14]</ref>.</p><p>With the object-based interface, active SSDs can manage the locations of partially sorted chunks by itself. The other information to identify keys and records can be transferred through the object attributes. To support variable-length records, the record header can be used for obtaining the size of each record.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="6">Related Work</head><p>The concept of the active disk has been extensively studied from the past. There are several researches to offload data-processing functions to hard disk drives (HDDs) for improving performance <ref type="bibr" target="#b3">[6,</ref><ref type="bibr" target="#b8">11,</ref><ref type="bibr" target="#b12">15,</ref><ref type="bibr" target="#b13">16]</ref>.</p><p>As SSDs have emerged as an alternative storage device, several studies have been conducted to apply the concept of the active disk to SSDs. Bae et al. <ref type="bibr" target="#b4">[7]</ref> have presented the performance model of the active SSD which performs data processing functions for big data mining and analyzed its performance benefits. Kim et al. <ref type="bibr" target="#b10">[13]</ref> and Cho et al. <ref type="bibr" target="#b5">[8]</ref> have proposed an active SSD architecture which executes several data processing functions not only on the embedded CPU(s) of the SSD controller but also on flash memory controllers. A flash memory controller is a hardware logic of the SSD controller which is responsible for data transfer between NAND flash memory and DRAM.</p><p>The aforementioned studies focus on data processing functions, whose results are much smaller than the input data. In this case, the data transfer between the host system and SSDs is dramatically reduced, thereby improving the performance of data processing. In this paper, we propose an active SSD architecture to accelerate external sorting, which is one of the core data-processing algorithms. We have shown that even such applications as external sorting, whose output size is same as input size, can benefit from active SSDs.</p><p>Tiwari et al. <ref type="bibr" target="#b14">[17]</ref> have studied an approach to utilize active SSDs in the high performance computing (HPC) environment on large-scale supercomputers. They analyze the energy and performance models of active SSDs and discuss how to utilize multiple SSDs on supercomputers. They present that adopting active SSDs is a promising approach for improving both performance and energy efficiency.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="7">Conclusion</head><p>We propose an active SSD architecture to perform external sorting efficiently, which is one of the core algorithms in data-intensive computing. By performing merge operations on-the-fly inside of SSDs, the proposed scheme can eliminate extra data transfer and improve the lifetime of SSDs. The experimental results show that the active SSDs are a promising approach to enhance the performance in data-intensive computing.</p><p>As future work, we plan to integrate the proposed scheme into the Hadoop MapReduce framework. Since external sorting is extensively used in the Hadoop framework, we expect that the proposed scheme can improve the performance and energy efficiency of MapReduce applications.</p></div><figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_0"><head>Figure 2 :</head><label>2</label><figDesc>Figure 2: The process of ActiveSort.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_1"><head>Figure 3 :</head><label>3</label><figDesc>Figure 3: The elapsed times for each sorting algorithm with varying the memory size from 1GB to 3GB.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_1" validated="true"><head>Table 1 : The base performance of the prototype SSD</head><label>1</label><figDesc></figDesc><table>Operation 
Bandwidth (MB/s) 
WRITE 
61.04 
READ 
137.07 
READ with merge (sorted) 
116.38 
READ with merge (random) 
85.81 

</table></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_2" validated="false"><head>Table 2 :</head><label>2</label><figDesc></figDesc><table>The amount of I/O of ActiveSort and NSORT 
with 1GB of memory. 
Sorting method READ (MB) WRITE (MB) 
ActiveSort 
4100 
2048 
NSORT 
6157 
4106 

</table></figure>
		</body>
		<back>

			<div type="acknowledgement">
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="8">Acknowledgments</head></div>
			</div>

			<div type="references">

				<listBibl>

<biblStruct xml:id="b0">
	<monogr>
		<title/>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Apache</forename><surname>Hadoop</surname></persName>
		</author>
		<ptr target="http://hadoop.apache.org/" />
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b1">
	<monogr>
		<title/>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Nsort</surname></persName>
		</author>
		<ptr target="http://www.ordinal.com/" />
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b2">
	<monogr>
		<title/>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Ssd</forename><surname>Samsung</surname></persName>
		</author>
		<ptr target="http://www.samsung.com/global/business/semiconductor/minisite/SSD/global/html/about/SSD840EVO.html" />
		<imprint>
			<biblScope unit="volume">840</biblScope>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b3">
	<analytic>
		<title level="a" type="main">Active disks: Programming model, algorithms and evaluation</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Acharya</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Uysal</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>And</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Saltz</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. ASPLOS</title>
		<meeting>ASPLOS</meeting>
		<imprint>
			<date type="published" when="1998" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b4">
	<analytic>
		<title level="a" type="main">Intelligent SSD: A turbo for big data mining</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D.-H</forename><surname>Bae</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J.-H</forename><surname>Kim</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S.-W</forename><surname>Kim</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">H</forename><surname>Oh</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Park</forename><surname>And</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. CIKM</title>
		<meeting>CIKM</meeting>
		<imprint>
			<date type="published" when="2013" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b5">
	<analytic>
		<title level="a" type="main">Active disk meets flash: A case for intelligent SSDs</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Cho</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Park</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><surname>Oh</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">H</forename><surname>Kim</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Y</forename><forename type="middle">I</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Y</forename><surname>And</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Ganger</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">G</forename><forename type="middle">R</forename></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. ICS</title>
		<meeting>ICS</meeting>
		<imprint>
			<date type="published" when="2013" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b6">
	<analytic>
		<title level="a" type="main">Simplified data processing on large clusters</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Dean</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>And</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Ghemawat</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Mapreduce</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. OSDI</title>
		<meeting>OSDI</meeting>
		<imprint>
			<date type="published" when="2004" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b7">
	<analytic>
		<title level="a" type="main">Implementing sorting in database systems</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Graefe</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">G</forename></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">ACM Computing Surveys</title>
		<imprint>
			<biblScope unit="volume">38</biblScope>
			<biblScope unit="issue">3</biblScope>
			<biblScope unit="page" from="1" to="37" />
			<date type="published" when="2006-09" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b8">
	<analytic>
		<title level="a" type="main">Diamond: A storage architecture for early discard in interactive search</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Huston</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">L</forename><surname>Sukthankar</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Wick-Remesinghe</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Satyanarayanan</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Ganger</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">G</forename><surname>Riedel</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">E</forename><surname>And</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Ailamaki</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. FAST</title>
		<meeting>FAST</meeting>
		<imprint>
			<date type="published" when="2004" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b9">
	<analytic>
		<title level="a" type="main">Enabling cost-effective data processing with smart SSD</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Kang</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Y</forename><surname>Kee</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Y.-S</forename><surname>Miller</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">E</forename><forename type="middle">L</forename><surname>And</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Park</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. MSST</title>
		<meeting>MSST</meeting>
		<imprint>
			<date type="published" when="2013" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b10">
	<analytic>
		<title level="a" type="main">Fast, energy efficient scan inside flash memory solid-state drives</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Kim</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Oh</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">H</forename><surname>Park</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><surname>Cho</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>And</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Lee</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S.-W</forename></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. ADMS</title>
		<meeting>ADMS</meeting>
		<imprint>
			<date type="published" when="2011" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b11">
	<analytic>
		<title level="a" type="main">OSSD: A case for object-based solid state drives</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Lee</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Y.-S</forename><surname>Kim</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S.-H</forename><surname>Kim</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J.-S</forename><surname>Lee</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Park</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><surname>And</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Maeng</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. MSST</title>
		<meeting>MSST</meeting>
		<imprint>
			<date type="published" when="2013" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b12">
	<analytic>
		<title level="a" type="main">Active disks for large-scale data processing</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Riedel</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">E</forename><surname>Faloutsos</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><surname>Gibson</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">G</forename><forename type="middle">A</forename><surname>And</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Nagle</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Computer</title>
		<imprint>
			<biblScope unit="volume">34</biblScope>
			<biblScope unit="issue">6</biblScope>
			<biblScope unit="page" from="68" to="74" />
			<date type="published" when="2001-06" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b13">
	<monogr>
		<title level="m" type="main">Active disk architecture for database</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Riedel</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">E</forename><surname>Faloutsos</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><surname>And</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Nagle</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename></persName>
		</author>
		<idno>CMU-CS-00-145</idno>
		<imprint>
			<date type="published" when="2000-04" />
		</imprint>
		<respStmt>
			<orgName>Carnegie Mellon University</orgName>
		</respStmt>
	</monogr>
<note type="report_type">Tech. Rep.</note>
</biblStruct>

<biblStruct xml:id="b14">
	<analytic>
		<title level="a" type="main">Active flash: Towards energy-efficient, insitu data analytics on extreme-scale machines</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Tiwari</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Boboila</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Vazhkudai</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><forename type="middle">S</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Kim</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Y</forename><surname>Ma</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">X</forename><surname>Desnoyers</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><forename type="middle">J</forename><surname>And Soli-Hin</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Y</forename></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. FAST</title>
		<meeting>FAST</meeting>
		<imprint>
			<date type="published" when="2013" />
		</imprint>
	</monogr>
</biblStruct>

				</listBibl>
			</div>
		</back>
	</text>
</TEI>
