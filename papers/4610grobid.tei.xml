<?xml version="1.0" encoding="UTF-8"?>
<TEI xmlns="http://www.tei-c.org/ns/1.0" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
xsi:schemaLocation="http://www.tei-c.org/ns/1.0 /Users/atharsefid/Desktop/grobid-0.5.3/grobid-home/schemas/xsd/Grobid.xsd"
 xmlns:xlink="http://www.w3.org/1999/xlink">
	<teiHeader xml:lang="en">
		<encodingDesc>
			<appInfo>
				<application version="0.5.3" ident="GROBID" when="2020-09-29T04:26+0000">
					<ref target="https://github.com/kermitt2/grobid">GROBID - A machine learning software for extracting information from scholarly documents</ref>
				</application>
			</appInfo>
		</encodingDesc>
		<fileDesc>
			<titleStmt>
				<title level="a" type="main">Illuminating the Security Issues Surrounding Lights-Out Server Management</title>
			</titleStmt>
			<publicationStmt>
				<publisher/>
				<availability status="unknown"><licence/></availability>
			</publicationStmt>
			<sourceDesc>
				<biblStruct>
					<analytic>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Anthony</forename><forename type="middle">J</forename><surname>Bonkoski</surname></persName>
							<email>abonkosk@umich.edu</email>
							<affiliation key="aff0">
								<orgName type="institution" key="instit1">University of Michigan</orgName>
								<orgName type="institution" key="instit2">University of Michigan</orgName>
								<orgName type="institution" key="instit3">University of Michigan</orgName>
							</affiliation>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Russ</forename><surname>Bielawski</surname></persName>
							<email>jbielaws@umich.edu</email>
							<affiliation key="aff0">
								<orgName type="institution" key="instit1">University of Michigan</orgName>
								<orgName type="institution" key="instit2">University of Michigan</orgName>
								<orgName type="institution" key="instit3">University of Michigan</orgName>
							</affiliation>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><forename type="middle">Alex</forename><surname>Halderman</surname></persName>
							<email>jhalderm@umich.edu</email>
							<affiliation key="aff0">
								<orgName type="institution" key="instit1">University of Michigan</orgName>
								<orgName type="institution" key="instit2">University of Michigan</orgName>
								<orgName type="institution" key="instit3">University of Michigan</orgName>
							</affiliation>
						</author>
						<title level="a" type="main">Illuminating the Security Issues Surrounding Lights-Out Server Management</title>
					</analytic>
					<monogr>
						<imprint>
							<date/>
						</imprint>
					</monogr>
				</biblStruct>
			</sourceDesc>
		</fileDesc>
		<profileDesc>
			<abstract>
				<p>Out-of-band, lights-out management has become a standard feature on many servers, but while this technology can be a boon for system administrators, it also presents a new and interesting vector for attack. This paper examines the security implications of the Intelligent Platform Management Interface (IPMI), which is implemented on server motherboards using an embedded Baseboard Management Controller (BMC). We consider the threats posed by an incorrectly implemented IPMI and present evidence that IPMI vulnerabilities may be widespread. We analyze a major OEM&apos;s IPMI implementation and discover that it is riddled with textbook vulnerabilities, some of which would allow a remote attacker to gain root access to the BMC and potentially take control of the host system. Using data from Internet-wide scans, we find that there are at least 100,000 IPMI-enabled servers (across three large vendors) running on publicly accessible IP addresses, contrary to recommended best practice. Finally, we suggest defensive strategies for servers currently deployed and propose avenues for future work.</p>
			</abstract>
		</profileDesc>
	</teiHeader>
	<text xml:lang="en">
		<body>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="1">Introduction and Roadmap</head><p>The Intelligent Platform Management Interface (IPMI) is a standard for out-of-band system management that allows operators to remotely administer machines at a layer below the host system's CPU and software <ref type="bibr" target="#b14">[15]</ref>. Modern IPMI implementations let administrators remotely monitor the health of the hardware, control the system's power state, attach virtual boot media, and redirect the keyboard, video, and mouse. All this functionality can be exercised remotely over an IP network, typically with either a command line interface or a web-based front end <ref type="bibr" target="#b11">[12,</ref><ref type="bibr" target="#b20">21,</ref><ref type="bibr" target="#b23">24]</ref>. Major server OEMs each have a special name for their IPMI implementation, such as HP's iLO, Dell's iDRAC, Oracle's iLOM, and Lenovo's IMM.</p><p>The core of an IPMI implementation is the Baseboard Management Controller (BMC), an embedded microcontroller that is integrated into the system's motherboard or installed via a daughter card. The BMC has its own flash storage and runs its own operating system, separate from the host's. It typically has access to the PCI bus, to the on-board NIC via a "side-band" interface, and to a collection of sensors and I/O ports <ref type="bibr" target="#b23">[24]</ref>. Consistent with its purpose, the BMC has almost total control of the server.</p><p>IPMI can be a convenient administrative tool, but, under the control of attackers, it can also serve as a powerful backdoor. Attackers who take control of the BMC can use it to attack the host system and network in a variety of ways. For example, they could install BMC-resident spyware to capture administrative passwords when the operator remotely accesses the host. They could use the remote physical console to boot the host into a recovery mode and gain root access, or they could use boot media redirection to run a separate OS and obtain raw access to the disks. Malware residing on the BMC could be extremely difficult to detect, since it sits at an even lower architectural layer than a BIOS- <ref type="bibr" target="#b8">[9]</ref> or VM-based rootkit <ref type="bibr" target="#b16">[17,</ref><ref type="bibr" target="#b21">22]</ref>, and it would survive reinstallation of the host OS or even complete replacement of the host's storage devices. We survey risks from compromised IPMI devices in Section 3.</p><p>Given these risks, one might assume that IPMI developers exercise rigorous security precautions to protect the BMC from remote compromise. To test this, we analyzed an IPMI implementation shipped by one large server manufacturer, Supermicro, which is based on firmware initially developed by ATEN Technologies. We find that the firmware contains numerous textbook security flaws, including exploitable privilege escalation, shell injection, and buffer overflow vulnerabilities. We demonstrate a proof-of-concept exploit against one of these problemsa buffer overflow in the web interface's login page-and show that it can be used to remotely obtain a root shell on the BMC. We describe our analysis in detail in Section 4.</p><p>Since BMC compromise is so dangerous, it has become a recommended practice not to connect IPMI devices to public networks. Instead, security best practice calls for maintaining a physically isolated management network or at least a separate management VLAN <ref type="bibr" target="#b10">[11,</ref><ref type="bibr" target="#b24">25]</ref>. Unfortunately, we find that many server operators do not follow these recommendations. In Section 5, we use data from Internet-wide surveys to reveal public IP addresses of over 100,000 IPMI devices, including more than 40,000 systems that our results suggest are remotely exploitable.</p><p>In Section 6, we attempt to draw lessons from IPMI security failures and suggest mitigations for developers and users. The vulnerabilities we find, along with others previously found by Farmer <ref type="bibr" target="#b6">[7]</ref> and Moore <ref type="bibr" target="#b18">[19]</ref>, suggest that some IPMI manufacturers are systematically failing to properly secure these devices and do not fully appreciate the security implications of out-of-band management.</p><p>These problems are compounded because although many IPMI implementations are based on GNU/Linux, they are ultimately closed systems that present a minimal interface compared to a general purpose OS. As a result, system administrators have little ability to inspect or control the internal operations. This prevents server operators from applying existing defensive security tools (e.g. Tripwire <ref type="bibr" target="#b15">[16]</ref>) and complicates independent security analysis. Even if problems are found and firmware updates released, these updates typically need to be applied manually. Many server operators may not realize how important it is to keep their IPMI firmware up to date and their management interfaces off of the public Internet.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2">Related Work</head><p>Until recently, little work has focused on IPMI security issues, and research in this area remains in its infancy. Dan Farmer was one of the first security researchers to develop a deep interest in IPMI risks and published a discussion of the technology and the potential threats it presents in early 2013 <ref type="bibr" target="#b7">[8]</ref>. Farmer also recently discovered an undocumented debugging feature in Dell's iDrac express 6 firmware that would let any user gain access to an SSH root shell <ref type="bibr" target="#b6">[7]</ref>. Our work builds on Farmer's and exposes other serious problems with IPMI. We also demonstrate an even more dangerous attack against another vendor's implementation.</p><p>Recently, HD Moore disclosed multiple vulnerabilities in two of the most popular uPnP libraries <ref type="bibr" target="#b17">[18]</ref>. Among the affected devices was the Supermicro IPMI implementation we analyze in this study. Moore et al. developed a Metasploit module that exploits one of the vulnerabilities and targets ATEN-based Supermicro IPMI systems <ref type="bibr" target="#b18">[19]</ref>. Moore reported finding approximately 35,000 such systems publicly accessible and exploitable.</p><p>In general, malware targeting non-PC devices is a growing trend. One example is malware infecting home routers, which are architecturally reminiscent of the IPMI implementations we studied. Both kinds of devices are lowpower embedded systems that frequently run Linux, often expose web-based management interfaces on public IP addresses, and can be leveraged to attack traditional PCs connected to them. ISE recently released a detailed report on security issues with common home and office routers <ref type="bibr" target="#b13">[14]</ref>. They suggest that almost every device they examined had some critical security flaw, and they claim 38 independent router-related CVEs. We conjecture that architecturally similar IPMI devices may suffer from similar flaws due to poor engineering and lack of security testing, which poses a significant threat since IPMI-equipped servers are more likely to be high value targets than home networks.</p><p>Work by Novak et al. discussed the security issues raised by remote management software, focusing on a commercial product called Absolute Manage <ref type="bibr" target="#b19">[20]</ref>. Like the IPMI device we studied, that tool turned out to be riddled with blatant vulnerabilities, and, since it was designed to perform powerful management functions, an attacker could gain full administrator privileges through its exploitation. Novak et al.'s conclusion is similar to ours: remote management tools are a particularly risky class of systems and must be designed and implemented with careful attention to security.</p><p>BMC malware can be compared to other malware that resides at low levels of the computing stack. Malicious BIOS firmware received substantial attention in the early 2000s <ref type="bibr" target="#b3">[4,</ref><ref type="bibr" target="#b8">9]</ref>. If an attacker can compromise a system's BIOS, he can insert a backdoor that persists for the life of the machine and is difficult to detect or remove. IPMI malware carries similar threats and is likely easier to develop, since many BMCs run a standard operating system. BMC malware would also likely be easier to install remotely, due to IPMI's substantial network-facing attack surface.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3">IPMI Security Risks</head><p>IPMI's growing popularity and powerful capabilities make it a new and interesting attack vector. In this section, we discuss features of typical IPMI implementations that lead to heightened security risks, and we consider what an attacker might to after compromising a vulnerable BMC.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.1">Attack Surface</head><p>IPMI devices tend to have a large attack surface. In the case of Supermicro's IPMI implementation, the BMC operates a web interface on TCP ports 80 and 443, a remote KVM console system on port 5900, a virtual boot media server on port 623, a system management architecture for server hardware (SMASH) command line processor over SSH on port 22, and an IPMI protocol interface on UDP port 623 <ref type="bibr" target="#b23">[24]</ref>.</p><p>To control access to these interfaces, IPMI deployment best practice calls for use of an isolated management network <ref type="bibr" target="#b24">[25]</ref>. Whether this advice is emphasized in official documentation varies by manufacturer: HP explicitly recommends it <ref type="bibr" target="#b10">[11]</ref>, while Supermicro's user's guide provides detailed instructions on which firewall ports to open to allow remote connections <ref type="bibr" target="#b23">[24]</ref>. Even if a management network is in use, an attacker might be able to connect to the BMC due to misconfiguration or breach of other network systems or by compromising the host system, so relying solely on a secondary network for security is insufficient.</p><p>Many manufacturers ship servers with IPMI enabled out of the box. In Supermicro's implementation, IPMI is turn on in the BIOS by default, and other default settings cause the BMC to obtain an IP address automatically via DHCP and to use either the dedicated management NIC or the primary onboard NIC in a failover configuration <ref type="bibr" target="#b23">[24]</ref>. This greatly increases the risk that uses will inadvertently leave the BMC exposed on a public IP address. We note that IPMI implementations typically provide remote management capabilities even when the host system is shut down, so if IPMI is enabled the only way to eliminate the risk of attack is to unplug the system from the network or power supply.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.2">Authentication Risks</head><p>All IPMI devices support basic authentication via usernames and passwords <ref type="bibr" target="#b14">[15]</ref>. Several manufacturers ship devices with default administrative credentials, which the system administrator may neglect to change. Dell's iDRAC IPMI has used default credentials listed directly in its user manual (root/calvin) <ref type="bibr" target="#b4">[5]</ref>, as does the Supermicro system we analyzed (ADMIN/ADMIN) <ref type="bibr" target="#b23">[24]</ref>. The Supermicro system also provides an undocumented Anonymous user account that is enabled by default and configured as an administrator <ref type="bibr" target="#b1">[2]</ref>.</p><p>Even if the user sets a strong password, it may be exposed through insecure storage on the IPMI device. The IPMI specification lists requirements for storing passwords in plaintext <ref type="bibr" target="#b14">[15]</ref>, and we confirmed that the Supermicro device we tested stores all passwords as plaintext in a single file (PSBlock) within the system's nonvolatile storage area. Administrators who operate a large number of servers may reuse the same passwords across multiple systems. Thus, compromising a single IPMI device might give an attacker access to many machines.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.3">Attack Scenarios</head><p>Attackers could subvert the BMC by guessing default passwords, exploiting vulnerabilities, or flashing malicious firmware. These lead to a number of dangerous attack scenarios. Subverting the host system An attacker with access to the IPMI device can take advantage of its remote management facilities to attack the host system or other machines on the management network. Typical IPMI implementations provide a remote virtual console, redirecting the keyboard, video, mouse, and serial port over the network. Another common feature is virtual USB disk media, which can be used to infiltrate or exfiltrate files or to provide new boot media. The combination of these capabilities and remote power cycling would allow an attacker to seize control of most common server configurations. For instance, they could restart the system and boot from a virtual live CD, then directly copy or modify data on the host's storage devices.</p><p>BMC spyware If the attacker can install malware on the BMC, it would have a powerful vantage point for spying on the system and its administrator. BMC spyware could eavesdrop on remote management sessions, sniffing passwords for the host machine and other network systems accessed from it. It could also potentially eavesdrop on the physical server console via IPMI's remote KVM functionality.</p><p>Persistent BMC rootkits As the BMC operates independently from the host's operating system and CPU, it provides an ideal hiding place for a stealthy, highly persistent rootkit. A BMC rootkit could provide the attacker with backdoor access that is hidden from IPMI access logs and insusceptible to password changes. A BMC rootkit would survive reinstallation of the host's OS, or even complete replacement of the host's storage devices. Such rootkits could even be designed to survive BMC firmware updates by dynamically patching the new firmware.</p><p>Attacking the BMC from the host system An attacker who compromises the host system could use it to attempt to compromise the BMC. With the Supermicro device we tested, software running on the host can reflash the BMC's firmware via a KCS (keyboard-controller style) interface, without any authentication or code signing <ref type="bibr" target="#b23">[24]</ref>. Due to the closed nature of IPMI implementations, once attackers gain control of the BMC, it may be extremely difficult to detect their presence or remove them from the system.</p><p>IPMI botnets If widely used IPMI devices can be compromised remotely, they can be leveraged to create large networks of bots. This is an attractive attack, because although the BMC has limited processing power, most servers have substantially more network bandwidth than typical home PCs. Furthermore, the system operator is unable to run normal malware detection and removal tools within the BMC, so IPMI bots may have longer lives that their desktop equivalents. There have already been anecdotal reports about IPMI devices being used for this purpose in the wild <ref type="bibr" target="#b2">[3]</ref>.</p><p>To explore the potential for BMC compromise, we analyzed an IPMI implementation shipped by one large server manufacturer, Supermicro. This process involved examining firmware binaries obtained from the company's website and performing exploratory probing using a server we purchased. We ultimately discovered a range of vulnerabilities, and we developed two proof-of-concept exploits to demonstrate some of the most critical problems.</p><p>The server we experimented with is a Supermicro SYS-5017C-LF 1U rackmount system with a Super X9SCL-F motherboard. The server's BMC firmware was created by ATEN Technology Inc., which also supplies IPMI systems to other system vendors, and apparently customized by Supermicro. The firmware runs on a Nuvoton WPCM450 BMC integrated into the motherboard. Our server shipped with firmware version 1.86 for the X9 motherboard line, which is the most recent revision and dates to November 2012. Internally, the BMC uses an ARM926EJ-S CPU and runs Linux 2.6.17.</p><p>This IPMI device provides both a web-based front end and an SSH interface with a SMASH command line processor. We focused our investigation on the web interface.</p><p>Our analysis began with examination of the firmware image file. Using binwalk <ref type="bibr" target="#b9">[10]</ref>, we found that it contains two CramFS filesystem partitions and a compressed Linux kernel. The first partition contains the root-level mount point and the second contains the web resources, including HTML, JavaScript, and CGI (Common Gateway Interface) programs written in C. At boot, the BMC's kernel mounts these partitions in read-only mode. It also mounts a memory-backed /tmp partition and a 1.3 MB flash-backed /nv partition, which is mounted in readwrite mode and used to store configuration and log files.</p><p>We proceeded to investigate the security of the JavaScript and CGI programs through a combination of code inspection, disassembly, and experimentation. This led us to uncover a series of vulnerabilities.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.1">Insecure Input Validation</head><p>An insecure design pattern that runs throughout the ATENbased web interface is that it appears to only perform input validation in client-side JavaScript and HTML, without any corresponding validation in the server-side CGI programs. This is dangerous, of course, because the attacker can modify or bypass the client-side checks to send arbitrary data to the server.</p><p>In every instance we examined, input size checking occurs entirely on the client. For example, on the login page, the only input size validation on the username and password fields is the text field limit set in the HTML. The server-side login.cgi program that receives this input does not perform size checks before performing strcpy,  <ref type="figure">Figure 1</ref>: Bad Privilege Checking -The Supermicro IPMI web interface checks user privileges with client-side JavaScript, without corresponding server-side checks.</p><p>resulting in a buffer overflow. We further explore the implications of this vulnerability in Section 4.3.</p><p>Similarly, input sanitization appears to happen either in client-side code or not at all. This is especially problematic because several web page text fields present front ends to shell commands. In these instances, the server concatenates the input text with other parts of a Linux shell command and executes them using the libc system function. In many cases, no checks are performed in either JavaScript or the back-end code, even for easily validated formats such as IP addresses. This flaw leads to multiple shell injection vulnerabilities, one of which we exploit in Section 4.2.</p><p>The insecure client-side validation pattern applies not only to input sanitization but also to user privilege checks. The web interface manages user permissions on the client side by initiating an AJAX request to request the current user's permissions from the server and then calling a context-specific JavaScript function called PrivilegeCallback that is provided by the current page. One implementation of this function is shown in <ref type="figure">Figure 1</ref>. This appears to be the full extent of the device's privilege validation; the server does not further verify the user's permissions when handling a request. This allows any IPMI user to escalate permissions to gain full administrator access. </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.2">Shell Injection Vulnerabilities</head><p>The lack of input sanitization leads to the potential for shell-injection vulnerabilities in several functions. Out of 67 CGI programs, we found 15 that call the system function. While we did not check whether all 15 are vulnerable to shell injection, this provides an upper bound. We did confirm that the CGI program responsible for updating the date and time (config date time.cgi) has a vulnerability in the IP address field used for NTP time updates. An example of a shell injection that executes the command "sleep 60" is shown in <ref type="figure" target="#fig_0">Figure 2</ref>.</p><p>The firmware ships with several commands that can be used to construct useful shell-injection payloads. HD Moore used the included openssl utility to implement a connect-back shell as part of his uPnP exploit <ref type="bibr" target="#b18">[19]</ref>. Our approach used wget to retrieve code from another server and execute it. We piped the output to the system log file, which we could then retrieve with system log.cgi. To ease the command injection, we also wrote a psuedo-terminal in Python to abstract away these HTTP requests. This approach gave us an indirect root shell on the BMC, allowing us to explore the system's operation from the inside.</p><p>This shell-injection exploit was useful for our analysis because it gave us a beachhead through which to explore the running server from the inside. The attack requires an IPMI user account, but this is still extremely dangerous if, for example, the user has not changed the default login credentials. Even without an account, an attacker can still gain root access to the BMC by exploiting another vulnerability, which we discuss below.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.3">Buffer Overflow Vulnerabilities</head><p>There are numerous buffer-overflow vulnerabilities in the web interface's CGI programs due to lack of input validation and bounds checking. One such example is login.cgi, which uses the unsafe strcpy function to manipulate user-controlled inputs. <ref type="figure" target="#fig_1">Figure 3</ref> presents a partial decompilation of the vulnerable code. The cgiGetVariable function returns a pointer to a buffer containing the requested CGI variable. As the listing shows, this string, which is of unconstrained size, gets copied into a fixed-size buffer without any length checking, so long user inputs will overwrite the contents of the stack. Thus, Supermicro's ATEN-based IPMI web interface has buffer overflows in its login page's username and password fields.</p><p>Many of the other CGI programs appear to have the same kind of vulnerability. More generally, the pattern in <ref type="figure" target="#fig_1">Figure 3</ref> is an idiom the developers seem to have used everywhere they handle POST requests: they use a call to cgiGetVariable and then strcpy to a fixed-size stackbased buffer. All these instances are potentially vulnerable to buffer-overflow attacks.</p><p>There remains the question of how exploitable these vulnerabilities are. In particular, does the BMC employ modern buffer-overflow defenses, such as DEP, ASLR, and stack canaries? Using a combination of shellinjection and disassembly, we determined that neither DEP nor stack canaries are in use. There is a limited ASLR implementation, but it only randomizes the location of the stack and heap; all libraries are deterministically mapped. We verified this configuration for DEP and ASLR by examining the memory maps of processes. The stack always had rwxp permissions on its pages, and shared libraries were always mapped to the same locations across various executions while the stack base address varied.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.4">Buffer Overflow Exploit</head><p>We created a proof-of-concept exploit for the vulnerable login.cgi. To ease development, we leveraged the root shell access gained via the shell-injection attack described above to install a modified ssh-daemon that forks a normal shell instead of the limited SMASH command interpreter. We enabled core dumps and installed a crosscompiled gdb to analyze them. We also temporarily disabled ASLR until our basic exploit was working. <ref type="figure">Figure 4</ref>: Exploit Memory Layout -Our proof-ofconcept exploit overflows the buffer name <ref type="bibr">[128]</ref> onto the stack. We reuse the allocated part of name to store a shell command, which we execute with libc's system().</p><p>Since the system does not use DEP, we chose to implement a traditional stack-executed attack. That is, we placed specially chosen ARM instructions on the stack via the overflow and set the return address to jump to the stack <ref type="bibr" target="#b0">[1]</ref>. Our goal was to execute a shell command via system; however, there were few bytes left for the command payload after the shellcode, so we placed the command in the allocated part of the name buffer. To prevent the program from crashing before the function returns, we have to ensure that one local variable (a pointer to a structure in a shared library) remains intact, but this value appears to be constant in practice. <ref type="figure">Figure 4</ref> depicts our exploit's memory layout.</p><p>As a simple example payload, we decided to download and launch a modified ssh-daemon that forks a root shell when the incorrect password is entered. This modification required changing only two instructions in the system's original SSH daemon.</p><p>Lastly, we had to overcome the randomized stack. This proved simpler than one might suspect. ASLR is relatively weak with a 32-bit address space <ref type="bibr" target="#b22">[23]</ref>. The lower 12 bits are fixed due to 4 KB page alignment, and several high-order bits are constrained by other reserved memory regions (such as text, heap, and libraries). On the IPMI device, we found that only 12 bits (12-23) were being randomized, yielding a mere 4096 possibilities. This search space is fairly easy to brute-force. However, since the device uses a low-powered embedded processor, it has difficulty handling continuous web requests. We found that sending requests at intervals of around 200 ms was tolerated by the system. At this rate, our exploit succeeds within about 7 minutes on average.</p><p>It may be possible to develop an exploit that succeeds in a single request by using a return-to-libc attack. However, this approach is complicated because the stack pointer is mangled during the overflow, and ARM calling conventions pass parameters in registers.</p><p>Even without further optimization, our exploit is extremely dangerous because it can easily be parallelized to attack many servers at once. We conservatively estimate that it would take less than an hour to launch successful parallel attacks against all of the 40,000 ATEN-based Supermicro IPMI devices that we observed listening on public IP addresses (see Section 5).</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.5">Vulnerable Models</head><p>To understand how widespread vulnerabilities like these are across the Supermicro server product line, we downloaded the current set of IPMI firmware images available on the company's support site 1 as of May 23, 2013. Out of 64 distinct firmware images, 30 appeared to use ATENbased software very similar to the implementation we tested. We disassembled the login.cgi program from each of these images, and all of them appear to contain similar buffer overflow vulnerabilities. These vulnerable firmware images apply to 135 Supermicro product models. The problems may also affect IPMI devices from other manufacturers that are based on similar ATEN firmware.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5">Network Measurements</head><p>Given the security risks of IPMI devices, best practice dictates that they should not be accessible from the Internet. One possible explanation for the widespread vulnerabilities in the ATEN-based Supermicro implementation is that the programmers assumed uses would follow this advice and not connect the devices to public networks. Is this a safe assumption?</p><p>In order to estimate the number of publicly accessible IPMI devices, we used data from an Internet-wide network survey conducted in May 2013 using the ZMap network scanner <ref type="bibr" target="#b5">[6]</ref>. This dataset includes the X.509 certificates presented by all HTTPS servers in the public IPv4 address space listening on TCP port 443. We searched the data for certificates that had the identifying characteristics of default HTTPS certificates used by the web interfaces for Supermicro, Dell, and HP IPMI implementations.</p><p>For Supermicro devices, we looked for certificates with subjects containing "linda.wu@supermicro.com" or "doris@aten.com.tw", which appeared in certificates from different versions of the firmware. For Dell devices, we looked for the string "iDRAC" in the certificate subject. For HP devices, we looked for subjects containing "CN=ILO" and issuers containing "iLO3 Default Issuer" or "Hewlett Packard". We spot-checked the landing pages these servers displayed to guard against false positives. Here are the device counts we found:</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Platform</head><p>Devices These data show that at least tens of thousands of servers with IPMI are immediately at risk, and they may be only the tip of the iceberg. Other versions of the same firmware may have different certificate formats not included in these totals, and security-aware server operators may have generated non-default HTTPS certificates that would not match our search patterns. Our figures here are a lower bound on the number of IPMI-enabled devices exposed on public IP addresses today.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="6">Defenses and Lessons</head><p>The problems we uncovered carry lessons for server operators, system manufacturers, and IPMI developers.</p><p>For server operators, the most practical immediate defenses are to keep IPMI firmware up to date, change default passwords, and never configure IPMI devices on public IP addresses. These devices should be isolated either on a physically separate management network or on a management VLAN <ref type="bibr" target="#b24">[25]</ref>. Operators who do not need IPMI should disable it entirely if possible. Although these steps should already be considered security best practices, the large number of IPMI devices currently listening on public IPs suggests that many server operators are either unaware that their devices are publicly reachable or oblivious to the risks.</p><p>For IPMI developers and server OEMs, our findings should be a wakeup call. Given the power that IPMI provides, the blatant textbook vulnerabilities we found in a widely used implementation suggest either incompetence or indifference towards customers' security. While some OEMs recommend helpful precautions such as dedicated management networks <ref type="bibr" target="#b12">[13]</ref>, this should not be an excuse to shift blame to users who fail to heed this advice and suffer damage because of vulnerabilities in IPMI firmware. We believe that properly securing IPMI will require OEMs to take a defense-in-depth approach that combines hardening the implementations with encouraging users to properly isolate the devices.</p><p>Securing IPMI will require security expertise on the part of developers and careful scrutiny during system design, engineering, and testing. A starting point would be to adopt standard defense mechanisms, such as password salting and hashing, automatic firmware updates protected by digital signatures, and the use of DEP, ASLR, and stack canaries. Implementations should also be examined by qualified penetration testers. Even then, with such a large attack surface, vulnerabilities are bound to slip through, but they will likely be more difficult to find and exploit.</p><p>There are a variety of special-purpose security features that IPMI implementers should consider adding in future firmware. The most basic is to ensure that IPMI is disabled until explicitly turned on by the user. Another proactive security mechanism would be to have the BMC periodically check that it has not been accidentally attached to a public network, perhaps by requesting that a server operated by the vendor attempt to connect to it. If the connection is successful, the BMC could temporarily disable itself and alert the operator.</p><p>The problems we found may represent a kind of "impedance mismatch" between the server community and the low-power embedded systems community. Server owners are used to dealing with publicly accessible machines and have come to expect their systems to be designed for the rigors of the Internet, while embedded designers have long enjoyed the luxury of narrow use-cases and isolated systems. These vantage points must find synchrony. If these management systems are to be connected-even indirectly-to public networks, IPMI devices must be engineered with the same security scrutiny as traditional server systems.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="7">Future Work</head><p>Research into the security of fielded IPMI devices is still at an early stage, and there are a number of promising avenues for future work.</p><p>Analysis of other implementations Since our study focused on one IPMI implementation from a single vendor, we can only draw limited broader conclusions from the vulnerabilities we found. They highlight potential risks, but they do not prove that poor security engineering is widespread in this class of devices. Further study is needed to analyze IPMI products from other major vendors, such as Dell, HP, Lenovo, and Oracle. Problems that occur across many implementations might suggest broader lessons or point to underlying root causes, and would help establish the true scope of IPMI threats.</p><p>Firmware update exploitation The attacks we investigated work by exploiting vulnerabilities in the BMC's web interface, but firmware updates offer a separate and interesting attack vector to explore. The BMC needs to provide a secure and reliable update mechanism for itself, and the implementations we surveyed all support updates both via the web front-end and using an out-ofband process from the host machine's OS. Only some vendors provide signatures for firmware updates <ref type="bibr" target="#b10">[11,</ref><ref type="bibr" target="#b4">5]</ref>, and these are not always automatically verified. We encourage vendors to develop a more robust update process that ensures that firmware updates nominally intended to prevent against possible compromises do not become a point of weakness themselves.</p><p>IPMI honeypots It is unknown whether IPMI vulnerabilities like the ones we uncovered are being intentionally exploited in the wild. While there is anecdotal evidence that some BMCs have been turned into spambots <ref type="bibr" target="#b2">[3]</ref>, it is unclear whether attackers are specifically targeting BMCs or whether their simplistic vulnerabilities have allowed automated attack systems to compromise what would otherwise appear to be underpowered machines. We would like to address this question in future research by establishing IPMI honeypots that are instrumented to record evidence of attempted and successful attacks being launched against these devices.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="8">Conclusion</head><p>Out-of-band management is a technology of great value to the IT community, but its benefits are accompanied by significant security risks. IPMI's remote administration features can be powerful tools in the hands of an attacker, and implementations tend to have large remotely accessible attack surfaces. Since BMCs operate independently of the host system and CPU, cleverly written malware running there could potentially reside undetected indefinitely. Unfortunately, due to the closed nature of BMC firmware, server operators have few avenues to defend themselves without vendor assistance.</p><p>To shed light on these risks, we analyzed the security of one IPMI implementation, the ATEN-based Supermicro BMC. We uncovered a wide range of vulnerabilities and demonstrated two working attacks that allowed us to gain root shell access. These problems pose an immediate threat to many systems in the field; we found over 40,000 devices similar to the one we analyzed visible on public IP addresses. We have disclosed these vulnerabilities to ATEN and Supermicro, and we hope they will provide firmware updates to fix the immediate problems. In the meantime, we urge all IPMI users to ensure that their management interfaces are not accessible from the Internet.</p><p>In the long run, securing remote management systems calls for a defense-in-depth approach. Vendors need to apply careful security engineering practices, minimize attack surfaces, and help users ensure that their systems are appropriately locked down and isolated from public networks. Unfortunately, our findings suggest that many users and at least some IPMI vendors are unaware of the security risks that out-of-band management entails. We hope research like this that exposes vulnerabilities in real implementations will lead to greater awareness and understanding of those risks and coordinated efforts to reduce them.</p></div><figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_0"><head>Figure 2 :</head><label>2</label><figDesc>Figure 2: Shell Injection Vulnerability -The web interface fails to sanitize inputs that are directly used in shell commands. Here, the code in backticks gets executed.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_1"><head>Figure 3 :</head><label>3</label><figDesc>Figure 3: Exploitable Buffer Overflows in login.cgiThe Supermicro IPMI web interface uses this server-side code to handle HTTP POST requests from its login page.</figDesc></figure>

			<note place="foot" n="1"> http://supermicro.com/support/bios/firmware0.aspx</note>
		</body>
		<back>

			<div type="acknowledgement">
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Acknowledgments</head><p>We thank Zakir Durumeric for providing Internet-wide scan data. We also thank Eric Wustrow and Pat Pannuto for their feedback and assistance. We are grateful to HD Moore and the anonymous reviewers for their insightful suggestions and comments. This work was funded in part by NSF grant CNS-1255153.</p></div>
			</div>

			<div type="references">

				<listBibl>

<biblStruct xml:id="b0">
	<monogr>
		<title level="m" type="main">Smashing the stack for fun and profit</title>
		<imprint>
			<date type="published" when="1996-08" />
			<publisher>Phrack</publisher>
			<biblScope unit="volume">7</biblScope>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b1">
	<monogr>
		<title level="m" type="main">Supermicro IPMI documentation omission: presence of second admin account. Full Disclosure mailing list</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Floris</forename><surname>Bos</surname></persName>
		</author>
		<ptr target="http://seclists.org/fulldisclosure/2011/Oct/530" />
		<imprint>
			<date type="published" when="2011-10" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b2">
	<monogr>
		<title level="m" type="main">Supermicro IPMI security. Web Hosting Talk forum post</title>
		<ptr target="http://www.webhostingtalk.com/showthread.php?t=992082" />
		<imprint>
			<date type="published" when="2010-10" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b3">
	<monogr>
		<title level="m" type="main">Hacking Exposed: Malware and Rootkits</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Michael</forename><surname>Davis</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Sean</forename><surname>Bodmer</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Aaron</forename><surname>Lemasters</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2009" />
			<publisher>McGraw-Hill</publisher>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b4">
	<monogr>
		<title level="m" type="main">Integrated Dell Remote Access Controller 7 (iDRAC7) user&apos;s guide, 1.30.30 edition</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Dell</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2012-12" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b5">
	<analytic>
		<title level="a" type="main">ZMap: Fast Internet-wide scanning and its security applications</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Zakir</forename><surname>Durumeric</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Eric</forename><surname>Wustrow</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><forename type="middle">Alex</forename><surname>Halderman</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">22nd USENIX Security Symposium</title>
		<imprint>
			<date type="published" when="2013-08" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b6">
	<monogr>
		<title level="m" type="main">Dell backdoor</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Dan</forename><surname>Farmer</surname></persName>
		</author>
		<ptr target="http://fish2.com/ipmi/dell/secret.html" />
		<imprint>
			<date type="published" when="2013-01" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b7">
	<monogr>
		<title level="m" type="main">IPMI: Freight train to hell</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Dan</forename><surname>Farmer</surname></persName>
		</author>
		<ptr target="http://fish2.com/ipmi/itrain.html" />
		<imprint>
			<date type="published" when="2013-01" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b8">
	<monogr>
		<title level="m" type="main">Implementing and detecting an ACPI BIOS rootkit. Talk at Black Hat Europe</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">John</forename><surname>Heasman</surname></persName>
		</author>
		<ptr target="http://www.blackhat.com/presentations/bh-europe-06/bh-eu-06-Heasman.pdf" />
		<imprint>
			<date type="published" when="2006" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b9">
	<monogr>
		<title level="m" type="main">Binwalk: Firmware analysis tool</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Craig</forename><surname>Heffner</surname></persName>
		</author>
		<ptr target="https://code.google.com/p/binwalk/" />
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b10">
	<monogr>
				<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Hewlett-Packard</surname></persName>
		</author>
		<ptr target="http://bizsupport2.austin.hp.com/" />
		<title level="m">HP Integrated Lights-Out security</title>
		<imprint>
			<date type="published" when="2010-12" />
		</imprint>
	</monogr>
	<note>7 edition</note>
</biblStruct>

<biblStruct xml:id="b11">
	<monogr>
		<title level="m" type="main">HP ProLiant Lights Out-100 User Guide</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Hewlett-Packard</surname></persName>
		</author>
		<ptr target="http://bizsupport1.austin.hp.com/bc/docs/support/SupportManual/c02063205/c02063205.pdf" />
		<imprint>
			<date type="published" when="2010-03" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b12">
	<monogr>
		<title level="m" type="main">HP iLO 3 User Guide</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Hewlett-Packard</surname></persName>
		</author>
		<ptr target="http://bizsupport2.austin.hp.com/bc/docs/support/SupportManual/c02774507/c02774507.pdf" />
		<imprint>
			<date type="published" when="2012-10" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b13">
	<monogr>
		<title level="m" type="main">Exploiting SOHO routers</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Independent Security Evaluators</surname></persName>
		</author>
		<ptr target="http://securityevaluators.com/content/case-studies/routers/sohorouterhacks.jsp" />
		<imprint>
			<date type="published" when="2013-04" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b14">
	<monogr>
		<title level="m" type="main">Intelligent Platform Management Interface Specification</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Intel</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Nec</forename><surname>Hewlett-Packard</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Dell</forename></persName>
		</author>
		<idno>v2.0</idno>
		<ptr target="http://www.intel.com/content/dam/www/public/us/en/documents/product-briefs/second-gen-interface-spec-v2-rev1-4.pdf" />
		<imprint>
			<date type="published" when="2004-02" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b15">
	<analytic>
		<title level="a" type="main">The design and implementation of tripwire: a file system integrity checker</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Gene</forename><forename type="middle">H</forename><surname>Kim</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Eugene</forename><forename type="middle">H</forename><surname>Spafford</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">2nd ACM Conference on Computer and Communications Security, CCS &apos;94</title>
		<imprint>
			<date type="published" when="1994" />
			<biblScope unit="page" from="18" to="29" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b16">
	<analytic>
		<title level="a" type="main">SubVirt: Implementing malware with virtual machines</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><surname>Samuel</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Peter</forename><forename type="middle">M</forename><surname>King</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Yi-Min</forename><surname>Chen</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Chad</forename><surname>Wang</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Helen</forename><forename type="middle">J</forename><surname>Verbowski</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Jacob</forename><forename type="middle">R</forename><surname>Wang</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Lorch</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">27th IEEE Symposium on Security and Privacy, SP &apos;06</title>
		<imprint>
			<date type="published" when="2006" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b17">
	<monogr>
		<title level="m" type="main">Security flaws in Universal Plug and Play: Unplug, don&apos;t play</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">H</forename><forename type="middle">D</forename><surname>Moore</surname></persName>
		</author>
		<ptr target="https://community.rapid7.com/docs/DOC-2150" />
		<imprint>
			<date type="published" when="2013-01" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b18">
	<monogr>
		<title level="m" type="main">Metasploit module for uPnP attack on Supermicro IPMI devices</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">H</forename><forename type="middle">D</forename><surname>Moore</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Alex</forename><surname>Eubanks</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Richard</forename><surname>Harman</surname></persName>
		</author>
		<ptr target="https://github.com/rapid7/metasploit-framework/blob/master/modules/exploits/multi/upnp/libupnpssdpoverflow.rb" />
		<imprint>
			<date type="published" when="2013-02" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b19">
	<analytic>
		<title level="a" type="main">Absolute pwnage: Security risks of remote administration tools</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Jay</forename><surname>Novak</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Jonathan</forename><surname>Stribley</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Kenneth</forename><surname>Meagher</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><forename type="middle">Alex</forename><surname>Halderman</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">15th International Financial Cryptography Conference (FC)</title>
		<imprint>
			<date type="published" when="2011-02" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b20">
	<monogr>
		<title level="m" type="main">IPMI configuration on ninth-generation Dell PowerEdge servers</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Weimin</forename><surname>Pan</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Haihong</forename><surname>Zhuo</surname></persName>
		</author>
		<ptr target="http://www.dell.com/downloads/global/power/ps3q06-20050317-Zhuo.pdf" />
		<imprint>
			<date type="published" when="2006-08" />
			<publisher>Dell Power Solutions</publisher>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b21">
	<monogr>
		<title level="m" type="main">Introducing Blue Pill. The Invisible Things Lab&apos;s blog</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Joanna</forename><surname>Rutkowska</surname></persName>
		</author>
		<ptr target="http://theinvisiblethings.blogspot.com/2006/06/introducing-blue-pill.html" />
		<imprint>
			<date type="published" when="2006-06" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b22">
	<analytic>
		<title level="a" type="main">On the effectiveness of address-space randomization</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Hovav</forename><surname>Shacham</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Matthew</forename><surname>Page</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Ben</forename><surname>Pfaff</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Eu-Jin</forename><surname>Goh</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Nagendra</forename><surname>Modadugu</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Dan</forename><surname>Boneh</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">11th ACM conference on Computer and Communications Security, CCS &apos;04</title>
		<imprint>
			<date type="published" when="2004" />
			<biblScope unit="page" from="298" to="307" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b23">
	<monogr>
		<title/>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Supermicro</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Smt Ipmi User&amp;apos;s Guide</surname></persName>
		</author>
		<ptr target="http://supermicro.com/manuals/other/SMTIPMIManual.pdf" />
		<imprint>
			<date type="published" when="2013" />
			<biblScope unit="volume">2</biblScope>
		</imprint>
	</monogr>
	<note>1c edition</note>
</biblStruct>

<biblStruct xml:id="b24">
	<monogr>
		<title level="m" type="main">IPMI: Hacking servers that are turned &quot;off</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Johannes</forename><surname>Ullrich</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2012-06" />
		</imprint>
	</monogr>
	<note>ISC Diary blog</note>
</biblStruct>

				</listBibl>
			</div>
		</back>
	</text>
</TEI>
