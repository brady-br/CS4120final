<?xml version="1.0" encoding="UTF-8"?>
<TEI xmlns="http://www.tei-c.org/ns/1.0" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
xsi:schemaLocation="http://www.tei-c.org/ns/1.0 /Users/atharsefid/Desktop/grobid-0.5.3/grobid-home/schemas/xsd/Grobid.xsd"
 xmlns:xlink="http://www.w3.org/1999/xlink">
	<teiHeader xml:lang="en">
		<encodingDesc>
			<appInfo>
				<application version="0.5.3" ident="GROBID" when="2020-09-29T01:55+0000">
					<ref target="https://github.com/kermitt2/grobid">GROBID - A machine learning software for extracting information from scholarly documents</ref>
				</application>
			</appInfo>
		</encodingDesc>
		<fileDesc>
			<titleStmt>
				<title level="a" type="main">Automating Network Monitoring on Experimental Testbeds</title>
			</titleStmt>
			<publicationStmt>
				<publisher/>
				<availability status="unknown"><licence/></availability>
			</publicationStmt>
			<sourceDesc>
				<biblStruct>
					<analytic>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Michael</forename><surname>Golightly</surname></persName>
							<email>mgolight@gmail.com</email>
							<affiliation key="aff0">
								<orgName type="institution" key="instit1">Princeton University</orgName>
								<orgName type="institution" key="instit2">HP Laboratories</orgName>
							</affiliation>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Jack</forename><surname>Brassil</surname></persName>
							<email>jack.brassil@hp.com</email>
							<affiliation key="aff0">
								<orgName type="institution" key="instit1">Princeton University</orgName>
								<orgName type="institution" key="instit2">HP Laboratories</orgName>
							</affiliation>
						</author>
						<title level="a" type="main">Automating Network Monitoring on Experimental Testbeds</title>
					</analytic>
					<monogr>
						<imprint>
							<date/>
						</imprint>
					</monogr>
				</biblStruct>
			</sourceDesc>
		</fileDesc>
		<profileDesc>
			<abstract>
				<p>Despite experimental testbeds&apos; rapid growth and continued strong demand by researchers, the power of testbeds can be further increased by providing additional tools to help experimenters instrument their experiments. Ex-perimenters with improved instrumentation support can deepen their understanding of experiment operation, and have an easier task of generating high quality datasets to share with the community. We introduce a prototype tool that automatically deploys an instrumentation overlay on an existing testbed experiment. Netflowize modifies instantiated experiments to collect experiment-wide flow statistics. The resources consumed by the flow collection process are specified by the experimenter. NetFlow records are widely used by the networking and security research communities for tasks ranging from traffic engineering to detecting anomalous behaviors associated with zero-day attacks. We discuss tool design and implementation, present usage examples, and highlight the many challenges of auto-deploying an experiment-wide monitoring infrastructure.</p>
			</abstract>
		</profileDesc>
	</teiHeader>
	<text xml:lang="en">
		<body>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="1">Introduction</head><p>Cyber security research continues to be hampered by the lack of quality data sets available to the research community. One factor contributing to this scarcity is the difficulty experimenters face in collecting and preserving useful data. Yet experimental testbeds offer relatively few services specifically targeted at instrumenting experiments.</p><p>In this paper we outline the design, functionality, and performance characteristics of Netflowize, an automated deployment tool for experimental network monitoring.</p><p>The tool was developed to automatically collect netflow <ref type="bibr" target="#b0">[1]</ref> information for any Emulab <ref type="bibr" target="#b1">[2]</ref> experiment's network topology. NetFlow is a powerful flow monitoring tool heavily used by large-scale network administrators, but has been relatively lightly used by experimenters in testbed settings. The ability to export NetFlow data is a native capability on all but the least expensive IP routers and L2/3 switches, and the tools available to process collected data are numerous.</p><p>Though conceived as a general purpose network measurement platform with applications to traffic engineering, accounting and billing, NetFlow has been embraced by the network security research community. Some recent applications of NetFlow include studies in network forensics <ref type="bibr" target="#b2">[3]</ref>, botnet discovery <ref type="bibr" target="#b3">[4]</ref>, and incident detection; many other security research applications are considered at conferences such as CERT's FloCon <ref type="bibr" target="#b4">[5]</ref>. Though NetFlow itself is of immediate interest to many experimenters, our extensible deployment framework was designed to generalize beyond NetFlow to support other monitoring tools. Hence what we learned about automated deployment is of general interest to readers considering automated monitoring of experiments using various other tools.</p><p>But deploying such network monitoring tools effectively -consuming minimal experiment resources and experiment behavior -takes fairly sophisticated users deeply familiar with each individual tool, and often experience with implications of instrumentation design choices. While many experimenters could benefit from enhancing instrumentation of their experiment, only some choose to. Yet we envision future testbeds with thousands of physical servers each with tens or hundreds of virtual machines, and in this setting individual experiment size will likely grow enormously. Automated deployment promises to be a tractable approach to monitor such large-scale experiments.</p><p>In this paper we highlight the challenges faced in developing automated testbed instrumentation though the lens of netflowize development. In Sections 2 &amp; 3 we introduce our motivation, and briefly review background on NetFlow. Section 4 describes our design goals, and details our implementation, including our approaches to the tradeoff between system resources and NetFlow probe and collector placement. The next section discusses some simple application examples. The final section presents our conclusions, and argues that automated deployment tools will be valuable in diverse settings beyond experimental testbeds, including commercial public clouds.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2">Methodology</head><p>Despite the wide acceptance and success of experimental testbeds, services for instrumenting experiments have developed slowly. We believe that lack of instrumentation support is a key contributing factor to the rarity of useful data sets collected by -and available to -the security and networking research communities. Yet instrumenting individual experiments of unknown type and purpose seems possibly beyond what a testbed can hope to provide. In the face of the additional complexity and cost, experimental testbed operators have provided some limited hardware and software tools (e.g., Endace DAG capture hardware <ref type="bibr">[6]</ref>), but have largely left the experimenter to use standard platforms and create measurement systems for themselves.</p><p>In this paper we challenge testbed operators to sharpen their focus on offering services that enable the experimenter to deploy an experiment-specific instrumentation overlay. To investigate the feasibility and challenges of automated instrumentation deployment, we set out to build a prototype based on netflow. Creating a NetFlow overlay manually is not out-of-reach for many sophisticated users, but is less likely to be considered by certain testbed users such as students. The tool, which we believe will provide insights to other tool developers, has been made publicly available.</p><p>Though we have chosen to deploy NetFlow because of its immediate relevance to experimenters in both the network systems and network security research communities, we have striven to create an extensible framework which is largely independent of the underlying measurement tool deployed. In particular, we have made no changes to the open source NetFlow probes and collectors we deploy automatically. Hence, and tool that can operate in a client-server (or sensor-collector) mode can in principal be deployed with our framework. In particular, we imagine it to be straightforward to use other software-based measurement systems such as sflow and packet sniffers such as tcpdump.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3">Background</head><p>The NetFlow protocol was originally developed by Cisco Systems to collect flow information for various accounting purposes. Versions 5 and 9 are the most widely used formats today. V9 is template-based, allowing it to be more extensible and easily adaptable to recording additional flow information. The netflowize tool currently supports only the v5 protocol, though extending the framework to v9 is straightforward. A NetFlow v5 packet payload consists of a 24 byte header followed by at least one 48 byte flow record.</p><p>There are two main components to a NetFlow deployment, the probe and collector. A probe monitors traffic on a network device and generates NetFlow records that are sent to a collector. NetFlow probes are natively supported on most routers and many enterprise class L2-3 ethernet switches, and are usually configured through a CLI that allows specific interfaces to be monitored and filters to be constructed to monitor specific flows. Software-based NetFlow probes, collectors, visualizers, etc, are available with packages such as flow-tools <ref type="bibr">[21]</ref> and SiLK <ref type="bibr" target="#b18">[22]</ref> that can be run on most Unix-based systems.</p><p>A network flow is informally defined to be a unidirectional sequence of packets with some logical association (e.g., those packets belonging to a TCP connection). More precisely, a widely accepted definition is a sequence of packets whose headers match a specified ntuple observed during an interval of time at a single point (e.g., router egress link). An example of such a tuple might be &lt; src IP, dest IP, src port, dest port, IP protocol, IP Type of Service&gt; Each newly observed flow triggers creation of a 48-byte NetFlow record; NetFlow v5 records contain the following fields: By analyzing flow data at multiple vantage points, an experiment-wide picture of traffic flow and traffic volume can be built.</p><p>For efficiency, NetFlow records are usually transported periodically via a UDP packet containing a 24 byte NetFlow header and multiple flow records, up to 30 (24 for v9) in a 1500 byte datagram. Consequently, records might be lost due to network error or congestion, particularly if experiment instrumentation support is poorly designed to support record generation rates. Maintaining NetFlow data can be computationally expensive for a router (or software probe's host machine) and burden the host CPU or hardware to the point where it runs out of capacity. To avoid loading problems and reduce the volume of collection data, packets may be sampled; rather than examine every packet in a flow, sampled NetFlow records are estimates of the actual measured flow volume.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.1">NetFlow in Emulab</head><p>Multi-tenant environment instrumentation presents a fundamental design challenge. The testbed operator requires system-wide monitoring to maintain overall system health, while experimenters require experimentwide monitoring for performance validation and measurement. Testbeds such as Emulab emulate arbitrary network topologies using a flat L2 infrastructure and virtualization techniques such as VLANs. In some cases, switches such as the Cisco Catalyst 65xx-class used in schooner <ref type="bibr">[6]</ref> provide native NetFlow support. However relatively few devices offered as client test resources currently support NetFlow natively. Though of potential benefit to experimenters, most testbeds don't export NetFlow data that can be obtained from infrastructure switches, nor offer mechanisms to interact (e.g., through NetFlow filters) with such data.</p><p>In Emulab LANs and links requiring traffic shaping operations such as packet loss or rate limits are emulated by compute nodes (i.e., shaper nodes). As we will see in Section 4 this presents additional complexity for automated monitoring deployments.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4">Goals, Design and Implementation</head><p>Instrumenting testbeds has received considerable attention in recent years <ref type="bibr" target="#b5">[7]</ref>, <ref type="bibr" target="#b6">[8]</ref>. However testbed operators have first focused on offering testbed-wide rather than experiment-wide tools, and have made these tools visible to experimenters. One such example is PlanetLab's <ref type="bibr" target="#b7">[9]</ref> CoMon <ref type="bibr" target="#b9">[11]</ref>, which tracks compute system performance and operation. CoMon data is archived, and experimenters may view either node-level or slice-level statistics to better understand experiment behavior.</p><p>The benefit of this approach for operators is that a tool of manageable complexity provides a service to both the operator and experimenters. But this approach provides little flexibility for experimenters who might seek, say, a finer grain view of their experiment. We envision the testbed operator providing tools that offer a targeted, controllable view of each individual active experiment. The goals we set for designing netflowize included:</p><p>• Extensibility</p><p>Though our prototype deploys NetFlow probes and collectors, it is extensible and can be readily modified to create monitoring overlays intended to measure other network behaviors.</p><p>• Flexibility Experimenters need to be able to specify the granularity of monitoring data they collect. We expect the degree of granularity demanded by experimenters to evolve as an experiment progresses from a debugging phase to a final data collection phase.</p><p>• Coverage Though many tools focus on measurement at specific points in a topology, our emphasis was on building an experiment-wide data collection system.</p><p>•</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Resource Usage Control</head><p>Monitoring demands compute and storage resources, and experimenters should be offered alternative overlay approaches that require use of varying quantities of resources, particularly in testbeds where node utilization is high.</p><p>As we will see in the following section, these design goals drove various design decisions.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.1">Design</head><p>An experimenter must be able to balance instrumentation needs and available hardware support. Consider the network first. Hardware devices can easily generate tens of thousands of NetFlow records per second; a probe generating 10,000 NetFlow packets/second can consume 120</p><p>Mbits/sec of bandwidth. Since collectors aggregate traffic from many probes, their ingress links can be expected to reach capacity first. A collector running on a modern commodity server is roughly capable of processing 40K flows per second. We note that PlanetLab nodes may generate 100s of thousands of flows in a day. Today in practice we see much smaller numbers of active flows on Emulab. In our own project use, we rarely had occasion to exceed 500 simultaneous active flows on a 100 Mb link.</p><p>A key design problem we face with a netflow overlay is where to place probes and collectors in a arbitrary experiment topology, while seeking to strike a balance between 1) avoiding duplicate flow counting, 2) using the minimal required hardware support, and 3) obtaining complete experiment coverage.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.2">Determining the Overlay Topology</head><p>Suppose we propose to modify an experiment to provide additional hardware and/or software resources for instrumentation (including probes and collectors). Determining the topology of such an overlay obviously demands knowledge of the experimental network.</p><p>A naive approach to overlay creation proceeds as follows; extract a network topology from its specification -the experiment's ns topology description -and then modify it to add required overlay hardware and software components. In principle, this approach can be executed prior to the experiment's instantiation. Yet consider the following example of a perfectly valid topology description:</p><p>Example 1:</p><formula xml:id="formula_0">$ns duplex−link [ $ns node ] [ $ns node ] \ \ 10 Mb 0 ms DropTail</formula><p>Though perhaps bad form, Emulab will fill in unspecified details and create 2 nodes running the default operating system, and assign the nodes' names (e.g., tbnode-n1 and tbnode-n2), and perhaps name the connecting link tblink-l3. Next consider a more common topology specification:</p><p>Example 2: Extracting node names is necessary to configure the collector that each probe instance is assigned to. In either above example, parsing the script to determine node naming is challenging; in some complicated scripts even determining the number of nodes requested is formidable.</p><formula xml:id="formula_1"># create nodes for { set i 0 } { $i &lt; 2 } { incr i } { set node ( $i ) [ $</formula><p>The challenges of topology identification are further complicated by factors such as the insertion of nodes to implement link traffic shaping, which are invoked implicitly. While the need for shaping nodes can be determined from the script, multiple shapers can be implemented on a single shaper node; one can not easily determine the number of physical shaper nodes used in a given experiment instantiation. We note that other tools have circumvented the complexity of parsing and modifying scripts by choosing experimenter interaction. Deterlab's [10] Security Experimentation Environment (SEER) <ref type="bibr">[13]</ref>, <ref type="bibr" target="#b11">[14]</ref>, instructs the user to explicitly enter ns commands to create a control node, and install tarfiles and perform an initialization.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.3">Post-Instantiation Modifications</head><p>The difficulties encountered in attempting to automatically determine a topology accurately and overlay an instrumentation infrastructure by modifying an ns file suggest that in many cases it is preferable to instantiate an experiment first -prior to its modification. The process proceeds as follows: instantiate an experiment, obtain the details associated with assigned resources, swap out the experiment, modify the ns-script (e.g., add nodes, deploy tarballs) and make other changes necessary for the instrumentation overlay, and swap the instrumented experiment back in.</p><p>The feasibility of such an approach relies upon 2 Emulab resource allocation system properties:</p><p>• Persistence of resource assignments Emulab resource assignments are 'sticky'. Resources assigned to an experiment are not immediately decommissioned and placed in the resource pool available for other experiments. Swapping an experiment out and back in will use the same resources. Persistent resources support powerful features such as an experimenter's ability to 'modify' an instantiated experiment.</p><p>• Exposure of experiment resource instantiation details Emulab exposes low-level details of experiment instantiation (e.g., switch ports) via an XML-RPC interface. Experimenters can get a list of all nodes, links, and associated names. The following example illustrates available low-level information for traffic shaping nodes. Given link information gathered through XML-RPC, we are now prepared to construct a graph of our experimental topology. However our call only reveals details about links between compute nodes, and must still determine how shaping nodes fit in. As described above, we contact those nodes directly (e.g., via ssh) for attached link information, and construct the graph as follows:</p><p>1. Add all nodes to the graph (compute and shaping nodes).</p><p>2. Add links to graph starting with shaping nodes. Keep track of links to avoid redundant links.</p><p>3. Add links from compute nodes to graph.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.4">Building the Overlay</head><p>The next step is to build an overlay. Experimenters should have considerable control over how the overlay is constructed. In particular, an experimenter should be able so specify whether an instrumentation overlay uses existing experiment resources, or whether new resources are to be requested. Experimenters seeking to create the least intrusive or heavyweight overlay choose to incur the cost of acquiring additional nodes and links to run collector(s) and probes positioned as network taps. In doing so, experimenters ensure the least possible impact of measurement on their experiment's operation and performance, maximum experiment coverage, and the ability to generate the finestgrain measurement information. One case where a researcher might prefer this option is during the 'results collection' phase of their experiment's lifetime. Another example might be where a security researcher is interested in rapid detection of a malicious flow associated with a virus spread, and seeks frequent record updates sent to a collector. As an alternative, an experimenter might choose to collect as much netflow information as possible using spare capacity on existing compute resources. An experimenter might select this lightweight option during the 'debugging' phase of an experiment's lifetime.</p><p>Observations of our own experiments suggested that while compute node CPU usage was often high (see <ref type="figure" target="#fig_3">Fig- ure 2)</ref>, and the number of network interfaces on some nodes was exhausted, utilization of the Emulab control network infrastructure was mostly modest throughout experiment run-time. Hence, for either overlay construction mode we choose to conserve resources by always using the control network to serve as the measurement distribution network (i.e., transport network between probes and collector(s)) rather than create a dedicated measurement network. Of course, these starting points do not prohibit an experimenter from subsequently modifying the initial overlay construction to realize their desired measurement network infrastructure.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.4.1">Lightweight Mode</head><p>• Probe placement To find the minimal number of probes needed to cover all network flows, we begin with an algorithm motivated by the set cover problem. We first consider each link's and LAN's attached nodes as a set, and start by picking the node that belongs to the most sets. On the selected node we run a probe responsible for monitoring the node's attached links. Repeat, but only on those sets  that have yet to be covered.</p><p>One complication is that a lossless LAN can be implemented on some systems with an actual switch (i.e., not a shaper bridge), and hence all traffic will not be forwarded to all attached links. Here the only approach ensuring traffic coverage is to run a probe on every attached node.</p><p>• Collector placement Though many optimizations are possible, we select a node at random, preferably from the set of nodes not operating as probes (if nonempty).</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.4.2">Heavyweight Mode</head><p>• Probe placement Each link in our experiment is replaced by a LAN connecting the attached endpoints, as well as a new node we attach to run a probe. A lossless LAN simply has an additional new node attached to run the associated probe. Lossy LANs continue to be probed from attached nodes.</p><p>• Collector placement Each collector is assigned to a newly assigned standalone node by default.</p><p>Before considering examples of tool operation in each mode, we note that there are several potential shortcomings with our current approach. First, it is unnecessary to force an experimenter to make a binary choice about resource consumption. One can imagine a more flexible approach would be to query a user for the number of additional resources that should be assigned for instrumentation purposes, and have the tool deploy exactly that number of resources to support probes or collectors in a most efficient manner. A related deficiency in our current approach to 'heavyweight' operational mode is that a user has no advance warning of the number of additional resources that will be required for the instrumented experiment. As a consequence, the experimenter can not be certain that sufficient resources are available in the system's resource pool.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5">Examples</head><p>A few simple examples demonstrate netflow overlay creation. <ref type="figure" target="#fig_4">Figure 3</ref> depicts an experiment with 3 nodes interconnected with a LAN and no requested traffic shaping. End node shaping is explicitly enable to ensure that superfluous delay nodes are not instantiated. Exactly 3 compute nodes are assigned and interconnected with a switch. Netflowize's lightweight overlay deploys probes on 2 of the compute 3 nodes, recognizing that design's sufficiency to observe all flows. Minimizing network traffic, a single collector is also placed on a probe node.</p><p>In heavyweight mode on the same topology, netflowize modifies the ns script in a simple yet clever fashion. The single script modification is to disable end node shaping. When the experimented is swapped out and back in (as necessary in heavyweight mode), two additional delay nodes are invoked to implement shaping (tbdelay0 and tbdelay1), one between each of 2 end systems. NetFlow taps these two delay nodes to run probes to ensure full experiment coverage, and one of the delay nodes is also chosen as the collector.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5.1">Implementation</head><p>Netflowize comprises approximately 700 lines of Python code, and employs the widely used flowtools open-source package for netflow record generation and collection. The tool is publicly available at http://66.92.233.103/netflowize-0.3.tar.bz2</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="6">Related Work</head><p>A wide range of distributed monitoring systems and approaches are closely related to our work, including:</p><p>• PlanetFlow2 PlanetFlow <ref type="bibr" target="#b12">[15]</ref> provides a testbedwide view of flows on all PlanetLab node interfaces. PlanetLab operations relies on the data to investigate and resolve complaints received from third parties about suspicious or malicious traffic originating on a system node. A public web interface to the data set permits experimenters (and other researchers) to query either their own slice's or various aggregate node or system flow statistics.</p><p>A custom version of fprobe is deployed on each PlanetLab node, the only major modification being support for collecting slice level flow information. The CPU overhead of the probe was reported to only be 1-3% under maximum load; PlanetFlow uses the substantially more efficient fprobeulog probe software. Under this configuration, it is reported that there is no need to resort to flow sampling. Rather than probes sending NetFlow records directly to a collector, they are stored on each node locally and periodically collected by a separate polling-based aggregation process. Realtime flow monitoring is of course prohibitive with this design, but it is sufficient for operational needs.</p><p>The system as a whole is reported to generate up to 4 TB of data per day, the equivalent of roughly 390 Mbps of netflow packets.</p><p>• Orbit Measurement Framework and Library (OML)</p><p>With its focus on experimenter control of instrumentation on the Orbit wireless testbed, OML <ref type="bibr" target="#b10">[12]</ref> seeks to reduce the burden on experimenters of instrumenting their experiments. OML provides an API that permits individual experimenters to define measurement points and parameters, and collect and process measurement data.</p><p>• SEER SEER is an instrumentation workbench that enables DETER experimenters to simply conduct security experiments by providing agents for attack and traffic generation, collection and analysis. SEER integrates various tools for configuring and executing experiments and provides a user-friendly GUI for experimenters to use the tools. Like netflowize, SEER strives to make experiment instrumentation available to users at all skill levels. Netflowize could be viewed as a tool existing within a multipurpose workbench like SEER.</p><p>• Emulab Link/Node Tracing By providing a native, testbed supported instrumentation tool that experimenters can flexibly employ on their experiment, Emulab's powerful trace feature is close in spirit to our approach. Trace permits packet capture and storage of packet traces at any link specified in an experiment's ns topology description.</p><p>• Distributed Monitoring The topic of probe placement for the fullest possible network coverage has been widely studied <ref type="bibr" target="#b19">[23]</ref>, <ref type="bibr" target="#b20">[24]</ref>, <ref type="bibr" target="#b21">[25]</ref>. Of particular interest, CSAMP <ref type="bibr" target="#b16">[19]</ref> relies on feedback from netflow-capable routers on current traffic conditions to determine data collection points. Their goal was to reduce redundant flow collection and thereby increase flow coverage. Their work was focused from a network administrators standpoint where full topology, routing, and traffic matrix information was known.</p><p>• DiMAPI DiMAPI <ref type="bibr" target="#b17">[20]</ref> creates an API to enable users to express complex distributed monitoring needs, choose only the amount of information they are interested in, and therefore balance the overhead with the granularity of information collected.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="7">Discussion</head><p>We have described the development of netflowize, a new tool for researchers to analyze their testbed experiments. We believe that the tool will be particularly valuable for students and those unfamiliar with deploying and analyzing netflow. The tool might also be helpful for experiments that are exposed to the public internet to observe actual in-the-wild attacks. Security researchers using contained environments such as DETER will likely find the tool useful for application to anomalous flow detection, and perhaps tracking malware evolution <ref type="bibr" target="#b25">[29]</ref>, <ref type="bibr" target="#b26">[30]</ref>, <ref type="bibr" target="#b27">[31]</ref>, <ref type="bibr" target="#b28">[32]</ref>. The tool might eventually also find benefit in traffic characterization in public multi-tenant clouds. Many compelling topics were considered outside the scope of our project. This included crucial components of a complete system such as the visualization of gathered netflow data. We have also not directly addressed the specific monitoring needs that are related to the virtualization of end hosts and interfaces.</p><p>Some key lessons we learned included the benefitsand perhaps necessity -of experiment post-instantiation instrumentation. Just as crucial is the need for shared resource systems to expose even the lowest-level resource allocation and instantiation details to facilitate experiment monitoring.</p></div><figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_0"><head></head><label></label><figDesc>ns node ] tb−set−node−os $node ( $i ) FBSD410−STD } # create link set link0 [ $ns duplex−link $node ( 0 ) $node ( 1 ) 10 Mb 0 ms DropTail ]</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_1"><head>Figure 1 :</head><label>1</label><figDesc>Figure 1: The number of 'shaper' nodes used to instantiate the 3 emulated links in this 3 node network can be difficult to predict.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_3"><head>Figure 2 :</head><label>2</label><figDesc>Figure 2: CPU utilization by probe on an Emulab PC850 node.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_4"><head>Figure 3 :</head><label>3</label><figDesc>Figure 3: A simple 3 node topology.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_0" validated="false"><head>Table 1 :</head><label>1</label><figDesc></figDesc><table>Partial NetFlow Record 
Byte position Contents 
Description 
0-3 
srcaddr 
Source IP address 
4-7 
dstaddr 
Destination IP address 
8-11 
nexthop IP address of next hop router 
12-13 
input 
SNMP index of interface 
14-15 
output 
SNMP index of interface 
16-19 
dPkts 
Total packets 
20-23 
dOctets 
Total number of L3 bytes 
32-33 
srcport 
TCP/UDP source port 
34-35 
dstport 
TCP/UDP destination port 
37 
tcp flags 
TCP flags seen 
38 
prot 
IP protocol type 
39 
tos 
IP type of service (ToS) 

</table></figure>
		</body>
		<back>
			<div type="references">

				<listBibl>

<biblStruct xml:id="b0">
	<monogr>
		<title/>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Cisco</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Netflow</surname></persName>
		</author>
		<ptr target="http://www.cisco.com/en/us/products/ps6601/productsiosprotocolgrouphome.html" />
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b1">
	<monogr>
		<title/>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Emulab</surname></persName>
		</author>
		<ptr target="http://www.emulab.net" />
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b2">
	<analytic>
		<title level="a" type="main">A Generic Framework for Network Forensics</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">E</forename><surname>Pilli</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><forename type="middle">C</forename><surname>Joshi</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Niyogi</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">International Journal of Computer Applications</title>
		<imprint>
			<biblScope unit="volume">1</biblScope>
			<biblScope unit="issue">11</biblScope>
			<biblScope unit="page" from="1" to="6" />
			<date type="published" when="2010" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b3">
	<monogr>
		<title level="m" type="main">Detecting Botnets Based on their Behaviors on Perceived from Netflow</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Uddin</surname></persName>
		</author>
		<ptr target="http://courses.cs.ut.ee/2009/security-seminar/uploads/Main/mohammad-1.pdf" />
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b4">
	<monogr>
				<ptr target="http://www.cert.net/flocon" />
		<title level="m">Proceedings of FlowCon</title>
		<meeting>FlowCon</meeting>
		<imprint>
			<date type="published" when="2011" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b5">
	<monogr>
		<title level="m" type="main">GENI Instrumentation and Measurement Systems (GIMS) Specification,&quot; GENI Design Document 06-12, Facility Architecture Working Group</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Paul</forename><surname>Barford</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2007" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b6">
	<monogr>
		<title level="m" type="main">INSTOOLS: Instrumentation Tools for a GENI Prototype</title>
		<ptr target="http://groups.geni.net/geni/wiki/InstrumentationTools" />
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b7">
	<monogr>
		<title/>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Planetlab</surname></persName>
		</author>
		<ptr target="http://www.planet-lab.org" />
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b8">
	<monogr>
		<title/>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Deterlab</surname></persName>
		</author>
		<ptr target="http://www.isi.deterlab.net" />
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b9">
	<monogr>
		<title/>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Comon</surname></persName>
		</author>
		<ptr target="http://comon.cs.princeton.edu" />
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b10">
	<analytic>
		<title level="a" type="main">ORBIT Measurements Framework and Library (OML): Motivations, Implementation and Features</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Singh</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Ott</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">I</forename><surname>Seskar</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><surname>Kamat</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. of TridentCom</title>
		<meeting>of TridentCom</meeting>
		<imprint>
			<date type="published" when="2005" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b11">
	<analytic>
		<title level="a" type="main">A Security Experimentation Environment for DETER</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Schwab</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">B</forename><surname>Wilson</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><surname>Ko</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Hussain</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">DETER Community Workshop on Cyber Security Experimentation and Test (CSET&apos;07)</title>
		<imprint>
			<date type="published" when="2007" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b12">
	<monogr>
		<title/>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Planetflow2</surname></persName>
		</author>
		<ptr target="http://planetflow.planet-lab.org" />
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b13">
	<analytic>
		<title level="a" type="main">Very Large Scale Cooperative Experiments in Emulab-Derived Systems</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">K</forename><surname>Sklower</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Joseph</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">DETER Community Workshop on Cyber Security Experimentation and Test</title>
		<meeting><address><addrLine>Boston</addrLine></address></meeting>
		<imprint>
			<date type="published" when="2007-08" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b14">
	<analytic>
		<title level="a" type="main">DDoS Benchmarks and Experimentation Workbench for the DETER Testbed</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">K</forename><surname>Sklower</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Joseph</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Mirkovic</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Wei</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Hussain</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">B</forename><surname>Wilson</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Thomas</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Schwab</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Fahmy</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Chertov</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><surname>Reiher</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. of the 3rd IEEE Conf. on Testbeds and Research Infrastructures for the Development of Networks and Communities</title>
		<meeting>of the 3rd IEEE Conf. on Testbeds and Research Infrastructures for the Development of Networks and Communities</meeting>
		<imprint>
			<date type="published" when="2007" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b15">
	<analytic>
		<title/>
		<ptr target="http://www.geni.net" />
	</analytic>
	<monogr>
		<title level="j">Global Environment for Network Innovation</title>
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b16">
	<analytic>
		<title level="a" type="main">CSAMP: A System for NetworkWide Flow Monitoring</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">V</forename><surname>Sekar</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Reiter</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">W</forename><surname>Willinger</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">H</forename><surname>Zhang</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Kompella</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Andersen</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of NSDI&apos;08</title>
		<meeting>NSDI&apos;08</meeting>
		<imprint>
			<date type="published" when="2008" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b17">
	<analytic>
		<title level="a" type="main">DiMAPI: An Application Programming Interface for Distributed Network Monitoring</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><surname>Trimintzios</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Polychronakis</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Papadogiannakis</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Foukarakis</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">E</forename><surname>Markatos</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Arne</forename><surname>Oslebo</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. of NOMS&apos;06</title>
		<meeting>of NOMS&apos;06</meeting>
		<imprint>
			<date type="published" when="2006" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b18">
	<analytic>
		<title/>
		<ptr target="http://tools.netsa.cert.org/silk/" />
	</analytic>
	<monogr>
		<title level="j">System for internet-Level Knowledge</title>
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b19">
	<analytic>
		<title level="a" type="main">Reformulating the Monitor Placement Problem: Optimal Network-Wide Sampling</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">G</forename><forename type="middle">R</forename><surname>Cantieni</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">G</forename><surname>Iannaccone</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><surname>Barakat</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><surname>Diot</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><surname>Thiran</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. of ACM CoNeXT</title>
		<meeting>of ACM CoNeXT</meeting>
		<imprint>
			<date type="published" when="2006" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b20">
	<analytic>
		<title level="a" type="main">Optimal Positioning of Active and Passive Monitoring Devices</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><surname>Chadet</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">E</forename><surname>Fleury</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">I</forename><surname>Lassous</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Herve</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M.-E</forename><surname>Voge</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. of CoNeXT</title>
		<meeting>of CoNeXT</meeting>
		<imprint>
			<date type="published" when="2005" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b21">
	<analytic>
		<title level="a" type="main">Locating Network Monitors: Complexity, heuristics and coverage</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">K</forename><surname>Suh</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Y</forename><surname>Guo</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Kurose</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Towsley</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. of IEEE INFOCOM 2005</title>
		<meeting>of IEEE INFOCOM 2005</meeting>
		<imprint>
			<date type="published" when="2005" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b22">
	<analytic>
		<title level="a" type="main">Building a Better NetFlow</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><surname>Estan</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">K</forename><surname>Keys</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Moore</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">G</forename><surname>Varghese</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. of ACM SIGCOMM&apos;04</title>
		<meeting>of ACM SIGCOMM&apos;04</meeting>
		<imprint>
			<date type="published" when="2004" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b23">
	<analytic>
		<title level="a" type="main">The Power of Slicing in Internet Flow Measurement</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Kompella</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><surname>Estan</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. of IMC</title>
		<meeting>of IMC</meeting>
		<imprint>
			<date type="published" when="2005" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b24">
	<analytic>
		<title level="a" type="main">Scalable Coordination Techniques for Distributed Network Monitoring</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Sharma</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Byers</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. of PAM</title>
		<meeting>of PAM</meeting>
		<imprint>
			<date type="published" when="2005" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b25">
	<analytic>
		<title level="a" type="main">Diagnosing Network-Wide Traffic Anomalies</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Lakhina</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Crovella</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><surname>Diot</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. of ACM SIG-COMM&apos;04</title>
		<meeting>of ACM SIG-COMM&apos;04</meeting>
		<imprint>
			<date type="published" when="2004" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b26">
	<analytic>
		<title level="a" type="main">Is Sampled Data Sufficient for Anomaly Detection?</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Mai</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C.-N</forename><surname>Chuah</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Sridharan</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><surname>Ye</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">H</forename><surname>Zang</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. of IMC</title>
		<meeting>of IMC</meeting>
		<imprint>
			<date type="published" when="2006" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b27">
	<analytic>
		<title level="a" type="main">LADS: Large-scale Automated DDoS Detection System</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">V</forename><surname>Sekar</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">N</forename><surname>Duffield</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">K</forename><surname>Van Der Merwe</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">O</forename><surname>Spatscheck</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">H</forename><surname>Zhang</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. of USENIX ATC</title>
		<meeting>of USENIX ATC</meeting>
		<imprint>
			<date type="published" when="2006" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b28">
	<analytic>
		<title level="a" type="main">An Integrated Experimental Environment for Distributed Systems and Networks</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">B</forename><surname>White</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Lepreau</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">L</forename><surname>Stoller</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Ricci</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Guruprasad</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Newbold</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Hibler</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><surname>Barb</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Joglekar</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. of OSDI&apos;02</title>
		<meeting>of OSDI&apos;02</meeting>
		<imprint>
			<date type="published" when="2002" />
		</imprint>
	</monogr>
</biblStruct>

				</listBibl>
			</div>
		</back>
	</text>
</TEI>
