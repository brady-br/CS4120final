<?xml version="1.0" encoding="UTF-8"?>
<TEI xmlns="http://www.tei-c.org/ns/1.0" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
xsi:schemaLocation="http://www.tei-c.org/ns/1.0 /Users/atharsefid/Desktop/grobid-0.5.3/grobid-home/schemas/xsd/Grobid.xsd"
 xmlns:xlink="http://www.w3.org/1999/xlink">
	<teiHeader xml:lang="en">
		<encodingDesc>
			<appInfo>
				<application version="0.5.3" ident="GROBID" when="2020-09-29T02:54+0000">
					<ref target="https://github.com/kermitt2/grobid">GROBID - A machine learning software for extracting information from scholarly documents</ref>
				</application>
			</appInfo>
		</encodingDesc>
		<fileDesc>
			<titleStmt>
				<title level="a" type="main">Understanding the Interleaving-Space Overlap across Inputs and Software Versions</title>
			</titleStmt>
			<publicationStmt>
				<publisher/>
				<availability status="unknown"><licence/></availability>
			</publicationStmt>
			<sourceDesc>
				<biblStruct>
					<analytic>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Dongdong</forename><surname>Deng</surname></persName>
							<email>dongdong@cs.wisc.edu</email>
							<affiliation key="aff0">
								<orgName type="institution">University of Wisconsin</orgName>
								<address>
									<settlement>Madison</settlement>
								</address>
							</affiliation>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Wei</forename><surname>Zhang</surname></persName>
							<affiliation key="aff0">
								<orgName type="institution">University of Wisconsin</orgName>
								<address>
									<settlement>Madison</settlement>
								</address>
							</affiliation>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Borui</forename><surname>Wang</surname></persName>
							<affiliation key="aff0">
								<orgName type="institution">University of Wisconsin</orgName>
								<address>
									<settlement>Madison</settlement>
								</address>
							</affiliation>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Peisen</forename><surname>Zhao</surname></persName>
							<email>pzhao5@wisc.edu</email>
							<affiliation key="aff0">
								<orgName type="institution">University of Wisconsin</orgName>
								<address>
									<settlement>Madison</settlement>
								</address>
							</affiliation>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Shan</forename><surname>Lu</surname></persName>
							<email>shanlu@cs.wisc.edu</email>
							<affiliation key="aff0">
								<orgName type="institution">University of Wisconsin</orgName>
								<address>
									<settlement>Madison</settlement>
								</address>
							</affiliation>
						</author>
						<title level="a" type="main">Understanding the Interleaving-Space Overlap across Inputs and Software Versions</title>
					</analytic>
					<monogr>
						<imprint>
							<date/>
						</imprint>
					</monogr>
				</biblStruct>
			</sourceDesc>
		</fileDesc>
		<profileDesc>
			<abstract>
				<p>In the multi-core era, it is critical to effectively test multi-threaded software and expose concurrency bugs before software release. Previous work has made a lot of progress in exercising the interleaving space and detecting concurrency bugs under a given input. Unfortunately, since software often has many test inputs and constant pressure to release new versions, existing techniques are still too expensive in practice. In this position paper, we use open-source software to study how interleavings, data races and atomicity violations particularly, overlap across test inputs and software versions. We also conduct preliminary explorations to improve the testing efficiency of multi-threaded software by avoiding redundant analysis across inputs and software versions.</p>
			</abstract>
		</profileDesc>
	</teiHeader>
	<text xml:lang="en">
		<body>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="1.">Introduction</head><p>The rise of the multi-core era dictates the prevalence of multi-threaded software. Unfortunately, concurrency bugs widely exist in multi-threaded software <ref type="bibr" target="#b21">[22]</ref> and have caused severe damages in the real world <ref type="bibr" target="#b49">[51]</ref>. Therefore, effective software testing techniques are needed to expose concurrency bugs before software release.</p><p>Exposing concurrency bugs is challenging, requiring not only bug-triggering inputs but also special orders of sharememory access (i.e., interleavings). Facing the huge input space, interleaving space, and the pressure of releasing new versions of software, existing in-house testing allows many concurrency bugs to escape to production runs.</p><p>In today's practice, concurrency-bug detection and testing usually involve two steps for each version of software: first, testers design a set of inputs to provide code coverage; second, for each test input, the program is executed multiple times to exercise different interleavings. A lot of research is done to improve the second step by focusing on bug-prone interleaving patterns, such as races <ref type="bibr" target="#b50">[52]</ref>, atomicity violations <ref type="bibr" target="#b42">[44]</ref>, and others <ref type="bibr" target="#b38">[40]</ref>. Unfortunately, even with state-of-theart techniques, the second phase still introduces 10X -100X slowdown, not affordable for a large set of test inputs and an application with constant pressure to release new versions.</p><p>This position paper proposes to improve testing efficiency by exploiting the interleaving-space overlap across test inputs and software versions. To support this proposal, Section 2 will study how interleavings, races and atomicity violations in particular, overlap across inputs and software versions. Section 3 will discuss how to improve bug detection across inputs and software versions by leveraging this overlap and avoiding redundant analysis. <ref type="table">Table 1</ref>. Applications and test inputs in study Test inputs Click and Mozilla-js both have test-input sets designed by their developers. For Click, our study uses all its test inputs that do not require OS-kernel changes. For Mozilla-js, we randomly mix their test inputs into 8 groups of multi-threaded JavaScript requests. For the other three applications, we design 8 inputs for each to cover different command line options and corresponding functionalities. Our Aget inputs cover different Aget functionalities, such as normal file downloading, download suspending, download resuming, and others; our FFT inputs exercise different FFT-computation settings and different functionalities, such as normal FFT, inverse FFT, printing per-thread statistics, and others; our PBZIP2 inputs exercise different options, including compression, decompression, error-message suppressing, compression-integrity testing, and others.</p><p>Interleaving counting Our study focuses on two most common types of interleaving patterns: data races <ref type="bibr" target="#b40">[42,</ref><ref type="bibr" target="#b48">50]</ref> and single-variable atomicity violations <ref type="bibr" target="#b14">[15,</ref><ref type="bibr" target="#b32">33,</ref><ref type="bibr" target="#b42">44,</ref><ref type="bibr" target="#b56">58]</ref>. We use a tool implemented in PIN <ref type="bibr" target="#b35">[36]</ref>   <ref type="table" target="#tab_3">0  10  20  30  40  50  60  70</ref> i1 i2 i3 i4 i5 i6 i7 i8</p><p>(e) PBZIP2 <ref type="figure">Figure 1</ref>. Data-race overlaps across inputs (The Y-Axis shows the number of data races. Each bar represents races detected by one test input. The dotted line in each sub-figure marks the total number of unique races reported by all inputs. Colorless strips represent races exposed by 1 input; light-gray strips represent races exposed by 2-4 inputs or 2-3 inputs in Click; dark-gray strips represent races exposed by 5-7 inputs or 4-5 inputs in Click; black strips represent races exposed by all inputs.)</p><formula xml:id="formula_0">0 6 i1 i2 i3 i4 i5 i6 i7 i8</formula><p>(a) Aget i1 i2 i3 i4 i5 i6 i7 i8</p><p>(e) PBZIP2 <ref type="figure">Figure 2</ref>. Atomicity-violation overlaps across inputs (The Y-Axis, X-Axis, bars, strips, and the dotted lines have the same meanings as those in <ref type="figure">Figure 1</ref>.) data races and potential atomicity violations. Our race detection uses a lock-set/happens-before hybrid algorithm, similar to those in many open-source race detectors <ref type="bibr" target="#b39">[41,</ref><ref type="bibr" target="#b54">56]</ref>. Our atomicity-violation detection follows an algorithm described in CTrigger <ref type="bibr" target="#b42">[44]</ref>. Both detectors have been implemented and used in our previous work <ref type="bibr" target="#b42">[44,</ref><ref type="bibr" target="#b63">65,</ref><ref type="bibr" target="#b64">66]</ref>. We count each unique pair of static race instructions as one unique data race; we count each unique triplet of static instructions that compose a single-variable atomicity violation as one unique atomicity violation. The results are stable across runs for each input. We tried our best to eliminate the background noise effect. For example, for the Click experiments, under each test input, we conducted our experiment using its previously stored workload trace.</p><p>Our detectors recognize thread synchronization calls such like pthread mutex (un)lock, pthread create , pthread join , and the barrier macro in SPLASH2 <ref type="bibr" target="#b59">[61]</ref>. Like almost all other detectors, our detectors do not recognize custom synchronizations and can have false positives and negatives.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.2">Interleaving spaces across inputs</head><p>Figure 1 shows how races detected by different inputs overlap. As demonstrated by the colorless strips in <ref type="figure">Figure 1</ref>, data races exposed by only one input out of the test-input set are not common in most applications. They contribute to fewer than 18% of unique data races in Aget, FFT, Mozilla, and PBZIP2. In the same time, there are 14% -67% of unique data races in these five applications that are exposed by all test inputs, as shown by the black strips in the figure. There are also many races covered by some, yet not all, test inputs, as demonstrated by gray strips in <ref type="figure">Figure 1</ref>. <ref type="figure">Figure 2</ref> illustrates single-variable atomicity violations detected by different inputs. The trend here is similar to that of data races. All applications, except Click, have 0-30% of unique atomicity violations that are exposed by only one input (white strips in <ref type="figure">Figure 2</ref>). Meanwhile, all applications, except PBZIP2, have more than 20% of unique atomicity violations that are exposed by all test inputs (black strips in <ref type="figure">Figure 2</ref>).</p><p>Theoretically, a race or an atomicity violation may lead to failures under one input and maintain benign under another input. Therefore, we further investigate which races  and atomicity violations could lead to software failures under which inputs. We found that the goodness/badness of a race/atomicity-violation is always the same under different inputs in the studied applications and test sets. Furthermore, failure-inducing races/atomicity-violations are all exposed by more than one input, as shown in <ref type="figure">Figure 1</ref> and <ref type="figure">Figure 2</ref>. Similar to <ref type="figure">Figure 1</ref> and <ref type="figure">Figure 2</ref>, <ref type="figure" target="#fig_0">Figure 3</ref> and <ref type="figure" target="#fig_1">Figure 4</ref> illustrate how failure-inducing races and atomicity violations overlap across inputs. As can be seen from these two figures, the same failure-inducing race or atomicity violation can be repeatedly detected in many different inputs, similar to the non-failure-inducing ones.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.3">Interleaving spaces across software versions</head><p>This study takes a close look at open-source software Aget, a utility program designed for parallel downloading <ref type="bibr" target="#b0">[1]</ref>. Aget is a widely used benchmark for concurrent software reliability research <ref type="bibr" target="#b33">[34]</ref>[65] <ref type="bibr" target="#b9">[10]</ref>, because it contained some rather interesting concurrency bugs. Since its initial release in 2002, Aget has been updated for 4 times, with its latest update in 2009. To emulate the history of concurrent bug detection and study how the (buggy) interleaving spaces evolve through different versions, we applied race detection and atomicity-violation detection to all five versions of Aget, with the result illustrated in <ref type="figure" target="#fig_2">Figure 5</ref>. There have been two failure-inducing races in Aget 1 . They are both introduced by the third update (version 0.4). Each race is between two instructions that access a newly introduced shared variable within old code regions.</p><p>Summary Interleaving patterns, such as races and atomicity violations, overlap significantly across inputs and software versions. Interleaving testing and concurrency-bug detection would waste a lot of effort, if they are not coordinated across inputs and software versions.  twice the number of all race reports; #: twice the number of unique races)</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.">Exploit the interleaving-space overlap</head></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.1">A strawman approach</head><p>A strawman approach to improving race-guided testing <ref type="bibr" target="#b50">[52]</ref> and atomicity-guided testing <ref type="bibr" target="#b42">[44]</ref> is simply recording what race orders and atomicity violations have been tested, and then avoiding the same race orders or atomicity violations during the testing runs of different inputs or different code versions. If we consider baselines as interleaving-testing frameworks <ref type="bibr" target="#b42">[44]</ref> that use one program run to test one raceorder/atomicity-violation under each test input, the strawman approach can save a significant number of interleavingtesting runs. Actually, it can reduce 54-85% of testing runs for applications described in Section 2.1 <ref type="table">(Table 3)</ref>, and save up to 100% of runs across multiple versions of Aget.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.2">A better approach for cross-input bug detection</head><p>The limitation of the strawman approach is that it relies on detecting data races and atomicity violations under each input, which often incurs 10X -100X <ref type="bibr" target="#b47">[49]</ref> slowdown and is unaffordable for large sets of inputs in practice. In the following, we explore how to coordinate race detection across inputs.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.2.1">Design</head><p>We aim to coordinate race detection and avoid reporting data races already reported by previous inputs. The challenge is to predict which part of memory-access monitoring and synchronization analysis will end up with redundant race reports before any heavy-weight monitoring and analysis.</p><p>To address this challenge, we propose coordinating race detection with a metric that characterizes interleaving spaces at a coarse granularity and hence is light-weight to measure. Our preliminary exploration designs such a metric: Concurrent Function Pairs (CFP). We define CFP as the set of all function pairs that can execute in parallel with each other.</p><p>Our CFP-guided race detection includes three steps for a set of inputs. The first step executes every input and obtains the CFP of each input. The second step selects the smallest set of inputs that can cover all unique concurrent function pairs. The output of this step includes a list of selected inputs and one list of selected functions for each selected input. The third step applies a race detector to selected functions under each selected input.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.2.2">Implementation</head><p>For the first step of CFP-guided race detection, our preliminary implementation calculates the CFP of an input by analyzing the run-time log of the entrance and the exit of every function call. We implemented an LLVM-based tool to conduct the logging for every input. Our trace analysis considers an invocation of function f1 to be concurrent with an invocation of function f2 from a different thread, if and only if the entrance, or exit, of f1 and the entrance, or exit, of f2 have concurrent logical timestamps 2 and are not protected by the same lock. Experiment results show that the reported CFP are very stable across testing runs. Even in the extreme cases like Click where thousands of concurrent function pairs are reported each time, we don't see more than 1% fluctuation between each run. Since the fluctuation is small, we only run each program once under each input to collect the CFP.</p><p>Given the list of concurrent function pairs of each input, selecting the smallest set of inputs to cover all pairs is actually an NP-hard problem. We tried two implementations: one based on branch-and-bound algorithm <ref type="bibr" target="#b28">[29]</ref> that provides optimal results and one that provides approximated results. We ended up with the latter, because the former is too expensive in our experiments. Our approximated algorithm first selects the input that covers the most concurrent function pairs among all inputs. It then keeps selecting the input that covers the most uncovered pairs, until all pairs are covered.</p><p>For the third step, we slightly modified the race detector described in Section 2.1 to monitor only specified functions.  <ref type="table">Table 3</ref>. Overall results of CFP-guided race detection, with the traditional full race detection as the baseline (*: a slowdown due to the I/O intensive nature of Aget).</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.2.3">Preliminary evaluation</head><p>Our preliminary experiments compare two approaches of race detection. One is the traditional approach that applies race detection to each and every test input. It uses the race detector described in Section 2.1 and will be referred to as full detection. The other is our CFP-guided approach.</p><p>Overall results As shown in <ref type="table">Table 3</ref>, through cross-input coordination, our CFP approach effectively reduces trace sizes (33 -94% of reduction) and improves the performance of all but one benchmark (up to 7X speedup), with only 0 -4% false-negative rates among all races and no false negative among failure-inducing races. These results demonstrate the potential of coordinating bug detection across inputs.</p><p>Redundancy avoidance Our CFP-guided approach tries to avoid reporting one data race under multiple inputs. <ref type="table" target="#tab_6">Table 4</ref> shows how this goal is achieved by selecting inputs and functions in race detection. As shown in the table, 1 -7 out of 8 inputs are selected for Aget, FFT, Mozilla, and PBZIP2. All 6 test inputs are selected for Click race detection. Fortunately, only a few functions need to be monitored for most of these inputs, which significantly reduces the trace size from 127 MB to 46 MB.</p><p>By selecting inputs and functions, our CFP approach has successfully decreased the average number of inputs under which each race is reported from 2.19 -6.67 to 1.0 -2.73 (the Overlap columns of <ref type="table" target="#tab_6">Table 4</ref>). The reason that we failed to decrease the Overlap to 1 can be explained by an example. Suppose we choose input i1 to cover a concurrent function pair {f2, f3}, and i2 to cover pairs {f1 , f3} and {f1 , f2}. Under this selection scheme, a race between instructions in f2 and f3 could be reported by both i1 and i2, because f2 and f3 are monitored in both inputs. Future work can design better monitoring schemes or input/function selection schemes to further decrease the Overlap.  False negatives Our CFP-guided detection has missed very few races reported by full race detection, with 0 -4% false-negative rates. Furthermore, there is no false negative among failure-inducing races. Almost all false negatives occur when different inputs cover different basic blocks of a function and the input selected by us happens to miss the race-containing blocks.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Overlap</head><p>Performance The speedup of CFP is mainly determined by the input/function selection. Intuitively, the fewer inputs/functions selected, the faster is the CFP-guided race detection. For example, the CFP approach is 7 times as fast as the baseline full race detection for FFT, because only 1 out of 8 test inputs is selected for race detection. On the other hand, only 1.27X speedup is achieved in Mozilla, because 7 out of 8 test inputs and 67% of full-detection traces remain in CFPguided detection. The detailed performance breakdowns of all benchmarks are shown in <ref type="table">Table 5</ref>. Among all benchmarks, Aget is a special case. Although the CFP approach effectively selects inputs and decreases the race-report overlap from 6.67 to 1, it is actually slower than full race detection. The reason is that the current CFP approach requires one run of each input to calculate CFP. In most applications, this CFP-calculation time is compensated by the reduction of race-detection time. Unfortunately, this does not apply for Aget, whose I/O-intensive nature gives it a low full race-detection overhead, 11%, to compete with. This shows that the current CFP approach may not help some I/O intensive applications that have low race-detection overhead. Of course, since CFP incurs negligible overhead to collect in these applications, collecting them are still worthwhile for software with many test inputs and for coordinating other types of concurrency-bug detection.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>App.</head><p>Full CFP Step1</p><p>Step2  <ref type="table">Table 5</ref>. The total testing time across all inputs (For each application, the total execution time of all test inputs w/o any instrumentation is considered as 1)</p><p>The Step 1 and 2 in <ref type="table">Table 5</ref> show the time spent collecting function-entrance/exit traces of all inputs, calculate the CFP, and select inputs accordingly. In general, they incur relatively small overhead. Mozilla is the outlier here, because it has many utility functions with zero or just a few share-memory accesses. These functions lead to huge overhead in CFP monitoring, CFP calculation, and input selection. We expect the performance of Step 1 and 2 to significantly improve by pruning local-access functions, merging utility functions with their callers, and parallelizing our single-threaded trace-analysis and input-selection programs. The Step 3 in <ref type="table">Table 5</ref> corresponds to the overhead for race detection on the inputs and functions selected in Step 2. Finally, the Column "Total" represents the end-to-end time using CFP approach, which sums up the time from Step 1 to Step 3. Evidently, CFP is a significantly cheaper approach than the traditional approach, this speedup was also given in the second column of <ref type="table">Table 3</ref>.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.2.4">Discussion</head><p>What presented above is just a starting point to cross-input concurrency-bug detection. We believe there is a lot of room for improvement. First, not all functions and function pairs matter. In our current implementation, many functions that access no global/heap variable are involved in CFP monitor-ing and analysis. Getting rid of these functions can bring significant performance improvement. Static analysis can further help remove pairs of functions that cannot access the same variable from CFP calculation, and further improve the quality of our cross-input coordination.</p><p>Second, a function may not be the best unit for interleavingspace depiction. Sometimes, a function may be too small as a monitoring/analysis unit. In fact, monitoring the entrances and exits of utility functions that only have a couple of global/heap memory accesses leads to huge overhead. Sometimes, a function may be too big as a unit. For example, synchronization operations inside a function can cause different parts of a function to have different logical timestamps, making CFP measurement inaccurate. Some large functions may include different paths accessing completely different global/heap variables. Many false negatives in our current implementation occur within these big functions.</p><p>Finally, new metrics similar to CFP are needed to coordinate the detection of other types of concurrency bugs.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.3">Opportunities for across-version bug detection</head><p>We could use CFP to guide the race detection across software versions. Specifically, we can first calculate the CFP covered by test inputs in the new version, and then focus race detection on function pairs not covered by old versions.</p><p>We could also use the CFP metric in a smarter way. In Aget, the failure-inducing races are introduced when developers insert statements that access the same variable into function http get and save log . These two functions are a pair of concurrent functions in older versions of Aget. Since no synchronization is changed/inserted in the new version, we can tell that the inserted statements race with each other without any traditional race analysis! We leave further exploration along this direction to future work.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.">Related Work</head><p>A lot of tools are designed to detect data races <ref type="bibr" target="#b7">[8,</ref><ref type="bibr" target="#b15">16,</ref><ref type="bibr" target="#b40">42,</ref><ref type="bibr" target="#b48">50,</ref><ref type="bibr" target="#b62">64]</ref>, atomicity violations <ref type="bibr" target="#b6">[7,</ref><ref type="bibr" target="#b14">15,</ref><ref type="bibr" target="#b31">32,</ref><ref type="bibr" target="#b32">33,</ref><ref type="bibr" target="#b56">58,</ref><ref type="bibr" target="#b60">62]</ref>, and other types of concurrency bugs <ref type="bibr" target="#b16">[17,</ref><ref type="bibr" target="#b27">28,</ref><ref type="bibr" target="#b29">30,</ref><ref type="bibr" target="#b34">35,</ref><ref type="bibr" target="#b55">57,</ref><ref type="bibr" target="#b61">63,</ref><ref type="bibr" target="#b63">65,</ref><ref type="bibr" target="#b64">66]</ref>. Techniques, such as sampling <ref type="bibr" target="#b3">[4,</ref><ref type="bibr" target="#b13">14,</ref><ref type="bibr" target="#b26">27,</ref><ref type="bibr" target="#b36">37,</ref><ref type="bibr" target="#b37">38]</ref> and hardware support <ref type="bibr" target="#b43">[45,</ref><ref type="bibr" target="#b44">46,</ref><ref type="bibr" target="#b58">60]</ref>, have been proposed to improve the performance of each concurrency-bug detection run. This paper has a different perspective with the above sampling methods. Specifically, all the previous works are oblivious to the selection of input. This paper prioritizes testing inputs by their potential to cover the most unexplored concurrent function pairs. This paper is also orthogonal to some of the performanceenhancing techniques. Recent work such as DataCollider <ref type="bibr" target="#b13">[14]</ref> has significantly reduced the data race detector overhead by leveraging hardware watchpoints. Our approach can help further reduce the overhead. For example, DataCollider could leverage information about which program locations are likely to participate in a previously unknown race through some prior analysis provided by this paper. Moreover, based on our experience, cross-input and cross-version overlaps also apply to other types of concurrency bugs.</p><p>Many techniques are proposed <ref type="bibr" target="#b4">[5,</ref><ref type="bibr" target="#b11">12,</ref><ref type="bibr" target="#b38">40,</ref><ref type="bibr" target="#b42">44,</ref><ref type="bibr" target="#b51">53]</ref> to effectively explore the interleaving space of each input. Different from these techniques, this paper tries to coordinate testing across inputs and software versions.</p><p>Deterministic systems <ref type="bibr" target="#b1">[2,</ref><ref type="bibr" target="#b2">3,</ref><ref type="bibr" target="#b30">31,</ref><ref type="bibr" target="#b41">43</ref>] force software to deterministically follow one interleaving under an input. Since the schedule can be affected by subtle issues in these systems, such as the number of (write) instructions <ref type="bibr" target="#b10">[11,</ref><ref type="bibr" target="#b41">43]</ref> or synchronization operations <ref type="bibr" target="#b30">[31]</ref> executed by a thread, problems like how to co-design input testing and interleaving testing and how to estimate the interleaving impact of a code change could become more interesting.</p><p>Symbolic execution has been used for testing sequential software <ref type="bibr" target="#b5">[6,</ref><ref type="bibr" target="#b20">21,</ref><ref type="bibr" target="#b53">55]</ref> and unit testing multi-threaded software <ref type="bibr" target="#b52">[54]</ref>. Model checking for multi-threaded software has been well studied <ref type="bibr">[13, 19, 20, 23-25, 47, 48, 59]</ref>. The observation that interleavings overlap across inputs is not new in model checking and partial-order reduction is often used to avoid repeatedly exploring the same state. Unfortunately, this observation has never been studied in the context of dynamic concurrency-bug detection and related testing. Due to the different goals and approaches in these two fields, new approaches are needed to exploit interleaving-space overlap.</p><p>Recently, people start to pay attention to regression testing for concurrent software. CAPP <ref type="bibr" target="#b25">[26]</ref> describes extensive heuristics for regression testing on concurrent JAVA software and their effectiveness. We studied the interleaving space overlap across different versions of an open-source application written in C/C++. Our study provides more motivation for regression testing in multi-threaded software, and points out heuristics that can be applied to concurrency-bug detection in an evolving software.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5.">Conclusions</head><p>This position paper proposes a new direction to improve the quality of concurrency-bug detection and multi-threaded software testing by avoiding redundant analysis across inputs and software versions. Our study of open-source applications shows that a significant number of races and singlevariable atomicity violations overlap across inputs and software versions. Our preliminary exploration also shows the potential of leveraging these overlaps to improve the performance of bug-detection and testing. We expect future work to design better metrics to help coordinate cross-input bug detection and design better change-impact analysis to efficiently detect concurrency bugs brought by code changes.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="6.">Acknowledgments</head><p>We would like to thank anonymous reviewers for their invaluable feedback. Shan Lu is supported by a Claire Boothe Luce faculty fellowship, and her research group is supported by NSF grant CCF-1018180 and CCF-1054616.</p></div><figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_0"><head>Figure 3 .</head><label>3</label><figDesc>Figure 3. Failure-inducing data-race overlaps across inputs. We use the same graphical representation as in Figure 1.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_1"><head>Figure 4 .</head><label>4</label><figDesc>Figure 4. Failure-inducing atomicity-violation overlaps across inputs. We use the same graphical representation as in Figure2.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_2"><head>Figure 5 .</head><label>5</label><figDesc>Figure 5. How interleavings evolve along software versions</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_3" validated="false"><head>Table 2 . Removing unnecessary testing by the strawman (*:</head><label>2</label><figDesc></figDesc><table></table></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_6" validated="false"><head>Table 4 .</head><label>4</label><figDesc></figDesc><table>Input/function selection and overlap reduction 
(Overlap = # all race reports 
# unique race reports ) 

</table></figure>

			<note place="foot" n="1"> Sequential consistency memory model is assumed here.</note>

			<note place="foot" n="2"> We compute logical timestamps based on synchronization operations such as barriers, thread creations, and thread joins.</note>
		</body>
		<back>
			<div type="references">

				<listBibl>

<biblStruct xml:id="b0">
	<monogr>
		<title level="m" type="main">Multithreaded http download accelerator</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Aget</surname></persName>
		</author>
		<ptr target="www.enderunix.org/aget" />
		<imprint>
			<date type="published" when="2011" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b1">
	<analytic>
		<title level="a" type="main">Efficient systemenforced deterministic parallelism</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Aviram</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S.-C</forename><surname>Weng</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Hu</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">B</forename><surname>Ford</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">OSDI</title>
		<imprint>
			<date type="published" when="2010" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b2">
	<analytic>
		<title level="a" type="main">Deterministic process groups in dOS</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><surname>Bergan</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">N</forename><surname>Hunt</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">L</forename><surname>Ceze</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><forename type="middle">D</forename><surname>Gribble</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">OSDI</title>
		<imprint>
			<date type="published" when="2010" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b3">
	<analytic>
		<title level="a" type="main">Pacer: Proportional detection of data races</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><forename type="middle">D</forename><surname>Bond</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">K</forename><forename type="middle">E</forename><surname>Coons</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">K</forename><forename type="middle">S</forename><surname>Mckinley</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">PLDI</title>
		<imprint>
			<date type="published" when="2010" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b4">
	<analytic>
		<title level="a" type="main">A randomized scheduler with probabilistic guarantees of finding bugs</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Burckhardt</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><surname>Kothari</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Musuvathi</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Nagarakatte</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">ASPLOS</title>
		<imprint>
			<date type="published" when="2010" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b5">
	<analytic>
		<title level="a" type="main">Unassisted and automatic generation of high-coverage tests for complex systems programs</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><surname>Cadar</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Dunbar</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><forename type="middle">R</forename><surname>Engler</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Klee</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">OSDI</title>
		<imprint>
			<date type="published" when="2008" />
			<biblScope unit="page" from="209" to="224" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b6">
	<analytic>
		<title level="a" type="main">jpredictor: a predictive runtime analysis tool for java</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">F</forename><surname>Chen</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><forename type="middle">F</forename><surname>Serbanuta</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">G</forename><surname>Rosu</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">ICSE &apos;08: Proceedings of the 30th international conference on Software engineering</title>
		<imprint>
			<date type="published" when="2008" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b7">
	<analytic>
		<title level="a" type="main">Efficient and precise datarace detection for multithreaded object-oriented programs</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J.-D</forename><surname>Choi</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">PLDI</title>
		<imprint>
			<date type="published" when="2002" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b8">
	<monogr>
		<title level="m" type="main">The Click Modular Router Projec</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Click</surname></persName>
		</author>
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b9">
	<analytic>
		<title level="a" type="main">Efficient deterministic multithreading through schedule relaxation</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">H</forename><surname>Cui</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Wu</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Gallagher</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">H</forename><surname>Guo</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Yang</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the Twenty-Third ACM Symposium on Operating Systems Principles, SOSP &apos;11</title>
		<meeting>the Twenty-Third ACM Symposium on Operating Systems Principles, SOSP &apos;11<address><addrLine>New York, NY, USA</addrLine></address></meeting>
		<imprint>
			<publisher>ACM</publisher>
			<date type="published" when="2011" />
			<biblScope unit="page" from="337" to="351" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b10">
	<analytic>
		<title level="a" type="main">Dmp: deterministic shared memory multiprocessing</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Devietti</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">B</forename><surname>Lucia</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">L</forename><surname>Ceze</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Oskin</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">ASPLOS</title>
		<imprint>
			<date type="published" when="2009" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b11">
	<analytic>
		<title level="a" type="main">Multithreaded java program test generation</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">O</forename><surname>Edelstein</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">E</forename><surname>Farchi</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Y</forename><surname>Nir</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">G</forename><surname>Ratsaby</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Ur</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IBM Systems Journal</title>
		<imprint>
			<date type="published" when="2002" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b12">
	<analytic>
		<title level="a" type="main">Delay-bounded scheduling</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Emmi</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Qadeer</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Z</forename><surname>Rakamari´crakamari´c</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">POPL</title>
		<imprint>
			<date type="published" when="2011" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b13">
	<analytic>
		<title level="a" type="main">Effective data-race detection for the kernel</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Erickson</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Musuvathi</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Burckhardt</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">K</forename><surname>Olynyk</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 9th USENIX conference on Operating systems design and implementation, OSDI&apos;10</title>
		<meeting>the 9th USENIX conference on Operating systems design and implementation, OSDI&apos;10<address><addrLine>Berkeley, CA, USA</addrLine></address></meeting>
		<imprint>
			<publisher>USENIX Association</publisher>
			<date type="published" when="2010" />
			<biblScope unit="page" from="1" to="16" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b14">
	<analytic>
		<title level="a" type="main">Atomizer: a dynamic atomicity checker for multithreaded programs</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><surname>Flanagan</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><forename type="middle">N</forename><surname>Freund</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">POPL</title>
		<imprint>
			<date type="published" when="2004" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b15">
	<analytic>
		<title level="a" type="main">Fasttrack: efficient and precise dynamic race detection</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><surname>Flanagan</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><forename type="middle">N</forename><surname>Freund</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">PLDI</title>
		<imprint>
			<date type="published" when="2009" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b16">
	<analytic>
		<title level="a" type="main">2ndstrike: toward manifesting hidden concurrency typestate bugs</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Q</forename><surname>Gao</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">W</forename><surname>Zhang</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Z</forename><surname>Chen</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Zheng</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">F</forename><surname>Qin</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">ASPLOS</title>
		<imprint>
			<date type="published" when="2011" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b17">
	<monogr>
				<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Gilchrist</surname></persName>
		</author>
		<ptr target="http://compression.ca/pbzip2/" />
		<title level="m">Parallel BZIP2, Data Compression Software</title>
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b18">
	<monogr>
		<title level="m" type="main">Partial-Order Methods for the Verification of Concurrent Systems: An Approach to the State-Explosion Problem</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><surname>Godefroid</surname></persName>
		</author>
		<imprint>
			<date type="published" when="1996" />
			<publisher>Springer-Verlag New York, Inc</publisher>
			<pubPlace>Secaucus, NJ, USA</pubPlace>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b19">
	<analytic>
		<title level="a" type="main">Model checking for programming languages using verisoft</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><surname>Godefroid</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">POPL</title>
		<imprint>
			<date type="published" when="1997" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b20">
	<analytic>
		<title level="a" type="main">Dart: directed automated random testing</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><surname>Godefroid</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">N</forename><surname>Klarlund</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">K</forename><surname>Sen</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">PLDI</title>
		<imprint>
			<date type="published" when="2005" />
			<biblScope unit="page" from="213" to="223" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b21">
	<monogr>
		<title level="m" type="main">Concurrency at microsoft an exploratory survey</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><surname>Godefroid</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">N</forename><surname>Nagappan</surname></persName>
		</author>
		<idno>MSR-TR-2008-75</idno>
		<imprint>
			<date type="published" when="2008-05" />
			<pubPlace>Microsoft Research</pubPlace>
		</imprint>
	</monogr>
<note type="report_type">Technical report</note>
</biblStruct>

<biblStruct xml:id="b22">
	<monogr>
		<title level="m" type="main">The SPIN Model Checker: Primer and Reference Manual</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">G</forename><forename type="middle">J</forename><surname>Holzmann</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2003" />
			<publisher>Addison-Wesley Professional</publisher>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b23">
	<analytic>
		<title level="a" type="main">Exploiting heap symmetries in explicit-state model checking of software</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Iosif</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">ASE &apos;01: Proceedings of the 16th IEEE international conference on Automated software engineering</title>
		<meeting><address><addrLine>Washington, DC, USA</addrLine></address></meeting>
		<imprint>
			<publisher>IEEE Computer Society</publisher>
			<date type="published" when="2001" />
			<biblScope unit="volume">254</biblScope>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b24">
	<analytic>
		<title level="a" type="main">Better verification through symmetry</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><forename type="middle">N</forename><surname>Ip</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><forename type="middle">L</forename><surname>Dill</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Form. Methods Syst. Des</title>
		<imprint>
			<biblScope unit="volume">9</biblScope>
			<biblScope unit="issue">1-2</biblScope>
			<biblScope unit="page" from="41" to="75" />
			<date type="published" when="1996" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b25">
	<analytic>
		<title level="a" type="main">Change-aware preemption prioritization</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">V</forename><surname>Jagannath</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Q</forename><surname>Luo</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Marinov</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 2011 International Symposium on Software Testing and Analysis, ISSTA &apos;11</title>
		<meeting>the 2011 International Symposium on Software Testing and Analysis, ISSTA &apos;11<address><addrLine>New York, NY, USA</addrLine></address></meeting>
		<imprint>
			<publisher>ACM</publisher>
			<date type="published" when="2011" />
			<biblScope unit="page" from="133" to="143" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b26">
	<analytic>
		<title level="a" type="main">Instrumentation and sampling strategies for Cooperative Concurrency Bug Isolation</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">G</forename><surname>Jin</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Thakur</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">B</forename><surname>Liblit</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Lu</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedingsof the 25th Annual ACM SIGPLAN Conference on Object-Oriented Programming, Systems, Languages, and Applications (OOPSLA 2010)</title>
		<meeting>of the 25th Annual ACM SIGPLAN Conference on Object-Oriented Programming, Systems, Languages, and Applications (OOPSLA 2010)</meeting>
		<imprint>
			<date type="published" when="2010" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b27">
	<analytic>
		<title level="a" type="main">A randomized dynamic program analysis technique for detecting real deadlocks</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><surname>Joshi</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C.-S</forename><surname>Park</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">K</forename><surname>Sen</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Naik</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">PLDI</title>
		<imprint>
			<date type="published" when="2009" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b28">
	<analytic>
		<title level="a" type="main">An automatic method of solving discrete programming problems</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><forename type="middle">H</forename><surname>Land</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><forename type="middle">G</forename><surname>Doig</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Econometrica</title>
		<imprint>
			<biblScope unit="volume">28</biblScope>
			<biblScope unit="issue">3</biblScope>
			<biblScope unit="page" from="497" to="520" />
			<date type="published" when="1960" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b29">
	<analytic>
		<title level="a" type="main">On-demand and semantic-free dynamic deadlock detection with speculative execution</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><surname>Li</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><surname>Ellis</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Lebeck</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Sorin</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">USENIX Annual Technical Conference</title>
		<imprint>
			<date type="published" when="2005" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b30">
	<analytic>
		<title level="a" type="main">Dthreads: efficient deterministic multithreading</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><surname>Liu</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><surname>Curtsinger</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">E</forename><forename type="middle">D</forename><surname>Berger</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">SOSP</title>
		<imprint>
			<date type="published" when="2011" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b31">
	<analytic>
		<title level="a" type="main">MUVI: Automatically inferring multi-variable access correlations and detecting related semantic and concurrency bugs</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Lu</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Park</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><surname>Hu</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">X</forename><surname>Ma</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">W</forename><surname>Jiang</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Z</forename><surname>Li</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><forename type="middle">A</forename><surname>Popa</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Y</forename><surname>Zhou</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">the 21st ACM Symposium on Operating Systems Principles (SOSP07)</title>
		<imprint>
			<date type="published" when="2007-10" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b32">
	<analytic>
		<title level="a" type="main">AVIO: detecting atomicity violations via access interleaving invariants</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Lu</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Tucek</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">F</forename><surname>Qin</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Y</forename><surname>Zhou</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">ASPLOS</title>
		<imprint>
			<date type="published" when="2006" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b33">
	<analytic>
		<title level="a" type="main">Finding concurrency bugs with contextaware communication graphs</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">B</forename><surname>Lucia</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">L</forename><surname>Ceze</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 42nd Annual IEEE/ACM International Symposium on Microarchitecture, MICRO 42</title>
		<meeting>the 42nd Annual IEEE/ACM International Symposium on Microarchitecture, MICRO 42<address><addrLine>New York, NY, USA</addrLine></address></meeting>
		<imprint>
			<publisher>ACM</publisher>
			<date type="published" when="2009" />
			<biblScope unit="page" from="553" to="563" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b34">
	<analytic>
		<title level="a" type="main">Finding concurrency bugs with contextaware communication graphs</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">B</forename><surname>Lucia</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">L</forename><surname>Ceze</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">MICRO</title>
		<imprint>
			<date type="published" when="2009" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b35">
	<analytic>
		<title level="a" type="main">Pin: building customized program analysis tools with dynamic instrumentation</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C.-K</forename><surname>Luk</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Cohn</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Muth</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">H</forename><surname>Patil</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Klauser</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">G</forename><surname>Lowney</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Wallace</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">V</forename><forename type="middle">J</forename><surname>Reddi</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">K</forename><surname>Hazelwood</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">PLDI</title>
		<imprint>
			<date type="published" when="2005" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b36">
	<analytic>
		<title level="a" type="main">Effective sampling for lightweight data-race detection</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Marino</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Musuvathi</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Narayanasamy</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">PLDI</title>
		<imprint>
			<date type="published" when="2009" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b37">
	<analytic>
		<title level="a" type="main">Literace: effective sampling for lightweight data-race detection</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Marino</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Musuvathi</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Narayanasamy</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 2009 ACM SIGPLAN conference on Programming language design and implementation, PLDI &apos;09</title>
		<meeting>the 2009 ACM SIGPLAN conference on Programming language design and implementation, PLDI &apos;09<address><addrLine>New York, NY, USA</addrLine></address></meeting>
		<imprint>
			<publisher>ACM</publisher>
			<date type="published" when="2009" />
			<biblScope unit="page" from="134" to="143" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b38">
	<analytic>
		<title level="a" type="main">Finding and reproducing heisenbugs in concurrent programs</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Musuvathi</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Qadeer</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><surname>Ball</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">G</forename><surname>Basler</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><forename type="middle">A</forename><surname>Nainar</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">I</forename><surname>Neamtiu</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">OSDI</title>
		<imprint>
			<date type="published" when="2008" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b39">
	<analytic>
		<title level="a" type="main">Valgrind: a framework for heavyweight dynamic binary instrumentation</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">N</forename><surname>Nethercote</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Seward</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">SIGPLAN Not</title>
		<imprint>
			<biblScope unit="volume">42</biblScope>
			<biblScope unit="issue">6</biblScope>
			<biblScope unit="page" from="89" to="100" />
			<date type="published" when="2007" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b40">
	<monogr>
		<title level="m" type="main">Improving the accuracy of data race detection</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><forename type="middle">H B</forename><surname>Netzer</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">B</forename><forename type="middle">P</forename><surname>Miller</surname></persName>
		</author>
		<editor>PPoPP</editor>
		<imprint>
			<date type="published" when="1991" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b41">
	<analytic>
		<title level="a" type="main">Kendo: efficient deterministic multithreading in software</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Olszewski</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Ansel</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><forename type="middle">P</forename><surname>Amarasinghe</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">ASPLOS</title>
		<imprint>
			<date type="published" when="2009" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b42">
	<analytic>
		<title level="a" type="main">Ctrigger: Exposing atomicity violation bugs from their finding places</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Park</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Lu</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Y</forename><surname>Zhou</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">The 14th International Conference on Architecture Support for Programming Languages and Operating Systems (ASPLOS09)</title>
		<imprint>
			<date type="published" when="2009-03" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b43">
	<analytic>
		<title level="a" type="main">Cord:cost-effective (and nearly overhead-free) order-reordering and data race detection</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Prvulovic</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">HPCA</title>
		<imprint>
			<date type="published" when="2006" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b44">
	<analytic>
		<title level="a" type="main">ReEnact: Using thread-level speculation mechanisms to debug data races in multithreaded codes</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Prvulovic</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Torrellas</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">ISCA</title>
		<imprint>
			<date type="published" when="2003" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b45">
	<analytic>
		<title level="a" type="main">Kiss: keep it simple and sequential</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Qadeer</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Wu</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">PLDI</title>
		<imprint>
			<date type="published" when="2004" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b46">
	<monogr>
				<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Russell</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><surname>Norvig</surname></persName>
		</author>
		<title level="m">Artificial Intelligence: A Modern Approach</title>
		<imprint>
			<publisher>Prentice Hall</publisher>
			<date type="published" when="2002" />
		</imprint>
	</monogr>
	<note>2nd Edition</note>
</biblStruct>

<biblStruct xml:id="b47">
	<analytic>
		<title level="a" type="main">Accurate and efficient filtering for the intel thread checker race detector</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><surname>Sack</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">B</forename><forename type="middle">E</forename><surname>Bliss</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Z</forename><surname>Ma</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><surname>Petersen</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Torrellas</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 1st workshop on Architectural and system support for improving software dependability, ASID &apos;06</title>
		<meeting>the 1st workshop on Architectural and system support for improving software dependability, ASID &apos;06<address><addrLine>New York, NY, USA</addrLine></address></meeting>
		<imprint>
			<publisher>ACM</publisher>
			<date type="published" when="2006" />
			<biblScope unit="page" from="34" to="41" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b48">
	<monogr>
		<title level="m" type="main">Eraser: A dynamic data race detector for multithreaded programs</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Savage</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Burrows</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">G</forename><surname>Nelson</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><surname>Sobalvarro</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><surname>Anderson</surname></persName>
		</author>
		<imprint>
			<date type="published" when="1997" />
			<publisher>ACM TOCS</publisher>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b49">
	<monogr>
		<title level="m" type="main">Software bug contributed to blackout</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Securityfocus</surname></persName>
		</author>
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b50">
	<analytic>
		<title level="a" type="main">Race directed random testing of concurrent programs</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">K</forename><surname>Sen</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">PLDI &apos;08: Proceedings of the</title>
		<meeting><address><addrLine>New York, NY, USA</addrLine></address></meeting>
		<imprint>
			<publisher>ACM</publisher>
			<date type="published" when="2008" />
			<biblScope unit="page" from="11" to="21" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b51">
	<analytic>
		<title level="a" type="main">Race directed random testing of concurrent programs</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">K</forename><surname>Sen</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">PLDI</title>
		<imprint>
			<date type="published" when="2008" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b52">
	<analytic>
		<title level="a" type="main">Automated systematic testing of open distributed programs</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">K</forename><surname>Sen</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">G</forename><surname>Agha</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">FSE</title>
		<imprint>
			<date type="published" when="2006" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b53">
	<analytic>
		<title level="a" type="main">Cute: a concolic unit testing engine for c</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">K</forename><surname>Sen</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Marinov</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">G</forename><surname>Agha</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">ESEC/SIGSOFT FSE</title>
		<imprint>
			<date type="published" when="2005" />
			<biblScope unit="page" from="263" to="272" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b54">
	<monogr>
		<title level="m" type="main">Threadsanitizer, a valgrind-based detector of data races</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">K</forename><surname>Serebryany</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><surname>Iskhodzhanov</surname></persName>
		</author>
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b55">
	<analytic>
		<title level="a" type="main">Do i use the wrong definition? defuse: Definitionuse invariants for detecting concurrency and sequential bugs</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Y</forename><surname>Shi</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Park</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Z</forename><surname>Yin</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Lu</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Y</forename><surname>Zhou</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">W</forename><surname>Chen</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">W</forename><surname>Zheng</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">OOPSLA</title>
		<imprint>
			<date type="published" when="2010" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b56">
	<analytic>
		<title level="a" type="main">Associating synchronization constraints with data in an object-oriented language</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Vaziri</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">F</forename><surname>Tip</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Dolby</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">POPL</title>
		<imprint>
			<date type="published" when="2006" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b57">
	<analytic>
		<title level="a" type="main">Model checking programs</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">W</forename><surname>Visser</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">K</forename><surname>Havelund</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">G</forename><surname>Brat</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Park</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">F</forename><surname>Lerda</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Automated Software Engineering Journal</title>
		<imprint>
			<biblScope unit="volume">10</biblScope>
			<biblScope unit="issue">2</biblScope>
			<date type="published" when="2003" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b58">
	<analytic>
		<title level="a" type="main">Paralog: enabling and accelerating online parallel monitoring of multithreaded applications</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">E</forename><surname>Vlachos</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><forename type="middle">L</forename><surname>Goodstein</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><forename type="middle">A</forename><surname>Kozuch</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Chen</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">B</forename><surname>Falsafi</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><forename type="middle">B</forename><surname>Gibbons</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><forename type="middle">C</forename><surname>Mowry</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">ASPLOS</title>
		<imprint>
			<date type="published" when="2010" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b59">
	<analytic>
		<title level="a" type="main">The SPLASH-2 programs: Characterization and methodological considerations</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><forename type="middle">C</forename><surname>Woo</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Ohara</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">E</forename><surname>Torrie</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><forename type="middle">P</forename><surname>Singh</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Gupta</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">ISCA</title>
		<imprint>
			<date type="published" when="1995" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b60">
	<analytic>
		<title level="a" type="main">A serializability violation detector for shared-memory server programs</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Xu</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Bodík</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><forename type="middle">D</forename><surname>Hill</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">PLDI</title>
		<imprint>
			<date type="published" when="2005" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b61">
	<analytic>
		<title level="a" type="main">A case for an interleaving constrained shared-memory multi-processor</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Yu</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Narayanasamy</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">ISCA</title>
		<imprint>
			<date type="published" when="2009" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b62">
	<analytic>
		<title level="a" type="main">Racetrack: Efficient detection of data race conditions via adaptive tracking</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Y</forename><surname>Yu</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><surname>Rodeheffer</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">W</forename><surname>Chen</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">SOSP</title>
		<imprint>
			<date type="published" when="2005" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b63">
	<analytic>
		<title level="a" type="main">ConSeq: Detecting concurrency bugs through sequential errors</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">W</forename><surname>Zhang</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Lim</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Olichandran</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Scherpelz</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">G</forename><surname>Jin</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Lu</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><surname>Reps</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">ASPLOS</title>
		<imprint>
			<date type="published" when="2011" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b64">
	<analytic>
		<title level="a" type="main">ConMem: Detecting severe concurrency bugs through an effect-oriented approach</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">W</forename><surname>Zhang</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><surname>Sun</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Lu</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">ASPLOS</title>
		<imprint>
			<date type="published" when="2010" />
		</imprint>
	</monogr>
</biblStruct>

				</listBibl>
			</div>
		</back>
	</text>
</TEI>
