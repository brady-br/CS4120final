<?xml version="1.0" encoding="UTF-8"?>
<TEI xmlns="http://www.tei-c.org/ns/1.0" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
xsi:schemaLocation="http://www.tei-c.org/ns/1.0 /Users/atharsefid/Desktop/grobid-0.5.3/grobid-home/schemas/xsd/Grobid.xsd"
 xmlns:xlink="http://www.w3.org/1999/xlink">
	<teiHeader xml:lang="en">
		<encodingDesc>
			<appInfo>
				<application version="0.5.3" ident="GROBID" when="2020-09-29T01:51+0000">
					<ref target="https://github.com/kermitt2/grobid">GROBID - A machine learning software for extracting information from scholarly documents</ref>
				</application>
			</appInfo>
		</encodingDesc>
		<fileDesc>
			<titleStmt>
				<title level="a" type="main">Counterexample-Guided Abstraction Refinement for PLCs</title>
			</titleStmt>
			<publicationStmt>
				<publisher/>
				<availability status="unknown"><licence/></availability>
			</publicationStmt>
			<sourceDesc>
				<biblStruct>
					<analytic>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Sebastian</forename><surname>Biallas</surname></persName>
							<affiliation key="aff0">
								<orgName type="laboratory">Embedded Software Laboratory</orgName>
								<orgName type="institution">RWTH Aachen University</orgName>
							</affiliation>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Jörg</forename><surname>Brauer</surname></persName>
							<affiliation key="aff0">
								<orgName type="laboratory">Embedded Software Laboratory</orgName>
								<orgName type="institution">RWTH Aachen University</orgName>
							</affiliation>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Stefan</forename><surname>Kowalewski</surname></persName>
							<affiliation key="aff0">
								<orgName type="laboratory">Embedded Software Laboratory</orgName>
								<orgName type="institution">RWTH Aachen University</orgName>
							</affiliation>
						</author>
						<title level="a" type="main">Counterexample-Guided Abstraction Refinement for PLCs</title>
					</analytic>
					<monogr>
						<imprint>
							<date/>
						</imprint>
					</monogr>
				</biblStruct>
			</sourceDesc>
		</fileDesc>
		<profileDesc>
			<abstract>
				<p>This paper presents a method for model checking programs for programmable logic controllers (PLCs) using the counterexample-guided abstraction refinement (CE-GAR) approach. The technique is tailored to this specific hardware platform by accounting for the cyclic scanning mode that is symptomatic to PLCs. In particular, the hardware model poses the need for on-the-fly abstraction refinement in order to guarantee a deterministic control flow. It also allows to treat refinement phases triggered by input and global variables differently, leading to a more effective implementation. The effectiveness of this approach is shown in a case study, which highlights the verification process for function blocks that implement a specification provided by the industrial consortium PLCopen.</p>
			</abstract>
		</profileDesc>
	</teiHeader>
	<text xml:lang="en">
		<body>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="1">Introduction</head><p>Programmable logic controllers (PLCs) are often used to control safety-critical systems, for which formal verification is desirable, if not recommended <ref type="bibr" target="#b16">[17]</ref>. Model checking <ref type="bibr" target="#b8">[9]</ref> is one particular technique to prove correctness of software written for PLCs. The execution of programs on PLCs follows the so-called cyclic scanning mode, which consists of sensing inputs, processing data, and writing outputs. Each of these steps is executed atomically. A model checker then has to simulate the execution cycle for all possible combinations of input values. Since outputs become visible only at the end of a cycle, internal states within a cycle are not relevant to verification of input-output relations <ref type="bibr" target="#b29">[30]</ref>.</p><p>Programs for PLCs typically depend on several inputs, hence, verification using explicit-state model checking is susceptible to state explosion, since state spaces grow exponentially in the number of inputs. Even small programs can easily lead to state spaces consisting of hundreds of millions of states, which is a major obstacle for the applicability of model checking to real-world programs.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="1.1">Approach</head><p>To remedy this problem, we propose to use counterexample-guided abstraction refinement (CE-GAR) for ACTL model checking, a technique that has successfully been integrated into several model checkers before <ref type="bibr" target="#b7">[8]</ref>. The key idea in CEGAR is to start the verification process on a coarse abstraction of the program semantics. If the specification is satisfied on the abstract semantics, it is also valid in the concrete model. In case the specification is violated, this may be due to abstraction, which manifests itself in a spurious counterexample. In this case, the abstraction is refined in order to obtain a stronger semantics which disallows the behavior that led to the spurious counterexample trace.</p><p>Traditional CEGAR techniques, however, allow for nondeterministic control flow, which is not possible for PLCs due to the atomic simulation of a cycle during state space generation. Thus, CEGAR for PLCs requires techniques different from traditional CEGAR approaches as implemented in tools such as SLAM <ref type="bibr" target="#b0">[1]</ref> or BLAST <ref type="bibr" target="#b14">[15]</ref>.</p><p>Whereas the refinement step is usually triggered through a spurious counterexample, our method refines the abstraction on-the-fly if atomic propositions cannot be assigned a truth-value during the simulation of a cycle. Further, refinement is triggered to guarantee a deterministic control flow. Based on the scopes of variables, the approach provides two different refinement methods: In case that input variables require refinement, only the currently processed cycle needs to be reanalyzed using the refined semantics. States that evolved from other input combinations are not affected by this refinement step. This is not so for variables that endure cycles, called global variables in this paper <ref type="bibr" target="#b0">1</ref> . Thus, if global variables trigger the refinement process, the entire state space of the program has to be rebuilt, based on globally refined constraints, so-called lemmas.  <ref type="figure">Figure 1</ref>: Example program</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="1.2">Contributions</head><p>Overall, we make the following contributions:</p><p>1. We describe a symbolic encoding for arithmetic of programs written in Instruction List (IL) that is used to guide the refinement process. Constraint solving over intervals and bit-vectors is used during the refinement itself.</p><p>2. We detail a CEGAR-algorithm that is optimized for refinements based on input and global variables, and discuss its implementation in the [MC]SQUARE model checker <ref type="bibr" target="#b28">[29,</ref><ref type="bibr" target="#b29">30]</ref>.</p><p>3. We show the effectiveness of our method by verifying two function blocks proposed by the industrial consortium PLCopen <ref type="bibr" target="#b30">[31]</ref>. Using CEGAR, each of these blocks could be verified on a standard desktop computer, requiring less than 2 minutes per block.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2">Worked Example</head><p>We motivate our approach with the example program shown in <ref type="figure">Fig. 1</ref>, which is used throughout the paper. The program has two input variables, a global variable, and an output variable, all of type BYTE (range 0-255). In each cycle, the following operation is performed:</p><p>The input variable inputt is loaded into the accumulator, 50 is added and the result is compared to 100 (lines 4-6). If the result is not greater than 100, the input variable input1 is copied into the global variable varr (lines 8-9). Otherwise, the global variable varr is copied into the output variable outputt (lines 11-12).</p><p>To verify this program using na¨ıvena¨ıve methods, a model checker would start by enumerating all possible inputs, creating all successor states. For all successor states this step would be repeated to obtain a state space which can be examined by a model checker. In the example, this approach would create 2 16 = 65,536 successors for each state, resulting in 2 32 = 4,294,967,296 states in total. This is the well-known state explosion, which makes this procedure infeasible for larger programs. To make formal verification possible, abstract states have to be introduced, which represent a (possibly huge) number of concrete states. In this program, for example, it is only relevant whether inputt lies in the interval <ref type="bibr">[0,</ref><ref type="bibr">50]</ref> or in <ref type="bibr">[51,</ref><ref type="bibr">255]</ref>. If we determine that the value lies in either interval, we can decide the conditional jump in line 14 without knowing the concrete value of the accumulator.</p><p>To verify programs using this method, the crucial step is to find abstract values such that the behavior of the program is not altered or only altered where it is irrelevant for the validity of the specification. To find abstract values matching these criteria, our approach starts with the most general abstract states representing all possible values. These are then successively refined in order to retain program behavior and the validity of the formula.</p><p>In the example, we would assume the abstract value <ref type="bibr">[0,</ref><ref type="bibr">255]</ref> for both inputs and then start simulating the cycle. After loading inputt and adding 50, the accumulator holds <ref type="bibr">[50,</ref><ref type="bibr">305]</ref>. Comparing the latter interval to 100 results in {true, false}, because the comparison could yield either true or false depending on the actual concretization. The next operation is a conditional jump, for which the accumulator has to hold a concrete value, since simulating a PLC program simultaneously in two different places is not possible. Thus, the conditional jump poses a restriction on the abstract value in the accumulator.</p><p>We call such a restriction a constraint. Our key idea is to use this constraint on the abstract value in the accumulator in line 14 to obtain a constraint on the input variables that caused the conditional jump to be ambiguous. The accumulator contains {true, false}, which is the result of the comparison of <ref type="bibr">[50,</ref><ref type="bibr">305]</ref> with 100. It is therefore sufficient to constrain <ref type="bibr">[50,</ref><ref type="bibr">305]</ref> to be either greater than 100 or less-equal than 100. The interval <ref type="bibr">[50,</ref><ref type="bibr">305]</ref> was the result of the addition of <ref type="bibr">[0,</ref><ref type="bibr">255]</ref> to 50, so we can constrain <ref type="bibr">[0,</ref><ref type="bibr">255]</ref> to be either greater than 50 or less-equal than 50. The interval <ref type="bibr">[0,</ref><ref type="bibr">255]</ref> comes straight from the variable inputt, so we can now derive that inputt has to be split into the intervals <ref type="bibr">[0,</ref><ref type="bibr">50]</ref> and <ref type="bibr">[51,</ref><ref type="bibr">255]</ref>. This constraint resolving process will later be performed using symbolic information.</p><p>Here, the constraint on the accumulator for the conditional jump could be resolved to a constraint on an input variable. By refining the input variable, the problematic values are avoided in subsequent executions after restarting the cycle. Since the values of input variables are assigned independently of previous states, the refinement does not affect already created states. Thus, all constraints on input variables can be resolved by a local restart. The situation is different when it comes to constraints on global variables such as varr. Here, splitting the abstract value might add new program behavior because it was calculated in a previous state. How this is resolved is detailed in Sect. 5.2.</p><p>In the next section we briefly introduce the notion of abstract simulation. After that, the constraint solver is detailed which is used for the constraint transformation process. We then formally present the refinement process for input and global variables.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3">Abstract Domains</head><p>For abstract interpretation of PLC programs we implemented transfer functions using the interval domain <ref type="bibr" target="#b9">[10]</ref> and the bitwise domain <ref type="bibr" target="#b25">[26]</ref>. The interval domain combines a set of consecutive integers by storing its upper and lower bounds. While the interval domain is very exact in expressing integer arithmetic as arithmetic on the interval bounds, bit-level operations usually yield inexact intervals containing all values with modified bits. The bitwise domain, on the other hand, represents values as bit-vectors where each bit can either be 0, 1, or unknown. Here, bitlevel operations are expressed with maximum accuracy using ternary logic, but arithmetic operations usually result in bits becoming unknown. The implementation of transfer functions for this domain has been well-studied in the past <ref type="bibr" target="#b27">[28,</ref><ref type="bibr" target="#b5">6]</ref>.</p><p>Both abstract domains are combined using the reduced product <ref type="bibr" target="#b9">[10]</ref> in a way similar to <ref type="bibr" target="#b27">[28,</ref><ref type="bibr" target="#b5">6]</ref>. This construction ensures taking the more exact description in either of both domains, which is especially important when evaluating truth values of atomic propositions. The combination of both domains allows for precise abstract interpretation of PLC programs as it reflects the most important integer arithmetic and bit-level operations.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4">Constraint Solver</head><p>We will first introduce constraints on abstract values, which are then extended to constraints on symbolic expressions. The constraint solver will be used to transform constraints on symbolic expressions into (somewhat equivalent) constraints on variables containing abstract values. In the next section, the constraint solver will be used for our CEGAR approach to select variables for refinement.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.1">Constraints on Abstract Values</head><p>A constraint is a condition f on an abstract value v, denoted cs f (v ). Such a constraint is fulfilled if the set of concrete values that v represents is consistent under the condition defined by f . We introduce the following constraints:</p><p>• The single value constraint cs sing (v ) is consistent if v represents only a single concrete value.</p><p>• Comparison constraints cs c (v) for some relational operation ∈ {=, =, &lt;, ≤, &gt;, ≥} and a constant c are consistent if for all x, y ∈ v the condition x c ⇐⇒ y c holds.</p><p>• The bit mask constraint</p><formula xml:id="formula_0">cs &amp; c (v) is consistent if for all x, y ∈ v: x &amp; c = y &amp; c,</formula><p>where &amp; is the bitwise AND operation.</p><p>A constraint is a restriction on how many concrete values an abstract value can represent at most without getting inconsistent. Concrete values are trivially consistent under all constraints (and, vice versa, all constraints can be made consistent by splitting an abstract value into concrete values).</p><p>Given a constraint and a variable, we can easily assign abstract values to the variable fulfilling the constraint. Usually, we want these abstract values to cover as many concrete values as possible. This is done using a splitter. For a variable v with domain d and a constraint cs f (v), the splitter enumerates abstract values a 1 , . . . , a n such that</p><formula xml:id="formula_1">˙ n i=1 a i = d, a i is consistent under cs f (d) for 1 ≤ i ≤ n,</formula><p>and n is minimal. To illustrate, consider a variable v of type BYTE and the constraint cs &gt;100 (v). In this case, the splitter would generate the consistent abstract values <ref type="bibr">[0,</ref><ref type="bibr">100]</ref> and <ref type="bibr">[101,</ref><ref type="bibr">255]</ref>.</p><p>Once we have derived a constraint on a variable, the variable can easily (and efficiently) made consistent by a splitter. The interesting part here is how constraints on arbitrary expressions can be made consistent. In our example, this step was the transformation of the single value constraint to the compare constraint on the variable inputt. To formalize this process of resolving constraints, we extend the constraints to expressions of abstract values, written cs f (expr ).</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.2">Constraints on Expressions</head><p>To formalize constraints on expressions, we introduce a formal model for representing IL programs. During simulation, the program is written into a symbolic form which explicitly reflects all operations on the accumulator and the variables. For the symbolic representation we use a static single assignment (SSA) form <ref type="bibr" target="#b10">[11]</ref>. Each left-hand side of an assignment is either the accumulator or a variable. Each right-hand side is either (1) a concrete value (i. e., a constant literal or a variable containing a concrete value), (2) a variable containing an abstract value, (3) a unary operation (complement, negation) on an operand, (4) a data type cast u n () or s n () of an operand, where n is the number bits and u (s) signals zero (sign) extension, or (5) an arithmetic or logical operation on two operands. acc (2) := acc (1) &gt; 100 {true, false} JMPC label guard(cs sing (acc <ref type="bibr" target="#b1">(2)</ref> )) ..</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Figure 2: Program fragment in SSA form</head><p>In case an expression results in a concrete value during simulation, we discard the symbolic information and use the concrete value as a right-hand side. This prunes unnecessary information and ensures that all non-constant expressions are composed of at least one variable that can be refined, which guarantees convergence of our refinement loop. <ref type="figure">Figure 2</ref> shows the symbolic and abstract values of the accumulator for the first instructions of the example program (cf. <ref type="figure">Fig. 1</ref>). The transformation of the load, add, and compare instructions into the SSA form is straightforward. Since all calculations with the accumulator are performed over (almost) unbounded integers, we defer all type casting and overflow handling to the store instructions. To decide the conditional jump, we require a concrete value in the accumulator. Therefore, guard nodes are added, which contain the appropriate constraints. If these constraints are inconsistent, the constraint solver described in the next section is used to find refinements of variables.</p><p>Note that the rewriting is done during the simulation, and hence, all loops are automatically unrolled. Since PLCs have real-time behavior, all cycles have to terminate after a short time, which guarantees bounded size of these symbolic expressions.</p><p>The variable constraints from the last section are now extended to expression constraints on SSA expressions. In the next section, we examine how expression constraints such as cs sing (acc <ref type="bibr" target="#b1">(2)</ref> ) is transformed.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.3">Transforming Constraints</head><p>If the validity of an expression constraint cs f2 (e 2 ) implies the validity of cs f1 (e 1 ), we write cs f1 (e 1 ) cs f2 (e 2 ). To illustrate this, consider the single-value constraint cs sing (acc <ref type="bibr" target="#b1">(2)</ref> ). From this constraint, the solver can derive a constraint on inputt with the following steps:</p><formula xml:id="formula_2">cs sing (acc (2) ) cs sing (acc (1) &gt; 100)<label>(1)</label></formula><formula xml:id="formula_3">cs &gt;100 (acc (1) )<label>(2)</label></formula><p>cs &gt;100 (acc (0) + 50)</p><formula xml:id="formula_4">cs &gt;100−50 (acc (0) )<label>(3)</label></formula><formula xml:id="formula_5">cs &gt;50 (input 0 (0) )<label>(4)</label></formula><p>In steps (1), <ref type="formula" target="#formula_4">(3)</ref> and <ref type="formula" target="#formula_6">(5)</ref>, the left-hand side of an SSA expression is replaced by its corresponding right-hand side definition.</p><p>Step (2) transforms the single-value constraint into an equivalent compare constraint. In step (4), a compare constraint is translated to resolve the addition with the constant. This result allows to fulfill the single-value constraint cs sing (acc <ref type="bibr" target="#b1">(2)</ref> ) by refining inputt into proper abstract values.</p><p>Formally, the steps of the constraint solver are defined inductively on the SSA expressions. In the following, f is an arbitrary constraint condition, e 1 and e 2 are (nonconstant) operands, c is a constant, is a unary operation and is a binary operation. Relational operations are denoted by the symbol ∈ {=, =, &lt;, ≤, &gt;, ≥}.</p><p>For an SSA expression l := e 1 and a constraint cs f (l), we can always apply the transformation cs f (l) cs f (e 1 ). A constraint on a variable terminates the resolving process, whereas constraints on constants do not occur, since constants are trivially consistent under all constraints. The remaining possibilities for SSA right-hand sides are unary operations, binary operations and data type casts. For a unary operation the transformation is defined as follows:</p><p>• A complement operation is absorbed by a bit-mask constraint cs &amp; m (¬e 1 ) cs &amp; m (e 1 ).</p><p>• A compare constraint on a negation cs c (−e 1 ) is resolved by cs c (−e 1 ) cs −c (e 1 ), where (=, =, &lt;, ≤, &gt;, ≥) = (=, =, ≥, &gt;, ≤, &lt;).</p><p>• All other constraints on unary operations are resolved as single value constraints cs f (e 1 ) cs sing (e 1 ).</p><p>For a binary operation the transformation is defined as follows:</p><p>• A constraint on two non-constant expressions is resolved as a single value constraint on one expression cs f (e 1 e 2 ) cs sing (e 1 ). This other expression is then resolved in the next refinement step.</p><p>• For all compare operations we resolve cs sing (e 1 c) cs c (e 1 ).</p><p>• Addition and subtraction in compare constraints are resolved by the translations cs c1 (e 1 + c 2 )</p><formula xml:id="formula_7">cs (c1−c2) (e 1 ), cs c1 (e 1 − c 2 ) cs (c1+c2) (e 1 ),</formula><p>and cs c1 (c 2 − e 1 ) cs (c1−c2) (−e 1 ).</p><p>• Bitwise operation are resolved using the bit mask constraint not presented here.</p><p>• All other constraints on binary operations are resolved as single-value constraints on cs f (e 1 c) cs sing (e 1 ).</p><p>For data type casts the transformation is defined as constraints on the data type bounds. This is not presented in this paper.</p><p>Since each instruction adds at most one SSA expression, the constraint solver can resolve each constraint in at most O(n) steps, where n is the number of instructions executed in the cycle. This linear complexity is important for our algorithms, because the constraint solver is called for all necessary refinements, as detailed in the next section.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5">Refinements</head><p>First, we introduce the formal model that we use to verify PLC programs. A state consists of input valuations, output valuations, and global variables of the PLC program at the end of a cycle. In particular, a state specifies the relation between inputs and outputs (and additionally, global variables). While the symbolic SSA representation is used during the simulation of the PLC cycle, we only store the abstract values when saving the actual PLCs states. This means we lose the symbolic descriptions of dependencies between variables, but gain a compact representation of the states. Storing only abstract values also prevents unbounded growth of the symbolic representation, and thus, guarantees convergence of the verification process.</p><p>For each state we determine its successors states. The successors of a state are the states reachable by assuming new input values and simulating one cycle. Starting from the initial state of the PLC we obtain a Kripke structure by generating all reachable states <ref type="bibr" target="#b29">[30]</ref>. Note that intermediate states during simulation of a cycle are not stored, and thus, do not directly affect the verification results. This allows the program to temporarily take forbidden states that do not influence the outside world. We exploit this unique behavior to develop two different refinement methods.</p><p>As we have seen before, the enumeration of all input values easily yields an explosion of the number of states. To tackle this problem, a state consists of a set of abstract values representing a set of concrete values in variables. This way, macro states are created which combine a number of concrete states and so reduce the overall size of the state space.</p><p>Our approach for finding this abstraction differs from existing techniques in that it is not solely based on analyzing counterexamples. We especially do not want to introduce nondeterministic control flow while simulating a cycle, which is necessary to prevent the visibility of intermediate states. Instead we track abstract values to the source that generated their value, which is at least one nondeterministic variable -usually an input variable. Splitting the contents of such a variables into smaller abstract values creates separate states, and thus, eliminates the problematic cases.</p><p>For the refinement, our method combines two different approaches, depending on whether a local or a global variable has to be refined. Both kinds of refinement are initiated by inconsistent constraints. During simulation, the following situations might occur that require the refinement of an abstract value, and thus, introduce new constraints:</p><p>• As we have seen, the control flow has to be deterministic while simulating a cycle. Hence, all conditional instructions (JMPC, CALC, RETC) demand a concrete value in the accumulator.</p><p>• Some hardware function blocks (such as timers) require concrete input values for their operation.</p><p>• After simulating a cycle, the truth valuations of atomic propositions are determined. The values of the atomic propositions have to be consistent, so they are guarded with appropriate constraints.</p><p>• Converting abstract integers into non-integer types (such as floats, strings, etc.) is guarded by single value constraints.</p><p>In the first step we will explain how we implemented the refinement of local variables.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5.1">Refinement of Local Variables</head><p>Throughout this section, we will assume that all constraints can be fulfilled by refining local variables only (i. e., the refinement algorithm does not have to refine values stored in predecessor states). This is achieved by allowing only concrete values in global variables at the start and the end of each cycle, which is equivalent to adding guards with a single-value constraint to all global variables at the end of a cycle.</p><p>Since we do not allow abstract values in the state space in this first step, we do not add additional behavior to the program, and hence, will not find spurious counterexamples. We will see that refinement of local variables is a powerful abstraction of the state space due to the huge number of hidden or combined input values. Our refinement algorithm implements the classical the refinement loop initially described by <ref type="bibr">Kurshan [20]</ref>, which is embedded into the generation of successor states. It performs the following steps:</p><p>1. We store the splitters used for the refinements on a stack. In the first step, a splitter pushed onto the stack that assigns the most broad abstract value (bottom element) of the domain to all input variables.</p><p>2. The splitter on top of the stack is used to assign abstract values to the input variables.</p><p>3. A cycle of the PLC is simulated. If one of the above mentioned situations occurs, where the simulation cannot proceed, the constraint solver is used to find a new splitter, which is then put on the stack and step 2 is repeated.</p><p>4. The atomic propositions are evaluated. If a truth value cannot be determined, again the constraint solver is used to find a new splitter, which is put on the stack and step 2 is repeated.</p><p>5. The newly created successor state is stored in the state space.</p><p>6. The splitter on top of the stack is advanced to its next refinement. If the splitter has already assigned all values of the domain, it is removed from the stack. If the stack is empty all successors are created.</p><p>Otherwise repeat with step 2.</p><p>Using a stack for the splitters ensures that all new refinements are based on and only applied to current input values. This means that the efficiency of this approach is highly dependent on the order in which variables are refined. Since variables are typically referenced in the order of their importance for the control flow in real-world programs, the refinements picked by of our approach are usually quite good. In the next section this method is extended to global variables.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5.2">Refinement of Global Variables</head><p>We will now relax the restriction of refining input variables only and allow storing of abstract values in global variables. Since global variables might contain abstract values calculated in previous states, refinement of global variables can create new behavior, i. e., transitions which are not possible in the concrete model. Take, e.g., two variables which contain abstract values, but their concrete value is always identical in the concrete program semantics. In the example program, this is the case for the variables varr and outputpp if inputt is greater than 50.</p><p>Refining such variables in the abstract model might result in different values, because the symbolic information between the dependency of these variables is lost. But, if an ACTL formula is valid in such an abstract model with added behavior, it is also valid in the concrete model <ref type="bibr" target="#b7">[8]</ref>. Otherwise, the formula is violated and we obtain a counterexample. If we had to refine global variables, new behavior was added to the abstract model and counterexamples are not necessarily possible in the concrete model. Such counterexamples are called spurious. To verify that a counterexample is not spurious, we rebuild the state space based on a refined semantics.</p><p>This approach is depicted in <ref type="figure" target="#fig_2">Fig. 3</ref>. The first row shows the first iteration of the state space for verifying the formula AG outputt &lt; 25 (irrelevant states are omitted). In the last state, the truth value of outputt &lt; 50 is not consistent because outputt lies in the interval <ref type="bibr">[0,</ref><ref type="bibr">255]</ref>, so the state has to be refined accordingly. This is performed using the constraint solver, which finds the constraint cs &gt;25 (varr), because if inputt lies in the interval <ref type="bibr">[51,</ref><ref type="bibr">255]</ref>, varr is copied into outputt. Since refining the global variable varr possibly creates new behavior, we save the constraint cs &gt;25 (varr) as a so-called lemma for further refinement.</p><p>The state space, where the state was split to make the atomic propositions consistent, is shown in the second row. Since outputt &gt; 25 in the lower state, we have a possible counterexample trace here. However, due to the over-approximation, we have to verify that this counterexample is also valid under concrete semantics.</p><p>To achieve this, we rebuild the state space while obeying all lemmas we found, thus avoiding the addition of new behavior to the state space. Therefore, new guards for all variables are added to the end of the program according to their lemmas. The idea is that at the end of the simulation of each cycle -before the state is finally storedwe still have the symbolic information for global variables written in this cycle. Via this guards, the constraint solver either obtains a crucial refinement of an input variable, thus resolving the over-approximation in this state, or it obtains a new lemma, which might be needed in a further refinement/rebuild step.</p><p>The final result of the state space obeying cs &gt;25 (varr) is shown in the third row of <ref type="figure" target="#fig_2">Fig. 3</ref>. Here, all additional behavior was removed and we can deduce that the counterexample trace is a real counterexample for the formula AG outputt &lt; 25.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="6">Case Studies</head><p>We have implemented the techniques described in this paper in the model checker <ref type="bibr">[MC]</ref>SQUARE <ref type="bibr" target="#b28">[29,</ref><ref type="bibr" target="#b29">30]</ref>. To show the effectiveness of CEGAR when applied to the specific task of PLC verification, we checked several functional and non-functional requirements on a number of function blocks proposed by the PLCopen consortium <ref type="bibr" target="#b24">[25]</ref>. These implementations were kindly provided by Soliman and Frey <ref type="bibr" target="#b30">[31]</ref>.</p><p>This section highlights the results for two specific blocks that implement emergency stop (199 instructions) and guard locking (306 instructions), two highly safetycritical tasks. These functions blocks were implemented as state machines according to the PLCopen specification using Boolean variables S i to indicate their current states.  In the implementations, states could be instable or skipped in certain transitions. A typical formula to verify correct transitions from state S 1 is AG (S 1 =⇒ AX (S 1 | S 2 )).</p><p>Our case study, however, focuses on the effectiveness on generating the state space for different function blocks and not on the actual verification process.</p><p>Verifying emergency stop, a function block that depends on five Boolean input variables, is easily possibly with [MC]SQUARE without CEGAR. However, even for this program CEGAR proves to be effective, reducing the number of stored states from 134 to 44. Enabling global refinement does not affect the size of the state space at all. For the guard locking implementation, the number of created states was reduced from 199,724,033 to 3,155,467 using local refinement. Further, the runtime was reduced from approximately 100 minutes to 326 seconds. By also enabling global refinement, the runtime was further reduced to 99 seconds, eventually storing only 75,203 states, which highlights the effectiveness of this technique. Using CEGAR, the verification process can be run on a standard desktop computer, which was not possible for larger programs due to the memory requirements.</p><p>We have observed comparable reductions for other function block implementations. Space constraints, however, prevent us from presenting these results here.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="7">Related Work</head><p>Our approach is related to techniques from three fields of research, namely abstraction and refinement in model checking, the verification of software for PLCs, and abstract interpretation. These relations are discussed in the remainder of this section.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Abstract Interpretation</head><p>The methodologies used to represent an abstract program semantics date back until the early days of abstract interpretation <ref type="bibr" target="#b9">[10]</ref>. In particular, intervals were the first numerical abstract domain used in program analysis <ref type="bibr" target="#b9">[10]</ref>. However, it took several decades until it was observed that combining bit-and word-length intervals using the reduced product operator allows to accurately reason about bit-manipulating programs <ref type="bibr" target="#b5">[6,</ref><ref type="bibr" target="#b26">27,</ref><ref type="bibr" target="#b27">28]</ref>. In contrast to our work, these approaches do not apply any refinement to abstract descriptions. </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Program</head></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Abstraction and Refinement</head><p>The idea of refining abstract representions of states in a loop based on encountered over-approximations was first formulated by Kurshan <ref type="bibr" target="#b19">[20]</ref>. His observation led to the development of techniques for automated predicate abstraction <ref type="bibr" target="#b12">[13]</ref> and the well-known CEGAR-loop <ref type="bibr" target="#b7">[8]</ref>. These techniques have found wide application in model checking in different contexts. For instance, Ball et al. <ref type="bibr" target="#b0">[1]</ref> apply predicate abstraction and automated abstraction refinement to C code translated into Boolean programs <ref type="bibr" target="#b1">[2]</ref>. In contrast, Henzinger et al. <ref type="bibr" target="#b14">[15]</ref> propose a lazy abstraction scheme that refines only parts of the predicates in the program. Our refinement step for input variables can be seen as a simplified adaptation of their method. Furthermore, the abstraction-refinement scheme has found its way into all areas of model checking, also including bounded model checking <ref type="bibr" target="#b3">[4]</ref> using interpolants <ref type="bibr" target="#b11">[12]</ref>. Compared to our method, the main difference of existing techniques is that they operate on a general purpose abstraction of the program, whereas our method exploits knowledge about the underlying hardware platform.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>PLC Verification</head><p>Several attempts have been made in the past to apply model checking to software for PLCs. The first approach goes back to Moon <ref type="bibr" target="#b22">[23]</ref>, who translated programs given as Ladder Diagrams into the input language of SMV. This approach, however, only supports are very limited subset of Ladder Diagrams (namely, Boolean functions) and does not apply any abstraction, which leads to state explosion for small problems already. Later, Canet et al. <ref type="bibr" target="#b6">[7]</ref> verified programs written in IL using NUSMV. The drawback of their method is that they only support a subset of IL and do not account for the cyclic scanning mode. A different approach was followed by Mertke and Frey <ref type="bibr" target="#b20">[21]</ref>, who translated IL programs into Petri nets, also not supporting the complete IL instruction set.</p><p>Huuck <ref type="bibr" target="#b15">[16]</ref> used CADENCE SMV to verify PLC programs written as Sequential Function Charts (SFCs). Since parts of the defined SFC constructs have an ambiguous semantics, they only support a well-defined subset of the input language, which is described in <ref type="bibr" target="#b2">[3]</ref>. In 2007, Pavlovic et al. <ref type="bibr" target="#b23">[24]</ref> described an approach to translate PLC programs in Statement List -a vendor-specific language similar to IL -into the input language of NUSMV. Their approach, however, is not applicable to programs with several inputs without manual intervention. On the other hand, Süflow and Drechsler <ref type="bibr" target="#b31">[32]</ref> applied equivalence checking using SAT to the task of PLC verification. <ref type="bibr">Schlich et al. [30]</ref> introduced the concept of abstract simulation for PLC verification. This approach, which to a certain degree forms the basis for our work, performs abstraction without refinement, and thus, often leads to spurious warnings. None of the existing techniques, however, embodies an abstraction-refinement loop.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="8">Discussion &amp; Future Work</head><p>This paper advocates applying a CEGAR approach to model checking of software for PLCs, which integrates the peculiarities of the cyclic scanning mode w. r. t. global and input variables. Whereas the execution of a cycle heavily depends on combinations of inputs, which -in case of concrete instantiations -easily leads to state explosion, a suitable abstraction is automatically derived and refined in our approach. A unique feature of our method is the triggering of refinements in case that nondeterministic control flow is encountered, which can then trigger a global refinement process. This step is required due to the use of a hardware simulator for state space building, in contrast to verification efforts based on, say, Boolean programs <ref type="bibr" target="#b1">[2]</ref>. Our CEGAR method proves to be highly effective as it significantly reduces runtimes required for model checking, often by orders of magnitudes.</p><p>Clearly, this work calls for further investigations of constraint-solving approaches, and the solver currently in use could be replaced with a back-end based on SAT or SMT <ref type="bibr" target="#b18">[19]</ref>. Another possible direction for future research is studying an optimized global refined process, where the state space is not completely rebuilt. Here, existing work on lazy abstraction <ref type="bibr" target="#b14">[15]</ref> could serve as a starting point. Further, it is obvious that the domain construction for bitand word-level intervals is a direct consequence of the early works of Cousot and Cousot <ref type="bibr" target="#b9">[10]</ref>. We believe that the effectiveness of this technique can be further improved by integrating (weakly) relational numeric domains into the refinement process. Octagons <ref type="bibr" target="#b21">[22]</ref> or (bitwise) linear congruences <ref type="bibr" target="#b4">[5,</ref><ref type="bibr" target="#b13">14,</ref><ref type="bibr" target="#b17">18]</ref> are possible choices for suitable relational domains. Such a combination of well-studied domains and the refinement process, however, needs to be examined in detail.</p></div><figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_2"><head>Figure 3 :</head><label>3</label><figDesc>Figure 3: Refinement of state space for verifying AG outputt &lt; 25</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_1" validated="false"><head># Inputs Options used States stored States created Size [MB] Time [s]</head><label>#</label><figDesc></figDesc><table>EmergencyStop 
5 

None 
134 
4,289 
16 
0.56 
Only Inputs 
44 
307 
15 
0.20 
All Variables 
44 
324 
15 
0.25 

GuardLocking 
8 

None 
780,172 
199,724,033 
1,704 
5,633 
Only Inputs 
132,242 
3,155,467 
351 
326 
All Variables 
75,203 
1,098,220 
163 
99 

Figure 4: Results for verifying PLCopen function blocks 

</table></figure>

			<note place="foot" n="1"> Note that the term global does not refer to the scope of a variable in our description, but to its lifetime.</note>
		</body>
		<back>

			<div type="acknowledgement">
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Acknowledgment</head><p>The work of Sebastian Biallas was supported by the DFG. The work of Jörg Brauer and Stefan Kowalewski was, in part, supported by the DFG Cluster of Excellence on Ultra-high Speed Information and Communication (UMIC), German Research Foundation grant DFG EXC 89. We thank Bastian Schlich for sharing his thoughts on the ideas described in this paper, and the anonymous referees for their helpful comments.</p></div>
			</div>

			<div type="references">

				<listBibl>

<biblStruct xml:id="b0">
	<analytic>
		<title level="a" type="main">Refining approximations in software predicate abstraction</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><surname>Ball</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">B</forename><surname>Cook</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Das</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><forename type="middle">K</forename><surname>And Rajamani</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">TACAS</title>
		<imprint>
			<publisher>Springer</publisher>
			<date type="published" when="2004" />
			<biblScope unit="volume">2988</biblScope>
			<biblScope unit="page" from="388" to="403" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b1">
	<analytic>
		<title level="a" type="main">Bebop: A symbolic model checker for boolean programs</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><surname>Ball</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><forename type="middle">K</forename><surname>And Rajamani</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">SPIN (2000)</title>
		<imprint>
			<publisher>Springer</publisher>
			<biblScope unit="volume">1885</biblScope>
			<biblScope unit="page" from="113" to="130" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b2">
	<analytic>
		<title level="a" type="main">A parameterized semantics for sequential function charts</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Bauer</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">N</forename><surname>And</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Huuck</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Semantic Foundations Engineering Design Languages</title>
		<imprint>
			<date type="published" when="2002" />
			<biblScope unit="page" from="69" to="83" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b3">
	<analytic>
		<title level="a" type="main">Bounded model checking</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Biere</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Cimatti</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Clarke</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">E</forename><forename type="middle">M</forename><surname>Strichman</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">O</forename><surname>And</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Zhu</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Y</forename></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Advances in Computers</title>
		<imprint>
			<biblScope unit="volume">58</biblScope>
			<biblScope unit="page" from="118" to="149" />
			<date type="published" when="2003" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b4">
	<analytic>
		<title level="a" type="main">Range analysis of microcontroller code using bit-level congruences</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Brauer</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>King</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>And</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Kowalewski</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">FMICS (2010)</title>
		<imprint>
			<publisher>Springer</publisher>
			<biblScope unit="volume">6371</biblScope>
			<biblScope unit="page" from="82" to="98" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b5">
	<analytic>
		<title level="a" type="main">Interval analysis of microcontroller code using abstract interpretation of hardware and software</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Brauer</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Noll</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><surname>And</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Schlich</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">B</forename></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">SCOPES 2010</title>
		<imprint>
			<publisher>ACM</publisher>
			<date type="published" when="2010" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b6">
	<analytic>
		<title level="a" type="main">Towards the automatic verification of PLC programs written in Instruction List</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Canet</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">G</forename><surname>Couffin</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Lesage</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J.-J</forename><surname>Petit</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>And</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Sch-Noebelen</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">SMC</title>
		<imprint>
			<publisher>IEEE</publisher>
			<date type="published" when="2000" />
			<biblScope unit="volume">4</biblScope>
			<biblScope unit="page" from="2449" to="2454" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b7">
	<analytic>
		<title level="a" type="main">Counterexample-guided abstraction refinement</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Clarke</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">E</forename><forename type="middle">M</forename><surname>Grumberg</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">O</forename><surname>Jha</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Lu</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Y</forename><surname>And</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Veith</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">H</forename></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">CAV (2000)</title>
		<imprint>
			<publisher>Springer</publisher>
			<biblScope unit="volume">1855</biblScope>
			<biblScope unit="page" from="154" to="169" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b8">
	<monogr>
		<title/>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Clarke</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">E</forename><forename type="middle">M</forename><surname>Grumberg</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">O</forename><surname>And</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Peled</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><forename type="middle">A</forename></persName>
		</author>
		<imprint>
			<date type="published" when="1999" />
			<publisher>Model Checking. The MIT Press</publisher>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b9">
	<analytic>
		<title level="a" type="main">Abstract interpretation: A unified lattice model for static analysis of programs by construction or approximation of fixpoints</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Cousot</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><surname>And</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Cousot</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">POPL</title>
		<imprint>
			<publisher>ACM</publisher>
			<date type="published" when="1977" />
			<biblScope unit="page" from="238" to="252" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b10">
	<analytic>
		<title level="a" type="main">Effciently computing static single assignment form and the control dependence graph</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Cytron</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Ferrante</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Rosen</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">B</forename><forename type="middle">K</forename><surname>Wegman</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><forename type="middle">N</forename><surname>And</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Zadeck</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">F</forename><forename type="middle">K</forename></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">ACM Trans. Program. Lang. Syst</title>
		<imprint>
			<biblScope unit="page" from="451" to="590" />
			<date type="published" when="1991" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b11">
	<analytic>
		<title level="a" type="main">Approximation refinement for interpolation-based model checking</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D&amp;apos;silva</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">V</forename><surname>Purandare</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>And</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Kroening</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">VMCAI</title>
		<imprint>
			<publisher>Springer</publisher>
			<date type="published" when="2008" />
			<biblScope unit="volume">4905</biblScope>
			<biblScope unit="page" from="68" to="82" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b12">
	<analytic>
		<title level="a" type="main">Intuitionistic implication in abstract interpretation</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Giacobazzi</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>And</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Scozzari</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">F</forename></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">PLILP (1997)</title>
		<imprint>
			<publisher>Springer</publisher>
			<biblScope unit="volume">1292</biblScope>
			<biblScope unit="page" from="175" to="189" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b13">
	<analytic>
		<title level="a" type="main">Static analysis of linear congruence equalities among variables of a program</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Granger</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">TAPSOFT 1991</title>
		<imprint>
			<publisher>Springer</publisher>
			<date type="published" when="1991" />
			<biblScope unit="volume">493</biblScope>
			<biblScope unit="page" from="169" to="192" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b14">
	<analytic>
		<title level="a" type="main">Lazy abstraction</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Henzinger</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><surname>Jhala</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Majumdar</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>And</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Sutre</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">G</forename></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">POPL</title>
		<imprint>
			<publisher>ACM Press</publisher>
			<date type="published" when="2002" />
			<biblScope unit="page" from="58" to="70" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b15">
	<monogr>
		<title level="m" type="main">Software Verification for Programmable Logic Controllers. Dissertation</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Huuck</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename></persName>
		</author>
		<imprint>
			<date type="published" when="2003-04" />
			<pubPlace>Germany</pubPlace>
		</imprint>
		<respStmt>
			<orgName>University of Kiel</orgName>
		</respStmt>
	</monogr>
</biblStruct>

<biblStruct xml:id="b16">
	<monogr>
		<title level="m" type="main">IEC 61508: Functional Safety of Electrical, Electronic and Programmable Electronic Safety-Related Systems. International Electrotechnical Commission</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>International</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Commission</surname></persName>
		</author>
		<imprint>
			<date type="published" when="1998" />
			<pubPlace>Geneva, Switzerland</pubPlace>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b17">
	<analytic>
		<title level="a" type="main">Automatic abstraction for congruences</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">King</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>And</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Søndergaard</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">H</forename></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">VMCAI (2010)</title>
		<imprint>
			<publisher>Springer</publisher>
			<biblScope unit="volume">5944</biblScope>
			<biblScope unit="page" from="281" to="293" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b18">
	<monogr>
		<title level="m" type="main">Decision Procedures</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Kroening</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>And</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Strichman</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">O</forename></persName>
		</author>
		<imprint>
			<date type="published" when="2008" />
			<publisher>Springer</publisher>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b19">
	<monogr>
				<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Kurshan</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><forename type="middle">P</forename></persName>
		</author>
		<title level="m">Computer-aided verification of coordinating processes: the automata-theoretic approach</title>
		<meeting><address><addrLine>Princeton, NJ, USA</addrLine></address></meeting>
		<imprint>
			<publisher>Princeton University Press</publisher>
			<date type="published" when="1994" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b20">
	<analytic>
		<title level="a" type="main">Formal verification of plc-programs generated from signal interpreted petri nets</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Mertke</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><surname>And</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Frey</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">G</forename></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">SMC</title>
		<imprint>
			<publisher>IEEE</publisher>
			<date type="published" when="2001" />
			<biblScope unit="volume">4</biblScope>
			<biblScope unit="page" from="2700" to="2705" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b21">
	<monogr>
		<title level="m" type="main">The octagon abstract domain. Higher-Order and Symbolic Computation</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Minémin´miné</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename></persName>
		</author>
		<imprint>
			<date type="published" when="2006" />
			<biblScope unit="volume">19</biblScope>
			<biblScope unit="page" from="31" to="100" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b22">
	<analytic>
		<title level="a" type="main">Modeling programmable logic controllers for logic verification</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Moon</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">I</forename></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE Control Systems Magazine</title>
		<imprint>
			<biblScope unit="volume">14</biblScope>
			<biblScope unit="page" from="53" to="59" />
			<date type="published" when="1994" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b23">
	<analytic>
		<title level="a" type="main">Automated formal verification of plc programms written in IL</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Pavlovic</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">O</forename><surname>Pinger</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>And</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Kollmann</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">in Workshop Proce., CEUR-WS.org</title>
		<imprint>
			<date type="published" when="2007" />
			<biblScope unit="page" from="152" to="163" />
		</imprint>
	</monogr>
	<note>VERIFY</note>
</biblStruct>

<biblStruct xml:id="b24">
	<monogr>
		<title level="m" type="main">Safety Software Technical Specification, Version 1.0, Part 1: Concepts and Function Blocks</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Plcopen Tc5</forename></persName>
		</author>
		<imprint>
			<date type="published" when="2006" />
			<pubPlace>PLCopen, Germany</pubPlace>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b25">
	<analytic>
		<title level="a" type="main">A high-performance microarchitecture with hardware-programmable functional units</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Razdan</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>And</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Smith</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><forename type="middle">D</forename></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">MICRO</title>
		<imprint>
			<publisher>ACM Press</publisher>
			<date type="published" when="1994" />
			<biblScope unit="page" from="172" to="180" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b26">
	<analytic>
		<title level="a" type="main">Deriving abstract transfer functions for analyzing embedded software</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Regehr</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>And</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Duongsaa</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">U</forename></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">LCTES</title>
		<imprint>
			<publisher>ACM</publisher>
			<date type="published" when="2006" />
			<biblScope unit="page" from="34" to="43" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b27">
	<analytic>
		<title level="a" type="main">HOIST: A system for automatically deriving static analyzers for embedded systems</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Regehr</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>And</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Reid</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">ASPLOS</title>
		<imprint>
			<publisher>ACM</publisher>
			<date type="published" when="2004" />
			<biblScope unit="page" from="133" to="143" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b28">
	<monogr>
		<title level="m" type="main">Model Checking of Software for Microcontrollers. Dissertation</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Schlich</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">B</forename></persName>
		</author>
		<imprint>
			<date type="published" when="2008-06" />
			<pubPlace>Germany</pubPlace>
		</imprint>
		<respStmt>
			<orgName>RWTH Aachen University</orgName>
		</respStmt>
	</monogr>
</biblStruct>

<biblStruct xml:id="b29">
	<analytic>
		<title level="a" type="main">Direct model checking of PLC programs in IL</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Schlich</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">B</forename><surname>Brauer</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Wernerus</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>And</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Kowalewski</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">DCDS</title>
		<imprint>
			<date type="published" when="2009" />
		</imprint>
	</monogr>
	<note>To appear</note>
</biblStruct>

<biblStruct xml:id="b30">
	<analytic>
		<title level="a" type="main">Verification and validation of safety applications based on PLCopen Safety Function Blocks using Timed Automata in UPPAAL</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Soliman</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Frey</forename><surname>And</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">G</forename></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">DCDS</title>
		<imprint>
			<date type="published" when="2009" />
		</imprint>
	</monogr>
	<note>To appear</note>
</biblStruct>

<biblStruct xml:id="b31">
	<analytic>
		<title level="a" type="main">Verification of plc programs using formal proof techniques</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S ¨ Ulflow</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>And</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Drechsler</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">FORMS/FORMAT (2008), L&apos;Harmattan</title>
		<imprint>
			<biblScope unit="page" from="43" to="50" />
		</imprint>
	</monogr>
</biblStruct>

				</listBibl>
			</div>
		</back>
	</text>
</TEI>
