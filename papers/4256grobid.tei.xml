<?xml version="1.0" encoding="UTF-8"?>
<TEI xmlns="http://www.tei-c.org/ns/1.0" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
xsi:schemaLocation="http://www.tei-c.org/ns/1.0 /Users/atharsefid/Desktop/grobid-0.5.3/grobid-home/schemas/xsd/Grobid.xsd"
 xmlns:xlink="http://www.w3.org/1999/xlink">
	<teiHeader xml:lang="en">
		<encodingDesc>
			<appInfo>
				<application version="0.5.3" ident="GROBID" when="2020-09-29T04:07+0000">
					<ref target="https://github.com/kermitt2/grobid">GROBID - A machine learning software for extracting information from scholarly documents</ref>
				</application>
			</appInfo>
		</encodingDesc>
		<fileDesc>
			<titleStmt>
				<title level="a" type="main">Open access to the Proceedings of the 29th USENIX Security Symposium is sponsored by USENIX. SEAL: Attack Mitigation for Encrypted Databases via Adjustable Leakage SEAL: Attack Mitigation for Encrypted Databases via Adjustable Leakage</title>
			</titleStmt>
			<publicationStmt>
				<publisher/>
				<availability status="unknown"><licence/></availability>
				<date>August 12-14, 2020</date>
			</publicationStmt>
			<sourceDesc>
				<biblStruct>
					<analytic>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Ioannis</forename><surname>Demertzis</surname></persName>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Dimitrios</forename><surname>Papadopoulos</surname></persName>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Charalampos</forename><surname>Papamanthou</surname></persName>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Saurabh</forename><surname>Shintre</surname></persName>
						</author>
						<author>
							<affiliation key="aff0">
								<orgName type="department">Ioannis Demertzis</orgName>
								<orgName type="institution">University of Maryland</orgName>
								<address>
									<addrLine>Dimitrios Papadopoulos</addrLine>
								</address>
							</affiliation>
						</author>
						<author>
							<affiliation key="aff1">
								<orgName type="department">Charalampos Papamanthou</orgName>
								<orgName type="laboratory" key="lab1">NortonLifeLock Research Group</orgName>
								<orgName type="laboratory" key="lab2">NortonLifeLock Research Group</orgName>
								<orgName type="institution" key="instit1">Hong Kong University of Science and Technology</orgName>
								<orgName type="institution" key="instit2">University of Maryland</orgName>
								<orgName type="institution" key="instit3">Saurabh Shintre</orgName>
								<orgName type="institution" key="instit4">University of Maryland</orgName>
								<orgName type="institution" key="instit5">Hong Kong University of Science &amp; Technology</orgName>
								<orgName type="institution" key="instit6">University of Maryland</orgName>
							</affiliation>
						</author>
						<title level="a" type="main">Open access to the Proceedings of the 29th USENIX Security Symposium is sponsored by USENIX. SEAL: Attack Mitigation for Encrypted Databases via Adjustable Leakage SEAL: Attack Mitigation for Encrypted Databases via Adjustable Leakage</title>
					</analytic>
					<monogr>
						<title level="m">Proceedings of the 29th USENIX Security Symposium</title>
						<meeting>the 29th USENIX Security Symposium						</meeting>
						<imprint>
							<date type="published">August 12-14, 2020</date>
						</imprint>
					</monogr>
					<note>This paper is included in the 978-1-939133-17-5</note>
				</biblStruct>
			</sourceDesc>
		</fileDesc>
		<profileDesc>
			<abstract>
				<p>Building expressive encrypted databases that can scale to large volumes of data while enjoying formal security guarantees has been one of the holy grails of security and cryptography research. Searchable Encryption (SE) is considered to be an attractive implementation choice for this goal: It naturally supports basic database queries such as point, join, group-by and range, and is very practical at the expense of well-defined leakage such as search and access pattern. Nevertheless , recent attacks have exploited these leakages to recover the plaintext database or the posed queries, casting doubt to the usefulness of SE in encrypted systems. Defenses against such leakage-abuse attacks typically require the use of Oblivious RAM or worst-case padding-such countermeasures are however quite impractical. In order to efficiently defend against leakage-abuse attacks on SE-based systems, we propose SEAL, a family of new SE schemes with adjustable leakage. In SEAL, the amount of privacy loss is expressed in leaked bits of search or access pattern and can be defined at setup. As our experiments show, when protecting only a few bits of leakage (e.g., three to four bits of access pattern), enough for existing and even new more aggressive attacks to fail, SEAL query execution time is within the realm of practical for real-world applications (a little over one order of magnitude slowdown compared to traditional SE-based en-crypted databases). Thus, SEAL could comprise a promising approach to build efficient and robust encrypted databases.</p>
			</abstract>
		</profileDesc>
	</teiHeader>
	<text xml:lang="en">
		<body>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="1">Introduction</head><p>Encrypted databases enable a data owner to outsource a database to a server in a private manner, so that the server can still answer database queries on the underlying encrypted data. Initially implemented with weak primitives like order-preserving (OPE) and deterministic (DET) encryption (e.g., <ref type="bibr" target="#b3">[5,</ref><ref type="bibr" target="#b4">6,</ref><ref type="bibr" target="#b41">43,</ref><ref type="bibr" target="#b46">48]</ref>) <ref type="bibr" target="#b0">1</ref> , encrypted databases have now moved to more "secure" implementations through other primitives like searchable or structured encryption (SE) <ref type="bibr" target="#b10">[12]</ref>, offering support for a plethora of queries such as point queries <ref type="bibr" target="#b15">[17,</ref><ref type="bibr" target="#b16">18]</ref>, range queries <ref type="bibr" target="#b13">[15,</ref><ref type="bibr" target="#b14">16,</ref><ref type="bibr" target="#b18">20]</ref>, and SQL queries <ref type="bibr" target="#b28">[30]</ref> (e.g., join and group-by queries).</p><p>SE-based encrypted databases are quite practical at the expense of well-defined leakage. This leakage information includes the search pattern (whether a query q has been made in the past or not) and the access pattern that consists of the volume pattern (number of database tuples contained in the query result) and the overlapping pattern (which database tuples, if any, in the result for query q appeared in the result of a previous query).</p><p>Leakage-abuse attacks. Unfortunately the aforementioned leakages exposed by SE can be quite harmful, enabling the recovery of the encrypted database or/and the posed queries. In particular, the works of Islam et al. <ref type="bibr" target="#b26">[28]</ref> and Cash et al. <ref type="bibr" target="#b9">[11]</ref> were the first to exploit access pattern leakage and prior knowledge about the dataset to recover the queried keywords. <ref type="bibr">Zhang et al. [51]</ref> propose file injection attacks for encrypted email applications to improve the recovery rate of queried keywords. Blackstone et al. <ref type="bibr" target="#b5">[7]</ref> revisit various assumptions of existing leakage-abuse attacks. For private range search, effective access pattern and volumetric attacks through which the attacker learns the plaintext order and value of encrypted records, without any prior knowledge, have been proposed <ref type="bibr" target="#b11">[13,</ref><ref type="bibr" target="#b22">24,</ref><ref type="bibr" target="#b23">25,</ref><ref type="bibr" target="#b25">27,</ref><ref type="bibr" target="#b30">32,</ref><ref type="bibr" target="#b32">[34]</ref><ref type="bibr" target="#b33">[35]</ref><ref type="bibr" target="#b34">[36]</ref><ref type="bibr" target="#b37">39]</ref>. This growing body of leakage-abuse attacks has already alerted the community about using SE for implementing encrypted databases <ref type="bibr" target="#b0">[1]</ref>.</p><p>Current defenses. To provably defend against leakage-abuse attacks on SE-based systems one has to (i) use expensive cryptographic tools to eliminate the search/overlapping patterns, i.e., Oblivious RAM (ORAM) <ref type="bibr" target="#b44">[46]</ref> (introducing a polylogarithmic search overhead) and (ii) perform worst-case padding (resulting in worst-case linear search time <ref type="bibr" target="#b27">[29]</ref> or quadratic index size) for eliminating the volume pattern. Both approaches above incur large overheads leading to quite impractical protocols. We present other, more practical, but less effective defenses in our prior work section.</p><p>Our contributions. In light of the above, we ask in this paper whether practical SE primitives can still somehow be used to implement secure encrypted databases. Towards this goal, we propose SEAL 2 , a family of new SE schemes with adjustable leakage which allow the client to define a trade-off between efficiency and leaked information. We show that hiding only a few bits of the search/overlapping/volume pattern significantly reduces the success of existing as well new, even more aggressive, leakage-abuse attacks. At the same time SEAL's practical performance is close to traditional SE. In particular our contributions are as follows:</p><p>1. To better motivate SEAL, we first present new attacks on existing SE-based encrypted databases. In particular, we show that the same inference attacks on DET systems <ref type="bibr" target="#b39">[41]</ref> can be used by a persistent adversary to recover the database values in SE-based systems, such as those implementing point queries (e.g., <ref type="bibr" target="#b13">[15,</ref><ref type="bibr" target="#b15">17]</ref>), and group-by and join queries (e.g., <ref type="bibr" target="#b28">[30]</ref>). The high-level reason is that after the adversary observes a certain number of SE queries in these constructions, tuples with the same values are revealed and therefore frequency information is readily available to the adversary. Even for more robust SE-based range query schemes <ref type="bibr" target="#b13">[15,</ref><ref type="bibr" target="#b18">20]</ref>, we present new attacks that can work under certain assumptions about the dataset (see Section 3).</p><p>2. We present SEAL(α, x), a family of SE schemes with adjustable leakage. SEAL is based on two other "adjustable" primitives, an adjustable ORAM, parameterized by a value α and an adjustable padding algorithm, parameterized by a value x. The adjustable ORAM, ADJ-ORAM-α, hides only α bits of the access pattern by partitioning the accessed N-sized array into N/2 α regions of 2 α size each and by applying an individual standard ORAM per region. The adjustable padding algorithm, ADJ-PADDING-x, reduces the volume pattern leakage by padding every list to the the closest power of x, leading to a dataset with at most log x N distinct sizes. Clearly, larger values for α and x yield slower but more secure SEAL (see Section 4).</p><p>3. We use SEAL to build encrypted databases with adjustable leakage. We first present three new construction POINT-ADJ-SE-(α, x) (for point queries), JOIN-ADJ-SE-(α, x) (for join queries) and RANGE-ADJ-SE-(α, x) (for range queries) that use SEAL(α, x) as black box, instead of plain SE. Finally, we present a more efficient adjustable construction for ranges, RANGE-SRC-SE, that reduces access pattern leakage and volume pattern leakage implicitly by modifying an existing constructions <ref type="bibr" target="#b13">[15]</ref> and not by using our (more expensive) SEAL <ref type="bibr">(α, x)</ref>. (see Sections 4.4 and 4.5).</p><p>4. We evaluate the robustness of our SEAL-based encrypted databases for various values α and x against particularly powerful adversaries that observe the leaked search/overlapping and volume patterns and have plaintext access to the entire input dataset. Such strong threat model offers additional credibility to our proposed mitigation techniques. We consider two new attacks. The first is a query recovery attack that aims at decrypting the encrypted queries posed by the client. The second is a database recovery attack that aims at mapping plaintext values (for the queried attribute) to the tuples of the encrypted database. Note that since SEAL hides some bits of access pattern via ADJ-ORAM, database recovery can be quite challenging (see Section 5).</p><p>5. We observe that for all above attacks we can find certain values for α and x that reduce the attacker's success rate significantly while maintaining good performance. For instance we show that if we use SEAL to hide three bits of access pattern while at the same time pad the keyword lists to powers of 4 (thus hiding a few bits of volume pattern as well), we can defend against our powerful attackers only at the expense of an acceptable slowdown from plain SE-around 32×. 3</p><p>Prior work. Wagh et al. <ref type="bibr" target="#b47">[49]</ref> introduces an ORAM with a tunable trade-off between the search/storage efficiency and security. This trade-off is controlled by an (ε, δ)-differential privacy modification of PathORAM <ref type="bibr" target="#b44">[46]</ref>. Their construction could potentially be used as a drop-in replacement in our proposed encrypted database algorithms (instead of our adjustable ORAM). It would be interesting to explore how different choices of ε and δ affect the performance of existing leakage-abuse attacks-we leave this as future work. The works of Cash et al. <ref type="bibr" target="#b9">[11]</ref>, and Bost and Fouque <ref type="bibr" target="#b7">[9]</ref> propose padding techniques for keyword search that can hide a portion of the volume pattern. Unlike our proposed padding in Section 4.2, their padding depends on the distribution of the input dataset, which results in leakage even prior to query execution. Similar padding approaches have been also proposed in other areas, e.g., <ref type="bibr" target="#b35">[37]</ref> proposes padding approaches for preventing snapshot attacks on deterministically encrypted data and <ref type="bibr" target="#b36">[38]</ref> proposes padding for traffic analysis attacks. Bost and Fouque <ref type="bibr" target="#b7">[9]</ref> also propose new security definitions for SE aiming at capturing existing leakage abuse attacks.</p><p>These theoretical definitions could potentially provide some intuition on how we can modify existing schemes in order to make them robust against such attacks.</p><p>Recently, Kamara et al. <ref type="bibr" target="#b29">[31]</ref> showed how to suppress the search pattern leakage without using ORAM. However suppressing only the search pattern leakage is not enough for mitigating leakage-abuse attacks. Kamara and Moataz <ref type="bibr" target="#b27">[29]</ref> showed theoretically how to perform worst-case padding without requiring quadratic index size, while sometimes assuming certain properties for the input dataset, such as a Zipf distribution or highly-concentrated multimaps.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2">Premiliminaries</head><p>We now provide some notation, definitions and background that we use throughout the paper. We write out ← Alg(in) to indicate the output of an algorithm Alg and (client out , server out ) ↔ Prot(client in , server in ) to indicate the execution of a protocol Prot between a client and a server.</p><p>Negligible function. A function ν: N → R is negligible in λ, denoted by negl(λ), if for every positive polynomial p(·) and all sufficiently large λ, ν(λ) &lt; 1/p(λ).</p><p>Oblivious RAM (ORAM). Oblivious RAM (ORAM), introduced in <ref type="bibr" target="#b20">[22]</ref>, is a compiler that encodes the memory such that accesses on the compiled memory do not reveal access patterns on the original memory. An ORAM scheme consists of two algorithms/protocols ORAM = (ORAMINITIALIZE, ORAMACCESS), where ORAMINITIALIZE initializes the memory, and ORAMACCESS performs the oblivious accesses. We provide the formal definition in Section 4.3.</p><p>Oblivious dictionary (ODICT). An oblivious dictionary is an oblivious data structure that can support oblivious queries from an arbitrary domain. ODICT offers the following protocols (see <ref type="bibr" target="#b48">[50]</ref> for a detailed description):</p><p>• (T, σ) ← ODICTSETUP(1 λ , N): Given a security parameter λ, and an upper bound N on the number of elements, it creates an oblivious data structure T . The client sends T to the server and maintains locally the state σ.</p><p>• ((value, σ ), T ) ↔ ODICTSEARCH((key, σ), T ): Given the search key key and σ, returns the corresponding value value, the updated T and σ .</p><p>• (σ , T ) ↔ ODICTINSERT((key, value, σ), T ): Given a key-value pair key, value and σ, it inserts this entry in the dictionary. It returns the updated T and σ .</p><p>Searchable encryption (SE). Let D be a collection of documents. Each document D ∈ D is assigned a unique document identifier and contains a set of keywords from a dictionary ∆. Let D(w) denote the identifiers of documents containing keyword w. SE schemes build an encrypted index I on the document identifiers which can be queried using keyword "tokens". Note that we do not store encrypted documents in the index, just their identifiers. Encrypted documents can be retrieved in an extra round. We denote with N the data collection size, i.e., N = ∑ w∈∆ |D(w)|. An SE protocol involves two parties, a client and a server and consists of the following algorithms/protocols <ref type="bibr" target="#b10">[12]</ref>:</p><formula xml:id="formula_0">• (st C , I ) ← SETUP(1 λ , D):</formula><p>is a probabilistic algorithm performed by the client prior to sending any data to the server. It receives the security parameter as input and the data collection D, and outputs an encrypted index I which is sent to the server. st C is sent to the client and it contains the secret key k.</p><p>• ((X , st C ), I ) ↔ SEARCH((st C , w), I ): is a protocol executed between the client and the server. The client inserts the secret state st C and a keyword w, while the server inserts an encrypted index I . At the end of the protocol the client learns X , the set of all document identifiers D(w)</p><p>corresponding to keyword w and the updated secret state st C , while the server's output is the updated index I .</p><p>The security of the above SE scheme is captured by the following definition, using the standard SE's real/ideal security game <ref type="bibr" target="#b10">[12]</ref> (see <ref type="figure" target="#fig_0">Figure 1</ref>). Definition 1 Suppose (KEYGEN, SETUP, SEARCH) is a SE scheme based on the above definition, let λ ∈ N be the security parameter and consider experiments Real(λ) and <ref type="figure" target="#fig_0">Figure 1</ref>, where L 1 and L 2 are leakage functions. SE is (L 1 , L 2 )-secure if for all polynomialsize adversaries A there exist polynomial-time simulators SIMSETUP and SIMSEARCH, such that for all polynomialtime algorithms DIST:</p><formula xml:id="formula_1">Ideal L 1 ,L 2 (λ) presented in</formula><formula xml:id="formula_2">| Pr[DIST(v, st A ) = 1 : (v, st A ) ← Real(λ)]− Pr[DIST(v, st A ) = 1 : (v, st A ) ← Ideal L 1 ,L 2 (λ)]| ≤ negl(λ)</formula><p>where probabilities are taken over the coins of KeyGen and Setup algorithms.</p><p>The above definition captures strong adversarial capabilities, i.e., even adaptive adversaries that can select their new queries based on previous ones cannot learn anything more than the specified leakage functions L 1 , L 2 <ref type="bibr" target="#b10">[12]</ref>. Next, we discuss these leakage functions in more detail.</p><p>Leakage functions. Leakage L 1 is associated with information that is leaked from the index alone (before any queries have been executed) and typically contains the size of the data collection N. Leakage L 2 represents the information leaked during a query. It typically consists of the search pattern that indicates whether the client searches for a particular w, and the access pattern that contains the document identifiers matching the queried keyword w, namely L 2 (D, w) = (id(w), D(w)).</p><p>In the above, id : ∆ → {0, 1} λ is a mapping of keywords to λ-bit numbers. We refer to id(w) as the alias of w. In</p><formula xml:id="formula_3">Real(λ) 1: (D, st A ) ← A(1 λ ) 2: (st C , I 0 ) ←Setup(1 λ , D) 3: for 1 ≤ i ≤ q do 4: (w i , st A ) ← A(st A , I i−1 , M 1 , . . . , M i−1 )* 5: (X i , st C , I i ) ↔Search(st C , w i , I i−1 ) 6: Let M = M 1 . . . M q , I = I 0 . . . I q , X = X 0 . . . X q 7: return v = (I , M, X ), st A Ideal L SETUP ,L QUERY (λ) 1: (D, st A ) ← A(1 λ ) 2: (st S , I 0 ) ←SimSetup(L SETUP (D)) 3: for 1 ≤ i ≤ q do 4: (w i , st A ) ← A(st A , I i−1 , M 1 , . . . , M i−1 )* 5: (X i , st S , I i ) ↔ SimSearch(st S , L QUERY (D, w i ), I i−1 ) 6: Let M = M 1 . . . M q , I = I 0 . . . I q and X = X 0 . . . X q 7: return v = (I , M, X ), st A</formula><p>* Let M k be the messages from client to server in the Search/SimSearch protocols. practice, this will be a random allocation of keywords to aliases that is used to capture the search pattern leakage. That is, while id(w) does not directly reveal w, when querying for the same keyword repeatedly the server observes the same id(w). Recall that D(w) contains the document identifiers 4 matching the queried keyword w and this captures the access pattern leakage. More specifically, the access pattern consists of (i) the size of the result which we call volume pattern, and (ii) the document overlaps between previously queried keywords, which we call overlapping pattern.</p><p>For certain database query types, such as point queries, L 2 leakage contains only the search and volume pattern leakage. The reason is that there is a structural difference between the keyword search problem and database point queries. In keyword search, one document identifier can be included in multiple keywords, while in database search one tuple-id or an encrypted tuple can have exactly one searchable value per attribute. For example, a patient cannot have more than one date of birth. Using this observation, we can store in the encrypted index directly the encrypted tuples instead of the tuple-ids without increasing asymptotically the storage.</p><p>SE through ORAM. One way to reduce the SE query leakage would be to replace all the memory accesses performed with oblivious memory accesses using an ORAM as a black box. In that case, the only leaked information during queries is the result size.</p><p>Attacks on deterministically-encrypted systems.</p><p>[41] pro- <ref type="bibr" target="#b2">4</ref> We assume that the order of the documents does not reveal any significant information. This can be achieved by assigning a random λ-bit number to each document. posed the frequency analysis and p -optimization attacks that apply to databases encrypted with the use of deterministic schemes such as CryptDB <ref type="bibr" target="#b41">[43]</ref>.</p><p>The frequency analysis attack is the most basic and wellknown inference attack in the area of cryptography. We define C k and M k to be the ciphertext and message spaces, respectively of the deterministic encryption scheme. Given a deterministically encrypted column c over C k and an auxiliary dataset z over M k , the attack works by assigning the i-th most frequent element of c to the i-th most frequent element of z.</p><p>The p -optimization attack is a family of attacks against deterministic encryption. The main goal is to find an assignment from ciphertexts to plaintexts that minimizes a given cost function, e.g., the p distance between the histograms of the dataset. This attack minimizes the total mismatch identified in frequencies across all plaintext and ciphertext pairs.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3">Encrypted Databases from Searchable Encryption &amp; Attacks</head><p>In this section we first show how SE can be used to support various queries on encrypted databases, such as point/groupby/join/range queries and then show various attacks (some existing and some new) on these constructions. Our findings systematically re-establish that using SE to implement encrypted databases <ref type="bibr" target="#b13">[15,</ref><ref type="bibr" target="#b18">20,</ref><ref type="bibr" target="#b28">30]</ref> is particularly risky when the adversary is persistent and also has access to prior information about the underlying encrypted database (e.g., distribution of first names/gender). For snapshot adversaries that have no prior information about the encrypted database, there could be value in SE-based systems, however these are assumptions that are unlikely to hold in the real world <ref type="bibr" target="#b24">[26,</ref><ref type="bibr" target="#b39">41]</ref>.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.1">SE-based Point Queries</head><p>The most basic database query is the point query for a value v.</p><p>A point query retrieves all the tuples from table T that contain value v in attribute x, i.e.,</p><formula xml:id="formula_4">SELECT * FROM T WHERE T .x = v;</formula><p>We can use an SE scheme to implement private point queries (e.g., see Demertzis et al. <ref type="bibr" target="#b13">[15]</ref>, and Kamara and Moataz <ref type="bibr" target="#b28">[30]</ref>) by viewing attribute values as keywords, and database tuples as document identifiers. In this case an SE-based point query will return the encrypted tuples that match this value. We call this scheme POINT-SE. Note that POINT-SE can also be used to implement group-by queries (e.g., see Kamara and Moataz <ref type="bibr" target="#b28">[30]</ref>), where a client can compute the group-by query through point queries for all distinct values of attribute x.</p><p>Attacks on POINT-SE. When using POINT-SE, the attacker can identify which encrypted tuples have the same value v, after he observes the execution of a query. Finally, after he observes the execution of all queries, the attacker can group the encrypted database tuples by value, and can therefore compute the size of each group. By running a frequency analysis attack or an p -optimization attack (described in Section 2), it is easy to map plaintext values to encrypted tuples. Note that the above attack requires the attacker to see all queries. However, in the case of group-by queries, the very nature of the query reveals all possible point queries, resulting in total leakage exposure with just a single query. To conclude, observing all possible results from point queries (either one by one or via a group-by query) turns an SE-implemented database into a deterministically-encrypted database, making it vulnerable to simple attacks.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.2">SE-based Join Queries</head><p>A fundamental query type for relational databases is the join query. A simple join of two tables T and R on attribute x returns all pairs of tuples from T and R that agree on x, i.e.,</p><formula xml:id="formula_5">SELECT * FROM T , R WHERE T .x = R .x;</formula><p>A simple approach that allows us to support private join queries using SE is the following: We encrypt T with a semantically-secure encryption scheme and R with POINT-SE for private point queries on attribute x. Then we stream all the tuples of T to the client. Then the client decrypts each tuple t in T and queries the SE index for R (on attribute x) to retrieve the matching tuples of R . Clearly this approach has high bandwidth since it requires streaming a large number of tuples to the client. We call this scheme JOIN-SE. To address the above bandwidth issue, Kamara and Moataz <ref type="bibr" target="#b28">[30]</ref> propose a construction that, in the case of two tables T and R , precomputes the answers to join queries on each possible attribute x. Then they store with SE a mapping from "keyword" x to the precomputed answer (i.e., pairs of pointers to tuples from T and R that have the same value on attribute x). This approach requires both significant amount of storage and setup time. We call this scheme JOIN-SE-PRECOMPUTE. Attacks on JOIN-SE, JOIN-SE-PRECOMPUTE. It is easy to see that JOIN-SE and JOIN-SE-PRECOMPUTE leak the encrypted join graph. That is, for each encrypted tuple t of T , the respective encrypted tuples t of R that have the same value on x with t are leaked (if such tuples exist).</p><p>We propose a simple attack that recovers the values of the encrypted tuples: Assuming we have access to (part of) the plaintext dataset, we can compute the plaintext join graph by connecting with an edge tuples from T and tuples from R that have the same plaintext value on attribute x. If all tuples in T and R have at least one incident edge the attacker can perform the frequency analysis attack on both T and R and recover the plaintext values for the encrypted values of attribute x. In this case JOIN-SE and JOIN-SE-PRECOMPUTE provide exactly the same security properties for joins as more efficient encrypted systems based on deterministic encryption (e.g., CryptDB <ref type="bibr" target="#b41">[43]</ref>). Otherwise the attack can be performed only on the leaked frequencies and JOIN-SE and JOIN-SE-PRECOMPUTE have potentially less leakage than systems based on deterministic encryption.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.3">SE-based Range Queries</head><p>In the case of range queries, we want to retrieve all tuples from table T that contain value v ∈ [l, u] in attribute x, i.e.,</p><formula xml:id="formula_6">SELECT * FROM T WHERE T .x ≥ l and T .x ≤ u;</formula><p>One way to support private range queries is to treat each numeric value of attribute x as a keyword and use SE. Then, private range queries can be supported by transforming the range [l, u] to series of private point queries, i.e., searching for the individual values l, l + 1, . . . , u − 1, u. We call this scheme RANGE-SE. Many attacks that exploit the overlapping and volume patterns exist against RANGE-SE-see <ref type="bibr" target="#b11">[13,</ref><ref type="bibr" target="#b23">25,</ref><ref type="bibr" target="#b30">32,</ref><ref type="bibr" target="#b33">35,</ref><ref type="bibr" target="#b34">36,</ref><ref type="bibr" target="#b37">39]</ref>. In general, these attacks first compute an ordering of the encrypted tuples and then retrieve the actual values after observing a certain number of queries.</p><p>To address this leakage, Faber et al. <ref type="bibr" target="#b18">[20]</ref> and Demertzis et al. <ref type="bibr" target="#b13">[15,</ref><ref type="bibr" target="#b14">16]</ref> have proposed new private range constructions that use SE and are response-hiding, in that they do not leak overlaps between different range queries. Their main idea, called LOGARITHMIC-SRC in <ref type="bibr" target="#b13">[15]</ref>, builds a binary-tree data structure with some extra "internal" nodes (see <ref type="figure">Fig- ure</ref> 2) on top of the database. Each leaf corresponds to a value k ∈ {0, 1, . . . , M − 1} (where M is the size of the domain of attribute x) and stores all tuples that have value k at attribute x (i.e., a leaf can store more than one tuples). Data stored in a leaf is also copied to its parents. To answer a range search query, we select the root of the smallest subtree fully covering the query. The above data structure defines a natural key-value relationship, where each tree node is a key with the value being its respective database tuples. This allows us to query the data structure privately using SE.</p><p>LOGARITHMIC-SRC yields up to O(N) false positives where N is the size of the database table. For example, if the range <ref type="bibr" target="#b1">[3,</ref><ref type="bibr" target="#b3">5]</ref> is being queried in <ref type="figure" target="#fig_1">Figure 2</ref> and there is a single tuple in the range but the rest of the dataset has value 2, node N 2,5 will be returned and therefore the response will be the entire dataset. LOGARITHMIC-SRC-I, proposed for this problem <ref type="bibr" target="#b13">[15]</ref>, maintains two LOGARITHMIC-SRC-type binary trees, one on the domain {0, . . . , M − 1} that stores constant-size metadata in the leaves (let us call this tree T 1 ) and one on the domain {0, . . . , N − 1} that stores the actual database tuples in the leaves (one per leaf) sorted by the search attribute (let us call this tree T 2 ). In particular, for every value of the domain i ∈ {0, . . . , M − 1}, T 1 stores the subrange of {0, . . . , N − 1} that corresponds to database tuples with value i in T 2 . Therefore, a range query <ref type="bibr">[a, b]</ref> is transformed into two queries: One range query <ref type="bibr">[a, b]</ref> in T 1 that returns information that allows one to reconstruct the range <ref type="bibr">[a , b ]</ref>   in T 2 that returns those tuples. This approach brings down the worst-case query cost from O(N) to O(R + r), where R is the size of the queried range (and is due to querying T 1 ) and r is the size of the result (and is due to querying T 2 ). Do existing attacks apply? It seems that existing (volumetric) attacks on RANGE-SE <ref type="bibr" target="#b11">[13,</ref><ref type="bibr" target="#b22">24,</ref><ref type="bibr" target="#b23">25,</ref><ref type="bibr" target="#b25">27,</ref><ref type="bibr" target="#b30">32,</ref><ref type="bibr" target="#b32">[34]</ref><ref type="bibr" target="#b33">[35]</ref><ref type="bibr" target="#b34">[36]</ref><ref type="bibr" target="#b37">39]</ref> do not apply to the above, response-hiding, schemes. However we must note that LOGARITHMIC-SRC and LOGARITHMIC-SRC-I leak the volume pattern of a restricted set of queries and may be vulnerable to new volumetric attacks. In particular, the very recent and concurrent work of Gui et al. <ref type="bibr" target="#b25">[27]</ref> proposed new volumetric attacks that can handle cases of missing/spurious queries, and cases that return noisy results. These attacks for missing and noisy queries could potentially be used against LOGARITHMIC-SRC by setting a small window size and treating all volumes from large windows as noise. However, it is not clear how this noise would affect the attack output since the missing queries are not chosen at random as is assumed in <ref type="bibr" target="#b25">[27]</ref>. Below, we describe our new attacks tailored to LOGARITHMIC-SRC that could be extended also for LOGARITHMIC-SRC-I. New attacks on LOGARITHMIC-SRC. The main idea is that if the attacker observes the volumes of all queries, then she could potentially reconstruct the tree and map encrypted database tuples to plaintext values. For simplicity, let us focus on a LOGARITHMIC-SRC tree with Dom = {0, 1, 2, 3} (and therefore 8 nodes, including the one "extra" internal node-see <ref type="figure" target="#fig_1">Figure 2</ref>). Assume the adversary observes the following sizes of results (he actually sees the respective encrypted tuples as well): 20, 1, 26, 18, 8, 5, 7 and 13. His goal is to map these sizes (and the respective encrypted tuples) to the nodes N 0 , N 1 , N 2 , N 3 , N 01 , N 12 , N 23 and N 03 of the tree. The tuples that map to leaf i will therefore have value i! To do the mapping the adversary exploits the fact that the size of a parent is equal to the sum of the sizes of its children and therefore sets up 4 linear equations with 8 unknowns |N 0 |, |N 1 |, |N 2 |, |N 3 |, |N 01 |, |N 12 |, |N 23 | and |N 03 |. Of course these equations have an infinite number of solutions but the one we are interested in is a permutation of the observed sizes 20, 1, 26, 18, 8, 5, 7 and 13. In our example, due the fact that all pairwise sums are different, there is a unique assignment (up to a mirror arrangement), in particular the assignment |N 0 | = 1, |N 1 | = 7, |N 2 | = 13, |N 3 | = 5, |N 01 | = 8, N 12 = 20, N 23 = 18 and N 03 = 26. We note here that the described attack would not work in the case where pairwise-sums are not unique (e.g., when all leaves have size 1) but other information could be potentially used in that case. To conclude, this simple attack shows that concealing the overlapping pattern (as LOGARITHMIC-SRC is doing) is not enough for fully defending against range attacks.</p><formula xml:id="formula_7">N 1 N 0 N 2 N 3 N 4 N 5 N 6 N 7 N 0,1 N 2,3 N 4,5 N 6,7 N 0,3 N 4,7 N 0,7 N 1,2 N 3,4 N 5</formula><p>Generalization of attack to LOGARITHMIC-SRC-i. Recall that in LOGARITHMIC-SRC-I we maintain two LOGARITHMIC-SRC-type trees: one for the metadata (T 1 ) and one for the actual data (T 2 ). Every leaf in T 1 has size at most one since a specific domain value may not be present at all in the database. Thus the above attack that exploits distinct sizes of leaves might not work very well.</p><p>However there are still ways to launch an attack. Coming back to <ref type="figure" target="#fig_1">Figure 2</ref>, consider the tree T 1 on the domain {0, 1, 2, 3}, with the difference that all leaf nodes have size either zero or one. Suppose after all queries have been issued on T 1 the adversary observes only three nodes of size one (and all other nodes have size zero). Looking into this information carefully, one can tell that these nodes have to be either N 0 , N 0,1 and N 0,3 or N 3 , N 2,3 and N 0,3 which implies that all database tuples have the same value and this value is either 0 or 3. Note that at that point, it will be easy to recover the topology of T 2 since for each range query one node of T 1 and one for T 2 will be accessed together.</p><p>The above attacks are not analyzed in full detail since we want to use them mainly as a way to manifest the weaknesses of the Logarithmic-SRC and Logarithmic-SRC-i schemes <ref type="bibr" target="#b13">[15]</ref>. We also use them as a motivation to introduce our new RANGE-SRC-SE-(a, x) scheme (see Section 4.5). Exploring these attacks against Logarithmic-SRC and Logarithmic-SRC-i in more detail is left as future work.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4">SEAL: Adjustable Searchable Encryption &amp; Derived Constructions</head><p>Most of the attacks on SE-based encrypted databases that were presented in section 3 exploit the leakage of SE such as the search, overlapping and volume pattern. In this section we propose SEAL, a family of new SE schemes with adjustable leakage with the hope that these can be used to implement more secure (yet efficient) encrypted databases that withstand leakage-abuse attacks. Our main building blocks are an adjustable ORAM, an ORAM that allows one to define the bits of leakage of the index being accessed in a tunable manner, as well a an adjustable padding algorithm that adds noise to the actual size of the list being accessed.</p><p>bit ← Real ADJ-ORAM-α (λ):</p><formula xml:id="formula_8">1: M 0 ← Adv(1 λ ). 2: (σ 0 , EM 0 ) ↔ ADJ-ORAMINITIALIZE((1 λ , M 0 , α), ⊥).</formula><p>3: for k = 1 to q do q: polynomial #queries 4: With m 0 , m 1 , . . . , we denote the messages exchanged at Line 5 of both experiments.</p><formula xml:id="formula_9">i k ← Adv(1 κ , EM 0 , m 1 , m 2 , . . . , m k−1 ). 5: ((v i k , σ k ), EM k ) ↔ ADJ-ORAMACCESS((op, i k , v i k , σ k−1 ), EM k−1 ). 6: return bit ← Adv(1 k , EM 0 , m 1 , m 2 , . . . , m q ). bit ← Ideal ADJ-ORAM-α L α 1 ,L α 2 (λ): 1: M 0 ← Adv(1 λ ). 2: (st S , EM 0 ) ← ADJ-SIMORAMINITIALIZE(1 λ , L α 1 ). 3: for k = 1 to q do 4: i k ← Adv(1 κ , EM 0 , m 1 , m 2 , . . . , m k−1 ). 5: (st S , EM k ) ↔ ADJ-SIMORAMACCESS( st S , EM k−1 , L α 2 (i k )). 6: return bit ← Adv(1 k , EM 0 , m 1 , m 2 , . . . , m q ).</formula></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.1">Adjustable Oblivious RAM</head><p>An adjustable ORAM (ADJ-ORAM-α) is parameterized by a parameter α that defines the number of leaked bits of the accessed memory location (α = 0 for a traditional ORAM). We define the ADJ-ORAMINITIALIZE and ADJ-ORAMACCESS protocols of our ADJ-ORAM-α scheme:</p><formula xml:id="formula_10">• (σ, EM) ↔ ADJ-ORAMINITIALIZE((1 λ , M, α), ⊥),</formula><p>takes as input a security parameter λ, a memory array M of n values (without loss of generality lets assume n is a power of 2) (1, v 1 ), . . . , (n, v n ), a parameter α ∈ {0, 1, . . . , log n} and outputs secret state σ (for client), and encrypted memory EM (for server).</p><p>•</p><formula xml:id="formula_11">((v i , σ), EM) ↔ ADJ-ORAMACCESS((op, i, v i , σ, α), EM)</formula><p>is a protocol between the client and the server, where the client's input is the type of operation op (read/write), an index i and the value v i -for op = read client sets v i = ⊥. Server's input is the encrypted memory EM. Client's output consists of the updated secret state σ and the value v i assigned to the i-th value of M if op = read (for op = write the returned value is ⊥). Server's output is the updated encrypted memory EM.</p><p>Next, we define the security of ADJ-ORAM-α in the real/ideal game of <ref type="figure" target="#fig_2">Figure 3</ref> parametrized by leakage functions</p><formula xml:id="formula_12">L α 1 , L α 2 . Definition 2 ADJ-ORAM-α is (L α 1 , L α 2 )-secure if for any PPT adversary Adv, there ex- ists a PPT simulator containing algorithms (σ, EM) ↔ ADJ-ORAMINITIALIZE((1 λ , M, α), ⊥)</formula><p>1: Let M be in the form (1, v 1 ), . . . , (n, v n ) and µ = 2 α . 2: Sample a secret key k ← $ {0, 1} λ . 3: Let π k be a PRP: {0, 1} λ × {0, 1} log 2 n → {0, 1} log 2 n . 4: Create S 1 , . . . , S µ empty arrays of size n µ . 5: for i = 1, . . . , n do 6:</p><p>Let be the integer representation of the α most significant bits of π k [i] and φ be the integer representation of the remaining bits of π k [i].</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>7:</head><formula xml:id="formula_13">S +1 [φ + 1] = v i . 8: for i = 1, . . . , µ do 9: (σ i , EM i ) ↔ ORAMINITIALIZE((1 λ , S i ), ⊥).</formula><p>10: Let EM to be EM 1 , . . . , EM µ and σ to (σ 1 , . . . , σ µ ). 11: return (σ, EM).  (ADJ-SIMORAMINITIALIZE, ADJ-SIMORAMACCESS):</p><formula xml:id="formula_14">((v i , σ), EM) ↔ ADJ-ORAMACCESS((op, i, v i , σ, α), EM)</formula><formula xml:id="formula_15">= φ + 1. 4: ((v i , σ ), EM ) ↔ ORAMACCESS((op, φ, v i , σ ), EM ). 5: return (v i , σ, EM).</formula><formula xml:id="formula_16">| Pr[Real ADJ-ORAM-α (λ) = 1]−Pr[Ideal ADJ-ORAM-α L α 1 ,L α 2 (λ) = 1]|</formula><p>is at most neg(λ), where the above experiments are defined in <ref type="figure" target="#fig_2">Figure 3</ref> and where the randomness is taken over the random bits used by the algorithms of the ADJ-ORAM-α scheme, the algorithms of the simulator and Adv.</p><p>The leakages L α 1 , L α 2 are defined in a manner similar to</p><formula xml:id="formula_17">those of SE, i.e., L α 1 (M) = (n, α) and L α 2 (i) = id α (i),</formula><p>where id α (i) returns the α most significant bits of a random log n-bit alias assigned to tuple (i, v i ). Intuitively, if two queries for index i are made on an ADJ-ORAM-α, the adversary should only figure out that the α most significant bits of the queried index are the same-but nothing else.</p><p>Construction of ADJ-ORAM-α. The main idea behind our approach is that the memory array will not be stored in one ORAM, but it will be partitioned into multiple disjoint subsets, each of which will then be stored in a separate smaller ORAM. We use as a black box any secure ORAM= (ORAMINITIALIZE, ORAMACCESS) to store each subset. Our construction works by building 2 α different ORAMs ORAM 1 ,. . . ,ORAM 2 α , each of which will store a part of M of size n/2 α .</p><p>One possible way to partition M into these ORAMs would be to deterministically assign (i, v i ) based on their location in M, i.e., the first 2 α entries will be stored in ORAM 1 , the next 2 α entries will be stored in ORAM 2 and so on. However, this might reveal sensitive information for certain application settings, e.g., if the server knows that M stores v i in a sorted manner, then accessing ORAM 1 reveals that one of the smallest values in M was accessed. Hence, before performing the partitioning, we randomly permute M using a PRP P over <ref type="bibr">[1, n]</ref> (implemented with a small-domain PRP <ref type="bibr" target="#b21">[23,</ref><ref type="bibr" target="#b38">40,</ref><ref type="bibr" target="#b43">45]</ref>), for which the key k is chosen and stored by the client. Let π k be the corresponding mapping after k has been chosen. Then, the partitioning of M is performed using the integer representation of the α most significant bits of the permuted index and the remaining bits of π k (i) correspond to the index π k (i) of tuple (i, v i ) inside the small ORAM. Our construction is given in <ref type="figure" target="#fig_4">Figure 4</ref>.</p><formula xml:id="formula_18">Theorem 1 Assuming (ORAMINITIALIZE, ORAMACCESS) is a secure ORAM and π k is a secure PRP, then ADJ-ORAM- α presented above is (L α 1 , L α 2 )-secure, according to Def. 2.</formula><p>The ORAM scheme used is secure and therefore we use its algorithms SIMORAMINITIALIZE and SIMORAMACCESS. In particular, the ADJ-SIMORAMINITIALIZE takes as an input L α 1 = (n, α) and the security parameter λ, and it creates EM 1 , . . . EM µ and σ 1 , . . . , σ µ using SIMORAMINITIALIZE(1 λ , n µ ) for µ = n 2 α . The ADJ-SIMORAMACCESS takes as an input id α (i), from L 2 leakage, which determines in which encrypted memory EM i must be accessed, and performs a random access using SIMORAMACCESS(σ i , EM i ). Then, the simulator properly updates EM i and σ i .</p><p>Performance and leakage of ADJ-ORAM-α. The higher the value of α is, the more efficient ADJ-ORAM is (ORAM is applied on a smaller parts of the array) and the larger the leakage becomes (more accesses will be made on the same small parts of the array). Concretely, if we assume that the ORAM used as a building block has T (n) access overhead (e.g., T (n) = O(log n) for the most efficient ORAM <ref type="bibr" target="#b40">[42]</ref>), then ADJ-ORAM-α has an improved T (n/2 α ) overhead. In Section 4.3 we discuss how ADJ-ORAM-α can be instantiated using <ref type="bibr" target="#b44">[46]</ref> and oblivious data structures <ref type="bibr" target="#b48">[50]</ref> and we provide a more concrete performance analysis.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.2">Adjustable Padding</head><p>In this section we propose adjustable padding, another primitive that will help us build more secure SE schemes. Recall that existing SE schemes leak the query result size, i.e., |D(w)|. Find the smallest i: x i−1 &lt; |D(w)| ≤ x i .</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>4:</head><p>Pad D(w) with x i − |D(w)| dummy values. 5: Pad D with dummy records so that the total size is x · N. 6: return the padded dataset. (worst-case padding). However, this would introduce a prohibitive storage/search overhead. To avoid this overhead, one could pad to the closest power of two, forcing the adversary to observe at most log N + 1 sizes-leaking log log N + 1 bits, at most doubling the search and storage overhead.</p><p>Our proposal is a generalization of the above idea. Our padding can be parameterized by a value x that defines the number of different sizes (which are exactly log x N + 1) that the adversary can observe. Our padding algorithm works as follows (see <ref type="figure" target="#fig_5">Figure 5</ref>). Given a keyword list D(w) of size, we find the integer i such that x i−1 &lt; |D(w)| ≤ x i . Then we pad the list D(w) with x i − |D(w)| dummy entries. Note that this padding strategy can increase the space and search overhead by a factor of x and yields leakage of log log x N + 1 bits! In other words the larger x is, the less efficient the scheme becomes and the less leakage the adversary observes. We note here that for simulation purposes, after all lists are padded, our algorithm pads the dataset to a total of x · N entries so that to avoid leaking any information about the dataset.</p><p>We note here that padding techniques have been used before for concealing the size of the accessed result (e.g., see Cash et al. <ref type="bibr" target="#b9">[11]</ref> and Bost and Fouque <ref type="bibr" target="#b7">[9]</ref>, as well as Lacharite et al. <ref type="bibr" target="#b35">[37]</ref> and Liberatore et al. <ref type="bibr" target="#b36">[38]</ref>). However, these approaches depend on the distribution of the input dataset, which leads to more leakage, even prior to query execution. Instead our padding algorithm is distribution-agnostic and can thus be simulated only by knowing the size of the dataset N and the padding parameter x.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.3">SEAL</head><p>We now present SEAL(α, x), our adjustable SE construction that uses ADJ-ORAM-α, ADJ-PADDING-x and an oblivious dictionary ODICT described in Section 2 as a black boxes. We recall that parameter α is defined in the range [0, log N] and that for α = 0 all the search/overlapping pattern bits are protected, and for α = log N all bits are leaked. Also for larger x values, less volume pattern bits are leaked-e.g., for value x = N no volume pattern bits are leaked.</p><p>Construction of SEAL(α, x). SEAL(α, x) is defined similarly with SE (see Section 2) and has algorithms/protocols Setup and Search. Our construction is described in <ref type="figure" target="#fig_7">Figure 6</ref>.</p><formula xml:id="formula_19">(st C , I ) ← SETUP(1 λ , D)</formula><p>1: Let D be the input dataset and let W be the set of keywords in D.</p><formula xml:id="formula_20">2: D ← ADJ-PADDING(x, D).</formula><p>Parameter x is public.</p><p>3: Let M be an array of N entries storing (w, id) pairs of D in lexicographic order and i w be the index of w's first occurrence in M. 4: (T, σ odict ) ← ODICTSETUP(1 λ , N). 5: for all w ∈ W do 6:</p><p>Let cnt w = |D(w)|.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>7:</head><p>(σ odict , T ) ↔ ODICTINSERT((w, i w ||cnt w , σ odict ), T ).</p><formula xml:id="formula_21">8: (σ oram , EM) ← ADJ-ORAMINITIALIZE(1 λ , M, α).</formula><p>Parameter α is public.</p><p>9: st C = (σ oram , σ odict ) and I = (EM, T ).</p><formula xml:id="formula_22">10: return (st C , I ). ((X , st C ), I ) ↔ SEARCH((st C , w), I )</formula><p>1: Parse I as (EM, T ) and st C as (σ odict , σ oram ) and let X be empty. </p><formula xml:id="formula_23">((v i , σ oram ), EM) ↔ ADJ-ORAMACCESS((read, i, ⊥, σ oram , α), EM).</formula><p>Parameter α is public.</p><p>6: </p><formula xml:id="formula_24">X ← X ∪ v i . 7: return (X , st C , I ).</formula></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>SEAL's setup takes as input dataset D. Parameters α and</head><p>x are considered public and we do not provide them as input explicitly. First, it uses ADJ-PADDING(x, D) in order to transform D to a new dataset with at most log x N + 1 distinct results sizes (see Line 2 of setup). Then, it sorts all the (w, id) pairs in lexicographical order (see Line 3 of setup) and places them sequentially in a memory array M which is then given as input to the ADJ-ORAMINITIALIZE algorithm (see Line 8 of setup). The sorting guarantees that all (w, id) for the same keyword w will be placed in consecutive memory locations. All entries for w can then be retrieved if one knows the index of the first appearance of w and the size of the padded list |D(w)|. For every keyword w, this information is stored in an oblivious dictionary T (see Line 7 of setup).</p><p>SEAL's search takes as input the queried keyword w, client's secret state st C and the encrypted index I , which contains the small oblivious memories EM 1 , . . . as well as the oblivious dictionary T . For a given queried keyword w, the client first performs an access to the oblivious dictionary to retrieve the index of the first appearance of w in M and the padded result size (cnt w ) (see Lines 2-3 of search). Then, it performs cnt w accesses in the ADJ-ORAM-α in order to retrieve the result X (see Lines 4-7 of search). Note that, due to padding, X may contain "dummy" records which will be filtered out by the client afterwards.</p><p>Leakage definition for SEAL(α, x). SEAL(α, x) is secure according to the standard SE/OSE definition described in Section 2 with the following leakage functions</p><formula xml:id="formula_25">L α,x 1 (D) = (N, α, x) and L α,x 2 (D, w) = D x α (w) ,</formula><p>where D x α (w) contains the α most significant bits of the aliases of the document identifiers in the padded list D(w) as output by algorithm ADJ-PADDING(x, D). For the rest of the paper we simply denote these leakages as L 1 and L 2 .</p><p>Theorem 2 Assuming that ODICT is a secure oblivious data structure according to <ref type="bibr" target="#b48">[50]</ref> (Def. 1) and ADJ-ORAM-α is secure according to Def. 2, then SEAL(α, x) is (L 1 , L 2 )-secure according to Def. 1.</p><p>ADJ-ORAM-α is secure-our proof uses simulator algorithms ADJ-SIMORAMINITIALIZE and ADJ-SIMORAMACCESS. The security parameter λ is given.</p><p>The SimSetup takes as an input L 1 = (N, α, x). SimSetup initializes (T, σ odict ) ← ODICTSETUP(1 λ , N) and it inserts N random entries of the form (w, i w ||cnt w ) in the oblivious dictionary T using ODICTINSERT. Then, it computes N = x · N. Finally, it uses ADJ-SIMORAMINITIALIZE(1 λ , N , α) to create the encrypted memory EM and state σ oram .</p><p>The SimSearch algorithm takes as an input L 2 and performs one random access in the oblivious dictionary T using ODICTSEARCH, and calls |D x α (w)| times the ADJ-SIMORAMACCESS with input the α-bit identifiers in D x α (w) (D x α (w) has the required leakage for ADJ-SIMORAMACCESS). Then, the simulator updates EM, T and the states σ odict , and σ oram .</p><p>Asymptotic performance. Let (T (n),C(n), S(n)) be the access complexity, client-space complexity and server-space complexity respectively of the underlying ORAM used and let (t(n), c(n), s(n)) be the access complexity, client-space complexity and server-space complexity respectively of the underlying oblivious dictionary used. The server space required is always S(x · N) + s(N). Now, assuming the client keeps, along with the oblivious dictionary state, the ORAM states locally, the search complexity for a keyword w is</p><formula xml:id="formula_26">t(N) + x · |D(w)| · T x · N 2 α</formula><p>and the client space is 2 α ·C(x · N/2 α ) + c(N). Assuming the client does not keep ORAM states locally and just downloads and re-encrypts to the server, the search complexity for w is</p><formula xml:id="formula_27">t(N) + x · |D(w)| · max T x · N 2 α ,C x · N 2 α</formula><p>and the client space is just c(N). Whether one chooses to store the local states locally or outsource them depends on the parameter α. For small values of α it is better to keep them locally, while for larger values of α it might worth outsourcing. Implementing ADJ-ORAM-α. We implement each small ORAM in ADJ-ORAM-α with Path-ORAM <ref type="bibr" target="#b44">[46]</ref>. Recall that the cost of Path-ORAM for accessing n blocks of size B is B log n for accessing the path and O(log 3 n) for recursively updating the position map. In our case we apply Path-ORAM on N/2 a blocks of size around 2 log N bits (log N bits for storing keyword w and log N bits for storing the id) and therefore our total cost is O(log N log(N/2 a ) + log 3 (N/2 a )).</p><p>Implementing SEAL(α, x). For SEAL(α, x), apart from ADJ-ORAM-α as described above, we also use an oblivious dictionary ODICT (for storing i w ||cnt w ) implemented with an oblivious AVL tree <ref type="bibr" target="#b48">[50]</ref> (this requires b log 2 N additional additive cost where b is the bitsize of i w ||cnt w ). In case the number of keywords/attributes |W| in small, we choose to keep the dictionary locally-this requires around 3|W| log N bits which in practice is a few megabytes and is a common assumption in Dynamic SE <ref type="bibr" target="#b6">[8,</ref><ref type="bibr" target="#b8">10,</ref><ref type="bibr" target="#b19">21,</ref><ref type="bibr" target="#b45">47]</ref>. Our experiments in the next section assume the dictionary is kept locally. Note that even if we do not keep the dictionary locally, we only require one oblivious access to it per query w. This is most of the times subsumed by the required |D(w)| ADJ-ORAM-α queries, especially when |D(w)| is large (e.g., Ω(log 2 N)). In any case we can always reduce the above cost with an adjustable oblivious dictionary at the expense of leaking α bits of the search pattern. Finally, in case the worst-case overhead of SEAL(α, x) becomes higher than sequential scan (which has no leakage), we perform a sequential scan.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.4">New Constructions for Point/Join Queries</head><p>In Section 3 we presented/reviewed three constructions for point and join queries on encrypted databases that use SE as a black box: (i) POINT-SE, a construction for point queries on encrypted data; (ii) JOIN-SE and JOIN-SE-PRECOMPUTE, two constructions for join queries on encrypted data. Our proposed new constructions reduce the leakage of the above constructions by using SEAL <ref type="bibr">(α, x)</ref>, instead of simple SE. By doing this replacement we have the following constructions, for various parameters of α and x,</p><p>1. POINT-ADJ-SE, and 2) JOIN-ADJ-SE.</p><p>Note that JOIN-ADJ-SE can be instantiated either by using JOIN-SE or JOIN-SE-PRECOMPUTE as basis.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.5">New Constructions for Range Queries</head><p>The first adjustable construction that we propose for range queries, RANGE-ADJ-SE-(a, x), is based on the "naive" construction RANGE-SE from Section 3.3, where instead of simple SE we use SEAL(a, x).</p><p>Our second construction, RANGE-SRC-SE-(a, x) comprises two modifications of LOGARITHMIC-SRC-I <ref type="bibr" target="#b13">[15]</ref> so that the potential attack presented in Section 3.3 is mitigated. Recall the attack works by exploiting volumes exposed by tree T 1 (the tree T 1 stores metadata required to search tree T 2 ).</p><p>Our first modification of LOGARITHMIC-SRC-I is a simple one: Instead of outsourcing tree T 1 using SE, keep tree T 1 locally unencrypted and therefore previously exposed volume information will not be available. The only downside is the O(|W|) client storage that is required to store T 1 , where W is the set of values of the range attribute. In practice this storage is minimal, e.g., none of the ranges of the attributes shown in <ref type="table" target="#tab_3">Table 1</ref> of our evaluation exceed 1MB. (Of course, if strictly necessary, we can outsource tree T 1 to the server via an oblivious dictionary without any leakage, increasing the search time by a polylog factor.) RANGE-SRC-SE-(α, x). However, the above modification addresses the leakage only in T 1 . But T 2 can also leak information. For example, (a) if the same tree node is accessed twice, there is nonzero probability that the same range is being queried, and (b) the result size (or an upper bound of it) is leaked from accessing T 2 . To reduce the effect of leakages (a) and (b), one could reduce the number of sizes observed by the adversary by implementing the encrypted index for T 2 using SEAL(α, x) instead of simple SE.</p><p>Our second modification that yields our final scheme RANGE-SRC-SE-(α, x) does almost that, but it does not use ADJ-PADDING for reducing the volume pattern leakage-this would blow up the space to O <ref type="figure">(xN log(xN)</ref>). Instead RANGE-SRC-SE-(α, x) reduces the number of sizes that are being observed to log x N + 1 by storing only as many equally distributed levels from T 2 . E.g., for x = 2 all levels are stored, for x = 4 half of the levels are stored, while for x = 16 one fourth of the levels are stored. Note that by this approach the search complexity is O(x · r) and the space is O <ref type="figure">(N log x N)</ref>.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5">Evaluation Against Attacks</head><p>To benchmark the effectiveness of our proposed adjustable constructions POINT-ADJ-SE, JOIN-ADJ-SE and RANGE-SRC-SE, we could use existing state-of-the-art leakage-abuse attacks <ref type="bibr" target="#b9">[11,</ref><ref type="bibr" target="#b11">13,</ref><ref type="bibr" target="#b23">25,</ref><ref type="bibr" target="#b26">28,</ref><ref type="bibr" target="#b30">32,</ref><ref type="bibr" target="#b34">36]</ref>. However, these attacks are very sensitive to the exact overlapping or volume pattern (e.g., for ordering the records in range queries), which is not available in our adjustable constructions.</p><p>We introduce instead a new class of attacks where the adversary tries to work with only the available bits of leakage, and at a high level, tries to guess the rest of the bits. Also, our adversary is quite powerful, having plaintext access to the input dataset. We stress that this is a "heavy" benchmark that already covers known attacks <ref type="bibr" target="#b9">[11,</ref><ref type="bibr" target="#b11">13,</ref><ref type="bibr" target="#b23">25,</ref><ref type="bibr" target="#b26">28,</ref><ref type="bibr" target="#b30">32,</ref><ref type="bibr" target="#b34">36]</ref>. This is because if our adjustable constructions reduce the success rate of such a powerful attacker, a more realistic attacker with partial knowledge of the dataset would perform even worse (assuming the same attack strategy is followed). We now describe the attacker model in detail.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5.1">Attacker Model</head><p>Our model considers a single-client setting (we do not support a multi-client scenario with multiple parties accessing the data). We assume that our adversary: (i) is the system provider that hosts the encrypted database (including the encrypted index) and performs the encrypted query execution; (ii) is honest-but-curious (i.e., tries to infer information during the execution of the protocol, but does not deviate from the protocol, e.g., to give a "tampered" answer); (iii) has full visibility of the server-side execution and memory; (iv) acquires all the possible leaked information from query executionobserving all possible queries at least once; (v) has access to 100% of the plaintext database. Our adversary has two goals:</p><p>1. First, to perform a query recovery attack, namely decrypting the client encrypted queries;</p><p>2. Second, to perform a database recovery attack, that requires to map plaintext values (for the queried attribute) to the tuples of the encrypted database.</p><p>We stress that this a strong attacker model, one that we believe is beyond most real-world adversaries' capabilities. This was a deliberate design decision as our main goal is to evaluate our proposed mitigation techniques against a strong adversary. On the other hand, our analysis does not capture cases where the attacker has information about the query distribution.</p><p>Note here that a database recovery attack in the case of SE (α = log N) is trivial, since the identifiers of the encrypted records reveal the desired mapping to the plaintext records directly. This task becomes more challenging for smaller values of α where this information is not given in its entirety.</p><formula xml:id="formula_28">QR SR ← QueryRecoveryAttack(T , {t q , |q|} q∈Q )</formula><p>Input: Plaintext tuples T and tokens t q along with their volumes |q|. Output: The success rate QR SR of the attack.</p><p>1: Set T ← ADJ-Padding(x, T ).</p><p>2: Set CORRECT = 0. 3: for each token t q do 4:</p><p>Choose q at random from the set {q : |T (q )| = |q|}.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>5:</head><p>Remove q from T .</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>6:</head><p>if q is the correct decryption for t q then 7:</p><p>CORRECT++.</p><p>8: return CORRECT/|Q|. In addition, note that the database recovery attack becomes also trivial if SEAL does not re-randomize or assign new tuple ids to encrypted tuples; which is not the case in SEAL (see Line 6 of the used ADJ-ORAM-α).</p><p>For our experiments, we define the query recovery success rate QR SR as the ratio of the number of correctly decrypted queries over the total number of considered queries. We also define the database recovery success rate DR SR as the ratio of the number of encrypted tuples that have been correctly mapped to the plaintext tuples.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5.2">Experimental Setup</head><p>Our experiments were conducted on a 64-bit machine with an Intel Xeon E5-2676v3 and 64 GB RAM. We utilized the JavaX.crypto and the bouncy castle library <ref type="bibr">[2]</ref> for the cryptographic operations. Our java implementation does not use hardware supported cryptographic operations. However, this does not affect our conclusions. The use of hardware supported cryptographic operations can further improve the absolute time for construction and search, but it will not affect the comparison for different parameters α and x.</p><p>We consider the following two datasets in our experimental evaluation. For attacking POINT-ADJ-SE-(α, x), we use a real dataset consisting of 6,123,276 tuples with 22 attributes of reported incidents of crime in Chicago <ref type="bibr" target="#b1">[3]</ref>. For attacking POINT-ADJ-SE-(α, x), JOIN-ADJ-SE-(α, x), and RANGE-SRC-SE-(α, x), we used the TPC-H benchmark <ref type="bibr" target="#b2">[4]</ref> with scaling factor 0.1 which is widely used by the database community <ref type="bibr" target="#b3">5</ref> . TPC-H consists of eight separate tables (PART, SUPPLIER, PARTSUPP, CUSTOMER, NA-TION, LINEITEM, REGION, ORDERS). Our attacks take as input the leakage of all possible queries (worst-case leakage). The same attacks can be run with less queries, leading to lower success rate. When evaluating the performance of</p><formula xml:id="formula_29">DR SR ← DatabaseRecoveryAttack(T , enc(T ), {t q , S q } q∈Q )</formula><p>Input: Plaintext tuples T , encrypted tuples enc(T ) and tokens t q along with respective set S q of encrypted tuples (and their α-bit identifiers). Output: The success rate DR SR of the attack.</p><p>1: Set T ← ADJ-Padding(x, T ).</p><p>2: Set CORRECT = 0. 3: for each pair (t q , S q ) do 4:</p><p>Choose q at random from the set {q : |T (q )| = |S q |}.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>5:</head><p>for each encrypted tuple e ∈ S q do 6:</p><p>Let id be the α-bit identifier of e.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>7:</head><p>Choose at random a tuple t from enc(T ) that has id as the first α bits of its identifier.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>8:</head><p>Remove t from enc(T ).</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>9:</head><p>if encrypted tuple t has value q at the queried attribute then 10:</p><p>CORRECT++.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>11:</head><p>Remove q from T .  SEAL(α, x) we store the oblivious dictionary locally.</p><p>We denote with x = ⊥ the lack of padding, where the attacker can observe up to N distinct result sizes.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5.3">Attacking POINT-ADJ-SE</head><p>We evaluate the effectiveness of POINT-ADJ-SE-(α, x) against our new query/database recovery attacks. In both attacks we consider one attribute of one table at a time.</p><p>Our query recovery attack (see <ref type="figure" target="#fig_8">Figure 7)</ref> is very simple and uses only volume pattern leakage. Having access to the plaintext table T , the adversary computes the new padded table for the queried attribute (Line 1 in <ref type="figure" target="#fig_8">Figure 7</ref>) using the padding parameter x. Now, for a given encrypted query q with size |q| the adversary uses T to find the candidate plaintext values which have size |q|, and chooses one of them at random (see Line 4 in <ref type="figure" target="#fig_8">Figure 7</ref>). Note that the higher the value of x is, the larger the set of possible values in Line 4 is therefore reducing the success rate of the attack.</p><p>The database recovery (see <ref type="figure" target="#fig_10">Figure 8</ref>) works as follows. First the adversary decrypts which keyword we are querying, as before-say this keyword is q . Now, the goal is to map the value q to the correct encrypted tuples in enc(T ), where enc(T ) is the encrypted database produced by the SETUP algorithm of SEAL. The adversary knowing from L 2 leakage the α-bits of each returned encrypted tuple, chooses at random for each of them one tuple from enc(T ) with same α bits as prefix and maps q to this tuple. Finally, the adversary removes the chosen tuples t from enc(T ). The adversary is successful if after this process the encrypted tuple t has value q at the queried attribute. Clearly, the smaller α is, the more bits the adversary will have to guess (the larger the set of tuples with same α bits as prefix is) and therefore the less successful the attack is going to be. In all figures, we report the attacker's query recovery success rate if she just maps encrypted queries to plaintext values at random, i.e., 1/|W|-ideally, the success rate of our attack should be as close as possible to this "Random" approach.</p><p>In <ref type="figure">Figure 9</ref>(a), for x = 2 (only a 2× overhead in search time and storage), we see that our scheme forces the attacker to perform very close to "Random" for 14 out of 16 attributes. We observe that QR SR for attribute 8 is close to Random for x = 16, while for attribute 4 greater values of x are needed. Let us look why this is the case for, say, attribute 8: There are only three values that can be queried with highly-skewed result sizes |q 1 | =1, |q 2 | =1,000 and |q 3 | =100,000. Therefore the larger the number of padded sizes is, the more likely it is that each q i will be mapped to a distinct padded size, allowing the attacker to still distinguish them. We observe similar patterns for the tables of TPC-H and we report the results for tables ORDERS and PART in <ref type="figure" target="#fig_0">Figure 10</ref>.</p><p>In <ref type="figure">Figure 9</ref>(b) we repeat the same experiment for the 22 attributes of the crime dataset, and we observe that in 17 out of 22 attributes for x = 4 (up to 4× performance degradation) the attacker's QR SR significantly drops and is close to the Random approach. For attributes 6, 8, 10, 12, 15 greater values of x are needed again due to the small number of values that these attributes have. Finally, we observe that in attributes 15 and 18, QR SR is higher for x = 64 than for x = 4, which is counterintuitive. This is because the query sizes of the values in these attributes are distributed in a way that for x = 4 there are less distinct sizes than for x = 64. Database recovery attack evaluation. The database recovery attack is based on the query recovery one. Thus, due to lack of space we focus on the 22 attributes of the crime dataset in which QR SR is higher than the one in the TPC-H dataset. <ref type="figure" target="#fig_0">Figure 11</ref> shows the attacker's success rate for the database recovery attack (DR SR ) for α = (17, 19, 21, 23) (α = 23 corresponds to SEAL(log N, x)) and for x = ⊥ and x = 2. Recall that in our threat model the attacker has plaintext access to the input dataset, so for the database recovery attacks we report as a reference point a greedy strategy that the adversary may follow, in which she maps all encrypted tuples to the most frequent plaintext value (guessing heuristically). E.g., for a binary attribute if the most frequent value appears in the 70% of the tuples/tuple-ids then the adversary achieves DR SR = 70% by following the greedy strategy. Ideally, the goal is to find α as close as possible to log N and the smallest possible value of x, while DR SR is below the greedy strategy. As is shown in <ref type="figure" target="#fig_0">Figure 11</ref> for α = log N − 2 = 21 and x = 2 the attacker's success rate is always below the success rate of the greedy strategy. In <ref type="figure" target="#fig_0">Figure 12</ref>, we provide a more detailed evaluation for 4 specific attributes of the crime dataset for α ∈ [0, log N] and x = ⊥, 2, 3, 4.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5.4">Attacking JOIN-ADJ-SE</head><p>We evaluate the effectiveness of JOIN-ADJ-SE-(α, x) using the database recovery attack proposed for point queries (see <ref type="figure" target="#fig_10">Figures 8)</ref>. Since the database schema and the size of each table are usually not considered private information, we do not consider join query recovery attacks. , but for α = log N − 1 and x = 2, DR SR drops below 6%. We conducted all the possible foreign-key joins and we observe the same pattern.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5.5">Attacking RANGE-SRC-SE</head><p>We evaluate the effectiveness of RANGE-SRC-SE-(α, x) scheme for various x against slightly modified versions of the attacks for point queries <ref type="figure" target="#fig_8">(Figures 7 and 8</ref>). In particular in Line 2 of both <ref type="figure" target="#fig_8">Figure 7</ref> and 8, we do not perform padding but we recreate T 2 in plaintext with only log x N + 1 evenly distributes levels. We report as a baseline a scheme that does not perform padding but hides the entire overlapping pattern leakage. For the case of query recovery attack we set α = log N for RANGE-SRC-SE-(α, x), since varying α does not affect the effectiveness of the attack.    <ref type="table" target="#tab_3">Table 1</ref> presents for each attribute the number of all possible range queries and the number of the correctly decrypted ones using the baseline (Column 3 of <ref type="table" target="#tab_3">Table 1</ref>), and RANGE-SRC-SE for x = 2, x = 4 and x = 8 (Columns 4, 5, 6 of <ref type="table" target="#tab_3">Table 1</ref>). We observe that x = 8 drastically reduces the number of correctly decrypted queries. We omit the presentation of the database recovery attacks for ranges, since DR SR is primarily based on the result of the query recovery attack, and we see in <ref type="table" target="#tab_3">Table 1</ref> that even for x = 2 QR SR is small.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5.6">Efficiency of Adjustable Constructions</head><p>In <ref type="figure" target="#fig_0">Figure 14</ref>(a), we fix a database with size 2 22 records, and we show the largest slowdown (across all the possible result sizes-1, 2, 3 . . . N) of SEAL(α, x) compared to a SE scheme which has the maximum leakage. Similarly, in <ref type="figure" target="#fig_0">Figure 15(a)</ref>, we show the smallest speedup achieved by our construction SEAL(α, x) (for various values of α and x) compared to an approach that performs sequential scan and has no leakage. Because, we consider the worst-case speedup from the most secure solution (α = 0 and x = N), sequential scan provides a more efficient approach than the use of worst-case padding with ORAM which is also achieves the same security. We do an analysis of these plots in the next section. We highlight again that neither SE nor sequential scan are competitors of SEAL, since (i) SEAL encapsulates those schemes (e.g., for α = 0 and x = N becomes sequential scan and for α = log N and x = ⊥ becomes SE scheme), and (ii)  for non-trivial α and x they provide different security level. We provide those experiments only as reference points of SEAL's performance compared with the most and least secure solutions. In addition, <ref type="figure" target="#fig_0">Figures 14(a</ref>  <ref type="figure" target="#fig_0">Figure 14</ref>(b) and 15(b) evaluate RANGE-ADJ-SE-(0, x) and RANGE-SRC-SE-(log N, x). Note that both schemes hide the overlapping pattern, the first by using ORAM, the second by construction. Also both schemes are using the same x, allowing the adversary to observe the same number of different sizes (but not necessarily the same sizes). Note that RANGE-SRC-SE performs much better than RANGE-ADJ-SE. This is to be expected given RANGE-SRC-SE has more leakage-the search pattern, which however we do not know how to use in an attack here. <ref type="bibr" target="#b4">6</ref> We provide additional experiments regarding the performance of our SEAL scheme for the crime dataset. We show experiments for values of α and x that significantly mitigate the proposed attacks and achieve good performance (as we also discuss in the next section). In <ref type="figure" target="#fig_0">Figure 16</ref>, we evaluate the required index size and construction time of SEAL for x = ⊥, 2, 3, 4. Finally, in <ref type="figure" target="#fig_0">Figures 17 and 18</ref> we evaluate the end-to-end search time of our SEAL scheme for two attributes of the crime dataset for α = 20, 21, 22, 23 and x = ⊥, 2, 3, 4. </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5.7">Setting Parameters α and x in Practice</head><p>From the above findings, it should be evident that finding appropriate parameter values is heavily data-dependent. In particular, it depends on the size of the database, number of distinct values, and the distribution of a given searchable attribute. One way for users to tune these parameters is to use our attacks as an estimator, e.g., provide their databases as input and try different values of α and x in order to set their desirable success rate thresholds against our attacks (before outsourcing the database). Below, we provide more general guidelines on how one can set these parameters based on our evaluation.</p><p>Setting parameter x. Parameter x solely controls the success rate of the query recovery attack for point, range (RANGE-SRC scheme) and group-by queries. The query recovery attack tries to map the encrypted queries to plaintext ones based on the volume leakage. For instance, if a database contains only two values a and b and the volume of the former value is greater than the latter, i.e., |q(a)| &gt; |q(b)|, the adversary can correctly map with certainty the encrypted query with the greater volume to a and the other one to b. Now, assuming that both values have the same volume, the adversary cannot distinguish the encrypted queries and is forced to guess. Increasing the parameter x, we try to have more queries with the same size in order to increase the adversary's uncertainty, but finding a good value of x also depends on the distribution of the searchable value. For instance, attribute 9 of the crime dataset is a binary attribute (it has 2 distinct values), in which |q(a)| = 4374175 and |q(b)| = 1749100. We observe that for x = 2 these queries still will have different volumes, but for x = 3 they obtain the same volume (i.e., |q (a)| = |q (b)| = 4782969) and they will be indistinguishable. Attribute 10 of the crime dataset, which is also a binary attribute, has |q(a)| = 5337429 and |q(b)| = 785846 and in order to make these sizes indistinguishable higher values of x are needed, i.e., x = 14. Again, this kind of analysis can be performed locally, prior to outsourcing the dataset.</p><p>Setting parameter α. Parameter α affects the success rate of the database recovery attacks for point, range (RANGE-SRC scheme), join and group-by queries. The success of this attack firstly depends on the outcome of the query recovery attack. Thus, tuning the parameter x in order to increase the uncertainty of the adversary is very important. Nevertheless, parameter α controls how many tuples are indistinguishable from each other. For example, setting α = log N − 1 our scheme creates N/2 ORAMs of size 2-thus every tuple is indistinguishable from another one (all the tuples that are in the same ORAM are indistinguishable from each other). Therefore, even if the query recovery attack has 100% success rate and we are trying to find the correct mapping of plaintext tuples to encrypted ones, the success rate of this attack will be at most 50% for α = log N − 1. However, in our proposed database recovery attack, we treat the case when encrypted and plaintext tuples have the same searchable value but differ in the rest of the attributes as a success. Due to this, the distribution of an attribute will also affect the success of the database recovery attacks. For instance, for point queries attribute 9 of the crime dataset (which has 2 values-|q(a)| = 4374175 and |q(b)| = 1749100) for x = ⊥ and α = log N − 1 = 22, our attack has success rate around 87%, because the success rate of the query recovery attack is 100% and the adversary has uncertainty only when the same ORAM contains both tuples with value a and b. Finally, we provide some general conclusions from the analysis that we performed on our chosen datasets. We observe that for point and join queries setting α = log N − 3 and x = 4 significantly reduces both QR SR and DR SR (e.g., attributes 4,5 of LINEITEM and attributes 13,14 of crime dataset for point queries; SUPPLIERNATION and CUSTOMERNATION for join queries), while for these values the smallest speedup from sequential scan is more than 262, 000× and the maximum slow-down from SE is 32×. There are rare cases that attributes with skewed distribution and small number of distinct values, e.g., binary attributes, require higher values of x, such as x = 16 or x = 64 (e.g., attribute 9 of LINEITEM and attributes 9,10 of the crime dataset for point queries). In the cases of range queries, we observe that our RANGE-SRC-SE-(log N, x) for x = 8 significantly mitigates our all-powerful query recovery attack (e.g., L_Tax and L_Discount attributethe success rate of the attack drops from 100% below 7% and 2% respectively) and achieves a maximum 48× slowdown from plain RANGE-SE.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="6">Challenges for Dynamic Databases</head><p>Our work only focuses on static databases. We believe that a very interesting problem for future work is to extend this work for dynamic databases, an approach that introduces more leakage and makes the problem more challenging. Towards this goal, we know from the literature of SE how we can support dynamic point queries (there is an extensive literature on dynamic schemes that achieve forward/backward privacy <ref type="bibr" target="#b8">[10,</ref><ref type="bibr" target="#b12">14,</ref><ref type="bibr" target="#b17">19,</ref><ref type="bibr" target="#b19">21,</ref><ref type="bibr" target="#b31">33,</ref><ref type="bibr" target="#b42">44]</ref>-the state-of-the-art security definitions for dynamic SE. A first challenge towards dynamic databases is to study if these security definitions for point queries are suitable for other query types (such as range, joins and group-by queries), as well as to find schemes that achieve those definitions. A second challenge is that prior ORAM and our ADJ-ORAM schemes require initializing at setup the worst-case memory size-modifying them for the dynamic case (without having to set a-priori a large upper bound) is a non-trivial problem. A third challenge is how we could efficiently use our ADJ-Padding technique, since new updates will continuously change the distribution of the searchable attribute. Predicting the required padding size (without extra costly bookkeeping) for a certain keyword without knowing future updates would be very challenging.</p><p>One approach for handling dynamic point queries would be to explore whether our ADJ-ORAM can be used as a drop-in replacement in existing dynamic ORAM-based SE schemes (e.g., ORION from <ref type="bibr" target="#b19">[21]</ref>), obtaining a good efficiency/security trade-off. However, this would require addressing the aforementioned second and third challenges. An alternative direction that avoids these challenges is to use existing techniques that transform static SE to dynamic ones (e.g., SD a from <ref type="bibr" target="#b12">[14]</ref>). At a high level, this requires storing the result of N updates in a sequence of log N + 1 separate indexes (with size 2 0 , . . . , 2 log N ), where each update is first stored in the smallest index and whenever two indexes of the same size exist they are downloaded and merged to a larger new index by the client. Search queries are executed at all encrypted indexes independently. Such techniques that periodically rebuild the encrypted indexes do not require defining a maximum capacity during setup. Moreover, they allow the client to update the parameters α and x depending on how the database has evolved. However, the main drawback of this approach is updates, since it has a (amortized) O(log N) update cost. While de-amortization is possible, it is not trivial, especially in our adjustable setting, and we believe that it is a very interesting problem for future work.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="7">Conclusion</head><p>In this work we show the necessity of new defense mechanisms (beyond SE) for encrypted databases. We propose SEAL, a family of new SE schemes with adjustable leakage which can be used for building efficient encrypted databases (for point, range, group-by and joins queries). In our evaluation we show that for our tested datasets SEAL is robust against all-powerful attacks with a reasonable performance overhead. Finally, we believe SEAL can serve as a benchmark for measuring the effectiveness of existing and future leakage-abuse attacks.</p></div><figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_0"><head>Figure 1 :</head><label>1</label><figDesc>Figure 1: SE/OSE real-ideal security experiments.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_1"><head>Figure 2 :</head><label>2</label><figDesc>Figure 2: LOGARITHMIC-SRC [15, 16] consists of a full binary tree over the domain with an extra internal node between every two cousins. Red values denote the number of tuples each node contains (used for the proposed attack).</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_2"><head>Figure 3 :</head><label>3</label><figDesc>Figure 3: ADJ-ORAM-α real-ideal security experiments. With m 0 , m 1 , . . . , we denote the messages exchanged at Line 5 of both experiments.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_3"><head>1</head><label></label><figDesc>: Parse σ as (σ 1 , . . . , σ µ ) and EM as (EM 1 , . . . , EM µ ) where µ = 2 α . 2: Let be the integer representation of the α most significant bits of π k [i] and φ be the integer repre- sentation of the remaining bits of π k [i]. 3: = + 1 and φ</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_4"><head>Figure 4 :</head><label>4</label><figDesc>Figure 4: ADJ-ORAM-α using any ORAM as a black box.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_5"><head>Figure 5 :</head><label>5</label><figDesc>Figure 5: ADJ-Padding-x leading to log x N different sizes.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_6"><head>2 :</head><label>2</label><figDesc>((value, σ odict ), T ) ↔ ODICTSEARCH((w, σ odict ), T ). 3: Parse value as (i w ||cnt w ). 4: for i = i w , . . . , i w + cnt w do 5:</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_7"><head>Figure 6 :</head><label>6</label><figDesc>Figure 6: Our SEAL(α, x) scheme using ADJ-ORAM-α, ADJ-PADDING-x, and an oblivious dictionary as black boxes.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_8"><head>Figure 7 :</head><label>7</label><figDesc>Figure 7: Query Recovery Attack for Point Queries.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_9"><head></head><label></label><figDesc>12: return CORRECT/ ∑ |S q |.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_10"><head>Figure 8 :</head><label>8</label><figDesc>Figure 8: Database Recovery Attack for Point Queries.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_11"><head>Query recovery attack evaluation.</head><label></label><figDesc>Figures 9(a), and 9(b) show the evaluation of POINT-ADJ-SE-(α, x) against the query recovery attack. We only vary x since α does not af- fect the effectiveness of the attack. Figure 9(a) demonstrates the evaluation for the LINEITEM table (TPC-H), while Fig- ure 9(b) presents the results for the Crime dataset.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_12"><head>Figure 10 :</head><label>10</label><figDesc>Figure 9: Query Recovery Attack against POINT-ADJ-SE for various x.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_13"><head>Figure 11 :Figure 12 :</head><label>1112</label><figDesc>Figure 11: Database Recovery Attack against POINT-ADJ-SE for the Crime Dataset. We show all attributes.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_14"><head>Figure 13 :</head><label>13</label><figDesc>Figure 13: Database Recovery Attack for Foreign-key Join Queries for the TPC-H Benchmark.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_15"><head>Figure 15 :</head><label>15</label><figDesc>Figure 15: Speedup from sequential scan.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_16"><head>Figure 17 :</head><label>17</label><figDesc>Figure 16: Index Costs -Crime Dataset</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_17"><head>Figure 18 :</head><label>18</label><figDesc>Figure 18: Search costs -Crime Dataset (Attribute 8)</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_3" validated="false"><head>Table 1 :</head><label>1</label><figDesc></figDesc><table>Query Recovery Attack for Range Queries 
(QR SR = # Correctly Decrypted Queries /#Queries) 

Attack evaluation. We focus on numeric attributes 
PS_SupplyCost from table PARTSUPP; P_Size and 
P_RetailPrice from PART; L_TAX, L_QUANTITY, 
L_DISCOUNT from LINEITEM. </table></figure>

			<note place="foot" n="1"> Note that such implementations have been shown to be susceptible to inference attacks [41] since they leak statistical and order information allowing an attacker to decrypt the actual encrypted records.</note>

			<note place="foot" n="2"> SEAL stands for Searchable Encryption with Adjustable Leakage.</note>

			<note place="foot" n="3"> In Section 5, we report for certain parameters of α and x the performance of SEAL compared with the most secure solution (sequential scan) and the one that leaks access and search patterns (SE scheme). We highlight that both sequential scan and SE are not competitors of SEAL since they provide different security, but we used those two schemes only as reference points.</note>

			<note place="foot" n="5"> We do not provide an evaluation for group-by queries since the results are identical to those for point queries (after observing all the distinct queries).</note>

			<note place="foot" n="6"> Although the search pattern (combined with the access pattern) has been used in recent work by Kornaropoulos et al. [35] to attack RANGE-SE, it is not clear how it can be used for RANGE-SRC-SE-(α, x).</note>
		</body>
		<back>

			<div type="acknowledgement">
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Acknowledgements</head><p>This work was supported in part by NSF awards #1514261 and #1652259, the National Institute of Standards and Technology, Hong Kong RGC grant ECS-26208318, and by a Symantec Research Lab Graduate Fellowship. We thank NortonLifeLock Inc. for its support, Niels Provos for shepherding the paper and the anonymous reviewers for their valuable suggestions and comments.</p></div>
			</div>

			<div type="references">

				<listBibl>

<biblStruct xml:id="b0">
	<monogr>
		<title level="m" type="main">Attack of the week: searchable encryption and the ever-expanding leakage function</title>
		<ptr target="https://blog.cryptographyengineering.com/.Accessed" />
		<imprint>
			<biblScope unit="page" from="2019" to="2025" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b1">
	<monogr>
		<title level="m" type="main">Crimes 2001 to present (city of chicago)</title>
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b2">
	<monogr>
		<title/>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Tpc-H Benchmark</surname></persName>
		</author>
		<ptr target="http://www.tpc.org/tpch" />
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b3">
	<analytic>
		<title level="a" type="main">Order Preserving Encryption for Numeric Data</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Agrawal</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Kiernan</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Srikant</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Y</forename><surname>Xu</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 2004 ACM SIGMOD international conference on Management of data</title>
		<meeting>the 2004 ACM SIGMOD international conference on Management of data</meeting>
		<imprint>
			<publisher>ACM</publisher>
			<date type="published" when="2004" />
			<biblScope unit="page" from="563" to="574" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b4">
	<analytic>
		<title level="a" type="main">Trusteddb: a trusted hardware based database with privacy and data confidentiality</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Bajaj</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Sion</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 2011 ACM SIGMOD International Conference on Management of data</title>
		<meeting>the 2011 ACM SIGMOD International Conference on Management of data</meeting>
		<imprint>
			<publisher>ACM</publisher>
			<date type="published" when="2011" />
			<biblScope unit="page" from="205" to="216" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b5">
	<analytic>
		<title level="a" type="main">Revisiting leakage abuse attacks</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">L</forename><surname>Blackstone</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Kamara</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><surname>Moataz</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. of NDSS</title>
		<meeting>of NDSS</meeting>
		<imprint>
			<date type="published" when="2020" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b6">
	<analytic>
		<title level="a" type="main">Sofos: Forward Secure Searchable Encryption</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Bost</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">CCS</title>
		<imprint>
			<date type="published" when="2016" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b7">
	<analytic>
		<title level="a" type="main">Thwarting leakage abuse attacks against searchable encryption-a formal approach and applications to database padding</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Bost</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P.-A</forename><surname>Fouque</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Cryptology ePrint Archive</title>
		<imprint>
			<date type="published" when="1060" />
		</imprint>
	</monogr>
<note type="report_type">Report</note>
</biblStruct>

<biblStruct xml:id="b8">
	<analytic>
		<title level="a" type="main">Forward and backward private searchable encryption from constrained cryptographic primitives</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Bost</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">B</forename><surname>Minaud</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">O</forename><surname>Ohrimenko</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">CCS</title>
		<imprint>
			<date type="published" when="2017" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b9">
	<analytic>
		<title level="a" type="main">Leakageabuse attacks against searchable encryption</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Cash</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><surname>Grubbs</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Perry</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><surname>Ristenpart</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">CCS</title>
		<imprint>
			<date type="published" when="2015" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b10">
	<analytic>
		<title level="a" type="main">Searchable Symmetric Encryption: Improved Definitions and Efficient Constructions</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Curtmola</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Garay</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Kamara</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Ostrovsky</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Journal of Computer Security</title>
		<imprint>
			<date type="published" when="2011" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b11">
	<analytic>
		<title level="a" type="main">Compromising Privacy in Precise Query Protocols</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><forename type="middle">L</forename><surname>Dautrich</surname><genName>Jr</genName></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><forename type="middle">V</forename><surname>Ravishankar</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 16th International Conference on Extending Database Technology</title>
		<meeting>the 16th International Conference on Extending Database Technology</meeting>
		<imprint>
			<publisher>ACM</publisher>
			<date type="published" when="2013" />
			<biblScope unit="page" from="155" to="166" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b12">
	<analytic>
		<title level="a" type="main">Dynamic searchable encryption with small client storage</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">I</forename><surname>Demertzis</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Ghareh Chamani</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Papadopoulos</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><surname>Papamanthou</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">NDSS</title>
		<imprint>
			<date type="published" when="2020" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b13">
	<analytic>
		<title level="a" type="main">Practical Private Range Search Revisited</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">I</forename><surname>Demertzis</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Papadopoulos</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">O</forename><surname>Papapetrou</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Deligiannakis</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Garofalakis</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">SIGMOD</title>
		<imprint>
			<date type="published" when="2016" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b14">
	<monogr>
		<title level="m" type="main">Practical private range search in depth</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">I</forename><surname>Demertzis</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Papadopoulos</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">O</forename><surname>Papapetrou</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Deligiannakis</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Garofalakis</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><surname>Papamanthou</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2018" />
			<publisher>TODS</publisher>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b15">
	<analytic>
		<title level="a" type="main">Fast searchable encryption with tunable locality</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">I</forename><surname>Demertzis</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><surname>Papamanthou</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">SIGMOD</title>
		<imprint>
			<date type="published" when="2017" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b16">
	<monogr>
		<title level="m" type="main">Efficient searchable encryption through compression</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">I</forename><surname>Demertzis</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Talapatra</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><surname>Papamanthou</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2018" />
			<publisher>PVLDB</publisher>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b17">
	<monogr>
		<title level="m" type="main">Efficient dynamic searchable encryption with forward privacy</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Etemad</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Küpçü</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><surname>Papamanthou</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Evans</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2018" />
			<publisher>PETS</publisher>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b18">
	<analytic>
		<title level="a" type="main">Rich Queries on Encrypted Data: Beyond Exact Matches</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Faber</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Jarecki</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">H</forename><surname>Krawczyk</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Q</forename><surname>Nguyen</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Rosu</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Steiner</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">ESORICS</title>
		<imprint>
			<date type="published" when="2015" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b19">
	<analytic>
		<title level="a" type="main">New constructions for forward and backward private symmetric searchable encryption</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Ghareh Chamani</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Papadopoulos</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><surname>Papamanthou</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Jalili</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">CCS</title>
		<imprint>
			<date type="published" when="2018" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b20">
	<analytic>
		<title level="a" type="main">Software Protection and Simulation on Oblivious RAMs</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">O</forename><surname>Goldreich</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Ostrovsky</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">J. ACM</title>
		<imprint>
			<date type="published" when="1996" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b21">
	<analytic>
		<title level="a" type="main">Perfect block ciphers with small blocks</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">L</forename><surname>Granboulan</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><surname>Pornin</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">International Workshop on FSE</title>
		<imprint>
			<date type="published" when="2007" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b22">
	<monogr>
		<title level="m" type="main">Paterson. Learning to reconstruct: Statistical learning theory and encrypted database attacks</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><surname>Grubbs</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M.-S</forename><surname>Lacharité</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">B</forename><surname>Minaud</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">K</forename></persName>
		</author>
		<imprint>
			<date type="published" when="2019" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b23">
	<analytic>
		<title level="a" type="main">Pump up the volume: Practical database reconstruction from volume leakage on range series</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><surname>Grubbs</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M.-S</forename><surname>Lacharité</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">B</forename><surname>Minaud</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">K</forename><surname>Paterson</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">CCS</title>
		<imprint>
			<date type="published" when="2018" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b24">
	<analytic>
		<title level="a" type="main">Why your encrypted database is not secure</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><surname>Grubbs</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><surname>Ristenpart</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">V</forename><surname>Shmatikov</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 16th Workshop on Hot Topics in Operating Systems</title>
		<meeting>the 16th Workshop on Hot Topics in Operating Systems<address><addrLine>Whistler, BC, Canada</addrLine></address></meeting>
		<imprint>
			<date type="published" when="2017-05-08" />
			<biblScope unit="page" from="162" to="168" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b25">
	<analytic>
		<title level="a" type="main">Encrypted databases: New volume attacks against range queries</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Z</forename><surname>Gui</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">O</forename><surname>Johnson</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">B</forename><surname>Warinschi</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">CCS</title>
		<imprint>
			<date type="published" when="2019" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b26">
	<analytic>
		<title level="a" type="main">Inference attack against encrypted range queries on outsourced databases</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><forename type="middle">S</forename><surname>Islam</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Kuzu</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Kantarcioglu</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 4th ACM conference on Data and application security and privacy</title>
		<meeting>the 4th ACM conference on Data and application security and privacy</meeting>
		<imprint>
			<publisher>ACM</publisher>
			<date type="published" when="2014" />
			<biblScope unit="page" from="235" to="246" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b27">
	<monogr>
		<title level="m" type="main">Encrypted multi-maps with computationally-secure leakage</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Kamara</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><surname>Moataz</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2019" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b28">
	<monogr>
				<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Kamara</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><surname>Moataz</surname></persName>
		</author>
		<title level="m">Sql on structurally-encrypted databases. ASIACRYPT</title>
		<imprint>
			<date type="published" when="2019" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b29">
	<analytic>
		<title level="a" type="main">Structured encryption and leakage suppression</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Kamara</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><surname>Moataz</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">O</forename><surname>Ohrimenko</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">CRYPTO</title>
		<imprint>
			<date type="published" when="2018" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b30">
	<analytic>
		<title level="a" type="main">Generic attacks on secure outsourced databases</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">G</forename><surname>Kellaris</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">G</forename><surname>Kollios</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">K</forename><surname>Nissim</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>O&amp;apos;neill</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">CCS</title>
		<imprint>
			<date type="published" when="2016" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b31">
	<analytic>
		<title level="a" type="main">Forward secure dynamic searchable symmetric encryption with efficient updates</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">K</forename><forename type="middle">S</forename><surname>Kim</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Kim</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Lee</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><forename type="middle">H</forename><surname>Park</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">W.-H</forename><surname>Kim</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">CCS</title>
		<imprint>
			<date type="published" when="2017" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b32">
	<analytic>
		<title level="a" type="main">Data recovery on encrypted databases with k-nearest neighbor query leakage</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">E</forename><forename type="middle">M</forename><surname>Kornaropoulos</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><surname>Papamanthou</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Tamassia</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">2019 IEEE Symposium on Security and Privacy</title>
		<meeting><address><addrLine>San Francisco, CA, USA</addrLine></address></meeting>
		<imprint>
			<publisher>IEEE</publisher>
			<date type="published" when="2019" />
			<biblScope unit="volume">2019</biblScope>
			<biblScope unit="page" from="1033" to="1050" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b33">
	<analytic>
		<title level="a" type="main">The state of the uniform: Attacks on encrypted databases beyond the uniform query distribution</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">E</forename><forename type="middle">M</forename><surname>Kornaropoulos</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><surname>Papamanthou</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Tamassia</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE</title>
		<imprint>
			<biblScope unit="volume">2020</biblScope>
			<date type="published" when="2020" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b34">
	<analytic>
		<title level="a" type="main">Improved reconstruction attacks on encrypted data using range query leakage</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M.-S</forename><surname>Lacharité</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">B</forename><surname>Minaud</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">K</forename><forename type="middle">G</forename><surname>Paterson</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">SP</title>
		<imprint>
			<date type="published" when="2018" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b35">
	<analytic>
		<title level="a" type="main">Frequencysmoothing encryption: preventing snapshot attacks on deterministically encrypted data</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M.-S</forename><surname>Lacharité</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">K</forename><forename type="middle">G</forename><surname>Paterson</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IACR Transactions on Symmetric Cryptology</title>
		<imprint>
			<date type="published" when="2018" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b36">
	<analytic>
		<title level="a" type="main">Inferring the source of encrypted http connections</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Liberatore</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">B</forename><forename type="middle">N</forename><surname>Levine</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">CCS</title>
		<imprint>
			<date type="published" when="2006" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b37">
	<monogr>
		<title level="m" type="main">Full database reconstruction with access and search pattern leakage</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">E</forename><forename type="middle">A</forename><surname>Markatou</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Tamassia</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2019" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b38">
	<analytic>
		<title level="a" type="main">Sometimes-recurse shuffle -almost-random permutations in logarithmic expected time</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">B</forename><surname>Morris</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><surname>Rogaway</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">EUROCRYPT</title>
		<imprint>
			<date type="published" when="2014" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b39">
	<analytic>
		<title level="a" type="main">Inference Attacks on Property-Preserving Encrypted Databases</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Naveed</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Kamara</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><forename type="middle">V</forename><surname>Wright</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">CCS</title>
		<imprint>
			<date type="published" when="2015" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b40">
	<analytic>
		<title level="a" type="main">Panorama: Oblivious ram with logarithmic overhead</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Patel</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">G</forename><surname>Persiano</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Raykova</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">K</forename><surname>Yeo</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">FOCS</title>
		<imprint>
			<date type="published" when="2018" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b41">
	<monogr>
				<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><forename type="middle">A</forename><surname>Popa</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><surname>Redfield</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">N</forename><surname>Zeldovich</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">H</forename><surname>Balakrishnan</surname></persName>
		</author>
		<title level="m">CryptDB: Protecting Confidentiality with Encrypted Query Processing</title>
		<imprint>
			<date type="published" when="2011" />
		</imprint>
	</monogr>
	<note>SOSP</note>
</biblStruct>

<biblStruct xml:id="b42">
	<analytic>
		<title level="a" type="main">Practical Dynamic Searchable Encryption with Small Leakage</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">E</forename><surname>Stefanov</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><surname>Papamanthou</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">E</forename><surname>Shi</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">NDSS</title>
		<imprint>
			<date type="published" when="2014" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b43">
	<monogr>
		<title level="m" type="main">Fastprp: Fast pseudo-random permutations for small domains</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">E</forename><surname>Stefanov</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">E</forename><surname>Shi</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2012" />
			<publisher>IACR</publisher>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b44">
	<analytic>
		<title level="a" type="main">Path Oram: An Extremely Simple Oblivious Ram Protocol</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">E</forename><surname>Stefanov</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Van Dijk</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">E</forename><surname>Shi</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><surname>Fletcher</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">L</forename><surname>Ren</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">X</forename><surname>Yu</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Devadas</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">CCS</title>
		<imprint>
			<date type="published" when="2013" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b45">
	<analytic>
		<title level="a" type="main">Practical backward-secure searchable encryption from symmetric puncturable encryption</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S.-F</forename><surname>Sun</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">X</forename><surname>Yuan</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><forename type="middle">K</forename><surname>Liu</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Steinfeld</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Sakzad</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">V</forename><surname>Vo</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Nepal</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">CCS</title>
		<imprint>
			<date type="published" when="2018" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b46">
	<monogr>
		<title level="m" type="main">Processing analytical queries over encrypted data</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Tu</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><forename type="middle">F</forename><surname>Kaashoek</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Madden</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">N</forename><surname>Zeldovich</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2013" />
			<publisher>PVLDB</publisher>
			<biblScope unit="volume">6</biblScope>
			<biblScope unit="page" from="289" to="300" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b47">
	<analytic>
		<title level="a" type="main">Differentially private oblivious ram</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Wagh</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><surname>Cuff</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><surname>Mittal</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings on Privacy Enhancing Technologies</title>
		<meeting>on Privacy Enhancing Technologies</meeting>
		<imprint>
			<date type="published" when="2018" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b48">
	<analytic>
		<title level="a" type="main">Oblivious data structures</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">X</forename><forename type="middle">S</forename><surname>Wang</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">K</forename><surname>Nayak</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><surname>Liu</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><surname>Chan</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">E</forename><surname>Shi</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">E</forename><surname>Stefanov</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Y</forename><surname>Huang</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">CCS</title>
		<imprint>
			<date type="published" when="2014" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b49">
	<monogr>
		<title level="m" type="main">All Your Queries Are Belong to Us: The Power of File-Injection Attacks on Searchable Encryption</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Y</forename><surname>Zhang</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Katz</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><surname>Papamanthou</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2016" />
		</imprint>
	</monogr>
</biblStruct>

				</listBibl>
			</div>
		</back>
	</text>
</TEI>
