<?xml version="1.0" encoding="UTF-8"?>
<TEI xmlns="http://www.tei-c.org/ns/1.0" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
xsi:schemaLocation="http://www.tei-c.org/ns/1.0 /Users/atharsefid/Desktop/grobid-0.5.3/grobid-home/schemas/xsd/Grobid.xsd"
 xmlns:xlink="http://www.w3.org/1999/xlink">
	<teiHeader xml:lang="en">
		<encodingDesc>
			<appInfo>
				<application version="0.5.3" ident="GROBID" when="2020-09-29T04:12+0000">
					<ref target="https://github.com/kermitt2/grobid">GROBID - A machine learning software for extracting information from scholarly documents</ref>
				</application>
			</appInfo>
		</encodingDesc>
		<fileDesc>
			<titleStmt>
				<title level="a" type="main">The Industrial Age of Hacking The Industrial Age of Hacking</title>
			</titleStmt>
			<publicationStmt>
				<publisher/>
				<availability status="unknown"><licence/></availability>
				<date>August 12-14, 2020</date>
			</publicationStmt>
			<sourceDesc>
				<biblStruct>
					<analytic>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Timothy</forename><surname>Nosco</surname></persName>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Zechariah</forename><surname>Clark</surname></persName>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Davy</forename><surname>Marrero</surname></persName>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Tim</forename><surname>Nosco</surname></persName>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Jared</forename><surname>Ziegler</surname></persName>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Zechariah</forename><surname>Clark</surname></persName>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Andrew</forename><surname>Barbarello</surname></persName>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">W</forename><forename type="middle">Michael</forename><surname>Petullo</surname></persName>
						</author>
						<author>
							<affiliation key="aff0">
								<orgName type="laboratory">United States Army</orgName>
								<orgName type="institution">National Security Agency</orgName>
								<address>
									<addrLine>Jared Ziegler</addrLine>
								</address>
							</affiliation>
						</author>
						<author>
							<affiliation key="aff1">
								<orgName type="institution">National Security Agency</orgName>
							</affiliation>
						</author>
						<title level="a" type="main">The Industrial Age of Hacking The Industrial Age of Hacking</title>
					</analytic>
					<monogr>
						<title level="m">Proceedings of the 29th USENIX Security Symposium</title>
						<meeting>the 29th USENIX Security Symposium						</meeting>
						<imprint>
							<date type="published">August 12-14, 2020</date>
						</imprint>
					</monogr>
					<note>This paper is included in the Open access to the Proceedings of the 29th USENIX Security Symposium is sponsored by USENIX. United States Navy Davy Marrero United States Navy Todd Finkler United States Air Force</note>
				</biblStruct>
			</sourceDesc>
		</fileDesc>
		<profileDesc>
			<textClass>
				<keywords>
					<term>, United States Navy</term>
					<term>Todd Finkler, United States Air Force</term>
					<term>Andrew Barbarello, United States Navy</term>
					<term>W Michael Petullo, United States Army</term>
				</keywords>
			</textClass>
			<abstract>
				<p>There is a cognitive bias in the hacker community to select a piece of software and invest significant human resources into finding bugs in that software without any prior indication of success. We label this strategy depth-first search and propose an alternative: breadth-first search. In breadth-first search, humans perform minimal work to enable automated analysis on a range of targets before committing additional time and effort to research any particular one. We present a repeatable human study that leverages teams of varying skill while using automation to the greatest extent possible. Our goal is a process that is effective at finding bugs; has a clear plan for the growth, coaching, and efficient use of team members; and supports measurable , incremental progress. We derive an assembly-line process that improves on what was once intricate, manual work. Our work provides evidence that the breadth-first approach increases the effectiveness of teams.</p>
			</abstract>
		</profileDesc>
	</teiHeader>
	<text xml:lang="en">
		<body>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="1">Introduction</head><p>Can we build a better vulnerability discovery process? Many researchers have proposed tools that aim to aid human work, including approaches that apply symbolic execution, fuzzing, taint tracing, and emulation to the problem of bug finding. These techniques automate bug finding in the sense that, with some up-front cost, they carry out a search over time of software states with little need for human intervention. The goal of each refinement or invention is to increase the effectiveness of tools when they are used on real software. Yet finding vulnerabilities at scale still appears out of reach, partly due to the human effort required to effectively setup automated tools.</p><p>Our work focuses on human processes that build on a foundation of automation. We choose to focus on autonomous technologies (as opposed to other vulnerability discovery techniques such as static analysis) because we view them as holding great promise for scalability. However, we by no means discourage the use of other techniques, either alone or in connection with autonomy.</p><p>We propose a minor change to Votipka's process <ref type="bibr" target="#b39">[40]</ref> by creating a deliberate software selection step we call targeting. We encourage novice hackers to perform a breadth-first search of potential software targets to accomplish only the essential-but-preliminary tasks that allow automated analysis. We suggest bringing in more experienced hackers to perform a deeper but more costly analysis of select software only once novices have tried and failed with automation. Our approach focuses the most experienced practitioners on hard problems by delegating other work to hackers with less experience; they, in turn, generate work artifacts that are useful for informing more advanced analysis. Due to the volume of targets, all hackers have the opportunity to select software suitable for their skill level, and team members have a clear path for knowledge growth and coaching.</p><p>This paper describes our vulnerability-discovery process along with the repeatable experiment that we used to assess it. We found substantial evidence to claim a breadth-first search makes a superior targeting strategy in the presence of automation. We also measured significant improvement in the confidence of subjects who applied our process to a vulnerability-discovery campaign.</p><p>After surveying related work in §2, we introduce our process in §3. §3.1 describes a depth-first strategy, and §3.2 describes our breadth-first strategy. §4 lays out the design and execution of our experiment: the application of our process with two teams of hackers applying two strategies during two successive weeks. §5 describes our results, and §6 concludes.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2">Related work</head><p>Votipka, et al. studied the interplay between testers, who investigate software prior to release and hackers, who investigate software after release. They derived from their study a common vulnerability discovery process, which we build on here <ref type="bibr">[40, §V]</ref>. Manès, et al. provide a survey of many of the techniques found in fuzzing tools <ref type="bibr" target="#b20">[21]</ref>. For example, Mayhem <ref type="bibr" target="#b4">[5]</ref> and <ref type="bibr">Driller [36]</ref> address the path explosion problem in symbolic execution. Klees, et al. survey the fuzzing literature to comment on the required procedure for good scientific and evidence based research <ref type="bibr" target="#b19">[20]</ref>. <ref type="figure">Figure 1</ref>: Practitioners, divided into apprentices, journeymen, and master hackers; each represents a higher level of skill and experience, and each mentors the level below Avgerinos, et al. mention analysis at scale, specifically how scaling analysis to thousands of software artifacts makes any per-program manual labor impractical <ref type="bibr">[1, §6.4]</ref>. Babic, et al. discuss a method to harness library code automatically and at great scale <ref type="bibr" target="#b1">[2]</ref>. Sawilla and Ou proposed ASSETRANK, an algorithm that reveals the importance of vulnerabilities present in a system <ref type="bibr" target="#b30">[31]</ref>. The strategy we propose builds on OSS-Fuzz's idea of passing indicators of vulnerability to human experts for remediation <ref type="bibr" target="#b32">[32]</ref>.</p><p>In this study, we extend Votipka's vulnerability discovery process, use modern tools referenced by Manès, accept some amount of manual labor to make finding bugs in real software artifacts tractable, and use statistical tests to extrapolate our observations to the hacker community.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3">Vulnerability discovery process</head><p>We aim to discover ways to increase the effectiveness of teams built on a foundation of automation (i.e., fuzzing and related technologies) whose goal is to find bugs in software. Most interesting to us are bugs exploitable in a way that circumvents a system's security. We consider both published and novel bugs, focusing on employed software where vulnerabilities-published (n-day) or not (0-day)-are the main concern. Here we describe our vulnerability discovery process, based on Votikpa's work. We also introduce distinct two strategies that our experiment compared.</p><p>Observations led us to divide bug finders into three categories: apprentices, journeymen, and masters, as depicted in <ref type="figure">Figure 1</ref>. Collectively, we refer to these three groups as hackers. Maximizing the productivity of each skill level while enabling a progression from apprentice to master over time was a key motivator to our process.</p><p>An apprentice hacker has a general computing background and a basic understanding of how to apply some number of automated software analysis tools. At the core of an apprentice's tool set are fuzzers. Apprentices have limited experience in modifying software, and they do not yet have a command of the internal workings of the various build systems used for software development.</p><p>A journeyman hacker adds the ability to manipulate a program to work with his tools. A journeyman can modify source code or use binary patching to deal with obstacles that thwart fuzzing, such as checksums, encryption, or non-deterministic functionality. A journeyman routinely modifies targets to expose their attack surfaces.</p><p>The highest skill level, master, adds the ability to manipulate or create tools in order to better investigate a target program. Many existing tools were written by masters in need of a specialized approach to a particular piece or class of software. We will use Alice as an apprentice, James as a journeyman, and Meghan as a master hacker.</p><p>Other actors include leaders, who make targeting decisions based on the work of hackers; analysts, who correlate technical work with other resources such as blogs and Common Vulnerabilities and Exposures (CVE); and system support personnel, who manage automation jobs and computing resources. Motivated by our observations of the skill levels that comprise vulnerability-discovery teams, we added a targeting step to Votipka's vulnerability discovery process <ref type="bibr" target="#b39">[40]</ref>, as shown in <ref type="figure" target="#fig_0">Figure 2</ref>.</p><p>Targeting Targeting selects software for investigation. The term target is common among bug finders because software targets are subject to an unusually careful inspection that resembles an attack <ref type="bibr" target="#b27">[28]</ref>. The goal of the targeting phase is to divide a complex system or group of complex systems into targets that can be individually studied in later phases of the vulnerability-discovery process. Even monolithic software artifacts decompose into multiple targets: for example, a browser decomposes into media libraries, TLS and networking libraries, an HTML/CSS renderer, a JavaScript engine, and so on. Experience shows that many or most teams have multiple or many targets under consideration.</p><p>Only cursory information focused on how to perform this division should be collected during the targeting phase. Examples include the pervasiveness of existing security research focused on the target; the availability of target source code, bug trackers, and public developer forums; and the impact of finding a vulnerability in the target. The availability of the target itself; its dependencies (e.g., software, hardware, and supporting resources); and the tools necessary to interact with the target-both automatically and manually-are other considerations.</p><p>The predicted Profit of a vulnerability-finding effort is proportional to the Likelihood and V alue of success and inversely proportional to the projected T ime investment and required Skill level.</p><formula xml:id="formula_0">P = (L×V )−(T ×S)</formula><p>This model guides targeting and subsequent decisions about how to proceed while maximizing return on  investment. Not all hackers are created equal, and building expertise in software security can take years of effort, experience, and coaching <ref type="bibr" target="#b27">[28]</ref>. A targeting strategy ought to boost overall productivity across all skill levels. We wanted to derive a sufficiently large number of software targets to allow hackers of varying skill levels to select work that aligns with both their ability and interest.</p><p>Ultimately, we arrived at a strategy that coupled the freedom of target choice with a "fail fast" team culture and an incentive for producing rapid results. Thus our targeting phase allows teams to self-organize, and it enables a more effective use of journeyman-and master-level hackers' scarce time. We describe a depth-first strategy in §3.1 and our favored breadth-first strategy in §3.2.</p><p>Information gathering The first steps individual hackers and analysts take during the vulnerability-discovery process is to collect additional information about the target, this time with an eye toward decision making during later phases. Key among this information are general details about the target's development, prevalence, and known current or previous defects, along with any security research already complete <ref type="bibr" target="#b39">[40]</ref>.</p><p>Existing analysis can quickly advance the understanding of obstacles, along with the methods of overcoming them. For instance, work to fuzz the OpenSSH daemon <ref type="bibr" target="#b25">[26]</ref> describes eleven non-trivial techniques to harness targets for fuzzing. When considering a team of mixed proficiency, descriptive guides such as this allow a novice to begin work that would otherwise require a more experienced hacker.</p><p>Scenario A Alice begins investigating a piece of software that provides an NTP service. She notes the version in common use, reviews the National Vulnerability Database for known vulnerabilities, and records the primary programming language used in the project.</p><p>Program understanding Hackers next focus on gaining knowledge of the target's operation and design. Of interest is how the target is used as it was intended, more advanced use cases and configuration options, and the general design of the target software. Information gathered during this phase can come from documentation, source code, online forums, users, developers <ref type="bibr" target="#b39">[40]</ref>, and other sources. Program understanding and the next phase, attack surface analysis, make up an iterative cycle within the vulnerability discovery process; <ref type="figure" target="#fig_0">Figure 2</ref> illustrates this with the Obstacle decision point.</p><p>Scenario A (cont.) Alice installs the NTP service by downloading its source code from an online repository and running ./configure; make. She references the usage instructions to interact with the software. Scenario B Working on a separate project, James compiles a browser after reading preliminary notes by Alice. This takes some work as his Linux distribution did not provide a required library. He identifies the browser's JavaScript engine and HTML renderer, and he notes the libraries used to decode various media formats. James also notes that the default build makes use of Address Space Layout Randomization (ASLR), non-executable stacks, and stack canaries.</p><p>Attack surface analysis Investigating a program's attack surface involves devising ways to provide input to portions of the target program. In many cases, this takes the form of a fuzzing harness, also known as a driver application <ref type="bibr" target="#b20">[21]</ref>, which directs the inputs a fuzzer generates to a portion of the program's attack surface. The practical execution of this phase diverges among hackers of varied skill.</p><p>Our process asks apprentices to apply known tools until an obstacle prevents them from further process. Their strategy is to give up quickly when progress stops, document their successful work, and move on to the next target.</p><p>Journeymen consume the documentation produced by the apprentices, allowing them to immediately apply higher-order analysis and continue the program understanding-attack surface analysis cycle.</p><p>Projects that reach the master level either are exceptionally important or have exceeded other hackers' ability to exploit despite clear indications of buggy behavior. A master should always enter the program understanding-attack surface analysis cycle with a plethora of documentation and other products generated by apprentices and journeymen. The master's time is thus spent doing tasks only a master could perform.</p><p>Some literature suggests that to even begin vulnerability discovery, a person must already have the skill we describe as a master's: "Although fuzzing tools are more common, people typically do not use off-the-shelf tools; they prefer making their own fuzzers . . . <ref type="bibr" target="#b10">[11]</ref>" We found counterexamples where apprentices and journeymen were able to progress through every phase of vulnerability discovery. In other cases, they provided clear value to later work by a master hacker. In either case, our process aims to maximize the contributions of less experienced hackers while making the employment of master hackers more efficient.</p><p>Scenario A (cont.) Alice learns the types of inputs her target accepts. These include input through network sockets as well as configuration files the server reads when started. The fuzzing tool she is familiar with doesn't support network fuzzing, so she makes a note for a future analyst to try network fuzzing. However, she knows how to start a fuzzing run based on file input. Scenario B (cont.) James writes a fuzzing harness for the browser's more complicated media libraries, and he packages his work using a Dockerfile. Alice helps, as she had not yet learned how to use Docker.</p><p>Automated exploration Once a team learns how to manipulate the inputs of a program, it iteratively performs these manipulations to enumerate as much functionality of the program as possible. This maximizes the chance of finding a vulnerable condition. While "sometimes, a 'lucky' run-time failure leads to a vulnerability <ref type="bibr" target="#b10">[11]</ref>," we focus most in this phase on testing the target program in a fuzzer using the harnesses produced by the previous phase. In order to make results repeatable, our team standardized the output of the attack surface phase to be a Dockerfile <ref type="bibr" target="#b2">[3]</ref> that combined the target program and its fuzz harness.</p><p>A hacker's proficiency, along with a consideration of the suitability of a given target determines the choice of a fuzzer. The effectiveness of a fuzzer includes the efficiency of harnessing the target and features (such as address sanitization, scalability, speed, and so on). Different fuzzers favor different types of targets. As an example, LibFuzzer aids in the work of writing a fuzz harness for a library, whereas American Fuzzy Lop (AFL) enables a hacker to begin fuzzing quickly given a binary target that reads its input from a file or the standard input stream.</p><p>Scenario A (cont.) Alice starts a fuzzing run on the unmodified NTP program with configuration files as the fuzzed input. Scenario B (cont.) James deploys his browser media handling harnesses for fuzzing. They both work on other targets while the fuzzers run.</p><p>Vulnerability recognition Hackers who discover bugs while iterating through the process must confirm whether the bugs are vulnerabilities. A vulnerability exists when a bug is proven to be exploitable by an attacker <ref type="bibr" target="#b34">[34]</ref>. This can be as simple as running the target program with the crashing input identified in the previous phase, or as complicated as setting up a complex system to observe the real-world effects of certain input. Automation in this phase might be necessary to balance the amount of human time that is required to review results, especially when a multitude of program crashes are discovered.</p><p>Scenario A (cont.) Alice begins another target. Scenario B (cont.) Fuzzing discovers six inputs that cause the targeted browser to crash. James is not able to exploit these bugs, so Meghan takes on the task. James shifts his focus to fuzzing the browser's use of Transport Layer Security (TLS).</p><p>Reporting Finally, the hacker who finds a vulnerability prepares a report that allows developers to correct the bug. A clear description of the impact and prevalence of the vulnerability allows software maintainers to prioritize their efforts. The report can take on different forms, but as The CERT Guide to Coordinated Vulnerability Disclosure states, the technical and practical details of the vulnerability and attack scenario should be well-documented <ref type="bibr" target="#b15">[16]</ref>. To aid in the growth of other hackers, reports should be readily available and searchable.</p><p>Scenario B (cont.) Meghan documents her findings, along with the findings of James. Meghan and James work together to package the exploit as a usable proof of concept. Later, the team discusses their results.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.1">Depth-first strategy (S D )</head><p>The most obvious targeting strategy resembles a depthfirst search. First, hackers select a small set of targets based on some metric of operational impact. For each selected target, the team spends time auditing the software for bugs. This work flow is very natural: it focuses the team's effort on one software artifact at a time. Researchers select the target at the very beginning of their work and persistently look at that target for a notable period of time.</p><p>The depth-first work flow has found bugs in large software that requires a familiarization period <ref type="bibr" target="#b10">[11]</ref>. For example, Google Project Zero researchers applied this strategy to find bugs in Apple's Safari browser. The researchers harnessed the underlying libraries used in Safari, and this required significant program understanding along with modifications to the build chain. They found 26 bugs over the course of one year using custom-built tools <ref type="bibr" target="#b12">[13]</ref>.</p><p>This strategy is straightforward from a management perspective. A team leader collects information from each hacker and distributes it to the teammates inspecting the same target. The leader divides work based on the approach of each team member. For example, one hacker might examine the unit tests distributed with the target software, modifying them to suit the team's aims; another could analyze the software with a popular static-analysis tool; and yet another could attempt to harness different parts of the target program to work with a fuzzer. The responsibility for scheduling the fuzzing jobs and subsequent review often falls on the author of a harness.</p><p>Hackers employing S D record information collectively because it is immediately relevant to the other team members. To promote coaching, the team pairs novice hackers with experts hoping the novice will assimilate concepts and techniques from the expert.</p><p>The primary pitfall of S D appears to be its inefficiency relative to the broad skill levels found on practical teams. With few software artifacts under scrutiny, the team will exhaust the easier tasks related to finding bugs. This leaves apprentices and possibly even journeymen less able to contribute. Simultaneously, masters might find themselves idle or performing tasks better suited for the other skill levels at the beginning of a project.</p><p>Another pitfall is the inefficient use of automation. After starting a fuzzing run, the team is left to continue working on the same target. They might build additional fuzzing harnesses or carry out in-depth manual analysis. Yet the automation might later uncover information that would have aided those processes, or it might even find the bugs they seek. Ploughing forward might waste human effort.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.2">Breadth-first strategy (S B )</head><p>We devised a new strategy that aims to address the pitfalls of S D . Our goals were to scale the vulnerability-discovery process to support a growing team of hackers, reduce hacker fatigue, and increase the production of fuzz harnesses. To do this, our strategy relies on the idea of drastically increasing the pool of software targets. We encouraged hackers to produce the greatest number of fuzzing harnesses possible in each workday. We call this the breadth-first strategy (S B ). S B encourages apprentice-level hackers to give up when it becomes clear that harnessing a particular target would require a significant time investment. Rather than continue down a "rabbit hole," apprentices document any pertinent information about the target before moving it to a separate "journeyman" queue. This provides more experienced hackers material to review before applying their more experienced abilities.</p><p>We posit that the key to this strategy is to collect a large queue of targets and, for each target, have apprentices do the simplest possible thing and nothing more. Keeping apprentices out of rabbit holes allows more skilled hackers to more deeply investigate a target once it is accompanied by a report. In some cases, apprentices produce a working build or even a corpus of fuzzing outputs, but not if producing these artifacts exceeds their abilities. Ways to generate large pools of interesting targets include (1) dividing a device into its software components, (2) following a thorough analysis of the system-level attack surface, (3) enumerating library dependencies, and (4) investigating multiple bug-bounties. Having a large pool of targets allows apprentices to reject targets whose obstacles exceed their ability. Examples might include software with challenging run-time requirements, such as real-time operating systems running on niche hardware; programs that require dynamic network streams like FTP; programs requiring extensive system configurations; or programs that make use of a custom build process. With such a large queue, prioritizing the targets so hackers spend more time on higher-value items becomes critical. For example, hackers on a penetration-testing team should prioritize a target that allows external network connections.</p><p>An important consideration in our study was figuring out how to train new members quickly, while at the same time allowing them to provide operational value to the team. A large queue of targets allows apprentices to select those compatible with the tools that they already know how to use. When they find that a target does not work with a tool they know, they can record what they learned and move it into a journeyman queue. Journeymen pick up targets that an apprentice had begun and push them into the exploration stage. The apprentice can, in turn, learn from that work. Each team member's work is thus frequently reviewed by more experienced people, and there is a clear path for someone to learn based on the experience of others. Similarly, master hackers record the problems that they overcome along with the types of solutions that they apply. These notes frequently help journeymen grow in knowledge too.</p><p>To make efficient use of automation, all work should stop on a particular target whenever a new automated job begins. Only once that job has completed (based on some predetermined measure of completeness) are the results reviewed, incorporated into the findings, and used to determine next steps. In this way, unnecessary human effort is minimized by relying on automation to the greatest extent possible.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4">Experiment</head><p>We designed a human study to investigate our two strategies: depth-first (S D ) and breadth-first (S B ). Our experiment took place over the course of ten days, as summarized in <ref type="figure">Figure 3</ref>. This counterbalanced design follows The SAGE Encyclopedia of Communication Research Methods <ref type="bibr" target="#b7">[8]</ref> and includes between-subjects tests at the end of the first week and within-subjects tests at the end of the second week <ref type="bibr" target="#b5">[6,</ref><ref type="bibr" target="#b8">9,</ref><ref type="bibr" target="#b26">27]</ref>. We ran our experiment on the business days from November 7 through November 22, 2019, taking the 8th and 11th off for Veteran's day. The detailed schedule of our experiment appears in Appendix B.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.1">Subject selection</head><p>Our subjects drew from a pool of US Cyber Command personnel, each of whom had at least a basic understanding of the principles of system and software security. Our primary means of recruiting was a pamphlet posted throughout US Cyber Command work spaces, but we also invited promising candidates by email. We advertised our goal as identifying the best target-selection strategy for bug finding, and we indicated that selected subjects would spend two weeks working with expert hackers to analyze a range of real software. Finally, we noted that we would provide an AFL fuzzing tutorial for all participants. Our pamphlet asked for applicants who (1) had experience with Linux, <ref type="formula">(2)</ref> could work with open-source projects, (3) could conduct Internet-based target research, and (4) could read and modify C programs. 15 people indicated interest. Candidates signed a participation agreement and completed a self-assessment (Appendix A) used to assign teams.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.2">Orientation</head><p>Twelve subjects were present on the first day of our experiment. We used the subjects' self-reported years of hacking experience to create groups. Then, we performed a representative random sample to assign the present subjects to two balanced teams of six. The distribution of the original fifteen applicants contained: eight subjects under one year of experience, two subjects between one and two years, two with four years, two with five years, and one subject who reported eight years experience. All applicants with over one year of experience claimed hacking was-at some point in time-part of their full-time job. The buckets are not uniform, but rather partition the reported skills in a way divisible into two teams. We assigned each team an investigator to serve as the leader, each with experience leading hacking teams.</p><p>We spent the first day providing introductions, presenting a class on the popular open-source fuzzing tool AFL <ref type="bibr" target="#b41">[42]</ref>, assessing the skills of our subjects, and describing our work flow and submission standards.</p><p>Period of instruction The class combined a lecture with exercises ranging from how to compile using afl-gcc to fuzzing bzip2 using afl-qemu. We also provided a 30 minute lecture-only class on Docker <ref type="bibr" target="#b2">[3]</ref>.</p><p>Skill assessment Our self assessment was subjective, so we devised a more objective measurement of subject skill in the form of a series of technical skill assessment tests. We administered these tests three times: once immediately after the initial training course, once at the half-way mark (before the teams exchanged strategies), and once at the end of the experiment. One aim was to measure the amount of skill our subjects developed during the course of executing each strategy.</p><p>All three skill assessments followed the same form, consisting each time of a new set of five binaries taken Between-subjects tests Self Assessment <ref type="figure">Figure 3</ref>: An overview of our experiment, divided into the phases of selection, orientation, and execution; we provide a detailed schedule in Appendix B from a pool of fifteen. We took these binaries from three popular public corpora of fuzzing targets: the Trail of Bits adaptations of the Cyber Grand Challenge binaries <ref type="bibr">[38]</ref>, the MIT Lincoln Laboratory Rode0day bug-injection challenges <ref type="bibr" target="#b11">[12]</ref>, and Google's OSS-Fuzz project <ref type="bibr" target="#b32">[32]</ref>. In some cases, we provided source code. By the end, each subject had investigated all fifteen binaries over the course of three skill assessments. We list the binaries in Appendix F. The binaries we selected represent a variety of practical challenges varying across a number of dimensions, including small versus large programs, pre-built versus complicated build systems, and artificial versus natural bugs.</p><p>Each of the targets employed in our skill assessments is freely available on the Internet. Also available on the Internet is an "answer key" for each target including, in some cases, a list of bugs and, in other cases, a pre-built fuzzing harness. Our intention was to emphasize that open source research is a key component of the vulnerability-discovery process and to acknowledge that known n-day vulnerabilities matter.</p><p>Subjects were given exactly one hour to make progress on these targets; clearly not enough time for a deep-dive into any of them. Their instructions emphasized two goals: (1) find bugs and (2) create fuzzing harnesses.</p><p>The motivation for finding bugs is self-evident, as it aligns with the goal of vulnerability research in general. The reason for the goal of creating fuzzing harnesses is to put subjects in the mindset of using automation as a primary strategy for achieving the first goal.</p><p>Target selection Selecting targets for this experiment was no easy task. Klees, et al. describe how selecting targets to evaluate a fuzzing tool is difficult <ref type="bibr">[20, §8]</ref>. We encountered many of the same challenges when evaluating our hackers. After considering using the benchmarks in earlier work <ref type="bibr" target="#b11">[12,</ref><ref type="bibr" target="#b14">15,</ref><ref type="bibr" target="#b19">20,</ref><ref type="bibr">38]</ref>, we decided on something else altogether. We chose to evaluate OpenWrt <ref type="bibr" target="#b9">[10]</ref>. The packages available to OpenWrt are open source and serve diverse purposes. Each of our targets was real and thus representative of modern, complex, and deployed software.</p><p>Before the subjects began the vulnerability-discovery process, we ran a simple static analysis script that extracted some important information from every OpenWrt package. We collected each package's version, a listing of the files exported by the package, the results of running file [19, p. 46] on each item in the package, and the intersection of each ELF file's exported symbols with a set of frequently misused standard library functions such as strcpy and gets.</p><p>For S D , we selected two targets: dropbear and uhttpd. Because these services are installed and listening on a network socket by default, they represent the most likely choices for a hacker performing S D . For S B targets, we allowed subjects to select any software the OpenWrt package manager provides, except for dropbear and uhttpd. We excluded those two during S B so that both teams would start fresh on those targets during S D . Two targets for S D and a thousand for S B does present an asymmetry; upon first inspection, this might appear unfair, as (1) the true number bugs in the underlying targets is biased and (2) the two S D targets require more skill to analyze than the average of the S B targets. Thus the reader might claim, "of course S B can find more bugs, there are more bugs to find!" We agree. We argue this perceived unfairness is really intuition that S B is more effective than S D , because our selections represent real systems. Bugs exist, but over committing to a single target is not the easiest way to find them.</p><p>In order to aid the post-study analysis, we selected a four-year-old version of OpenWrt: 15.05.1. As others mention <ref type="bibr" target="#b19">[20]</ref>, there is no good substitute for real bugs found. Unique crashes as defined by program path or stack hash do not correlate to unique bugs. By choosing an older version of OpenWrt, we hoped that subjects would find bugs that were patched by version 18.06.5, the modern release as of our experiment. This way, we could take crashes and categorize them more precisely. Because all targets are open source, we will use their issue trackers to report crashes still present in the modern version.</p><p>Work flow and tools Both strategies, S D and S B , require tools to manage the execution of the vulnerabilitydiscovery process. We spent time during the orientation describing these tools and the manner of their use.</p><p>We relied on GitLab to manage our teams due its feature set and open-source availability. For each vulnerability-discovery campaign, we created a GitLab project, and for each proposed target we created a GitLab issue. We added the package information derived from our scripts to each issue's text.</p><p>We directed our subject teams to track their progress using a GitLab issue board, divided into lists related to each step in the vulnerability-discovery process. Each team's board contained one list (as defined in <ref type="bibr" target="#b13">[14]</ref>) for each of open, information gathering, program understanding, exploration, and journeyman. We depict a snapshot of one such board in <ref type="figure">Figure 4</ref>. Many authors, including Newport <ref type="bibr" target="#b24">[25]</ref>, note the need for experts to be minimally interrupted, and this is why we did not include every step of our vulnerability-discovery process in our issue boards. Instead, we attempted to balance our subjects' need for concentration, our own need to track progress, and the teams' need to record important information. We felt a reasonable compromise would ask subjects to:</p><p>• drag a ticket from open to information gathering upon initiating work on a target;</p><p>• append to an issue relevant articles, blogs, source repositories, corpora, and other information uncovered during their search;</p><p>• move an issue from information gathering to program understanding once they create products worthy of committing to the target's GitLab repository;</p><p>• move an issue to the exploration list upon creating working fuzzing harness; and</p><p>• move an issue to the journeymen list if progress becomes too difficult. In this case, comments will explain the obstacles encountered.</p><p>We gave each subject an Internet-connected workstation co-located with their team members. The workstations contained tools for our subjects, including:</p><p>Ghidra <ref type="bibr" target="#b17">[18]</ref>, AFL <ref type="bibr" target="#b41">[42]</ref>, Honggfuzz <ref type="bibr" target="#b37">[37]</ref>, Docker <ref type="bibr" target="#b2">[3]</ref>, and Mayhem <ref type="bibr" target="#b4">[5]</ref>. Each workstation also contained monitoring software and was thus tied to our data collection. We further allowed the subjects to use any bug-finding tool they desired, but we encouraged them to use dynamic-analysis tools. We also provided subjects a Docker container that emulates the OpenWrt 15.05.1 filesystem and services (adapted from other work <ref type="bibr" target="#b35">[35]</ref>).</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.3">Execution</head><p>Our experiment involved two iterations of our vulnerability-discovery process. During the first iteration, Team A applied S D , and Team B applied S B . Roughly each hour, we stopped work and asked the subjects to complete a survey (Appendix C). The teams traded their strategies for the second iteration, and we repeated the skill assessment after each iteration. Each day ended with an end-of-day survey (Appendix D), and the final day included an end-of-experiment survey (Appendix E).</p><p>For the next four business days, subjects on each team-lead by an investigator-worked in their assigned strategy. We enforced that each group use their assigned strategy by selecting only two targets for S D and approximately 1,000 targets for S B . The team lead encouraged S B subjects to give up quickly and select targets that they could reasonably accomplish in two hours of work. We gave subjects the intermediate skill assessment before they traded strategies for the final four business days. On the final day, subjects took the final skill assessment.</p><p>Limitations Our sampled population consisted solely of US Cyber Command personnel, but we posit our results are applicable to other organizations. Both teams knew on day one the software they would target for both weeks using our two strategies; this could have resulted in looking ahead at a future target, but team leads mitigated this by focusing work. Our two team leaders did double as investigators, but they tried to mitigate any bias towards S B as they guided their teams.</p><p>Other aspects of our study were difficult if not impossible to control. Some subjects missed work due to unforeseen emergencies, although the collective time for both teams appeared to be about equal. At times, our Internet connection became prohibitively slow. This affected both teams and seemed to persist during both weeks of the study. Sometimes subjects would restart their workstation or it would crash from an unwieldy fuzz job. This affected our ability to collect and log data about the participant's actions. We also discovered during the experiment that our X11 monitoring tool did not capture <ref type="table">Target  Information gathering   Program understanding</ref> Attack surface Automated exploration Promote to journeyman <ref type="figure">Figure 4</ref>: The use of Gitlab to track the progress of a vulnerability-discovery campaign; we used a variant of Kanban with bins that corresponded to groups of steps in our vulnerability-discovery process; each issue corresponds to a target time spent in the X11 lock screen.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Human research standards and data collection</head><p>We obtained a DoD Human Research Protection Program (HRPP) determination before executing the research described by this paper. This included an examination by our Institutional Review Board (IRB). All recruitment was voluntary and minimized undue influence. We assigned each subject a two-word pseudonym that was also their machine's host name, their Rocket.Chat user name, their survey response name, and their GitLab user name. Recorded data bore this pseudonym, and it was in no way linked to the subject's real name. We collected skill assessments, surveys, GitLab commits, comments, and work products. We also collected data using execsnoop, which logged programs started by the subjects, and x11monitor, which monitored the subjects' X11 cursor focus.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5">Results</head><p>Our analysis of the experiment's results involves four categories: survey questions, determining the number of bugs found, measuring the subjects' hacking skill, and ancillary data. We present this analysis here before commenting on our two strategies.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5.1">Surveys</head><p>We use Mann-Whitney u-test p-value (MW). That is, the probability that the statement listed is not true given our observation. We use this test to compare the means of survey responses and conform to the necessary assumptions <ref type="bibr">[24, §1.2]</ref> except that each entry is an independent trial. This is violated because we sample each subject multiple times over the course of each method. We expect there is variation within a single subject's responses and thus we conducted multiple samplings. Potentially, some other tests such as repeated measures ANOVA <ref type="bibr" target="#b16">[17]</ref> or Wilcoxon signed-rank test <ref type="bibr" target="#b40">[41]</ref> are more fitting, but not quite right and not the focus of this paper. We choose Mann-Whitney mainly because it is a non-parametric test with minimal assumptions about the data's distribution and allows us to test the signed difference of means between two groups: S D and S B . B is the Bernoulli Trial as described by Papoulis et al. <ref type="bibr" target="#b29">[30]</ref>. We must assume our sample of 12 is "large enough". To balance the number of tests with our small sample, we use an acceptance criteria of 0.020.</p><p>Hourly survey outcomes When comparing between subjects from both teams during the first week, subjects performing S B felt less surprised (MW=0.003), less frustrated (MW=3×10 −4 ), and less doubtful (MW=0.004) than those performing S D . They also spent more time interacting with tools (MW=5×10 −7 ) and more time harnessing (MW=0.002).</p><p>After the second week, we compared within-subjects on the team that transitioned from S D to S B . These subjects reported that S B left them spending less time on research (MW=1×10 −4 ) and feeling less frustrated (MW=0.007), doubtful (MW=0.001), and confused (MW=0.009). S B found them interacting with tools (MW=0.008) and harnessing (MW=0.009) more.</p><p>End-of-experiment outcomes Subjects felt S D was less effective than S B overall (B=0.019) and was a less effective use of their team's skills (B=0.003). When asked which method they would prefer to lead, subjects were less likely to choose S D (B=0.003). Subjects felt breadth-first work was more independent but left them feeling less a part of a team (B=0.003). The subjects claimed S B was less frustrating (B=0.003), and they unanimously said it was easier to get started with (B=2.400×10 −4 ) and easier for a novice to contribute to (B=2.400×10 −4 ). Subjects also unanimously claimed they learned something during the experiment (B=2.400×10 −4 ). Subjects felt more prepared (MW=0.010) and more interested (MW=0.015) in hacking after the experiment than before. Every participant reported finding at least one bug (B=2.400×10 −4 ).</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5.2">Determining number of bugs</head><p>As Klees et al. discuss in depth, many papers fail to provide control for randomness in fuzzing results <ref type="bibr" target="#b19">[20]</ref>. Our approach was to collect subject harnesses and run each in three independent trials for 24 hours using the corpora and fuzzer selected by the harness creator. While Klees et al. also discuss finding "real bugs," the process of iteratively patching is extensive and time consuming. As a compromise, we settled on an approximation. In lieu of "real bugs," we decided to use the bug de-duplication mechanism in Mayhem <ref type="bibr" target="#b0">[1,</ref><ref type="bibr" target="#b4">5]</ref>.</p><p>Statistical tests We use MW to test the significance of mean difference in coverage and bug metrics and conform to all required assumptions <ref type="bibr">[24, §1.2]</ref>. We chose this test to measure the difference in bugs found by S D and S B primarily for the reasons suggested by Klees <ref type="bibr">[20, §4]</ref>.</p><p>Bug outcomes After using a total 18,432 computehours to test each harness three independent times for 24 hours and two cores each, we collected the results. Testing f (S D ) &lt; f (S B ) reveals some potentially coincidental results. Team A within-subjects, found a p-value of (0.038 &gt; 0.020); Within-subjects for team B, (0.032 &gt; 0.020). For the between-subject test of week one, (0.032 &gt; 0.020). However, combining both team's findings, we find significant evidence to claim f (S D ) &lt; f (S B ) with a p-value of (0.002 &lt; 0.020).</p><p>In addition to finding more bugs, the categories of bugs found by S B are significantly more diverse and security-related than the bugs found in S D . Both S B sessions found multiple out-of-bounds write primitives as described in the Common Weakness Enumeration (CWE) database <ref type="bibr" target="#b22">[23]</ref>, while none were found by S D . Both strategies found out-of-bounds reads <ref type="bibr" target="#b21">[22]</ref>, but S B found significantly more and some that could lead to information disclosure. For bug-bounty hunters, this is important because bug criticality determines compensation <ref type="bibr" target="#b27">[28]</ref>.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5.3">Skill assessment</head><p>After each assessment, we collected the subjects' work products and notes and graded them with the goal of determining three objective measures: (1) number of working harnesses, (2) number of bugs found, and (3) number of bugs reproduced. We defined a fuzzing harness as working if, after a short while, it discovers new paths through the target program. We defined a bug as any program terminated by a signal that might result in a core dump. Some commonly-encountered examples include: SIGABRT, SIGFPE, SIGILL, SIGSEGV, and SIGTRAP. Finally, it is possible for a subject to find a bug-either through static analysis or information gathering-but not reproduce it. Reproducing a bug requires the subject to successfully run the program with the crashing input.</p><p>After collecting each objective measure, we combined them into a single score for each participant for the purpose of analysis. While one could imagine assigning differing weights to each category, those weights would likely be chosen based on model fitting from training data. Perhaps a future researcher might use data from sources like HackerRank <ref type="bibr" target="#b38">[39]</ref>. Given the large scope of this study, we chose to weight each category equally. A participant's score, then, is the sum of all measures: h+b+r.</p><p>Statistical tests and outcomes Our assessment of subjects before the study and after each strategy makes for a good candidate for the Friedman signed-rank test <ref type="bibr" target="#b33">[33]</ref>. We chose this test over others such as repeated-measures ANOVA <ref type="bibr" target="#b16">[17]</ref> because this test does not require an assumption about the underlying distribution of our data. In our case, this is important because we neither know the distribution of test scores nor think it reasonable to assume the distribution is normal. We again use an acceptance criteria of 0.020.</p><p>The Friedman test unfortunately revealed no statistically significant mean difference between the three assessments. When testing all twelve participants, we receive a p-value of 0.02024; for group one, 0.10782; and for group two, 0.12802. A larger sample of subjects might reveal more significant results.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5.4">Ancillary data</head><p>Browsing the web vs. strategy Dividing the work time into hour-long windows to bin time spent with the X11 focus on Firefox (the pre-installed web browser) and grouping the values by strategy S D or S B was not significant according to Wilcoxon signed-rank test <ref type="bibr" target="#b40">[41]</ref>. The number of entries in Firefox's history and the team's strategy were also not significantly related.</p><p>Materials produced <ref type="figure" target="#fig_1">Figure 5</ref> describes the number of materials produced by both teams under both strategies. Both teams produced more materials under S B than S D : Team A produced 151 and 588 products under S D and S B , respectively; and Team B produced 177 and 387 products under S D and S B , respectively.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5.5">Depth-first strategy discussion</head><p>This section, along with §5.6, records observations made during the daily team discussions with subjects. A number of factors challenge S D in a semi-autonomous, team-based analysis environment. The process of investing significant resources into a single target can reveal novel flaws or no flaws at all; a hacker will not know which without first consuming considerable time and effort.</p><p>Minimum skill threshold Apprentice hackers are prone to falling in rabbit holes. Votipka described this thusly: "Without prior experience guiding triage, our practitioners relied on stumbling across vulnerabilities incidentally; or on their curiosity, personal creativity, and persistence with ample time to dig through the complexity of a program. Such incidental discovery is time consuming and haphazard, with little consistency in results <ref type="bibr">[40, §VI.A.1]</ref>." S D made recruiting more difficult because of the extensive list of prerequisite knowledge required to get started with some of our targets. Considering the two depth-first projects mentioned in this paper, we sought experience in: (1) software reverse engineering and assembly architectures (2) C software development (3) understanding and modifying software build tool chains (4) binary patching (5) source auditing (6) bug finding (7) the use of static analysis tools (8) fuzzing We also aimed to find self-motivated problem solvers.</p><p>Unsurprisingly, S D overwhelmed the less-skilled subjects. Subjects performing S D felt more surprised, more frustrated, and more doubtful than during S B . Subjects also claimed S D was a less effective use of their team's skills than S B . We posit that these sentiments resulted from the quick exhaustion of novice work at the beginning of a bug-finding session, leaving tasks requiring a more skilled practitioner. Very early on, when looking at uhttpd and dropbear, novice subjects found valuable information from Internet research, but for the remainder of the week, they contributed significantly less to team progress.</p><p>Feedback Loop When our teams were assigned a single target, they continued working on that problem even when automation might be on the path to a solution.</p><p>At some point, the human will be doing work eventually rendered unnecessary due to that automation. This is inefficient because, in general, human time is expensive while computer time is inexpensive. S D left subjects less time to interact with tools and less time harnessing than S B . This means hackers are not able to maximize the time spent producing new harnesses to test new code. There is a natural break where-once a harness is complete-it is inefficient for the hacker to continue work until they know what automation will discover.</p><p>Knowledge sharing and tasking A team of humans simultaneously investigating the same target incurs a high synchronization overhead. Some findings are of general interest and should be shared as soon as possible, but other information might not be of broad interest. Communicating incurs overhead, but under-communicating leads to duplicate work. How to balance this is not always immediately clear. Feedback from subjects indicated that S B left them feeling less a part of a team than S D . We believe this stems from the fact that S B naturally leads to more independent work and a reduction in real-time communications in favor of asynchronous communication, such as notes and code submissions. This position is bolstered by teaming research in a related discipline that found the most productive teams in cyber defense exercises have the fewest direct human interactions <ref type="bibr" target="#b3">[4]</ref>.</p><p>The discrete tasks in the fuzzing process seem conducive to parallelization. In practice, these tasks turn out to be a pipeline, with progress on one task being necessary in order to advance to the next. With some targets, such as ubus <ref type="bibr" target="#b28">[29]</ref>, emulating the target is a nontrivial prerequisite to fuzzing. The narrow target selection of S D does little to help with parallelizing the fuzzing pipeline.</p><p>Output Ultimately, Team A found zero bugs in uhttpd and three bugs in dropbear; Team B, zero and four. With S D , hackers tended to go down "rabbit holes," investing significant time and effort into analyzing complex components of a target. The more time spent delving into a particular component, the more a sort of tunnel vision would develop. This left other components of the target ignored. Ultimately, deadlines led to overlooked bugs that might have been easy to find using automation techniques and minimal human effort.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5.6">Breadth-first strategy discussion</head><p>Minimum skill threshold and feedback Our apprentice hackers were both more prolific and more effective while employing S B . S B allows the human to completely  hand off work to the machine and only continue work on that target once the machine had a chance to discover a solution. Such a model allows for a feedback loop from the human to the machine and back, minimizing human time spent, and iterating until reaching a desired outcome.</p><p>Knowledge sharing and tasking S B allows team members to work with confidence on independent tasks, make progress until they understand the key pieces of information, and then communicate those pieces of information in an asynchronous way. This reduces overhead and redundancy while resulting in a continually growing record of findings, each feeding into the next. With respect to coaching, pairing a novice with an expert frequently resulted in the expert spending more time teaching then hacking. In a model where team members can record and convey their problem solving, more expert people can review those problems and suggest paths forward based on their experience. S B 's large set of targets means that hackers can create a collection of fuzzing pipelines as part of a parallel strategy.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5.7">Subsequent and future work</head><p>We applied our breadth-first strategy to other large-scale projects after our experiment, and we record here some additional lessons. We also suggest areas of future work.</p><p>Targeting We have further automated our targeting stage to make leaders more efficient. In one project, a team was asked to analyze four interesting devices. We wanted to apply S B , so we wrote a script to enumerate the binaries on each device and establish issues on GitLab for each. This eased deciding what to work on, and it simplified the tracking of progress.</p><p>Future experiments might benefit from prioritizing targets. The targets in our experiment's queue were unsorted. Thus analysts tended to work through the Open column in GitLab from top to bottom, suggesting that sorting the queue would result in more time spent analyzing the highest-priority software.</p><p>Information gathering Future work could investigate using web scrapers to perform common research tasks. For example, if the target was objdump, a script could collect the results of searching for "objdump CVE", or "fuzzing objdump." These tools could easily append this information to each target's GitLab issue.</p><p>Program understanding There is a great deal of further research to be done in the area of program understanding and its impact on decision making. Automated tools should identify indicators of potential bugs. These indicators would justify additional time spent improving harnesses and diving deeper into understanding a target program. Without them, scaling becomes difficult if not impossible, as analysts tend to spend too much time focusing on challenging targets, possibly overlooking easier-to-find bugs in other targets. This is not to say that challenging targets should be ignored, but that team leaders should make an evidence-based determination of how much time to dedicate to a challenging target before the manpower cost outweighs the benefit of finding a bug.</p><p>Obvious examples of other information that tools could add to targets' GitLab issues include: the lack of basic run-time protection mechanisms like stack canaries, PIE, RELRO, and non-executable stacks; the presence of the SUID bit; --help and --version outputs; and whether the program listens on a port (i.e., netstat output) or runs automatically (i.e., ps output). This information would help leaders prioritize targets or hackers select them, and there is clearly room for more ideas.</p><p>Attack surface analysis During a pilot study that preceded our experiment, running fuzz harnesses on our dedicated cluster required transferring the harnesses to a separate network where a team member managed fuzzing jobs. This proved to be a significant undertaking. The quality of the documentation provided by our hackers varied, and thus reproducing the harness occasionally failed. Failures led to several hours of rework. As a remedy, we adopted the use of Docker <ref type="bibr" target="#b2">[3]</ref>. A Dockerfile able to build the targeted program on a base Ubuntu image with AFL installed has since then accompanied each new harness. We made the hackers responsible for performing test builds of their Dockerfile. The switch to Dockerfiles as a deliverable drastically reduced the overhead incurred when transferring the harnesses to a different network for fuzzing. We later expanded this architecture so that hackers could produce docker images that used any arbitrary fuzzer.</p><p>Automated exploration Automation in this stage consists of taking the completed harnesses and running them on computing resources. An architecture such as Clusterfuzz <ref type="bibr" target="#b32">[32]</ref> matches our intent. During the depth-first strategy, we attempted to use our computing resources by having a single fuzz job run on many nodes of our cluster. When we transitioned into having many targets, we needed a simpler structure that would allow us to quickly run many jobs. We decided after our pilot study that a job running on a single node and employing all cores on the node would fit our needs. Not only is this an easier architecture to implement and maintain, but Cioce et al. show the diminishing returns of additional fuzz-cores make this a more efficient use of our computing resources <ref type="bibr" target="#b6">[7]</ref>.</p><p>Vulnerability recognition While our experiment was focused on building teams around the process of harnessing target applications, we realize that more work needs to be done to establish processes for managing the results of the fuzzing campaign-vulnerability recognition at scale. Some applications produced numerous crashes, with one application producing thousands of crashes. Techniques for dedicating sufficient time to crash triage while also continuing to harness new targets must be developed. With limited manpower, this is a challenging problem for which we are still working on a solution.</p><p>Other researchers who choose to extend our work should attempt to assign criticality scores to the bugs found. They might also wish to determine-before their experiment-the number of known bugs in the targets used.</p><p>Other We found overheads in S B that were much less impactful to S D . Small things such as enforcing GitLab policies or shepherding targets on and off of our computing resources became time-consuming with many projects happening simultaneously. Fuzzing, archiving and reviewing results was difficult to balance with other targets in the queue. Also, in our actual operational environment, higher leadership would add to our target queue, leaving us to figure out how assign priorities while balancing ongoing work. As with many endeavors, these practical matters are a ripe area for future work.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="6">Conclusion</head><p>Frustrated with the pitfalls of S D , we sought a better approach, and we found one. Evidence indicates S B is more effective at finding bugs, and we found some positive side effects as well. S B more efficiently employs hackers of varying skill levels. It also boosts the amount of documentation and learning resources available to hackers and leaders, cultivating technical growth. S B better applies automated bug-finding tools, and it more clearly defines work roles and unit tasks. Our experiment to test S D and S B is repeatable and thus allows researchers to test other hypotheses related to the hacking process in a similar environment. Finally, we learned, coached, and hacked for fun and profit.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>A Self assessment</head><p>On a scale of 0-5, how comfortable do you feel . . .</p><p>•  </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>C Hourly questions</head><p>• What is your pseudonym?</p><p>• How many minutes were spent interacting with tools?</p><p>• How many minutes were spent harnessing?</p><p>• How much time was spent on research?</p><p>• Are you feeling productive?</p><p>• Are you feeling surprised?</p><p>• Are you feeling frustrated?</p><p>• Are you feeling doubtful?</p><p>• Are you feeling confused?</p><p>D End-of-day questions</p><p>• What is your pseudonym?</p><p>• I learned something today.</p><p>• I felt frustrated today.</p><p>• I worked with another team member today (team lead excluded).</p><p>• I accomplished something today.</p><p>• I feel exhausted today.</p><p>• I enjoyed my work today.</p><p>• I learned a new skill today.</p><p>• I was bored today.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>E End-of-experiment questions</head><p>(1) Which vulnerability-discovery method do you feel was more effective? (2) Which vulnerability-discovery method made you feel like you were part of a team? (3) Which vulnerability-discovery method made the best use of your personal skill? (4) Which vulnerability-discovery method do you think made the best use of your team's skill? (5) Which vulnerability-discovery method did you think was easier to get started with? (6) Which vulnerability-discovery method do you think is easier for a novice to contribute to? (7) Did you learn any valuable skills during the experiment? (8) Which vulnerability-discovery method did you learn more during? (9) Which vulnerability-discovery method did you enjoy more? (10) Which vulnerability-discovery method frustrated you the most? (11) If you were asked to lead a vulnerability-discovery project, which method would you choose?</p><p>(12) How prepared do you think you were for the vulnerability-discovery work you were asked to do during the experiment, before initial training? (13) How prepared do you think you were for the vulnerability-discovery work you were asked to do during the experiment, after initial training? (14) How prepared do you think you were for the vulnerability-discovery work you were asked to do during the experiment, after the experiment? (15) What was your interest in doing vulnerabilitydiscovery work, before the experiment? (16) What was your interest in doing vulnerabilitydiscovery work, after the experiment? (17) How many unique bugs did you find during the experiment?</p><p>• 0 • 1-5</p><p>• 5-10</p><p>• 10-20</p><p>• 20+ (18) Which method of learning was best for you during the experiment?</p><p>• Instructor-led training • Hands-on experience </p></div><figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_0"><head>Figure 2 :</head><label>2</label><figDesc>Figure 2: Our vulnerability-discovery process adds targeting (*) to the steps of Votipka, et al. ( †) [40, §V].</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_1"><head>Figure 5 :</head><label>5</label><figDesc>Figure 5: Total number of materials (Git commits, GitLab comments, GitLab projects, issues, issue tags, and Rocket.Chat messages) produced per team over time; the vertical dotted line represents the transition between strategies</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_2" validated="false"><head></head><label></label><figDesc>The following table shows the cumulative number of unique bugs found in each independent fuzzing trial T x .</figDesc><table>Team Method Harnesses T 0 T 1 T 2 

A 
S D 
8 
3 
2 
3 
A 
S B 
42 
31 23 40 
B 
S B 
61 
42 49 40 
B 
S D 
12 
4 
4 
4 

</table></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_4" validated="false"><head>Programming ?</head><label>Programming</label><figDesc></figDesc><table>-With the C programming language? 

 *  Writing a program from start to finish? 
 *  Reading and understanding a large program? 
 *  Modifying a large program? 
-With the Python programming language? 

 *  Writing a program from start to finish? 
 *  Automating data processing tasks? 
 *  Implementing algorithms and data structures? 
-Collaborating with a software development team? 
• Using open-source software? 

-Compiling large software packages written in C? 
-Using make? cmake? GNU auto-tools? git? 
-Making small modifications to software? 
-Making large modifications to software? 
• Using Linux? 

-Using bash? 
-Using Debian-based Linux? 

 *  Configuring a Debian-based Linux system? 
 *  Using APT? 
-Understanding system calls? 
-Understanding exit signals such as SIGSEGV? 
• Using Docker? 
• Using dynamic analysis tools such as fuzzers? 

-Using QUEMU? 
-Using a AFL? 

 *  Modifying a binary-only target to work with AFL? 
 *  Modifying an open-source target to work? 

-Using Libfuzzer? Honggfuzz? 
-Using CISCO-TALOS/Mutiny? 
-Using an unlisted dynamic-analysis tool? 
-Understanding run-time instrumentation? 
-Understanding compile-time instrumentation? 
-Writing your own custom purpose fuzzer? 
-Understanding differed forking? 
-Understanding persistent fuzzing? 
-Enumerating all possible program input methods? 
• Recognizing a software security flaw? 

-Reading articles on new software vulnerabilities? 
-Reproducing research on software vulnerabilities? 
-Understanding DEP, ASLR, and stack canaries? 
-Overcoming these protections? 
-Exploiting control over the instruction pointer? 
-Exploiting control over printf arguments? 
-Exploiting a program that misuses strcpy, memcpy, 
or sprintf with a stack destination? 
-Attacking programs that misuse system? 
-Understanding the implications of a SUID program? 
-Exploiting with heap-metadata overwrites? 
-Finding information on the Internet? 
• Using the scientific method? 
• With Assembly Languages? 

-Reading Intel x86? Writing Intel x86? 
-Using different calling convention such as stdcall, 
fastcall, and cdecl? 
• Reverse engineering? 

-Using debuggers? Using disassemblers? 
-Collaborating with a team, reversing a large target 
binary? 

B Schedule 

Monday 
Tuesday 
Wednesday 
Thursday 
Friday 

November 7, 2019 

8:00 am 
9:00 am 
10:00 am 
11:00 am 
12:00 noon 
1:00 pm 
2:00 pm 
3:00 pm 
4:00 pm 

Introductions 

AFL class 

Skill assessment 

Docker and submission 
standards Monday 

Tuesday 
Wednesday 
Thursday 
Friday 

November 12-15, 2019 

8:00 am 

8:30 am 

9:00 am 

9:30 am 

10:00 am 

10:30 am 

11:00 am 

11:30 am 

12:00 noon 

12:30 pm 

1:00 pm 

1:30 pm 

2:00 pm 

2:30 pm 

3:00 pm 

3:30 pm 

4:00 pm 

Introductions 
Introductions 
Introductions 
Introductions 

Sprint hours 

• Apply targeting strategy 
• Hourly survey 
• Lunch 

Sprint hours 

• Apply targeting strategy 
• Hourly survey 
• Lunch 

Sprint hours 

• Apply targeting strategy 
• Hourly survey 
• Lunch 

Sprint hours 

• Apply targeting strategy 
• Hourly survey 
• Lunch 

Team synchronization 
Team synchronization 
Team synchronization 
Team synchronization 

Monday 
Tuesday 
Wednesday 
Thursday 
Friday 

November 18-22, 2019 

8:00 am 

8:30 am 

9:00 am 

9:30 am 

10:00 am 

10:30 am 

11:00 am 

11:30 am 

12:00 noon 

12:30 pm 

1:00 pm 

1:30 pm 

2:00 pm 

2:30 pm 

3:00 pm 

3:30 pm 

4:00 pm 

Discussion 

• Team interview 

</table></figure>
		</body>
		<back>

			<div type="acknowledgement">
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Acknowledgments</head><p>We are grateful for the aid Leslie Bell provided while we sought approval of our experimental approach using human subjects. Temmie Shade helped review our survey questions, and James Tittle coached us on the counter-balanced design of our experiment. Andrew Ruef also gave his time to discuss many of our early ideas. Richard Bae and ForAllSecure provided us with Mayhem installation, support, and notable computing resources. The staff at Dreamport (https://dreamport.tech) hosted our pilot and experiment, providing space, computing resources, and support. We thank our participants in both the actual study and the pilot. This paper would not have been possible without their help.</p><p>Our work was performed in part during a segment of the NSA's Computer Network Operator Development Program, and both the investigators and many of our subjects came from three military services: the Army, Navy, and Air Force. We are grateful for our services' support towards advancing vulnerability discovery.</p></div>
			</div>

			<div type="references">

				<listBibl>

<biblStruct xml:id="b0">
	<analytic>
		<title level="a" type="main">Enhancing symbolic execution with veritesting</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Thanassis</forename><surname>Avgerinos</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Alexandre</forename><surname>Rebert</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Sang</forename><forename type="middle">Kil</forename><surname>Cha</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">David</forename><surname>Brumley</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Communications of the ACM</title>
		<imprint>
			<biblScope unit="volume">59</biblScope>
			<biblScope unit="issue">6</biblScope>
			<biblScope unit="page" from="93" to="100" />
			<date type="published" when="2016-05" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b1">
	<analytic>
		<title level="a" type="main">FUDGE: Fuzz driver generation at scale</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Domagoj</forename><surname>Babic</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Stefan</forename><surname>Bucur</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Yaohui</forename><surname>Chen</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Franjo</forename><surname>Ivancic</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Tim</forename><surname>King</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Markus</forename><surname>Kusano</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Caroline</forename><surname>Lemieux</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">László</forename><surname>Szekeres</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Wei</forename><surname>Wang</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 27th ACM Joint Meeting on European Software Engineering Conference and Symposium on the Foundations of Software Engineering, ESEC/FSE 2019</title>
		<meeting>the 27th ACM Joint Meeting on European Software Engineering Conference and Symposium on the Foundations of Software Engineering, ESEC/FSE 2019<address><addrLine>New York, New York, USA</addrLine></address></meeting>
		<imprint>
			<publisher>ACM</publisher>
			<date type="published" when="2019" />
			<biblScope unit="page" from="975" to="985" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b2">
	<analytic>
		<title level="a" type="main">An introduction to Docker for reproducible research</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Carl</forename><surname>Boettiger</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Operating Systems Review</title>
		<imprint>
			<biblScope unit="volume">49</biblScope>
			<biblScope unit="issue">1</biblScope>
			<biblScope unit="page" from="71" to="79" />
			<date type="published" when="2015-01" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b3">
	<analytic>
		<title level="a" type="main">Sociometrics and observational assessment of teaming and leadership in a cyber security defense competition</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Norbou</forename><surname>Buchler</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Prashanth</forename><surname>Rajivan</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Laura</forename><forename type="middle">R</forename><surname>Marusich</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Lewis</forename><surname>Lightner</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Cleotilde</forename><surname>Gonzalez</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Computers &amp; Security</title>
		<imprint>
			<biblScope unit="volume">73</biblScope>
			<biblScope unit="page" from="114" to="136" />
			<date type="published" when="2018" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b4">
	<analytic>
		<title level="a" type="main">Unleashing Mayhem on binary code</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Thanassis</forename><surname>Sang Kil Cha</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Alexandre</forename><surname>Avgerinos</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">David</forename><surname>Rebert</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Brumley</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 2012 IEEE Symposium on Security and Privacy, SP &apos;12</title>
		<meeting>the 2012 IEEE Symposium on Security and Privacy, SP &apos;12<address><addrLine>Washington, DC, USA</addrLine></address></meeting>
		<imprint>
			<publisher>IEEE Computer Society</publisher>
			<date type="published" when="2012" />
			<biblScope unit="page" from="380" to="394" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b5">
	<analytic>
		<title level="a" type="main">Experimental methods: Between-subject and within-subject design</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Gary</forename><surname>Charness</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Uri</forename><surname>Gneezy</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Michael A</forename><surname>Kuhn</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Journal of Economic Behavior &amp; Organization</title>
		<imprint>
			<biblScope unit="volume">81</biblScope>
			<biblScope unit="issue">1</biblScope>
			<biblScope unit="page" from="1" to="8" />
			<date type="published" when="2012" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b6">
	<monogr>
		<title level="m" type="main">Program fuzzing on high performance computing resources</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Christian</forename><surname>Cioce</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Daniel</forename><surname>Loffredo</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Nasser</forename><surname>Salim</surname></persName>
		</author>
		<idno>SAND2019-0674</idno>
		<imprint>
			<date type="published" when="2019-01" />
			<pubPlace>Sandia National Laboratories, Albuquerque, New Mexico, USA</pubPlace>
		</imprint>
	</monogr>
<note type="report_type">Technical Report</note>
	<note>h t t p s</note>
</biblStruct>

<biblStruct xml:id="b7">
	<monogr>
				<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">F</forename><surname>Elena</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Corriero</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Counterbalancing</surname></persName>
		</author>
		<title level="m">The SAGE Encyclopedia of Communication Research Methods</title>
		<editor>Mike Allen</editor>
		<meeting><address><addrLine>Thousand Oaks, California, USA</addrLine></address></meeting>
		<imprint>
			<publisher>SAGE Publications</publisher>
			<date type="published" when="2017" />
			<biblScope unit="volume">1</biblScope>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b8">
	<analytic>
		<title level="a" type="main">Within-subjects design</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Richard</forename><surname>Draeger</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">The SAGE Encyclopedia of Communication Research Methods</title>
		<editor>Mike Allen</editor>
		<meeting><address><addrLine>Thousand Oaks, California, USA</addrLine></address></meeting>
		<imprint>
			<date type="published" when="2017" />
			<biblScope unit="volume">4</biblScope>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b9">
	<monogr>
		<title level="m" type="main">Invited talk at the 2008 Free and Open Source Software Developers European Meeting</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Florian</forename><surname>Fainelli</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2008-02" />
		</imprint>
	</monogr>
	<note>The OpenWrt embedded development framework</note>
</biblStruct>

<biblStruct xml:id="b10">
	<analytic>
		<title level="a" type="main">Discovering buffer overflow vulnerabilities in the wild: An empirical study</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Ming</forename><surname>Fang</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Munawar</forename><surname>Hafiz</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 8th ACM/IEEE International Symposium on Empirical Software Engineering and Measurement, ESEM &apos;14</title>
		<meeting>the 8th ACM/IEEE International Symposium on Empirical Software Engineering and Measurement, ESEM &apos;14<address><addrLine>New York, New York, USA</addrLine></address></meeting>
		<imprint>
			<publisher>ACM</publisher>
			<date type="published" when="2014" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b11">
	<analytic>
		<title level="a" type="main">The rode0day to less-buggy programs</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Andrew</forename><surname>Fasano</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Tim</forename><surname>Leek</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Brendan</forename><surname>Dolan-Gavitt</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Josh</forename><surname>Bundt</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE Security &amp; Privacy</title>
		<imprint>
			<biblScope unit="volume">17</biblScope>
			<biblScope unit="issue">6</biblScope>
			<biblScope unit="page" from="84" to="88" />
			<date type="published" when="2019-11" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b12">
	<monogr>
		<title level="m" type="main">365 days later: Finding and exploiting Safari bugs using publicly available tools</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Ivan</forename><surname>Fratric</surname></persName>
		</author>
		<ptr target="https://googleprojectzero.blogspot.com/2018/10/365-days-later-finding-and-exploiting.html" />
		<imprint>
			<date type="published" when="2018-10" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b13">
	<monogr>
		<title/>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Gitlab</surname></persName>
		</author>
		<ptr target="https://about.gitlab.com/product/issueboard/" />
		<imprint>
			<date type="published" when="2019-12-17" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b14">
	<monogr>
		<title level="m" type="main">Fuzzer test suite</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Google</surname></persName>
		</author>
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b15">
	<monogr>
		<title level="m" type="main">Art Manion, and Chris King. The CERT(C) guide to coordinated vulnerability disclosure</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Allen</forename><forename type="middle">D</forename><surname>Householder</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Garret</forename><surname>Wassermann</surname></persName>
		</author>
		<ptr target="https://resources.sei.cmu.edu/asset_files/SpecialReport/2017_003_001_503340.pdf" />
		<imprint>
			<date type="published" when="2019-03-31" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b16">
	<analytic>
		<title level="a" type="main">Using a repeated measures ANOVA to analyze the data from a pretest-posttest design: a potentially confusing task</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">W</forename><surname>Schuyler</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Robert</forename><forename type="middle">A</forename><surname>Huck</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Mclean</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Psychological Bulletin</title>
		<imprint>
			<biblScope unit="volume">82</biblScope>
			<biblScope unit="issue">4</biblScope>
			<biblScope unit="page" from="511" to="518" />
			<date type="published" when="1975" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b17">
	<analytic>
		<title level="a" type="main">Come get your free NSA reverse engineering tool!</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Robert</forename><surname>Joyce</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Presentation at the 2019 RSA Conference</title>
		<imprint>
			<date type="published" when="2019-03" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b18">
	<monogr>
		<title level="m" type="main">The UNIX Programming Environment</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Brian</forename><surname>Kernighan</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Rob</forename><surname>Pike</surname></persName>
		</author>
		<imprint>
			<date type="published" when="1984" />
			<publisher>Prentice-Hall, Inc</publisher>
			<pubPlace>Englewood Cliffs, New Jersey, USA</pubPlace>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b19">
	<monogr>
		<title level="m" type="main">Evaluating fuzz testing. CoRR</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">George</forename><surname>Klees</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Andrew</forename><surname>Ruef</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Benji</forename><surname>Cooper</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Shiyi</forename><surname>Wei</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Michael</forename><surname>Hicks</surname></persName>
		</author>
		<idno>abs/1808.09700</idno>
		<imprint>
			<date type="published" when="2018" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b20">
	<analytic>
		<title level="a" type="main">The art, science, and engineering of fuzzing: A survey</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><forename type="middle">M</forename><surname>Valentin</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Hyungseok</forename><surname>Manès</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Choongwoo</forename><surname>Han</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Sang</forename><forename type="middle">Kil</forename><surname>Han</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Manuel</forename><surname>Cha</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Edward</forename><forename type="middle">J</forename><surname>Egele</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Maverick</forename><surname>Schwartz</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Woo</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE Transactions on Software Engineering</title>
		<imprint>
			<date type="published" when="2019-10" />
			<publisher>Early Access</publisher>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b21">
	<monogr>
				<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Mitre</forename><surname>Cwe</surname></persName>
		</author>
		<ptr target="https://cwe.mitre.org/data/definitions/125.html" />
		<title level="m">Out-of-bounds read</title>
		<imprint>
			<date type="published" when="2020-02-03" />
			<biblScope unit="volume">125</biblScope>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b22">
	<monogr>
				<ptr target="https://cwe.mitre.org/data/definitions/787.html" />
		<title level="m">MITRE. Cwe-787: Out-of-bounds write</title>
		<imprint>
			<date type="published" when="2020-02-03" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b23">
	<analytic>
		<title level="a" type="main">The mann-whitney u: A test for assessing whether two independent samples come from the same distribution</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Nadim</forename><surname>Nachar</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Tutorials in quantitative Methods for Psychology</title>
		<imprint>
			<biblScope unit="volume">4</biblScope>
			<biblScope unit="issue">1</biblScope>
			<biblScope unit="page" from="13" to="20" />
			<date type="published" when="2008" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b24">
	<analytic>
		<title level="a" type="main">Deep work : rules for focused success in a distracted world</title>
	</analytic>
	<monogr>
		<title level="j">Cal Newport</title>
		<imprint>
			<date type="published" when="2016-01" />
			<publisher>Grand Central Publishing</publisher>
		</imprint>
	</monogr>
	<note>1st ed. edition</note>
</biblStruct>

<biblStruct xml:id="b25">
	<monogr>
		<title level="m" type="main">Fuzzing the OpenSSH daemon using AFL</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Vegard</forename><surname>Nossum</surname></persName>
		</author>
		<ptr target="http://www.vegardno.net/2017/03/fuzzing-openssh-daemon-using-afl.html" />
		<imprint>
			<date type="published" when="2019-03-30" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b26">
	<analytic>
		<title level="a" type="main">Between-subjects design</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Anne</forename><surname>Oeldorf-Hirsch</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">The SAGE Encyclopedia of Communication Research Methods</title>
		<editor>Mike Allen</editor>
		<meeting><address><addrLine>Thousand Oaks, California, USA</addrLine></address></meeting>
		<imprint>
			<publisher>SAGE Publications</publisher>
			<date type="published" when="2017" />
			<biblScope unit="volume">4</biblScope>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b27">
	<monogr>
				<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Hacker</forename><surname>One</surname></persName>
		</author>
		<title level="m">The 2019 hacker report</title>
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b28">
	<monogr>
		<title level="m" type="main">OpenWrt micro bus architecture</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Openwrt</surname></persName>
		</author>
		<ptr target="https://openwrt.org/docs/techref/ubus" />
		<imprint/>
	</monogr>
	<note>Accessed Januarary 22, 2020</note>
</biblStruct>

<biblStruct xml:id="b29">
	<monogr>
		<title level="m" type="main">Probability, random variables, and stochastic processes. Tata McGraw-Hill Education</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Athanasios</forename><surname>Papoulis</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Pillai</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2002" />
			<pubPlace>New York, New York</pubPlace>
		</imprint>
	</monogr>
	<note>2 edition</note>
</biblStruct>

<biblStruct xml:id="b30">
	<monogr>
		<title level="m" type="main">Identifying critical attack assets in dependency attack graphs</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Reginald</forename><forename type="middle">E</forename><surname>Sawilla</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Xinming</forename><surname>Ou</surname></persName>
		</author>
		<editor>Sushil Jajodia and Javier López</editor>
		<imprint>
			<biblScope unit="page">13</biblScope>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b31">
	<analytic>
			</analytic>
	<monogr>
		<title level="m">European Symposium on Research in Computer Security</title>
		<imprint>
			<publisher>Springer</publisher>
			<date type="published" when="2008" />
			<biblScope unit="volume">5283</biblScope>
			<biblScope unit="page" from="18" to="34" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b32">
	<monogr>
		<title level="m" type="main">OSS-Fuzz -Google&apos;s continuous fuzzing service for open source software</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Kostya</forename><surname>Serebryany</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2017-08" />
		</imprint>
	</monogr>
	<note>Invited talk at the 26th USENIX Security Symposium</note>
</biblStruct>

<biblStruct xml:id="b33">
	<analytic>
		<title level="a" type="main">The use and interpretation of the friedman test in the analysis of ordinal-scale data in repeated measures designs</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Michael R Sheldon</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Michael</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">W Douglas</forename><surname>Fillyaw</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Thompson</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Physiotherapy Research International</title>
		<imprint>
			<biblScope unit="volume">1</biblScope>
			<biblScope unit="issue">4</biblScope>
			<biblScope unit="page" from="221" to="228" />
			<date type="published" when="1996" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b34">
	<analytic>
		<title level="a" type="main">Internet security glossary, version 2</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Shirrey</surname></persName>
		</author>
		<ptr target="https://tools.ietf.org/rfc/rfc4949.txt" />
	</analytic>
	<monogr>
		<title level="j">RFC</title>
		<imprint>
			<biblScope unit="volume">4949</biblScope>
			<date type="published" when="2007-08" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b35">
	<monogr>
		<title level="m" type="main">Running OpenWrt inside Docker</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Paul</forename><surname>Spooren</surname></persName>
		</author>
		<ptr target="https://forum.openwrt.org/t/running-openwrt-inside-docker-sbin-init-stuck/13774/8" />
		<imprint/>
	</monogr>
	<note>Accessed December 17, 2019</note>
</biblStruct>

<biblStruct xml:id="b36">
	<analytic>
		<title level="a" type="main">Driller: Augmenting fuzzing through selective symbolic execution</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Nick</forename><surname>Stephens</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">John</forename><surname>Grosen</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Christopher</forename><surname>Salls</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Audrey</forename><surname>Dutcher</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Ruoyu</forename><surname>Wang</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Jacopo</forename><surname>Corbetta</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Yan</forename><surname>Shoshitaishvili</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Christopher</forename><surname>Kruegel</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Giovanni</forename><surname>Vigna</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 23rd Annual Network and Distributed System Security Symposium</title>
		<meeting>the 23rd Annual Network and Distributed System Security Symposium</meeting>
		<imprint>
			<date type="published" when="2016" />
			<biblScope unit="volume">16</biblScope>
			<biblScope unit="page" from="1" to="16" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b37">
	<monogr>
		<title/>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Robert</forename><surname>Swiecki</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Honggfuzz</surname></persName>
		</author>
		<ptr target="//honggfuzz.com" />
		<imprint>
			<date type="published" when="2019-12-18" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b38">
	<analytic>
		<title level="a" type="main">Classifying difficulty levels of programming questions on HackerRank</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Sai</forename><surname>Vamsi</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Venkata</forename><surname>Balamurali</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Praveen</forename><surname>Surya Teja</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Mallela</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">International Conference on E-Business and Telecommunications</title>
		<imprint>
			<publisher>Springer</publisher>
			<date type="published" when="2019" />
			<biblScope unit="volume">3</biblScope>
			<biblScope unit="page" from="301" to="308" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b39">
	<analytic>
		<title level="a" type="main">Hackers vs. testers: A comparison of software vulnerability discovery processes</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Daniel</forename><surname>Votipka</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Rock</forename><surname>Stevens</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Elissa</forename><surname>Redmiles</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Jeremy</forename><surname>Hu</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Michelle</forename><surname>Mazurek</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">2018 IEEE Symposium on Security and Privacy</title>
		<imprint>
			<date type="published" when="2018-05" />
			<biblScope unit="page" from="374" to="391" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b40">
	<monogr>
		<title level="m" type="main">Wilcoxon Signed-Rank Test</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><forename type="middle">F</forename><surname>Woolson</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2008" />
			<publisher>American Cancer Society</publisher>
			<biblScope unit="page" from="1" to="3" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b41">
	<monogr>
		<title level="m" type="main">American Fuzzy Lop</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Michal</forename><surname>Zalewski</surname></persName>
		</author>
		<imprint/>
	</monogr>
</biblStruct>

				</listBibl>
			</div>
		</back>
	</text>
</TEI>
