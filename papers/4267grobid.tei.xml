<?xml version="1.0" encoding="UTF-8"?>
<TEI xmlns="http://www.tei-c.org/ns/1.0" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
xsi:schemaLocation="http://www.tei-c.org/ns/1.0 /Users/atharsefid/Desktop/grobid-0.5.3/grobid-home/schemas/xsd/Grobid.xsd"
 xmlns:xlink="http://www.w3.org/1999/xlink">
	<teiHeader xml:lang="en">
		<encodingDesc>
			<appInfo>
				<application version="0.5.3" ident="GROBID" when="2020-09-29T04:08+0000">
					<ref target="https://github.com/kermitt2/grobid">GROBID - A machine learning software for extracting information from scholarly documents</ref>
				</application>
			</appInfo>
		</encodingDesc>
		<fileDesc>
			<titleStmt>
				<title level="a" type="main">Open access to the Proceedings of the 29th USENIX Security Symposium is sponsored by USENIX. Datalog Disassembly Datalog Disassembly</title>
			</titleStmt>
			<publicationStmt>
				<publisher/>
				<availability status="unknown"><licence/></availability>
				<date>August 12-14, 2020</date>
			</publicationStmt>
			<sourceDesc>
				<biblStruct>
					<analytic>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Antonio</forename><surname>Flores-Montoya</surname></persName>
							<email>afloresmontoya@grammatech.com</email>
							<affiliation key="aff0">
								<orgName type="department" key="dep1">Inc</orgName>
								<orgName type="department" key="dep2">Inc</orgName>
								<orgName type="institution">GrammaTech Inc</orgName>
							</affiliation>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Eric</forename><surname>Schulte</surname></persName>
							<email>eschulte@grammatech.com</email>
							<affiliation key="aff0">
								<orgName type="department" key="dep1">Inc</orgName>
								<orgName type="department" key="dep2">Inc</orgName>
								<orgName type="institution">GrammaTech Inc</orgName>
							</affiliation>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Antonio</forename><surname>Flores-Montoya</surname></persName>
							<affiliation key="aff0">
								<orgName type="department" key="dep1">Inc</orgName>
								<orgName type="department" key="dep2">Inc</orgName>
								<orgName type="institution">GrammaTech Inc</orgName>
							</affiliation>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Eric</forename><surname>Schulte</surname></persName>
							<affiliation key="aff0">
								<orgName type="department" key="dep1">Inc</orgName>
								<orgName type="department" key="dep2">Inc</orgName>
								<orgName type="institution">GrammaTech Inc</orgName>
							</affiliation>
						</author>
						<title level="a" type="main">Open access to the Proceedings of the 29th USENIX Security Symposium is sponsored by USENIX. Datalog Disassembly Datalog Disassembly</title>
					</analytic>
					<monogr>
						<title level="m">Proceedings of the 29th USENIX Security Symposium</title>
						<meeting>the 29th USENIX Security Symposium						</meeting>
						<imprint>
							<date type="published">August 12-14, 2020</date>
						</imprint>
					</monogr>
					<note>This paper is included in the 978-1-939133-17-5 https://www.usenix.org/conference/usenixsecurity20/presentation/flores-montoya</note>
				</biblStruct>
			</sourceDesc>
		</fileDesc>
		<profileDesc>
			<abstract>
				<p>Disassembly is fundamental to binary analysis and rewriting. We present a novel disassembly technique that takes a stripped binary and produces reassembleable assembly code. The resulting assembly code has accurate symbolic information , providing cross-references for analysis and to enable adjustment of code and data pointers to accommodate rewriting. Our technique features multiple static analyses and heuris-tics in a combined Datalog implementation. We argue that Datalog&apos;s inference process is particularly well suited for dis-assembly and the required analyses. Our implementation and experiments support this claim. We have implemented our approach into an open-source tool called Ddisasm. In extensive experiments in which we rewrite thousands of x64 binaries we find Ddisasm is both faster and more accurate than the current state-of-the-art binary reassembling tool, Ramblr.</p>
			</abstract>
		</profileDesc>
	</teiHeader>
	<text xml:lang="en">
		<body>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="1">Introduction</head><p>Software is increasingly ubiquitous and the identification and mitigation of software vulnerabilities is increasingly essential to the functioning of modern society. In many cases-e.g., COTS or legacy binaries, libraries, and drivers-source code is not available so identification and mitigation requires binary analysis and rewriting. Many disassemblers <ref type="bibr" target="#b6">[9,</ref><ref type="bibr" target="#b7">10,</ref><ref type="bibr" target="#b21">23,</ref><ref type="bibr" target="#b29">31,</ref><ref type="bibr" target="#b34">36,</ref><ref type="bibr" target="#b53">56,</ref><ref type="bibr" target="#b54">57,</ref><ref type="bibr" target="#b56">59]</ref>, analysis frameworks <ref type="bibr">[4,</ref><ref type="bibr" target="#b4">7,</ref><ref type="bibr" target="#b9">12,</ref><ref type="bibr" target="#b17">19,</ref><ref type="bibr" target="#b23">[25]</ref><ref type="bibr" target="#b24">[26]</ref><ref type="bibr" target="#b25">[27]</ref><ref type="bibr" target="#b27">29,</ref><ref type="bibr">39,</ref><ref type="bibr" target="#b45">48]</ref>, rewriting frameworks <ref type="bibr" target="#b6">[9,</ref><ref type="bibr" target="#b13">16,</ref><ref type="bibr" target="#b15">17,</ref><ref type="bibr" target="#b30">32,</ref><ref type="bibr" target="#b31">33,</ref><ref type="bibr" target="#b49">52,</ref><ref type="bibr" target="#b52">55,</ref><ref type="bibr" target="#b55">58,</ref><ref type="bibr" target="#b61">63]</ref>, and reassembling tools <ref type="bibr" target="#b34">[36,</ref><ref type="bibr" target="#b53">56,</ref><ref type="bibr" target="#b54">57]</ref> have been developed to support this need. Many applications depend on these tools including binary hardening with control flow protection <ref type="bibr" target="#b18">[20,</ref><ref type="bibr" target="#b35">37,</ref><ref type="bibr" target="#b37">40,</ref><ref type="bibr" target="#b51">54,</ref><ref type="bibr" target="#b60">62,</ref><ref type="bibr" target="#b62">64]</ref>, memory protections <ref type="bibr" target="#b12">[15,</ref><ref type="bibr" target="#b38">41,</ref><ref type="bibr" target="#b46">49]</ref>, memory diversity <ref type="bibr" target="#b11">[14,</ref><ref type="bibr" target="#b28">30]</ref>, binary refactoring <ref type="bibr" target="#b50">[53]</ref>, binary instrumentation <ref type="bibr" target="#b41">[44]</ref>, and binary optimization <ref type="bibr" target="#b41">[44,</ref><ref type="bibr" target="#b44">47,</ref><ref type="bibr" target="#b52">55]</ref>.</p><p>Modifying a binary is not easy. Machine code is not designed to be modified and the compilation and assembly process discards essential information. In general reversing assembly is not decidable. The information required to produce reassembleable disassembly includes:</p><p>Instruction boundaries Recovering where instructions start and end can be challenging especially in architectures such as x64 that have variable length instructions, dense instruction sets 1 , and sometimes interleave code and data. This problem is also referred as content classification. Symbolization information In binaries, there is no distinction between a number that represents a literal and a reference that points to a location in the code or data. If we modify a binary-e.g., by moving a block of codeall references pointing to that block, and to all of the subsequently shifted blocks, have to be updated. On the other hand, literals, even if they coincide with the address of a block, have to remain unchanged. This problem is also referred to as Literal Reference Disambiguation. We have developed a disassembler that infers precise information for both questions and thus generates reassembleable assembly for a large variety of programs. These problems are not solvable in general so our approach leverages a combination of static program analysis and heuristics derived from empirical analysis of common compiler and assembler idioms. The static analysis, heuristics, and their combination are implemented in Datalog. Datalog is a declarative language that can be used to express dataflow analyses very concisely <ref type="bibr" target="#b47">[50]</ref> and it has recently gained attention with the appearance of engines such as Souffle <ref type="bibr" target="#b26">[28]</ref> that generate highly efficient parallel C++ code from a Datalog program. We argue that Datalog is so well suited to the implementation of a disassembler that it represents a qualitative change in what is possible in terms of accuracy and efficiency.</p><p>We can conceptualize disassembly as taking a series of decisions. Instruction boundary identification (IBI) amounts to deciding, for each address x in an executable section, whether x represent the beginning of an instruction or not. Symbolization amounts to deciding for each number that appears inside an instruction operand or data section whether it corresponds to a literal or to a symbolic expression and what kind of symbolic expression it is. <ref type="bibr" target="#b0">2</ref> The high level approach for each of these decisions is the same. A variety of static analyses are performed that gather evidence for possible interpretations. Then, Datalog rules assign weights to the evidence and aggregate the results for each interpretation. Finally, a decision is taken according to the aggregate weight of each possible interpretation. Our implementation infers instruction boundaries first (described in <ref type="bibr">Sec. 4)</ref>. Then it performs several static analyses to support the symbolization procedure: the computation of def-use chains, a novel register value analysis, and a data access pattern analysis described in Sec. 5.1, 5.2, and 5.3 respectively. Finally, it combines the results of the static analyses with other heuristics to inform symbolization. All these steps are implemented in a single Datalog program. It is worth noting that-Datalog being a purely declarative language-the sequence in which each of the disassembly steps is computed stems solely from the logical dependencies among the different Datalog rules. Combining multiple analyses and heuristics is essential to achieve high accuracy for IBI and symbolization. No individual analysis or heuristic provides perfect information but by combining several, Ddisasm maximizes its chances to reach the right conclusion. The declarative nature of Datalog makes this combination easy.</p><p>We have tested Ddisasm and compared it to Ramblr <ref type="bibr" target="#b53">[56]</ref> (the current best published disassembler that produces reassembleable assembly) on 200 benchmark programs including 106 Coreutils, 25 real world applications, and 69 binaries from DARPA's Cyber Grand Challenge (CGC) <ref type="bibr">[1]</ref>. We compile each benchmark using 7 compilers and 5 or 6 optimization flags (depending on the benchmark) yielding a total of 7658 unique binaries (888 MB of binary data). We compare the precision of the disassemblers by making semanticspreserving modifications to the assembly code-we "stretch" the program's code address space by adding NOPs at regular intervals-reassembling the modified assembly code, and then running the test suites distributed with the binaries to check that they retain functionality. Additionally, we evaluate the symbolization step by comparing the results of the disassembler to the ground truth extracted from binaries generated with all relocation information. Finally, we compare the disassemblers in terms of the time taken by the disassembly process. Ddisasm is faster and more accurate than Ramblr.</p><p>Our contributions are:</p><p>1. We present a new disassembly framework based on combining static analysis and heuristics expressed in Datalog. This framework enables much faster development and empirical evaluation of new heuristics and analyses. 2. We present multiple static analyses implemented in this framework to support building reassembleable assembly. 3. We present multiple empirically motivated heuristics that are effective in inferring the necessary information to produce reassembleable assembly. 4. Our implementation is called Ddisasm and it is open source and publicly available <ref type="bibr" target="#b1">3</ref> . Ddisasm produces assembly text as well as an intermediate representation (IR) tailored for binary analysis and rewriting <ref type="bibr">4</ref> . 5. We demonstrate the effectiveness of our approach through an extensive experimental evaluation of over 7658 binaries in which we compare Ddisasm to the stateof-the-art tool in reassembleable disassembly Ramblr.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2">Related Work</head></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.1">Disassemblers</head><p>Bin-CFI <ref type="bibr" target="#b62">[64]</ref> is an early work in reassembleable disassembly. This work requires relocation information (avoiding the need for symbolization). With this information, disassembly is reduced to the problem of IBI. Bin-CFI combines linear disasssembly with the backward propagation of invalid opcodes and invalid jumps. Our IBI also propagates invalid opcodes and jumps backwards, but it couples it with a more sophisticated forward traversal. Many other works focus solely on IBI <ref type="bibr" target="#b7">[10,</ref><ref type="bibr" target="#b29">31,</ref><ref type="bibr" target="#b34">36,</ref><ref type="bibr" target="#b56">59]</ref>. None of these address symbolization. In general they try to obtain a superset of all possible instructions or basic blocks in the binary and then determine which ones are real using heuristics. This idea is also present in our approach. Both Miller et al. <ref type="bibr" target="#b34">[36]</ref> and <ref type="bibr">Wartell et al. [59]</ref> use probabilistic methods to determine which addresses contain instructions. In the former, probabilistic techniques with weighted heuristics are used to estimate the probability that each offset in the code section is the start of an instruction. In the latter, a probabilistic finite state machine is trained on a large corpus of disassembled programs to learn common opcode operand pairs. These pairs are used to select among possible assembly codes.</p><p>Despite all the work on disassembly, there are disagreements on how often challenging features for IBI-e.g., overlapping instructions, data in code sections, and multi-entry functions-are present in real code <ref type="bibr" target="#b3">[6,</ref><ref type="bibr" target="#b33">35,</ref><ref type="bibr" target="#b34">36]</ref>. Our experience matches <ref type="bibr" target="#b3">[6]</ref> for GCC and Clang, in that we did not find data in executable sections nor overlapping instructions in ELF binaries. However, this is not true for the Intel compiler (ICC) which often allocates jump tables in executable sections.</p><p>There are only a few systems that address the symbolization problem directly. Uroboros <ref type="bibr" target="#b54">[57]</ref> uses linear disassembly as introduced by Bin-CFI <ref type="bibr" target="#b62">[64]</ref> and adds heuristics for symbolization. The authors distinguish four classes of symbolization depending on if the source and target of the reference are present in code or data. The difficulty of each class is assessed and partial solutions are proposed for each class.</p><p>Ramblr <ref type="bibr" target="#b53">[56]</ref> is the closest related work. It improves upon Uroboros with increasingly sophisticated static analyses. Ramblr is part of the Angr framework for binary analysis <ref type="bibr" target="#b45">[48]</ref>. Our system also uses static analyses in combination with heuristics. Our static analyses (Sec. 5) are specially tailored to enable symbolization while remaining efficient. Moreover, our Datalog implementation allow us to easily combine analysis results and heuristics.</p><p>RetroWrite <ref type="bibr" target="#b16">[18]</ref> also performs symbolization, but only for position independent code (PIC) as it relies on relocations. In Sec. 7.1, we argue why we believe that relocations are not enough to perform symbolization even for PIC.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.2">Rewriting Systems</head><p>REINS <ref type="bibr" target="#b55">[58]</ref> rewrites binaries in such a way as to avoid making difficult decisions about symbolization. REINS partitions the memory of rewritten programs into untrusted low-memory which includes rewritten code and trusted high-memory (divided at a power of two for efficient guarding). They implement a lightweight binary lookup table to rewrite each old jump targets with a tagged pointer to its new location in the rewritten code. REINS targets Windows binaries and its main goal is to rewrite untrusted code to execute it safely. REINS uses IDA Pro <ref type="bibr" target="#b1">[3]</ref> to perform IBI and to resolve indirect jumps.</p><p>SecondWrite <ref type="bibr" target="#b49">[52]</ref> also avoids making symbolization decisions by translating jump targets at their point of usage. They do a conservative identification of code and data by performing speculative disassembly and keeping the original code section intact. Any data in the code section can still be accessed, but jumps and call targets are translated to a rewritten code section. SecondWrite disassembles to LLVM IR. MULTIVERSE <ref type="bibr" target="#b6">[9]</ref> goes a step further than SecondWrite and also avoids making code location determinations by treating every possible instruction offset as a valid instruction. Similarly to SecondWrite, it avoids making symbolization determinations by generating rewritten executables in which every indirect control flow is mediated by additional machinery to determine where the control flow would have gone in the original program and redirecting it to the appropriate portion of the rewritten program.</p><p>The approaches of REINS, SecondWrite and MULTI-VERSE increasingly avoid making decisions about code location and symbolization and thus offer more guarantees to work for arbitrary binaries. However, these approaches also have disadvantages. They introduce overhead in the rewritten binaries both in terms of speed and size. Moreover, the additional translation process for indirect jumps or calls is likely to hinder later analyses on the disassembled code. On the other hand, our approach, although not guaranteed to work, generates assembly code with symbolic references. This enables performing advanced static analyses on the assembly code that can be used to support more sophisticated rewriting techniques. A binary can be rewritten multiple times without introducing a new layer of indirection in every rewrite.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.3">Static Analysis Using Datalog</head><p>Datalog has a long history of being used to specify and implement static analyses. In 1995 Reps <ref type="bibr" target="#b40">[43]</ref> presented an approach to obtain demand driven dataflow analyses from the exhaustive counterparts specified in Datalog using the magic sets transformation. Much of the subsequent effort has been in scaling Datalog implementations. In that vein, Whaley et al. <ref type="bibr" target="#b58">[60,</ref><ref type="bibr" target="#b59">61]</ref> achieved significant pointer analysis scalability improvements using an implementation based on binary decision diagrams. More recently, Datalog-based program analysis has received new impetus with the development of Souffle <ref type="bibr" target="#b26">[28]</ref>, a highly efficient Datalog engine. The most prominent application of Datalog to program analysis to date has been Doop <ref type="bibr" target="#b8">[11,</ref><ref type="bibr" target="#b47">50,</ref><ref type="bibr" target="#b48">51]</ref>, a context sensitive pointer analysis for Java bytecode that scales to large applications. Doop is currently one of the most comprehensive and efficient pointer analysis for Java.</p><p>In the context of binary analysis, we are only aware of the work of Brumley et al. <ref type="bibr" target="#b10">[13]</ref> which uses Datalog to specify an alias analysis for assembly code. <ref type="bibr">Schwartz et al. [46]</ref> present a binary analysis to recover C++ classes from executables written in Prolog. Prolog, being more expressive than Datalog, is typically evaluated starting from a goal-in contrast to Datalog which can be evaluated bottom-up-and using backtracking. Thus, in Prolog programs the order of the inference rules is important and its evaluation is harder to parallelize.</p><p>Very recently, Grech et al. <ref type="bibr" target="#b22">[24]</ref> have implemented a decompiler, named Gigahorse, for Etherium virtual machine (EVM) byte code using Datalog. Gigahorse shares some high level ideas with our approach, i.e. the inference of high level information from low-level code using Datalog. However, both the target and the inferred information differ considerably. In EVM byte code, the main challenge is to obtain a register based IR (EVM byte code is stack based), resolve jump targets and identify function boundaries. On the other hand, Ddisasm focuses on obtaining instruction boundaries and symbolization information for x64 binaries. Additionally, although Gigahorse also implements heuristics using Datalog rules, it does not use our approach of assigning weights to heuristics and aggregating them to make final decisions.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3">Preliminaries</head></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.1">Introduction to Datalog</head><p>A Datalog program is a collection of Datalog rules. A Datalog rule is a restricted kind of horn clause with the following format: h : − t 1 ,t 2 , . . . ,t n where h,t 1 ,t 2 , . . . ,t n are predicates. Rules represent a logical entailment: t 1 ∧ t 2 ∧ . . . ∧ t n → h. Predicates in Datalog are limited to flat terms of the form t(s 1 , s 2 , . . . , s n ) where s 1 , s 2 . . . , s n are variables, integers or strings. Given a Datalog rule h : − t 1 ,t 2 , . . . ,t n , we say h is the head of the rule and t 1 ,t 2 , . . . ,t n is its body. Datalog rules are often recursive, and they can contain negated predicates, represented as !t. However, negated predicates need to be stratified-there cannot be circular dependencies that involve negated predicates e.g. p(X): −!q(X) and q(A): −!p(A). This restriction guarantees that its semantics are well defined. Additionally, all variables in a Datalog rule need to be grounded, i.e. they need to appear in at least one non-negated predicate on the rule's body. Datalog also admits disjunctive rules denoted with a semicolon e.g. h : −t 1 ;t 2 that are equivalent to several regular rules h : − t 1 and h : − t 2 .</p><p>The Datalog dialect that we adopt (Souffle's dialect) supports additional constructs such as arithmetic operations, string operations and aggregates. Aggregates compute operations over a complete set of predicates such as summation, maximums or minimums, and we use them to integrate the results of our heuristics.</p><p>A Datalog engine takes as input a set of facts, which are predicates known to be true, and a Datalog program (a set of rules). The engine generates new predicates by repeatedly applying the inference rules until a fixpoint is reached. One of the appeals of Datalog is that it is fully declarative. The result of a computation does not depend on the order in which rules are considered or the order in which predicates within a rule's body are evaluated. This makes it easy to define multiple analyses that depend and collaborate with each other.</p><p>In our case, the initial set of facts encodes all the information present in the binary, the disassembly procedure (with all its auxiliary analyses) is specified as a set of Datalog rules. The results of the disassembly are the new set of predicates. These predicates are then used to build an IR for binaries that can be reassembled.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.2">Encoding Binaries in Datalog</head><p>The first step in our analysis is to encode all the information present in the binary into Datalog facts. We consider two basic domains: strings, denoted as S, and 64 bit machine numbers, denoted as Z 64 . We consider also the following sub-domains: addresses A ⊆ Z 64 , register names R ⊆ S and operand identifiers O ⊆ Z 64 . We adopt the convention of having Datalog variables start with a capital letter and predicates with lower case. We represent addresses in hexadecimal and all other numbers in decimal. We only use the prefix 0x for hexadecimal numbers if there is ambiguity. <ref type="figure" target="#fig_0">Fig. 1</ref>  Note that the operand identifiers have no particular meaning. They are assigned to operands sequentially as these are encountered during the decoding.</p><p>In addition to decoding every possible instruction, we encode every section (both data and executable sections) as follows. For each address A in a section, a fact data_byte(A, Val) is generated where Val is the value of the byte at address A. We also generate the facts address_in_data(A,Addr) for each address A in a section such that the values of the bytes from A to A+7 (8 bytes) <ref type="bibr" target="#b3">6</ref> correspond to an address Addr that falls in the address range of a section in the binary. These facts will be our initial candidates for symbolization. Executable sections are also encoded this way to support binaries that interleave data with code.</p><p>Finally, additional facts are generated from the section, relocation, and symbol tables of the executable as well as a special fact entry_point(A:A) with the entry point of the executable. Note that for libraries, function symbol predicates are generated for all exported functions and they will be considered as entry points.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4">Instruction Boundary Identification</head><p>The predicate instruction contains all the possible instructions that might be in the executable. IBI amounts to deciding which of these are real instructions.</p><p>Our IBI is based on three steps: 1. A backward traversal starting from invalid addresses. 2. A forward traversal that combines elements of linearsweep and recursive-traversal. 3. A conflict resolution phase to discard spurious blocks. Both the backward and forward traversals use the auxiliary predicates may_fallthrough(From:A,To:A) and must_fallthrough(From:A,To:A) to represent instructions at address From that may fall through or must fall through to an address To. <ref type="figure" target="#fig_2">Fig. 3</ref> contains the rules that define both predicates <ref type="bibr" target="#b4">7</ref> . An instruction at address From may fall through to the next one at address From+Size as long as it is not a return, a halt, or an unconditional jump instruction. Rule 1 depends in turn on other auxiliary predicates that abstract away specific aspects of concrete assembler instructions e.g. return_operation is simply defined as return_operation ('ret') for x64. The predicate must_fallthrough restricts <ref type="bibr" target="#b3">6</ref> Our analysis considers x64 architecture. <ref type="bibr" target="#b4">7</ref> Some of the rules have been slightly adapted for presentation purposes.  may_fallthrough further by discarding instructions that might not continue to the next instruction i.e. calls, jumps, or interrupt operations (we consider instructions with a loop prefix as having a jump to themselves).</p><p>The traversals also depend on other predicates whose definitions we omit: direct_jump(From:A,To:A), direct_call (From:A,To:A), pc_relative_jump(From:A,To:A), and pc_relative_call(From:A,To:A) represent instructions at address From that have a direct or RIP-relative jump or call to an address To.</p><p>Example 2. Consider the code in <ref type="figure">Fig. 2</ref>. The mov instruction at address 416C4E generates the predicates must_fallthrough(416C4E,416C53) and may_fallthrough (416C4E,416C53) whereas the call instruction only generates may_fallthrough(416C53,416C58). This is because the function at address 413050 (the target of the call) might not return. The call instruction also generates the predicate direct_call (416C53,413050).</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.1">Backward Traversal</head><p>Our backward traversal simply expands the amount of invalid predicates through the implication that any instruction unconditionally leading to an invalid instruction must itself be invalid.</p><formula xml:id="formula_0">invalid(From):− (must_fallthrough(From,To) ; direct_jump(From,To) ; direct_call(From,To) ; pc_relative_jump(From,To) ; pc_relative_call(From,To)), (invalid(To) ; !instruction(To,_,_,_,_,_,_,_)). (3) possible_effective_address(A):− instruction(A,_,_,_,_,_,_,_), !invalid(A).<label>(4)</label></formula><p>Rule 3 specifies that an instruction at address From that jumps, calls or must fall through to an address To that does      </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.2">Forward Traversal</head><p>The forward traversal follows an approach that falls between the two classical approaches linear-sweep and recursivetraversal. It traverses the code recursively but is much more aggressive than typical traversals in terms of the targets that it considers. Instead of starting the traversal only on the targets of direct jumps or calls, every address that appears in one of the operands of the already traversed code is considered a possible target. For example, in <ref type="figure">Fig. 2</ref>, as soon as the analysis traverses instruction mov EDX, OFFSET 0x45CB23, it will consider the address 45CB23 as a potential target that it needs to explore. Additionally, potential addresses appearing in the data (instances of predicate address_in_data) are also considered potential targets.</p><p>The traversal is defined with two mutually recursive predicates: possible_target(A:A) specifies addresses where we start traversing the code and code_in_block_candidate(A:A ,Block:A) takes care of the traversing and assigning instructions to basic blocks. A predicate code_in_block_candidate (A:A,Block:A) denotes that the instruction address A belongs to the candidate code block that starts at address Block.</p><p>The definition of these predicates can be found in <ref type="figure" target="#fig_8">Fig. 4</ref>.</p><p>The traversal starts with the initial_target (Rule 8) that contains the addresses of: entry points, any existing function symbols, landing pad addresses (defined in the exception information sections), the start addresses of executable sections, and all addresses in address_in_data. This last component implies that all the targets of jump tables or function pointers present in the data sections will be traversed. However, not all jump tables are lists of absolute addresses (captured by address_in_data). Sometimes jump tables are stored as differences between two symbols i.e. Symbol1− Symbol2. In these tables, the jump target Symbol1 is computed by loading Symbol2 first and then adding the content of the jump table entry. We found this pattern in PIC code and in position dependent code compiled with ICC (see App. A). An approximation of these jump tables is detected with ad-hoc rules and their targets are included in initial_target.</p><p>A possible target, marks the beginning of a new basic block candidate (Rule 5). The candidate block is then extended as long as the instructions are guaranteed to fall through and we do not reach a block_limit (Rule 6). The predicate block_limit over-approximates possible_target (it is computed the same way but without requiring the predicate code_in_block_candidate in Rule 9). Rule 7 starts a new block if the instruction is not guaranteed to fall through or if there is a block limit. That is where the previous block ends. Any addresses or jump/call targets that appear in a block candidate are considered new possible targets (Rule 9). may_have_symbolic_immediate includes direct jumps and calls but also other immediates. E.g. instruction mov EDX, OFFSET 45CB23 generates may_have_symbolic_immediate (416C4E,45CB23). Note that this is much more aggressive than a typical recursive traversal that would only consider the targets of jumps or calls. Finally, Rule 10 adds a linear-sweep component to the traversal. after_block_end(End:A,A:A) contains addresses A after blocks that end with an instruction that cannot fall through at End (e.g. an unconditional jump or a return). This predicate skips any padding (e.g., contiguous NOPs) that might be found after the end of the previous block.</p><p>It is worth noting that in our Datalog specification we do not have to worry about many issues that would be important in lower level implementations of equivalent binary traversals. For instance, we do not need to keep track of which instructions and blocks have already been traversed nor do we specify the order in which different paths are explored.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.3">Solving Block Conflicts</head><p>Once the second traversal is over, we have a set of candidate blocks, each one with a set of instructions (encoded in the predicate code_in_block_candidate). These blocks represent our best effort to obtain an over-approximation of the basic blocks in the original program. In principle, it is possible to miss code blocks. However, such code block would have to be reachable only through a computed jump/call and be preceded by data that derails the linear-sweep component of the traversal (Rule 10). We have not found any instance of this situation. We remark that if the address of a block appears anywhere in the code or in the data, it will be considered. For instance, ICC puts some jump tables in executable sections. By detecting these jump tables, we consider their jump targets (which are typically the blocks after the jump table) as possible targets in our traversal.</p><p>The next step in our IBI is to decide which candidate blocks are real. For that, we detect the blocks that overlap with each other or with a potential data segment (e.g. a jump table in the executable section). Overlapping blocks are extremely uncommon in compiled code. The situations in which they appear tend to respond to very specific patterns such as a block starting with or without a lock prefix <ref type="bibr" target="#b33">[35]</ref>. We recognize those patterns with ad-hoc rules and consider that the remaining blocks should not overlap. Thus, if two blocks overlap, we assume one of them is spurious and needs to be discarded. This assumption could be relaxed if we wanted to disassemble malware but it is generally useful for compiled binaries.</p><p>We decide which blocks to discard using heuristics. Each heuristic is implemented as a Datalog rule that produces a predicate of the form block_points(Block:A,Src:A ,Points:Z 64 ,Why:S). Such a predicate assigns Points points to the block starting at address Block. The field Src is an optional reference to another block that is the cause of the points or zero for heuristics that are not based on other blocks. The field Why is a string that describes the heuristic for debugging purposes and to distinguish the predicate from others generated from different heuristics.</p><p>We compute the total number of points for each block using Souffle's aggregates <ref type="bibr" target="#b26">[28]</ref>. Then, given two overlapping blocks, we discard the one with the least points. In case of a tie, we keep the first block and emit a warning. We also discard blocks if their total points is below a threshold. This is useful for blocks whose heuristics indicate overlap with data elements.</p><p>Our heuristics are mainly based on how blocks are interconnected, how they fit together spatially, and whether they are referenced by potential pointers or overlap with jump tables. Some of the heuristics used are described below (+ for positive points and − for negative points): + The block is called, jumped to, or there is a fallthrough from a non-overlapping block. + The block's initial address appears somewhere in the code or data sections. If the appearance is at an aligned address, it receives more points. + The block calls/jumps other non-overlapping blocks. − A potential jump table overlaps with the block. All memory not covered by a block is considered data.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5">Auxiliary Analyses</head><p>The next step in our disassembly procedure is symbolization. However, we first perform several static analyses to infer how data is accessed and used, and thus deduce its layout. The register Reg is defined at address Adef and used at address Aused in the operand with index Index.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5.1">Register Def-Use Analysis</head><p>The analysis first infers definitions def(Adef:A,Reg:R) and uses use(Aused:A,Reg:R,Index:Z 64 ). Then, it propagates definitions through the code and matches them to uses. The analysis is intra-procedural in that it does not traverse calls but only direct jumps. This makes the analysis incomplete but improves scalability. During the propagation of definitions, the analysis assumes that certain registers keep their values through calls following Linux x64 calling convention <ref type="bibr" target="#b32">[34]</ref>.</p><p>Example 3. Consider the code fragment in <ref type="figure">Fig. 2</ref>. The DefUse analysis produces the following predicates:</p><formula xml:id="formula_1">def_used(416C35,'RBX',416C47,1) def_used(416C35,'RBX',416C58,2) def_used(416C58,'RBX',416C58,2) def_used(416C58,'RBX',416C47,1)</formula><p>One important detail is that the analysis considers the 32 bits and 64 bits registers as one given that the x64 architecture zeroes the upper part of 64 bits registers whenever the corresponding 32 bits register is written. That means that for instruction mov EDX, OFFSET 0x45CB23 at address 416C4E, the analysis generates a definition def(416C4E,RDX).</p><p>Once we have def-use chains, we want to know which register definitions are potentially used to compute addresses to access memory. For that purpose, the disassembler computes a new predicate: def_used_for_address(Adef:A,Reg:R) that denotes that the register Reg defined at address Adef might be used to compute a memory access. This predicate is computed by traversing def-use chains backwards starting from instructions that access memory. This traversal is transitive, if a register R is used in an instruction that defines another register R and that register is used to compute an address, then R is also used to compute an address. This is captured in the following Datalog rule: </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5.2">Register Value Analysis</head><p>In contrast to instructions that refer to code, where direct references (direct jumps or calls) predominate, memory accesses are usually computed. Rather than accessing a fixed address, instructions typically access addresses computed with a combination of register values and constants. This address computation is often done over several instructions. Such is the case in the example code in <ref type="figure">Fig. 2</ref>. In order to approximate this behavior, we developed an analysis that computes the value held in a register at an address. There are many ways of approximating register values ranging from simple constant propagation to complex abstract domains that take memory locations into account e.g. <ref type="bibr" target="#b5">[8]</ref>. Generally, the more complex the analysis domain, the more expensive it is. Therefore, we have chosen a minimal representation that captures the kind of register values that are typically used for accessing memory. Our value analysis representation is based on the idea that typical memory accesses follow a particular pattern where the memory address that is accessed is computed using a base address, plus an index multiplied by a multiplier. Consequently, the value analysis produces predicates of the form: which represents that the value of a register Reg at address A is equal to the value of another register Reg2 at address A2 multiplied by Mult plus an displacement Disp (or offset).</p><p>The analysis proceeds in two phases. The first phase produces predicates of the form reg_val_edge which share the signature with reg_val. We generate one reg_val_edge per instruction and def-use predicate for the instructions whose behavior can be modeled in this domain and are used to compute an address (def_used_for_address). For example, Rule 12 below generates reg_val_edge predicates for add instructions that add a constant to a register: </p><p>Example 4. Continuing with Example 3, the predicates reg_val_edge generated for the code in <ref type="figure">Fig. 2</ref> are: Predicate P1 captures that RBX has a constant value after executing the instruction in address 416C35 (note that the multiplier is 0 and the register has a special value 'NONE'). Predicate P2, generated from Rule 12, specifies that the value of RBX defined at address 416C58 corresponds to the value of RBX defined at 416C35 plus 24. Finally, P3 denotes that the value of RBX at 416C58 can be the result of incrementing the value of RBX defined at the same address by 24.</p><p>The set of predicates reg_val_edge can be seen as directed relational graph. The nodes in the graph are pairs of address and register <ref type="bibr">(A, Reg)</ref> and the edges express relations between their values i.e. they are labeled with a multiplier and offset.</p><p>Once this graph is computed, we perform a propagation phase akin to a transitive closure. This propagation phase chains together reg_val_edge predicates. The chaining starts from the leafs of the graph (nodes with no incoming edges). Leafs in the reg_val_edge graph can be instructions that load a constant into a register such as mov RBX, -624 in <ref type="figure">Fig. 2</ref> or instructions where a register is assigned the result of an operation not supported by the domain. For example, loading a value from memory mov RDI, <ref type="bibr">[RIP+0x25D239]</ref> in <ref type="figure">Fig. 2</ref>. In that case, the generated predicate would be the tautological predicate reg_val(416C40,RBX,416C40,RBX,1,0).</p><p>In order to ensure termination and for efficiency reasons we limit the number of propagation steps by a constant step_limit with an additional field S:Z 64 in the reg_val predicates. The main rule for combining reg_val_edge predicates is the following: reg_val(A1,R1,A3,R3,M1 * M2,(D2 * M1)+D1,S+1):− reg_val(A2,R2,A3,R3,M2,D2,S), reg_val_edge(A1,R1,A2,R2,M1,D1), A1 != A2, step_limit(Limit), S+1 &lt; Limit.</p><p>This rule chains edges linearly by combining their multipliers and displacements. It keeps track of operations that involve one source register and one destination register. However, we also want to detect situations where multiple edges converge into one instruction. Specifically, we want to detect loops and operations that involve multiple registers. Detecting Simple Loops. The following rule (Rule 14) detects situations where a register R is initialized to a constant D1, then incremented/decremented in a loop by a constant D2. reg_val(A,Reg,A2,'Unknown',D2,D1,S+1):− reg_val(A,R,A2,'NONE',0,D1,S), reg_val_edge(A,R,A,R,0,D2), step_limit(Limit), S+1 &lt; Limit.</p><p>This pattern can be interpreted as D1 being the base for a memory address and D2 being the multiplier used to access different elements of a data structure. Our new multiplier D2 does not actually multiply any real register, so we set the register field to a special value 'Unknown'. First, predicate P4 is generated from P1 which is a leaf. Then, P4 is combined with P2 using Rule 13 into predicate P5. Finally, Rule 14 is applied to P5 and P3 to generate P6 which denotes that the register RBX takes values that start at −600 and are incremented in steps of 24 bytes.</p><p>Multiple Register Operations. In general, operations over two source registers cannot be expressed with reg_val predi-cates. However, if one of the registers has a constant value or both registers can be expressed in terms of a third common register (a diamond pattern), we can propagate their value. The last instruction adds the registers RAX and RBX. However, the value of RAX is two times the value of RBX. This is reflected in the predicates reg_val(2,RAX,0,RBX,2,0) and reg_val (0,RBX,0,RBX,1,0). Therefore, we can generate a predicate reg_val(3,RAX,0,RBX,3,0).</p><p>Note that the register value analysis intends to capture some of the relations between register values but it makes no attempt capture all of them. The goal of this analysis is not to obtain a sound over-approximation of the register values but to provide as much information as possible about how memory is accessed. The analysis is also not strictly an underapproximation as it is based on def-use chains which are over-approximating.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5.3">Data Access Pattern Analysis</head><p>The data access pattern (DAP) analysis takes the results of the register value analysis and the results of the def-use analysis to infer the register values at each of the data accesses and thus compute which addresses are accessed and which pattern is used to access them. The DAP analysis generates predicates of the form: data_access_pattern(A:A,Size:Z 64 ,Mult:Z 64 ,From:A) which specifies that address A is accessed from an instruction at address From and Size bytes are read or written. Moreover, the access uses a multiplier Mult. The instruction at address 416C40 produces P7 which represents an access to a fixed address that reads 8 bytes. Conversely, the instruction at address 416C47 yields two predicates: P8 and P9. This is because register RBX can have multiple values at address 416C47. If there are multiple DAPs to the same address, we choose the one with the highest multiplier.</p><p>These DAPs provide very sparse information, but if an address x is accessed with a multiplier m, it is likely that x + m, x + 2m, etc., are also accessed the same way. Thus, we extend DAPs based on their multiplier. The analysis produces a predicate propagated_data_access with the same format as data_access_pattern. Our auxiliary analyses provide no information on what is the upper limit of an index in a data access. Thus, we simply propagate a DAP until it reaches the next DAP that coincides on the same address or that has a different multiplier. The idea behind this criterion is that the next data structure in the data section is probably accessed from somewhere in the code. So rather than trying to determine the size of the data structure being accessed, we assume that such data structure ends where the next one starts. These propagated DAPs will inform our symbolization heuristics.</p><p>Example 8. In our running example <ref type="figure">(Fig. 2)</ref>  The DAP is not propagated to the next address 45D328 because that address contains another DAP generated at a different part of the code.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5.4">Discussion</head><p>There are two important aspects that set our register value analysis and DAP analysis apart from previous approaches like Ramblr <ref type="bibr" target="#b53">[56]</ref>.</p><p>First, the register value analysis is relational-it represents the value of one register at some location in terms of the value of another register at another location-in contrast to traditional value set analyses (VSA) <ref type="bibr" target="#b5">[8]</ref>. This is also different from the affine-relations analysis <ref type="bibr" target="#b36">[38]</ref> used in VSA analyses which computes relations between register values at the same location. A reg_val predicate between two registers also implies a data dependency i.e. a register is defined in terms of the other.</p><p>As a consequence, register value analysis can provide useful information (for our use-case) in many cases where obtaining a concrete value for a register would be challenging. Consider the code in Example 6. Our analysis concludes that at address 3 RAX is 3 times the value of RBX at address 0 regardless of what that value might be. In contrast, a traditional VSA analysis will only provide useful information for the value of RAX as long as it can precisely approximate the value of RCX and the values of all the possible memory locations pointed by RCX. If any of those locations has an imprecise abstract value e.g. , so will RAX. There will be DAPs for addresses 0x1000, 0x1008 and 0x1010</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>USENIX Association 29th USENIX Security Symposium 1083</head><p>with sizes 8, 2, and 1 and a multiplier of 24 each. This information, though unsound in the general case (we are assuming RAX can take the value 0), is useful in practice.</p><p>These DAPs are the second distinguishing aspect of our analyses. Ramblr recognizes primitives and arrays of primitives. However, these DAPs indicate that address 0x1000 likely contains a struct with (at least) three fields of different sizes. Moreover, thanks to the multiplier and the propagated_access_pattern predicate we can conclude that address 0x1000 holds in fact an array of structs where the first field (at addresses 0x1000, 0x1018, 0x1030. . .) has size 8 and might contain a pointer whereas the second and third fields (at addresses 0x1008, 0x1020, 0x1038. . . and 0x1010, 0x1028, 0 x1040. . . respectively) have size 2 and 1 and thus are unlikely to hold a pointer.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="6">Symbolization</head><p>The next step to obtain assembleable code is to perform symbolization. It consists of deciding for each constant in the code or in the data whether it is a literal or a symbol. A first approximation can be achieved by considering as symbols all numbers that fall within the range of the address space. However, as reported by <ref type="bibr">Wang et al. [56]</ref>, this leads to both false positives and false negatives. Next, we explain our approach to reduce the presence of false positives and negatives.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="6.1">False Positives: Value Collisions</head><p>False positives are due to value collisions, literals that happen to coincide with range of possible addresses. In order to reduce the false positive rate, we require additional evidence in order to classify a number as a symbol.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="6.1.1">Numbers in Data</head><p>For numbers in data, similarly to the approach used for blocks, we start by defining a set of "data object" candidates. Each candidate has an address, a type, and a size. We define data object candidates for the following types: Symbol Whenever the number falls into the right range (address_in_data). String A sequence of printable characters ended in 0. Symbol-Symbol We detect jump tables using ad-hoc rules based on def-use chains, register values, and the DAPs computed in Sec. 5 (see App. A). Other An address is accessed with a different size than the pointer size (8 bytes in x64 architecture) using the predicate propagated_data_access computed in Sec. 5.3. We assign points to each of the candidates using heuristics based on the analyses results and detect if they are overlapping. If they are, we discard the candidate with fewer points. This process is analogous to how conflicts are resolved among basic blocks in Sec. 4.3. Note that detecting objects of type "String" and "Other" helps to discard false positives (i.e. symbol candidates) that overlap with them. As with blocks, we discard candidates if their total points fall below a threshold.</p><p>The main heuristics for data objects are (+ positive points and − for negative points):</p><p>+ Pointer to instruction beginning: A symbol candidate points to the beginning of an instruction. This heuristic relies on the results of the already computed IBI. + Data access match: The data object candidate is accessed from the code with the right size. This heuristic checks the existence of a propagated_data_access that matches the data object candidate's address and size. + Symbol arrays: There are several (at least 3) contiguous or evenly spaced symbol candidates. This indicates that they belong to the same data structure. Also, it is less likely to have several consecutive value collisions. + Pointed by symbol array: Multiple candidates of the same type pointed by a single symbol array. + Aligned symbols: A symbol candidate is located at an address with 8 bytes alignment. + Strings: A string candidate receives some points by default. If the string is longer that 5 bytes, it receives more points. − Access conflict: There is some data access in the middle of a symbol candidate. − Pointer to special section: A symbol candidate points to a location inside a special section such as .eh_frame.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="6.1.2">Numbers in Code</head><p>We follow the same approach to disambiguate numbers in instruction operands. However, only the first and the last heuristics of the ones listed above, "Pointer to instruction beginning" and "Pointer to special section," are applicable to numbers in code. We distinguish two cases: numbers that represent immediate operands and numbers that represent a displacement in an indirect operand. After taking these two heuristics into account, we have not found false positives in displacements. For immediate operands we consider the following additional heuristics:</p><p>+ Used for address: The immediate is stored in a register used to compute an address (detected using predicate def_used_for_address from Sec. 5). − Uncommon pointer operation: The immediate or the register where it is loaded is used in an operation uncommon for pointers such as MUL or XOR. − Compared to non-address: The immediate is compared or moved to a register that in turn is compared to another immediate that cannot be an address. These heuristics are tailored to the inference of how the immediate is used, and they rely on def-use chains and the results of the register value analysis.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="6.2">False Negatives: Symbol+Constant</head><p>False negatives can occur in situations where the original code contains an expression of the form symbol+constant. In such cases, the binary under analysis contains the result of computing that expression.</p><p>There is no general procedure to recover the original expression in the code as that information is simply not present in the binary. Having a new symbol pointing to the result of the symbol+constant expression instead of the original expression is not a problem for rewrites which leave the data sections unmodified (even if the sections are moved) or rewrites that only add data to the beginning or the end of data sections. However, sometimes the resulting address of a symbol+constant expression falls outside the data section ranges or falls into the wrong data section. In such cases, a naive symbolization approach can result in false negatives.</p><p>We detect and correct these cases by detecting common patterns where compilers generate symbol+constant using the results of our def-use analysis and the register value analysis. We distinguish two cases: displacements in an indirect operands and immediate operands.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="6.2.1">Displacements in Indirect Operands</head><p>For displacements in indirect operands, we know that the address that results from the indirect operand should be valid. Consider a generic data access <ref type="bibr">[R1+R2×M+D]</ref> where R1 and R2 are registers, M is the multiplier and D the displacement. The displacement D might not fall onto a data section, but the expression R1+R2×M+D should.</p><p>Typically, in a data access as the one above, one of the addends represents a valid base address that points to the beginning of a data structure and the rest of the addends represent an offset into the data structure. In our generic access, D might be the base address, in which case it should be symbolic, or the base address might be in one of the registers, in which case D should not be symbolic.</p><p>We detect cases in which D should be symbolic even if it does not fall in the range of a data section. For example if the data access is of the form <ref type="bibr">[R2×M+D]</ref> with M &gt; 1, it is likely that D represents the base address and should be symbolic. We can detect less obvious cases with the help of the register value analysis (see Sec. 5.2). If we have a data access of the form <ref type="bibr">[R1+D]</ref> but the value of R1 can be expressed as the value of some other register Ro multiplied by a multiplier M &gt; 1 (there is a predicate of the form reg_val(_,R1,_,Ro,M,0)) , then D is also likely to be the base address and thus symbolic. On the other hand, if R1 has a value that is a valid data address (there is a predicate reg_val(_,R1,_,'NONE',0,A) where A falls in a data section), then D is probably not a base address.</p><p>Knowing that a displacement should be symbolic is not enough, we need to infer the right data section to which the symbolic expression should refer. If the data access generates a DAP, we use the destination address of the DAP as a reference for creating the symbolic expression. Otherwise, we choose the closest boundary of a data section as a reference.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="6.2.2">Immediate Operands</head><p>Having a symbolic immediate that falls outside the data sections is uncommon. The main pattern that we have identified is when the immediate is used as an initial value for a loop counter or as a loop bound to which the counter is compared.  The number 402DE8 loaded at 4010A2 represents a loop bound and it is used in instruction 4010C9 to check if the end of the data structure has been reached. Address 402d40 is in section</p><p>.rodata but address 402DE8 is in section .eh_frame_hdr.</p><p>We detect this and similar patterns by combining the information of the def-use analysis and the value analysis. We note that in these situations, the address that falls outside the section or on a different section and the address range of the correct section are within the distance of one multiplier. That is, let x be a candidate address that might represent the result of a symbol+constant expression, and let [s i , s f ) be the address range of the original symbol's section. Then</p><formula xml:id="formula_6">x ∈ [s i − M, s f + M]</formula><p>where M is the increment of the loop counter. Therefore, our detection mechanism generates an extended section range as above for every register that we identify as loop counter. Then, it checks if there is some immediate compared to the loop counter that falls within this extended range. If that happens, the immediate is rewritten using the base of the loop counter as a symbol.</p><p>Example 11. Example 10 continued. The register value analysis detects that RBX is a loop counter with a base address of 402D40 and a step size of 8. Thus, we consider an extension of section .rodata to the range <ref type="bibr">[402718, 402DF0]</ref> (the original address range is <ref type="bibr">[402720, 402DE8)</ref>). Finally, using def-use chains we detect that the loop counter is compared to the immediate 402DE8 which falls within the extended section range. Consequently, we generate the following statement:</p><formula xml:id="formula_7">4010A2: mov EBP,OFFSET .L_402D40+168</formula><p>where .L_402D40 is a new symbol pointing to address 402D40.  <ref type="table" target="#tab_6">Table 2</ref>: Symbolization evaluation of Ddisasm and Ramblr. "Refs" represents the total number of references in these binaries; "FP" and "FN" list the number of false positives and false negatives respectively for each tool; "WS" lists the number of references pointing to the wrong section (only shown for Ddisasm); "Broken" lists the number of binaries that are broken (have at least one "FP," "FN" or "WS"). "Broken w/o ICC" lists broken binaries without counting the ones compiled with ICC.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>USENIX Association</head></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="7">Experimental Evaluation</head><p>We implemented our disassembly technique in a tool called Ddisasm. Ddisasm takes a binary and produces an IR called GrammaTech Intermediate Representation for Binaries (GTIRB) <ref type="bibr" target="#b42">[45]</ref>. This representation can be printed to assembly code that can be directly reassembled. Currently Ddisasm only supports x64 Linux ELF binaries but we plan to extend it to support other architectures and binary formats. Ddisasm is predominantly implemented in Datalog (4336 non-empty LOC) which is compiled into highly efficient parallel C++ code using Souffle <ref type="bibr" target="#b26">[28]</ref>.</p><p>Benchmarks. We performed several experiments against a variety of benchmarks, compilers, and optimization flags. We selected 3 benchmarks. The first one is Coreutils 8.25 which is composed of 106 binaries and has been used in the experimental evaluations of <ref type="bibr">Ramblr [56]</ref> and Uroboros <ref type="bibr" target="#b54">[57]</ref>. Programs in Coreutils are known to share a lot of code <ref type="bibr" target="#b2">[5]</ref>, so it is important to also consider other benchmarks. The second benchmark is a subset of the programs from the DARPA Cyber Grand Challenge (CGC). We adopt a modified version of these binaries that can be compiled for Linux systems in x64 <ref type="bibr" target="#b0">[2]</ref>. We exclude programs that fail to compile or fail all their tests. That leaves 69 CGC programs. Finally, the third benchmark is a collection of 25 real world open source applications whose binary size ranges from 28 KB to 2.5 MB. <ref type="table">Table 1</ref> contains the names, version, and sizes (in KB) of the applications in the real world benchmark. Some of the original binaries in all benchmarks fail some tests. We take the results of the original binary as a baseline which rewritten binaries must match exactly-including failures.</p><p>Compilation Settings. For each of those programs we compile the binaries with 7 compilers: GCC 5.5.0, GCC 7.1.0, GCC 9.2.1, Clang 3.8.0, Clang 6.0, Clang 9.0.1, and ICC 19.0.5. For each compiler we use the following 6 compiler flags: -O0, -O1, -O2, -O3, -Os, and -Ofast. All programs are compiled as position dependent code 8 .That means that for each original program we test 42 versions except for Coreutils where -Ofast generates original binaries that fail many of the tests and thus we skip it. In summary, we test 3710 different binaries for Coreutils, 2898 binaries for the CGC benchmark, and 1050 binaries from our real world selection. All benchmarks together represent a total of 888 MB of binaries. Note that the real world examples represent a significant portion of the binary data (324 MB).</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="7.1">Symbolization Experiments</head><p>We disassemble all the benchmarks and collect the number of false positives (FP) and false negatives (FN) in the symbolization procedure. We obtain ground truth by generating binaries with complete relocation information using the -emit-relocs ld linker option. We also detect an additional kind of error WS-i.e. when we create a symbolic expression, but the symbol points to the wrong section (see Sec. 6.2).</p><p>For comparison, we run the same experiments using Ramblr, the tool with the best published symbolization results. <ref type="table" target="#tab_6">Table 2</ref> contains the results of this experiment. Detailed tables with results broken down by compiler and optimization flag can be found in <ref type="bibr" target="#b20">[22]</ref>. The complete set of binaries, detailed experiment logs, and the scripts to replicate the experiments can be found at <ref type="bibr" target="#b19">[21]</ref>.  <ref type="table">Table 3</ref>: The functionality of binaries reassembled using Ddisasm and Ramblr as measured using the test suites distributed with the binaries. The "Disasm," "Reassemble," and "Test" (w/o ICC) columns list the percentage of binaries successfully disassembled, reassembled into a new binary, and that pass their original test suite (without counting binaries compiled with ICC) respectively.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Benchmark Binaries</head></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Ddisasm</head><p>Ddisasm presents a very low error rate. This shows the effectiveness of the approach. Ddisasm builds on many of the ideas implemented in Ramblr, but makes significant improvements (see Sec.5.4). App. B contains a discussion of Ddisasm's failures. Ramblr performs well on Coreutils and CGC compiled with GCC and Clang (in line with their experiments). 315 out of the 323 broken Coreutils binaries (without counting ICC) are broken due to a unique symbolization error in the binaries compiled with Clang 9.0.1. This illustrates the degree to which programs in Coreutils share code. Nonetheless, Ramblr's precision drops greatly against the real world examples (39% of broken examples) and binaries compiled with ICC (where all optimized binaries are broken). Additionally, we do not detect WS in Ramblr, as this information is not readily available. Thus, the numbers in the 'Broken' column are biased against Ddisasm as there might be binaries broken by Ramblr that are not counted.</p><p>It is worth pointing out that the ground truth extracted from relocations is incomplete for binaries compiled with ICC. This compiler generates jump tables with Symbol−Symbol entries. These jump tables do not need nor have relocations associated to them-even in PIC. We believe that this directly contradicts the claim made by <ref type="bibr">Dinesh et al. [18]</ref> that x64 PIC code can be symbolized without heuristics-only using relocations.</p><p>The heuristics' weights for both IBI and symbolization have been manually set and work well generically across compilers and flags. Importantly, we fixed the weights before running the experiments on GCC 9.2.1 and Clang 9.0.1. Nonetheless, the results for these two compilers are on par with the results for the other compilers. Only 5 of a total of 21 broken binaries were compiled with GCC 9.2.1 or Clang 9.0.1. Thus, the heuristics's weights are robust across compiler versions. When ground truth can be obtained, these weights could be automatically learned and adjusted based on a program corpus, we leave that for future work.</p><p>Finally, we are interested in knowing the importance of different heuristics. Thus, we repeat the symbolization experiments for the real world benchmarks deactivating different kinds of heuristics. We deactivate heuristics that 1) detect strings, 2) heuristics that use DAPs ("Data access match" and "Access conflict"), and 3) both kinds at the same time. The results are in  brings this number down, but we miss symbols that look like strings (FNs). DAPs give us additional evidence for those symbols through the "Data access match" heuristic. With DAPs but no strings (row 1), we also discard some FPs (by detecting objects of type "Other") but not all. The heuristics complement each other. Note that the 20 FNs produced by DAPs correspond to an array of structs that is correctly detected, but its pointer fields are accessed with size 4 instead of 8 which derails the analysis.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="7.2">Functionality Experiments</head><p>Using the same benchmarks we check how many of the disassembled binaries can be reassembled and how many of those pass their original test suites without errors. For Ddisasm, we perform the experiment on the stripped versions of the binaries. Additionally, in order to increase our confidence that both IBI and symbolization are correct, we modify the locations (and relative locations) of all the instructions by adding NOPs at regular intervals before reassembling. We add 8 NOPs every 8 instructions to maintain the original instructions' alignment throughout the executable section 9 . We also add 64 zero bytes at the beginning of each data section. This demonstrates that our symbolization is robust to significant modification of code (by adding or removing code) and data (by adding content at the beginning of sections).</p><p>For Ramblr, we use unstripped binaries because Ramblr fails to produce reassembleable assembly for the stripped versions of most binaries. Many of the failures are because Ramblr generates assembly with undefined labels or with labels defined twice. This kind of inconsistency is easy to avoid in a Datalog implementation. Additionally, we do not <ref type="bibr" target="#b6">9</ref> We skip regions in between jump table entries of the form .byte Symbol−Symbol. Adding NOPs to these regions can easily make the result of Symbol−Symbol fall out of the range expressible with one byte. Ddisasm's disassembly time is plotted (vertically) against Ramblr's (horizontally). In all graphs, points below the diagonal represent binaries for which Ddisasm is faster than Ramblr.</p><p>perform any modification of assembly generated by Ramblrthis ensures that we do not report an overly pessimistic result for Ramblr by accidentally breaking the code generated by Ramblr. So we compare Ddisasm at a significant handicap against Ramblr.</p><p>The results of this experiment are in <ref type="table">Table 3</ref>. For CGC, we discarded 33 binaries that fail their tests non-deterministically leaving 2865 binaries. Ddisasm produces reassembleable assembly code for all the binaries but two. One binary in the real world benchmarks and 14 binaries in the CGC benchmark fail their tests. This is close to the results of our previous experiment ( </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="7.3">Performance Evaluation</head><p>Finally, we measure and compare the performance of both Ramblr and Ddisasm. We measure the time that it takes to disassemble each of the binaries in the three benchmarks. The results can be found in <ref type="figure" target="#fig_14">Fig. 5</ref>. Ddisasm is faster than Ramblr in all but 294 of 7658 total binaries. In particular, Ddisasm is on average 4.9 times faster than Ramblr.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="8">Conclusion</head><p>We have developed a new reassembleable disassembler called Ddisasm. Ddisasm in implemented in Datalog and combines novel static analyses and heuristics to determine how data is accessed and used. We show that Datalog is well suited to this task as it enables the compositional and declarative specification of static analyses and heuristics, and it compiles them into a unified, parallel, and efficient executable.</p><p>Ddisasm is, to the best of our knowledge, the first disassembler for machine code implemented in Datalog. Our experiments show that Ddisasm is both more precise and faster than the state-of-the-art tools for reassembleable disassembly, and better handles large complex real-world programs. Ddisasm makes binary rewriting practical by enabling binary rewriting of real world programs compiled with a range of compilers and optimization levels with unprecedented speed and accuracy.  </p><p>Rule 15 is simplified version of the rule that detect the pattern in <ref type="figure" target="#fig_15">Fig. 6</ref>. The rule finds a jump that uses a register and "walks back" the code using def-use chains to the instruction where the jump target is computed (at address Asum). At that location, reg_reg_op represents an abstraction of an assembly instruction on two registers Reg=RegEntry+RegRef×1+0. Then, the rule examines the definition of RegEntry to find where the jump table entry is read (at address AEntry) and thanks to its data_access_pattern, it determines the jump table starting address Start and the size of each entry Size. The other register RegRef should contain the jump table reference point. So its value is obtained using reg_val which should contain a constant value (not expressed in terms of another register).</p><p>By relying on the analyses presented in Sec. 5, i.e def-use chains, DAPs and the register value analysis; the Datalog rule is more robust than exact pattern matching. The instructions involved in the jump table do not necessarily appear all together or in a fixed order, and the rule does not rely on specific instructions being used. E.g. the jump target computation is sometimes done using LEA instead of ADD.</p><p>Once we have found the jump table beginning and its corresponding data_access_pattern, we can use the propagated_data_access (see Sec. 5.3) to create symbol− symbol candidates for each of the jump table entries. That means that we will consider that the jump table extends until there is another data access from a different part of the code.</p><p>The detection of these jump tables has been the main addition required to support the ICC compiler. Other analyses and heuristics have remained largely the same. We expect that supporting additional compilers will require similar additions as each compiler has its own particular code patterns. However, the analyses described in Sec. 5 remain useful building blocks that facilitate supporting these special constructs in a robust manner.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>B Symbolization Failures</head><p>We manually examined and diagnosed Ddisasm's symbolization failures to determine what are the causes that lead to the remaining FPs, FNs or WS.</p><p>Real world Benchmarks In the real world benchmarks, the 20 FPs corresponds to a single array of structs that contains pointers. Our analysis obtains the right DAP with the right multipliers but only 4 bytes of each of the pointers are read instead of 8. This leads Ddisasm to conclude that those locations contains data objects of type "Other" of size 4 instead of symbols. These FNs cause the corresponding tests to fail.</p><p>The 50 symbols pointing to the wrong section (WS) are displacements in indirect operands and happen in 5 variants of the same program (lighttpd-1.4.18) compiled with Clang 6.0 and Clang 9.0.1. These particular cases are not currently detected by our heuristics but they also do not cause test failures in our functionality experiments.</p><p>Coreutils Benchmarks In Coreutils, there are 3 FPs, all in binaries compiled with -O0. They correspond to immediate operands that are moved or compared to registers. Those registers are loaded from the stack immediately before the location of the immediate and they are stored in the stack again immediately after. Therefore, our analyses do not obtain any evidence on the type of those immediates. These FPs do not cause tests failures, probably because the Coreutils test suites are not exhaustive.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>CGC Benchmarks</head><p>In the CGC benchmarks, 5 of the 12 "Broken" binaries have FNs where the corresponding relocations refer to the symbols __init_array_start and __init_array_end. These binaries, compiled with ICC, do not have an .init_array section and in fact the symbols' addresses are the same and fall outside all data sections. Nonetheless, the code uses the difference between the two symbols (which is zero) and thus it has the same behavior even though these references have not been made symbolic. In fact, we do not observe test failures in these binaries.</p><p>There are 2 other binaries, variants of the same program compiled with ICC, that have displacements in an indirect operand pointing to the wrong section (WS). These particular cases are not currently detected by our heuristics. They also do not cause test failures.</p><p>Two variants of the same binary compiled with Clang 9.0.1 have a FN in an indirect operand. The symbol candidate points to the end of the .rodata section which coincides with the beginning of .eh_frame_hdr. This triggers the "Pointer to special section" heuristic which leads Ddisasm to incorrectly discard the symbol candidate. We plan to refine the "Pointer to special section" heuristic to avoid this corner case.</p><p>The 3 remaining failures are due to FN in variants of the same program compiled with GCC 7.1. They correspond to an immediate that should be a Symbol+Constant. The immediate is a loop bound but it corresponds to a triple nested loop that our heuristics do not detect well. The extended section considered is not large enough for the constant required by the immediate. These FPs cause the tests to fail.</p></div><figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_0"><head>Figure 1 :</head><label>1</label><figDesc>Figure 1: Initial facts. Facts generated for executable sections on the left and facts generated for all sections on the right.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_2"><head>Figure 3 :</head><label>3</label><figDesc>Figure 3: Auxiliary Datalog predicates used for traversal.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_8"><head>Figure 4 :</head><label>4</label><figDesc>Figure 4: Block forward traversal rules.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_9"><head>First</head><label></label><figDesc>, we compute register definition-uses chains. The analysis produces predicates of the form: def_used(Adef:A,Reg:R,Aused:A,Index:Z 64 )</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_11"><head></head><label></label><figDesc>reg_val(A:A,Reg:R,A2:A,Reg2:R,Mult:Z 64 ,Disp:Z 64 )</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_12"><head></head><label></label><figDesc>reg_val_edge(A,Reg,Aprev,Reg,1,Imm):− def_used_for_address(Aprev,Reg), def_used(Aprev,Reg,A,_), instruction(A,_,_,'add',Op1,Op2,0,0), op_immediate(Op1,Imm), op_regdirect(Op2,Reg).</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_13"><head></head><label></label><figDesc>P1 val_reg_edge(416C35,'RBX',416C35,'NONE',0,−624) P2 val_reg_edge(416C58,'RBX',416C35,'RBX',1,24) P3 val_reg_edge(416C58,'RBX',416C58,'RBX',1,24)</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_14"><head>Example 5 .</head><label>5</label><figDesc>Consider the propagation of the predicates in Example 4. The generated predicates are: P4 val_reg(416C35,'RBX',416C35,'NONE',0,−624) P5 val_reg(416C58,'RBX',416C35,'NONE',0,−600) P6 val_reg(416C58,'RBX',416C35,'Unknown',24,−600)</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_15"><head>Example 6 .</head><label>6</label><figDesc>The following assembly code contains a simple diamond pattern: 0: mov RBX, [RCX] 1: mov RAX, RBX 2: add RAX, RAX 3: add RAX, RBX</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_16"><head>Example 7 .</head><label>7</label><figDesc>The code in Fig. 2 generates several DAPs: P7 data_access_pattern(673E80,8,0,416C40) P8 data_access_pattern(45D0B8,8,0,416C47) P9 data_access_pattern(45D0D0,8,24,416C47)</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_17"><head>Example 9 .</head><label>9</label><figDesc>Let us consider a continuation of Example 6: 4: mov R8, QWORD PTR [RAX*8+0 x1000 ] 5: mov R9, WORD PTR [RAX*8+0 x1008 ] 6: mov R10, BYTE PTR [RAX*8+0 x1010 ]</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_18"><head>Example 10 .</head><label>10</label><figDesc>Consider the following code fragment taken from the program conflict-6.0 compiled with GCC 5.5 and optimization -O1. It presents an immediate of the form symbol +constant landing in a different section.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_20"><head>Figure 5 :</head><label>5</label><figDesc>Figure 5: Disassembly time. The two graphs show the disassembly times (in seconds) for all the binaries at two different scales (the bottom graph displays smaller binaries in detail). Ddisasm's disassembly time is plotted (vertically) against Ramblr's (horizontally). In all graphs, points below the diagonal represent binaries for which Ddisasm is faster than Ramblr.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_21"><head>Figure 6 :</head><label>6</label><figDesc>Figure 6: Assembly (after symbolization) extracted from tar-1.29 compiled with ICC -O2. This code implements a jump table of Symbol-Symbol entries of size 1 byte.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_4" validated="false"><head>Table 4 .</head><label>4</label><figDesc></figDesc><table>Without both kinds of heuristics (row 
3), we have a high number of FPs. Detecting strings (row 2) 

</table></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_5" validated="false"><head>Table 4 :</head><label>4</label><figDesc></figDesc><table>Symbolization evaluation of Ddisasm on the real 
world benchmarks deactivating groups of heuristics. 

</table></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_6" validated="false"><head>Table 2 )</head><label>2</label><figDesc>. The FNs in real world examples and 5 of the 17 FNs in CGC cause 1 and 5 test failures respectively. The remaining FPs, FNs, and WS symbols do not cause test failures. Additionally, there are 9 other test failures in CGC not caused by symbolization errors.</figDesc><table></table></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_7" validated="false"><head>table onto RDX</head><label>onto</label><figDesc>; the second instruction reads the jump table entry and stores it in RDX; the third instruction loads address 47DA93 that acts as a reference for the jump table onto RAX; the fourth instruction computes the jump target by adding RAX and RDX and the last instruction executes the jump. In order to find a jump table, we need to determine: the jump table starting point, the jump table reference point, and the size of each jump table entry. Fortunately, the code pat- terns used to implement this kind of jump tables are relatively regular. We have specialized Datalog rules to detect them.</figDesc><table>USENIX Association 
29th USENIX Security Symposium 1091 

jump_table_start(AJump,Size,Start,Reference):− 
reg_jump(AJump,_), 
def_used(ASum,Reg,AJump,_), 
reg_reg_op(ASum,Reg,RegEntry,RegRef,1,0), 

def_used(AEntry,RegEntry,ASum,_), 
data_access_pattern(Start,Size,Size,AEntry), 

def_used(ARef,RegRef,ASum,_), 
reg_val(ARef,RegRef,_,'NONE',0,Reference). 

</table></figure>

			<note place="foot" n="1"> Almost any combination of bytes corresponds to a valid instruction. 2 E.g., symbol, symbol+constant, or symbol−symbol.</note>

			<note place="foot" n="3"> https://github.com/GrammaTech/ddisasm 4 https://github.com/GrammaTech/gtirb</note>

			<note place="foot" n="5"> This is different from linear disassembly which would try to decode an instruction at address x + s after decoding an instruction of size s at address x (skipping the addresses in between).</note>

			<note place="foot" n="8"> This is harder to disassemble than position independent code (PIC), which is though to be easier because it contains relocation information for absolute addresses [18]. Nonetheless, this does not make symbolization of PIC trivial as we argue in Sec. 7.1.</note>
		</body>
		<back>

			<div type="acknowledgement">
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="9">Acknowledgments</head><p>This material is based upon work supported by the Office of Naval Research under contract No. N68335-17-C-0700. Any opinions, findings and conclusions or recommendations expressed in this material are those of the authors and do not necessarily reflect the views of the Office of Naval Research.</p></div>
			</div>

			<div type="annex">
<div xmlns="http://www.tei-c.org/ns/1.0"><head>A Symbol-Symbol Jump Tables</head><p>This appendix describes jump tables with relative offsets and how they are detected by our disassembler.</p><p>Most jump tables in programs compiled with GCC and Clang (position dependent code) are lists of absolute addresses that can be detected like any other symbolic value. This is not the case for jump tables generated by ICC and jump tables generated by PIC code. These jump tables are often expressed as lists of Symbol−Symbol expressions.</p><p>In this kind of jump tables, one of the symbols represents a reference point, and the other symbol represents the jump target. The reference point is the same for all the jump table entries and the actual value stored at each the jump table entry is the distance between the jump target and the reference point. </p></div>			</div>
			<div type="references">

				<listBibl>

<biblStruct xml:id="b0">
	<monogr>
		<title level="m" type="main">GrammaTech&apos;s CGC benchmarks</title>
		<ptr target="https://github.com/grammatech/cgc-cbs" />
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b1">
	<monogr>
		<title level="m" type="main">Hex-rays: The IDA Pro disassembler and debugger</title>
		<ptr target="https://www.hex-rays.com/products/ida" />
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b2">
	<analytic>
		<title level="a" type="main">Compileragnostic function detection in binaries</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Andriesse</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Slowinska</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">H</forename><surname>Bos</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">2017 IEEE European Symposium on Security and Privacy (EuroS P)</title>
		<imprint>
			<date type="published" when="2017-04" />
			<biblScope unit="page" from="177" to="189" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b3">
	<analytic>
		<title level="a" type="main">An in-depth analysis of disassembly on full-scale x86/x64 binaries</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Dennis</forename><surname>Andriesse</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Xi</forename><surname>Chen</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Victor</forename><surname>Van Der Veen</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Asia</forename><surname>Slowinska</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Herbert</forename><surname>Bos</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">The 25th USENIX Security Symposium</title>
		<meeting><address><addrLine>Austin, TX</addrLine></address></meeting>
		<imprint>
			<publisher>USENIX Association</publisher>
			<date type="published" when="2016" />
			<biblScope unit="page" from="583" to="600" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b4">
	<monogr>
		<title/>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Cryptic</forename><surname>Apps</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Hopper</surname></persName>
		</author>
		<ptr target="https://www.hopperapp.com/" />
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b5">
	<analytic>
		<title level="a" type="main">Analyzing memory accesses in x86 executables</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Gogul</forename><surname>Balakrishnan</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Thomas</forename><surname>Reps</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Compiler Construction</title>
		<editor>Evelyn Duesterwald</editor>
		<meeting><address><addrLine>Berlin, Heidelberg; Berlin Heidelberg</addrLine></address></meeting>
		<imprint>
			<publisher>Springer</publisher>
			<date type="published" when="2004" />
			<biblScope unit="page" from="5" to="23" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b6">
	<analytic>
		<title level="a" type="main">Superset disassembly: Statically rewriting x86 binaries without heuristics</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Erick</forename><surname>Bauman</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Zhiqiang</forename><surname>Lin</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Kevin</forename><forename type="middle">W</forename><surname>Hamlen</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">NDSS</title>
		<imprint>
			<date type="published" when="2018" />
			<biblScope unit="volume">01</biblScope>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b7">
	<analytic>
		<title level="a" type="main">Speculative disassembly of binary code</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Ammar Ben Khadra</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Dominik</forename><surname>Stoffel</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Wolfgang</forename><surname>Kunz</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">The International Conference on Compilers, Architectures and Synthesis for Embedded Systems, CASES &apos;16</title>
		<meeting><address><addrLine>New York, NY, USA</addrLine></address></meeting>
		<imprint>
			<publisher>ACM</publisher>
			<date type="published" when="2016" />
			<biblScope unit="volume">16</biblScope>
			<biblScope unit="page" from="1" to="16" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b8">
	<analytic>
		<title level="a" type="main">Strictly declarative specification of sophisticated points-to analyses</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Martin</forename><surname>Bravenboer</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Yannis</forename><surname>Smaragdakis</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">24th ACM SIGPLAN Conference on Object Oriented Programming Systems Languages and Applications, OOPSLA&apos;09</title>
		<meeting><address><addrLine>NY, USA</addrLine></address></meeting>
		<imprint>
			<publisher>ACM</publisher>
			<date type="published" when="2009" />
			<biblScope unit="page" from="243" to="262" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b9">
	<analytic>
		<title level="a" type="main">BAP: A binary analysis platform</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">David</forename><surname>Brumley</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Ivan</forename><surname>Jager</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Thanassis</forename><surname>Avgerinos</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Edward</forename><forename type="middle">J</forename><surname>Schwartz</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Ganesh Gopalakrishnan and Shaz Qadeer</title>
		<meeting><address><addrLine>Berlin, Heidelberg; Berlin Heidelberg</addrLine></address></meeting>
		<imprint>
			<publisher>Springer</publisher>
			<date type="published" when="2011" />
			<biblScope unit="page" from="463" to="469" />
		</imprint>
	</monogr>
	<note>Computer Aided Verification</note>
</biblStruct>

<biblStruct xml:id="b10">
	<monogr>
		<title level="m" type="main">Alias analysis for assembly</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">David</forename><surname>Brumley</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">James</forename><surname>Newsome</surname></persName>
		</author>
		<idno>CMU- CS-06-180</idno>
		<imprint>
			<date type="published" when="2006" />
		</imprint>
		<respStmt>
			<orgName>Carnegie Mellon University School of Computer Science</orgName>
		</respStmt>
	</monogr>
<note type="report_type">Technical Report</note>
</biblStruct>

<biblStruct xml:id="b11">
	<analytic>
		<title level="a" type="main">Codearmor: Virtualizing the code space to counter disclosure attacks</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Xi</forename><surname>Chen</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Herbert</forename><surname>Bos</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Cristiano</forename><surname>Giuffrida</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">The 2017 IEEE European Symposium on Security and Privacy</title>
		<imprint>
			<publisher>IEEE</publisher>
			<date type="published" when="2017" />
			<biblScope unit="page" from="514" to="529" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b12">
	<analytic>
		<title level="a" type="main">Stackarmor: Comprehensive protection from stack-based memory error vulnerabilities for binaries</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Xi</forename><surname>Chen</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Asia</forename><surname>Slowinska</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Dennis</forename><surname>Andriesse</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Herbert</forename><surname>Bos</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Cristiano</forename><surname>Giuffrida</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">The 2015 Annual Network and Distributed System Security Symposium</title>
		<imprint>
			<date type="published" when="2015" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b13">
	<analytic>
		<title level="a" type="main">Bistro: Binary component extraction and embedding for software security applications</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Zhui</forename><surname>Deng</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Xiangyu</forename><surname>Zhang</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Dongyan</forename><surname>Xu</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">European Symposium on Research in Computer Security</title>
		<imprint>
			<biblScope unit="page" from="200" to="218" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b14">
	<monogr>
		<title/>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Springer</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2013" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b15">
	<analytic>
		<title level="a" type="main">Mcsema: Static translation of x86 instructions to LLVM</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Artem</forename><surname>Dinaburg</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Andrew</forename><surname>Ruef</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">ReCon 2014 Conference</title>
		<meeting><address><addrLine>Montreal, Canada</addrLine></address></meeting>
		<imprint>
			<date type="published" when="2014" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b16">
	<analytic>
		<title level="a" type="main">Retrowrite: Statically instrumenting cots binaries for fuzzing and sanitization</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Sushant</forename><surname>Dinesh</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Nathan</forename><surname>Burow</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Dongyan</forename><surname>Xu</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Mathias</forename><surname>Payer</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">The 41st Symposium on Security and Privacy</title>
		<imprint>
			<publisher>IEEE</publisher>
			<biblScope unit="page">2020</biblScope>
		</imprint>
	</monogr>
	<note>To Appear</note>
</biblStruct>

<biblStruct xml:id="b17">
	<monogr>
		<title level="m" type="main">The IDA Pro Book: The Unofficial Guide to the World&apos;s Most Popular Disassembler</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Chris</forename><surname>Eagle</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2011" />
			<publisher>No Starch Press</publisher>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b18">
	<analytic>
		<title level="a" type="main">Strict virtual call integrity checking for C++ binaries</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Mohamed</forename><surname>Elsabagh</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Dan</forename><surname>Fleck</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Angelos</forename><surname>Stavrou</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">2017 ACM on Asia Conference on Computer and Communications Security</title>
		<imprint>
			<publisher>ACM</publisher>
			<date type="published" when="2017" />
			<biblScope unit="page" from="140" to="154" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b19">
	<monogr>
		<title level="m" type="main">Datalog disassembly: Artifact evaluation</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Antonio</forename><surname>Flores</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">-</forename><surname>Montoya</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Eric</forename><surname>Schulte</surname></persName>
		</author>
		<idno type="doi">10.5281/zenodo.3637587</idno>
		<ptr target="https://doi.org/10.5281/zenodo.3637587" />
		<imprint>
			<date type="published" when="2020-02" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b20">
	<monogr>
				<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Antonio</forename><surname>Flores</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">-</forename><surname>Montoya</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Eric</forename><forename type="middle">M</forename><surname>Schulte</surname></persName>
		</author>
		<ptr target="http://arxiv.org/abs/1906.03969" />
		<title level="m">Datalog disassembly. CoRR, abs/1906.03969</title>
		<imprint>
			<date type="published" when="2019" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b21">
	<monogr>
		<title level="m" type="main">Free Software Foundation. GNU Binary Utilities. Free Software Foundation</title>
		<imprint>
			<date type="published" when="2002-05" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b22">
	<analytic>
		<title level="a" type="main">Gigahorse: Thorough, declarative decompilation of smart contracts</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Neville</forename><surname>Grech</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Lexi</forename><surname>Brent</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Bernhard</forename><surname>Scholz</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Yannis</forename><surname>Smaragdakis</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">ICSE</title>
		<imprint>
			<date type="published" when="2019" />
		</imprint>
	</monogr>
	<note>To appear</note>
</biblStruct>

<biblStruct xml:id="b23">
	<monogr>
		<title level="m" type="main">Galois Inc. Open source binary analysis tools</title>
		<ptr target="https://github.com/GaloisInc/macaw" />
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b24">
	<monogr>
				<ptr target="https://binary.ninja/" />
		<title level="m">Vector 35 Inc. Binary ninja: a new kind of reversing platform</title>
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b25">
	<monogr>
		<title level="m" type="main">Automated static analysis tools for binary programs</title>
		<ptr target="https://github.com/cmu-sei/pharos" />
		<imprint/>
		<respStmt>
			<orgName>Software Engineering Institute</orgName>
		</respStmt>
	</monogr>
</biblStruct>

<biblStruct xml:id="b26">
	<analytic>
		<title level="a" type="main">Soufflé: On synthesis of program analyzers</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Herbert</forename><surname>Jordan</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Bernhard</forename><surname>Scholz</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Pavle</forename><surname>Suboti´csuboti´c</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Computer Aided Verification</title>
		<editor>Swarat Chaudhuri and Azadeh Farzan</editor>
		<meeting><address><addrLine>Cham</addrLine></address></meeting>
		<imprint>
			<publisher>Springer International Publishing</publisher>
			<date type="published" when="2016" />
			<biblScope unit="page" from="422" to="430" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b27">
	<analytic>
		<title level="a" type="main">Building an efficient front-endfor binary analysis</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Minkyu</forename><surname>Jung</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Soomin</forename><surname>Kim</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Hyungseok</forename><surname>Han</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Jaeseung</forename><surname>Choi</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Sang</forename><forename type="middle">Kil</forename><surname>Cha</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Binary Analysis Research (BAR)</title>
		<imprint>
			<date type="published" when="2019" />
			<biblScope unit="volume">2</biblScope>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b28">
	<analytic>
		<title level="a" type="main">Secure and efficient multi-variant execution using hardware-assisted process virtualization</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Koen</forename><surname>Koning</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Herbert</forename><surname>Bos</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Cristiano</forename><surname>Giuffrida</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">46th Annual IEEE/IFIP International Conference on Dependable Systems and Networks (DSN)</title>
		<imprint>
			<publisher>IEEE</publisher>
			<date type="published" when="2016" />
			<biblScope unit="page" from="431" to="442" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b29">
	<analytic>
		<title level="a" type="main">Static disassembly of obfuscated binaries</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Christopher</forename><surname>Kruegel</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">William</forename><surname>Robertson</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Fredrik</forename><surname>Valeur</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Giovanni</forename><surname>Vigna</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">The 13th Conference on USENIX Security Symposium</title>
		<meeting><address><addrLine>Berkeley, CA, USA</addrLine></address></meeting>
		<imprint>
			<publisher>USENIX Association</publisher>
			<date type="published" when="2004" />
			<biblScope unit="volume">13</biblScope>
			<biblScope unit="page" from="18" to="18" />
		</imprint>
	</monogr>
	<note>SSYM&apos;04</note>
</biblStruct>

<biblStruct xml:id="b30">
	<analytic>
		<title level="a" type="main">Eel: Machineindependent executable editing</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>James</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Eric</forename><surname>Larus</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Schnarr</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">ACM Sigplan Notices</title>
		<imprint>
			<publisher>ACM</publisher>
			<date type="published" when="1995" />
			<biblScope unit="volume">30</biblScope>
			<biblScope unit="page" from="291" to="300" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b31">
	<monogr>
				<ptr target="https://git.zephyr-software.com/opensrc/irdb-cookbook-examples" />
		<title level="m">Zephyr Software LLC. IRDB cookbook examples</title>
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b32">
	<monogr>
				<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Michael</forename><surname>Matz</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Jan</forename><surname>Hubicka</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Andreas</forename><surname>Jaeger</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Mark</forename><surname>Mitchell</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Milind</forename><surname>Girkar</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Hongjiu</forename><surname>Lu</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">David</forename><surname>Kreitzer</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Vyacheslav</forename><surname>Zakharin</surname></persName>
		</author>
		<title level="m">System V Application Binary Interface: AMD64 Architecture Processor Supplement (With LP64 and ILP32 Programming Models</title>
		<imprint>
			<date type="published" when="2013" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b33">
	<analytic>
		<title level="a" type="main">Binary code is not easy</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Xiaozhu</forename><surname>Meng</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Barton</forename><forename type="middle">P</forename><surname>Miller</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">The 25th International Symposium on Software Testing and Analysis, ISSTA 2016</title>
		<meeting><address><addrLine>New York, NY, USA</addrLine></address></meeting>
		<imprint>
			<publisher>ACM</publisher>
			<date type="published" when="2016" />
			<biblScope unit="page" from="24" to="35" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b34">
	<analytic>
		<title level="a" type="main">Probabilistic disassembly</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Kenneth</forename><surname>Miller</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Yonghwi</forename><surname>Kwon</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Yi</forename><surname>Sun</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Zhuo</forename><surname>Zhang</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Xiangyu</forename><surname>Zhang</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Zhiqiang</forename><surname>Lin</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">International Conference on Software Engineering (ICSE)</title>
		<imprint>
			<publisher>ACM</publisher>
			<date type="published" when="2019" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b35">
	<analytic>
		<title level="a" type="main">Opaque control-flow integrity</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Vishwath</forename><surname>Mohan</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Per</forename><surname>Larsen</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Stefan</forename><surname>Brunthaler</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Michael</forename><surname>Hamlen</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Franz</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Symposium on Network and Distributed System Security (NDSS)</title>
		<imprint>
			<date type="published" when="2015" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b36">
	<analytic>
		<title level="a" type="main">Precise interprocedural analysis through linear algebra</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Markus</forename><surname>Müller</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">-</forename><surname>Olm</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Helmut</forename><surname>Seidl</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">The 31st ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages, POPL &apos;04</title>
		<meeting><address><addrLine>New York, NY, USA</addrLine></address></meeting>
		<imprint>
			<publisher>ACM</publisher>
			<date type="published" when="2004" />
			<biblScope unit="page" from="330" to="341" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b37">
	<analytic>
		<title level="a" type="main">Smashing the gadgets: Hindering returnoriented programming using in-place code randomization</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Vasilis</forename><surname>Pappas</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Michalis</forename><surname>Polychronakis</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Angelos D</forename><surname>Keromytis</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">2012 IEEE Symposium on Security and Privacy</title>
		<imprint>
			<publisher>IEEE</publisher>
			<date type="published" when="2012" />
			<biblScope unit="page" from="601" to="615" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b38">
	<analytic>
		<title level="a" type="main">A binary rewriting defense against stack based buffer overflow attacks</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Manish</forename><surname>Prasad</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Tzi-Cker</forename><surname>Chiueh</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">USENIX Annual Technical Conference</title>
		<imprint>
			<date type="published" when="2003" />
			<biblScope unit="page" from="211" to="224" />
		</imprint>
	</monogr>
	<note>General Track</note>
</biblStruct>

<biblStruct xml:id="b39">
	<monogr>
		<title level="m" type="main">Capstone: Next-gen disassembly framework</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Anh</forename><surname>Nguyen</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Quynh</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2014" />
			<pubPlace>Black Hat USA</pubPlace>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b40">
	<analytic>
		<title level="a" type="main">Demand interprocedural program analysis using logic databases</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Thomas</forename><forename type="middle">W</forename><surname>Reps</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Applications of Logic Databases</title>
		<editor>Raghu Ramakrishnan</editor>
		<meeting><address><addrLine>Boston, MA</addrLine></address></meeting>
		<imprint>
			<publisher>Springer US</publisher>
			<date type="published" when="1995" />
			<biblScope unit="page" from="163" to="196" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b41">
	<analytic>
		<title level="a" type="main">Instrumentation and optimization of Win32/Intel executables using Etch</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Ted</forename><surname>Romer</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Geoff</forename><surname>Voelker</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Dennis</forename><surname>Lee</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Alec</forename><surname>Wolman</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Wayne</forename><surname>Wong</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Hank</forename><surname>Levy</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Brian</forename><surname>Bershad</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Brad</forename><surname>Chen</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">USENIX Windows NT Workshop</title>
		<imprint>
			<date type="published" when="1997" />
			<biblScope unit="volume">1997</biblScope>
			<biblScope unit="page" from="1" to="8" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b42">
	<monogr>
		<title level="m" type="main">GTIRB: intermediate representation for binaries</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Eric</forename><forename type="middle">M</forename><surname>Schulte</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Jonathan</forename><surname>Dorn</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Antonio</forename><surname>Floresmontoya</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Aaron</forename><surname>Ballman</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Tom</forename><surname>Johnson</surname></persName>
		</author>
		<idno>abs/1907.02859</idno>
		<imprint>
			<date type="published" when="2019" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b43">
	<analytic>
		<title level="a" type="main">Using logic programming to recover C++ classes and methods from compiled executables</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Edward</forename><forename type="middle">J</forename><surname>Schwartz</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Cory</forename><forename type="middle">F</forename><surname>Cohen</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Michael</forename><surname>Duggan</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Jeffrey</forename><surname>Gennari</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Jeffrey</forename><forename type="middle">S</forename><surname>Havrilla</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Charles</forename><surname>Hines</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">ACM SIGSAC Conference on Computer and Communications Security, CCS &apos;18</title>
		<meeting><address><addrLine>NY, USA</addrLine></address></meeting>
		<imprint>
			<publisher>ACM</publisher>
			<date type="published" when="2018" />
			<biblScope unit="page" from="426" to="441" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b44">
	<analytic>
		<title level="a" type="main">Plto: A link-time optimizer for the Intel IA-32 architecture</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Benjamin</forename><surname>Schwarz</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Saumya</forename><surname>Debray</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Gregory</forename><surname>Andrews</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Matthew</forename><surname>Legendre</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. 2001 Workshop on Binary Translation (WBT-2001)</title>
		<meeting>2001 Workshop on Binary Translation (WBT-2001)</meeting>
		<imprint>
			<date type="published" when="2001" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b45">
	<analytic>
		<title level="a" type="main">Sok: (state of) the art of war: Offensive techniques in binary analysis</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Y</forename><surname>Shoshitaishvili</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Wang</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><surname>Salls</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">N</forename><surname>Stephens</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Polino</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Dutcher</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Grosen</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Feng</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><surname>Hauser</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><surname>Kruegel</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">G</forename><surname>Vigna</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">2016 IEEE Symposium on Security and Privacy (SP)</title>
		<imprint>
			<date type="published" when="2016-05" />
			<biblScope unit="page" from="138" to="157" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b46">
	<analytic>
		<title level="a" type="main">Body armor for binaries: Preventing buffer overflows without recompilation</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Asia</forename><surname>Slowinska</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Traian</forename><surname>Stancescu</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Herbert</forename><surname>Bos</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">USENIX Annual Technical Conference</title>
		<imprint>
			<date type="published" when="2012" />
			<biblScope unit="page" from="125" to="137" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b47">
	<analytic>
		<title level="a" type="main">Using Datalog for fast and easy program analysis</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Yannis</forename><surname>Smaragdakis</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Martin</forename><surname>Bravenboer</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Datalog Reloaded</title>
		<editor>Oege de Moor, Georg Gottlob, Tim Furche, and Andrew Sellers</editor>
		<meeting><address><addrLine>Berlin, Heidelberg; Berlin Heidelberg</addrLine></address></meeting>
		<imprint>
			<publisher>Springer</publisher>
			<date type="published" when="2011" />
			<biblScope unit="page" from="245" to="251" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b48">
	<analytic>
		<title level="a" type="main">Introspective analysis: Context-sensitivity, across the board</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Yannis</forename><surname>Smaragdakis</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">George</forename><surname>Kastrinis</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">George</forename><surname>Balatsouras</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">35th ACM SIGPLAN Conference on Programming Language Design and Implementation, PLDI &apos;14</title>
		<meeting><address><addrLine>NY, USA</addrLine></address></meeting>
		<imprint>
			<publisher>ACM</publisher>
			<date type="published" when="2014" />
			<biblScope unit="page" from="485" to="495" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b49">
	<analytic>
		<title level="a" type="main">Static binary rewriting without supplemental information: Overcoming the tradeoff between coverage and correctness</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Matthew</forename><surname>Smithson</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Khaled</forename><surname>Elwazeer</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Kapil</forename><surname>Anand</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Aparna</forename><surname>Kotha</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Rajeev</forename><surname>Barua</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Reverse Engineering (WCRE), 2013 20th Working Conference on</title>
		<imprint>
			<publisher>IEEE</publisher>
			<date type="published" when="2013" />
			<biblScope unit="page" from="52" to="61" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b50">
	<analytic>
		<title level="a" type="main">Binary refactoring: Improving code behind the scenes</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Eli</forename><surname>Tilevich</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Yannis</forename><surname>Smaragdakis</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">The 27th international conference on Software engineering</title>
		<imprint>
			<publisher>ACM</publisher>
			<date type="published" when="2005" />
			<biblScope unit="page" from="264" to="273" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b51">
	<analytic>
		<title level="a" type="main">A tough call: Mitigating advanced code-reuse attacks at the binary level</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Victor</forename><surname>Van Der Veen</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Enes</forename><surname>Göktas</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Moritz</forename><surname>Contag</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Andre</forename><surname>Pawoloski</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Xi</forename><surname>Chen</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Sanjay</forename><surname>Rawat</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Herbert</forename><surname>Bos</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Thorsten</forename><surname>Holz</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Elias</forename><surname>Athanasopoulos</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Cristiano</forename><surname>Giuffrida</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">2016 IEEE Symposium on Security and Privacy (SP)</title>
		<imprint>
			<publisher>IEEE</publisher>
			<date type="published" when="2016" />
			<biblScope unit="page" from="934" to="953" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b52">
	<analytic>
		<title level="a" type="main">Diablo: a reliable, retargetable and extensible link-time rewriting framework</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Ludo</forename><surname>Van Put</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Dominique</forename><surname>Chanet</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Bruno</forename><forename type="middle">De</forename><surname>Bus</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Bjorn</forename><forename type="middle">De</forename><surname>Sutter</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Koen De</forename><surname>Bosschere</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">The Fifth IEEE International Symposium on Signal Processing and Information Technology</title>
		<imprint>
			<publisher>IEEE</publisher>
			<date type="published" when="2005" />
			<biblScope unit="page" from="7" to="12" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b53">
	<analytic>
		<title level="a" type="main">Ramblr: Making reassembly great again</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Ruoyu</forename><surname>Wang</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Yan</forename><surname>Shoshitaishvili</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Antonio</forename><surname>Bianchi</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Aravind</forename><surname>Machiry</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">John</forename><surname>Grosen</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Paul</forename><surname>Grosen</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Christopher</forename><surname>Kruegel</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Giovanni</forename><surname>Vigna</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">NDSS</title>
		<imprint>
			<date type="published" when="2017" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b54">
	<analytic>
		<title level="a" type="main">Reassembleable disassembling</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Shuai</forename><surname>Wang</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Pei</forename><surname>Wang</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Dinghao</forename><surname>Wu</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">24th USENIX Security Symposium (USENIX Security 15)</title>
		<imprint>
			<biblScope unit="page" from="627" to="642" />
		</imprint>
	</monogr>
	<note>Washington, D.C., 2015. USENIX Association</note>
</biblStruct>

<biblStruct xml:id="b55">
	<analytic>
		<title level="a" type="main">Securing untrusted code via compileragnostic binary rewriting</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Richard</forename><surname>Wartell</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Vishwath</forename><surname>Mohan</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Kevin</forename><forename type="middle">W</forename><surname>Hamlen</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Zhiqiang</forename><surname>Lin</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">The 28th Annual Computer Security Applications Conference</title>
		<imprint>
			<publisher>ACM</publisher>
			<date type="published" when="2012" />
			<biblScope unit="page" from="299" to="308" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b56">
	<analytic>
		<title level="a" type="main">Shingled graph disassembly: Finding the undecideable path</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Richard</forename><surname>Wartell</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Yan</forename><surname>Zhou</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Kevin</forename><forename type="middle">W</forename><surname>Hamlen</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Murat</forename><surname>Kantarcioglu</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Pacific-Asia Conference on Knowledge Discovery and Data Mining</title>
		<imprint>
			<biblScope unit="page" from="273" to="285" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b57">
	<monogr>
		<title/>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Springer</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2014" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b58">
	<analytic>
		<title level="a" type="main">Using Datalog with binary decision diagrams for program analysis</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">John</forename><surname>Whaley</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Dzintars</forename><surname>Avots</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Michael</forename><surname>Carbin</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Monica</forename><forename type="middle">S</forename><surname>Lam</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Programming Languages and Systems</title>
		<editor>Kwangkeun Yi</editor>
		<meeting><address><addrLine>Berlin, Heidelberg; Berlin Heidelberg</addrLine></address></meeting>
		<imprint>
			<publisher>Springer</publisher>
			<date type="published" when="2005" />
			<biblScope unit="page" from="97" to="118" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b59">
	<analytic>
		<title level="a" type="main">Cloning-based context-sensitive pointer alias analysis using binary decision diagrams</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">John</forename><surname>Whaley</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Monica</forename><forename type="middle">S</forename><surname>Lam</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">The ACM SIGPLAN 2004 Conference on Programming Language Design and Implementation, PLDI &apos;04</title>
		<meeting><address><addrLine>NY, USA</addrLine></address></meeting>
		<imprint>
			<publisher>ACM</publisher>
			<date type="published" when="2004" />
			<biblScope unit="page" from="131" to="144" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b60">
	<analytic>
		<title level="a" type="main">Practical control flow integrity and randomization for binary executables</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Chao</forename><surname>Zhang</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Tao</forename><surname>Wei</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Zhaofeng</forename><surname>Chen</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Lei</forename><surname>Duan</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">László</forename><surname>Szekeres</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Stephen</forename><surname>Mccamant</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Dawn</forename><surname>Song</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Wei</forename><surname>Zou</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Security and Privacy (SP), 2013 IEEE Symposium on</title>
		<imprint>
			<publisher>IEEE</publisher>
			<date type="published" when="2013" />
			<biblScope unit="page" from="559" to="573" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b61">
	<analytic>
		<title level="a" type="main">A platform for secure static binary instrumentation</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Mingwei</forename><surname>Zhang</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Rui</forename><surname>Qiao</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Niranjan</forename><surname>Hasabnis</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Sekar</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">The 10th ACM SIGPLAN/SIGOPS international conference on Virtual execution environments</title>
		<imprint>
			<publisher>ACM</publisher>
			<date type="published" when="2014" />
			<biblScope unit="page" from="129" to="140" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b62">
	<analytic>
		<title level="a" type="main">Control flow integrity for COTS binaries</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Mingwei</forename><surname>Zhang</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Sekar</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">USENIX Security</title>
		<imprint>
			<date type="published" when="2013" />
			<biblScope unit="page" from="337" to="352" />
		</imprint>
	</monogr>
</biblStruct>

				</listBibl>
			</div>
		</back>
	</text>
</TEI>
