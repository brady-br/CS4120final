<?xml version="1.0" encoding="UTF-8"?>
<TEI xmlns="http://www.tei-c.org/ns/1.0" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
xsi:schemaLocation="http://www.tei-c.org/ns/1.0 /Users/atharsefid/Desktop/grobid-0.5.3/grobid-home/schemas/xsd/Grobid.xsd"
 xmlns:xlink="http://www.w3.org/1999/xlink">
	<teiHeader xml:lang="en">
		<encodingDesc>
			<appInfo>
				<application version="0.5.3" ident="GROBID" when="2020-09-29T02:57+0000">
					<ref target="https://github.com/kermitt2/grobid">GROBID - A machine learning software for extracting information from scholarly documents</ref>
				</application>
			</appInfo>
		</encodingDesc>
		<fileDesc>
			<titleStmt>
				<title level="a" type="main">A New LSM-style Garbage Collection Scheme for ZNS SSDs</title>
			</titleStmt>
			<publicationStmt>
				<publisher/>
				<availability status="unknown"><licence/></availability>
			</publicationStmt>
			<sourceDesc>
				<biblStruct>
					<analytic>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Gunhee</forename><surname>Choi</surname></persName>
							<affiliation key="aff0">
								<orgName type="institution" key="instit1">Dankook University</orgName>
								<orgName type="institution" key="instit2">SK Hynix</orgName>
							</affiliation>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Kwanghee</forename><surname>Lee</surname></persName>
							<affiliation key="aff0">
								<orgName type="institution" key="instit1">Dankook University</orgName>
								<orgName type="institution" key="instit2">SK Hynix</orgName>
							</affiliation>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Myunghoon</forename><surname>Oh</surname></persName>
							<affiliation key="aff0">
								<orgName type="institution" key="instit1">Dankook University</orgName>
								<orgName type="institution" key="instit2">SK Hynix</orgName>
							</affiliation>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Jongmoo</forename><surname>Choi</surname></persName>
							<affiliation key="aff0">
								<orgName type="institution" key="instit1">Dankook University</orgName>
								<orgName type="institution" key="instit2">SK Hynix</orgName>
							</affiliation>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Jhuyeong</forename><surname>Jhin</surname></persName>
							<affiliation key="aff0">
								<orgName type="institution" key="instit1">Dankook University</orgName>
								<orgName type="institution" key="instit2">SK Hynix</orgName>
							</affiliation>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Yongseok</forename><surname>Oh</surname></persName>
							<affiliation key="aff0">
								<orgName type="institution" key="instit1">Dankook University</orgName>
								<orgName type="institution" key="instit2">SK Hynix</orgName>
							</affiliation>
						</author>
						<title level="a" type="main">A New LSM-style Garbage Collection Scheme for ZNS SSDs</title>
					</analytic>
					<monogr>
						<imprint>
							<date/>
						</imprint>
					</monogr>
				</biblStruct>
			</sourceDesc>
		</fileDesc>
		<profileDesc>
			<abstract>
				<p>This paper explores how to design a garbage collection scheme for ZNS (Zoned NameSpace) SSDs (Solid State Drives). We first show that a naive garbage collection based on a zone unit incurs a long latency due to the huge size of a zone. To overcome this problem, we devise a new scheme, we refer to it as LSM ZGC (Log-Structured Merge style Zone Garbage Collection), that makes use of the following three features: segment based fine-grained garbage collection, reading both valid and invalid data in a group manner, and merging different data into separate zones. Our proposal can exploit the internal parallelism of a zone and reduce the utilization of a candidate zone by segregating hot and cold data. Real implementation based experimental results show that our scheme can enhance performance by 1.9 times on average.</p>
			</abstract>
		</profileDesc>
	</teiHeader>
	<text xml:lang="en">
		<body>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="1">Introduction</head><p>ZNS SSDs are a double-edged sword. It gives an opportunity to improve performance and reduce WAF (Write Amplification Factor) by separating different workloads into separate zones <ref type="bibr" target="#b0">[2,</ref><ref type="bibr" target="#b4">6]</ref>. The downside is that a host needs to manage ZNS SSDs directly such as a zone reset and they have the sequential write constraint. This paper examines design considerations when we devise a garbage collection scheme for ZNS SSDs. One simple approach is applying the conventional scheme such as segment cleaning used by LFS (Log-structured File System) <ref type="bibr" target="#b14">[16,</ref><ref type="bibr" target="#b20">22]</ref> or garbage collection used by FTL (Flash Translation Layer) <ref type="bibr" target="#b9">[11,</ref><ref type="bibr" target="#b12">14]</ref>. The only difference is that it applies garbage collection based on a zone unit instead of a segment one. However, our analysis reveals that this naive approach incurs a long garbage collection latency since the size of a zone (e.g. 0.5 GB or 1 GB) is much larger than that of a segment (2 MB or 4 MB).</p><p>To overcome this problem, we propose a new zone garbage collection scheme, called LSM ZGC. We find that the traditional segment concept is still valuable for reclaiming a zone in ZNS SSDs. Specifically, LSM ZGC divides a zone into multiple segments and manages their information such as validity bitmap and utilization individually. It conducts garbage collection in a LSM (LogStructured Merge) style <ref type="bibr" target="#b16">[18,</ref><ref type="bibr" target="#b17">19]</ref> that reads all data from a candidate zone, identifies cold data, merges them into a zone while merging remaining data into another zone.</p><p>Our proposal has several advantages. Garbage collection based on a segment unit instead of a zone unit becomes an effective basis for hot/cold segregation and making our scheme in a pipelined fashion. Reading all data, both valid and invalid in a segment, can reduce the garbage collection overhead by exploiting the internal parallelism in a zone. Merging data into separate zones according to their hot/cold characteristics can enhance an opportunity to find a zone with lower utilization.</p><p>We evaluate LSM ZGC on a real ZNS SSD prototype. We implement a user level benchmark tool that can manipulate the prototype directly and measure the overhead of various garbage collection schemes. Experimental results show that our scheme improves garbage collection performance by up to 2.3 times with an average of 1.9 times. It also reduces interference with other applications and provides better scalability with multiple threads.</p><p>The rest of this paper is organized as follows. In Section 2, we present our two observations that motivate this study. Section 3 describes how to design our scheme. Evaluation results are discussed in Section 4. We explain conclusion and future work in Section 5. Finally, discussion topics are given in Section 6.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2">Motivation</head><p>In this section, we briefly introduce the features of ZNS SSDs. Then, we discuss our observations conducted on a real ZNS SSD prototype. Details of our experimental prototype will be explained further in Section 4.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.1">ZNS SSDs</head><p>ZNS SSDs are a kind of OCSSDs (Open Channel SSDs) that exposes SSD internals using the zone concept <ref type="bibr" target="#b0">[2]</ref>. Specifically, the address space of a ZNS SSD device is divided into zones, which provides two benefits. First, they give a chance to enhance performance and decrease WAF by allocating data with different characteristics into separate zones. Second, they can reduce or even remove FTL functionalities, which allows to lessen DRAM usage and over-provisioning area in SSDs. Hence, many vendors recently announce their ZNS SSD solution and plan <ref type="bibr" target="#b1">[3,</ref><ref type="bibr" target="#b2">4,</ref><ref type="bibr" target="#b11">13]</ref>.</p><p>However, there are two challenges in ZNS SSDs. The first one is that host software needs to handle a zone explicitly such as a zone reset, open, read, write and zone garbage collection. The second challenge is that ZNS SSDs have a unique constraint, called sequential write constraint. All data in a zone are required to be written sequentially, like SMR (Shingled Magnetic Recording) drives <ref type="bibr" target="#b21">[23,</ref><ref type="bibr" target="#b22">24]</ref>. <ref type="figure" target="#fig_0">Figure 1</ref> shows the quantitative zone garbage collection overhead on various zone utilizations. In this experiment, the sizes of a zone, a segment and a block are 1GB, 2MB and 4KB, respectively. It implies that a zone consists of 512 segments, while a segment consisting of 512 blocks. We measure the zone garbage collection overhead, that is the total elapsed time to copy a valid block from a candidate zone into a new zone until there is no remaining valid blocks in the candidate zone. The overhead also includes the time to reset the candidate zone. From this figure, we can observe that the garbage collection overhead increases as utilization grows as expected. One surprising thing is that the overhead becomes more than 20 seconds when utilization is bigger than 0.4 due to the copying overhead of valid blocks. This long elapsed time might interfere with user requests, incurring a long latency. Even though we can hide the overhead by introducing a preemptive approach, the huge size of a zone makes it quite complicated. This observation uncovers that reducing the utilization of a candidate zone is indispensable for ZNS SSDs. The results reveal that accessing in a group manner is much faster than individual accesses. This is because it can not only reduce the number of requests but also make use of the internal parallelism in ZNS SSDs. In general, a zone in ZNS SSDs is spread into multiple channels which gives a chance to process a request with consecutive blocks in parallel, like OCSSDs <ref type="bibr" target="#b18">[20]</ref>. This observation motivates us to design our LSM-style garbage collection scheme.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.2">Observations</head></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3">Design</head><p>In this section, we first describe a basic garbage collection scheme for ZNS SSDs. Then, we explain our scheme, contrasting differences between ours and the basic scheme.</p><p>One simple approach for zone garbage collection in ZNS SSDs is selecting a candidate zone whose utilization is the smallest. Then, it reads valid blocks from the selected zone and write them into a new zone. Finally, it issues the reset command for the selected zone. We refer to this scheme as Basic ZGC as shown in <ref type="figure" target="#fig_2">Figure 3</ref>.</p><p>Our LSM ZGC scheme has three differences. First, it conducts garbage collection based on a segment unit for reclaiming a zone. This approach makes it easy to segregate hot and cold data into different zones, which will be discussed further using <ref type="figure" target="#fig_3">Figure 4</ref>. In addition, it allows a zone garbage collection to be executed with a finedgrained segment unit where reading, merging and writing a segment can be done in a pipelined fashion.</p><p>Second, during garbage collection, it reads not only valid blocks but also invalid blocks in 128KB I/O size, whereas Basic ZGC reads valid blocks only. Note that the original LFS, designed for hard disks, reads all data  <ref type="bibr" target="#b20">[22]</ref>. However, most of file systems and FTLs designed for SSDs reads valid data only since there is no seek overhead in flash memory <ref type="bibr" target="#b9">[11,</ref><ref type="bibr" target="#b12">14,</ref><ref type="bibr" target="#b14">16]</ref>. We carefully argue that reading all blocks is a viable option in ZNS SSDs to fully obtain the internal parallelism observed in <ref type="figure" target="#fig_1">Figure 2</ref>. In actuality, we consider the utilization of a candidate segment when we design LSM ZGC. Specifically, when the number of valid blocks in a segment is less than 16, LSM ZGC reads valid blocks only. Otherwise, it reads all blocks since 16 requests with 128KB size can cover the whole 2MB segment data.</p><p>The third difference is that LSM ZGC tries to identify cold data and merge them into a separate zone. For this purpose, we define four states of a zone, namely C0 zone, C1C zone, C1H zone and C2 zone, as shown in <ref type="figure" target="#fig_3">Figure 4</ref>. Newly arrived data is written sequentially into a zone whose state is C0 zone and deleted data is going out of the states presented in the figure. Now assume that LSM ZGC selects a candidate zone whose state is C0 zone. It reads all segments in the zone and tries to identify cold segments. We define a segment whose utilization is above a threshold, called threshold cold , as cold. This decision is based on our observation that data which has similar lifetime shows strong spatial locality. For example, in a key-value store, each level shows different lifetime and SSTables in a same level are written in a batch manner, which are also observed in previous studies <ref type="bibr" target="#b6">[8,</ref><ref type="bibr" target="#b13">15]</ref>. Valid blocks in a segment identified as cold are merged and written into a zone whose state is C1C zone. Valid blocks of other segments are merged and written into another zone whose state is C1H zone.</p><p>When a candidate zone is either C1C zone or C1H zone, LSM ZGC reads all segments and treats all valid blocks as cold. This is because these valid blocks are survived after two garbage collection trials. They are merged and written into a zone whose state is C2 zone. We can extend further such as C3 zone and so on, but, in this study, we stop here and write valid blocks survived from C2 zone into another C2 zone. We expect that this mechanism enables to isolate cold data from others, which enhance an opportunity to find a candidate zone with lower utilization during garbage collection.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4">Evaluation</head></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.1">Experimental environment</head><p>We evaluate LSM ZGC via real implementation based experiments. Our experimental system consists of Intel Core i7-6700K processor (8 cores), 16GB DRAM and 1TB ZNS SSD prototype. This prototype is developed by our team for research purpose, not a commercial product. Its internals are similar to the published ZNS SSDs <ref type="bibr" target="#b1">[3,</ref><ref type="bibr" target="#b7">9]</ref>. The prototype information is summarized in <ref type="table" target="#tab_0">Table 1</ref>. On this hardware environment, we build a garbage collection benchmark tool that runs at a user level to evaluate our scheme. The tool is composed of three stages. In the first stage, it initializes the ZNS SSD prototype by writing dummy data until the overall utilization becomes a predefined target value. In this stage, we can configure control parameters such as the number of zones used for initialization and an overall target utilization value.</p><p>In the second stage, it updates the initialized data under various patterns such as uniform, skewed or userspecified. This updating is carried out until all initialized zones are covered either valid or invalid blocks. For instance, when we set up the number of zones and target value as 512 and 0.5, respectively, it fills 256 zones with dummy data in the first stage. Then, in the second stage, it modifies data (invalidating the original data and writing new valid data) until all blocks in 512 zones are either valid or invalid. Note that the utilization is still 0.5.</p><p>In the third stage, the tool executes Basic ZGC or LSM ZGC and measures its elapsed time. We can configure the number of free blocks we want to reclaim during garbage collection and threshold cold . The tool also equips with functionalities such as a zone reset, open, read and write so that it can manipulate ZNS SSDs directly at a user level. Besides, it takes care of several data structures such as a bitmap per segment to distinguish valid and invalid blocks and usage information per segment and zone. We implement the tool by modifying the NVMe command line interface <ref type="bibr">[1]</ref>. <ref type="figure" target="#fig_4">Figure 5</ref> shows performance comparison results between two schemes. In this experiment, we set up the number of zones for initialization as 512 and the overall target utilization values as denoted in the X-axis in the figure. We also configure the update pattern as uniform, meaning that all segments have utilization similar to the overall target utilization. The number of reclaimed blocks and threshold cold are set as 512x512 and 0.4, respectively.  <ref type="figure" target="#fig_4">Figure 5</ref>, we can observe that our proposed LSM ZGC outperforms Basic ZGC by up to 2.3 times with an average of 1.9 times. When we count the number of copied blocks to a new zone during garbage collection, LSM ZGC and Basic ZGC show same numbers. It implies that the performance gain is derived from requesting all I/Os with 128KB size. Note that, for fair comparison, we implement Basic ZGC that writes all data in 128KB size and reads valid blocks as large as possible if they are consecutive. However, the existence of invalid blocks prevents Basic ZGC from generating requests with 128KB size. On the contrary, our scheme generates all requests with 128KB size, which are allowed by reading both valid and invalid blocks.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.2">Garbage collection overhead</head></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.3">Effect of data separation</head><p>To evaluate the effect of data separation, we carry out an experiment that updates data in a skewed pattern. Specifically, in the second stage, the tool updates 30% data with 70% probability. Then, some segments have lower utilization than others, which eventually merged and written into zones with different states explained in <ref type="figure" target="#fig_3">Figure 4</ref>. After performing the second and third stages repeatedly, we measure the overhead under two schemes. <ref type="figure">Figure 6</ref>: Performance comparison between Basic ZGC and LSM ZGC under skewed update pattern <ref type="figure">Figure 6</ref> shows performance comparison result when utilization is 0.8 (due to the page limitation, we present this result only, but other results with different utilizations show similar trends). It reveals that LSM ZGC can reduce the garbage collection overhead, compared with Basic ZGC. This gain comes from two sources. One is requesting I/Os with 128KB size. The second source is decreasing the copied blocks during garbage collection as shown in <ref type="figure">Figure 6 (b)</ref>. LSM ZGC segregates cold data from others, which allows to select a candidate zone that has lower utilization. This is more evident in <ref type="figure" target="#fig_5">Figure 7</ref> that presents the utilization distribution of Basic ZGC and LSM ZGC. As you can see, data separation produces a bimodal distribution, which allows to boost the possibility to find a zone with low utilization. One essential reason that we employ the segmentbased fine-grained garbage collection for reclaiming a zone is to separate hot and cold data appropriately. Due to the huge size of a zone, a zone has a tendency to contain both hot and cold data even in the skewed pattern, blurring whether a zone is hot or cold. But, it is more obvious at a segment level since a segment is much smaller than a zone. However, the effectiveness of data separation depends on various parameters including hot/cold ratio, hot/cold data size, our control parameter threshold cold , and initial hot/cold placement which are governed by allocation policy. We leave the investigation of these issues as a future work.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.4">Effect on other applications</head><p>Figure 8 presents how LSM ZGC affects the latency of other applications. For this experiment, we build a worker thread that writes a new 1GB file into the ZNS SSD prototype and reads it randomly. We measure the execution time of the worker under three cases; 1) when it runs alone, 2) when it runs concurrently with LSM ZGC and 3) with Basic ZGC.  <ref type="figure" target="#fig_6">Figure 8</ref>, we can observe that the execution time of the worker is around 40 seconds when it runs alone. With LSM ZGC, the time is 45 seconds while it becomes 53 seconds with Basic ZGC. These results show the tradeoff between the cost and benefit of LSM ZGC. The cost is that LSM ZGC increases the amount of read by reading both valid and invalid blocks during garbage collection, while the benefit is that it reduces the garbage collection overhead. <ref type="figure" target="#fig_6">Figure 8</ref> demonstrates that the benefit can compensate the cost, diminishing the interference greatly. <ref type="figure">Figure 9</ref> shows the performance when we run the worker with multiple threads. In this figure, the Y-axis is the throughput (MB/sec) relative to the case when we run a single worker thread with Basic ZGC. These results reveal that multiple threads can enhance throughput on ZNS SSDs. We also observe that LSM ZGC provides better scalability than Basic ZGC.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.5">Scalability</head><p>However, the scalability of our ZNS SSD prototype is not linear. When we design ZNS SSDs, there is a spectrum between two extremes. One extreme is assigning channels into a zone as many as possible to improve intra-parallelism in a zone. The other extreme is assigning a different channel (or channels) into a zone to sup- <ref type="figure">Figure 9</ref>: Performance comparison using different number of threads port isolation. Real ZNS SSDs lie between these two extremes. In actuality, due to the limited number of channels, sharing channels among zones is inevitable, which causes the non-linear scalability. But it is clear that our scheme can reduce the interference among zones by reducing the garbage collection overhead.</p><p>One beneficial feature of LSM ZGC is that it gives a positive effect on generating sequential writes. It writes new written data sequentially into a zone whose state is C0 zone. In addition, reclaimed data managed by LSM ZGC is also written sequentially. Hence, our proposal is in accordance with the sequential write constraint required by ZNS SSDs. However, guaranteeing the constraint is a complex problem related to not only allocation policy but also caching and I/O scheduling. Exploring this issue is left as a future work.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5">Conclusion</head><p>This paper proposes a new zone garbage collection scheme, called LSM ZGC. Our contributions include 1) devising a new LSM-style garbage collection scheme, 2) providing real implementation based evaluation results and 3) raising several issues to address the ZNS SSD features such as zone size and sequential write constraint.</p><p>There are two directions for future research. The first one is implementing our scheme in a real file system. We are currently extending F2FS on our ZNS SSD prototype to integrate LSM ZGC and to comply with the sequential write constraint for not only data but also metadata such as checkpoint and NAT (Node Address Table) <ref type="bibr" target="#b14">[16]</ref>. The second direction is evaluating LSM ZGC under diverse workloads with different hot/cold ratio, data size, initial placement and classification policies <ref type="bibr" target="#b10">[12]</ref>.</p><p>Our proposal introduces several interesting topics for future studies. They can be classified into three categories. The first one is about what features a file system for ZNS SSDs are required? How to change the conventional caching and I/O scheduling mechanism to guarantee the sequential write constraint? How to identify different workloads and distribute them depending on their characteristics? How to make use of the nameless writes <ref type="bibr" target="#b23">[25]</ref> to support the zone append command in ZNS SSDs <ref type="bibr" target="#b4">[6]</ref>?</p><p>The second category is regarding which applications can obtain the benefits of ZNS SSDs. For example, are applications that have the property of write once and read multiple times suitable for ZNS SSDs? A key value store is considered as a good candidate since it has a sequential write pattern <ref type="bibr" target="#b16">[18,</ref><ref type="bibr" target="#b22">24]</ref>. However, there still exist several issues such as a new compaction algorithm and how to allocate levels into zones. In addition, how to integrate ZNS SSDs into a distributed storage backend, such as Ceph, is an open question <ref type="bibr" target="#b3">[5]</ref>.</p><p>The final category is about the internal structure of ZNS SSDs. How to balance the tradeoff between parallelism in a zone and among zones. It affects greatly between performance and isolation. The zone size and the number of zones that can be opened concurrently also impact on designing system software for ZNS SSDs. More fundamental question is which one is better? Either managing SSDs in a host <ref type="bibr" target="#b5">[7,</ref><ref type="bibr" target="#b15">17]</ref> or processing in storage <ref type="bibr" target="#b8">[10,</ref><ref type="bibr" target="#b19">21]</ref>. We would like to ask for feedback about these topics.</p></div><figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_0"><head>Figure 1 :</head><label>1</label><figDesc>Figure 1: Zone garbage collection overhead under various utilizations of a zone</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_1"><head>Figure 2 :</head><label>2</label><figDesc>Figure 2: Access blocks individually vs. in a group manner Figure 2 presents our second observation, comparison between the total elapsed time for reading all blocks in a zone individually (4KB I/O size per each request) and in a group manner (8KB ∼ 128KB I/O size per each request). The results reveal that accessing in a group manner is much faster than individual accesses. This is because it can not only reduce the number of requests but also make use of the internal parallelism in ZNS SSDs. In general, a zone in ZNS SSDs is spread into multiple channels which gives a chance to process a request with consecutive blocks in parallel, like OCSSDs [20]. This observation motivates us to design our LSM-style garbage collection scheme.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_2"><head>Figure 3 :</head><label>3</label><figDesc>Figure 3: Design concept of LSM ZGC in comparison with Basic ZGC</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_3"><head>Figure 4 :</head><label>4</label><figDesc>Figure 4: Zone state and transition</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_4"><head>Figure 5 :</head><label>5</label><figDesc>Figure 5: Performance comparison between Basic ZGC and LSM ZGC under uniform update pattern</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_5"><head>Figure 7 :</head><label>7</label><figDesc>Figure 7: Zone utilization distribution between Basic ZGC and LSM ZGC</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_6"><head>Figure 8 :</head><label>8</label><figDesc>Figure 8: Effect of garbage collection on other applications From Figure 8, we can observe that the execution time of the worker is around 40 seconds when it runs alone. With LSM ZGC, the time is 45 seconds while it becomes 53 seconds with Basic ZGC. These results show the tradeoff between the cost and benefit of LSM ZGC. The cost is that LSM ZGC increases the amount of read by reading both valid and invalid blocks during garbage collection, while the benefit is that it reduces the garbage collection overhead. Figure 8 demonstrates that the benefit can compensate the cost, diminishing the interference greatly.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_0" validated="false"><head>Table 1 :</head><label>1</label><figDesc></figDesc><table>ZNS SSD prototype information 
Item 
Specification 
SSD Capacity 
1TB 
Size of a Zone 
1GB 
Number of Zones 
1024 
Interface 
PCIe Gen3 
Protocol 
NVMe 1.2.1 

</table></figure>
		</body>
		<back>

			<div type="acknowledgement">
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Acknowledgement</head><p>We thank the anonymous reviewers for their valuable feedback. This work was supported in part by SK Hynix and by Basic Science Research Program through the National Research Foundation of Korea (NRF) funded by the Ministry of Education (No. 2019R1F1A1062284).</p></div>
			</div>

			<div type="references">

				<listBibl>

<biblStruct xml:id="b0">
	<analytic>
		<title/>
		<ptr target="https://zonedstorage.io/introduction/zns/" />
	</analytic>
	<monogr>
		<title level="j">NVMe Zoned Namespaces</title>
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b1">
	<monogr>
		<title level="m" type="main">SK hynix demonstrates industry&apos;s first ZNS-based SSD solution for data centers</title>
		<ptr target="https://news.skhynix.com/sk-hynix-demonstrates-industrys-first-zns-based-ssd-solution-for-data-centers-2/" />
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b2">
	<monogr>
		<title level="m" type="main">Western Digital Champions Zoned Storage, An open initiative to redefine data centers for zettabyte scale</title>
		<ptr target="https://www.westerndigital.com/company/newsroom/press-releases/2019/2019-06-11-western-digital-champions-zoned-storage" />
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b3">
	<analytic>
		<title level="a" type="main">File systems unfit as distributed storage backends: Lessons from 10 years of ceph evolution</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Aghayev</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Weil</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Nelson</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Ganger</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">G</forename><forename type="middle">R</forename><surname>Kuchnik</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>And</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Amvrosiadis</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">G</forename></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">SOSP</title>
		<imprint>
			<date type="published" when="2019" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b4">
	<analytic>
		<title level="a" type="main">From Open-Channel SSDs to Zoned Namespaces</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Bjørling</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">USENIX VAULT</title>
		<imprint>
			<date type="published" when="2019" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b5">
	<analytic>
		<title level="a" type="main">The Linux Open-Channel SSD Subsystem</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Bjørling</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Gonzalez</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>And Bonnet</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">FAST</title>
		<imprint>
			<date type="published" when="2017" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b6">
	<analytic>
		<title level="a" type="main">Characterizing, modeling, and benchmarking rocksdb key-value workloads at facebook</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Cao</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Z</forename><surname>Dong</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Vemuri</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>And</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><forename type="middle">U</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><forename type="middle">H</forename></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">USENIX FAST</title>
		<imprint>
			<date type="published" when="2020" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b7">
	<analytic>
		<title level="a" type="main">Benefits of ZNS in Datacenter Storage Systems</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Chung</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">W</forename></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Flash memory summit</title>
		<imprint>
			<date type="published" when="2019" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b8">
	<analytic>
		<title level="a" type="main">Biscuit: A framework for near-data processing of big data workloads</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">G</forename><forename type="middle">U</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">B</forename><surname>Yoon</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><forename type="middle">S</forename><surname>Bae</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D.-H</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><forename type="middle">O</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">I</forename><surname>Lee</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Yoon</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Kang</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J.-U</forename><surname>Kwon</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Yoon</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><surname>Cho</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Jeong</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>And</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Chang</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">ISCA</title>
		<imprint>
			<date type="published" when="2016" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b9">
	<analytic>
		<title level="a" type="main">DFTL: a flash translation layer employing demand-based selective caching of page-level address mappings</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Gupta</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Kim</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Y</forename><surname>And</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Urgaonkar</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">B</forename></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">ASPLOS</title>
		<imprint>
			<date type="published" when="2009" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b10">
	<analytic>
		<title level="a" type="main">Efficient identification of hot data for flash memory storage systems</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Hsieh</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J.-W</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Kuo</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T.-W</forename><surname>And</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Chang</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">L.-P</forename></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Transactions on Storage</title>
		<imprint>
			<date type="published" when="2006" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b11">
	<monogr>
		<title level="m" type="main">Towards even lower total cost of ownership of data center it infrastructure</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Hwang</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J.-Y</forename></persName>
		</author>
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b12">
	<analytic>
		<title level="a" type="main">Alleviating garbage collection interference through spatial separation in all flash arrays</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Kim</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Lim</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">K</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Jung</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Y</forename><surname>Lee</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Min</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><surname>And</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Noh</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><forename type="middle">H</forename></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">USENIX ATC</title>
		<imprint>
			<date type="published" when="2019" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b13">
	<analytic>
		<title level="a" type="main">Fully automatic stream management for multi-streamed ssds using program contexts</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Kim</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><surname>Hong</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Hahn</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><forename type="middle">S</forename><surname>Chun</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Lee</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Hwang</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Lee</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>And</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Kim</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">FAST</title>
		<imprint>
			<date type="published" when="2019" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b14">
	<monogr>
				<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Lee</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><surname>Sim</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Hwang</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J.-Y</forename><surname>And</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Cho</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename></persName>
		</author>
		<title level="m">F2FS: A new file system for flash storage. In FAST</title>
		<imprint>
			<date type="published" when="2015" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b15">
	<analytic>
		<title level="a" type="main">Application-managed flash</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Lee</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Liu</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Jun</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Xu</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Kim</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>And</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Arvind</forename></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">FAST</title>
		<imprint>
			<date type="published" when="2016" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b16">
	<monogr>
				<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">L</forename><forename type="middle">U</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">L</forename><surname>Pillai</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><forename type="middle">S</forename><surname>Arpaci-Dusseau</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><forename type="middle">C</forename><surname>And</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Arpaci-Dusseau</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><forename type="middle">H</forename><surname>Wisckey</surname></persName>
		</author>
		<title level="m">Separating keys from values in SSDconscious storage. In FAST</title>
		<imprint>
			<date type="published" when="2016" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b17">
	<analytic>
		<title level="a" type="main">The log-structured merge-tree (LSM-tree)</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">O&amp;apos;neil</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><surname>Cheng</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">E</forename><surname>Gawlick</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>And O&amp;apos;neil</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">E</forename></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Acta Informatica</title>
		<imprint>
			<date type="published" when="1996" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b18">
	<analytic>
		<title level="a" type="main">OpenChannel SSD (What is it good for)</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Picoli</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">I</forename><forename type="middle">L</forename><surname>Hedam</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">N</forename><surname>Bonnet</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><surname>And T ¨ Oz¨unoz¨</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><surname>Oz¨un</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">CIDR</title>
		<imprint>
			<date type="published" when="2020" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b19">
	<analytic>
		<title level="a" type="main">Hybrid data reliability for emerging key-value storage devices</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Pitchumani</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>And</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Kee</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Y.-S</forename></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">FAST</title>
		<imprint>
			<date type="published" when="2020" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b20">
	<analytic>
		<title level="a" type="main">The Design and Implementation of a Log-structured File System</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Rosenblum</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>And</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Ousterhout</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><forename type="middle">K</forename></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Transactions on Computer Systems</title>
		<imprint>
			<date type="published" when="1992" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b21">
	<monogr>
		<title level="m" type="main">Evaluating host aware SMR drives</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">W</forename><forename type="middle">U</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">F</forename><surname>Yang</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M.-C</forename><surname>Fan</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Z</forename><surname>Zhang</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">B</forename><surname>Ge</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">X</forename><surname>And</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><forename type="middle">U</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><forename type="middle">H</forename></persName>
		</author>
		<editor>Hotstorage</editor>
		<imprint>
			<date type="published" when="2016" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b22">
	<analytic>
		<title level="a" type="main">GearDB: A GC-free key-value store on HM-SMR drives with Gear Compaction</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Yao</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><surname>Wan</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Huang</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><surname>Zhang</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Y</forename><surname>Liu</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Z</forename><surname>Xie</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><surname>And</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">H</forename><forename type="middle">E</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">X</forename></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">FAST</title>
		<imprint>
			<date type="published" when="2019" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b23">
	<analytic>
		<title level="a" type="main">De-indirection for flash-based SSDs with nameless writes</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Zhang</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Y</forename><surname>Arulraj</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">L</forename><forename type="middle">P</forename><surname>Arpaci-Dusseau</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><forename type="middle">C</forename><surname>And</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Arpaci-Dusseau</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><forename type="middle">H</forename></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">FAST</title>
		<imprint>
			<date type="published" when="2012" />
		</imprint>
	</monogr>
</biblStruct>

				</listBibl>
			</div>
		</back>
	</text>
</TEI>
