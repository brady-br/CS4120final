<?xml version="1.0" encoding="UTF-8"?>
<TEI xmlns="http://www.tei-c.org/ns/1.0" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
xsi:schemaLocation="http://www.tei-c.org/ns/1.0 /Users/atharsefid/Desktop/grobid-0.5.3/grobid-home/schemas/xsd/Grobid.xsd"
 xmlns:xlink="http://www.w3.org/1999/xlink">
	<teiHeader xml:lang="en">
		<encodingDesc>
			<appInfo>
				<application version="0.5.3" ident="GROBID" when="2020-09-29T02:46+0000">
					<ref target="https://github.com/kermitt2/grobid">GROBID - A machine learning software for extracting information from scholarly documents</ref>
				</application>
			</appInfo>
		</encodingDesc>
		<fileDesc>
			<titleStmt>
				<title level="a" type="main">Matryoshka: Hiding Secret Communication in Plain Sight</title>
			</titleStmt>
			<publicationStmt>
				<publisher/>
				<availability status="unknown"><licence/></availability>
			</publicationStmt>
			<sourceDesc>
				<biblStruct>
					<analytic>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Iris</forename><surname>Safaka</surname></persName>
							<affiliation key="aff0">
								<orgName type="institution" key="instit1">EPFL</orgName>
								<orgName type="institution" key="instit2">UCLA</orgName>
							</affiliation>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Christina</forename><surname>Fragouli</surname></persName>
							<affiliation key="aff0">
								<orgName type="institution" key="instit1">EPFL</orgName>
								<orgName type="institution" key="instit2">UCLA</orgName>
							</affiliation>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><roleName>EPFL</roleName><forename type="first">Katerina</forename><surname>Argyraki</surname></persName>
							<affiliation key="aff0">
								<orgName type="institution" key="instit1">EPFL</orgName>
								<orgName type="institution" key="instit2">UCLA</orgName>
							</affiliation>
						</author>
						<title level="a" type="main">Matryoshka: Hiding Secret Communication in Plain Sight</title>
					</analytic>
					<monogr>
						<imprint>
							<date/>
						</imprint>
					</monogr>
				</biblStruct>
			</sourceDesc>
		</fileDesc>
		<profileDesc>
			<abstract>
				<p>We want to enable a pair of communicating users to exchange secret messages while hiding the fact that secret communication is taking place. We propose a linguistic steganography approach, where each human message is hidden in another human-like message. A hard open question is how to keep the steganographic message small-existing related tools tend to blow up its size, thereby revealing the use of steganography. We encrypt by compressing each message, mapping it to a plausible sequence of words (using a language model), and letting the human user edit the outcome to produce a human-like message; we decrypt with a Viterbi-like state decoder. Our approach aims in producing text that a human can edit and fix with minimal effort. As a first step, we build a prototype of our system that helps users en-crypt English messages (into English messages), and we report on first experiments on Mechanical Turk.</p>
			</abstract>
		</profileDesc>
	</teiHeader>
	<text xml:lang="en">
		<body>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="1">Introduction</head><p>When we use free communication systems (e.g., Google, Hotmail, Facebook etc.) there is an implicit agreement that these systems will send advertisements to the users. The economic underpinnings of such systems have been routine now for a few years and users have mostly become aware of this tradeoff. Hundreds of millions of users use these systems daily.</p><p>From a privacy preservation point of view it should be noted that most messages exchanged between users do not necessarily raise privacy concerns. Additionally, the notion of privacy varies from user to user even though there is general acceptance that messages relating to health, finance, relationships, religious beliefs etc. may be viewed by many as potentially private. Out of tens of e-mails sent daily, there may be just one or two that we might want to keep private from the communication system. This paper proposes a linguistic approach to confidentiality, reclaiming our right to keep some information private. Our approach takes as input a short human sentence and maps it to other human sentences, which can be mapped back to the original one by a correspondent privy to an agreed code. It thus hides the message in plain sight: it not only keeps the message secret, but also the fact that we have something to hide.</p><p>We argue that such an approach is more desirable than simply using cryptographic encryption. A messaging service provider can detect cryptographically encrypted messages, has no incentive to encourage encryption -if widespread, it could harm its revenue -and could, in retaliation, treat our traffic preferentially. And service providers are not the only potential evil entities. They may themselves want plausible deniability in enabling users to exchange secret messages; the communication system may want to be able to tell the government "I cannot possibly know whether these users are exchanging secret messages". A linguistic encryption approach that creates encrypted messages indistinguishable from our regular correspondence would directly address such concerns.</p><p>Unfortunately, existing linguistic steganography approaches would not be a good fit for our needs. Several of them are easy to detect once we know how the encoder works (see Section 7). Most of them encrypt sentences at a very low rate, leading to encrypted text that is much longer than the secret, which can again give away the presence of steganography. Apart from achieving a high rate of encryption, we need low encoding and decoding complexity that still leads to undetectable encryption.</p><p>Which brings up the question: what is non-detectable linguistic steganography? Clearly, a message either looks like human speech or it does not, if a human so asserts. But open communication systems cannot possibly afford human operators look through the billions of e-mails exchanged every day, and randomized sampling would not catch the small percentage of encrypted mes-sages we anticipate. Thus we pose the reverse of Turing's famous test: can a machine tell if a sentence has been written by a human or not? and can it do so, if it needs to process billions of e-mails -thus in a computationally efficient manner?</p><p>We present in this paper the design and evaluation of an approach that performs well on the best machinebased test we could devise, by combining automated text generation with human-in-the-loop help. Our approach builds dictionaries that efficiently map natural language text to natural language text. The encoder uses the dictionary to produce candidate steganographic text. We then ask the human user to polish the resulting word sequence to human-like sentences. To decode, we use a completely automated approach based on Viterbi decoding.</p><p>We think that using a bit of human help is not bad. We optimize our system to require minimal intervention from the human user and evaluate through Mechanical Turk experiments the time of human effort it requires (less than a few minutes in most cases). We think this is an acceptable amount of effort for the one message per day we may want to protect; and having a human polishing the sentences makes it very hard for a machine to detect it is steganographic text. At the same time, the need for some human effort, even minimal, makes our approach non-threatening to communication systems: we expect that most people would not be willing to put in the extra minutes for every e-mail they send.</p><p>The rest of the paper is organized as follows. Section 2 summarizes our setup and high level approach; Sections 3 and 4 describe our encoder and decoder respectively; Section 5 presents experimental results and Section 7 reviews related work.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2">Setup and Block Diagram</head><p>Problem statement. We want to enable two communication parties, Alice and Bob, to exchange short secret messages, masked as innocuous messages, over their messaging provider, such that an adversary, Eve, is unable to distinguish between normal messages and those carrying hidden information. We assume that Eve has access to all the messages crossing the internal infrastructure of the service provider and that the load of messages is large enough to prevent Eve from visually inspecting each one of them; she instead runs detection algorithms to identify the existence of steganography. Note that this does not imply that our approach is de-facto vulnerable to human inspection attacks -the "human-in-the-loop" is a significant step toward successfully mitigating these attacks. It rather implies that the load is such that Eve does not have any better strategy than running a detection algorithm. Block Diagram. Our approach consists of using an encoder and decoder that run before and after we use the messaging service, as shown in <ref type="figure" target="#fig_0">Fig. 1</ref>. At the encoder, we use the following blocks: Compression compresses the secret message we want to send into a bit sequence; Bits-to-Words Mapping breaks each sequence into subsequences of a fixed length, and maps each one to a word among a set of possible choices (at this point we may also output additional words to better approximate human language); User enhancement is the stage where the human user is presented with a candidate sequence of words, and is asked to add words so that the result is as close as possible to human natural language. At the decoder, the block Text Cleaning removes the words inserted by the human user; the block Words-to-Bits maps the remaining words back to bit sequences, the concatenation of which gets decompressed to the hidden message from the Decompression component.</p><p>Optionally, a symmetric-key encryption block may be added in our system so as to ensure confidentiality of the secret message even in the case where Eve has both identified the existence of steganography and retrieved the hidden bit sequence. For example, an AES-GCM scheme <ref type="bibr" target="#b7">[9]</ref> in 128-bit block cipher mode for authenticated encryption could be applied on the output of the Compression block. In that case the resulting bit sequence would be of the same or slightly larger length (up to 128 bits, depending on the length of the produced authentication tag that gets appended at the end of the ciphertext). In this paper, we do not assert the cryptographic strength of our approach and in fact we have not tested our scheme for it. Our contribution is the idea of open communication that preserves privacy at low cost while cohabitating with the advertisement-driven means of communication.</p><p>We next describe the design choices for each of the blocks in <ref type="figure" target="#fig_0">Fig.1</ref> and their implementation.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3">Encoder</head></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.1">Compression</head><p>We use a mixed Huffman codebook C to compress a message into a bit sequence, in a lossless way. The symbol alphabet includes all printable ASCII characters (lower and capital case letters, numbers, space, digits, punctuation) and the set of the 300 most frequently used words in written English (that make up about 65% of all written material <ref type="bibr" target="#b4">[6]</ref>). We denote with C and C −1 the compression and decompression functions respectively. We use the character Huffman to enable to compress names and other unusual words; and the word Huffman to efficiently compress the most common words.</p><p>To built the codebook, we derive the frequencies of the characters and the words from a large training text (totaling approx. 78M characters, 13M words). The resulting codebook yields a 52% compression ratio on average 1 , which is 7% better than if we considered a symbol alphabet of only printable ASCII. Alice and Bob use the same pre-computed codebook to compress/decompress messages, that can be included in the resources of their encoder/decoder. In a smarter version of our system, we could compress using a word Huffman that includes words that are most common in messages considered private, such as love, hate, pregnancy, etc.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.2">Bits to Words Mapping</head><p>To map bits to words, we first parse the bit sequence into sub-sequences of length b bits 2 . Each sub-sequence uniquely identifies a set of words that we call a bin and denote as B. Inside each of the 2 b bins we have placed p bin words. We call the unique mapping between b-bit sequences and bins a dictionary D and we denote with D the bits to bin conversion and with D −1 the reverse operation. W B is the set of all bin words and W S the set of stop words, i.e., words not included in D.</p><p>Example: Assume a dictionary of size 4 entries (b = 2) with bins B 0 = {to, the, an}, B 1 = {I, we, you}, B 2 = {music, piano, weather}, B 3 = {like, hate, hear}, and a message that has been compressed into the bit sequence "01110010". This gets mapped into a bin sequence as follows: "01" corresponds to B 1 , "11" to B 3 , "00" to B 0 , "10" to B 2 . Any selection of words from the bin sequence B 1 , B 3 , B 0 , B 2 embeds the hidden message, e.g., the words "I like the weather".</p><p>Alice and Bob share a pre-computed dictionary D, or independently compute it by using the same text corpus R plus a secret key K, as described next. Note that we Dictionary Building. To be able to create natural language sentences, we need to be able to find words between consecutive bins that would also appear close to each other in human speech. We try to do so in two ways: first, we populate each bin with p words drawn according to the frequency distribution of the words in R, so that each bin can have more frequent words and less infrequent words; second, we allow a bin word to appear in more than one bin. E.g., assume that the word "sunny" is placed only in bin B 1 , and the word "weather" in bin B 2 ; unless the bins occur in that order there is no chance that these words could get selected together. Instead, if both words appear in more than one bin, there exist more combinations of bin sequences that allow these words to get selected. Repeating words in bins allows in addition for the dictionary size to be more than |W B | p entries, which allows for larger b and greater covert rate. Clearly, repeating words in bins can be viewed as a form of "noise" in the Alice-Bob channel.</p><p>We build our dictionary as follows. Let W R denote the set of unique words derived from a text corpus R and E a set of frequently used English words:</p><formula xml:id="formula_0">1. Assign W B = W R − E and W S = W R ∩ E.</formula><p>2. For every word w i ∈ W B , its number of occurrences o i in the corpus R is counted, and its frequency of occurrence f i is calculated as</p><formula xml:id="formula_1">f i = o i ∑ |W B | j=0 o j . 3. A vector v, with |v| = p · 2 b , is constructed be re- peating f i · p · 2 b times each word w i ∈ W B .</formula><p>The vector v is randomly shuffled, using K as seed.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.">All the elements between v[i] and</head><formula xml:id="formula_2">v[i + p], i ∈ {0, p, 2p . . . , (p − 1)2 b }, are placed in the bin B j , j ∈ {0, 1, . . . , 2 b − 1}.</formula><p>The sets W B and W S are accordingly updated <ref type="bibr" target="#b1">3</ref> .</p><p>Word Choice. The next step is to select one word to use from each bin, so that the sequence of words we select form natural or nearly natural sentences. To this end, we use an n-gram language model: n-grams are sequences of n words derived from a corpus; a corresponding n-gram model captures the probability of any n words appearing sequentially.</p><p>We use the OpenGrm library <ref type="bibr" target="#b8">[10]</ref> for generating an n-gram language model L R , encoded as cyclic weighted finite-state automaton (FSA), based on a corpus R. The generated n-gram model is represented in the form of an acceptor, i.e., an automaton with the input and output labels of a transition being equal. Finite-state acceptors are used to represent sets of strings; in the case of the n-gram model, the set of n-grams observed in a corpus R.</p><p>Every sentence in corpus R corresponds to a valid path in the model L R . Every transition in the automaton is associated with a weight that represents the probability of the transition. For every valid path in the automaton, an associated probability can be computed as the accumulation of the transition weights along the path. We smooth the model using the Witten-Bell algorithm <ref type="bibr" target="#b2">[4]</ref> so that there are valid paths in the model that do not correspond to any sentence in corpus R. These paths model unseen word sequences based on the statistics of the ngrams observed in R.</p><p>Word Choice Algorithm. Given a bin sequence B 1 , . . . , B m , a language model L R and a parameter k:</p><formula xml:id="formula_3">1. B 1 , . . . , B m is parsed into m k sub-sequences, each of k elements long.</formula><p>2. For every sub-sequence, a corresponding FSA is generated; we refer to this FSA as the bin model associated with the given sub-sequence of bins:</p><p>(a) For every bin B i , a state S i is created. A state S k+1 is also created. (b) For every word w j ∈ B i , a transition is added from state S i to destination state S i+1 . The transition is marked with input label w j and output label w j .</p><p>(c) For every state S i and for every word w r ∈ W S , a transition is added from state S i to destination state S i (self-loop). The transition is marked with input label w r and output label w r .</p><p>3. For every bin model generated, a sequence of q ≥ k words is produced:</p><p>(a) The bin model is intersected with L R ; the resulting FSA is the combined model.</p><p>(b) The shortest path in the combined model is computed, i.e., the path with the highest probability. The output labels of the shortest path is the sequence w i1 , . . . , w iq</p><p>The final stegotext w 1 , . . . , w q , with q ≥ m, is formed as the concatenation of the sequences w i1 , . . . , w iq , in the order they were produced.</p><p>Note that the bin model is an acceptor that represents a set A of all strings of words that can be derived by performing the cartesian product between the bins of a bin sub-sequence, namely all the possible combinations of the bin words of the sub-sequence. This acceptor also represents a set B of strings of words, which is a proper superset of set A. Set B includes all the strings of A augmented by an arbitrary number of stop words (words from set W S ), placed in-between the bin words and at arbitrary places. The combined model model is an acceptor that represents strings of words accepted by both the language model and the bin model. These strings are essentially the ones appearing in the language model and (a) contain words from the bins in the given subsequence (in the order of the sub-sequence), (b) may or may not include stop words. The probabilities of L R are retained in the combined model; by selecting, thus, the most probable path we select the most probable string of the combined model that satisfies (a) and (b), and also is the most likely to appear in natural language (according to language model L R ).</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.3">User Enhancement</head><p>The user is presented with a sequence of words and is asked to polish this to human-understandable sentences without changing the order of the given words -in our user-enhancement interface the bin words are presented in non-editable fields separated by editable fields where the user may insert new words and reuse/delete potentially generated stop words, at their will. In <ref type="figure" target="#fig_2">Fig. 2</ref> we demonstrate examples of user-enhanced outputs of our encoder. Note that we have purposely excluded from the bin words set the 100 most frequently used English words (e.g., the words "a", "and", "to", etc.) in order to give flexibility to the user while enhancing the stegotext. We do not allow the users to add words that are included in the bins (our user-enhancement interface automatically checks and enforces this) since it would introduce bits in the original compressed bit sequence and could create ambiguity at the decoder. In our experiments users rarely attempted to enhance using bin words.</p><p>We note here that our scheme is not restricted to solely operate on the English language. The input of the encoder, i.e., the secret message, may be written in any language, e.g., in French. Such a message would get compressed using the French mixed Huffman codebook -generated in the same fashion as the English codebook (Section 3.1). The language of the output of our encoder may also be chosen by the user and, in addition, independently of the input language: for example, Alice wishes to hide a message written in French and send to Bob a stegotext written in German. To do so, she simply needs a corpus R in German, out of which the dictionary D R and the language model L R are created (exactly as described in Section 3.2 with the only difference that set E should contain the most popular words of the targeted output language); these are used in the Bits-to-Words block to map the compressed bit sequence (regardless of which codebook was used during compression) into German sentences which Alice finally enhances. This is possible since no additional information about the targeted output language is needed to build D R and L R other than the one gained through the corpus R (frequency of words, n-grams etc.).</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4">Decoder</head><p>In this section we mainly describe the Decompression block. Text Cleaning simply removes all words that are not in the word bins, and have been inserted during the User Enhancement. Words-to-Bits Mapping takes each word w i and retrieves all bins into which this word appears. At this point we have a set of possible binary sequences. Decompression decides which of these actually occurred, by attempting to decompress each using our Huffman code and decide which of the resulting sentences is a natural sentence. For this last task it uses a state-based probability estimator.</p><p>Notation. Given a bin word w i and a dictionary D with bins B 0 , . . . , B 2 b −1 , we define a set A i as the set of bins in which word w i appears. Given a sequence of bin words w 1 , . . . , w m there exists a unique sequence A 1 , . . . , A m . We define a set of states S t , t ∈ {1, . . . , m r } and r ≤ m: S t = A r(t−1)+1 × A r(t−1)+2 . . . × A r(t−1)+r , where × denotes the cartesian product over sets. We refer to r as the grouping factor.</p><p>By construction, every state in a set S t is a distinct sequence of r bins. We refer to state i ∈ S t , as state i at step t. Each state in every step is associated with a state probability ε i . We define a transition probability a i j , between two states i ∈ S t and j ∈ S t−1 , such that:</p><formula xml:id="formula_4">a i j = P(s t = i | s t−1 = j)</formula><p>where s t denotes the state at the current step and s t−1 the state at the previous step.</p><p>Decoding Algorithm. Given a dictionary D and a sequence of bin words w 1 , . . . , w m , the decoder performs the following steps:</p><p>1. For every word w i , a set A i is constructed.</p><p>2. From the sequence A 1 , . . . , A m the sequence of sets S 1 , . . . , S T , is constructed, where T = m r , for some grouping factor r ≤ m.</p><p>3. For every state i ∈ S 1 , its initial state probability is computed: ε i = P(s 1 = i) 4. For every state i ∈ S t , 1 &lt; t ≤ T , its state probability ε i is computed: ε i = max j∈S t−1 ε j a i j</p><p>Once all the state probabilities have been computed, the most probable state sequence s * 1 , . . . , s * T is derived as:</p><formula xml:id="formula_5">s * T = arg max i∈S T ε i s * t−1 = arg max j∈S t−1 ε j a js t</formula><p>Finally, the estimation of the most probable message sent is computed as</p><formula xml:id="formula_6">m * = C −1 (D −1 (s * 1 , . . . , s * T )).</formula><p>Approximations. We assume that the state and transition probabilities can be approximated by the probabilities given by an m-order Markov model of the English characters x ∈ X , where X denotes here all the printable ASCII characters. That is, we use probabilities of sequences of English characters to approximate the probabilities of bin sequences, i.e., of the states at each step t. A bin sequence can be converted back to a bit sequence using a dictionary D, and consecutively to a message in English using a Huffman codebook C. The initial state probabilities are computed as follows:</p><formula xml:id="formula_7">ε i ≈ P(B 1 , . . . , B r ) = P(D −1 (B 1 , . . . , B r )) = = P(C −1 (D −1 (B 1 , . . . , B r ))) = P(x 1 , . . . , x n ) = = n ∏ j=1 P(x j |x j−(m−1) , . . . , x j−1 )</formula><p>The transition probabilities are computed as follows: "I have become tired of facebook's many years of existence.</p><formula xml:id="formula_8">a i j ≈ P(B r+1 , . . . , B r | B 1 , . . . , B r ) = P(D −1 (B r+1 , . . . , B r ) | D −1 (B 1 , . . . , B r )) = P(C −1 (D −1 (B r+1 , . . . , B r )) | C −1 (D −1 (B 1 , . . . , B r ))) = P(x n+1 , . . . , x n | x 1 , . . . , x n ) = n ∏ j=n+1 P(x j |x j−(m−1) , .</formula><p>The change over the years by the engineers sucks. It seems facebook's wacky algorithm will never make sense. The posts make the code on facebook obsolete."  </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5">Experimental Evaluation</head><p>We use Amazon's Mechanical Turk (MTurk) 4 to evaluate our end-to-end system, and in particular the effort required by human users to turn various stegotexts produced by our encoder into meaningful natural language texts. We encode 50 different messages (of 4-15 words) using the parameters in <ref type="table">Table 1</ref>. For each corpus R we produce a dictionary D R and a 5-gram language model L R , and we use the same mixed Huffman codebook. We restrict the location of the MTurk users to be the United States and we allow each user to enhance up to 3 stegotexts per experiment. First, we measure the completion time (in minutes), i.e., the time needed to enhance the output of the encoder, and the extra words inserted by the user while doing so. We find that on average the users needed 5.0, 4.0 and 5.8 minutes, in each experiment respectively, which is comparable to the time needed to write a short e-mail. The average number of extra words per sentence was 8 for the dreams experiment, 4 for animals and 4 for facebook; by increasing p and reducing k we see that the produced sentences need less user-effort, i.e., they are closer to being good quality NL sentences, hence the users need to insert less words. To demonstrate the effectiveness of our approach, we compare to a random technique, where words are simply uniformly at random chosen from the bin sequence to produce the stegotexts. We observed that ours consistently outperformed the random one: the users needed always more time for enhancing and in- Second, we measure the covert rate achieved, that is, the number of hidden bits per word of enhanced stegotext (the sum of bin words and stop words produced by the encoder and the extra words inserted by users). In all our experiments the average covert rate achieved was roughly 3 bits/word; for a hidden message of 5 words, each of 5.5 characters on average, the final enhanced stegotext will be around 73 words.</p><p>We next use an One-Class Support Vector Machine (SVM) <ref type="bibr" target="#b9">[11]</ref> to classify sentences as natural language (NL) or non-NL (out-of-class). We form a training set of 150K NL sentences derived from various texts of Wikipedia <ref type="bibr" target="#b6">[8]</ref>, the Brown [1] and the Reuters <ref type="bibr">[2]</ref> corpora. For each sentence i in the training set we use the lexicalized Stanford Parser 5 to infer its score (the probability of the most likely parsing) and its Part-of-Speech (POS) tags to construct a feature vector with the score, the number of nouns, verbs, adjectives and adverbs (each normalized by the sentence length in words) and the length in words:</p><p>z i =&lt; score, #nouns, #verbs, #adverbs, #adjectives, length &gt;, We use the observations z 1 , . . . , z n (n = 150K) to train the SVM using a Gaussian Radial Base Function (RBF).</p><p>To check our classifier we tested 10K NL sentences -95% were correctly classified -and 10K random sentences 6 out of which 97% were classified as non-NL.</p><p>We analyze <ref type="figure" target="#fig_3">(Fig. 3)</ref> the sentences produced by our encoder before and after enhancement from MTurk users, and we find that 25%, 58% and 50%, for each experiment respectively, were classified as NL; although the output of the encoder would not always pass as is the test, this result indicates that the sentences we produce are not completely non-NL. After user enhancement these percentages rise to 88% on average -some poorly enhanced sentences were detected (like the ones in <ref type="figure" target="#fig_2">Fig. 2(b)</ref>) as expected. For comparison, the sentences produced by the random technique were almost always classified as non-NL.</p><p>Finally, we investigate the performance of our probabilistic decoder by measuring the character error rate achieved. We build a 6-order Markov model of English characters using a large text corpus. <ref type="bibr" target="#b5">7</ref> We found that in each experiment the decoded messages with zero error rate where 96%, 93%, 95% resp. For the few cases where the decoder did some mistakes, we found that the decoded messages where only partially corrupted, namely on average 15% of characters were wrongly decoded.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="6">Related Work</head><p>Existing approaches to linguistic steganography apply automated text modifications techniques (see Bergmair <ref type="bibr" target="#b1">[3]</ref> and references therein), the majority of which require access to sophisticated NLP tools and large linguistic datasets to operate. Moreover, they usually introduce unnaturalness into the text, easily detectable by steganalysis methods <ref type="bibr" target="#b10">[12,</ref><ref type="bibr" target="#b3">5]</ref>, and they usually achieve a covert rate of less than 1 bit per word. For example, Spammimic 8 produces steganographic e-mails (with a rate of approx. 0.3 bits per word), that can get easily detected as suspicious due to long length and theme (Alice and Bob do not usually exchange spam). Closer to our work is the approach of Grosvald et al. <ref type="bibr" target="#b5">[7]</ref>. Similarly to us, the proposed approach consists of mapping the hidden message to a sequence of words which the user modifies to produce text. Differently to us, no significant attention is given in forming the bin words sets and in choosing the words, so that minimal user-effort (indeed no formal evaluation is presented) is required. Finally, a demonstrated example implies a covert rate of 0.5 bits per word. Our approach differs from the existing ones since its design aims in achieving high covert rate, while remaining practical and usable. The "human-in-the-loop" design choice we do may require higher amount of user-effort but it also introduces elements that make robust our stegotexts to sophisticated attacks. <ref type="bibr" target="#b5">7</ref> The compressed data of the model amounts to 43MB. 8 http://spammimic.com/</p></div><figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_0"><head>Figure 1 :</head><label>1</label><figDesc>Figure 1: Encoder and decoder block diagrams.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_1"><head>(</head><label></label><figDesc>a) A human understandable stegotext enhancement. "Does facebook's CEO feed people feed dogs. Can't yet use data base set book. Two posts are uses people facebook apps. Mary Cox able humans into keeping up" (b) A sloppy stegotext enhancement.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_2"><head>Figure 2 :</head><label>2</label><figDesc>Figure 2: Examples of stegotexts enhanced by MTurk users. The bin words are shown in bolt.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_3"><head>4Figure 3 :</head><label>3</label><figDesc>Figure 3: Sentences classified as natural language.</figDesc></figure>

			<note place="foot" n="1"> We compress 4,825 sentences of length between 4 and 15 words. 2 If needed, the compressed bit sequences is padded with 0&apos;s at the end. This operation is reverted while retrieving the hidden message. can easily customize our approach to produce sentences on a topic of interest of the user, by using bin words that come from a specialized text; for instance, in one of our experiments, we used words from a text on dreams, and in another from texts on animals.</note>

			<note place="foot" n="3"> Because of the rounding operation at step 3, some words with very low frequency might not be eventually placed in a bin. At the end, the sets W B and W S are accordingly updated to contain all words within the bins and words from the corpus not placed in a bin, respectively.</note>

			<note place="foot" n="5"> http://nlp.stanford.edu/ 6 Produced using an on-line random sentence generator</note>
		</body>
		<back>

			<div type="acknowledgement">
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="7">Acknowledgments</head><p>We are grateful to Balachander Krishnamurthy and David Applegate for their contributions; their employer's policy prevented them from being included as co-authors of this work.</p></div>
			</div>

			<div type="references">

				<listBibl>

<biblStruct xml:id="b0">
	<monogr>
		<title/>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Accessed</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2016-04-06" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b1">
	<analytic>
		<title level="a" type="main">A comprehensive bibliography of linguistic steganography</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Bergmair</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">International Society for Optics and Photonics</title>
		<imprint>
			<date type="published" when="2007" />
			<biblScope unit="page" from="65050" to="65050" />
		</imprint>
	</monogr>
	<note>Electronic Imaging</note>
</biblStruct>

<biblStruct xml:id="b2">
	<analytic>
		<title level="a" type="main">Scaling high-order character language models to gigabytes</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Carpenter</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">B</forename></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the Workshop on Software (2005)</title>
		<meeting>the Workshop on Software (2005)</meeting>
		<imprint>
			<publisher>Association for Computational Linguistics</publisher>
			<biblScope unit="page" from="86" to="99" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b3">
	<analytic>
		<title level="a" type="main">Effective linguistic steganography detection</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Chen</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Z.-L</forename><surname>Huang</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">L.-S</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Y</forename><forename type="middle">U</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Z.-S</forename><surname>Zhao</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">X.-X</forename><surname>And</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Zhao</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">X.-L</forename></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Computer and Information Technology Workshops, IEEE 8th International Conference on</title>
		<imprint>
			<publisher>IEEE</publisher>
			<date type="published" when="2008" />
			<biblScope unit="page" from="224" to="229" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b4">
	<monogr>
		<title level="m" type="main">The reading teacher&apos;s book of lists</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Fry</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">E</forename><forename type="middle">B</forename><surname>And</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Kress</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><forename type="middle">E</forename></persName>
		</author>
		<imprint>
			<date type="published" when="2012" />
			<publisher>John Wiley &amp; Sons</publisher>
			<biblScope unit="volume">55</biblScope>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b5">
	<analytic>
		<title level="a" type="main">Free from the cover text: a human-generated natural language approach to text-based steganography</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Grosvald</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>And</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Orgun</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><forename type="middle">O</forename></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Journal of Information Hiding and Multimedia Signal Processing</title>
		<imprint>
			<biblScope unit="volume">2</biblScope>
			<biblScope unit="issue">2</biblScope>
			<date type="published" when="2011" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b6">
	<monogr>
		<title level="m" type="main">Extracting text from wikipedia</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Jones</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">E</forename></persName>
		</author>
		<ptr target="http://www.evanjones.ca/software/wikipedia2text.html.Ac-cessed" />
		<imprint>
			<date type="published" when="2016-04-06" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b7">
	<monogr>
		<title level="m" type="main">The galois/counter mode of operation (gcm)</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Mcgrew</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>And</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Viega</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename></persName>
		</author>
		<ptr target="http://csrc.nist.gov/CryptoToolkit/modes/proposedmodes/gcm/gcm-spec.pdf" />
		<imprint>
			<date type="published" when="2004" />
		</imprint>
	</monogr>
	<note>Submission to NIST</note>
</biblStruct>

<biblStruct xml:id="b8">
	<monogr>
		<title/>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Opengrm</forename><surname>Ngram</surname></persName>
		</author>
		<ptr target="http://www.opengrm.org/" />
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b9">
	<analytic>
		<title level="a" type="main">Support vector method for novelty detection</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Sch¨olkopfsch¨</forename><surname>Sch¨olkopf</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">B</forename><surname>Williamson</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><forename type="middle">C</forename><surname>Smola</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><forename type="middle">J</forename><surname>Shawe-Taylor</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Platt</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><forename type="middle">C</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">E</forename><forename type="middle">T</forename><surname>Al</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">NIPS</title>
		<imprint>
			<publisher>Citeseer</publisher>
			<date type="published" when="1999" />
			<biblScope unit="volume">12</biblScope>
			<biblScope unit="page" from="582" to="588" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b10">
	<analytic>
		<title level="a" type="main">Attacks on lexical natural language steganography systems</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Taskiran</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><forename type="middle">M</forename><surname>Topkara</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">U</forename><surname>Topkara</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>And</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Delp</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">E</forename><forename type="middle">J</forename></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Electronic Imaging</title>
		<imprint>
			<date type="published" when="2006" />
			<biblScope unit="page" from="607209" to="607209" />
		</imprint>
	</monogr>
</biblStruct>

				</listBibl>
			</div>
		</back>
	</text>
</TEI>
