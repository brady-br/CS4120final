<?xml version="1.0" encoding="UTF-8"?>
<TEI xmlns="http://www.tei-c.org/ns/1.0" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
xsi:schemaLocation="http://www.tei-c.org/ns/1.0 /Users/atharsefid/Desktop/grobid-0.5.3/grobid-home/schemas/xsd/Grobid.xsd"
 xmlns:xlink="http://www.w3.org/1999/xlink">
	<teiHeader xml:lang="en">
		<encodingDesc>
			<appInfo>
				<application version="0.5.3" ident="GROBID" when="2020-09-29T04:14+0000">
					<ref target="https://github.com/kermitt2/grobid">GROBID - A machine learning software for extracting information from scholarly documents</ref>
				</application>
			</appInfo>
		</encodingDesc>
		<fileDesc>
			<titleStmt>
				<title level="a" type="main">Civet: An Efficient Java Partitioning Framework for Hardware Enclaves Civet: An Efficient Java Partitioning Framework for Hardware Enclaves</title>
			</titleStmt>
			<publicationStmt>
				<publisher/>
				<availability status="unknown"><licence/></availability>
				<date>August 12-14, 2020</date>
			</publicationStmt>
			<sourceDesc>
				<biblStruct>
					<analytic>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Chia-Che</forename><surname>Tsai</surname></persName>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><roleName>UC</roleName><forename type="first">Ada</forename><surname>Popa</surname></persName>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Berkeley</forename><forename type="middle">;</forename><surname>Donald</surname></persName>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">E</forename><surname>Porter</surname></persName>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Chia-Che</forename><surname>Tsai</surname></persName>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Jeongseok</forename><surname>Son</surname></persName>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Bhushan</forename><surname>Jain</surname></persName>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">John</forename><surname>Mcavey</surname></persName>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Raluca</forename><forename type="middle">Ada</forename><surname>Popa</surname></persName>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Donald</forename><forename type="middle">E</forename><surname>Porter</surname></persName>
						</author>
						<author>
							<affiliation key="aff0">
								<orgName type="laboratory">Jeongseok Son</orgName>
								<orgName type="institution" key="instit1">Texas A&amp;M University</orgName>
								<orgName type="institution" key="instit2">UC Berkeley</orgName>
								<orgName type="institution" key="instit3">Bhushan Jain</orgName>
								<orgName type="institution" key="instit4">The University of North Carolina at Chapel Hill</orgName>
								<orgName type="institution" key="instit5">John McAvey</orgName>
								<orgName type="institution" key="instit6">Hendrix College</orgName>
								<address>
									<settlement>Raluca</settlement>
								</address>
							</affiliation>
						</author>
						<author>
							<affiliation key="aff1">
								<orgName type="department">Carolina at Chapel Hill</orgName>
								<orgName type="institution" key="instit1">The University of North</orgName>
								<orgName type="institution" key="instit2">Texas A&amp;M University</orgName>
								<address>
									<settlement>Berkeley</settlement>
								</address>
							</affiliation>
						</author>
						<author>
							<affiliation key="aff2">
								<orgName type="institution" key="instit1">UNC Chapel Hill</orgName>
								<orgName type="institution" key="instit2">Hendrix College</orgName>
								<address>
									<settlement>Berkeley</settlement>
								</address>
							</affiliation>
						</author>
						<author>
							<affiliation key="aff3">
								<orgName type="institution">UNC Chapel Hill</orgName>
							</affiliation>
						</author>
						<title level="a" type="main">Civet: An Efficient Java Partitioning Framework for Hardware Enclaves Civet: An Efficient Java Partitioning Framework for Hardware Enclaves</title>
					</analytic>
					<monogr>
						<title level="m">Proceedings of the 29th USENIX Security Symposium</title>
						<meeting>the 29th USENIX Security Symposium						</meeting>
						<imprint>
							<date type="published">August 12-14, 2020</date>
						</imprint>
					</monogr>
					<note>This paper is included in the Open access to the Proceedings of the 29th USENIX Security Symposium is sponsored by USENIX.</note>
				</biblStruct>
			</sourceDesc>
		</fileDesc>
		<profileDesc>
			<abstract>
				<p>Hardware enclaves are designed to execute small pieces of sensitive code or to operate on sensitive data, in isolation from larger, less trusted systems. Partitioning a large, legacy application requires significant effort. Partitioning an application written in a managed language, such as Java, is more challenging because of mutable language characteristics, extensive code reachability in class libraries, and the inevitability of using a heavyweight runtime. Civet is a framework for partitioning Java applications into enclaves. Civet reduces the number of lines of code in the enclave and uses language-level defenses, including deep type checks and dynamic taint-tracking, to harden the enclave interface. Civet also contributes a partitioned Java runtime design , including a garbage collection design optimized for the peculiarities of enclaves. Civet is efficient for data-intensive workloads; partitioning a Hadoop mapper reduces the enclave overhead from 10ร to 16-22% without taint-tracking or 70-80% with taint-tracking.</p>
			</abstract>
		</profileDesc>
	</teiHeader>
	<text xml:lang="en">
		<body>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="1">Introduction</head><p>Hardware enclaves <ref type="bibr" target="#b0">[1]</ref><ref type="bibr" target="#b1">[2]</ref><ref type="bibr" target="#b2">[3]</ref><ref type="bibr" target="#b3">[4]</ref> are designed to protect sensitive code and data from compromised OSes, hypervisors, or offchip devices. An enclave includes a memory region protected by the CPU and encrypted in DRAM. An enclave can also attest the integrity of execution to a remote entity. So far, many enclave-protected systems have been proposed <ref type="bibr" target="#b4">[5]</ref><ref type="bibr" target="#b5">[6]</ref><ref type="bibr" target="#b6">[7]</ref><ref type="bibr" target="#b7">[8]</ref>, including commercial cloud offerings from Microsoft, IBM, and Alibaba <ref type="bibr" target="#b8">[9,</ref><ref type="bibr" target="#b9">10]</ref>. Speaking broadly, there is an increasing understanding of how to use enclaves to protect a single client's code in a multi-tenant cloud.</p><p>The design space for enclaves quickly becomes murkier for complex cloud applications that contain sensitive and insensitive components, and that are written in an object-oriented, managed language. These applications often integrate large code bases and data from both users and cloud providers, who may distrust each other. Take Hadoop <ref type="bibr" target="#b10">[11]</ref> as example:  <ref type="table">Table 1</ref>: Comparison of a non-partitioned Hadoop job between Ubuntu and Graphene-SGX <ref type="bibr" target="#b15">[16]</ref> user-defined mappers and reducers may operate on sensitive data, yet the orchestration and resource management framework is controlled by the cloud provider. Although there are some solutions for running an entire application in an enclave <ref type="bibr" target="#b11">[12]</ref><ref type="bibr" target="#b12">[13]</ref><ref type="bibr" target="#b13">[14]</ref><ref type="bibr" target="#b14">[15]</ref>, this approach provides no isolation between the user and cloud provider. Moreover, dropping an entire cloud framework written in a managed language like Java into an enclave is prohibitively expensive, as illustrated in <ref type="table">Table 1</ref>. Experiment parameters are detailed in ยง9.</p><p>Ideally, an application like Hadoop should be partitioned, so that only sensitive code and data are inside the enclave. <ref type="figure" target="#fig_1">Figure 1</ref>(a) illustrates the non-partitioned model for protecting the entire Hadoop framework. The model places a large portion of framework code in the trusted computing base (TCB), despite the fact that this code need not directly interact with any sensitive user data.  bile application, written in C#, inside ARM's TrustZone <ref type="bibr" target="#b20">[20]</ref>.</p><p>Although TLR provides a mechanism for separating sensitive logic from the untrusted OS and application code, mobile applications are much simpler than most cloud applications. TLR provides no solutions for hardening the trusted code against Iago-style attacks <ref type="bibr" target="#b21">[21]</ref> that leverage subtle language properties such as polymorphism. Intel's Software Guard Extensions (SGX) <ref type="bibr" target="#b0">[1]</ref>, a more common platform for emerging cloud deployments of hardware enclaves, has a much tighter memory budget than TrustZone; this memory restriction can be especially problematic for Java workloads. Glamdring <ref type="bibr" target="#b18">[18]</ref> is another framework for automatically partitioning C/C++ programs into enclaves. Glamdring reduces the TCB using program slicing, but does not generate code to protect against malicious inputs. In our experience, a key challenge in partitioning a legacy application is hardening the software at the newly created enclave boundary. Civet addresses various challenges of partitioning a managed, object-oriented language, using Java as a representative example. Our framework is prototyped on SGX, but many of the design principles are independent of SGX.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="1.1">Challenges</head><p>To partition a Java application, developers face several challenges that reduce security compared to the original application, that fail to reduce the TCB, or that require memory and other resources in excess of the constraints of SGX. We identify the following challenges for partitioning an application written in a managed, object-oriented language, such as Java:</p><p>โข Complexity of defending partition interfaces: Adding an interface between trusted and untrusted code requires adding a defense; this is already a challenge, but the language features of Java further complicate this defense. With polymorphism, untrusted code may override the behavior of a method by creating a subclass. By accepting objects from outside the enclave as input, an enclave can become potentially vulnerable to a type confusion attack <ref type="bibr" target="#b22">[22]</ref>. The input can be subtyped to alter the behavior of the enclave code, with an overridden method potentially sending sensitive data out of the enclave, or using reflection to load unexpected code into the enclave.</p><p>โข Large application code footprint: Even a "Hello World" class can introduce millions of lines of code from standard and third-party libraries. Many classes rely on JNIs (Java Native Interfaces), which are written in C/C++ and are notoriously prone to vulnerabilities <ref type="bibr" target="#b23">[23]</ref>. Finally, a featurecomplete JVM like OpenJDK contains up to a million lines of code written in Java and C/C++.</p><p>โข A runtime that requires significant resources and system support: Even a small partition of a Java application needs a full-featured runtime. Designing runtimes for enclaves is an open problem-a commodity JVM like OpenJDK makes many assumptions that are violated by enclaves, such as the presence of a large, demand-allocated virtual memory and a large pool of internal maintenance threads. Standard runtime behaviors, such as garbage collection, are not tuned for the memory restriction of SGX.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="1.2">Goals and Contributions</head><p>To address these challenges specific to supporting managed languages in enclaves, Civet includes both compile-time tools and an execution framework with the following goals:</p><p>โข Reducing partitioning effort: When introducing an isolation boundary into a large codebase, reasoning about the resulting security implications can be challengingincluding what code ultimately runs in the enclave, what data can enter and exit the enclave, and by what code paths.</p><p>To assist the developer in this reasoning process, we add static analysis and dynamic code instrumentation tools that can both reduce the code footprint in the enclave, as well as give the developer visibility into what can run in the enclave, data ingress, and data egress.</p><p>โข Mitigating partitioning pitfalls: Partitioning can expose a larger attack surface than running the entire application inside enclaves. A goal of Civet is to mitigate a majority of the non-side-channel security pitfalls caused by partitioning, such as type confusion attacks or accidental leakage through data flow. To this end, Civet analyzes the application and applies restrictions to behaviors that are impossible before partitioning. For type confusion attacks, we present an efficient strategy for type-checking any input, not only at the root of an object, but at every field and array element. Civet also uses taint-tracking <ref type="bibr" target="#b24">[24]</ref> to block outputs that are tainted by sensitive information.</p><p>โข Removing unreachable code: Even in a managed language, unreachable code in the TCB is a potential liability, as dynamic class loading or polymorphic behavior can lead to invisible or unexpected execution paths. During offline analysis, Civet removes unreachable classes and methods. The result is a trusted JAR file that is significantly smaller than the original collection of classes libraries, improving the auditability and lowering the risk of unexpected behaviors in the enclave.</p><p>โข Optimizing garbage collection for enclaves: SGX has a hardware limitation of 93.5 MB for the Enclave Memory Cache (EPC). If the enclaves on a system access more DRAM than this, the OS will swap the memory in and out of EPC, causing substantial overhead <ref type="bibr" target="#b12">[13,</ref><ref type="bibr" target="#b25">25]</ref>. Most GCs scan the heap and, thus, perform poorly when the heap is sparsely populated and is larger than the EPC. Civet includes a GC design that adds a middle generation, for preventing full-heap GC while keeping GC faster for the youngest objects. This optimizes GC to match the performance characteristics of enclaves.</p><p>The contributions of this paper are:</p><p>โข A framework that leverages Java language features to analyze and partition applications to run in enclaves ( ยง4).</p><p>โข A system to harden the enclave boundary. This includes type-checking polymorphic inputs ( ยง5), and mitigating unintended information leakage from enclaves ( ยง6). โข A lightweight JVM partitioned for enclaves ( ยง8).</p><p>โข A study of GC and a three-generation GC design optimized for enclaves ( ยง7.2).</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2">Related Work</head><p>Enclave frameworks and SDKs. Intel SGX introduces new design challenges, such as validating system call results from a malicious OS <ref type="bibr" target="#b21">[21]</ref>. The state-of-the-art solution is a library OS <ref type="bibr" target="#b11">[12,</ref><ref type="bibr" target="#b15">16]</ref> or a shield layer <ref type="bibr" target="#b12">[13,</ref><ref type="bibr" target="#b26">26]</ref> to hoist OS functionality into the enclave and/or validate inputs from an untrusted OS. Developers can also write enclave code from scratch, using an SGX SDK <ref type="bibr" target="#b27">[27]</ref><ref type="bibr">[28]</ref><ref type="bibr" target="#b28">[29]</ref>. Applications written in a managed language are commonly rewritten for SGX in another language; for example, VC3 <ref type="bibr" target="#b4">[5]</ref> sacrifices the benefits of using a type-safe language and compatibility by rewriting the Hadoop code in C++.</p><p>Partitioned trusted execution. Prior work reduces trusted code size through program slicing and/or generating the interface between partitions. TLR <ref type="bibr" target="#b17">[17]</ref> and Rubinov et al. <ref type="bibr" target="#b29">[30]</ref> partition android programs to run in ARM TrustZone <ref type="bibr" target="#b20">[20]</ref>. Glamdring <ref type="bibr" target="#b18">[18]</ref> partitions C/C++ programs for enclaves using static program slicing. SeCage <ref type="bibr" target="#b19">[19]</ref> partitions an application into secret compartments with hardware-based isolation. GoTEE <ref type="bibr" target="#b31">[31]</ref> compiles Go functions into enclaves, with a lightweight runtime and APIs for shielding. Brenner et al. <ref type="bibr" target="#b32">[32]</ref> run microservices in enclaves, apart from the orchitestration framework. EnclaveDom <ref type="bibr" target="#b33">[33]</ref> leverages Memory Protection Keys (MPK) for privilege separation inside enclaves.</p><p>Java partitioning frameworks. A number of tools partition a Java application for modularity. Addistant <ref type="bibr" target="#b34">[34]</ref> and J-Orchestra <ref type="bibr" target="#b35">[35]</ref> automatically divide Java applications across multiple hosts or JVMs. <ref type="bibr">Zdancewic et al. [36]</ref> use annotations to partition an application, with static analysis to enforce data flow policies. Swift <ref type="bibr" target="#b37">[37]</ref> partitions web applications such that security-critical data remains on the trusted server. Capability languages such as E <ref type="bibr" target="#b38">[38]</ref>, Joe-E <ref type="bibr" target="#b39">[39]</ref>, Oz-E <ref type="bibr" target="#b40">[40]</ref>, and Emily <ref type="bibr" target="#b41">[41]</ref> define the object-capability approach for various languages, and identify patterns for secure programming. Compared to these capability-based frameworks, Civet enforces coarse-grained security policies by simply separating trusted and untrusted objects, and hardening the boundary with hardware enclaves.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3">Threat Model and Security Properties</head><p>Civet adopts a similar threat model to many recent SGX projects <ref type="bibr">[5, 12-15, 18, 26, 31]</ref>. All in-enclave software is trusted and everything else that is outside the enclave is not trusted. Because any software can have bugs, which an attacker could exploit, one of Civet's goals is to decrease the TCB running in the enclave, as well as reduce the attack surface of the enclave code exposed to the untrusted host.</p><p>In moving from a model where one can trust the OS and hypervisor, to an SGX-style threat model, where host software and even parts of the application are potentially compromised, one must design enclave code to resist several new threats. First, one must ensure that the code in the enclave is really what the authors intended. Although SGX can measure the contents of an enclave at start time, the enclave code itself must be responsible to handle dynamic loading of additional classes; one cause for concern is misleading the enclave code to load a malicious class that could leak sensitive data or compromise the integrity of the code in the enclave. Second, partitioning an application to run portions of code in an enclave creates a new intra-application interface. Although good software engineering involves explicating assumptions about the state of the application when a function is called, perhaps even as comments, one must now carefully check these assumptions at the enclave boundary. This general class USENIX Association 29th USENIX Security Symposium 507 of semantic attacks against an enclave interface that violate a tacit assumption in the code are called Iago attacks <ref type="bibr" target="#b21">[21]</ref>. A third major concern is that sensitive data not inadvertently leak from the enclave. In refactoring a large piece of legacy code, it is easy to accidentally leave a code path that writes data to an out-of-enclave object. This third concern is less of an attack vector per se, so much as an aspect of this work that is highly error-prone. The security properties discussed later in this section consider each of these concerns.</p><p>Untrusted components. An attacker can compromise any off-chip devices (e.g., DRAM, accelerators, I/O devices) and any code running outside the enclave, including the host OS, system software, or hypervisor.</p><p>Trusted components. Civet trusts the CPU and any other hardware in the CPU package, as well as any binaries running inside the enclave. The enclave will include the trusted Java classes, the in-enclave JVM, the remaining trusted JNIs, Graphene-SGX, GNU libc, and Civet's in-enclave framework.</p><p>We assume attackers have the source code of the application and Civet, and may attempt Iago-type attacks <ref type="bibr" target="#b21">[21]</ref> by manipulating inputs to enclave interfaces, including classlevel, JNI-level, and system-level APIs. For system-level APIs, Civet inherits shielding code from Graphene; inasmuch as a Civet partition extends the enclave attack surface with class-level interfaces, Civet adds additional, language-based defenses on the data ingress and egress of the enclave.</p><p>Out-of-scope attacks. Civet assumes a correctly implemented CPU. Civet does not protect against known limitations of current enclave implementations like Intel SGX, which include rollback attacks <ref type="bibr" target="#b42">[42]</ref>, micro-architectural vulnerabilities <ref type="bibr" target="#b43">[43,</ref><ref type="bibr" target="#b43">43,</ref><ref type="bibr" target="#b44">44,</ref><ref type="bibr" target="#b44">[44]</ref><ref type="bibr" target="#b45">[45]</ref><ref type="bibr" target="#b46">[46]</ref><ref type="bibr" target="#b47">[47]</ref><ref type="bibr" target="#b48">[48]</ref><ref type="bibr" target="#b49">[49]</ref>, cache timing attacks <ref type="bibr" target="#b45">[45,</ref><ref type="bibr" target="#b50">50,</ref><ref type="bibr" target="#b51">51]</ref>, and denial-of-service from the host. Solving these problems is orthogonal to the contributions of Civet.</p><p>Balancing TCB and Attack Surface. Compared to running an entire application in an end-to-end shielded framework <ref type="bibr" target="#b11">[12,</ref><ref type="bibr" target="#b12">13,</ref><ref type="bibr" target="#b14">15,</ref><ref type="bibr" target="#b15">16]</ref>, partitioning an application has the advantage of reducing the TCB that directly interacts with sensitive code and data, as well as minimizing enclave footprint (important for performance on current enclave hardware). However, partitioning introduces new attack surface between the application code inside and outside the enclave. In a framework that shields a POSIX-style interface, one can simply use an existing shield that protects against many issues, such as Iago attacks <ref type="bibr" target="#b21">[21]</ref>. When one designs a custom enclave interface after partitioning a large code base, one has to design shielding code between code that was originally mutually trusted.</p><p>A key goal of Civet is to help developers harden this new enclave interface. For application-level vulnerabilities, Civet requires the developers to design defenses for the interaction between the trusted classes inside the enclave and the untrusted classes outside the enclave, but provides language tools to help developers reason about these defenses, such as injection of shield classes and taint-tracking. Civet hardens the partitioned JVM for developers, and inherits shielding of OS-level interfaces from Graphene-SGX.</p><p>We note that partitioning an application can also potentially introduce new side-channel vulnerabilities. Side channels and their defenses are out of the scope of this paper.</p><p>Security properties. Civet is designed to enforce the following security properties:</p><p>โข I-Code integrity and remote attestation: Civet checks the integrity of all code running inside the enclave, including the Java classes, Java virtual machine, imported Java Native Interface (JNI) libraries, system libraries, and the Graphene-SGX library OS. A remote entity can use the remote attestation feature of hardware enclaves to check the measurement of a Civet application. This property is fundamental to hardware enclaves and is necessary for defending against code modification or code injection attacks.</p><p>โข II-Type integrity on enclave interfaces: Polymorphism at the enclave interface causes confusion for developers when writing shielding code. Civet ensures that the inputs to a method exported as an enclave interface cannot be arbitrarily subtyped as classes that are impossible in the original application. With type integrity on enclave inputs, developers can safely use object-oriented APIs for semantic checks or cryptographic protections. This property is necessary for preventing the type confusion attacks described in ยง5.1.</p><p>โข III-Explicit data declassification: Data provisioned from a secure channel or derived from this provisioned data inside the enclave cannot be copied outside the enclave unless explicitly declassified by the developer. Civet tracks both the explicit flows from operating on tainted objects and, optionally, the implicit flows from branching based on tainted values. Developers need to either encrypt or sanitize a tainted object for declassification, or the object cannot return to untrusted code. This property is to prevent semantic bugs in application or defense code from accidentally leaking the secrets from the enclaves. Side channels and other implicit flows are out of scope.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4">Partitioning Class Libraries</head><p>In this section, we explain how to partition an application with Civet; and how Civet creates a concise, robust partition with little input from the developer.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.1">The Partitioning Workflow</head><p>Step 1: Identifying enclave interfaces. To create a partition, Civet requires developers to identify one or more entry classes within the application, to serve as the interface between enclave code and non-enclave code. <ref type="figure" target="#fig_3">Figure 2</ref> illustrates partitioning a Hadoop mapper with an entry class. We note that many other partitioning systems involve specifying sensitive data rather than defining a code interface; we selected the code option in part because one use case for SGX is protecting sensitive algorithms, and in part because we believe that this approach better matches programmers' intuition. We leave a more careful study of this design choice for future work.</p><p>A set of entry classes define a trusted domain, in which all of the classes that implement the enclave functionality are mutually trusted. Every call from an untrusted class to an entry class transitions execution into the enclave.</p><p>At build time, Civet packs all of the trusted classes into a single JAR file, named as enclave.jar, which contains all of the Java code that can be loaded into the enclave. The input to this tool is a configuration written in XML (illustrated in <ref type="figure">Figure 3</ref>), with each entry class listed as an &lt;EntryClass&gt; rule. The resulting JAR file can be audited and signed by developers. For a class loaded by reflection, Civet relies on the developer explicitly white-list the class, by adding an &lt;Include&gt; rule to the configuration. Users can add &lt;Include&gt; rules gradually when encountering resolution errors during testing, or search for dynamically-loaded classes in the enclave code. The use of reflection is extremely common in commercial Java applications <ref type="bibr" target="#b52">[52]</ref>. Parallel to this work, many papers <ref type="bibr" target="#b52">[52]</ref><ref type="bibr" target="#b53">[53]</ref><ref type="bibr" target="#b54">[54]</ref> have shown that the usage of reflection calls can be estimated by static analysis. For identifying trusted classes ( ยง4.2), Civet also requires the user to specify the main class of the whole, untrusted program, using an &lt;MainClass&gt; rule.</p><p>Step 2: Specifying enclave protections. After defining the entry classes, the developers can specify extra shield classes that leverage object orientation to wrap the entry classes. Shield classes are primarily used for tasks such as sanitizing or decrypting inputs, or encrypting outputs. Developers can write a shield class without changing the source code of the original application. <ref type="figure">Figure 3</ref> shows an example of a shield class for the Hadoop mapper partitioned in <ref type="figure" target="#fig_3">Figure 2</ref>. RegexMapperShield is a wrapper to RegexMapper for decrypting the inputs and encrypting the outputs. A shield class is defined in the configuration using a &lt;ShieldClass&gt; rule, and as a benefit, the definition is transparent to the entry class as well as the call sites in the non-enclave code. Civet also synthesizes extra protections, including typechecking inputs and dynamic taint-tracking. Civet defines a sensitive object to be an object instantiated inside the trusted code or provisioned from a secure channel. A &lt;Declassify&gt; rule can specify a method to declassify the outputs to the untrusted domain. If an output is not declassified, Civet uses dynamic taint-tracking ( ยง6.2) to block any object from leaving the enclave if the object contains information derived from a sensitive object.</p><p>Step 3: Connecting trusted and untrusted domains. For each entry class, Civet synthesizes a proxy class that marshals inputs to the enclave and invokes an RPC to code running in the enclave. <ref type="figure" target="#fig_4">Figure 4</ref> shows the components of the Civet framework, including a proxy class. An untrusted application, such as the Hadoop framework, can create an enclave by instantiating the proxy classes. A proxy class includes JNI to invoke the hardware level operations to enter an enclave. The code of the entry class runs inside the enclave.</p><p>The underlying JVM or library OS may exit the enclave only to 1) return from an application-level call into an entry class, and 2) to implement runtime-level or OS-level functionality. Developers need only concern themselves with the first case. For the second case, the JVM and the library OS include their own shielding code.</p><p>Specifically, Civet disallows enclave Java code to call out to non-enclave Java code, which we call a nested exit, for two reasons: (1) Designing shielding strategies for nested exits can be challenging; (2) A nested exit exports intermediate states outside the enclave and increases the risk of data leakage, corruption, and side channels. The downside is that the enclave may include more supporting trusted classes and/or export more entry classes for the untrusted code to access results inside the enclave. All of our application examples ( ยง9) were easily partitioned without nested exits.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.2">Identifying Trusted Code</head><p>A key service Civet provides for developers is creating a single JAR file with all of the code that should be reachable from the entry classes or that is white-listed with an include directive, but no other code.</p><p>In the presence of polymorphism, this analysis is best done with an automated static analysis. For example, Hadoop uses an interface called Writable to represent 52 different types of data. Polymorphism multiplies the complexity of the security analysis, and obscures the implications of bringing a class into an enclave. In a source-code-level audit, developers cannot easily predict the target of every method call or field access. Our analysis helps by generating an unambiguous collection of classes and methods as the transitive closure of control and data flows from entry classes.</p><p>Civet determines the classes and methods to be included in the trusted domain via static bytecode analysis:</p><p>โข Call graph analysis <ref type="bibr" target="#b55">[55,</ref><ref type="bibr" target="#b56">56]</ref>: For each method, identifying the classes and methods referenced.</p><p>โข Points-to analysis <ref type="bibr" target="#b57">[57]</ref><ref type="bibr" target="#b58">[58]</ref><ref type="bibr" target="#b59">[59]</ref>: For each field or local variable, identifying the heap objects that are assigned, to determine all the possible subtypes allocated for the field or local variable if it is polymorphic.</p><p>We implement the static analysis described in Algorithm 1 using SOOT <ref type="bibr" target="#b60">[60]</ref>, the de facto bytecode analysis framework for Java. We use the flow-insensitive, context-insensitive, whole program analysis implemented in Spark <ref type="bibr" target="#b61">[61]</ref>, the points-to analysis framework of Soot, with on-the-fly call graph analysis (see the configuration in ยง9.4). The points-to analysis is based on the main class specified by the user. We use the points-to analysis to identify the possible argument types to an entry method, or the possible targets of a polymorphic method. For classes that are not included in the whole program analysis of Spark, such as classes explicitly loaded by the JVM during initialization, we conservatively estimate the points-to targets by considering all subclasses. Shredding unreachable methods. We incorporate a new technique called Shredding to eliminate code that is unreachable at compile time. Shredding is different from partitioning or program slicing because it does not change the control flow of the enclave, and is more similar to dead code analysis <ref type="bibr" target="#b62">[62]</ref>.</p><p>We shred both classes and methods within the class to reduce the footprint of enclave code. By shredding methods, we can subsequently remove classes and methods which are only used inside the unreachable methods. As described in Algorithm 1, the analysis starts with entry classes and classes listed by the &lt;Included&gt; rules, and then recursively includes methods that are reachable inside the enclave. With pointsto analysis, we can conservatively identify methods that are possible callees of a polymorphic invocation to a generic class or an interface.</p><p>Static fields. The one exception to strict enclave isolation is that enclave code in Civet may access static fields and methods outside of an enclave. If a trusted class access a static field or calls a static method inside the enclave, Civet includes the target class inside the enclave. If a static field is directly updated by another trusted class, Civet allows this update to propagate out of the enclave, assuming it does not violate any taint-tracking rules.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.3">Security Discussion</head><p>Civet measures the integrity of the code included in enclaves (Property I-Code Integrity and Remote Attestation). For each partition/trusted domain, Civet generates a trusted JAR containing signed classes and binaries. Each entry (a file or a directory) in the JAR is securely hashed, with the list of entries and hashes signed by the developer's private key. This prevents subsequent modifications of the JAR by anyone else. The signature of each class is checked by the in-enclave Java runtime, whereas the signature of each binary is checked by the Graphene-SGX library OS. The trusted Java runtime will only load classes and binaries from the trusted JAR.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5">Shielding Polymorphic Interfaces</head><p>This section explains how exposing a polymorphic, objectoriented interface can lead to a type-confusion attack, and an efficient type-checking scheme for reducing the risk.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5.1">Type Confusion Attack</head><p>Partitioning an application exposes a new attack surface at the interface between the trusted and untrusted code. In the case of OS-level interfaces, such as system calls, this led to an initially surprising and, subsequently, widely explored topic of Iago attacks <ref type="bibr" target="#b12">[13,</ref><ref type="bibr" target="#b13">14,</ref><ref type="bibr" target="#b21">21,</ref><ref type="bibr" target="#b26">26]</ref>. In a partitioned Java application, where objects are passed into the enclave as inputs, the complex behavior of polymorphic object-orientation is ripe for Iago-style attacks. Specifically, attackers may pass a polymorphic object as part of the input to the enclave code. This can take the form of creating an object that violates class invariants, or generating control flow that is not possible in the original application.</p><p>Attack example: Tomcat. <ref type="figure" target="#fig_7">Figure 5</ref> shows an example of how a partitioning choice in an application can leave the enclave open to attack, in this case in a partitioned Tomcat servlet <ref type="bibr" target="#b63">[63]</ref>. This example is hypothetical, and selected for clarity, as real-world examples may be more complex and obscure. A Tomcat servlet typically receives a Request object that stores the parameters of an HTTP request. For convenience, Tomcat stores the POST message body in a CoyoteInputStream object, i.e., a buffered stream, for the servlet to read. A developer might decide to use a generic class at the enclave interface, say changing the requirement from a CoyoteInputStream to a generic inputStream class. The code behavior is equivalent, and the interface is arguably more flexible. However, an attacker can replace the CoyoteInputStream with a subclass of InputStream,  as long as this subclass is in the trusted domain. For example, this request may be directed to a FileInputStream object that is connected to a file that include sensitive data, and could be exfiltrated by serving the request.</p><p>In general, this type of vulnerabilities is caused by partitioning the code such that a precondition or invariant is established by code that ends up outside of the enclave. For instance, in a monolithic application, one might have the invariant that one only adds a stream to the Request class with one of a few specific subtypes by auditing the instances of new, rather than putting redundant assertions at every single method boundary. When selecting a partition interface, it is easy to place these invariant checks in the untrusted code. To the extent that we can statically extract these invariants, Civet can automatically harden the enclave interface.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5.2">Deep Type Checks on Enclave Inputs</head><p>In order to harden the enclave interface, Civet automatically generates deep type checks on input objects. Civet uses marshalling, or serialization, to pass input objects into enclaves, and the enclave runs memory bounds checks on these input buffers. In order to prevent possible type-confusion attacks, Civet also implements a deep type check at the enclave boundary. In the case of a complex object with other objects nested underneath it, the enclave checks not just the type of the "root" object, but also the type of every field or array element in the object. A simple cast check (i.e., checking whether an object is castable to a type) or a type comparison (e.g., "if (o.getClass() != String.class) ...") is insufficient for preventing this type of attacks.</p><p>We assume that, if the user is partitioning an application, the untrusted code is initially benign but may be compromised. Thus, to generate type checks at the enclave boundary, Civet currently uses the source code or byte code of the untrusted portion to infer the set of subtypes that could be passed to a given enclave API function could in the original, unpartitioned code. We call this set of types (and field subtypes) for a given object a profile. We use this information to generate the type checking code; it would be possible for an expert developer to manually create this information if they did not wish to mine it from application code.</p><p>One challenge is that this naรฏve representation of a profile can grow exponentially large when an object contains a deep hierarchy and many fields at each level. Worse, if a class contains references to itself, or forms cyclic references among multiple classes, the profile can grow indefinitely large. Self and cyclic class references are common in practice.</p><p>Path-based type-checks. Instead of defining which types can be part of an input, Civet defines which parts of an input (permission object) that a type (permission subject) can be instantiated and assigned to. For each type that can be instantiated during input deserialization, Civet lists all the fields and array elements that can be instantiated as the type. These fields are represented as paths, as traversed from the root object. The strategy is similar to a mandatory access control (MAC) system, such as AppArmor <ref type="bibr" target="#b64">[64]</ref> which has a default deny policy, and the administrator can give a program explicit access to files with certain path patterns. This strategy makes it easy to make permission decisions sooner if the prefix of the path does not match the policy.</p><p>We explain the type checks with the example in <ref type="figure" target="#fig_7">Figure 5</ref>. Assume the static analysis determines that the original application only assigns the CoyoteInputStream class to the inputStream field of the input, of class Response. Civet will generate the rules for instantiating this input:</p><p>โข For CoyoteInputStream:</p><formula xml:id="formula_0">-((Response)req).inputStream โข For Response: -req (root object)</formula><p>Based on these rules, any instantiation of a class that does not match its rule will be rejected by Civet. For example, if a FileInputStream object is assigned to inputStream of req, the instantiation will be rejected because the class is not permitted with the given path. This scheme is efficient for objects with a complex structure. For example, in Hadoop, a TupleWritable object contains an array of other Writable objects, including another TupleWritable object. If we want to reject nested tuples but allow tuples of LongWritable and Text, the following rules will enforce such a policy:</p><p>โข For LongWrtiable and Text:</p><p>-value (root object) -((TupleWritable)value).values <ref type="bibr">[*]</ref> (array elements if root object is a tuple) โข For TupleWritable:</p><p>-value (root object)</p><p>Array sizes and indices are indistinguishable in this scheme, hence the wildcard ( <ref type="bibr">[*]</ref>) in the second rule for LongWrtiable and Text. Extending or re-ordering the elements of an array does not increase the number of rules.</p><p>Complexity. We show that the path-based representation simplifies type-checking. Assume that a class contains N fields, and each field can be assigned to one of M subtypes. The number of rules at the first level is O(MN), which is significantly fewer than O(M N ) in the simpler representation. If we consider an object of D levels, the complexity of our scheme is O(MN D ), also much simpler than O(M ND ).</p><p>Implementation. At build time, we assign a unique identifier to each field of a class that is both: (1) a trusted class, and (2) instantiated and assigned as part of an input to a method. Our prototype uses a 32-bit identifier on the assumption that a partitioned application will not have more than 2 32 fields among all trusted classes, and could increase this limit if needed. To compare the conditions, we generate a hash of all the fields that have been visited from the root object. Note that the hash must be collision-resistant, otherwise the attacker may submit a malicious structure that collides with a permitted hash. Ideally, we need to use a strong hash function, such as SHA256; however, we observe that most objects in our use cases never go deeper than 8 levels. Therefore, we just push the field identifiers into a 32-byte buffer, and only hash the buffer when the depth is larger than 8.</p><p>Compatibility. False negatives in the static analysis may cause compatibility issues if a benign input is rejected by typechecking. Our static analysis only excludes inputs that were impossible in the original application. Among our application examples ( ยง9), no benign input from the original partitioned code was rejected.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5.3">Security Discussion</head><p>The deep type checking described in this section ensures Property II-Type integrity for enclave interfaces. Specifically, Civet uses static analysis to generate a set of polymorphic types that could happen in the original program, and checks that only objects (or object hierarchies) within that set are accepted as enclave inputs.</p><p>A limitation of the type checks is that we need to conservatively approve input types based on the points-to analysis, as well as overestimate classes loaded via reflection or loaded internally by the JVM. This limitation leads to false positives, in which Civet may permit an unexpected input type to an entry method, which may be exploited for type confusion attacks. We did not observe this issue in our case studies.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="6">Declassifying Enclave Outputs</head><p>In this section we discuss the security challenges of explicitly declassifying all outputs that can be potentially tainted by sensitive data (Property III-Explicit data declassification).</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="6.1">Data Leakage</head><p>Preventing data leakage is a critical challenge for partitioning. When data is decrypted and processed inside an enclave, it is important that the data does not inadvertently make its way back to the untrusted classes, except via explicit declassification. For instance, a privacy-preserving function inside the enclave may report safe results with differential privacy <ref type="bibr" target="#b65">[65]</ref>. Developers of partitioned enclave applications have an additional burden of auditing the code for any paths that might leak sensitive data outside of the enclave.</p><p>Polymorphism makes it difficult to simply inspect the code statically or an object dynamically, and know whether it was derived from sensitive bits. Developers do not necessarily know whether invoking a method on an ObjectType calls the method of its Class or the Subclass, which in turn may or may not update a field in the object. A further challenge for determining the data flow is the detection of the implicit data flow under the effect of the control flow. Since polymorphism and reflection also complicate the control flow, it becomes even harder to predict the data flow of a Java application without a dynamic taint-tracker <ref type="bibr" target="#b24">[24,</ref><ref type="bibr" target="#b66">[66]</ref><ref type="bibr" target="#b67">[67]</ref><ref type="bibr" target="#b68">[68]</ref><ref type="bibr" target="#b69">[69]</ref><ref type="bibr" target="#b70">[70]</ref><ref type="bibr" target="#b71">[71]</ref><ref type="bibr" target="#b72">[72]</ref><ref type="bibr" target="#b73">[73]</ref>. Therefore, we argue that it is important to track both explicit and implicit data flow within the enclaves that operate on sensitive data.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="6.2">Dynamic Taint-Tracking</head><p>To ensure data confidentiality, Civet tracks data flows using Phosphor <ref type="bibr" target="#b74">[74]</ref>, a dynamic taint-tracking framework. In Civet, all the entry class objects and methods of shield classes are marked as taint sources. Thus, all the objects which are derived from instantiation of the entry classes or from shielding, such as decrypted data or data provisioned from a secure channel, will be tainted. Phosphor propagates the taints through explicit data flow, and optionally through implicit data flow based on control flow. We added Phosphor as a phase of the partition tool to instrument the classes in enclave.jar ( ยง4.1) after shredding. We run the Phosphor instrumenter with the multiTaint option, and the controlTrack option if the users choose to track the implicit flow.</p><p>Dynamic taint-tracking prevents developers from introducing vulnerabilities via buggy code that inadvertently leaks sensitive data through data flows. The sink of the taint-tracking is the function for marshaling returned objects, in order to block any tainted object from being flowed out of the enclave, At the boundary of the enclave, any tainted object unless the object is explicitly declassified. We modify Phosphor such that developers can specify a Declassify rule that can remove taints on objects that are confirmed to contain no sensitive data. In practice, we expect the developers to declassify an object after sanitizing the object or encrypting the data.</p><p>We note that tracking implicit data flow is considerably more expensive than tracking explicit flow; thus, we give the user an option to disable this in a deployment run. Because this is a tool primarily for understanding code behavior, there are scenarios where this trade-off is sensible; there are also scenarios where users will prefer more exhaustive checks.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="6.3">Security Discussion</head><p>Dynamic taint-tracking complements the language safety of Java by requiring any sensitive data that leaves the enclave to be explicitly checked (Property III-Explicit data declassification). The JVM ensures that sensitive code and data inside the enclave remain in a hardware-protected memory region. Taint tracking can catch cases where an output derives from sensitive information, but the results were not encrypted or checked against a different policy. We assume the developer writes a declassifier that enforces appropriate application-level policies.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="7">Garbage Collection Optimization</head><p>Garbage collection (GC) is an essential feature of Java and many managed languages. GC unburdens the programmer from writing error-prone memory management code. GC design and implementation of has a first-order impact on application performance, yet off-the-shelf GC does not perform well in enclaves. Civet contributes an optimized GC design for the constraints of enclaves.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="7.1">GC Design Challenges</head><p>The Civet JVM prototype is based on the OpenJDK 8 HotSpot JVM, which uses a generational GC <ref type="bibr" target="#b75">[75]</ref>. The HotSpot JVM contains multiple GC implementations, each with different advantages and resource requirements. In initial attempts to run Java in an enclave, we found that no garbage collection strategy performed well within the constraints of SGX enclaves. Thus, we started with a relatively straightforward GC that we could understand and tune to work within an enclave. Specifically, we studied and tuned the Serial GC from HotSpot-a "textbook" generational GC.</p><p>In Serial GC, the JVM typically divides the heap into two generations: the young (defNew) and old (tenured) generations. The GC strategy is different for each generation, illustrated in <ref type="figure">Figure 6</ref>. The young GC happens frequently to recover memory from short-lived objects. Objects that have survived several GC rounds in the young generation are promoted to the old generation. Specifically, the young gener- ation uses a copying GC that traverses the heap and copies live objects into a reserved space (called the To space) on the fly. The underlying assumption is that the live objects will be few, and it is simpler to just copy them than managed fragmented free space. In contrast, the old generation uses a Mark-SweepCompact (MSC) strategy, which consists of multiple passes through the heap, and is optimized to minimize movement of objects that are likely to survive.</p><p>We observe several problems for both the young and old GCs in enclaves. We illustrate the issues using a simple microbenchmark that targets a 20% object survival rate for both generations, by repeatedly allocating and freeing a forest of 5KB binary trees (each with 31 nodes), occupying 1MB of the heap. <ref type="figure">Figure 7</ref> shows the average slowdown on each GC iteration in the young and old generations, as a function of different generation sizes. We observe that the Copying GC in the young generation has more slowdown in enclaves until the generation size reaches โผ80MB, due to more LLC misses during data movement. Note that LLC misses in enclaves are expensive, as they involve decrypting and integrity check  for the data <ref type="bibr" target="#b12">[13,</ref><ref type="bibr" target="#b76">76]</ref>. When the generation size is close to or larger than the EPC size, the slowdown on MSC becomes significantly higher then the Copying GC due to an order-ofmagnitude higher number of page faults, which are even more expensive than LLC misses. We observe three performance regimes for GC, which reflect the underlying hardware limitations:</p><p>โข If the generation fits inside the LLC (8MB on Intel E3-1280 v5), copying GC is even more efficient than MSC.</p><p>โข If the generation fits in the enclave page cache (EPC-the protected physical memory that is used inside enclaves), the cost of GC is proportional to the size of the generation.</p><p>โข When the generation size approaches the EPC size, MSC becomes much worse than copying GC because of EPC swapping. Currently, the EPC is limited to 93.5 MB of usable memory; after this is exhausted, the OS must swap the encrypted contents of the EPC to other DRAM or disk. Some of the EPC must be used for the code and stack, so there is an upward trend closer to 80 MB. Prior work <ref type="bibr" target="#b12">[13,</ref><ref type="bibr" target="#b25">25]</ref> reports up to a 1000ร slowdown for random reads and writes in an enclave larger than the EPC. This size limitation has not been enlarged on any later generations of Intel CPUs. Because MSC-based GC traverses the heap more times than the copying GC, it will incur more swapping when the GC'ed space exceeds the EPC.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="7.2">GC Optimization for Enclaves</head><p>The experiment above indicates three distinct performance regimes for enclaves. Thus, we adopt a three-generation design, where each generation has a target working set size: (1) smaller than the LLC size (8MB), (2) between the LLC size and the EPC size (93.5MB), and (3) larger than the EPC size. The goal of this three-generation design is to minimize cache misses in the young GC and the page faults in the old GC. For the rest of the paper, we refer to these as the new, middle, and old generations. <ref type="figure" target="#fig_10">Figure 8</ref> illustrates our three-generation GC design. The middle generation adopts the same MSC strategy as the old generation. Objects that survive the young generation get a Live Objects Size (MB) 2-Gen Serial GC 3-Gen Serial GC (w/ Middle Gen) <ref type="figure">Figure 9</ref>: Average GC latency (including all generations) on SGX, in regards to the total live object sizes. The comparison is between two-generation and three-generation serial GCs. The heap size is 256 MB, with the young and middle generations at 2 MB and 48 MB, respectively. second chance of being reclaimed in the middle generation, before being promoted to the old generation. Similar to the young GC, the middle GC also walks the references from the known roots, but does not traverse the unclaimed dead objects in the old generation. This keeps the middle GC from accessing objects outside of the EPC boundary and reduces the number of page faults incurred by the GC.</p><p>To keep short-lived objects in the middle generation longer, we set a promotion threshold to decide which objects should be promoted to the old generation. The middle GC only promotes objects when the size of the remaining live objects surpasses a promotion threshold (e.g., 50% of the generation). The promotion threshold is adjustable by users.</p><p>We further reduce memory accesses outside the enclave by leveraging the remember set abstraction in the HotSpot VM. We also noticed that after MSC, the adjust reference phase scans the entire heap to identify and adjust references to a compacted or promoted object, causing significant cache misses and EPC swapping The remember set use a coarsegrain bit map to track the region which contains recently promoted objects to scan for references to younger generations. Our JVM updates the remember set during the marking phase of GC, so that the middle GC only has to scan memory regions that are known to contain references.</p><p>We implement our GC strategy on HotSpot JVM and measure the impact of the middle generation on the average GC time. <ref type="figure">Figure 9</ref> shows the average GC time of two-generation and three-generation GCs. We use a randomized allocation workload and adjust the total size of live objects, which reflects the effective space used by the application. The total heap size is 256 MB and the young generation size is 2 MB. Based on our tuning, the best size of the middle generation is 48 MB and the remaining space is the old generation. The results show that with our GC, the average GC time (including middle and old GCs) is consistently 0.5-1.0 seconds faster than Serial GC (20-89% improvement), at all live object sizes.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="8">Runtime Implementation</head><p>This section describes the implementation of the Civet runtime framework.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="8.1">Civet Runtime Framework</head><p>Given the entry classes, our partitioning tool automatically generates the RPC interfaces for entering and leaving enclaves. The generated interfaces primarily serve two purposes: (1) intercepting invocations to entry classes and seamlessly converting them into RPCs, and (2) marshaling and verifying the input and output objects for the entry classes. To reduce the execution-time TCB and to improve RPC latency, Civet directly generates bytecode for the RPC interface and supporting code inside the enclave.</p><p>For marshaling objects in and out of enclaves, Civet uses the Fast-serialization library <ref type="bibr" target="#b77">[77]</ref>, or fst (v2.50), instead of using the built-in serialization API. fst generates a more compact representation of each object; for instance, at runtime, fst allows Civet to register all the classes needed for marshaling both inside and outside the enclave, so that object types can be represented numerically instead of as strings. Furthermore, we use the off-heap serializer of fst, which reduces the instantiation cost of marshaling buffers and reduces GC during RPCs. The off-heap buffers are allocated per in-enclave worker thread, and are reused throughout the enclave execution.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="8.2">Reducing Framework TCB</head><p>The Civet framework contains several trusted components, shown in <ref type="table" target="#tab_1">Table 2</ref>. Civet includes a modified JVM, based on OpenJDK 8 HotSpot runtime, which has a smaller TCB and fits into the memory limitation of enclaves. This is a preliminary effort-there are additional opportunities to further shrink or partition the JVM: โข Garbage collector: Civet removes most of the garbage collectors, such as G1GC and parallel scavenge GC, and only keeps an optimized serial GC ( ยง7.2).</p><p>โข Compiler: the default option in Civet is ahead-of-time compilation (AOT). AOT is time-consuming (โผ20 minutes to compiling 4,000 classes), but introduces no overhead to the execution. For users who cannot compile the bytecode ahead of time, Civet provides the options of including the C1 (platform-generic) and/or C2 (architecture-specific) compilers in the enclave; or using only the interpreter. The former increases the in-enclave TCB, whereas the latter introduces significant overheads (10-1000ร).</p><p>โข JVM-related classes: A large portion of the JVM functionalities are implemented in Java classes. We can simply use static analysis to include the classes needed by the TCB and shred the others.  libjava. We observe that a portion of the JNI library, especially the system-tier functionality, is perfect for partitioning outside the enclave. For example, FileInputStream contains native methods to read a file. These JNIs are originally shielded by Graphene-SGX, but can be moved outside the enclave to reduce the TCB. In total, Civet removes 49% of the JVM code and 84% of the JNI code from the trusted computing base. To access OS functionality from the enclave, Civet uses Graphene-SGX and GNU libc, which could be further reduced in code size.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="9">Case Studies and Evaluation</head><p>In this section, we evaluate the efficiency of Civet using three use cases, to show the sensitivity of the TCB and performance to the partition boundary chosen by the developers. We select three applications that accept user-provided code in a somewhat modular design. Each of these applications varies in the degree to which the interface for user-provided code matches what should run in the enclave, and thus, the degree of difficulty in partitioning. In the case of Tomcat ( ยง9.2), users provide code at a granularity very close to what should go in the enclave. In the cases of and Hadoop ( ยง9.3) and GraphChi ( ยง9.3), the users provide code, but issues such as batching inputs to the enclave require a more careful decision about partitioning boundaries.</p><p>We also evaluate the cost of static analysis and the breakdowns of performance overheads using microbenchmarks. Unless otherwise noted, we configure Phosphor's tainttracking to only track explicit flows; tracking implicit flows typically adds 10ร, which dwarf other overheads from Civet.</p><p>All experiments are collected on a Supermicro SYS-5019S-M server. The CPU is a 8-core 3.70 GHz Intel Xeon E3-1280 CPU, with microcode patched for Spectre mitigation. Out of 32GB RAM on the machine, 93.5MB is dedicated to enclaves.  <ref type="table">Table 3</ref>: Partitioning results of Civet for Hadoop, partitioned with two boundaries and measured in classes (#C), methods (#M), and lines of code (LoC). For both cases, AESCipher and PCBC are explicitly included for dynamic loading.</p><p>(PTI) enabled. The Civet implementation is based on Open-JDK v1.8.0_71, Phosphor v0.0.4 <ref type="bibr" target="#b24">[24]</ref>, Intel SGX Linux SDK and driver v2.3 <ref type="bibr" target="#b78">[78]</ref>, and Graphene-SGX v0.6 <ref type="bibr" target="#b13">[14]</ref>.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="9.1">Hadoop</head><p>Hadoop <ref type="bibr" target="#b10">[11]</ref> is a widely used framework for distributed computing and big data. We choose the regular expression parser (RegexMapper) as an example, but the usage can be generalized to other Hadoop applications. Running regular expression parsing inside enclaves is beneficial for protecting sensitive data that might be processed in a distributed manner, such as system or network logs.</p><p>Hadoop already has a modular architecture, and is easily partitioned with Civet. Coarse-grained partitioning at the main function is not practical, because Hadoop is multiprocess, illustrated in <ref type="figure" target="#fig_1">Figure 10</ref>. A more natural division point is within a worker (or process): 1</p><p>MapTask.run() as a generic boundary that can include any mapper; 2 RegexMapper.map() as the mapper class itself. Although the former is more generic, the latter can have a smaller TCB. <ref type="figure" target="#fig_1">Figure 11</ref> shows the execution time of searching a regular expression inside a large, encrypted authentication log (1GB), using RegexMapper as the partition boundary. The sample is encrypted, line-by-line with the line number as the nonce for encryption. We pass lines of the log into the enclave one line at-a-time, because there is no natural division point in the code that implements batching. In future work, one could optimize this code by batching the inputs to the mapper.  However, this has little impact on execution time because our design does not synchronously context switch between enclave and non-enclave execution; rather, Civet follows an exitless pattern. There is a cost of additional CPU cycles (off the critical path) to this design, which batching could reduce.</p><p>Hadoop determines the number of mappers and reducers for a given workload based on how many "splits" the data is divided into inside HDFS. We experiment with split sizes ranging from 256MB to 4MB. We observe that, as the number of splits increases well beyond the number of actual cores, the overhead of scheduling degrades performance more than any SGX-specific factor. Civet adds only 16-22% to the end-to-end latency when running with SGX and deep input type checks but without taint-tracking. The overhead of type checks is marginal because of the integration with the class instantiation of Fast-serialization. If taint-tracking is enabled with only explicit flow tracking, the overhead is 70-80%. Furthermore, running a Hadoop task partitioned with Civet is generally as scalable as native.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="9.2">Tomcat</head><p>Tomcat <ref type="bibr" target="#b63">[63]</ref> is a web server for hosting Java servlets in a multi-tenant environment. A servlet is usually written to parse HTTP requests, and can be a building block for microservices. We partition an "echo" servlet into an enclave, which signs the HTTP requests from the users using RSA and returns a certificate in the response. This is another good fit for Civet, because the servlet needs to access a secret key to sign the certificate. Thus, tenants do not need to expose their secret keys to the web server or other servlets. <ref type="table" target="#tab_5">Table 4</ref> shows the partitioning efficiency for Tomcat. <ref type="figure" target="#fig_1">Figure 12</ref> shows the average latency to sign requests in a servlet, as a function of the number of concurrent requests. In the Tomcat use case, we observe that the overhead of introducing an enclave in Civet is nearly negligible. The overheads are not SGX-specific, and can be improved by selecting a more scalable configuration for Tomcat.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="9.3">GhaphChi</head><p>We use GraphChi <ref type="bibr">[79]</ref> as more challenging case to partition. We use the page rank program in GraphChi as a running example. GraphChi is an in-memory framework for processing large graphs, by sharding vertex and edge data of a graph. The framework includes extensible interfaces for plugging graph algorithms. The core engine, GraphChiEngine, is tuned for parallel computing with multiple threads that reuse the graph data cached in the DRAM. We demonstrate the sensitivity to the effectiveness of partitioning using three case studies shown in <ref type="figure" target="#fig_1">Figure 13</ref> and evaluated in <ref type="table" target="#tab_7">Table 5</ref>.</p><p>The simplest, most coarse-grained choice ( 1 ) is partitioning at the main function, Pagerank.main. This choice will result in a relatively large TCB and the entire program will run inside the enclave throughout the execution. Although this choice does not provide any benefit of partitioning, Civet can still help identify the required classes and methods, and shrink the class libraries.</p><p>A finer-grained choice ( 2 ) is to partition at each graph operation, e.g, Pagerank.update(). This method updates the global GraphChiContext with the pagerank contribution of each vertex. This approach will only process one vertex per enclave transition, and is arguably too fine-grained. Worse yet, the input to Pagerank.update() is a ChiVertex object, which only contains a pointer to the data blocks; this will require copying the entire data blocks into the enclave for the pointer to be valid. Although this choice is fine-grained in terms of the TCB, the enclave memory footprint is just  as large as does not reduce the memory footprint compared to coarser-grained choices. Note that with only class-level shredding, the TCB is the same as 1 because the same set of classes are referenced from the entry classes. With methodlevel shredding, Civet further reduces โผ30K LoC in 2 . A third option ( 3 ) is to partition at the granularity of a batch of work, with enough inputs to amortize the enclave transition cost. In the case of GraphChi, chunks of graph data are submitted as Runnables to the workers. These Runnables are defined as inner classes called GraphChiEngine$2 and GraphChiEngine$3. As shown in <ref type="table" target="#tab_7">Table 5</ref>, partitioning at these classes seemingly generates the same TCB as partitioning at Pagerank.update, but performs strictly better at run-time. <ref type="figure" target="#fig_1">Figure 14</ref> shows the execution time processing the page  ranks of the LiveJournal social network <ref type="bibr">[80]</ref>. The data set is โผ1.1GB, with 4 million vertices and 69 million edges. Our example shields the partition by encrypting the intermediate graph states (e.g., in and out edges) cached in ChiVertex objects. The graph itself is loaded through the file system and can be shielded by the library OS.</p><p>We partition the page rank program with the two finergrained options. We observe that the GraphChi program caches the vertex data and edge data inside the DRAM, using 32768 raw blocks. GraphChi also assigns a memory budget for each job, which decides the range of vertex data to be processed. We reduce the configuration to using 1024 raw blocks and 16MB budget per job, to reduce the memory footprint and RPC overhead. When partitioned with Pagerank.update, the overhead can be up to 8.2-12.8ร compared to native. Partitioning at GraphChiEngine$2/$3 lowers the overhead to 1.6-2.5ร, due to fewer enclave RPCs.</p><p>Performance is generally insensitive to the number of shards, except at very high numbers. Although fewer shards implies fewer RPCs, any savings here are offset by the cost of marshalling a larger data set. Thus, execution time is relatively flat until 64 shards, at which point the cost of additional RPCs dominates and drives up execution time.  <ref type="table">Table 7</ref>: Execution time (in microseconds) of each method and the breakdown of latency in Civet. <ref type="table" target="#tab_9">Table 6</ref> reports the DRAM cost and the processing time for partitioning a Java application. We implement the Civet partitioning tool with Soot 3.3.0 and Apache Byte Code Engineering Library (BCEL) 6.2. Partitioning millions lines of Java code takes up to โผ1 minute and 4.5GB of DRAM in our examples. A significant portion of the partitioning time is spent on whole-program points-to analysis. Our Spark configuration includes both application and library classes, and uses on-the-fly call graph analysis and a worklist-based propagation algorithm. <ref type="table">Table 7</ref> shows the execution time of several microbenchmarks: AES, RSA, and FFT, each of which demonstrate a different performance pattern for partitioned enclave execution. For each of the workloads, we break down the overheads into the computation inside an enclave, and the latency of moving inputs and outputs across the enclave boundary. We note that Native does not incur the cost of moving inputs and outputs.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="9.4">Static Analysis</head></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="9.5">Microbenchmarks</head><p>RSA has the lowest overhead among the three, as the workload is the most computation-intensive. For AES, the inputs and outputs are also small, yet the computation itself suffers up to 11.4ร overhead. The difference is that execution outside the enclave can make better use of the AES-NI instructions. FFT demonstrates a relatively data-intensive pattern, and the overhead of transitioning the inputs and outputs is 4.5ร in total. Phosphor incurs overhead because of the additional instrumentation and runtime tracing. It performs worst in the AES benchmark (27.7ร and 67.8ร, without and with implicit flow tracking, respectively), which is the least compute-intensive among the three, showing that the overhead of taint-tracking (with Phosphor) dominates the running time. In contrast, the taint-tracking incurs lower overheads in the more compute-intensive RSA and FFT benchmarks.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="9.6">Discussion</head><p>The three case studies show the challenges to creating a secure and efficient partition: one must consider not just points to divide the code, but also the data flow and the optimal granularity for moving data in and out of an enclave. Our results show that Civet is very effective at reducing the code footprint for an enclave partition-removing 75% of the code even in the coarsest partition.</p><p>In general, Civet introduces an acceptable overhead, endto-end, for applications. That said, our microbenchmarks indicate up to an 15.5.ร overhead on a short computation (AES); thus, optimization such as batching inputs are important to overall performance. Finally, adding dynamic tracking of implicit flows effected by the control flow is considerably more expensive than the rest of Civet. We leave exploration of more efficient implicit flow tracking for future work.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="10">Conclusion</head><p>This paper presents an enclave-aware JVM variant and a framework for partitioning a large application onto enclaves. Civet leverages language features to help developers reason about the code that is and is not in the enclave. Simply dropping a managed language runtime in SGX incurs an order-ofmagnitude slowdown. Civet also minimizes the code footprint in the enclave, as well as adapting the garbage collector to the hardware peculiarities of SGX.</p></div><figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_1"><head>Figure 1 :</head><label>1</label><figDesc>Figure 1: A comparison between the non-partitioned model and Civet's partitioned model.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_2"><head></head><label></label><figDesc>Civet runs only the sensitive code, e.g., map/reduce, in an en- clave without trusting the rest of the Hadoop framework.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_3"><head>Figure 2 :</head><label>2</label><figDesc>Figure 2: Partitioning model of Civet. The entry classes define a trusted domain inside an application, with all the trusted classes collect into a JAR file.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_4"><head>Figure 4 :</head><label>4</label><figDesc>Figure 3: The configuration (in XML) and shielding class for partitioning a hadoop mapper (RegexMapper).</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_5"><head>Algorithm 1 :</head><label>1</label><figDesc>Static analysis for identifying trusted code /* Extending the entry classes with input types */ Data: A set of entry classes E and included classes I 1 while E is different from the last iteration do 2 for c โ E do 3 for m โ public methods of c do 4 for o โ non-primitive arguments of m do 5 E โ E โช classes(points-to(o)) /* Collecting required classes for the enclave */ 6 Classes โ E โช I; CG โ / 0; 7 while Classes is different from the last iteration do 8 for c โ Classes do 9 for m โ methods of c do 10 for o. f โ field accesses in m do 11 if o is a class then OC โ {o} 12 else OC โ classes(points-to(o)) 13 FC โ classes(points-to( f )) 14 Classes โ Classes โช OC โช FC 15 for o.m โ method calls in m do 16 if o is a class then OC โ {o} 17 else OC โ classes(points-to(o)) 18 Classes โ Classes โช OC 19 CG โ CG โช {(c, m, c , m )|c โ OC} /* Shredding unreachable methods */ 20 Methods โ {(c, m)|c โ E โช I,mโ public methods of c} 21 while Methods is different from the last iteration do 22 for (c, m) โ Methods do 23 for (c, m, c , m ) โ CG do 24 Methods โ Methods โช (c , m ) 25 return (Classes, Methods)</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_6"><head></head><label></label><figDesc>class HttpResponder extends HttpServlet { public void doPost(HttpServletRequest req, HttpServletResponse resp) { InputStream inputStream = req.getStream(); byte[] body = new byte[inputStream.available()]; inputStream.read(body); // Read POST body resp.getWriter().write(body); }} class Request extends HttpServletRequest { InputStream inputStream // This line is changed = new CoyoteInputStream(new InputBuffer()); public InputStream getStream() { return inputStream; } } Enclave HttpResponder Request FileInputStream getStream() read(buf) JNI Method to read in-enclave FD Tomcat server (untrusted) RPC doPost(req, resp) Request doPost(req, resp) Input CoyoteInputStream FileInputStream Replaced by Attacker RPC Method call Member</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_7"><head>Figure 5 :</head><label>5</label><figDesc>Figure 5: An example in which a servlet (HttpResponder) is partitioned into an enclave. An attacker can exploit the polymorphic input of HttpResonder to force the class to read from a shielded in-enclave file descriptor.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_8"><head>Figure 6 :Figure 7 :</head><label>67</label><figDesc>Figure 6: Two garbage collection approaches used in Serial GC. A Copying approach evacuates living objects to a reserved space, whereas a Mark-Sweep-Compact (MSC) approach separates the phases of discovering live objects from heap compaction.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_10"><head>Figure 8 :</head><label>8</label><figDesc>Figure 8: Civet proposes a GC strategy, with a middle generation as a middle ground before promoting object to old generation. The middle GC follows a partial promotion strategy, with an adjustable threshold.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_11"><head>Figure 12 :</head><label>12</label><figDesc>Figure 12: Average HTTP response time of a request-signing Tomcat servlet partitioned and executed by Civet, with SGX and shielded by type checks (TC), compared to native. Lower is better. The HTTP requests are issued by ab (ApacheBench), with HTTP request concurrency up to 64.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_1" validated="false"><head>Table 2 does</head><label>2</label><figDesc></figDesc><table>not include these classes. 
</table></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_2" validated="false"><head>Table 2 :</head><label>2</label><figDesc></figDesc><table>The complexity of the whole Civet framework and 
the run-time TCB measured in LoC (lines of code), including 
both modified and unmodified components. 

</table></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_5" validated="false"><head>Table 4 :</head><label>4</label><figDesc></figDesc><table>Partitioning results for Tomcat, measured in classes 
(#C), methods (#M), and lines of code (LoC). RSACipher 
and RSAKeyPairGenerator are expliclity included for dy-
namic loading. 

</table></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_7" validated="false"><head>Table 5 :</head><label>5</label><figDesc></figDesc><table>Partitioning results for GraphChi Pagerank, parti-
tioned with three boundaries and measured in classes (#C), 
methods (#M), and lines of code (LoC). For all three cases, 
AESCipher is explicitly included for dynamic loading. 

</table></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_9" validated="false"><head>Table 6 :</head><label>6</label><figDesc></figDesc><table>DRAM cost and processing time (for points-to anal-
ysis, shredding, Phosphor instrumentation, packaging, and 
class signing) of Civet's partition tool. Lower is better. 

</table></figure>

			<note place="foot" n="516"> 29th USENIX Security Symposium USENIX Association</note>
		</body>
		<back>

			<div type="acknowledgement">
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Acknowledgments</head><p>We thank the anonymous reviewers, Mike Bond, and our shepherd, Tuba Yavuz, for insightful comments on earlier versions of this work. This work was supported in part by NSF grants CNS-1228839, CNS-1405641, CNS-1700512, NSF CISE Expeditions Award CCF-1730628, as well as gifts from the Sloan Foundation, Alibaba, Amazon Web Services, Ant Financial, Arm, Capital One, Ericsson, Facebook, Google, Intel, Microsoft, Scotiabank, Splunk and VMware. Bhushan Jain was supported in part by an IBM Ph.D. Fellowship. Part of this work was done while Tsai, Jain, and Porter were at Stony Brook University, and while Tsai was at UC Berkeley. McAvey's current affiliation is with Apple; his contributions were primarily made while a student at Hendrix college. We thank Bozhen Liu for the help with the Soot framework.</p></div>
			</div>

			<div type="references">

				<listBibl>

<biblStruct xml:id="b0">
	<analytic>
		<title level="a" type="main">Innovative instructions and software model for isolated execution</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Frank</forename><surname>Mckeen</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Ilya</forename><surname>Alexandrovich</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Alex</forename><surname>Berenzon</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Carlos</forename><forename type="middle">V</forename><surname>Rozas</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Hisham</forename><surname>Shafi</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Vedvyas</forename><surname>Shanbhogue</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Uday</forename><forename type="middle">R</forename><surname>Savagaonkar</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">HASP</title>
		<imprint>
			<date type="published" when="2013" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b1">
	<monogr>
		<title level="m" type="main">AMD secure encrypted virtualization</title>
		<ptr target="https://developer.amd.com/amd-secure-memory-encryption-sme-amd-secure-encrypted-virtualization-sev/" />
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b2">
	<analytic>
		<title level="a" type="main">Implementing an untrusted operating system on trusted hardware</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">David</forename><surname>Lie</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Chandramohan</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Mark</forename><surname>Thekkath</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Horowitz</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">ACM SIGOPS Operating Systems Review</title>
		<imprint>
			<date type="published" when="2003" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b3">
	<analytic>
		<title level="a" type="main">Sanctum: Minimal hardware extensions for strong software isolation</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Ilia</forename><surname>Victor Costan</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Srinivas</forename><surname>Lebedev</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Devadas</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">USENIX Security</title>
		<imprint>
			<date type="published" when="2016" />
			<biblScope unit="volume">16</biblScope>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b4">
	<analytic>
		<title level="a" type="main">VC3: Trustworthy data analytics in the cloud using SGX</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Felix</forename><surname>Schuster</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Manuel</forename><surname>Costa</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Cรฉdric</forename><surname>Fournet</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Christos</forename><surname>Gkantsidis</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Marcus</forename><surname>Peinado</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Gloria</forename><surname>Mainar-Ruiz</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Mark</forename><surname>Russinovich</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">IEEE S&amp;P</title>
		<imprint>
			<date type="published" when="2015" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b5">
	<analytic>
		<title level="a" type="main">Opaque: An oblivious and encrypted distributed analytics platform</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Wenting</forename><surname>Zheng</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Ankur</forename><surname>Dave</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Jethro</forename><forename type="middle">G</forename><surname>Beekman</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Raluca</forename><forename type="middle">Ada</forename><surname>Popa</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Joseph</forename><forename type="middle">E</forename><surname>Gonzalez</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Ion</forename><surname>Stoica</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">NSDI</title>
		<imprint>
			<date type="published" when="2017" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b6">
	<analytic>
		<title level="a" type="main">SecureKeeper: Confidential ZooKeeper using Intel SGX</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Stefan</forename><surname>Brenner</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Colin</forename><surname>Wulf</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">David</forename><surname>Goltzsche</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Nico</forename><surname>Weichbrodt</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Matthias</forename><surname>Lorenz</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Christof</forename><surname>Fetzer</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Peter</forename><surname>Pietzuch</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Rรผdiger</forename><surname>Kapitza</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 17th International Middleware Conference</title>
		<meeting>the 17th International Middleware Conference</meeting>
		<imprint>
			<date type="published" when="2016" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b7">
	<analytic>
		<title level="a" type="main">TrustJS: Trusted client-side execution of JavaScript</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">David</forename><surname>Goltzsche</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Colin</forename><surname>Wulf</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Divya</forename><surname>Muthukumaran</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Konrad</forename><surname>Rieck</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Peter</forename><surname>Pietzuch</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Rรผdiger</forename><surname>Kapitza</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 10th European Workshop on Systems Security</title>
		<meeting>the 10th European Workshop on Systems Security</meeting>
		<imprint>
			<date type="published" when="2017" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b8">
	<monogr>
		<title level="m" type="main">Introducing Azure confidential computing</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Mark</forename><surname>Russinovich</surname></persName>
		</author>
		<ptr target="https://azure.microsoft.com/en-us/blog/introducing-azure-confidential-computing/" />
		<imprint>
			<date type="published" when="2017-09" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b9">
	<monogr>
		<title level="m" type="main">Data-in-use protection on IBM Cloud -IBM, Intel, and Fortanix partner to keep enterprises secure to the core</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Pratheek</forename><surname>Karnati</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Karna</forename><surname>Bojjireddy</surname></persName>
		</author>
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b10">
	<monogr>
		<title/>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Apache</forename><surname>Hadoop</surname></persName>
		</author>
		<ptr target="http://hadoop.apache.org/" />
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b11">
	<analytic>
		<title level="a" type="main">Shielding applications from an untrusted cloud with Haven</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Andrew</forename><surname>Baumann</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Marcus</forename><surname>Peinado</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Galen</forename><surname>Hunt</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">OSDI</title>
		<imprint>
			<date type="published" when="2014" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b12">
	<analytic>
		<title level="a" type="main">SCONE: Secure Linux containers with Intel SGX</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Sergei</forename><surname>Arnautov</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Bohdan</forename><surname>Trach</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Franz</forename><surname>Gregor</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Thomas</forename><surname>Knauth</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Andre</forename><surname>Martin</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Christian</forename><surname>Priebe</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Joshua</forename><surname>Lind</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Divya</forename><surname>Muthukumaran</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Mark</forename><forename type="middle">L</forename><surname>Daniel O&amp;apos;keeffe</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">David</forename><surname>Stillwell</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Dave</forename><surname>Goltzsche</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Rรผdiger</forename><surname>Eyers</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Peter</forename><surname>Kapitza</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Christof</forename><surname>Pietzuch</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Fetzer</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">OSDI</title>
		<imprint>
			<date type="published" when="2016" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b13">
	<monogr>
		<title/>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">O</forename><forename type="middle">S</forename><surname>Graphene Library</surname></persName>
		</author>
		<ptr target="http://github.com/oscarlab/graphene" />
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b14">
	<monogr>
		<title/>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Sgx-Lkl</forename></persName>
		</author>
		<ptr target="https://github.com/lsds/sgx-lkl" />
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b15">
	<monogr>
		<title/>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Chia-Che</forename><surname>Tsai</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Donald</forename><forename type="middle">E</forename><surname>Porter</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Mona</forename><surname>Vij</surname></persName>
		</author>
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b16">
	<analytic>
		<title level="a" type="main">A practical library os for unmodified applications on SGX</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">-</forename><surname>Graphene</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Sgx</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">USENIX ATC</title>
		<imprint>
			<date type="published" when="2017" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b17">
	<analytic>
		<title level="a" type="main">Using arm trustzone to build a trusted language runtime for mobile applications</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Nuno</forename><surname>Santos</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Himanshu</forename><surname>Raj</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Stefan</forename><surname>Saroiu</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Alec</forename><surname>Wolman</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">ASPLOS</title>
		<imprint>
			<date type="published" when="2014" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b18">
	<analytic>
		<title level="a" type="main">Glamdring: Automatic application partitioning for Intel SGX</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Joshua</forename><surname>Lind</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Christian</forename><surname>Priebe</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Divya</forename><surname>Muthukumaran</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Pierre-Louis</forename><surname>Dan O&amp;apos;keeffe</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Florian</forename><surname>Aublin</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Tobias</forename><surname>Kelbert</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">David</forename><surname>Reiher</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">David</forename><surname>Goltzsche</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Rudiger</forename><surname>Eyers</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Christof</forename><surname>Kapitza</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Peter</forename><surname>Fetzer</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Pietzuch</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">USENIX ATC</title>
		<imprint>
			<date type="published" when="2017" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b19">
	<analytic>
		<title level="a" type="main">Thwarting memory disclosure with efficient hypervisor-enforced intra-domain isolation</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Yutao</forename><surname>Liu</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Tianyu</forename><surname>Zhou</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Kexin</forename><surname>Chen</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Haibo</forename><surname>Chen</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Yubin</forename><surname>Xia</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">CCS</title>
		<imprint>
			<date type="published" when="2015" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b20">
	<monogr>
		<title/>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Arm</forename><surname>Trustzone</surname></persName>
		</author>
		<ptr target="http://www.arm.com/products/processors/technologies/trustzone/" />
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b21">
	<analytic>
		<title level="a" type="main">Iago attacks: Why the system call API is a bad untrusted RPC interface</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Stephen</forename><surname>Checkoway</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Hovav</forename><surname>Shacham</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">ASPLOS</title>
		<imprint>
			<date type="published" when="2013" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b22">
	<monogr>
				<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Cwe-843</forename></persName>
		</author>
		<ptr target="https://cwe.mitre.org/data/definitions/843.html" />
		<title level="m">Access of resource using incompatible type</title>
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b23">
	<analytic>
		<title level="a" type="main">An empirical security study of the native code in the JDK</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Gang</forename><surname>Tan</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Jason</forename><surname>Croft</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">USENIX Security</title>
		<imprint>
			<date type="published" when="2008" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b24">
	<monogr>
		<title level="m" type="main">Phosphor: Dynamic taint tracking for the JVM</title>
		<ptr target="https://github.com/Programming-Systems-Lab/phosphor" />
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b25">
	<analytic>
		<title level="a" type="main">Eleos: Exitless OS services for SGX enclaves</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Meni</forename><surname>Orenbach</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Pavel</forename><surname>Lifshits</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Marina</forename><surname>Minkin</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Mark</forename><surname>Silberstein</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">EuroSys</title>
		<imprint>
			<date type="published" when="2017" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b26">
	<analytic>
		<title level="a" type="main">PANOPLY: Low-TCB Linux Applications With SGX Enclaves</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Shweta</forename><surname>Shinde</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Shruti</forename><surname>Dat Le Tien</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Prateek</forename><surname>Tople</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Saxena</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">NDSS</title>
		<imprint>
			<date type="published" when="2017" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b27">
	<monogr>
		<title level="m" type="main">Software Guard Extenstions (SGX) SDK for Linux</title>
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b28">
	<monogr>
		<title/>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Sgx</forename><surname>Rust</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Sdk</surname></persName>
		</author>
		<ptr target="https://github.com/baidu/rust-sgx-sdk" />
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b29">
	<monogr>
		<title level="m" type="main">Automated partitioning of Android applications for trusted execution environments</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Konstantin</forename><surname>Rubinov</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Lucia</forename><surname>Rosculete</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Tulika</forename><surname>Mitra</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Abhik</forename><surname>Roychoudhury</surname></persName>
		</author>
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b30">
	<monogr>
				<title level="m">IEEE/ACM 38th International Conference on Software Engineering (ICSE)</title>
		<imprint>
			<date type="published" when="2016" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b31">
	<analytic>
		<title level="a" type="main">Secured routines: Language-based construction of trusted execution environments</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Adrien</forename><surname>Ghosn</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">James</forename><forename type="middle">R</forename><surname>Larus</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Edouard</forename><surname>Bugnion</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">USENIX ATC</title>
		<imprint>
			<date type="published" when="2019" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b32">
	<analytic>
		<title level="a" type="main">Secure cloud micro services using Intel SGX</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Stefan</forename><surname>Brenner</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Tobias</forename><surname>Hundt</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Giovanni</forename><surname>Mazzeo</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Rรผdiger</forename><surname>Kapitza</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">IFIP International Conference on Distributed Applications and Interoperable Systems</title>
		<imprint>
			<date type="published" when="2017" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b33">
	<monogr>
				<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Marcela</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Melara</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Michael</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Mic</forename><surname>Freedman</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Bowman</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Enclavedom</surname></persName>
		</author>
		<idno type="arXiv">arXiv:1907.13245</idno>
		<title level="m">Privilege separation for large-TCB applications in trusted execution environments</title>
		<imprint>
			<date type="published" when="2019" />
		</imprint>
	</monogr>
<note type="report_type">arXiv preprint</note>
</biblStruct>

<biblStruct xml:id="b34">
	<analytic>
		<title level="a" type="main">A bytecode translator for distributed execution of &quot;legacy&quot; Java software</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Michiaki</forename><surname>Tatsubori</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Toshiyuki</forename><surname>Sasaki</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Shigeru</forename><surname>Chiba</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Kozo</forename><surname>Itano</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 15th European Conference on Object-Oriented Programming</title>
		<meeting>the 15th European Conference on Object-Oriented Programming</meeting>
		<imprint>
			<date type="published" when="2001" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b35">
	<analytic>
		<title level="a" type="main">Automatic Java application partitioning</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Eli</forename><surname>Tilevich</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Yannis</forename><surname>Smaragdakis</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>J-Orchestra</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 16th European Conference on Object-Oriented Programming</title>
		<meeting>the 16th European Conference on Object-Oriented Programming</meeting>
		<imprint>
			<date type="published" when="2002" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b36">
	<analytic>
		<title level="a" type="main">Untrusted hosts and confidentiality: Secure program partitioning</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Steve</forename><surname>Zdancewic</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Lantian</forename><surname>Zheng</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Nathaniel</forename><surname>Nystrom</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Andrew</forename><forename type="middle">C</forename><surname>Myers</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">SOSP</title>
		<imprint>
			<date type="published" when="2001" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b37">
	<analytic>
		<title level="a" type="main">Secure web applications via automatic partitioning</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Stephen</forename><surname>Chong</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Jed</forename><surname>Liu</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Andrew</forename><forename type="middle">C</forename><surname>Myers</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Xin</forename><surname>Qi</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">K</forename><surname>Vikram</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Lantian</forename><surname>Zheng</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Xin</forename><surname>Zheng</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">SOSP</title>
		<imprint>
			<date type="published" when="2007" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b38">
	<monogr>
		<title level="m" type="main">Robust composition: Towards a unified approach to access control and concurrency control</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Miller</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2006" />
			<publisher>Johns Hopkins</publisher>
			<biblScope unit="page">302</biblScope>
			<pubPlace>Baltimore, MD</pubPlace>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b39">
	<analytic>
		<title level="a" type="main">Joe-E: A security-oriented subset of java</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Adrian</forename><surname>Mettler</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">David</forename><forename type="middle">A</forename><surname>Wagner</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Tyler</forename><surname>Close</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">NDSS</title>
		<imprint>
			<date type="published" when="2010" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b40">
	<analytic>
		<title level="a" type="main">The oz-e project: Design guidelines for a secure multiparadigm programming language</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Fred</forename><surname>Spiessens</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Peter</forename><surname>Van Roy</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">International Conference on Multiparadigm Programming in</title>
		<meeting><address><addrLine>Mozart/OZ</addrLine></address></meeting>
		<imprint>
			<date type="published" when="2004" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b41">
	<monogr>
		<title level="m" type="main">How emily tamed the caml</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Marc</forename><surname>Stiegler</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Mark</forename><surname>Miller</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2006" />
		</imprint>
	</monogr>
<note type="report_type">Hewlett Packard Labs Tech Report</note>
</biblStruct>

<biblStruct xml:id="b42">
	<analytic>
		<title level="a" type="main">Ariadne: A minimal approach to state continuity</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Raoul</forename><surname>Strackx</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Frank</forename><surname>Piessens</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">USENIX Security</title>
		<imprint>
			<date type="published" when="2016" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b43">
	<analytic>
		<title level="a" type="main">Controlled-channel attacks: Deterministic side channels for untrusted operating systems</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Yuanzhong</forename><surname>Xu</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Weidong</forename><surname>Cui</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Marcus</forename><surname>Peinado</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">IEEE S&amp;P</title>
		<imprint>
			<date type="published" when="2015" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b44">
	<analytic>
		<title level="a" type="main">Telling your secrets without page faults: Stealthy page table-based attacks on enclaved execution</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Jo</forename><surname>Van Bulck</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Nico</forename><surname>Weichbrodt</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Rรผdiger</forename><surname>Kapitza</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Frank</forename><surname>Piessens</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Raoul</forename><surname>Strackx</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">USENIX Security</title>
		<imprint>
			<date type="published" when="2017" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b45">
	<analytic>
		<title level="a" type="main">Software Grand Exposure: SGX cache attacks are practical</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Ferdinand</forename><surname>Brasser</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Urs</forename><surname>Mรผller</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Alexandra</forename><surname>Dmitrienko</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Kari</forename><surname>Kostiainen</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Srdjan</forename><surname>Capkun</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Ahmad-Reza</forename><surname>Sadeghi</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">11th USENIX Workshop on Offensive Technologies</title>
		<imprint>
			<date type="published" when="2017" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b46">
	<analytic>
		<title level="a" type="main">High-resolution side channels for untrusted operating systems</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Marcus</forename><surname>Hรคhnel</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Weidong</forename><surname>Cui</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Marcus</forename><surname>Peinado</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">USENIX ATC</title>
		<imprint>
			<date type="published" when="2017" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b47">
	<analytic>
		<title level="a" type="main">Inferring finegrained control flow inside SGX enclaves with branch shadowing</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Sangho</forename><surname>Lee</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Ming-Wei</forename><surname>Shih</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Prasun</forename><surname>Gera</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Taesoo</forename><surname>Kim</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Hyesoon</forename><surname>Kim</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Marcus</forename><surname>Peinado</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">USENIX Security</title>
		<imprint>
			<date type="published" when="2017" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b48">
	<analytic>
		<title level="a" type="main">Leaky cauldron on the dark land: Understanding memory side-channel hazards in SGX</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Wenhao</forename><surname>Wang</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Guoxing</forename><surname>Chen</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Xiaorui</forename><surname>Pan</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Yinqian</forename><surname>Zhang</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Xiaofeng</forename><surname>Wang</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Vincent</forename><surname>Bindschaedler</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Haixu</forename><surname>Tang</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Carl</forename><forename type="middle">A</forename><surname>Gunter</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">CCS</title>
		<imprint>
			<date type="published" when="2017" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b49">
	<analytic>
		<title level="a" type="main">Spectre attacks: Exploiting speculative execution</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Paul</forename><surname>Kocher</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Daniel</forename><surname>Genkin</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Daniel</forename><surname>Gruss</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Werner</forename><surname>Haas</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Mike</forename><surname>Hamburg</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Moritz</forename><surname>Lipp</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Stefan</forename><surname>Mangard</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Thomas</forename><surname>Prescher</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Michael</forename><surname>Schwarz</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Yuval</forename><surname>Yarom</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">IEEE S&amp;P</title>
		<imprint>
			<date type="published" when="2018" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b50">
	<analytic>
		<title level="a" type="main">CacheZoom: How SGX amplifies the power of cache attacks</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Ahmad</forename><surname>Moghimi</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Gorka</forename><surname>Irazoqui</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Thomas</forename><surname>Eisenbarth</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">CHES</title>
		<imprint>
			<date type="published" when="2017" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b51">
	<analytic>
		<title level="a" type="main">Cache attacks on Intel SGX</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Johannes</forename><surname>Gรถtzfried</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Moritz</forename><surname>Eckert</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Sebastian</forename><surname>Schinzel</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Tilo</forename><surname>Mรผller</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Euro S&amp;P</title>
		<imprint>
			<date type="published" when="2017" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b52">
	<analytic>
		<title level="a" type="main">DroidRA: Taming reflection to support whole-program analysis of android apps</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Li</forename><surname>Li</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">F</forename><surname>Tegawendรฉ</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Damien</forename><surname>Bissyandรฉ</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Jacques</forename><surname>Octeau</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Klein</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 25th International Symposium on Software Testing and Analysis</title>
		<meeting>the 25th International Symposium on Software Testing and Analysis</meeting>
		<imprint>
			<date type="published" when="2016" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b53">
	<analytic>
		<title level="a" type="main">Taming reflection: Aiding static analysis in the presence of reflection and custom class loaders</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Eric</forename><surname>Bodden</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Andreas</forename><surname>Sewe</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Jan</forename><surname>Sinschek</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Hela</forename><surname>Oueslati</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Mira</forename><surname>Mezini</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 33rd International Conference on Software Engineering</title>
		<meeting>the 33rd International Conference on Software Engineering</meeting>
		<imprint>
			<date type="published" when="2011" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b54">
	<analytic>
		<title level="a" type="main">Static analysis of implicit control flow: Resolving java reflection and android intents</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Paulo</forename><surname>Barros</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Rene</forename><surname>Just</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Suzanne</forename><surname>Millstein</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Paul</forename><surname>Vines</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Werner</forename><surname>Dietl</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Marcelo</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Michael</forename><forename type="middle">D</forename><surname>Ernst</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 2015 30th IEEE/ACM International Conference on Automated Software Engineering (ASE)</title>
		<meeting>the 2015 30th IEEE/ACM International Conference on Automated Software Engineering (ASE)</meeting>
		<imprint>
			<date type="published" when="2015" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b55">
	<analytic>
		<title level="a" type="main">Constructing the call graph of a program</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">B</forename><forename type="middle">G</forename><surname>Ryder</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE Transaction of Software Engineering</title>
		<imprint>
			<date type="published" when="1979-05" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b56">
	<analytic>
		<title level="a" type="main">Program slicing</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Mark</forename><surname>Weiser</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the International Conference on Software Engineering (ICSE)</title>
		<meeting>the International Conference on Software Engineering (ICSE)</meeting>
		<imprint>
			<date type="published" when="1981" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b57">
	<monogr>
		<title level="m" type="main">Program Analysis and Specialization for the C Programming Language</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Lars</forename><forename type="middle">Ole</forename><surname>Andersen</surname></persName>
		</author>
		<imprint>
			<date type="published" when="1994" />
		</imprint>
		<respStmt>
			<orgName>Johns Hopkins University</orgName>
		</respStmt>
	</monogr>
<note type="report_type">PhD thesis</note>
</biblStruct>

<biblStruct xml:id="b58">
	<analytic>
		<title level="a" type="main">Points-to analysis in almost linear time</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Bjarne</forename><surname>Steensgaard</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 23rd ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages</title>
		<meeting>the 23rd ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages</meeting>
		<imprint>
			<date type="published" when="1996" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b59">
	<analytic>
		<title level="a" type="main">Unification-based pointer analysis with directional assignments</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Manuvir</forename><surname>Das</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">PLDI</title>
		<imprint>
			<date type="published" when="2000" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b60">
	<analytic>
		<title level="a" type="main">Soot -a Java bytecode optimization framework</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Raja</forename><surname>Vallรฉe-Rai</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Phong</forename><surname>Co</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Etienne</forename><surname>Gagnon</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Laurie</forename><surname>Hendren</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Patrick</forename><surname>Lam</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Vijay</forename><surname>Sundaresan</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the Conference of the Centre for Advanced Studies on Collaborative Research</title>
		<meeting>the Conference of the Centre for Advanced Studies on Collaborative Research</meeting>
		<imprint>
			<date type="published" when="1999" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b61">
	<analytic>
		<title level="a" type="main">Scaling Java pointsto analysis using SPARK</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Ondลej</forename><surname>Lhotรกk</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Laurie</forename><surname>Hendren</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 12th International Conference on Compiler Construction</title>
		<meeting>the 12th International Conference on Compiler Construction</meeting>
		<imprint>
			<date type="published" when="2003" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b62">
	<analytic>
		<title level="a" type="main">Partial dead code elimination</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Jens</forename><surname>Knoop</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Oliver</forename><surname>Rรผthing</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Bernhard</forename><surname>Steffen</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">PLDI</title>
		<imprint>
			<date type="published" when="1994" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b63">
	<monogr>
		<title/>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Apache</forename><surname>Tomcat</surname></persName>
		</author>
		<ptr target="http://tomcat.apache.org/" />
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b64">
	<monogr>
		<title/>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Apparmor</surname></persName>
		</author>
		<ptr target="http://wiki.apparmor.net/" />
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b65">
	<analytic>
		<title level="a" type="main">Differential privacy</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Cynthia</forename><surname>Dwork</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 33rd international conference on Automata, Languages and Programming-Volume Part II</title>
		<meeting>the 33rd international conference on Automata, Languages and Programming-Volume Part II</meeting>
		<imprint>
			<publisher>SpringerVerlag</publisher>
			<date type="published" when="2006" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b66">
	<analytic>
		<title level="a" type="main">All you ever wanted to know about dynamic taint analysis and forward symbolic execution (but might have been afraid to ask)</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Edward</forename><forename type="middle">J</forename><surname>Schwartz</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Thanassis</forename><surname>Avgerinos</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">David</forename><surname>Brumley</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">IEEE S&amp;P</title>
		<imprint>
			<date type="published" when="2010" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b67">
	<analytic>
		<title level="a" type="main">Dynamic taint propagation for Java</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Vivek</forename><surname>Haldar</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Deepak</forename><surname>Chandra</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Michael</forename><surname>Franz</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 21st Annual Computer Security Applications Conference</title>
		<meeting>the 21st Annual Computer Security Applications Conference</meeting>
		<imprint>
			<date type="published" when="2005" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b68">
	<analytic>
		<title level="a" type="main">Dytan: A generic dynamic taint analysis framework</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">James</forename><surname>Clause</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Wanchun</forename><surname>Li</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Alessandro</forename><surname>Orso</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 2007 International Symposium on Software Testing and Analysis</title>
		<meeting>the 2007 International Symposium on Software Testing and Analysis</meeting>
		<imprint>
			<date type="published" when="2007" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b69">
	<monogr>
		<title level="m" type="main">Taint-enhanced policy enforcement: A practical approach to defeat a wide range of attacks</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Wei</forename><surname>Xu</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Sandeep</forename><surname>Bhatkar</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Sekar</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2006" />
			<pubPlace>USENIX Security</pubPlace>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b70">
	<analytic>
		<title level="a" type="main">TaintTrace: Efficient flow tracing with dynamic binary rewriting</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Winnie</forename><surname>Cheng</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Qin</forename><surname>Zhao</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Bei</forename><surname>Yu</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Scott</forename><surname>Hiroshige</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 11th IEEE Symposium on Computers and Communications</title>
		<meeting>the 11th IEEE Symposium on Computers and Communications</meeting>
		<imprint>
			<date type="published" when="2006" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b71">
	<analytic>
		<title level="a" type="main">Valgrind: a framework for heavyweight dynamic binary instrumentation</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Nicholas</forename><surname>Nethercote</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Julian</forename><surname>Seward</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">ACM Sigplan notices</title>
		<imprint>
			<date type="published" when="2007" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b72">
	<analytic>
		<title level="a" type="main">TaintDroid: An information-flow tracking system for realtime privacy monitoring on smartphones</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">William</forename><surname>Enck</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Peter</forename><surname>Gilbert</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Seungyeop</forename><surname>Han</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Vasant</forename><surname>Tendulkar</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Byung-Gon</forename><surname>Chun</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Landon</forename><forename type="middle">P</forename><surname>Cox</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Jaeyeon</forename><surname>Jung</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Patrick</forename><surname>Mcdaniel</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Anmol</forename><forename type="middle">N</forename><surname>Sheth</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">ACM Trans. Comput. Syst</title>
		<imprint>
			<date type="published" when="2014" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b73">
	<analytic>
		<title level="a" type="main">Dynamic taint analysis for automatic detection, analysis, and signaturegeneration of exploits on commodity software</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">James</forename><surname>Newsome</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Dawn</forename><surname>Song</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">NDSS</title>
		<imprint>
			<date type="published" when="2005" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b74">
	<analytic>
		<title level="a" type="main">Phosphor: Illuminating dynamic data flow in commodity jvms</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Jonathan</forename><surname>Bell</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Gail</forename><surname>Kaiser</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">In ACM SIGPLAN Notices. ACM</title>
		<imprint>
			<date type="published" when="2014" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b75">
	<analytic>
		<title/>
		<ptr target="http://www.oracle.com/webfolder/technetwork/tutorials/obe/java/gc01/index.html" />
	</analytic>
	<monogr>
		<title level="j">Java garbage collection basics</title>
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b76">
	<analytic>
		<title level="a" type="main">VAULT: Reducing paging overheads in SGX with efficient integrity verification structures</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Meysam</forename><surname>Taassori</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Ali</forename><surname>Shafiee</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Rajeev</forename><surname>Balasubramonian</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">ASPLOS</title>
		<imprint>
			<date type="published" when="2018" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b77">
	<monogr>
		<title level="m" type="main">FST: fast java serialization drop in-replacement</title>
		<ptr target="https://github.com/RuedigerMoeller/fast-serialization" />
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b78">
	<monogr>
		<title level="m" type="main">Intelยฎ Software Guard Extensions for Linux* OS -SGX driver</title>
		<ptr target="http://github.com/01org/linux-sgx-driver" />
		<imprint/>
	</monogr>
</biblStruct>

				</listBibl>
			</div>
		</back>
	</text>
</TEI>
