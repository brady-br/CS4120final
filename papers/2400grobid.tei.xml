<?xml version="1.0" encoding="UTF-8"?>
<TEI xmlns="http://www.tei-c.org/ns/1.0" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
xsi:schemaLocation="http://www.tei-c.org/ns/1.0 /Users/atharsefid/Desktop/grobid-0.5.3/grobid-home/schemas/xsd/Grobid.xsd"
 xmlns:xlink="http://www.w3.org/1999/xlink">
	<teiHeader xml:lang="en">
		<encodingDesc>
			<appInfo>
				<application version="0.5.3" ident="GROBID" when="2020-09-29T02:38+0000">
					<ref target="https://github.com/kermitt2/grobid">GROBID - A machine learning software for extracting information from scholarly documents</ref>
				</application>
			</appInfo>
		</encodingDesc>
		<fileDesc>
			<titleStmt>
				<title level="a" type="main">This paper is included in the Proceedings of the 15th USENIX Conference on File and Storage Technologies (FAST &apos;17). Open access to the Proceedings of the 15th USENIX Conference on File and Storage Technologies is sponsored by USENIX. vNFS: Maximizing NFS Performance with Compounds and Vectorized I/O vNFS: Maximizing NFS Performance with Compounds and Vectorized I/O</title>
			</titleStmt>
			<publicationStmt>
				<publisher/>
				<availability status="unknown"><licence/></availability>
				<date>February 27-March 2, 2017</date>
			</publicationStmt>
			<sourceDesc>
				<biblStruct>
					<analytic>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Ming</forename><surname>Chen</surname></persName>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><roleName>Ward Melville High School;</roleName><forename type="first">Henry</forename><surname>Nelson</surname></persName>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Jasmit</forename><surname>Saluja</surname></persName>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Ashok</forename><surname>Sankar</surname></persName>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Harihara</forename><surname>Subramony</surname></persName>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Erez</forename><surname>Zadok</surname></persName>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Ming</forename><surname>Chen</surname></persName>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Dean</forename><surname>Hildebrand</surname></persName>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Henry</forename><surname>Nelson</surname></persName>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Jasmit</forename><surname>Saluja</surname></persName>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Ashok</forename><surname>Sankar</surname></persName>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Harihara</forename><surname>Subramony</surname></persName>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Erez</forename><surname>Zadok</surname></persName>
						</author>
						<author>
							<affiliation key="aff0">
								<orgName type="institution">Stony Brook University</orgName>
								<address>
									<addrLine>Dean Hildebrand</addrLine>
									<settlement>Santa Clara</settlement>
									<region>CA</region>
									<country key="US">USA</country>
								</address>
							</affiliation>
						</author>
						<author>
							<affiliation key="aff1">
								<orgName type="department">* IBM Research -Almaden, + Ward Melville High School</orgName>
								<orgName type="institution" key="instit1">IBM Research-Almaden</orgName>
								<orgName type="institution" key="instit2">Stony Brook University</orgName>
								<orgName type="institution" key="instit3">Stony Brook University</orgName>
							</affiliation>
						</author>
						<title level="a" type="main">This paper is included in the Proceedings of the 15th USENIX Conference on File and Storage Technologies (FAST &apos;17). Open access to the Proceedings of the 15th USENIX Conference on File and Storage Technologies is sponsored by USENIX. vNFS: Maximizing NFS Performance with Compounds and Vectorized I/O vNFS: Maximizing NFS Performance with Compounds and Vectorized I/O</title>
					</analytic>
					<monogr>
						<imprint>
							<date type="published">February 27-March 2, 2017</date>
						</imprint>
					</monogr>
					<note>https://www.usenix.org/conference/fast17/technical-sessions/presentation/chen</note>
				</biblStruct>
			</sourceDesc>
		</fileDesc>
		<profileDesc>
			<abstract>
				<p>Modern systems use networks extensively, accessing both services and storage across local and remote networks. Latency is a key performance challenge, and packing multiple small operations into fewer large ones is an effective way to amortize that cost, especially after years of significant improvement in bandwidth but not latency. To this end, the NFSv4 protocol supports a compounding feature to combine multiple operations. Yet compounding has been underused since its conception because the synchronous POSIX file-system API issues only one (small) request at a time. We propose vNFS, an NFSv4.1-compliant client that exposes a vectorized high-level API and leverages NFS compound procedures to maximize performance. We designed and implemented vNFS as a user-space RPC library that supports an assortment of bulk operations on multiple files and directories. We found it easy to modify several UNIX utilities, an HTTP/2 server, and Filebench to use vNFS. We evaluated vNFS under a wide range of workloads and network latency conditions, showing that vNFS improves performance even for low-latency networks. On high-latency networks, vNFS can improve performance by as much as two orders of magnitude.</p>
			</abstract>
		</profileDesc>
	</teiHeader>
	<text xml:lang="en">
		<body>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="1">Introduction and Background</head><p>Modern computer hardware supports high parallelism: a smartphone can have eight cores and a NIC can have 256 queues. Although parallelism can improve throughput, many standard software protocols and interfaces are unable to leverage it and are becoming bottlenecks due to serialization of calls <ref type="bibr" target="#b7">[8,</ref><ref type="bibr" target="#b15">16]</ref>. Two notable examples are HTTP/1.x and the POSIX file-system API, both of which support only one synchronous request at a time (per TCP connection or per call). As Moore's Law fades <ref type="bibr" target="#b44">[44]</ref>, it is increasingly important to make these protocols and interfaces parallelism-friendly. For example, HTTP/2 <ref type="bibr" target="#b4">[5]</ref> added support for sending multiple requests per connection. However, to the best of our knowledge little progress has been made on the file-system API.</p><p>In this paper we similarly propose to batch multiple file-system operations. We focus particularly on the Network File System (NFS), and study how much performance can be improved by using a file-system API friendly to NFSv4 <ref type="bibr" target="#b34">[34,</ref><ref type="bibr" target="#b35">35]</ref>; this latest version of NFS supports compound procedures that pack multiple operations into a single RPC so that only one round trip is needed to process them. Unfortunately, although NFS <ref type="figure">Figure 1</ref>: NFS compounds used by the in-kernel NFS client to read a small file. Each numbered request is one compound, with its operations separated by semicolons. The operations use an NFSv4 server-side state, the current filehandle (CFH). PUTROOTFH sets the CFH to the FH of the root directory; PUTFH and GETFH set or retrieve the CFH; LOOKUP and OPEN assume that the CFH is a directory, find or open the specified name inside, and set it as the CFH; GETATTR, READ, and CLOSE all operate on the file indicated by the CFH.</p><p>compounds have been designed, standardized, and implemented in most NFS clients and servers, they are underused-mainly because of the limitations of the low-level POSIX file-system interface <ref type="bibr" target="#b7">[8]</ref>.</p><p>To explain the operations and premise of NFS4's compound procedures, we discuss them using several instructive figures. We start with <ref type="figure">Figure 1</ref>, which shows how reading a small file is limited by the POSIX API. This simple task involves four syscalls <ref type="bibr">(stat, open, read, and close</ref>) that generate five compounds, each incurring a round trip to the server. Because compounds are initiated by low-level POSIX calls, each compound contains only one significant operation (in bold blue), with the rest being trivial operations such as PUTFH and GETFH. Compounds reduced the number of round trips slightly by combining the syscall operations (LOOKUP, OPEN, READ) with NFSv4 state-management operations (PUTFH, GETFH) and attribute retrieval (GETATTR), but the syscall operations themselves could not be combined due to the serialized nature of the POSIX API.</p><p>Ideally, a small file should be read using only one NFS compound (and one round trip), as shown in  the saved filehandle (SFH), an NFSv4 state similar to the current filehandle (CFH). SAVEFH copies the CFH to the SFH; RESTOREFH restores the CFH from the SFH.</p><p>For compounds to reach their full potential, we need a file-system API that can convey high-level semantics and batch multiple operations. We designed and developed vNFS, an NFSv4 client that exposes a high-level vectorized API. vNFS complies with the NFSv4.1 standard, requiring no changes to NFS servers. Its API is easy to use and flexible enough to serve as a building block for new higher-level functions. vNFS is implemented entirely in user space, and thus easy to extend. vNFS is especially efficient and convenient for applications that manipulate large amounts of metadata or do small I/Os. For example, vNFS lets tar read many small files using a single RPC instead of using multiple RPCs for each; it also lets untar set the attributes of many extracted files at once instead of making separate system calls for each attribute type (owner, time, etc.).</p><p>We implemented vNFS using the standard NFSv4.1 protocol, and added two small protocol extensions to support file appending and copying. We ported GNU's Coreutils package (ls, cp, and rm), bsdtar, nghttp2 (an HTTP/2 server), and Filebench <ref type="bibr" target="#b14">[15,</ref><ref type="bibr" target="#b40">40]</ref> to vNFS. In general, we found it easy to modify applications to use vNFS. We ran a range of micro-and macro-benchmarks on networks with varying latencies, showing that vNFS can speed such applications by 3-133× with small network latencies (≤5.2ms), and by up to 263× with a 30.2ms latency.</p><p>The rest of this paper is organized as follows. Section 2 summarizes vNFS's design. Section 3 details the vectorized high-level API. Section 4 describes the implementation of our prototype. Section 5 evaluates the performance and usability of vNFS by benchmarking applications we ported. Section 6 discusses related work and Section 7 concludes.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2">Design Overview</head><p>In this section we summarize vNFS's design, including our goals, choices we made, and the architecture.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.1">Design Goals</head><p>Our design has four goals, in order of importance:</p><p>• High performance: vNFS should considerably outperform existing NFS clients and improve both latency and throughput, especially for workloads that emphasize metadata and small I/Os. Performance for other workloads should be comparable.</p><p>• Standards compliance: vNFS should be fully compliant with the NFSv4.1 protocol so that it can be used with any compliant NFS server.</p><p>• Easy adoption: vNFS should provide a general API that is easy for programmers to use. It should be familiar to developers of POSIX-compliant code to enable smooth and incremental adoption. • Extensibility: vNFS should make it easy to add functions to support new features and performance improvements. For example, it should be simple to add support for Server Side Copy (a feature in the current NFSv4.2 draft <ref type="bibr" target="#b16">[17]</ref>) or create new application-specific high-level APIs.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.2">Design Choices</head><p>The core idea of vNFS is to improve performance by using the compounding feature of standard NFS. We discuss the choices we faced and justify those we selected to meet the goals listed in Section 2.1. Overt vs. covert coalescing. To leverage NFS compounds, vNFS uses a high-level API to overtly express the intention of compound operations. An alternative would be to covertly coalesce operations under the hood while still using the POSIX API. Covert coalescing is a common technique in storage and networking; for example, disk I/O schedulers combine many small requests into a few larger ones to minimize seeks <ref type="bibr" target="#b2">[3]</ref>; and Nagle's TCP algorithm coalesces small outbound packets to amortize overhead for better network utilization <ref type="bibr" target="#b20">[21]</ref>. Although overt compounding changes the API, we feel it is superior to covert coalescing in four important respects: (1) By using a high-level API, overt compounding can batch dependent operations, which are impossible to coalesce covertly. For example, using the POSIX API, we cannot issue a read until we receive the reply from the preceding open. (2) Overt compounding can use a new API to express high-level semantics that cannot be efficiently conveyed in low-level primitives. NFSv4.2's Server Side Copy is one such example <ref type="bibr" target="#b16">[17]</ref>. (3) Overt compounding improves both throughput and latency, whereas covert coalescing improves throughput at the cost of latency, since accumulating calls to batch together inherently requires waiting. Covert coalescing is thus detrimental to metadata operations and small I/Os that are limited by latency. This is important in modern systems with faster SSDs and 40GbE NICs, where latency has been improving much slower than raw network and storage bandwidth <ref type="bibr" target="#b32">[33]</ref>. (4) Overt compounding allows implementations to use all possible information to maximize performance; covert coalescing depends on heuristics, such as timing and I/O sizes, that can be suboptimal or wrong. For example, Nagle's algorithm can interact badly with Delayed ACK <ref type="bibr" target="#b9">[10]</ref>. Vectorized vs. start/end-based API. Two types of APIs can express overt compounding: a vectorized one that compounds many desired low-level NFS operations into a single high-level call, or an API that uses calls like start compound and end compound to combine all low-level calls in between <ref type="bibr" target="#b31">[32]</ref>. We chose the vectorized API for two reasons: (1) A vectorized API is easier to implement than a start/end-based one. Users of a start/end-based API might mix I/Os with other code (such as looping and testing of file-system states), which NFS compounds cannot support. (2) A vectorized API logically resides at a high level and is more convenient to use, whereas using a low-level start/end-based API is more tedious for high-level tasks (similar to C++ programming vs. assembly). User-space vs. in-kernel implementation. A kernelspace implementation of vNFS would allow it to take advantage of the kernel's page and metadata caches and use the existing NFS code base. However, we chose to design and implement vNFS in user space for two reasons: (1) Adding a user-space API is much easier than adding system calls to the kernel and simplifies future extensions; and (2) User-space development and debugging is faster and easier. Although an in-kernel implementation might be faster, prior work indicates that the performance impact can be minimal <ref type="bibr" target="#b39">[39]</ref>, and the results in this paper demonstrate substantial performance improvements even with our user-space approach. <ref type="figure" target="#fig_2">Figure 4</ref> shows the architecture of vNFS, which consists of a library and a client. Instead of using the POSIX API, applications call the high-level vectorized API provided by the vNFS library, which talks directly to the vNFS client. The vNFS library facilitates application adoption, since most modern applications are developed using libraries and frameworks instead of OS system calls <ref type="bibr" target="#b1">[2]</ref>. To provide generic support and encourage incremental adoption, the library detects when compound operations are unsupported, and in that case converts vNFS operations into standard POSIX primitives. Thus, the vNFS library can also be used with file systems that do not support compounding, e.g., as a utility library for batching file-system operations.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.3">Architecture</head><p>The vNFS client accepts vectorized operations from the library, puts as many of them into each compound as possible, sends them to the NFS server using TransportIndependent RPC (TI-RPC), and finally processes the reply. Note that existing NFSv4 servers already support compounds and can be used with vNFS without change. TI-RPC is a generic RPC library without the limitations of Linux's in-kernel SUNRPC (e.g., supporting only a single data buffer per call); TI-RPC can also run on top of TCP, UDP, and RDMA. Like the in-kernel NFS client, the vNFS client also manages NFSv4's client-side states such as sessions, etc.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3">vNFS API</head><p>This section details vNFS's vectorized API (listed in Table 1). Each API function expands its POSIX counterparts to operate on a vector of file-system objects (e.g., files, directories, symbolic links). vNFS functions handle errors in a standard manner: return results for successful operations, report the index of the first failed operation in a compound (if any), and ignore any remaining operations that were not executed by the server. <ref type="figure" target="#fig_4">Figure 5</ref> demonstrates the use of vNFS API to read three small files in one NFS compound. To simplify programming, vNFS also provides utility functions for common tasks such as recursively removing a whole directory, etc.  a vfile structure ( <ref type="figure" target="#fig_4">Figure 5</ref>), offset, length, buffer, and flags. Our vectorized operations are more flexible than the readv and writev system calls, and can operate at many (discontinuous) offsets of multiple files in one call. When generating compound requests, vNFS adds OPENs and CLOSEs for files represented by paths; files represented by descriptors do not need that since they are already open. OPENs and CLOSEs are coalesced when possible, e.g. when reading twice from one file. The length field in the I/O structure also serves as an output, returning the number of bytes read or written. The structure has several flags that map to NFS's internal Boolean arguments and replies. For example, the flag is creation corresponds to the NFS OPEN4 CREATE flag, telling vwrite to create the target file if necessary. is write stable corresponds to NFS's WRITE DATA SYNC4 flag, causing the server to save the data to stable storage, avoiding a separate NFS COMMIT. Thus, a single vwrite can achieve the effect of multiple writes and a following fsync, which is a common I/O pattern (e.g., in logging or journaling).</p><p>State management NFSv4 is stateful, and OPEN is a state-mutating operation. The NFSv4 protocol requires a client to open a file before reading or writing it. Moreover, READ and WRITE must provide the stateid (an ID uniquely identifying a server's state <ref type="bibr" target="#b34">[34]</ref>) returned by the preceding OPEN. Thus, state management is a key challenge when vread or vwrite adds OPEN and READ/WRITE calls into a single compound. vNFS solves this by using the NFS current stateid, which is  a server-side state similar to the current filehandle. To ensure that the NFS server always uses the correct state, vread and vwrite take advantage of NFSv4's special support for using the current stateid <ref type="bibr">[34, Section 8.2.3]</ref>.</p><p>Appending vwrite also adds an optional small extension to the NFSv4.1 protocol to better support appends. As noted in the Linux manual page for open(2) <ref type="bibr" target="#b27">[28]</ref>, "O APPEND may lead to corrupted files on NFS filesystems if more than one process appends data to a file at once." The base NFSv4 protocol does not support appending, so the kernel NFS client appends by writing to an offset equal to the current known file size. This behavior is inefficient as the file size must first be read separately, and it is vulnerable to TOCTTOU (time-of-check-to-time-of-use) attacks. Our extension uses a special offset value (UINT64 MAX) in the I/O structure to indicate appending, making appending reliable with a tiny (5 LoC) change to the NFS server.</p><p>vopen/vclose. Using vread and vwrite, applications can access files without explicit opens and closes. Our API still supports vopen and vclose operations, which add efficiency for large files that are read or written many times. vopen and vclose are also important for maintaining NFS's close-to-open cache consistency <ref type="bibr" target="#b24">[25]</ref>. vopen opens multiple files (specified by paths) in one RPC, including LOOKUPs needed to locate their parent directories, as shown in <ref type="figure" target="#fig_1">Figure 3</ref>. Each file has its own open flags (read, write, create, etc.), which is useful when reading and writing are intermixed, such as external merge sorting. We also offer vopen simple, which uses a common set of flags and mode (in case of creation) for all files. Once opened, a file is represented by a file descriptor, which is an integer index into an internal table that keeps states (file cursor, NFSv4 stateid and sequenceid <ref type="bibr" target="#b34">[34]</ref>, etc.) of open files. vclose closes multiple opened files and releases their resources. vgetattrs/vsetattrs. These two functions manipulate several attributes of many files at once, combining multiple system calls (chmod, chown, utimes, and truncate, etc.) into a single compound, which is especially useful for tools like tar and rsync. The aging POSIX API is the only restriction on setting many attributes at once: the Linux kernel VFS already supports multi-attribute operations using the setattr method of inode operations, and the NFSv4 protocol has similar SETATTRs support. vgetattrs and vsetattrs use an array of attribute structures as both inputs and outputs. Each structure contains a vfile structure, all attributes (mode, size, etc.), and a bitmap showing which attributes are in use. vsscopy/vcopy. File copying is so common that Linux has added the sendfile and splice system calls to support it. Unfortunately, NFS does not yet support copying and clients must use READs and WRITEs instead, wasting time and bandwidth because data has to be read over the network and immediately written back. It is more efficient to ask the NFS server to copy the files directly on its side. This Server Side Copy (SSC) has already been proposed for the upcoming NFSv4.2 <ref type="bibr" target="#b16">[17]</ref>. Being forward-looking, we included vsscopy in vNFS to copy many files (in whole or in part) using SSC; however, SSC requires server enhancements.</p><p>vsscopy accepts an array of copy structures, each containing the source file and offset, the destination file and offset, and the length. The destination files are created by vsscopy if necessary. The length can be UINT64 MAX, in which case the effective length is the distance between the source offset and the end of the source file. vsscopy can use a single RPC to copy many files in their entirety. The copy structures return the number of copied bytes in the length fields.</p><p>vcopy has the same effect but does not use SSC. vcopy is useful when the NFS server does not support SSC; vcopy can copy N small files using three RPCs (a compound for each of vgetattrs, vread, and vwrite) instead of 7×N RPCs (2 OPENs, 2 CLOSEs, 1 GETATTR, 1 READ, and 1 WRITE for each file). A future API could provide only vcopy and silently switch to vsscopy when SSC is available; we include vsscopy separately in this paper for comparison with vcopy. vmkdir. vNFS provides vmkdir to create multiple directories at once (such as directory trees), which is common in tools such as untar, cmake, and recursive cp. vNFS's utility function ensure directory uses vmkdir to ensure a deep directory and all its ancestors exist. Consider "/a/b/c/d" for example: the utility function first uses vgetattrs with arguments ["/a"; "/a/b"; . . .] to find out which ancestors exist and then creates the missing directories using vmkdir. Note that simply calling vmkdir with vector arguments ["/a"; "/a/b"; . . .] does not work: the NFS server will fail (with EEXIST) when trying to recreate the first existing ancestor and stop processing all remaining operations. vlistdir. This function speeds up directory listing with four improvements to readdir: (1) vlistdir lists multiple directories at once; (2) a prior opendir is not necessary for listing; (3) vlistdir retrieves attributes along with directory entries, saving subsequent stats; (4) vlistdir can work recursively. It can be viewed as a fast vectorized ftw(3) that reads NFS directory contents using as few RPCs as possible.</p><p>vlistdir takes five arguments: an array of directories to list, a bitmap indicating desired attributes, a flag to select recursive listing, a user-defined callback function (similar to ftw's second argument <ref type="bibr" target="#b26">[27]</ref>), and a userprovided opaque pointer that is passed to the callback. vlistdir processes directories in the order given; recursion is breadth-first. However, directories at the same level in the tree are listed in an arbitrary order. vsymlink/vreadlink/vhardlink. These three vNFS operations allow many links to be created or read at once. Together with vlistdir, vsymlink can optimize operations like "cp -sr" and "lndir". All three functions accept a vector of paths and a vector of buffers containing the target paths. vremove. vremove removes multiple files and directories at once. Although vremove does not support recursive removal, a program can achieve this effect with a recursive vlistdir followed by properly ordered vremoves; vNFS provides a utility function rm recursive for this purpose. vrename. Renaming many files and directories is common, for example when organizing media collections. Many tools <ref type="bibr" target="#b0">[1,</ref><ref type="bibr" target="#b21">22,</ref><ref type="bibr" target="#b23">24,</ref><ref type="bibr" target="#b45">45]</ref> have been developed just for this purpose. vNFS provides vrename to facilitate and speed up bulk renaming. vrename renames a vector of source paths to a vector of destination paths.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4">Implementation</head><p>We have implemented a prototype of vNFS in C/C++ on Linux. As shown in <ref type="figure" target="#fig_2">Figure 4</ref>, vNFS has a library and a client, both running in user space. The vNFS library implements the vNFS API. Applications use the library by including the API header file and linking to it. For NFS files, the library redirects API function calls to the vNFS client, which builds large compound requests and sends them to the server via the TI-RPC library. For non-NFS files, the library translates the API functions into POSIX calls, and therefore can also be used as a utility library. (Our current prototype considers a file to be on NFS if it is under any exported directory specified in vNFS's configuration file.) The vNFS client builds on NFS-Ganesha <ref type="bibr" target="#b11">[12,</ref><ref type="bibr" target="#b29">30]</ref>, an open-source user-space NFS server. NFS-Ganesha can export files stored in many backends, such as XFS and GPFS. Our vNFS prototype uses an NFS-Ganesha backend called PROXY, which exports files from another NFS server and can be repurposed as a user-space NFS client. The original PROXY backend used NFSv4.0; we added NFSv4.1 support including session management <ref type="bibr" target="#b34">[34]</ref>. Our prototype implementation added 10,632 lines of C/C++ code and deleted 1,407. vNFS is thread-safe; we have tested it thoroughly. RPC size limit. The vNFS API functions (shown in <ref type="table" target="#tab_1">Table 1</ref>) do not impose a limit on the number of operations per call. However, each RPC has a configurable memory size limit, defaulting to 1MB. We ensure that vNFS does not generate RPC requests larger than that limit no matter how many operations an API call contains. Therefore, we split long arguments into chunks and send one compound request for each chunk. We also merge RPC replies upon return, to hide any splitting.</p><p>Our splitting avoids generating small compounds. For data operations (vread and vwrite), we can easily estimate the sizes of requests and replies based on buffer lengths, so we split a compound only when its size becomes close to 1MB. (The in-kernel NFS client similarly splits large READs and WRITEs according to the rsize and wsize mount options, which also default to 1MB.) For metadata operations, it is more difficult to estimate the reply sizes, especially for READDIR and GETATTR. We chose to be conservative and simply split a compound of metadata operations whenever it contains more than k NFS operations. We chose a default of 256 for k, which enables efficient concurrent processing by the NFS server, and yet is unlikely to exceed the size limit. For example, when listing the Linux source tree, the average reply size of READDIR-the largest metadata operation-is around 3,800 bytes. If k is still too large (e.g., when listing large directories), the server will return partial results and use cookies to indicate where to resume the call for follow-up requests. Protocol extensions. vNFS contains two extensions to the NFSv4.1 protocol to support file appending (see Section 3 [ ¶vread/vwrite]) and Server Side Copy (see Section 3 [ ¶vsscopy/vcopy]). Both extensions require changes to the protocol and the NFS server. We have implemented these changes in our server, which is based on NFS-Ganesha <ref type="bibr" target="#b10">[11,</ref><ref type="bibr" target="#b11">12,</ref><ref type="bibr" target="#b29">30]</ref>. The file-appending extension was easy to implement, adding only an if statement with 5 lines of C code. In the NFS server, we only need to use the file size as the effective offset whenever the write offset is UINT64 MAX.</p><p>Our implementation of Server Side Copy follows the design proposed in the NFSv4.2 draft <ref type="bibr" target="#b16">[17]</ref>. We added the new COPY operation to our vNFS client and the NFSGanesha server. On the server side, we copy data using splice(2), which avoids unnecessarily moving data across the kernel/user boundary. This extension added 944 lines of C code to the NFS-Ganesha server. Path compression. We created an optimization that reduces the number of LOOKUPs when a compound's file paths have locality. The idea is to shorten paths that have redundancy by making them relative to preceding ones in the same compound. For example, when listing the directories "/1/2/3/4/5/6/7/a" and "/1/2/3/4/5/6/7/b", a na¨ıvena¨ıve implementation would generate eight LOOKUPs per directory (one per component). In such cases, we replace the path of the second directory with "../b" and use only one LOOKUPP and one LOOKUP; LOOKUPP sets the current filehandle to its parent directory. This simple technique saves as many as six NFS operations for this example.</p><p>Note that LOOKUPP produces an error if the current filehandle is not a directory, because most file systems have metadata recording parents of directories, but not parents of files. In that case, we use SAVEFH to remember the deepest common ancestor in the file-system tree (i.e., "/1/2/3/4/5/6/7" in the above example) of two adjacent files, and then generate a RESTOREFH and LOOKUPs. (However, this approach cannot be used for LINK, RENAME, and COPY, which already use the saved filehandle for other purposes.) We use this optimization only when it saves NFS operations: for example, using "../../c/d" does not save anything for paths "/1/a/b" and "/1/c/d". Client-side caching. Our vNFS prototype does not yet have a client-side cache, which would be useful for rereading recent data and metadata, streaming reads, and asynchronous writes. We plan to add it in the future. Compared to traditional NFS clients, vNFS does not complicate failure handling in the presence of a dirty client-side cache: cached dirty pages (not backed by persistent storage) are simply dropped upon a client crash; dirty data in a persistent cache (e.g., FS-Cache <ref type="bibr" target="#b18">[19]</ref>), which may be used by a client holding write delegations, can be written to the server even faster during client crash recovery. Note that a client-side cache does not hold dirty metadata because all metadata changes are performed synchronously in NFS (except with directory delegations, which Linux has not yet implemented).</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5">Evaluation</head><p>To evaluate vNFS, we ran micro-benchmarks and also ported applications to use it. We now discuss our porting experience and evaluate the resulting performance.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5.1">Experimental Testbed Setup</head><p>Our  <ref type="figure">Figure 6</ref>: vNFS's speedup ratio (the vertical Z-axis, in logarithmic scale) relative to the baseline when reading and writing 1,000 equally-sized files, whose sizes (the X-axis) varied from 1KB to 16MB. vNFS is faster than (blue), equal to (white), or slower than (red) the baseline when the speedup ratio is larger than, equal to, or smaller than 1.0, respectively. The network latency (Y-axis) starts from 0.2ms (instead of zero) because that is the measured base latency of our testbed (see Section 5.1).</p><p>chine acts as the NFS server and runs NFS-Ganesha with our file-appending and Server Side Copy extensions; the other machine acts as a client and runs vNFS. The NFS server exports to the client an Ext4 file system, stored on an Intel DC S3700 200GB SSD. The two machines are directly connected to a Dell PowerConnect 8024F 10GbE switch, and we measured an average RTT of 0.2ms between them. To emulate different LAN and WAN conditions, we injected delays of 1-30ms into the outbound link of the server using netem.</p><p>To evaluate vNFS's performance, we compared it with the in-kernel NFSv4.1 client (called baseline), which mounts the exported directory using the default options: the attribute cache (ac option) is enabled and the maximum read/write size (rsize/wsize options) is 1MB. Our vNFS prototype does not use mount, but instead reads the exported directory from a configuration file. We ran each experiment at least three times and plotted the average value. We show the standard deviation as error bars, which are invisible in most figures because of their tiny values. Before each run, we flushed the page and dentry caches of the in-kernel client by unmounting and re-mounting the NFS directory. vNFS has no cache. The NFS-Ganesha server uses an internal cache, plus the OS's page and dentry caches. To quantify the effort of porting applications, we report the LoC change for each application including the error-handling code.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5.2">Micro-workloads</head><p>Small vs. big files. vNFS's goal is to improve performance for workloads with many small NFS operations, while staying competitive for data-intensive workloads. To test this, we compared the time used by vNFS and the baseline to read and write 1,000 equally-sized files in their entirety while varying the file size from 1KB to 16MB. We repeated the experiment in networks with 0.2ms to 5.2ms latencies, and packed as many operations as possible into each vNFS compound. The results are shown (in logarithmic scale) in <ref type="figure">Figure 6</ref>, where speedup ratio is the ratio of the baseline's completion time to vNFS's completion time. Speedup ratios greater than one mean that vNFS performed better than the baseline; ratios less than one mean vNFS performed worse.</p><p>Because vNFS combined many small read and write operations into large compounds, it performed much better than the baseline when the file size was small. With a 1KB file size and 0.2ms network latency, vNFS is 19× faster than the baseline when reading <ref type="figure">(Figure 6(a)</ref>), and 5× faster when writing <ref type="figure">(Figure 6(b)</ref>). As the network latency increased to 5.2ms, vNFS's speedup ratio improved further to 103× for reading and 40× for writing. vNFS's speedup ratio was higher for reading than for writing because once vNFS was able to eliminate most network round trips, the NFS server's own storage became the next dominant bottleneck.</p><p>As the file size (the X-axis in <ref type="figure">Figure 6</ref>) was increased to 1MB and beyond, vNFS's compounding effect faded, and the performance of vNFS and the baseline became closer. However, in networks with 1.2-5.2ms latency, vNFS was still 1.1-1.7× faster than the baseline: although data operations were too large to be combined together, vNFS could still combine them with small metadata operations such as OPEN, CLOSE, and GETATTR. Combining metadata and data operations requires vNFS to split I/Os below 1MB due to the 1MB RPC size limit (see Section 4). When a large I/O is split into pieces, the last one may be small; this phenomenon made vNFS around 10% slower when reading 4MB and 8MB files in the 0.2ms-latency network. However, this is not a problem in most cases because that last small piece is likely to be combined into later compounds. This is why vNFS performed the same as the baseline with even larger file sizes (e.g., 16MB) in the 0.2ms-latency network. This negative effect of vNFS's splitting was unnoticeable for writing because writing was bottlenecked by the NFS server's storage. Note that the baseline (the in-kernel NFS client) splits I/Os strictly at the 1MB size, although it also adds a few trivial NFS operations such as PUTFH (see <ref type="figure">Figure 1</ref>) in its compounds, meaning that the baseline's RPC size is actually larger than 1MB.  Compounding degree. The degree of compounding (i.e., the number of non-trivial NFS operations per compound) is a key factor determining how much vNFS can boost performance. The ideal is to perform a large number of file system operations at once, which is not always possible because applications may have critical paths that depend on only a single file. To study how the degree of compounding affects vNFS's performance, we compared vNFS with the baseline when calling the vNFS API functions with different numbers of operations in their vector arguments. <ref type="figure">Figure 7</ref> shows the speedup ratio of vNFS relative to the baseline as the number of operations per API call was increased from 1 to 256 in the 0.2ms-latency network. Even with one operation per call, vNFS outperformed the baseline for all API functions except two, because vNFS could still save round trips for single-file calls. For example, the baseline used three RPCs to rename a file: one LOOKUP for the source directory, another LOOKUP for the destination directory, and one RENAME; vNFS, however, used only one compound RPC combining all three operations. Getattrs and Setattr1 are the two exceptions where vNFS performed slightly worse (17% and 14% respectively) than the baseline. This is because each of these two calls needs only a single NFS operation; so vNFS could not combine anything yet incurred the overhead of performing RPCs in user space.</p><p>When there was more than one operation per API call, compounding became effective and vNFS significantly outperformed the baseline for all calls; note that the Y  <ref type="figure">Figure 8</ref>: The speedup ratio of vNFS over the baseline (in logarithmic scale) when repeatedly opening, reading, and closing a single file, whose size is shown on the X-axis. vNFS is faster than (blue), equal to (white), and slower than (red) the baseline when the speedup ratio is larger than, equal to, and smaller than 1, respectively. Our vNFS prototype does not have a cache yet, whereas the baseline does. The Z-axis is in logarithmic scale; the higher the better.</p><p>axis of <ref type="figure">Figure 7</ref> is in logarithmic scale. All calls except Write4KSync (bottlenecked by the server's storage stack) were more than 4× faster than the baseline when multiple operations were compounded. Note that vsetattrs can set multiple attributes at once, whereas the baseline sets one attribute at a time. We observe in <ref type="figure">Figure 7</ref> that the speedup ratio of setting more attributes (e.g., Setattr4) at once was always higher than that of setting fewer (e.g., Setattr3).</p><p>In our experiments with slower networks (omitted for brevity), vNFS's speedups relative to the baseline were even higher than in the 0.2ms-latency network: up to two orders of magnitude faster. Caching. Our vNFS prototype does not yet support caching. In contrast, the baseline (in-kernel NFS client) caches both metadata and data. To study the cache's performance impact, we compared vNFS and the baseline when repeatedly opening, reading, and closing a single file whose size varied from 1KB to 16MB. <ref type="figure">Figure 8</ref> shows the results, where a speedup ratio larger than one means vNFS outperformed the baseline; and a speedup ratio less than one means vNFS performed worse.</p><p>The baseline served all reads except the first from its cache, but it was slower than vNFS (which did not cache) when the file size was 256KB or smaller. This is because three RPCs per read are still required to maintain close-to-open semantics: an OPEN, a GETATTR (for cache revalidation), and a CLOSE. In comparison, vNFS used only one compound RPC, combining the OPEN, READ (uncached), and CLOSE. The savings from compounding more than compensated for vNFS's lack of a cache. For a 512KB file size, vNFS was still faster than the baseline except in the 0.2ms-latency network. For 1MB and larger files, vNFS was worse than the baseline because read operations dominated: the baseline served all reads from its client-side cache whereas vNFS sent all reads to the server without the benefit of caching.  Figure 9: Running time to copy (cp -r) the entire Linux source tree. The lower the better. vNFS runs much faster than the baseline both with and without Server Side Copy (SSC).</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5.3">Macro-workloads</head><p>To evaluate vNFS using realistic applications, we modified cp, ls, and rm from GNU Coreutils, Filebench <ref type="bibr" target="#b14">[15,</ref><ref type="bibr" target="#b40">40]</ref>, and nghttp2 <ref type="bibr" target="#b30">[31]</ref> to use the vNFS API; we also implemented an equivalent of GNU tar using vNFS.</p><p>GNU Coreutils. Porting cp and rm to vNFS was easy. For cp, we added 170 lines of code and deleted 16; for rm, we added 21 and deleted 1. Copying files can be trivially achieved using vsscopy, vgetattrs, and vsetattrs. Recursively copying directories requires calling vlistdir on the directories and then invoking vsscopy for plain files, vmkdir for directories, and vsymlink for symbolic links-all of which is done in vlistdir's callback function. We tested our modified cp with diff -qr to ensure that the copied files and directories were exactly the same as the source. Removing files and directories recursively in rm was similar, except that we used vremove instead of vsscopy.</p><p>Porting ls was more complex because batching is difficult when listing directories recursively in a particular order (e.g., by file size). We could not use the recursive mode of vlistdir because the NFS READDIR operation does not follow any specific order when reading directory entries, and the whole directory tree may be too large to fit in memory. Instead, vNFS maintains a list of all directories to read in the proper order as specified by the ls options, and repeatedly calls vlistdir (not recursively) on directories at the head of the list until it is empty. Note that (1) a directory is removed from the list only after all its children have been read; and <ref type="formula">(2)</ref> sub-directories should be sorted and then inserted immediately after their parent to maintain the proper order in the list. We added 392 lines of code and deleted 203 to port ls to vNFS. We verified that our port is correct by comparing the outputs of our ls with the vanilla version.</p><p>We used the ported Coreutils programs to copy, list, and remove an entire Linux-4.6.3 source tree: it contains 53,640 files with an average size of 11.6KB, 3,604 directories with average 17 children per directory, and 23 symbolic links. The large number of files and directories thoroughly exercises vNFS and demonstrates the performance impact of compounding. <ref type="figure">Figure 9</ref> shows the results of copying the entire Linux source tree; vNFS outperformed the baseline in all cases. vNFS uses either vsscopy or vcopy depending on whether Server Side Copy (SSC) is enabled. However, the baseline cannot use SSC because it is not yet supported by the in-kernel NFS client. For the same workload of copying the Linux source tree, vNFS used merely 4,447 compounding RPCs whereas the baseline used as many as 506,697: two OPENs, two CLOSEs, one READ, one WRITE, and one SETATTR for each of the 53,640 files; 60,873 ACCESSes; 62,327 GETATTRs; and 8,017 other operations such as READDIR and CREATE. vNFS-NOSSC saved more than 99% of RPCs compared to the baseline, with each vNFS compounding RPC containing an average of 250 operations. Therefore, even with only a 0.2ms network latency, vNFS-NOSSC is still more than 4× faster than the baseline. The speedup ratio increases to 30× with a 5.2ms network latency.</p><p>When Server Side Copy (SSC) was enabled, vNFS ran even faster, and vNFS-SSC reduced the running time of vNFS-NOSSC by half. The further speedup of SSC is only moderate because the files are small and our network bandwidth (10GbE) is large. The speedup ratio of vNFS-SSC to the baseline is 8-60× in networks with 0.2-5.2ms latency. Even when the baseline adds SSC support in the future, vNFS would still outperform it because this workload's bottleneck is the large number of small metadata operations, not data-copying operations. With the -Rs options, cp copies an entire directory tree by creating symbolic links to the source directory. <ref type="figure" target="#fig_7">Figure 10</ref> shows speedups for symlinking, recursively listing (ls -Rl), and removing (rm -Rf) the Linux source tree. When recursively listing the Linux tree, lsbaseline used 10,849 RPCs including 3,678 READDIRs, 3,570 ACCESSes, and 3,570 GETATTRs. Note that the in-kernel NFS client did not issue a separate GETATTR for each directory entry although the vanilla ls program called stat for each entry listed. This is because the in-kernel NFS client pre-fetches the attributes using readdirs and serves the stat calls from the local client's dentry metadata cache. This optimization enables ls-baseline to finish the benchmark in just 5 sec-onds in the 0.2ms-latency network. However, with our vectorized API, ls-vNFS did even better and finished in 2 seconds, using only 856 RPCs. Moreover, vNFS scales much better than the baseline. When the latency increased from 0.2 to 30.2ms, vNFS's running time rose to only 28 seconds whereas the baseline increased to 336 seconds. ls-vNFS is 10× faster than ls-baseline in high-latency (&gt;5.2ms) networks.</p><p>For symbolic copying and removing <ref type="figure" target="#fig_7">(Figure 10</ref>), vNFS was 7× and 18× faster than the baseline in the 0.2ms-latency network, respectively. This is because the baseline always operated on one file at a time, whereas vNFS could copy or remove more than 200 files at once. Compared to the baseline, vNFS improved cp by 52× and rm by 133× in the 5.2ms-latency network; with 30.2ms latency the speedup ratios became 106× for cp, and 263× for rm. For both removing and symbolic copying, vNFS ran faster in the 30.2ms-latency network (25 and 15 seconds, respectively) than the baseline did with 0.2ms latency (38s and 55s, respectively), showing that compounds can indeed help NFSv4 realize its design goal of being WAN-friendly <ref type="bibr" target="#b28">[29]</ref>.</p><p>tar. Because the I/O code in GNU tar is closely coupled to other code, we implemented a vNFS equivalent using libarchive, in which the I/O code is clearly separated. The libarchive library supports many archiving and compression algorithms; it is also used by FreeBSD bsdtar. Our implementation needed only 248 lines of C++ code for tar and 210 for untar, both including error-handling code.</p><p>When archiving a directory, we use the vlistdir API to traverse the tree and add sub-directories into the archive. We gather the listed files and symlinks into arrays, then read their contents using vread and vreadlink, and finally compress and write the contents into the archive. During extraction, we read the archive in 1MB (RPC size limit) chunks and then use libarchive to extract and decompress objects and their contents, which are then passed in batches to vmkdir, vwrite, or vsymlink. We always create parent directories before their children. We ensured that our implementation is correct by feeding our tar's output into our untar and comparing the extracted files with the original input files. We also tested for crosscompatibility with other tar implementations including bsdtar and GNU tar.</p><p>We used our tar to archive and untar to extract a Linux 4.6.3 source tree. Archiving read 53,640 small files and wrote a large archive: 636MB uncompressed, and 86MB with the xz option (default compression used by kernel.org). Extracting reversed the process. There were also metadata operations on 23 symbolic links and 3,604 directories. bsdtar (running on the in-kernel client) as the baseline. For tar-nocompress in the 0.2ms-latency network, vNFS was more than 5× faster than the baseline because the baseline used 446,965 RPCs whereas vNFS used only 2,144 due to compounding. This large reduction made vNFS 37× faster when the network latency increased to 5.2ms. In terms of running time, vNFS used 69 seconds to archive the entire Linux source tree in the 5.2ms-latency network, whereas the baseline, even in the faster 0.2ms-latency network, still used as much as 192 seconds. For untar-nodecompress, vNFS is also 5-36× faster, depending on the network latency. <ref type="figure" target="#fig_8">Figure 11</ref> also includes the results when xz compression was enabled. Although compression reduced the size of the archive file by 86% (from 636MB to 86MB) and thus saved 86% of the I/Os to the archive file, it had a negligible performance impact (less than 0.5%) because the most time-consuming operations were for small I/Os, not large ones. This test shows that workloads with mixed I/O sizes are slow if there are many small I/Os, each incurring a network round trip; vNFS can significantly improve such workloads by compounding those small I/Os. Filebench. We have ported Filebench to vNFS and added vectorized flowops to the Filebench workload modeling language (WML) <ref type="bibr" target="#b46">[46]</ref>. We added 759 lines of C code to Filebench, and removed 37. We converted Filebench's File-Server, NFS-Server, and Varmail workloads to equivalent versions using the new flowops: for example, we replaced N adjacent sets of openfile, readwholefile, and closefile (i.e., 3 × N old flowops) with a single vreadfile (one new flowop), which internally uses our vread API that can open, read, and close N files in one call.</p><p>The Filebench NFS-Server workload emulates the SPEC SFS benchmark <ref type="bibr" target="#b36">[36]</ref>. It contains one thread performing four sets of operations: <ref type="formula">(1)</ref> open, entirely read, and close three files; (2) read a file, create a file, and delete a file; (3) append to an existing file; and (4) read a file's attributes. The File-Server workload emulates 50 users accessing their home directories and spawns one thread per user to perform operations similar to the NFS-Server workload. The Varmail workload mimics a UNIX-style email server operating on a /var/mail directory, saving each message as a file; it has 16 threads, each performing create-append-sync, read-append-sync, read, and delete operations on 10,000 16KB files. <ref type="figure" target="#fig_0">Figure 12</ref> shows the results of the Filebench workloads, comparing vNFS to the baseline. For the NFSServer workload, vNFS was 5× faster than the baseline in the 0.2ms-latency network because vNFS combined multiple small reads and their enclosing opens and closes into a single compound. vNFS was also more efficient (and more reliable) when appending files since it does not need a separate GETATTR to read the file size (see Section 3 [ ¶vread/vwrite]). This singlethreaded NFS-Server workload is light, and its only bottleneck is the delay of network round trips. With compounding, vNFS can save network round trips; the amount of savings depends on the compounding degree (the number of non-trivial NFS operations per compound). This workload has a compounding degree of around 5, and thus we observed a consistent 5× speedup regardless of the network latency.</p><p>As shown in <ref type="figure" target="#fig_0">Figure 12</ref>, vNFS's speedup ratio in the File-Server workload is about the same as the NFSServer one, except in the 0.2ms-latency network. This is because these two workloads have similar file-system operations and thus similar compounding degrees. However, in the 0.2ms-latency network, vNFS was 13% slower (i.e., a speedup ratio of 0.87) than the baseline. This is caused by two factors: (1) the File-Server workload has as many as 50 threads and generates a heavy I/O load to the NFS server's storage stack, which became the bottleneck; (2) without a cache, vNFS sent all read requests to the overloaded server whereas the inkernel client's cache absorbed more than 99% of reads. As the network latency increased, the load on the NFS server became lighter and vNFS became faster thanks to saving round trips, which more than compensated for the lack of caching in our current prototype.</p><p>Because the Varmail workload is also multi-threaded, its speedup ratio curve in <ref type="figure" target="#fig_0">Figure 12</ref> has a trend similar to that of the File-Server workload. However, vNFS's speedup ratio in the Varmail workload plateaued at the higher value of 14× because its compounding degree is higher than the File-Server workload.</p><p>Network Latency (ms) 0.2 1.2 2.2 3.2 4.2 5.2 Speedup Ratio 3.5 6.5 7.1 8.7 9.8 9.9 We ported nghttp2 <ref type="bibr" target="#b30">[31]</ref>, an HTTP/2 library and toolset containing an HTTP/2 server and client, to vNFS. Our port added 543 lines of C++ code and deleted 108.</p><p>The HTTP Archive <ref type="bibr" target="#b19">[20]</ref> shows that, on average, an HTTP URL is 2,480KB and contains ten 5.5KB HTML files, 23 20KB Javascript files, seven 7.5KB CSS files, and 56 28KB image files. We created a set of files with those characteristics, hosted them with our modified nghttp2 server, and measured the time needed to process a PUSH-enabled request to read the file set. <ref type="table" target="#tab_6">Ta- ble 2</ref> shows the speedup ratio of vNFS relative to the baseline, which runs vanilla nghttp2 and the in-kernel NFS client. vNFS needed only four NFS compounds for all 96 files: one vgetattrs call and three vreads. In contrast, the baseline used 309 RPCs including one OPEN, READ, and CLOSE for each file. The reduced network round trips made vNFS 3.5× faster in the 0.2ms-latency network and 9.9× faster with the 5.2ms latency.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="6">Related Work</head><p>Improving NFS performance. NFS is more than 30 years old, and has continuously evolved to improve performance. Following the initial NFSv2 <ref type="bibr" target="#b38">[38]</ref>, NFSv3 added asynchronous COMMITs to improve write performance, and READDIRPLUS to speed up directory listing <ref type="bibr" target="#b6">[7]</ref>. NFSv4.0 <ref type="bibr" target="#b35">[35]</ref> added more performance features including compounding procedures that batch multiple operations in one RPC, and delegations that enable the client cache to be used without lengthy revalidation. To improve performance further with more parallelism, NFSv4.1 <ref type="bibr" target="#b34">[34]</ref> added pNFS <ref type="bibr" target="#b17">[18]</ref> to separate data and meta-data servers so that the different request types can be served in parallel. The upcoming NFSv4.2 has yet more performance improvements such as I/O hints, Application Data Blocks, and Server Side Copy <ref type="bibr" target="#b16">[17]</ref>.</p><p>In addition to improvements in the protocols, other researchers also improved NFS's performance: Duchamp found it inefficient to look up NFSv2 paths one component at a time, and reduced client latency and server load by optimistically looking up whole paths in a single RPC <ref type="bibr" target="#b12">[13]</ref>. Juszczak improved the write performance of an NFS server by gathering many small writes into fewer larger ones <ref type="bibr" target="#b22">[23]</ref>. Ellard and Seltzer improved read performance with read-ahead and stride-read algorithms <ref type="bibr" target="#b13">[14]</ref>. Batsakis et al. <ref type="bibr" target="#b3">[4]</ref> developed a holistic framework that adaptively schedules asynchronous operations to improve NFS's performance as perceived by applications. Our vNFS uses a different approach, improving performance by making NFSv4's compounding procedures easily accessible to programmers. I/O compounding. Compounding, also called batching and coalescing, is a popular technique to improve throughput and amortize cost by combining many small I/Os into fewer larger ones. Disk I/O schedulers coalesce adjacent I/Os to reduce disk seeks <ref type="bibr" target="#b2">[3]</ref> and boost throughput. Purohit et al. <ref type="bibr" target="#b31">[32]</ref> proposed Compound System Calls (Cosy) to amortize the cost of context switches and to reduce data movement across the user-kernel boundary. These compounding techniques are all hidden behind the POSIX file-system API, which cannot convey the required high-level semantics <ref type="bibr" target="#b7">[8]</ref>. The Batch-Aware Distributed File System (BAD-FS) <ref type="bibr" target="#b5">[6]</ref> demonstrated the benefits of using high-level semantics to explicitly control the batching of I/O-intensive scientific workloads. Dynamic sets <ref type="bibr" target="#b37">[37]</ref> took advantage of the fact that files can be processed in any order in many bulk file-system operations (e.g., grep foo * .c). Using a set-based API, distributed file system clients can pre-fetch a set of files in the optimal order and pace so that computation and I/O are overlapped and the overall latency is minimized. However, dynamic sets did not reduce the number of network round trips. SeMiNAS <ref type="bibr" target="#b8">[9]</ref> uses NFSv4 compounds (only) in its security middleware to reduce the security overhead. To the best of our knowledge, vNFS is the first attempt to use an overt-compounding API to leverage NFSv4's compounding procedures. Vectorized APIs. To achieve high throughput, Vilayanur et al. <ref type="bibr" target="#b43">[43]</ref> proposed readx and writex to operate at a vector of offsets so that the I/Os could be processed in parallel. However, these operations were limited to a single file, helping only large files, whereas our vread/vwrite can access many files at once, helping with both large and small files.</p><p>Vasudevan et al. <ref type="bibr" target="#b41">[41]</ref> envisioned the Vector OS (VOS), which offered several vectorized system calls, such as vec open(), vec read(), etc. While VOS is promising, it has not yet been fully implemented. In their prototype, they succeeded in delivering millions of IOPS in a distributed key-value (KV) store backed by fast NVM <ref type="bibr" target="#b42">[42]</ref>. However, they implemented a key-value API, not a file-system API, and their vectorized KV store focuses on serving parallel I/Os on NVM, whereas vNFS focuses on saving network round trips by using NFSv4 compound procedures. The vectorized key-value store and vNFS are different but complementary. Our vNFS API is also different from other vectorized APIs <ref type="bibr" target="#b41">[41,</ref><ref type="bibr" target="#b43">43]</ref> in three aspects: (1) vread/vwrite supports automatic file opening and closing; (2) vsscopy takes advantage of the NFS-specific Server Side Copy feature; and (3) to remain NFSv4-compliant, vNFS's vectorized operations are executed in order, in contrast to the out-of-order execution of lio listio(3) <ref type="bibr" target="#b25">[26]</ref>, vec read() <ref type="bibr" target="#b41">[41]</ref>, and readx <ref type="bibr" target="#b43">[43]</ref>.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="7">Conclusions</head><p>We designed and implemented vNFS, a file-system library that maximizes NFS performance. vNFS uses a vectorized high-level API to leverage standard NFSv4 compounds, which have the potential to reduce network round trips but were underused due to the low-level and serialized nature of the POSIX API. vNFS makes maximal use of compounds by enabling applications to operate on many file-system objects in a single RPC. vNFS complies with the NFSv4.1 protocol and has standard failure semantics. To help port applications to the vectorized API, vNFS provides a superset of POSIX filesystem operations, and its library can be used for non-NFS file systems as well. We found it generally easy to port applications including cp, ls and rm from GNU Coreutils; bsdtar; Filebench; and nghttp2.</p><p>Micro-benchmarks demonstrated that-compared to the in-kernel NFS client-vNFS significantly helps workloads with many small I/Os and metadata operations even in fast networks, and performs comparably for large I/Os or with low compounding degrees. Macrobenchmarks show that vNFS sped up the ported applications by up to two orders of magnitude. Our source code is available at https:// github.com/ sbu-fsl/ txn-compound .</p><p>Limitations and future work. Currently vNFS does not include a cache; an implementation is underway. To simplify error handling, we plan to support optionally executing a compound as an atomic transaction. Finally, compounded operations are processed sequentially by current NFS servers; we plan to execute them in parallel with careful interoperation with transactional semantics.</p></div><figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_0"><head>Fig- ure 2 .</head><label>2</label><figDesc>This would reduce the read latency by 80% (by removing four of the five round trips). We can even read multiple files using a single compound, as shown in Fig- ure 3. All these examples use the standard (unmodified) NFSv4 protocol. SAVEFH and RESTOREFH operate on</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_1"><head>Figure 3 :</head><label>3</label><figDesc>Figure 3: One NFS compound that reads three files. The operations can be divided into four groups: (a) sets the current and saved filehandle to /home/Bob; (b), (c), and (d) read the files .bashrc, .bash profile, and .bash login, respectively. SAVEFH and RESTOREFH (in red) ensure that the CFH is /home/Bob when opening files. The reply is omitted.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_2"><head>Figure 4 :</head><label>4</label><figDesc>Figure 4: vNFS Architecture. The blue arrows show vNFS's data path, and the dashed red arrows show the in-kernel NFS client's data path. The vNFS library and client (blue shaded boxes) are new components we added; the rest already existed.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_4"><head>Figure 5 :</head><label>5</label><figDesc>Figure 5: A simplified C code sample of reading three files at once using the vectorized API.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_7"><head>Figure 10 :</head><label>10</label><figDesc>Figure 10: vNFS's speedup relative to the baseline when symbolically copying (cp -Rs), listing (ls -Rl), and removing (rm -Rf) the Linux source tree. The Y-axis is logarithmic.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_8"><head>Figure 11 :</head><label>11</label><figDesc>Figure 11: Speedup ratios of vNFS relative to the baseline (bsdtar) when archiving and extracting the Linux-4.6.3 source tree, with and without xz compression.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_9"><head>Figure 12 :</head><label>12</label><figDesc>Figure 12: vNFS's speedup ratios for Filebench workloads.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_1" validated="false"><head>Table 1 :</head><label>1</label><figDesc></figDesc><table>vNFS vectorized API functions. Each function has two 
return values: an error code and a count of successful oper-
ations. NFS servers stop processing the remaining operations 
in a compound once any operation inside failed. To facilitate 
gradual adoption, vNFS also provides POSIX-like scalar API 
functions, omitted here for brevity. Each vNFS function has a 
version that does not follow symbolic links, also omitted. 

</table></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_3" validated="false"><head></head><label></label><figDesc>). The vector size of the baseline is actually the number of individual POSIX calls issued iteratively. The speedup ratio of Read4KDirect goes up to 46 at 256 operations per call; its curve is cut off here.</figDesc><table>2 
4 
8 
16 
32 
64 
128 
256 

Speedup Ratio 

# of Operations per API Call (log 2 ) 

Mkdir 
OpenClose 
Write4KSync 
Read4KDirect 
Getattrs 
Setattr1 
Setattr2 
Setattr3 
Setattr4 
Symlink 
Readlink 
Rename 
Remove 
Listdir 

Figure 7: vNFS's speedup ratio relative to the baseline under 
different degrees of compounding. The X-axis is log2. The 
network latency is 0.2ms. Write4KSync writes 4KB data to files 
opened with O SYNC; Read4KDirect reads 4KB data from files 
opened with O DIRECT; SetattrN sets N files' attributes 
(mixes of mode, owner, timestamp, and size</table></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_6" validated="true"><head>Table 2 : vNFS speedup ratio relative to the baseline when re- questing a set of objects with PUSH enabled in nghttp2.</head><label>2</label><figDesc></figDesc><table>HTTP/2 server. Similar to the concept of NFSv4 com-
pounds, HTTP/2 improves on HTTP/1.x by transferring 
multiple objects in one TCP connection. HTTP/2 also 
added a PUSH feature that allows an HTTP/2 server to 
proactively push related Web objects to clients [5, Sec-
tion 8.2]. For example, upon receiving an HTTP/2 re-
quest for index.html, the server can proactively send 
the client other Web objects (such as Javascript, CSS, 
and image files) embedded inside that index.html 
file, instead of waiting for it to request them later. PUSH 
can reduce a Web site's loading time for end users. It 
also allows Web servers to read many related files to-
gether, enabling efficient processing by vNFS. 
</table></figure>

			<note place="foot" n="308"> 15th USENIX Conference on File and Storage Technologies USENIX Association</note>

			<note place="foot" n="310"> 15th USENIX Conference on File and Storage Technologies USENIX Association</note>
		</body>
		<back>

			<div type="acknowledgement">
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Acknowledgments</head><p>We thank the anonymous FAST reviewers and our shepherd Keith Smith for their valuable comments. We also thank Geoff Kuenning for his meticulous and insightful review comments. This work was made possible in part thanks to Dell-EMC, NetApp, and IBM support; NSF awards <ref type="bibr">CNS-1251137, CNS-1302246, CNS-1305360, and CNS-1622832;</ref><ref type="bibr">and ONR award 12055763.</ref> </p></div>
			</div>

			<div type="references">

				<listBibl>

<biblStruct xml:id="b0">
	<monogr>
		<title level="m" type="main">Ant renamer</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Antoine</forename><surname>Potten</surname></persName>
		</author>
		<ptr target="http://www.antp.be/software/renamer" />
		<imprint>
			<date type="published" when="2016" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b1">
	<analytic>
		<title level="a" type="main">POSIX abstractions in modern operating systems: The old, the new, and the missing</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Vaggelis</forename><surname>Atlidakis</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Jeremy</forename><surname>Andrus</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Roxana</forename><surname>Geambasu</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Dimitris</forename><surname>Mitropoulos</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Jason</forename><surname>Nieh</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the Eleventh European Conference on Computer Systems</title>
		<meeting>the Eleventh European Conference on Computer Systems</meeting>
		<imprint>
			<publisher>ACM</publisher>
			<date type="published" when="2016" />
			<biblScope unit="page">19</biblScope>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b2">
	<monogr>
		<title level="m" type="main">CFQ IO scheduler</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Axboe</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2007" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b3">
	<analytic>
		<title level="a" type="main">CA-NFS: A congestion-aware network file system</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Batsakis</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Burns</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Kanevsky</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Lentini</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><surname>Talpey</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">ACM Transaction on Storage</title>
		<imprint>
			<biblScope unit="volume">5</biblScope>
			<biblScope unit="issue">4</biblScope>
			<date type="published" when="2009" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b4">
	<monogr>
		<title level="m" type="main">Hypertext Transfer Protocol Version 2 (HTTP/2). RFC 7540, Internet Engineering Task Force</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Belshe</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Peon</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Thomson</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2015-05" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b5">
	<analytic>
		<title level="a" type="main">Explicit control in the batch-aware distributed file system</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">John</forename><surname>Bent</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Douglas</forename><surname>Thain</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Andrea</forename><forename type="middle">C</forename><surname>Arpacidusseau</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">H</forename><surname>Remzi</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Miron</forename><surname>Arpaci-Dusseau</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Livny</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">NSDI</title>
		<imprint>
			<date type="published" when="2004" />
			<biblScope unit="page" from="365" to="378" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b6">
	<monogr>
		<title level="m" type="main">NFS Version 3 Protocol Specification. RFC 1813, Network Working Group</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">B</forename><surname>Callaghan</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">B</forename><surname>Pawlowski</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><surname>Staubach</surname></persName>
		</author>
		<imprint>
			<date type="published" when="1995-06" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b7">
	<analytic>
		<title level="a" type="main">Newer is sometimes better: An evaluation of NFSv4.1</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Chen</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Hildebrand</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">G</forename><surname>Kuenning</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Shankaranarayana</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">B</forename><surname>Singh</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">E</forename><surname>Zadok</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 2015 ACM International Conference on Measurement and Modeling of Computer Systems (SIGMETRICS 2015)</title>
		<meeting>the 2015 ACM International Conference on Measurement and Modeling of Computer Systems (SIGMETRICS 2015)<address><addrLine>Portland, OR</addrLine></address></meeting>
		<imprint>
			<publisher>ACM</publisher>
			<date type="published" when="2015-06" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b8">
	<analytic>
		<title level="a" type="main">SeMiNAS: A secure middleware for wide-area network-attached storage</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Chen</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Vasudevan</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">K</forename><surname>Wang</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">E</forename><surname>Zadok</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 9th ACM International Systems and Storage Conference (ACM SYSTOR &apos;16)</title>
		<meeting>the 9th ACM International Systems and Storage Conference (ACM SYSTOR &apos;16)<address><addrLine>Haifa, Israel</addrLine></address></meeting>
		<imprint>
			<publisher>ACM</publisher>
			<date type="published" when="2016-06" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b9">
	<monogr>
		<title level="m" type="main">TCP performance problems caused by interaction between Nagle&apos;s algorithm and delayed ACK</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Stuart</forename><surname>Cheshire</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2005-05" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b10">
	<monogr>
		<title level="m" type="main">GANESHA, a multi-usage with large cache NFSv4 server</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Philippe</forename><surname>Deniel</surname></persName>
		</author>
		<ptr target="www.usenix.org/events/fast07/wips/deniel.pdf" />
		<imprint>
			<date type="published" when="2007" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b11">
	<analytic>
		<title level="a" type="main">GANESHA, a multi-usage with large cache NFSv4 server</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Philippe</forename><surname>Deniel</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Thomas</forename><surname>Leibovici</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Jacquescharleslafoucrì</forename><surname>Ere</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Linux Symposium</title>
		<imprint>
			<date type="published" when="2007" />
			<biblScope unit="page">113</biblScope>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b12">
	<analytic>
		<title level="a" type="main">Optimistic lookup of whole NFS paths in a single operation</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Duchamp</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the Summer 1994 USENIX Technical Conference</title>
		<meeting>the Summer 1994 USENIX Technical Conference<address><addrLine>Boston, MA</addrLine></address></meeting>
		<imprint>
			<date type="published" when="1994-06" />
			<biblScope unit="page" from="143" to="170" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b13">
	<analytic>
		<title level="a" type="main">NFS tricks and benchmarking traps</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Ellard</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Seltzer</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the Annual USENIX Technical Conference, FREENIX Track</title>
		<meeting>the Annual USENIX Technical Conference, FREENIX Track<address><addrLine>San Antonio, TX</addrLine></address></meeting>
		<imprint>
			<publisher>USENIX Association</publisher>
			<date type="published" when="2003-06" />
			<biblScope unit="page" from="101" to="114" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b14">
	<monogr>
		<title/>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Filebench</surname></persName>
		</author>
		<ptr target="https://github.com/filebench/filebench/wiki" />
		<imprint>
			<date type="published" when="2016" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b15">
	<analytic>
		<title level="a" type="main">MegaPipe: A new programming interface for scalable network I/O</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Han</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Marshall</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">B</forename><surname>Chun</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Ratnasamy</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">The 10th USENIX Symposium on Operating Systems Design and Implementation (OSDI 12)</title>
		<imprint>
			<date type="published" when="2012" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b16">
	<monogr>
		<title level="m" type="main">NFS version 4 minor version 2 protocol. RFC draft, Network Working Group</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><surname>Haynes</surname></persName>
		</author>
		<ptr target="https://tools.ietf.org/html/draft-ietf-nfsv4-minorversion2-39" />
		<imprint>
			<date type="published" when="2015-09" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b17">
	<analytic>
		<title level="a" type="main">Exporting storage systems in a scalable manner with pNFS</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Hildebrand</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><surname>Honeyman</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of MSST</title>
		<meeting>MSST<address><addrLine>Monterey, CA</addrLine></address></meeting>
		<imprint>
			<publisher>IEEE</publisher>
			<date type="published" when="2005" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b18">
	<analytic>
		<title level="a" type="main">FS-Cache: A Network Filesystem Caching Facility</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Howells</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 2006 Linux Symposium</title>
		<meeting>the 2006 Linux Symposium<address><addrLine>Ottawa, Canada</addrLine></address></meeting>
		<imprint>
			<date type="published" when="2006-07" />
			<biblScope unit="volume">2</biblScope>
			<biblScope unit="page" from="427" to="440" />
		</imprint>
	</monogr>
	<note>Linux Symposium</note>
</biblStruct>

<biblStruct xml:id="b19">
	<monogr>
				<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Http Archive</surname></persName>
		</author>
		<ptr target="http://httparchive.org/trends.php" />
		<title level="m">URL statistics</title>
		<imprint>
			<date type="published" when="2016-09" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b20">
	<analytic>
		<title level="a" type="main">Congestion control in IP/TCP internetworks</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Nagle</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">RFC</title>
		<imprint>
			<biblScope unit="volume">896</biblScope>
			<date type="published" when="1984-01" />
		</imprint>
		<respStmt>
			<orgName>Network Working Group</orgName>
		</respStmt>
	</monogr>
</biblStruct>

<biblStruct xml:id="b21">
	<monogr>
		<title level="m" type="main">Bulk rename utility</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Jason</forename><surname>Fitzpatrick</surname></persName>
		</author>
		<ptr target="http://www.bulkrenameutility.co.uk/MainIntro.php" />
		<imprint>
			<date type="published" when="2016" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b22">
	<analytic>
		<title level="a" type="main">Improving the write performance of an NFS server</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Chet</forename><surname>Juszczak</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the USENIX Winter 1994 Technical Conference, WTEC&apos;94</title>
		<meeting>the USENIX Winter 1994 Technical Conference, WTEC&apos;94<address><addrLine>San Francisco, California</addrLine></address></meeting>
		<imprint>
			<publisher>USENIX Association</publisher>
			<date type="published" when="1994" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b23">
	<monogr>
		<title/>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Kim</forename><surname>Jensen</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Advancedrenamer</surname></persName>
		</author>
		<ptr target="https://www.advancedrenamer.com/" />
		<imprint>
			<date type="published" when="2016" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b24">
	<monogr>
		<title level="m" type="main">Close-to-open cache consistency in the Linux NFS client</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Chuck</forename><surname>Lever</surname></persName>
		</author>
		<ptr target="http://goo.gl/o9i0MM" />
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b25">
	<monogr>
				<ptr target="http://man7.org/linux/man-pages/man3/liolistio.3.html" />
		<title level="m">Linux Programmer&apos;s Manual. lio listio, September 2016</title>
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b26">
	<monogr>
		<title level="m" type="main">Linux man pages. ftw(3) -file tree walk</title>
		<ptr target="http://linux.die.net/man/3/ftw" />
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b27">
	<monogr>
		<title level="m" type="main">Linux man pages. open(2) -open and possibly create a file or device</title>
		<ptr target="http://linux.die.net/man/2/open" />
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b28">
	<monogr>
		<title level="m" type="main">The background to NFSv4.1. ;login: The USENIX Magazine</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Alex</forename><surname>Mcdonald</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2012" />
			<biblScope unit="volume">37</biblScope>
			<biblScope unit="page" from="28" to="35" />
			<pubPlace>February</pubPlace>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b29">
	<monogr>
		<title/>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Nfs-Ganesha</forename></persName>
		</author>
		<ptr target="http://nfs-ganesha.github.io/" />
		<imprint>
			<date type="published" when="2016" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b30">
	<monogr>
				<ptr target="http://nghttp2.org" />
		<title level="m">nghttp2. nghttp2: HTTP/2 C library</title>
		<imprint>
			<date type="published" when="2016-09" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b31">
	<analytic>
		<title level="a" type="main">Cosy: Develop in user-land, run in kernel mode</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Purohit</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><surname>Wright</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Spadavecchia</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">E</forename><surname>Zadok</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 2003 ACM Workshop on Hot Topics in Operating Systems (HotOS IX)</title>
		<meeting>the 2003 ACM Workshop on Hot Topics in Operating Systems (HotOS IX)<address><addrLine>Lihue, Hawaii</addrLine></address></meeting>
		<imprint>
			<publisher>USENIX Association</publisher>
			<date type="published" when="2003-05" />
			<biblScope unit="page" from="109" to="114" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b32">
	<monogr>
		<title/>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Stephen</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Diego</forename><surname>Rumble</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Ryan</forename><surname>Ongaro</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Mendel</forename><surname>Stutsman</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">John</forename><forename type="middle">K</forename><surname>Rosenblum</surname></persName>
		</author>
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b33">
	<analytic>
		<title level="a" type="main">It&apos;s time for low latency</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Ousterhout</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 13th USENIX Conference on Hot Topics in Operating Systems</title>
		<meeting>the 13th USENIX Conference on Hot Topics in Operating Systems</meeting>
		<imprint>
			<date type="published" when="2011" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b34">
	<monogr>
		<title level="m" type="main">NFS Version 4 Minor Version 1 Protocol. RFC 5661, Network Working Group</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Shepler</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Eisler</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Noveck</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2010-01" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b35">
	<analytic>
		<title level="a" type="main">NFS version 4 protocol</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Shepler</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">B</forename><surname>Callaghan</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Robinson</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Thurlow</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><surname>Beame</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Eisler</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Noveck</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">RFC</title>
		<imprint>
			<biblScope unit="volume">3530</biblScope>
			<date type="published" when="2003-04" />
		</imprint>
		<respStmt>
			<orgName>Network Working Group</orgName>
		</respStmt>
	</monogr>
</biblStruct>

<biblStruct xml:id="b36">
	<monogr>
				<title level="m">SPEC. SPEC SFS97 R1 V3.0. www.spec.org/ sfs97r1</title>
		<imprint>
			<date type="published" when="2001-09" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b37">
	<analytic>
		<title level="a" type="main">Exploiting the non-determinism and asynchrony of set iterators to reduce aggregate file I/O latency</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><surname>David</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Steere</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the Ninth ACM Symposium on Operating Systems Principles, SOSP &apos;97</title>
		<meeting>the Ninth ACM Symposium on Operating Systems Principles, SOSP &apos;97</meeting>
		<imprint>
			<date type="published" when="1997" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b38">
	<monogr>
		<title level="m" type="main">NFS: Network file system protocol specification. RFC 1094</title>
		<imprint>
			<date type="published" when="1989-03" />
		</imprint>
		<respStmt>
			<orgName>Sun Microsystems ; Network Working Group</orgName>
		</respStmt>
	</monogr>
</biblStruct>

<biblStruct xml:id="b39">
	<analytic>
		<title level="a" type="main">Terra incognita: On the practicality of user-space file systems</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">V</forename><surname>Tarasov</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Gupta</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">K</forename><surname>Sourav</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Trehan</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">E</forename><surname>Zadok</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">HotStorage &apos;15: Proceedings of the 7th USENIX Workshop on Hot Topics in Storage</title>
		<meeting><address><addrLine>Santa Clara, CA</addrLine></address></meeting>
		<imprint>
			<date type="published" when="2015-07" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b40">
	<monogr>
		<title level="m" type="main">Filebench: A flexible framework for file system benchmarking. ;login: The USENIX Magazine</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">V</forename><surname>Tarasov</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">E</forename><surname>Zadok</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Shepler</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2016-03" />
			<biblScope unit="volume">41</biblScope>
			<biblScope unit="page" from="6" to="12" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b41">
	<analytic>
		<title level="a" type="main">The case for VOS: The vector operating system</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Vijay</forename><surname>Vasudevan</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">David</forename><forename type="middle">G</forename><surname>Andersen</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Michael</forename><surname>Kaminsky</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 13th USENIX Conference on Hot Topics in Operating Systems, HotOS&apos;13</title>
		<meeting>the 13th USENIX Conference on Hot Topics in Operating Systems, HotOS&apos;13<address><addrLine>Berkeley, CA, USA</addrLine></address></meeting>
		<imprint>
			<publisher>USENIX Association</publisher>
			<date type="published" when="2011" />
			<biblScope unit="page" from="31" to="31" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b42">
	<analytic>
		<title level="a" type="main">Using vector interfaces to deliver millions of IOPS from a networked key-value storage server</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Vijay</forename><surname>Vasudevan</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Michael</forename><surname>Kaminsky</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">David</forename><forename type="middle">G</forename><surname>Andersen</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 3rd ACM Symposium on Cloud Computing, SoCC &apos;12</title>
		<meeting>the 3rd ACM Symposium on Cloud Computing, SoCC &apos;12</meeting>
		<imprint>
			<date type="published" when="2012" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b43">
	<monogr>
		<title level="m" type="main">Extending the POSIX I/O interface: A parallel file system perspective</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Vilayannur</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Lang</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Ross</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Klundt</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">L</forename><surname>Ward</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2008-10" />
		</imprint>
		<respStmt>
			<orgName>Argonne National Laboratory</orgName>
		</respStmt>
	</monogr>
<note type="report_type">Technical Report ANL/MCS-TM-302</note>
</biblStruct>

<biblStruct xml:id="b44">
	<analytic>
		<title level="a" type="main">The chips are down for Moore&apos;s law</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><forename type="middle">Mitchell</forename><surname>Waldrop</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Nature</title>
		<imprint>
			<biblScope unit="volume">530</biblScope>
			<biblScope unit="issue">7589</biblScope>
			<biblScope unit="page" from="144" to="147" />
			<date type="published" when="2016" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b45">
	<monogr>
		<title level="m" type="main">Rename-It!</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Werner</forename><surname>Beroux</surname></persName>
		</author>
		<ptr target="https://github.com/wernight/renameit" />
		<imprint>
			<date type="published" when="2016" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b46">
	<monogr>
				<ptr target="https://github.com/filebench/filebench/wiki/Workload-Model-Language" />
		<title level="m">Filebench Workload Model Language (WML)</title>
		<imprint>
			<date type="published" when="2016" />
		</imprint>
	</monogr>
</biblStruct>

				</listBibl>
			</div>
		</back>
	</text>
</TEI>
