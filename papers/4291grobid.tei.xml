<?xml version="1.0" encoding="UTF-8"?>
<TEI xmlns="http://www.tei-c.org/ns/1.0" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
xsi:schemaLocation="http://www.tei-c.org/ns/1.0 /Users/atharsefid/Desktop/grobid-0.5.3/grobid-home/schemas/xsd/Grobid.xsd"
 xmlns:xlink="http://www.w3.org/1999/xlink">
	<teiHeader xml:lang="en">
		<encodingDesc>
			<appInfo>
				<application version="0.5.3" ident="GROBID" when="2020-09-29T04:10+0000">
					<ref target="https://github.com/kermitt2/grobid">GROBID - A machine learning software for extracting information from scholarly documents</ref>
				</application>
			</appInfo>
		</encodingDesc>
		<fileDesc>
			<titleStmt>
				<title level="a" type="main">Open access to the Proceedings of the 29th USENIX Security Symposium is sponsored by USENIX. Security Analysis of Unified Payments Interface and Payment Apps in India Security Analysis of Unified Payments Interface and Payment Apps in India</title>
			</titleStmt>
			<publicationStmt>
				<publisher/>
				<availability status="unknown"><licence/></availability>
				<date>August 12-14, 2020</date>
			</publicationStmt>
			<sourceDesc>
				<biblStruct>
					<analytic>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Renuka</forename><surname>Kumar</surname></persName>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Renuka</forename><surname>Kumar</surname></persName>
							<affiliation key="aff1">
								<orgName type="institution">University of Michigan</orgName>
							</affiliation>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Sreesh</forename><surname>Kishore</surname></persName>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Hao</forename><surname>Lu</surname></persName>
							<affiliation key="aff1">
								<orgName type="institution">University of Michigan</orgName>
							</affiliation>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Atul</forename><surname>Prakash</surname></persName>
							<affiliation key="aff1">
								<orgName type="institution">University of Michigan</orgName>
							</affiliation>
						</author>
						<author>
							<affiliation key="aff0">
								<orgName type="institution" key="instit1">University of Michigan</orgName>
								<orgName type="institution" key="instit2">Sreesh Kishore</orgName>
								<orgName type="institution" key="instit3">Hao Lu and Atul Prakash</orgName>
								<orgName type="institution" key="instit4">University of Michigan</orgName>
							</affiliation>
						</author>
						<title level="a" type="main">Open access to the Proceedings of the 29th USENIX Security Symposium is sponsored by USENIX. Security Analysis of Unified Payments Interface and Payment Apps in India Security Analysis of Unified Payments Interface and Payment Apps in India</title>
					</analytic>
					<monogr>
						<title level="m">Proceedings of the 29th USENIX Security Symposium</title>
						<meeting>the 29th USENIX Security Symposium						</meeting>
						<imprint>
							<date type="published">August 12-14, 2020</date>
						</imprint>
					</monogr>
					<note>This paper is included in the 978-1-939133-17-5</note>
				</biblStruct>
			</sourceDesc>
		</fileDesc>
		<profileDesc>
			<abstract>
				<p>Since 2016, with a strong push from the Government of India, smartphone-based payment apps have become mainstream, with over $50 billion transacted through these apps in 2018. Many of these apps use a common infrastructure introduced by the Indian government, called the Unified Payments Interface (UPI), but there has been no security analysis of this critical piece of infrastructure that supports money transfers. This paper uses a principled methodology to do a detailed security analysis of the UPI protocol by reverse-engineering the design of this protocol through seven popular UPI apps. We discover previously-unreported multi-factor authentica-tion design-level flaws in the UPI 1.0 specification that can lead to significant attacks when combined with an installed attacker-controlled application. In an extreme version of the attack, the flaws could allow a victim&apos;s bank account to be linked and emptied, even if a victim had never used a UPI app. The potential attacks were scalable and could be done remotely. We discuss our methodology and detail how we overcame challenges in reverse-engineering this unpublished application layer protocol, including that all UPI apps undergo a rigorous security review in India and are designed to resist analysis. The work resulted in several CVEs, and a key attack vector that we reported was later addressed in UPI 2.0.</p>
			</abstract>
		</profileDesc>
	</teiHeader>
	<text xml:lang="en">
		<body>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="1">Introduction</head><p>Payment apps have become a mainstream payment instrument in India, with the Indian Government actively encouraging its citizens to use electronic payment methods after a demonetization of large currency notes in 2016 <ref type="bibr" target="#b21">[29]</ref>. To facilitate digital micro-payments at scale, the National Payments Corporation of India (NPCI), a consortium of Indian banks, introduced the Unified Payment Interface (UPI) to enable free and instant money transfers between bank accounts of different users. As of July 2019, the value of UPI transactions has reached about $21 billion <ref type="bibr">[45]</ref>. UPI's open backend architecture that enables easy integration and interoperability of new payment apps is a significant enabler. Currently, there are about 88 UPI payment apps and over 140 banks that enable transactions with those apps via UPI <ref type="bibr" target="#b30">[40,</ref><ref type="bibr" target="#b31">41]</ref>. This paper focuses on vulnerabilities in the design of UPI and UPI's usage by payment apps.</p><p>We note that hackers are highly motivated when it comes to money, so uncovering any design vulnerabilities in payment systems and addressing them is crucial. For instance, a recent survey states a 37% increase in financial fraud and identity theft in 2019 in India <ref type="bibr" target="#b9">[12]</ref>. Social engineering attacks to extract sensitive information such as one-time passcodes and bank account numbers are common <ref type="bibr">[17,</ref><ref type="bibr" target="#b51">23,</ref><ref type="bibr" target="#b62">34,</ref><ref type="bibr">57,</ref><ref type="bibr">58]</ref>.</p><p>Payment apps, including Indian payment apps, have been analyzed before, with vulnerabilities discovered <ref type="bibr" target="#b6">[9,</ref><ref type="bibr" target="#b37">48]</ref>, and an Indian mobile banking service was found to have PIN recovery flaws <ref type="bibr" target="#b36">[47]</ref>. However, in these studies, mobile apps did not share a common payment interface. As far as we are aware, an analysis of a common interface used by multiple payment apps has not been done before. Such an analysis is important because security flaws in them can impact customers of multiple banks and multiple apps, regardless of other stronger security features used. We focus on the security analysis of the unified payment interface used by many Indian payment apps and its design choices.</p><p>In this work, we use a principled approach to analyze UPI 1.0, overcoming significant challenges. A key challenge is that the protocol details are not available, though millions of users in India use it. We also did not have access to the UPI servers. We thus had to reverse-engineer the UPI protocol through the UPI apps that used it and had to bypass various security defenses of each app, including code obfuscation and anti-emulation techniques. Though we build on techniques used in the past for security analysis of apps <ref type="bibr" target="#b6">[9,</ref><ref type="bibr" target="#b17">21,</ref><ref type="bibr">46,</ref><ref type="bibr" target="#b37">48]</ref>, our approach to extract the protocol details varies based on the defenses the apps use. We carefully examine each stage of the UPI protocol to uncover the credentials required to progress in each stage, find alternate workflows for authentication, and discover leakage of user-specific attributes that could be useful at a later stage.</p><p>We present results from the analysis of the UPI protocol, as seen by seven of the most popular UPI apps in India listed in <ref type="table" target="#tab_1">Table 1</ref>.</p><p>Of the seven apps we analyze, four UPI appsGoogle Pay (Tez), PhonePe, Paytm, and BHIM-have a combined market share of 88% <ref type="bibr">[27]</ref> and are widely accepted at many shopping sites. From a total of 88 UPI apps, many are minor variations of BHIM, the flagship app released by NPCI (also the designers of UPI). Close to 48 banks today issue a bank-branded version of the BHIM app. Since Android owns over 90% of the Indian mobile market share <ref type="bibr">[13]</ref>, we focused on the Android versions of these apps.</p><p>Our threat model assumes that the user is careful to use an authorized payment app on a non-rooted Android phone, but has installed an attacker-controlled app with commonly used permissions. We also do not rely on the success of social engineering attacks, though they could simplify exploiting some of the vulnerabilities we uncovered. We uncovered several design choices in the UPI 1.0 protocol that lead to the possibility of the following types of attacks:</p><p>• Attack #1: Unauthorized registration, given a user's cell number: This attack leaks private data such as the set of banks where a user has bank accounts and the bank account numbers.</p><p>• Attack #2: Unauthorized transactions on bank accounts given a user's cell number and partial debit card number: Purchases using a debit card in India, whether in-store or online, requires a user to authorize the payment by entering a secret PIN. In this attack, an attacker, by knowing a user's cell number and debit card information printed on the card (last six digits and expiry date, without the PIN), can do transactions on a bank account of a user who has never used a UPI app for payments.</p><p>• Attack #3: Unauthorized transactions without debit card numbers: This attack shows how an attacker that starts out with no knowledge of a user's authentication factors can learn all the factors to do unauthorized transactions on that user's bank account. Our work started over two years ago when NPCI released UPI 1.0 and BHIM, which are the focus of our analysis. Given the potential risks with releasing our findings, we waited to publish until NPCI addressed a critical attack vector in the recently released UPI 2.0. Our key contributions are as follows.</p><p>• We conduct the first in-depth security analysis of the unpublished UPI 1.0 protocol that provides a common payment interface to many popular mobile payment apps in India and allows bank-to-bank transfers between users of different apps.</p><p>• We show how to systematically reverse-engineer this complex application layer protocol from the point-ofview of an adversary with no access to UPI servers. We use BHIM, the reference implementation for UPI apps released by the Indian government, for our initial analysis and then confirm our findings on other UPI apps.</p><p>• We found subtle design flaws in the UPI protocol, which can be exploited by an adversary using an attackercontrolled app that leverages known flaws in Android's design, to construct scalable remote attacks. We show how an adversary can carry out the attacks starting with no knowledge of a user.</p><p>• As responsible disclosure, we reported the flaws to app developers, CERT India, and CERT US, resulting in several CVEs. A key attack vector we reported to NPCI and CERT India was addressed in UPI 2.0.</p><p>• We present early findings from an ongoing analysis of UPI 2.0, using BHIM, Google Pay, Amazon Pay, and PayTM-four top-rated UPI 2.0 apps in India. Findings indicate that some vulnerabilities remain.</p><p>• We discuss lessons learned and potential mitigation strategies to consider when designing such protocols.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2">Background</head><p>Early mobile payment apps in India were wallet-only apps. They could withdraw money from a user's bank account by asking a user to enter a debit card number, but not deposit money back into the bank account. Post demonetization (in 2016), to encourage cashless transactions, a consortium of Indian banks called the National Payments Corporation of India (NPCI), backed by the Indian government, introduced the Unified Payments Interface (UPI) that allows NPCI-certified mobile apps to do free instant money transfers between bank accounts of different users. UPI apps can inter-operate with each other since they all share the same payment interface. A user of BHIM, for instance, can transfer money instantly for a small purchase from her bank account to the bank account of a shopkeeper who uses Google Pay. Because of this, most stores in India accept mobile payments through UPI apps. Depending on the app, a user can do unlimited transactions up to $1500 per transaction. <ref type="figure" target="#fig_0">Figure 1b</ref> shows the UPI money transfer system when compared with the traditional Internet banking system in <ref type="figure" target="#fig_0">Figure 1a</ref>.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.1">User Registration on a UPI App</head><p>The UPI payment system requires Alice to register her primary cellphone (or cell) number with her bank account(s) out-of-band to send or receive money. UPI uses the cell number (i) as a proxy for a user's digital identity with the bank to look up a bank account given a cell number; (ii) as a factor in authentication via SMS one-time passcodes (OTP); and (iii) to alert users on transactions. The Government of India requires cellphone providers to get copies of government-issued IDs, manually verify the IDs, and do biometric verification before issuing a cell number <ref type="bibr">1</ref> .</p><p>To register for UPI services, Alice must set up her UPI user profile, add a bank account, and enable transactions on that bank account, as follows:</p><p>1. Set up a UPI user profile: Alice must first create a profile with UPI via a UPI app installed on her bank-registered cell phone. Alice must first give her cell number to UPI through the UPI app for verification. How UPI collects this information from a user may change with each app. For instance, some apps read the cell number from the device, while others ask the user to key-in the cell number. For instance, <ref type="figure" target="#fig_1">Figure 2</ref>, screenshot #3, shows how BHIM reads Alice's cell number(s) from her phone for Alice to choose from. The UPI app then sends Alice's cell number to the UPI server for verification. Once verified, the UPI server issues a UPI ID for Alice on that app. <ref type="figure" target="#fig_1">Figure 2</ref>, screenshot #4 shows how BHIM notifies Alice when she is verified. If Alice uses multiple apps, the UPI server issues a different UPI ID for each app. The app then prompts Alice to set a passcode. The nature of the passcode is again specific to the app. BHIM, for instance, asks the user to set a 4-digit passcode, as shown in <ref type="figure" target="#fig_1">Figure 2</ref>, screenshot #5.</p><p>2. Add a bank account: Once Alice's profile is set up, she must add the bank account that she wants to use for withdrawals and deposits. Alice is given a list of bank names that support UPI <ref type="figure" target="#fig_1">(Figure 2</ref>, screenshot #6), from which she can now choose her bank. Alice may repeat this step to add multiple bank accounts.</p><p>3. Enable transactions: For Alice to be able to transact on an added bank account, she has to set up a UPI PIN for that account before the first transaction. The UPI PIN is Alice's secret to authorize any future transactions. To set the UPI PIN, Alice must furnish information printed on the debit card-the last six digits of her bank's ATM or debit card number and expiration date. Alice must also enter an OTP she receives from the UPI server. The UPI PIN is a highly sensitive factor since the UPI server uses it to prevent unauthorized transactions on Alice's bank account.</p><p>To transfer money to Bob, Alice first logs into a UPI app using the passcode she set during user registration. Then, outof-band, Alice requests Bob to provide his UPI ID, which is often Bob's cell number. Alice chooses one of the bank accounts she previously added to the app <ref type="figure" target="#fig_1">(Figure 2</ref>, screenshot #7), initiates the transaction to Bob, and authorizes it by providing her UPI PIN. Internally, the UPI payment interface directly transfers money from Alice's chosen bank account to Bob's bank account linked with his UPI ID.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.2">UPI Specs for User Registration</head><p>The UPI specifications released by NPCI <ref type="bibr">[44]</ref> provide "broad guidelines" on the client-server handshake between a UPI app and the UPI server. We discuss the protocol details available to us from the specification.</p><p>1. Set up a UPI user profile: Once a UPI app gets a user's cell number, the app must send an outbound encrypted SMS from Alice's phone to the UPI server. This process is automated and does not involve the user in order to guarantee a strong association between a user's cell phone and her device. According to UPI, this is the "most critical security requirement" of the protocol since all money transactions from a user's device are first verified based on this association. UPI calls this association of a user's device (identified by parameters such as Device ID, App ID, and IMEI number) with her cell number as device hard-binding. The combined cell number and device information (that represents this binding) is called the device fingerprint, which per the UPI spec is the first factor of authentication. Passcode. The UPI spec considers application passcode as optional and does not undertake responsibility for passcode authentication. UPI leaves it up to a UPI app vendor to authenticate the passcode. Thus, the responsibility to completely authenticate a user is shared between two servers-the UPI server (that verifies device fingerprint and UPI PIN), and a payment app server (that verifies an app passcode).</p><p>2. Add a bank account: A user's request to add a bank must be from the device registered with UPI. Internally, UPI fetches the chosen bank's account number and IFSC code based on a user's cell number for later transactions through the UPI app.</p><p>3. Enable transactions: UPI allows transactions to be done either using a cell number or an account number and IFSC code or any UPI ID. UPI spec mandates that all transactions must at least be 2FA using a cell phone (the device fingerprint) as one factor and the UPI PIN as the second. The spec considers a cell phone as a "what you have" factor, which allows UPI to provide "1-click 2-Factor Authentication" using the said two factors.</p><p>For apps that integrate with UPI, NPCI enforces application security via a code review and certification process. All communication with the UPI server is over a PKI-based encrypted connection. Currently, UPI has become the de facto standard for mobile transactions.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.3">Threat Model</head><p>We assume a normal user, Alice, who installs payment apps from official sources such as Google Play; none of the payment apps contain extraneous malicious code. Alice has a properly configured phone with Internet facility and prevents physical access to it by untrusted parties.</p><p>On the other hand, the attacker, Eve, uses a rooted phone. Eve can use any tool at her disposal to reverse engineer the payment apps. We assume that Eve releases an apparently useful unprivileged app called Mally that requests the following two permissions-android.permission.INTERNET and android.permission.RECEIVE_SMS. Alice finds the app useful and installs it, granting it the necessary permissions.</p><p>The permissions requested for Mally are not unusual for Android. Recent versions of Android automatically grant the INTERNET permission without a user prompt <ref type="bibr" target="#b12">[15]</ref>. SMS permissions have legitimate uses on Android, and about 15% of the Android apps request them <ref type="bibr" target="#b16">[20]</ref>. RECEIVE_SMS permission only grants the permission to read incoming SMS messages, but not read previously received messages or send SMS messages. This permission is used by many popular social media apps such as Telegram and WhatsApp, SMS/-call blocker apps, and also security apps such as Kaspersky Mobile Security and BitDefender.</p><p>We consider our threat model to be realistic for the following reasons. First, according to the Android security review for the last two years, India is among the top three countries with the highest rate of potentially harmful applications such as trojans and backdoors, sometimes pre-installed on Android devices <ref type="bibr" target="#b60">[24,</ref><ref type="bibr">25]</ref>. Google has also recently released a warning stating that 53% of the major attacks are because of malicious apps that come pre-installed on low-cost smartphones <ref type="bibr" target="#b15">[19]</ref>.</p><p>To simplify some attack descriptions, we describe Mally with the READ_PHONE_STATE or accessibility permissions. We do this to show the many ways an adversary can get a user's information, e.g., a user's cell number. However, in such cases, we also show other attack vectors that require neither of these two permissions.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3">Security Analysis</head></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.1">Methodology</head><p>In this section, we describe how we reverse-engineer UPI, a proprietary protocol, to learn its authentication handshake. Since we do not have access to UPI's servers, we choose to reverse engineer this application layer protocol through the payment apps that support it.</p><p>Protocol Analysis. To reverse-engineer UPI, we first uncover each step of the client-server authentication handshake with the goal of (i) understanding how UPI does device fingerprinting; and (ii) establishing the credentials required by a user to set up an account and do transactions. Besides UPI's default authentication workflow, we also look for alternate workflows or paths that could be leveraged to minimize the credentials required by an attacker. Finally, we look for any leaked user-specific attributes during protocol interactions that could be leveraged later, if intercepted, by an adversary. We triage our findings from different workflows to find plausible attack vectors and to verify potential exploits.</p><p>The approach we use to extract protocol data varies based on the specifications of an app and the security defenses they use. Since UPI 1.0 specs only state broad security guidelines rather than protocol details, we examine multiple apps to know whether the protocol varies across different apps. We analyze BHIM, the flagship app published by the same government organization that maintains the UPI system and then confirm our findings by analyzing additional apps.</p><p>App Reversing-Engineering. One approach to capture the protocol data sent and received by an app is to run it in a sandbox. Sandbox tools such as CuckooDroid <ref type="bibr" target="#b11">[14]</ref> use an emulator for dynamic analysis. Hence, to test if the UPI apps can run in a sandbox, we manually run each app in Android SDK's builtin emulator on a Linux host. However, we find that these apps do not run without a physical SIM card, which is unavailable on an emulator. The apps also use anti-emulation techniques that prevent them from running in an emulator.</p><p>Besides anti-emulation, we find that the payment apps also use several other defenses. For instance, all of them detect a rooted phone and deter a user from running the app on a rooted phone. Some apps also look for the presence of hooking libraries such as Xposed <ref type="bibr" target="#b20">[28]</ref> that typically require root access to modify system files. That apart, all apps are obfuscated, use encrypted communication, enforce session timeout and account lockout, avoid storing or transmitting data in the clear, and avoid using hard-coded credentials or keys. The extent of security defenses used by these apps shows that app developers have designed the apps with security in mind. This is unlike findings by Reaves et al. <ref type="bibr" target="#b37">[48]</ref> that found basic security flaws in Indian payment apps around 2015.</p><p>Our security assessments show that some apps, such as BHIM, allow repackaging. We leverage this to instrument an app's code statically to learn specifics of the authentication handshake, such as the name of the activity and method that generated network traffic. Because such specifics help with precise analysis, we first check whether the apps can be instrumented and repackaged. To instrument the app, we first disassemble it using APKTool <ref type="bibr">[4]</ref>, insert debug statements, and then repackage it with our signature.</p><p>One question that arises is where to instrument in an app's code as this requires knowledge of the methods of the app we want to instrument. Since we do not know this a priori, we manually reverse-engineer the apps using the JEB <ref type="bibr">[30]</ref> disassembler and decompiler. Some times, JEB fails to decompile certain classes that are control-flow obfuscated. In such cases, we use JDK's javap command to read bytecode. We augment our analysis with results from the static components of two hybrid analyzers MobSF <ref type="bibr" target="#b17">[21]</ref> and Drozer <ref type="bibr" target="#b19">[26]</ref>.</p><p>We could not repackage certain apps such as Google Pay. In such cases, we intercept an app's network traffic using a TLS man-in-the-middle proxy called mitmproxy <ref type="bibr">[36]</ref>. We install the OpenVPN app on our Android phone and an OpenVPN service on a Linux host and configure the host's firewall rules to route traffic to the mitmproxy. The setup also requires that we install mitmproxy's certificate on the phone. However, we find that starting Android Nougat, Android does not trust user-installed certificates, and setting up a system certificate requires root access, an impediment. Hence we conduct our analysis on Android Marshmallow and Lollipop devices.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.2">Analysis of BHIM &amp; UPI 1.0 Protocol</head><p>Bharat Interface for Money (BHIM) <ref type="bibr">[5]</ref> is the Indian government's reference implementation of a payment app over UPI and was launched along with UPI 1.0. We discuss findings from our analysis of BHIM's user registration process for a user Alice whose UPI ID is her cell number. We instrument BHIM to see the protocol data it exchanges with the UPI server during registration. We show an example of how we instrument BHIM in the Appendix.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.3">BHIM User Registration Protocol</head><p>Steps 1-10 on the left of <ref type="figure" target="#fig_2">Figure 3</ref> are the steps of the clientserver handshake between BHIM version 1.3 and the UPI 1.0 server, with minimal and relevant protocol data shown. The screen numbers (circled) on the left indicate the screenshot of the app in <ref type="figure" target="#fig_1">Figure 2</ref> that generated the traffic. We describe the ten steps of UPI's default workflow below.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="1.">Step 1: When Alice starts BHIM, BHIM first requests</head><p>Alice permission to send SMS messages (for later use) ( <ref type="figure" target="#fig_1">Figure 2</ref>, #2). Once BHIM gets the permission, BHIM sends Alice's device details such as the device's Android version, device ID, make, manufacturer, and model to the UPI server as an HTTPS message.</p><p>2.</p><p>Step 2: UPI server sends Alice a 13-digit registration token that identifies her device and waits to get the token back from Alice as an SMS message.</p><p>3.</p><p>Step 3: BHIM app sends the registration token as an SMS message to the UPI server. BHIM waits for SMS delivery confirmation using the sendTextMessage API's deliveryIntent.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>4.</head><p>Step 4: When the UPI server receives the SMS, it (i) learns that Alice got the token; and (ii) gets her cell number from the message. The UPI server uses this information to hard-bind Alice's cell number to her device.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>USENIX Association 29th USENIX Security Symposium 1503</head><p>UPI server also sends a confirmation to BHIM that it received the SMS.</p><p>5.</p><p>Step 5: BHIM requests a status of its device's hardbinding from the UPI server by sending the registration token back to the server as an HTTPS message.</p><p>6.</p><p>Step 6: The UPI server responds with a verification status that includes Alice's customer ID, a registration token, etc. back to Alice. By now, the UPI server has verified both Alice and her device <ref type="figure" target="#fig_1">(Figure 2</ref>, #4).</p><p>7.</p><p>Step 7: BHIM asks Alice to set a passcode <ref type="figure" target="#fig_1">(Figure 2</ref>, #5). The app concatenates the SHA-256 hash of Alice's passcode with her cell number and sends it as an HTTPS POST request to the UPI server.</p><p>8.</p><p>Step 8: The UPI server issues a login token to Alice (BHIM), which confirms that her profile is setup.</p><p>9.</p><p>Step 9: BHIM then shows Alice a list of banks that support UPI <ref type="figure" target="#fig_1">(Figure 2</ref>, #6). When Alice chooses her bank from this list, BHIM sends a bank ID to the UPI server.</p><p>10.</p><p>Step 10: The UPI server sends Alice's bank account details such as her masked account number, the hash of the account number, bank name, IFSC code, etc. back to BHIM <ref type="figure" target="#fig_1">(Figure 2</ref>, #7).</p><p>The protocol description until now has seen two factorsa) cell phone (and hence a device fingerprint) as required by the UPI spec; b) a secret passcode-both of which BHIM sends to the UPI server during the handshake. For BHIM, this means that the payment app server that authenticates a user's passcode and the UPI server that verifies a device's fingerprint is the same, a fact that is not surprising since the designers of UPI also wrote BHIM.</p><p>Finally, to enable transactions, Alice sets a UPI PIN on her bank account for which she needs her bank's debit card number and expiry date, as mentioned in Section 2.1.</p><p>Alternate Workflow1. In the default workflow described above, BHIM sends the device registration token to the UPI server as an SMS message for device hard-binding (Step 3). In case the UPI server does not receive the SMS, thus failing to hard-bind, BHIM provides an alternate workflow for hardbinding, as shown in <ref type="figure" target="#fig_4">Figure 4a</ref>. BHIM prompts Alice to keyin her cell number; BHIM sends the keyed-in cell number along with the device registration token to the UPI server as an HTTPS message. The UPI server sends an OTP to Alice, which she must enter to complete device binding. The remainder of the protocol proceeds as before.</p><p>Alternate Workflow2. If Alice, an already registered user, changes her cell phone, then the UPI server has to re-bind her cell number with the new cell phone. At the time of device binding, the UPI server finds that an account for Alice already exists and notifies BHIM of the same (accountExists flag in</p><p>Step 6). The UPI server prompts Alice for her passcode, and once Alice is verified (Step 7), the server sends back Alice's bank account information that she previously added to BHIM (Step 10). This workflow makes it convenient for Alice to transfer her bank accounts to another phone, without going through the hassle of adding all her bank accounts again.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.3.1">Potential security holes-initial analysis</head><p>Before we describe the attacks on the UPI protocol, we first discuss three potential security holes that we observe: 3. Potential Security Hole #3: In UPI's default workflow, Alice at no point provides a secret that she shares with her bank to confirm her identity. Nevertheless, the UPI server reveals an existing user Alice's account details in the alternate workflow2.</p><p>None of the security holes by themselves are exploits as yet. Below we discuss the potential attacks as a result of these holes.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.3.2">Attack #1: Unauthorized registration, given a victim's cell number</head><p>In this attack, we show how a remote attacker, Eve, can set up a UPI account, given a victim's cell number. For the attack to succeed, Eve requires only one thing: the victim's cell phone to have Mally app installed. The attack setup is as follows. Eve on her phone has a repackaged version of BHIM that has client-side security checks disabled. Eve sets up a command and control (C&amp;C) server, puts out Mally as a potentially useful app on various app stores, and waits for unsuspecting users to install Mally. As discussed in the Threat Model (Section 2.3), Mally has RECEIVE_SMS permission. An unsuspecting user Alice, uses a legitimate version of BHIM on a non-rooted phone, as is the best practice for Android.</p><p>For attacks to happen, Eve must have a way to discover a victim's cell number. To simplify the attack description, we assume that Mally also has READ_PHONE_STATE permission, which it uses to get the cell number from the victim's phone (almost 35% of the apps use this permission <ref type="bibr" target="#b46">[60]</ref>). We show in Section 3.3.6 how Eve can discover a victim's cell number without the READ_PHONE_STATE permission.</p><p>Below we show how Eve can register with the UPI server as Alice, after Alice unwittingly installs Mally on her phone. 6. Eve: Select the bank from the bank list. Eve next selects each bank one-by-one on BHIM's bank selection screen until she finds one that the UPI server accepts. The UPI server will accept a bank if Alice has an account at that bank and has her cell number registered with that account.</p><p>The UPI server does not appear to restrict brute-forcingan error just brings the user back to the bank selection screen. In any case, brute-forcing is difficult to prevent since the list of banks is relatively short, and Eve can try out some of the larger banks where most people are likely to have an account with such as the State Bank of India or ICICI Bank.</p><p>Eve can repeat Attack #1 until she discovers all of Alice's bank accounts and registers with them.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.3.3">Attack #1 : Eve: overcoming BHIM's passcode check for existing BHIM user</head><p>Attack #1 on a registered user Alice stalls when BHIM prompts the attacker Eve for Alice's BHIM passcode. We present three solutions to overcome the passcode barrier.</p><p>The first workaround is for Eve to wait for Mally to intercept and leak the new passcode. We found that Mally can do this as follows. Mally waits for Alice to launch BHIM. Mally detects BHIM's login activity to draw an overlay on it (see <ref type="figure" target="#fig_4">Figure 4c</ref>, keys demarcated for clarity). To draw the overlay, Mally exploits a toast overlay vulnerability CVE-2017-0752 <ref type="bibr" target="#b29">[39]</ref> that requires no additional permissions from the user. Once Mally intercepts the passcode, it forwards the passcode to the C&amp;C server.</p><p>The second workaround is for Mally to request and use Android's accessibility permission, which enables Mally to observe user interactions and intercept the passcode.</p><p>An attacker may, at this point, choose to reset the user's passcode. We find that BHIM's passcode reset workflow requires a user's bank account number instead of the debit card number. On the surface, it seems unlikely that Eve will know Alice's bank account number, and this, in isolation, may have been a reasonable passcode reset process. However, as described in Potential Security Hole #3, recall that the default UPI workflow reveals a user's bank account number. Eve can use the bank account number to reset Alice's BHIM passcode, courtesy of the UPI server.</p><p>Impact of Attack #1 and #1 . Eve cannot do transactions on the linked bank accounts after a successful registration. This attack, however, leaks private data such as the set of banks where Alice has bank accounts as well as Alice's bank account numbers. We also noticed that the UPI server sends a device registration token, a customer identifier, a login token, a hash of the account number, and the bank's account number back to BHIM (client) during the protocol handshake (see <ref type="figure" target="#fig_2">Figure 3)</ref>. BHIM masks the bank account number but, nevertheless, the UPI server sends it, and Eve can get to it using the repackaged BHIM on Eve's phone. The Attack #1 is also a precursor to Attack #2 or Attack #3, which are more devastating. Note that the use of accessibility is only helpful in simplifying the attack; we do not require it for Attack #1.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.3.4">Attack #2: Unauthorized transactions on bank accounts given cell number and partial debit card number</head><p>In this attack, which follows Attack #1, Eve extends the previous attack to enable transactions on a bank account of a user Alice that does not use any UPI apps. For the attack to succeed, Eve requires additional knowledge about Alice: the last six digits of Alice's debit card number and expiry date. Debit cards are carelessly given to unknown people in stores and restaurants in India at the time of checkout (often with cell numbers, as cashiers routinely collect cell numbers to send discount offers or give reward points). The majority of debit cards in India also carry the bank name. Using a debit card for purchases in stores or online in India requires the user to key-in a secret PIN. In this attack, even without the debit card PIN from Alice, with access to the debit card information alone, Eve can set a UPI PIN to enable transactions on the associated bank account. Impact. Losing or sharing one's debit card information along with the cell number (not the actual card, the actual cell, or the debit card PIN) can enable an attacker to set a UPI PIN and do transactions on one's bank account. Eve does not need bank account numbers or any of Alice's passcodes. The attack appears to be less scalable than Attack #1, however, since Eve needs to harvest debit card numbers along with associated cell numbers. For users who lose the two pieces of data to Eve and also install Mally, the impact is devastating. Eve could empty their account, with money transferred to any user in India. The attack does not even require a victim to have ever used a UPI app previously. To reset the UPI PIN, Eve requires the last six digits of the debit card number, expiry date, and an OTP, all of which she has.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.3.5">Attack #3: Unauthorized transactions without debit card numbers</head><p>This attack follows from Attack #1 for an existing user Alice. Such a user would have previously set up a passcode to log in to BHIM and UPI PIN to authorize transactions. Unfortunately, Mally can intercept the UPI PIN using either toast overlays or by requesting accessibility permission. As an alternative to intercepting UPI PIN, Eve can attempt to reset the UPI PIN (recall that Eve has already registered with the bank account in Attack #1 ). As we described in the previous attack, resetting the UPI PIN requires debit card information, which reduces this attack to Attack #2. In short, either Mally intercepting UPI PIN or Eve possessing Alice's debit card information appears to be required. Eve now has all the factors to do transactions from her phone as Alice.</p><p>Impact: Eve can transfer money out to arbitrary UPI-based accounts in India. Note that for an attack on an existing user, Eve does not require any knowledge about Alice except for two things that Mally intercepts-an SMS message and the UPI PIN.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.3.6">Eliminating the need for READ_PHONE_STATE permissions</head><p>The attacks we described so far relied on Mally knowing the victim's cell number and sending it to the C&amp;C server, as a precursor to all the attacks. Now, we describe how Eve can associate a victim's cell number with an instance of Mally without Mally needing the READ_PHONE_STATE permission.</p><p>Given a set C of all targeted cell numbers (which is any list of cell numbers -valid or invalid), the following steps precede Attack #1: (i) For each cell number in C, send an SMS to that number with the following content: [receiver's cell number, "SMS TEST"] (or any such message).</p><p>(ii) Consider a subset SC of phones C that have Mally installed. Mally looks for the string "SMS TEST" and saves the cell number in the SMS as the victim's cell number. All instances of Mally that receive such an SMS message can thus learn their victim's cell number and report back to the C&amp;C server to initiate the user registration protocol.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.3.7">Whose problem: Android or UPI?</head><p>There is a potential question as to whether the attacks we discovered are primarily due to limitations of Android's permission model or due to flaws in the UPI design (and who should fix them). We think there are problems with both. We note that no bank-related credentials are required for an adversary to get a user's bank account number, given the user's cell number (in any of the handshakes-default or alternate). Attack #2 uses the last six digits of a debit card number and expiry date, a weaker threshold than for online and in-store purchases using debit cards where the entire number and the PIN is typically required in India. Alternate workflows in the UPI protocol contribute significantly to enabling our attacks. We, of course, leverage Android's security limitations as well, just as any good attacker would be expected to. We further discuss this issue in Section 5.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.4">Other UPI 1.0 Apps</head><p>We now discuss whether the attacks on BHIM apply to the users of other UPI 1.0 apps. Our findings from testing three apps popular at the time of the study-PhonePe, Ola Wallet, and Samsung Pay-suggest yes. As shown in <ref type="figure" target="#fig_3">Figure 5</ref>, at the time of UPI 1.0, BHIM and PhonePe were the most popular UPI apps. PhonePe is also one of India's oldest payment apps. We did not include Google Pay (called Tez then) since it was not widely used, and Paytm was popular more for its wallet features. Below we discuss the attacks and its nuances under the same threat model. First, these apps differ from BHIM because they are "thirdparties" that integrate with UPI. Each third-party app uses its own factors for user profile setup. Hence, as discussed in the UPI specs Section 2.2, for third-party apps, their payment app server does the passcode-based authentication of a user while the UPI server verifies the device fingerprint and UPI PIN.</p><p>NPCI requires third-party apps to use NPCI's interface (libraries) for device fingerprinting and entering UPI PIN. We confirm that these apps internally use a common NPCI library to interface with the UPI server at the time of manual inspection. The UPI interface is accessible to a third-party app only after the user authenticates with the third-party payment app server. Thus, device binding and UPI PIN set up is done with the UPI server only after the user's passcode is set up with the payment app server. Attack #1, unauthorized registration of a new user, can now be done by an adversary by setting up a user profile with the third-party app server and then exploiting the potential security holes of Section 3.3.1. Third-party apps make it easy for an attacker Eve to set up a profile. Eve can do it in two ways-Eve can either create a profile from her phone using her cell number (which is straight-forward) or create a profile from her phone using Alice's cell number. As an example of the latter, PhonePe provides an option to key-in a cell number at the time of user profile setup. Eve can use this option to keyin Alice's cell number in the app. For Eve to set a passcode on behalf of Alice, Eve needs an OTP the PhonePe server sends Alice. However, Eve can get the OTP through Mally on Alice's phone, given Mally's RECEIVE_SMS permission. The rest of Attack #1 continues as before, and Attack #2 follows from Attack #1.</p><p>For Attack #1 on an existing user, an adversary can exploit any authentication workflow flaws on the third-party app or app server. Once logged in, Eve can exploit the potential security holes (Section 3.3.1). For Eve to log in as an existing user, Eve either has to get Alice's password or has to reset Alice's password. To get Alice's password, Mally can either use the toast overlay attacks or the accessibility permission. A straightforward approach, however, is to exploit the app's passcode reset mechanism. On PhonePe, for instance, the passcode reset relies only on an OTP. On Ola Money, passcode reset requires a secret that is set up at the time the user creates a profile (which we could intercept). We note that once Eve logs in as Alice on Eve's phone, PhonePe logs Alice out from her phone. In Ola Money, however, Alice will not receive any notification since the app by design permits login from many devices. The rest of Attack #1 continues as before, and Attack #3 follows from Attack #1 .</p><p>Samsung Pay (SPay) is slightly different in that its security measures make use of a Trusted Execution Environment (TEE) <ref type="bibr" target="#b41">[52]</ref> implementation called KNOX. To use SPay, a user must have a Samsung account configured at the time of setting up the phone and additionally configure her fingerprint or a SPay PIN. SPay does not integrate with UPI; instead, it integrates with two UPI apps-Paytm and MobiKwik. Hence a user can choose one of the two apps that come with SamsungPay (they are also available for download separately on Google Play). Since both Paytm and MobiKwik app servers do not integrate with KNOX, they cannot use KNOX's hardware-based security features for device hard-binding at the time of user registration. The user's fingerprint or SPay PIN is used to authenticate a user with the device; neither the payment app servers nor the UPI server uses it for user registration. We test SamsungPay using MobiKwik. Mobikiwk's workflow is the same as Ola Money except that its passcode reset workflow uses a passcode and OTP, both of which we can intercept. This makes SPay prone to attacks that result from integrating with third-party UPI apps.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.5">UPI 1.0 Responsible Disclosures</head><p>We reported the vulnerabilities of BHIM to NPCI, CERT-IN, and CERT-US, with the initial disclosure to CERT-IN in June 2017. We followed up with our disclosures again in Oct 2017 (timelines in <ref type="figure" target="#fig_3">Figure 5</ref>). Subsequently, we reported the vulnerabilities to CERT-US and got the following <ref type="bibr">CVEs: CVE-2017</ref><ref type="bibr">- 9818, CVE-2017</ref><ref type="bibr">-9819, CVE-2017</ref><ref type="bibr">-9820, CVE-2017</ref> for BHIM. We also got CVEs for our disclosures to other app vendors from CERT-US <ref type="bibr">(CVE-2018</ref><ref type="bibr">-15660, CVE-2018</ref><ref type="bibr">-15661, CVE-2018</ref><ref type="bibr">-17400, CVE-2018</ref><ref type="bibr">-17401, CVE-2018</ref><ref type="bibr">-17402, CVE-2018</ref>) and a $5k bounty from Samsung (CVE-2018-17083) for a sensitive data leak. The original CVEs disclosed relied on accessibility permission, though we later determined that the attacks can be carried out without it.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.6">Preliminary Analysis of UPI 2.0 Protocol</head><p>In August 2018, UPI made the first update to the UPI specification, UPI 2.0, over a year after we first reported the vulnerabilities to them. Based on our disclosures, UPI 2.0 does prevent our attacks in the current form. We present our preliminary findings; a detailed analysis of UPI 2.0 is currently ongoing. We follow the same approach we employed for UPI 1.0 and reverse-engineered the UPI 2.0 protocol using UPI 2.0 versions of four popular apps-BHIM, Google Pay, Paytm, and Amazon Pay. Google Pay (GPay) and Paytm are the leaders in the market, each with a 36% market share.</p><p>Some of our findings are as follows. We evaluate the UPI 2.0 version of BHIM (which is also used by many banks as their official UPI app under their own brand, e.g., BHIM SBI Pay and BHIM PNB). We found that NPCI now forces an update on BHIM to its latest version. In UPI 2.0, in addition to the device information we saw in UPI 1.0, BHIM also sends the device's IMEI number, SIM number, network type, etc., to the UPI server for device hard-binding. In BHIM's latest update, NPCI removed the alternate workflow1, and hence the Potential Security Hole #1 that we exploited for our attacks, a positive change. However, the other vulnerabilities persist as detailed below.</p><p>On GPay, we can set up a user's profile similar to how we did for Attack #1 and Attack #1 in third-party UPI 1.0 apps. From GPay's traffic, we find that GPay authenticates with Gmail servers using OAuth2. Thus an adversary Eve can set up a GPay account as follows. Eve can use her own Gmail ID on her phone and can key-in Alice's cell number at the time of login to GPay. Google sends an OTP to Alice's cell number, which Mally can intercept (given Mally's RECEIVE_SMS permission). For Eve to proceed, GPay must send an SMS message containing Alice's device registration token back to the UPI server from Alice's phone.</p><p>In the absence of the alternate workflow1 that previously enabled the attacks, we explored SMS spoofing as a means for Eve to send an SMS message to the UPI server. For the attack to work, the UPI server must get the spoofed SMS message from Alice's cell number. For proof-of-concept, we tested SMS spoofing with several services that claim to provide nonanonymous SMS spoofing. However, it did not work for a test number we own in India. While we can send SMS messages either anonymously or using a default number provided by the SMS spoofing service, we are unable to control the sender number of the SMS message, a must for the attacks to work. We are currently exploring this and other SMS related attack vectors noted in prior research <ref type="bibr" target="#b38">[49]</ref>. Alternatively, Mally can request SEND_SMS permission and send the SMS message from Alice's phone.</p><p>On Paytm, we studied the handshake by instrumenting the app with debug statements at the bytecode level. Below is a snippet of the bank account information that Paytm receives during the handshake. The authors mask all the details below for privacy. We note that just as before, UPI sends back the bank account details without requiring a user to provide any credentials shared with the bank. We confirm the same on Amazon Pay as well. Amazon Pay uses Amazon credentials and the default cell number set in a user's Amazon account. To create a profile, an adversary Eve can set Alice's cell number in her Amazon credentials.</p><p>Thus, we have confirmed that sensitive information leaks (similar to those in Attack #1) still exist. An open question remains on the possibility of other attacks, such as performing unauthorized transactions.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4">Lessons Learned</head><p>Below, we summarize the problems in the design of the UPI 1.0 protocol that enabled potential attacks.</p><p>1. The UPI protocol reveals bank account details of a user in any handshake (default or alternate), given the user's cell number and no bank-related credentials.</p><p>2. Device hard-binding, the first factor, relies on data that is easily harvested from a device. UPI does not use any secrets for this step.</p><p>3. A weak device binding mechanism allows a user (or an adversary) to bind her cell phone with a cell number registered to the bank account of another user.</p><p>4. Setting the UPI PIN, the second factor, requires partial debit card information printed on the card, which is not a secret. The debit card PIN, a secret a user shares with the bank, is never used. This is a lower bar as online, and in-store purchases require the entire card number and the debit card PIN.</p><p>5. When transferring an existing user's UPI account to a new phone, UPI does not require the user to provide any bank-related credentials or the printed debit card information to authorize transactions from the new phone.</p><p>The UPI protocol relies on the UPI PIN alone.</p><p>6. On third-party apps, the passcode, the third factor, is managed by the third-party app server and hence easy to bypass. An attacker can bypass the passcode requirement by setting up an attacker-controlled profile (using attacker credentials) with the app. In this case, UPI effectively relies only on two factors-device binding and UPI PIN.</p><p>7. The bank account number leaked from the default workflow of any of the third-party apps is enough to reset a user's passcode on another app (such as BHIM).</p><p>We note that though UPI 2.0 closes the weak device binding mechanism #3 above, the other issues persist. The overall weakness in UPI is that user registration requires only the knowledge of a cell number and the ability to receive one SMS message from that number. Attacks only require Mally to do two things: provide the OTP during registration and, for attacks on existing users of UPI, steal their UPI PIN. Need for Mally can be circumvented in two ways-unauthorized transfer of a user's cell number to the attacker or by social engineering attacks. Both are feasible, and social engineering attacks are scalable in India, given the cheap labor cost. For non-users of UPI, getting them to reveal an OTP during registration is sufficient.</p><p>There are significant risks associated with relying on cell numbers as the only means of user identification. Banks in India accept any cell number that the user registers with their accounts-there is no cross-check to verify if the cell number given actually belongs to the user. It is not uncommon, for example, for members of a family to provide the same cell number to the bank for their individual bank accounts. Thus, a person with access to family members' debit card numbers can add all their bank accounts to the same app for transactions. One may view this either as a convenience or a security and privacy risk, depending on one's perspective.</p><p>Finally, we would like to clarify that our claim is not that all the high-level lessons learned are new; most security principles are well-known by now. Nevertheless, we want to con-textualize the lessons learned from the perspective of a widely adopted financial protocol. We note that both the designers of Android and UPI contribute to the flaws we discovered, which made getting app vendors to do fixes difficult. App vendors often blame it on Android design or users, who should not be granting dangerous permissions to apps. At the same time, UPI protocol designers could have factored in the current state of Android and security-awareness among users in India and made the protocol more secure.</p><p>It is well-known by now that security by obscurity does not help. We think the risks could have been better addressed had UPI published the protocol details once it was internally vetted, thus allowing the research community to analyze it further. We show how protocol analysis from the point-of-view of an adversary trying to uncover unpublished workflows and secrets, though important, is often overlooked for applicationlevel protocols.</p><p>Limitations of our study: A limitation of our study is that we only studied seven UPI apps to analyze the security of the UPI protocol. Automated analysis techniques could not be used given the number of security defenses these apps use. Prior research by <ref type="bibr">Reaves et al. [48]</ref> also reverse-engineered seven apps that resisted automated analysis. However, we consider seven to be a reasonable number for our work since our focus was on uncovering flaws with the UPI protocol that is common across the apps. Also, the apps we analyzed have 88% of the market share combined, and of the 88 UPI apps, a majority of them are minor variations of BHIM, which we analyzed. Nevertheless, a larger study could provide additional insights into the security of the payment ecosystem in India and will also be useful to other countries that decide to use a common payment interface.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5">Mitigation</head><p>We discuss possible mitigation strategies against the attacks and their pros and cons below.</p><p>UPI mitigations. We discuss steps the government can take to address some of the issues we have raised.</p><p>Minimizing protocol data: Our attacks show how protocol data revealed during the default workflow was used to exploit an alternate workflow. This was possible because the UPI server sent more data than the client needed to see. For instance, while the masked bank account number is useful to display on the screen, bank-specific details such as the bank name, account number and IFSC code, sent in the clear can be excluded from the handshake.</p><p>Secure alternate workflows: We leveraged two alternate workflows in our attacks, as summarized in Section 4. Though UPI 2.0 closes one of the flows, the other alternate flows are either unsecured or secured using weak credentials. For instance, an alternate workflow allowed a user to bind her cell phone with a cell number registered to the bank account of another user, even without providing any secrets pertaining to the other user.</p><p>Mandate opt-in into UPI apps: Currently, as we are aware, UPI services are by default available to users of a bank that is integrated with UPI; the UPI guidelines do not require users to opt-in with their bank. An opt-in requirement would increase risk awareness as well as cut down security risks for non-UPI users such as credit card users, cash users, or users of wallet apps. Alternatively, a user could be required to do an in-person verification with their local bank branch to register for UPI services on their cell phone. This can prevent unauthorized registrations of a user, which automatically eliminates the other attacks.</p><p>Provide opt-out option: As a follow-up on the previous mitigation, non-users and users wanting to discontinue UPI services must be allowed to opt-out for security and privacy reasons. The downside of making UPI optional is the negative impact it may have on UPI adoption.</p><p>Use debit card number + something user knows: Debit cards in India are Chip+PIN cards, and doing transactions with them always requires entering a PIN. In contrast, doing transactions via the UPI apps requires neither-only the information that is printed on the card-resulting in a weaker authentication path. Fixes to this are unfortunately difficult if Mally is powerful enough to intercept PIN entry. However, assuming user interactions can be secured on Android (e.g., see <ref type="bibr" target="#b14">[18]</ref>), UPI guidelines requiring the user to enter a secret shared with the bank to enable transactions will be useful.</p><p>Require strong device binding: The UPI specification could require payment apps to do a stronger device-to-cell number binding. Since binding is one of the most critical steps of the protocol, the bank may issue a one-time secret to the user out-of-band, say, when the user visits the bank for UPI activation. The user has to enter this secret the first time she uses the UPI app on her phone. Additionally, the UPI server must verify that the UPI app it is communicating with is an official app running on a non-rooted phone. If the UPI server can somehow establish that, then an attacker may not be able to use a repackaged version of a UPI app to register an account. Unfortunately, this is tricky to enforce.</p><p>Android mitigations. In the attacks we describe, the attack starts when Mally on a user's phone gets the user's cell number as an SMS from the attacker. A possible defense would be for Android to have a policy that prevents SMS permissions from being requested by apps. Google is already moving in that direction. As of January 2019, Google announced that apps could not request SMS permissions unless they are the default SMS handler and get explicit approval from Google. How effective this policy is, remains to be studied. We note that this does not make the attack impossible. It would merely require Mally not just to be installed but also accepted as the default SMS handler (or get approved as an exception by Google). Also, the policy is specific to the Google Play store-apps from other stores could still introduce risks. Many popular carriers in India support alternate app stores such as Aircel and Airtel that allow SMS-triggered downloads <ref type="bibr" target="#b33">[43]</ref>.</p><p>User mitigations. Since Eve requires a user's cell number to initiate the attack, using a private cell number for bank accounts may slow down an attack. Unfortunately, it does not entirely prevent it. If the user has installed Mally, Mally suffices to detect the user's cell phone number (Section 3.3.6. Thus, users would also need to be careful to never install apps with read or receive SMS permissions on phones they use for banking.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="6">Related Work</head><p>Panjwani et al. did one of the first studies on an Indian payment system called EKO, a mobile service provider <ref type="bibr" target="#b36">[47]</ref>. They show PIN recovery attacks that could result in a user impersonation attack. Reaves et al. <ref type="bibr" target="#b37">[48]</ref> first analyzed 47 mobile apps from 28 countries for SSL vulnerabilities and then manually reverse-engineer seven branchless banking apps, including three Indian payment apps (Airtel Money, Oxigen Wallet, and MobileOnMoney). They discover that an attacker can bypass authentication because of the use of an insecure channel, the use of weak crypto, or the use of weak passwords. A follow-up work by Castle et al <ref type="bibr" target="#b6">[9]</ref> studies 197 payment apps, including some from Southern Asia (the apps they study is not listed). Castle et al. point out that payment apps have sufficient safeguards to prevent attacks, and the vulnerabilities pointed out by Reaves et al. are either because of regulatory constraints or from using old Android phones. They corroborate their findings with developer interviews with participants from well-established organizations.</p><p>Payment apps have been studied in other countries, as well. <ref type="bibr">Yang et al. [62]</ref> notes implementation weaknesses in the thirdparty SDKs included by Chinese financial apps that can result in integrity attacks on financial transactions. Jung et al.</p><p>[31] studies repackaging attacks on seven different banking apps in Korea. Their attacks could bypass integrity checks and antivirus checks of banking apps. Yacouba et al. <ref type="bibr" target="#b24">[33]</ref> launched a DDoS attack on a banking server through a repackaged banking app. Roland et al. demonstrates an NFC relay attack on the Google Wallet payment system <ref type="bibr" target="#b39">[50]</ref>.</p><p>Research has pointed out several vulnerabilities in financial applications. <ref type="bibr">Taylor et al.</ref> [56] did a static analysis of financial apps on Google Play. They discover weaknesses such as the creation of world-readable and writable files, the use of unsecured content providers, and the use of weak random number generators. Bojjagani et al. <ref type="bibr" target="#b4">[7]</ref> perform static and dynamic analysis on banking apps to discover 356 exploitable vulnerabilities, details unknown, from an unknown set of samples.</p><p>AlJudaibi et al. <ref type="bibr" target="#b2">[3]</ref> discuss 11 significant threats faced by mobile devices such as insecure data storage, weak server-side control in third-party apps, use of a rooted device, and lack of security in software and kernel. Chothia et al. <ref type="bibr" target="#b8">[11]</ref>, Stone et al. <ref type="bibr" target="#b43">[55]</ref> and <ref type="bibr">Bojjagani et al. [6]</ref> analyze both Android and iPhone apps for lack of hostname verification when an SSL certificate is pinned. Their results show how popular banking apps with these vulnerabilities are prone to phishing and man-in-the-middle attacks.</p><p>Protocol flaws that result in attacks on payment cards that use chip and PIN (EMV) <ref type="bibr" target="#b5">[8,</ref><ref type="bibr" target="#b25">35,</ref><ref type="bibr" target="#b28">38</ref>, 51] and 3 Domain Secure 2.0 <ref type="bibr" target="#b1">[2]</ref>, an authentication protocol for web-based payments, are also studied before. Many issues concerning financial inclusion for developing countries such as Brazil and Africa have been extensively studied <ref type="bibr" target="#b18">[22,</ref><ref type="bibr" target="#b32">42,</ref><ref type="bibr" target="#b47">61]</ref>. Weaknesses in financial systems as a result of excessive reliance on OTPs <ref type="bibr" target="#b7">[10,</ref><ref type="bibr" target="#b27">37,</ref><ref type="bibr" target="#b38">49,</ref><ref type="bibr" target="#b45">59]</ref> and its implication on Internet-based services are also well-known <ref type="bibr">[1,</ref><ref type="bibr">16,</ref><ref type="bibr" target="#b23">32,</ref><ref type="bibr" target="#b27">37,</ref><ref type="bibr" target="#b42">53,</ref><ref type="bibr" target="#b49">63]</ref>.</p><p>Prior studies on Indian payments apps were done before the Indian government launched the Unified Payment Interface, a first of its kind. To the best of our knowledge, we are the first to conduct a study on UPI.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="7">Conclusion</head><p>In this paper, we used a principled approach to analyze the UPI 1.0 protocol and uncovered core design weaknesses in its unpublished multi-factor authentication workflow that can severely impact a user. We showed attacks that have devastating implications and only require victims to have installed an attacker-controlled app, regardless of whether they use a UPI app or not. All the vulnerabilities identified were responsibly disclosed. A subsequent software update to UPI 2.0 prevents the discussed attack vectors for an exploit. Unfortunately, several underlying security flaws remain that suggest a need for further vetting and security analysis of UPI 2.0, given the protocol's importance for mobile payments in India. We discussed the lessons learned and potential mitigation strategies. Finally, we expect our findings to be useful to other countries that look to implement a common backend infrastructure for financial apps. parameter p1. We inserted the code in Listing 2 after line #38, right at the beginning of the function (after the function prologue at line #35). The inserted code snippet prints the parameters using the System.out.print API call. The printed debug statements appear in Android logcat logs. We did a similar instrumentation for HTTP POST methods.</p><p>Some of the apps such as Paytm, that contain several DEX files (with each DEX file containing a maximum of 65536 methods), were even more challenging to instrument, as they obfuscate the calls to most of the third-party libraries they use. In such cases, further experimentation and analysis was required to discover the calls. That apart, the security defenses used by these apps may also change across app revisions. For instance, while older versions of Paytm could be repackaged, the latest version of the app resists repackaging. <ref type="bibr">1</ref> . class public Lin / org / npci / upiapp / utils / RestClient ; 2 . super Ljava / lang / Object ; 3 . source " RestClient . java " </p></div><figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_0"><head>Figure 1 :</head><label>1</label><figDesc>Figure 1: Internet vs. UPI-based Money Transfer</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_1"><head>Figure 2 :</head><label>2</label><figDesc>Figure 2: BHIM User Registration Using 3FA</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_2"><head>Figure 3 :</head><label>3</label><figDesc>Figure 3: BHIM User Registration Default + + BHIM masks bank account number in step 10 of the handshake. The authors masked the other info to safe-guard privacy.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_3"><head>Figure 5 :</head><label>5</label><figDesc>Figure 5: Popular UPI apps and disclosure timelines</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_4"><head>4 5</head><label>4</label><figDesc># annotations 6 . annotation system Ldalvik / annotation / MemberClasses ; 7 value = { 8 Lin / org / npci / upiapp / utils / RestClient$UnsuccessfulRestCall ; 9 } 10 . end annotation 11 12 # static fields 13 . field private static final a: Ljava / lang / String ; 14 15 . field private static b: Lorg / apache / http / impl / client / DefaultHttpClient ; 16 17 . field private static c: Lorg / apache / http / impl / client / DefaultHttpClient ; 18 19 . method public static a( Landroid / content / Context ; Ljava / lang / String ; Ljava / util / Map ;) Lin / org / npci / upiapp / models / ApiResponse ;) 20 . locals 6 21 . annotation system Ldalvik / annotation / Signature ; 22 value = { 23 "(" , 24 " Landroid / content / Context ;" , 25 " Ljava / lang / String ;" , 26 " Ljava / util / Map " , 27 " &lt;" , 28 " Ljava / lang / String ;" , 29 " Ljava / lang / String ;" , 30 " &gt;;)" , 31 " Lin / org / npci / upiapp / models / ApiResponse ;" 32 } 33 . end annotation 34 35 . prologue 36 const /16 v5 , 0 x130 37 38 . line 404 39 new -instance v2 , Lorg / apache / http / client / methods / HttpGet ; 40 41 invoke -direct { v2 }, Lorg / apache / http / client / methods / HttpGet ;-&gt;&lt; init &gt;() V 42 43 . line 405 44 ... 45 move -result -object v2 46 const -string v3 , " . Response Code : " 47 48 invoke -virtual {v2 , v3 }, Ljava / lang / StringBuilder ;-&gt; append ( Ljava / lang / String ;) Ljava / lang / StringBuilder ; 49 50 move -result -object v2 51 invoke -interface { v0 }, Lorg / apache / http / HttpResponse ;-&gt; getStatusLine () Lorg / apache / http / StatusLine ; 52 53 move -result -object v0 54 invoke -interface { v0 }, Lorg / apache / http / StatusLine ;-&gt; getStatusCode () I 55 56 move -result v0 57 ... 58 . end method Listing 1: BHIM code snippet USENIX Association 29th USENIX Security Symposium 1515</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_1" validated="false"><head>1 .</head><label>1</label><figDesc></figDesc><table>Potential Security Hole #1: For an attacker Eve to take 
over Alice's account, one of the first barriers to overcome (a) BHIM Alternate Handshake 

(b) BHIM Attack Overview 
(c) Overlay Attack 

Figure 4: BHIM Alternate Handshake &amp; Attack 

is UPI's device binding mechanism that binds Alice's 
cell number with her cell phone. For Eve to break the 
binding, Eve must able to bind her cell phone with Al-
ice's cell number. Though the default workflow makes 
this hard, the alternate workflow1 provides a potential 
fallback that allows Eve to send Alice's cell number as 
an HTTPS message from Eve's phone. 

2. Potential Security Hole #2: The alternate workflow1 
uses OTP verification for device-binding. If Alice, say, 
enters a friend Bob's cell number on her phone, the UPI 
server will send the OTP to Bob's phone. If Bob shares 
that OTP with Alice, then Alice can confirm the OTP 
to the UPI server, which will hard-bind Alice's phone 
to Bob's cell number. As a result, Bob will receive all 
future SMS messages sent by the UPI server to Alice. 

</table></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_2" validated="false"><head>1 .</head><label>1</label><figDesc></figDesc><table>Mally: I am installed! Mally, once installed on Alice's 
phone, reports to Eve's C&amp;C server over the Internet 
(Android automatically grants INTERNET permission). 
Mally reports Alice's cell number to Eve as a way for Eve 
(i) to discover Alice's cell number; and (ii) to associate 
the instance of Mally with Alice, which is essential for 
Eve to scale the attacks to many users. 

2. Eve: Use the cell number for hard binding: Eve exploits 
Potential Security Hole #1 in BHIM's workflow to bind 
her device to Alice's cell number as shown in Figure 4b. 
Eve starts by putting her cell phone in airplane mode 
while remaining connected to the Internet through Wi-
Fi. BHIM app on Eve's phone starts the handshake by 
sending Eve's device details. The UPI server responds 
with a device registration token for Eve. Ideally, Eve's 
BHIM must relay the token back to the UPI server via 
SMS. However, since Eve has turned off SMS messag-
ing, the SMS containing the token fails to deliver. BHIM 
prompts Eve to key-in a cell number and Eve keys-in 
Alice's cell number. BHIM now sends Eve's device reg-
istration token and Alice's cell number to the UPI server as an HTTPS message for hard-binding. The UPI server 
then sends an OTP to Alice. 

3. Mally: Intercept the OTP. On Alice's phone, Mally in-
tercepts the incoming OTP message because its RE-
CEIVE_SMS permission allows it. Mally then sends 
the OTP to the attacker's C&amp;C server as an HTTPS mes-
sage, along with Alice's cell number. (The cell number 
here is not strictly required. It merely allows the C&amp;C 
server to associate each OTP with a victim and thus re-
duce some guesswork, in case it receives OTPs from 
other Mally installations.) 

4. Eve: Acknowledge the OTP. The C&amp;C server sends 
an SMS message containing the OTP to the attacker's 
phone. Note that the BHIM app normally checks the ori-
gin of the OTP message it receives and accepts the OTP 
only if it is from a known UPI server. However, Eve dis-
abled this safeguard before the attack in the repackaged 
version of BHIM on her phone, thus exploiting Potential 
Security Hole #2 

5. Eve: New BHIM user? Create BHIM's Passcode: BHIM 
on Eve's phone will ask for BHIM's 4-digit passcode. 
Now Eve does not know if Alice is a new user of BHIM 
or a registered user. However, Eve can determine this 
from Step 6 of the handshake where the UPI server sets 
a flag called accountExists to false for a new user. Eve 
can proceed to set a new passcode for a new user Alice. 
We discuss the workaround for the attack on an existing 
BHIM user in Attack #1 . 

</table></figure>

			<note place="foot" n="1"> A recent Indian Supreme Court ruling forbids Aadhar&apos;s biometric verification for issuing cell numbers. The impact of that ruling on UPI-based apps and banks is yet to be seen, as it may make it easier for an attacker to do an unauthorized transfer of a cell number and then take over an account. We do not discuss this attack vector in this paper.</note>

			<note place="foot" n="1"> &quot; name &quot;:&quot;956785 XXXX@paytm &quot;, 2 &quot; defaultCredit &quot;:{&quot; bank &quot;:&quot; State Bank Of India &quot;, 3 &quot; ifsc &quot;:&quot; SBIN 0008626&quot;, 4 &quot; account &quot;:&quot;000000379085 XXXXX &quot;, 5 &quot; accountType &quot;:&quot; SAVINGS &quot;, 6 &quot; name &quot;:&quot; BXXXXXX TXXXX &quot;, 7 &quot; branchAddress &quot;:&quot; AMXXXXXXXXX &quot;</note>
		</body>
		<back>

			<div type="acknowledgement">
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="8">Acknowledgements</head><p>The authors thank Paul Pearce for shepherding the paper, the anonymous reviewers for their valuable inputs, and Roya Ensafi and Earlence Fernandes for their valuable feedback. We also thank colleagues, including Jithin M., Jothis M., and Arjun R., for helping us with analyzing Android apps in preliminary stages of the project when much less was known. This material is based on the work supported by the National Science Foundation under grant number 1646392.</p></div>
			</div>

			<div type="annex">
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="9">Appendix</head></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="9.1">BHIM Code Instrumentation</head><p>We provide a brief discussion of one example instrumentation of BHIM with the goal of determining the workflow of the UPI protocol. BHIM version 1.3 consists of about 516K lines of obfuscated smali code. Some apps such as Paytm are even larger than BHIM, posing a significant reverse engineering challenge.</p><p>After searching through the BHIM code, we located the snippet below that belongs to the NPCI library and is integrated with the BHIM app. We found that NPCI had not obfuscated the name of the package as shown in line #1 in/org/npci/upiapp/utils. However, the method names are obfuscated as indicated by the method name at line #19 called a. The third-party libraries used by NPCI are not obfuscated as is seen by the class org.apache.http.impl.client.DefaultHttpClient at line #17.</p><p>We instrumented different portions of the BHIM app to determine the control-flow of the program. We found that when using automated tools such as Soot <ref type="bibr">[54]</ref> to instrument the app, we got unexpected failures such as the app hanging indefinitely (we did get Soot to work for smaller test programs). We were unable to root-cause why BHIM's instrumentation with Soot did not work. Hence, we resorted to a careful smali code instrumentation of BHIM.</p><p>Listing 1 shows the method that performs HTTP GET. Since the methods are all static methods, by Android (and Java) convention, the first parameter is stored in the register p0, the second in register p1 etc. The registers v0, v1 etc. are registers local to a method body. Listing 2 contains code that prints the parameters to the GET request contained in the</p></div>			</div>
			<div type="references">

				<listBibl>

<biblStruct xml:id="b0">
	<analytic>
		<title level="a" type="main">How to attack two-factor authentication internet banking</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Manal</forename><surname>Adham</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Amir</forename><surname>Azodi</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Yvo</forename><surname>Desmedt</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Ioannis</forename><surname>Karaolis</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Financial Cryptography and Data Security</title>
		<imprint>
			<date type="published" when="2013" />
			<biblScope unit="page" from="322" to="328" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b1">
	<analytic>
		<title level="a" type="main">Designed to be broken: A reverse engineering study of the 3D Secure 2.0 Payment Protocol</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Ali</forename><surname>Mohammed Aamir</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Aad</forename><surname>Van Moorsel</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Financial Cryptography and Data Security</title>
		<imprint>
			<date type="published" when="2019" />
			<biblScope unit="page" from="201" to="221" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b2">
	<monogr>
		<title level="m" type="main">Research paper for mobile devices security</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Samaher</forename><surname>Aljudaibi</surname></persName>
		</author>
		<ptr target="https://www.researchgate.net/publication/309675787_Research_Paper_for_Mobile_Devices_Security" />
		<imprint>
			<date type="published" when="2016" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b3">
	<analytic>
		<title level="a" type="main">VAPTAi: a threat model for vulnerability assessment and penetration testing of Android and iOS mobile banking apps</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Bojjagani</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">V</forename><forename type="middle">N</forename><surname>Sastry</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">2017 IEEE 3rd International Conference on Collaboration and Internet Computing (CIC)</title>
		<imprint>
			<biblScope unit="volume">10</biblScope>
			<biblScope unit="page">2017</biblScope>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b4">
	<analytic>
		<title level="a" type="main">STAMBA: security testing for Android mobile banking apps</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Sriramulu</forename><surname>Bojjagani</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">V</forename><forename type="middle">N</forename><surname>Sastry</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Advances in Signal Processing and Intelligent Recognition Systems</title>
		<imprint>
			<date type="published" when="2016" />
			<biblScope unit="page" from="671" to="683" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b5">
	<analytic>
		<title level="a" type="main">Chip and Skim: Cloning EMV cards with the pre-play attack</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Mike</forename><surname>Bond</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Omar</forename><surname>Choudary</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Steven</forename><forename type="middle">J</forename><surname>Murdoch</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Sergei</forename><surname>Skorobogatov</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Ross</forename><surname>Anderson</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 2014 IEEE Symposium on Security and Privacy, SP &apos;14</title>
		<meeting>the 2014 IEEE Symposium on Security and Privacy, SP &apos;14</meeting>
		<imprint>
			<publisher>IEEE Computer Society</publisher>
			<date type="published" when="2014" />
			<biblScope unit="page" from="49" to="64" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b6">
	<analytic>
		<title level="a" type="main">Let&apos;s talk money: Evaluating the security challenges of mobile money in the developing world</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Sam</forename><surname>Castle</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Fahad</forename><surname>Pervaiz</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Galen</forename><surname>Weld</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Franziska</forename><surname>Roesner</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Richard</forename><surname>Anderson</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 7th Annual Symposium on Computing for Development, ACM DEV &apos;16</title>
		<meeting>the 7th Annual Symposium on Computing for Development, ACM DEV &apos;16</meeting>
		<imprint>
			<date type="published" when="2016" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b7">
	<monogr>
		<title level="m" type="main">Security of mobile banking</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Kelvin</forename><surname>Chikomo</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Ming</forename><forename type="middle">Ki</forename><surname>Chong</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Alapan</forename><surname>Arnab</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Andrew</forename><surname>Hutchison</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2006" />
			<biblScope unit="volume">01</biblScope>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b8">
	<monogr>
		<title level="m" type="main">Why banker Bob (still) can&apos;t get TLS right: A security analysis of TLS in leading UK banking apps</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Tom</forename><surname>Chothia</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Flavio</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Chris</forename><surname>Garcia</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Chris</forename><forename type="middle">Mcmahon</forename><surname>Heppel</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Stone</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2017-01" />
			<biblScope unit="page" from="579" to="597" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b9">
	<analytic>
		<title/>
		<ptr target="https://www.expresscomputer.in/news/financial-cybercrime-and-identity-theft-in-india-are-increasing-fis/35099/" />
	</analytic>
	<monogr>
		<title level="j">Express Computer</title>
		<imprint>
			<date type="published" when="2019" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b10">
	<monogr>
		<title/>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Stat</forename><surname>Counter</surname></persName>
		</author>
		<ptr target="https://www.statista.com/statistics/262157/market-share-held-by-mobile-operating-systems-in-india/" />
		<imprint>
			<date type="published" when="2018" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b11">
	<monogr>
		<title/>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Cuckoodroid</surname></persName>
		</author>
		<ptr target="https://github.com/idanr1986/cuckoo-droid" />
		<imprint>
			<date type="published" when="2018-10" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b12">
	<monogr>
		<title/>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Android</forename><surname>Developers</surname></persName>
		</author>
		<ptr target="https://developer.android.com/guide/topics/permissions/overview#normal_permissions" />
		<imprint>
			<date type="published" when="2019-08" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b13">
	<analytic>
		<title level="a" type="main">On the (in)security of mobile two-factor authentication</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Alexandra</forename><surname>Dmitrienko</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Christopher</forename><surname>Liebchen</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Christian</forename><surname>Rossow</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Ahmad-Reza</forename><surname>Sadeghi</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Financial Cryptography and Data Security</title>
		<imprint>
			<date type="published" when="2014" />
			<biblScope unit="page" from="365" to="383" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b14">
	<analytic>
		<title level="a" type="main">Android UI deception revisited: Attacks and defenses</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Earlence</forename><surname>Fernandes</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Alfred</forename><surname>Qi</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Justin</forename><surname>Chen</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Georg</forename><surname>Paupore</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><forename type="middle">Alex</forename><surname>Essl</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Z</forename><forename type="middle">Morley</forename><surname>Halderman</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Atul</forename><surname>Mao</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Prakash</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Financial Cryptography and Data Security</title>
		<imprint>
			<date type="published" when="2017" />
			<biblScope unit="page" from="41" to="59" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b15">
	<monogr>
		<title/>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Forbes</surname></persName>
		</author>
		<ptr target="https://www.forbes.com/sites/zakdoffman/2019/08/10/google-warning-tens-of-millions-of-android-phones-come-preloaded-with-dangerous-malware/#5dcde47dddb3" />
		<imprint>
			<date type="published" when="2019-08" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b16">
	<analytic>
		<title/>
		<ptr target="https://sensorstechforum.com/android-ios-invasive-app-permissions-2018/" />
	</analytic>
	<monogr>
		<title level="j">Sensors Tech Forum</title>
		<imprint>
			<biblScope unit="page">2018</biblScope>
		</imprint>
	</monogr>
	<note>Online; accessed October-2018</note>
</biblStruct>

<biblStruct xml:id="b17">
	<monogr>
		<title/>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Mobile</forename><surname>Security Framework</surname></persName>
		</author>
		<ptr target="https://github.com/MobSF/Mobile-Security-Framework-MobSF" />
		<imprint>
			<date type="published" when="2015-10" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b18">
	<analytic>
		<title level="a" type="main">Privacy and security concerns associated with mobile money applications in Africa</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Andrew</forename><surname>Harris</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Seymour</forename><surname>Goodman</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Patrick</forename><surname>Traynor</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Washington Journal of Law</title>
		<imprint>
			<biblScope unit="volume">01</biblScope>
			<biblScope unit="page">2013</biblScope>
		</imprint>
	</monogr>
	<note>Technology and Arts</note>
</biblStruct>

<biblStruct xml:id="b19">
	<monogr>
		<title/>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Mwr</forename><surname>Infosecurity</surname></persName>
		</author>
		<ptr target="https://labs.mwrinfosecurity.com/assets/BlogFiles/mwri-drozer-user-guide-2015-03-23.pdf" />
		<imprint>
			<date type="published" when="2015" />
		</imprint>
	</monogr>
	<note>Online; accessed October-2018</note>
</biblStruct>

<biblStruct xml:id="b20">
	<monogr>
		<title level="m" type="main">Hooking and patching Android apps using Xposed framework. https://resources.in fosecinstitute.com/android-hacking-and-sec urity-part-25-hooking-and-patching-android -apps-using-xposed-framework/#gref</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Infosec</forename><surname>Institute</surname></persName>
		</author>
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b21">
	<monogr>
		<title/>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Investopedia</surname></persName>
		</author>
		<ptr target="https://www.investopedia.com/news/india-demonetization-993-money-returned/" />
		<imprint>
			<date type="published" when="2018-10" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b22">
	<monogr>
				<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Jin-Hyuk</forename><surname>Jung</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Ju</forename><forename type="middle">Young</forename><surname>Kim</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Hyeong-Chan</forename><surname>Lee</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Jeong Hyun</forename><surname>Yi</surname></persName>
		</author>
		<title level="m">Repackaging attack on Android banking applications and its countermeasures</title>
		<imprint>
			<biblScope unit="volume">73</biblScope>
			<biblScope unit="page">2013</biblScope>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b23">
	<analytic>
		<title level="a" type="main">How anywhere computing just killed your phone-based two-factor authentication</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Victor</forename><surname>Radhesh Krishnan Konoth</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Herbert</forename><surname>Van Der Veen</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Bos</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Financial Cryptography and Data Security</title>
		<imprint>
			<date type="published" when="2017" />
			<biblScope unit="page" from="405" to="421" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b24">
	<analytic>
		<title level="a" type="main">Attacks on Android banking applications</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Y</forename><surname>Kouraogo</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">K</forename><surname>Zkik</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">E</forename><forename type="middle">J</forename><surname>El Idrissi Noreddine</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">G</forename><surname>Orhanou</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">2016 International Conference on Engineering MIS (ICEMIS)</title>
		<imprint>
			<date type="published" when="2016" />
			<biblScope unit="volume">9</biblScope>
			<biblScope unit="page" from="1" to="6" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b25">
	<analytic>
		<title level="a" type="main">The EMV payment system: Is it reliable?</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Bertin</forename><surname>El Nour Madhoun</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Guy</forename><surname>Emmanuel</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Pujolle</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">The 3rd IEEE Cyber Security in Networking International Conference</title>
		<imprint>
			<date type="published" when="2019" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b26">
	<monogr>
		<title level="m" type="main">Online</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Mitmproxy</surname></persName>
		</author>
		<ptr target="https://mitmproxy.org" />
		<imprint>
			<date type="published" when="2019-08" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b27">
	<analytic>
		<title level="a" type="main">SMS-based One-Time Passwords: Attacks and defense</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Collin</forename><surname>Mulliner</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Ravishankar</forename><surname>Borgaonkar</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Patrick</forename><surname>Stewin</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Jean-Pierre</forename><surname>Seifert</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Detection of Intrusions and Malware, and Vulnerability Assessment</title>
		<imprint>
			<date type="published" when="2013" />
			<biblScope unit="page" from="150" to="159" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b28">
	<analytic>
		<title level="a" type="main">Chip and PIN is broken</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><forename type="middle">J</forename><surname>Murdoch</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Drimer</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Anderson</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Bond</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">2010 IEEE Symposium on Security and Privacy</title>
		<imprint>
			<date type="published" when="2010" />
			<biblScope unit="page" from="433" to="446" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b29">
	<monogr>
		<title/>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Palo Alto</forename><surname>Networks</surname></persName>
		</author>
		<ptr target="https://researchcenter.paloaltonetworks.com/2017/09/unit42-android-toast-overlay-attack-cloak-and-dagger-with-no-permissions" />
		<imprint>
			<date type="published" when="2017" />
		</imprint>
	</monogr>
	<note>Online; accessed October-2018</note>
</biblStruct>

<biblStruct xml:id="b30">
	<monogr>
		<title/>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Npci</forename></persName>
		</author>
		<ptr target="https://www.npci.org.in/upi-live-members" />
		<imprint>
			<date type="published" when="2019-08" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b31">
	<monogr>
				<ptr target="https://www.npci.org.in/upi-PSP%263rdpartyApps" />
		<title level="m">NPCI. NPCI third party apps</title>
		<imprint>
			<date type="published" when="2019-08" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b32">
	<analytic>
		<title level="a" type="main">Enhanced security model for mobile banking systems in Tanzania</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">W</forename><surname>Barak</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Loserian</forename><forename type="middle">S</forename><surname>Nyamtiga</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Laizer</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">International Journal of Technology Enhancements and Emerging Engineering Research</title>
		<imprint>
			<biblScope unit="volume">01</biblScope>
			<biblScope unit="page">2013</biblScope>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b33">
	<monogr>
		<title level="m" type="main">App stores list</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Apps</forename><surname>Business Of</surname></persName>
		</author>
		<ptr target="https://www.businessofapps.com/guide/app-stores-list/" />
		<imprint>
			<date type="published" when="2018-08" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b34">
	<monogr>
				<ptr target="https://www.npci.org.in/sites/default/files/UPI-PG-RBI_Final.pdf" />
		<title level="m">National Payments Corporation of India</title>
		<imprint>
			<date type="published" when="2016" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b35">
	<monogr>
				<ptr target="https://www.npci.org.in/product-statistics/upi-product-statistics" />
		<title level="m">National Payments Corporation of India</title>
		<imprint>
			<date type="published" when="2019" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b36">
	<analytic>
		<title level="a" type="main">Usably secure, low-cost authentication for mobile banking</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Saurabh</forename><surname>Panjwani</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Edward</forename><surname>Cutrell</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the Sixth Symposium on Usable Privacy and Security, Proc. SOUPS</title>
		<meeting>the Sixth Symposium on Usable Privacy and Security, Proc. SOUPS</meeting>
		<imprint>
			<date type="published" when="2010" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b37">
	<analytic>
		<title level="a" type="main">Mo(bile) money, mo(bile) problems: Analysis of branchless banking applications in the developing world</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Bradley</forename><surname>Reaves</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Nolen</forename><surname>Scaife</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Adam</forename><surname>Bates</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Patrick</forename><surname>Traynor</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Kevin</forename><forename type="middle">R B</forename><surname>Butler</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">24th USENIX Security Symposium (USENIX Security 15)</title>
		<imprint>
			<date type="published" when="2015" />
			<biblScope unit="page" from="17" to="32" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b38">
	<analytic>
		<title level="a" type="main">Characterizing the security of the SMS ecosystem with public gateways</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Bradley</forename><surname>Reaves</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Luis</forename><surname>Vargas</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Nolen</forename><surname>Scaife</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Dave</forename><surname>Tian</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Logan</forename><surname>Blue</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Patrick</forename><surname>Traynor</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Kevin</forename><forename type="middle">R B</forename><surname>Butler</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">ACM Trans. Priv. Secur</title>
		<imprint>
			<biblScope unit="volume">22</biblScope>
			<biblScope unit="page">31</biblScope>
			<date type="published" when="2018-12" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b39">
	<analytic>
		<title level="a" type="main">Applying relay attacks to Google wallet</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Roland</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Langer</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Scharinger</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">5th International Workshop on Near Field Communication (NFC)</title>
		<imprint>
			<date type="published" when="2013" />
			<biblScope unit="volume">2</biblScope>
			<biblScope unit="page" from="1" to="6" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b40">
	<analytic>
		<title level="a" type="main">Cloning credit cards: A combined pre-play and downgrade attack on EMV contactless</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Michael</forename><surname>Roland</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Josef</forename><surname>Langer</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 7th USENIX Conference on Offensive Technologies, WOOT&apos;13</title>
		<meeting>the 7th USENIX Conference on Offensive Technologies, WOOT&apos;13</meeting>
		<imprint>
			<publisher>USENIX Association</publisher>
			<date type="published" when="2013" />
			<biblScope unit="page" from="6" to="6" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b41">
	<analytic>
		<title level="a" type="main">Trusted execution environment: What it is, and what it is not</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Sabt</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Achemlal</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Bouabdallah</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE Trustcom/BigDataSE/ISPA</title>
		<imprint>
			<biblScope unit="volume">1</biblScope>
			<biblScope unit="page" from="57" to="64" />
			<date type="published" when="2015" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b42">
	<analytic>
		<title level="a" type="main">Mind your SMSes</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Hossein</forename><surname>Siadati</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Toan</forename><surname>Nguyen</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Payas</forename><surname>Gupta</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Markus</forename><surname>Jakobsson</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Nasir</forename><surname>Memon</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Comput. Secur</title>
		<imprint>
			<biblScope unit="volume">65</biblScope>
			<biblScope unit="page" from="14" to="28" />
			<date type="published" when="2017-03" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b43">
	<analytic>
		<title level="a" type="main">Spinner: Semi-automatic detection of pinning without hostname verification</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Chris</forename><forename type="middle">Mcmahon</forename><surname>Stone</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Tom</forename><surname>Chothia</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Flavio</forename><forename type="middle">D</forename><surname>Garcia</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 33rd Annual Computer Security Applications Conference, ACSAC 2017</title>
		<meeting>the 33rd Annual Computer Security Applications Conference, ACSAC 2017</meeting>
		<imprint>
			<date type="published" when="2017" />
			<biblScope unit="page" from="176" to="188" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b44">
	<analytic>
		<title level="a" type="main">Short paper: A longitudinal study of financial apps in the Google Play store</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">F</forename><surname>Vincent</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Ivan</forename><surname>Taylor</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Martinovic</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Financial Cryptography and Data Security</title>
		<imprint>
			<date type="published" when="2017" />
			<biblScope unit="page" from="302" to="309" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b45">
	<monogr>
		<title level="m" type="main">Security for telecommunications networks. Advances in information security</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Patrick</forename><surname>Traynor</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Thomas</forename><forename type="middle">La</forename><surname>Porta</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Patrick</forename><surname>Mcdaniel</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2008" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b46">
	<monogr>
		<title level="m" type="main">What are app permissions -a look into Android app permissions</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Wandera</surname></persName>
		</author>
		<ptr target="https://www.wandera.com/mobile-security/app-and-data-leaks/app-permissions/" />
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b47">
	<monogr>
		<title level="m" type="main">Introduction to mobile money in developing countries: Financial inclusion and financial integrity conference special issue. University of Washington School of Law Research Paper</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">K</forename><surname>Jane</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Louis</forename><forename type="middle">De</forename><surname>Winn</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Koker</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2013" />
			<biblScope unit="page" from="2013" to="2014" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b48">
	<analytic>
		<title level="a" type="main">Show me the money! Finding flawed implementations of third-party in-app payment in Android apps</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Wenbo</forename><surname>Yang</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Yuanyuan</forename><surname>Zhang</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Juanru</forename><surname>Li</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Hui</forename><surname>Liu</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Qing</forename><surname>Wang</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Yueheng</forename><surname>Zhang</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Dawu</forename><surname>Gu</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">NDSS</title>
		<imprint>
			<date type="published" when="2017" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b49">
	<monogr>
				<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Changsok</forename><surname>Yoo</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Byung-Tak</forename><surname>Kang</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Huy Kang</forename><surname>Kim</surname></persName>
		</author>
		<title level="m">Case study of the vulnerability of OTP implemented in internet banking systems of South Korea. Multimedia Tools and Applications</title>
		<imprint>
			<date type="published" when="2015-05" />
			<biblScope unit="volume">74</biblScope>
			<biblScope unit="page" from="3289" to="3303" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b50">
	<monogr>
		<title level="m" type="main">sget -object v0 , Ljava / lang / System ;-&gt; out : Ljava / io / PrintStream</title>
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b51">
	<monogr>
		<title level="m" type="main">new -instance v1 , Ljava / lang / StringBuilder</title>
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b52">
	<monogr>
		<title level="m" type="main">4 invoke -direct { v1 }, Ljava / lang / StringBuilder ;-&gt;&lt; init &gt;(</title>
		<imprint>
			<biblScope unit="page">5</biblScope>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b53">
	<analytic>
		<title level="a" type="main">Log_debug_upi_str0 : &quot; 7 invoke -virtual {v1 , v2 }, Ljava / lang / StringBuilder ;-&gt; append ( Ljava / lang / String ;) Ljava / lang / StringBuilder</title>
	</analytic>
	<monogr>
		<title level="m">const -string / jumbo v2</title>
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b54">
	<monogr>
		<title level="m" type="main">move -result -object v1 10 invoke -virtual {v1 , p1 }, Ljava / lang / StringBuilder ;-&gt; append ( Ljava / lang / String ;) Ljava / lang / StringBuilder</title>
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b55">
	<monogr>
		<title level="m" type="main">invoke -virtual { v1 }, Ljava / lang / StringBuilder ;-&gt; toString () Ljava / lang / String</title>
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b56">
	<monogr>
		<title level="m" type="main">14 15 move -result -object v1</title>
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b57">
	<monogr>
		<title level="m" type="main">invoke -virtual {v0 , v1 }, Ljava / io / PrintStream ;-&gt; println ( Ljava / lang / String</title>
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b58">
	<monogr>
		<title level="m" type="main">sget -object v0 , Ljava / lang / System ;-&gt; out : Ljava / io / PrintStream</title>
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b59">
	<monogr>
		<title level="m" type="main">20 21 new -instance v1 , Ljava / lang / StringBuilder ; 22 invoke -direct { v1 }, Ljava / lang / StringBuilder ;-&gt;&lt; init &gt;(</title>
		<imprint>
			<biblScope unit="page">23</biblScope>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b60">
	<analytic>
		<title level="a" type="main">25 invoke -virtual {v1 , v2 }, Ljava / lang / StringBuilder ;-&gt; append ( Ljava / lang / String ;) Ljava / lang / StringBuilder ; 26 27 move -result -object v1 28 invoke -virtual { p2 }, Ljava / lang / Object</title>
		<ptr target="Ljava/lang/String" />
	</analytic>
	<monogr>
		<title level="m">const -string / jumbo v2</title>
		<imprint/>
	</monogr>
	<note>Log_debug_upi_restclient_map0. &gt; toString (</note>
</biblStruct>

<biblStruct xml:id="b61">
	<monogr>
		<title level="m" type="main">29 30 move -result -object v2 31 invoke -virtual {v1 , v2 }, Ljava / lang / StringBuilder ;-&gt; append ( Ljava / lang / String ;) Ljava / lang / StringBuilder</title>
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b62">
	<monogr>
		<title level="m" type="main">invoke -virtual { v1 }, Ljava / lang / StringBuilder ;-&gt; toString () Ljava / lang / String ; 35 move -result -object v1</title>
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b63">
	<monogr>
		<title level="m" type="main">invoke -virtual {v0 , v1 }, Ljava / io / PrintStream ;-&gt; println ( Ljava / lang / String ;) V Listing 2: HTTP GET Instrumentation Code</title>
		<imprint/>
	</monogr>
</biblStruct>

				</listBibl>
			</div>
		</back>
	</text>
</TEI>
