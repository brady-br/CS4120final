<?xml version="1.0" encoding="UTF-8"?>
<TEI xmlns="http://www.tei-c.org/ns/1.0" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
xsi:schemaLocation="http://www.tei-c.org/ns/1.0 /Users/atharsefid/Desktop/grobid-0.5.3/grobid-home/schemas/xsd/Grobid.xsd"
 xmlns:xlink="http://www.w3.org/1999/xlink">
	<teiHeader xml:lang="en">
		<encodingDesc>
			<appInfo>
				<application version="0.5.3" ident="GROBID" when="2020-09-29T04:25+0000">
					<ref target="https://github.com/kermitt2/grobid">GROBID - A machine learning software for extracting information from scholarly documents</ref>
				</application>
			</appInfo>
		</encodingDesc>
		<fileDesc>
			<titleStmt>
				<title level="a" type="main">Evaluating the Importance of User-Specific Profiling Evaluating the Importance of User-Specific Profiling</title>
			</titleStmt>
			<publicationStmt>
				<publisher/>
				<availability status="unknown"><licence/></availability>
			</publicationStmt>
			<sourceDesc>
				<biblStruct>
					<analytic>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Zheng</forename><surname>Wang</surname></persName>
							<email>zhwang@eecs.harvard.edu</email>
							<affiliation key="aff0">
								<orgName type="department" key="dep1">Digital Equipment Corporation</orgName>
								<orgName type="department" key="dep2">Division of Engineering and Applied Sciences</orgName>
								<orgName type="department" key="dep3">Digital Equipment Corporation</orgName>
								<orgName type="institution" key="instit1">Harvard University</orgName>
								<orgName type="institution" key="instit2">Harvard University</orgName>
							</affiliation>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Norm</forename><surname>Rubin</surname></persName>
							<email>rubin@ives.amt.tay1.dec.com</email>
							<affiliation key="aff0">
								<orgName type="department" key="dep1">Digital Equipment Corporation</orgName>
								<orgName type="department" key="dep2">Division of Engineering and Applied Sciences</orgName>
								<orgName type="department" key="dep3">Digital Equipment Corporation</orgName>
								<orgName type="institution" key="instit1">Harvard University</orgName>
								<orgName type="institution" key="instit2">Harvard University</orgName>
							</affiliation>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Zheng</forename><surname>Wang</surname></persName>
							<affiliation key="aff0">
								<orgName type="department" key="dep1">Digital Equipment Corporation</orgName>
								<orgName type="department" key="dep2">Division of Engineering and Applied Sciences</orgName>
								<orgName type="department" key="dep3">Digital Equipment Corporation</orgName>
								<orgName type="institution" key="instit1">Harvard University</orgName>
								<orgName type="institution" key="instit2">Harvard University</orgName>
							</affiliation>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Norm</forename><surname>Rubin</surname></persName>
							<affiliation key="aff0">
								<orgName type="department" key="dep1">Digital Equipment Corporation</orgName>
								<orgName type="department" key="dep2">Division of Engineering and Applied Sciences</orgName>
								<orgName type="department" key="dep3">Digital Equipment Corporation</orgName>
								<orgName type="institution" key="instit1">Harvard University</orgName>
								<orgName type="institution" key="instit2">Harvard University</orgName>
							</affiliation>
						</author>
						<title level="a" type="main">Evaluating the Importance of User-Specific Profiling Evaluating the Importance of User-Specific Profiling</title>
					</analytic>
					<monogr>
						<imprint>
							<date/>
						</imprint>
					</monogr>
					<note>The following paper was originally published in the Proceedings of the 2nd USENIX Windows NT Symposium Seattle, Washington, August 3-4, 1998 For more information about USENIX Association contact: 1. Phone:</note>
				</biblStruct>
			</sourceDesc>
		</fileDesc>
		<profileDesc>
			<abstract>
				<p>This paper examines common assumptions about user-specific profiling in profile-based optimization. We study execution profiles of interactive applications on Windows NT to understand how different users use the same program. The profiles were generated by the DIGITAL FX!32 emulator/binary translator system, which automatically runs the x86 version of Windows NT programs on NT/Alpha computers. We have found that people use the benchmark programs in different ways. These differences in program usage can have impact on the performance of profile-based FX!32 program translation and optimization, up to 9%.</p>
			</abstract>
		</profileDesc>
	</teiHeader>
	<text xml:lang="en">
		<body>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="1.">Introduction</head></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="1.1">Background</head><p>Profile-based optimization is predicated on the assumption that profiles can be obtained that accurately depict how users run the application. There has been only limited research on the viability of this assumption <ref type="bibr">[FF92, GY96]</ref>. We address this problem by examining different users' usage patterns of interactive applications on Windows NT. Here the term "usage pattern" refers to the way a particular individual uses the code in a particular program.</p><p>A common assumption in profile-based optimization is that people use applications in similar ways. This assumption is consistent with the behavior of batchstyle and computation-intensive programs, and has an implication that user-specific profiling is unnecessary. The alternative to this common assumption is that people use applications in different ways. This is consistent with our intuition for complex and featurerich programs such as GUI-based interactive applications. It implies that user-specific profiling may be necessary for effective optimization.</p><p>The assumption that users are similar or users are different suggests two different models for applying profile-based optimization. In the traditional model, an application is profiled and optimized before its release. Developers run the program with a fixed or arbitrary training workload and use the profile to guide optimizations. Based on the assumption that users are similar, the training workload is considered to be representative. Spike <ref type="bibr">[CG97]</ref> is an example of this approach. Some recent systems, such as Morph <ref type="bibr">[ZW97]</ref> and FX!32 <ref type="bibr">[HH97]</ref>, extend the optimization process beyond an application's release by profiling and optimizing the application continuously while it is used <ref type="bibr">1</ref> . Based on the assumption that users are different, the current versions of Morph and FX!32 operate on a per-user basis. Another assumption in this model is that a particular user's usage pattern may change over time but seldom changes abruptly.</p><p>In this study, we compare execution profiles from different users of the same program module. We did not tackle the question of how a particular user's usage pattern changes over time. Since the purpose of the profiles was to guide optimizations, we investigate how the differences in profiles affect optimization performance. We also examine whether we can combine profiles from a group of users to optimize programs for those users and for other users.</p><p>Our study shows that users of interactive applications have different usage patterns. For most programs, each individual uses a set of procedures that no other users do, although frequently executed procedures tend to be used by most users. For some benchmarks, profiles from another user or a group can be less effective for optimization than a particular user's own profile.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="1.2">Related Work</head><p>Although the majority of today's personal computers run mostly interactive applications on Windows systems, there has been little research on how people use these programs. Several research projects investigated Windows operating system performance [CE96, EW96, PS96]. A recent paper <ref type="bibr">[LC98]</ref> presented measurements and simulation results of instruction set and architectural characteristics during program execution on x86 Windows NT. These projects focused on the characteristics and comparison of the general system performance, while this paper focuses on the application usage patterns.</p><p>There has been some research on profile comparison for the purpose of branch prediction. Fisher and Freudenberger <ref type="bibr">[FF92]</ref> examined the accuracy of predicting conditional branch directions from previous runs of a program. Their experiments focused on batchcomputation programs from SPEC benchmark suit, and used subjectively selected datasets to generate profiles. <ref type="bibr">Gloy et al.</ref> [GY96] compared user-only traces and fullsystem traces for dynamic branch prediction. They used standard traces as well as traces from instrumented runs of selected programs. Our profile analysis is aimed for optimization in general, and our profiles were collected from users' unscripted usage of interactive applications.</p><p>The next section introduces our experimental methodology, including the collection of the profiles and the statistical analysis methods. Section 3 presents the results, and Section 4 summarizes.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.">Methodology</head></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.1">FX!32 and FX!32 profiles</head><p>We used the DIGITAL FX!32 system to collect execution profiles for Windows NT programs. FX!32 automatically runs x86 applications on Alpha NT, using a combination of emulation and binary translation. When an x86 image is executed under FX!32 for the first time, the FX!32 emulator interprets the x86 code and generates an execution profile. This profile is later used by the FX!32 translator to generate translated and optimized Alpha code. Subsequent executions of the program use the translated code instead of the x86 code. If a certain run of the program uses part of the x86 code that has not been translated, new profile data are generated and merged into the existing profile. The merged profile can be used to re-translate the program.</p><p>The contents of the profile reflect program usage over time by a particular user and the addition of new profile data reflects new or changed usage. Therefore, we can learn about the usage patterns of the x86 applications by studying the users' FX!32 profiles. FX!32 profiles are generated during the emulation of x86 code, so they are based on x86 traces, not Alpha traces.</p><p>Currently, FX!32 profiles contain information on procedure calls, indirect control transfers, and unaligned memory references. For our statistical analysis of the profiles, we consider only the procedure execution information. In the optimization results study, however, the whole profile is used for the FX!32 program translation/optimization.</p><p>One side note is that FX!32's view of program procedures may differ from the set of procedures in the source code. FX!32 works on the binary image and discovers program procedures during emulation. It combines two procedures into a single "FX!32 procedure" if one contains a jump into the other. Therefore, an FX!32 procedure may be the combination of several original procedures. This does not occur frequently, nor does it fundamentally affect our profile analysis. In the rest of the paper, we simply use the term "procedure" to refer to an FX!32 procedure.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.2">Profile collection</head><p>We chose a set of interactive desktop applications as benchmarks for this study. Since FX!32 profiles are generated separately for each program module, we regard each module as a separate benchmark. Different versions of the same program are treated as different modules because they have different code images. For each module, we collected multiple (four or more) profiles, each from a different user.</p><p>Our benchmark selection includes executables and DLLs from the Microsoft Office suite as well as other commonly used applications. <ref type="table">Table 1</ref> lists the 14 benchmark modules used for this paper. The Office executables and DLLs are noted with their version numbers: 95 (Office Version 7.0 for Windows 95) and 97 (Office 97).</p><p>A group of computer system researchers and software developers ran the x86 version of the benchmarks using FX!32 on Alpha computers running Windows NT 4.0. Profiles were generated from their spontaneous and natural usage of the programs. For each module, we collected individual profiles from a selected group of users, each of whom had made significant use of the module 2 . These individual profiles were generated from copies of the module on different machines. Since the machines had comparable hardware and software configuration, differences in the profiles were mostly artifacts of the users' usage patterns and not the execution environment 3 .</p><p>We calculate a combined profile from the individual profiles using the same merging algorithm used by the FX!32 Manager, which sums up the execution counts for each entry. The combined profile represents the combined usage of the module by this group of users. We use a series of statistical analyses to examine the similarity between individual profiles and the change in similarity when the profiles grow. We also use the profiles to guide the FX!32 program translation/ optimization and compare the performance of translated programs.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.3">Statistical analysis</head><p>Here we introduce the key methods of our statistical analysis and introduce some terminology that is used in this paper.</p><p>An FX!32 profile contains execution counts (the number of times a procedure is called) for all procedures that were used during the profile generation. When we compare a group of profiles, we focus on the set of procedures included in each profile, regardless of the procedures' execution counts. This parameter is important for the profile-guided code translation in FX!32 as well as most code layout optimizations. By considering only the set of procedures, we also simplify the comparison and avoid unfair methods of weighing the execution counts. We consider the procedure execution counts only in the part of our analysis that examines the correlation between the number of users who use a procedure and the execution count of the procedure.</p><p>We compare the sets of procedures used by individual users by examining their combined profile. If a procedure is included in the combined profile, it has been used by at least one user. For such a procedure, we define its usage count as the number of users who have used it. We categorize the procedures in the combined profile according to their usage counts. If a procedure is used by only one user, we call it a unique procedure. If it is used by all users, we call it a common procedure. Any other procedure is called a subgroup procedure.</p><p>The usage count distribution of all procedures in the combined profile reflects the similarity between individual profiles. If all users use the same set of procedures, all procedures in the combined profile will be common procedures. If each user uses a different set of procedures, all procedures in the combined profile will be unique procedures. If the sets of procedures used by the individuals are not all the same nor all different, we will see a distribution of unique, subgroup and common procedures in the combined profile. The higher the percentage of common procedures and the lower the percentage of unique procedures, the more similar the individual profiles.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.">Results</head><p>In this section, we present a series of statistical analyses of the collected profiles as well as optimization results  <ref type="figure">Figure 1</ref>. An example of unique, subgroup and common procedures for two benchmark modules. In our statistical analyses, we examine the similarity between individual profiles and the change in similarity over time.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Benchmark</head></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.1">Summary of profiles</head><p>For every benchmark module, <ref type="table" target="#tab_2">Table 2</ref> lists the number of procedures in the combined profile and the smallest, largest and average number of procedures in an individual profile <ref type="bibr">4</ref> . Each individual profile reflects one person's usage of the benchmark module over multiple runs, while the combined profile reflects the combined usage by all users of the module. Therefore, each individual profile includes a percentage of the procedures in the combined profile. In <ref type="table" target="#tab_2">Table 2</ref>, the lowest Smallest% is 49.3% for mfc40.dll, which means that one user of mfc40.dll has used only 49.3% of all procedures used by the seven users. The highest Largest% occurs for winhlp32.exe, where one user has used 95.4% of all procedures used by the 12 users. For any module, Largest% is 100% if and only if one user has used all procedures used by other <ref type="bibr">4</ref> As mentioned in Section 2.1, the term "procedure" refers to an "FX!32 procedure" which may be the combination of several original procedures. The total number of FX!32 procedures in a module is difficult to determine.</p><p>users. This does not occur in <ref type="table" target="#tab_2">Table 2</ref>, implying that people user the programs in different ways. The average percentage of procedures in the combined profile used by each individual is about 73%.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.2">Similarity between individual profiles</head><p>As discussed in Section 2.3, the usage count distribution of all procedures in the combined profile reflects the similarity between individual profiles. <ref type="figure">Figure 2</ref> shows the percentage distribution of unique, subgroup and common procedures in the combined profiles for all benchmark modules.</p><p>For these benchmark modules, the percentage of common procedures in the combined profile ranges between 38.1% and 76.9%, with an average of 52.1%.  The smallest, largest and average number of procedures in an individual profile Smallest%, Largest%, Average% "Smallest", "Largest" and "Average" each divided by "Combined"</p><p>For every module, each user has used a percentage of the procedures in the combined profile, and Smallest%, Largest% and Average% are the minimum, maximum and average value of this percentage among the group of users.</p><p>combined profiles, and acrord32.exe and winhlp32.exe also have the lowest percentage of unique procedures. This indicates that each of these three modules shows relatively consistent usage pattern across its users. We notice that these three modules provide less variety of functionality than most other benchmark modules. For example, acrord32.exe was mostly used to simply view and print documents downloaded from the Internet. We may also see from <ref type="table">Table 1</ref> and <ref type="table" target="#tab_2">Table 2</ref> that pnui3250.dll and winhlp32.exe are two of the smallest benchmark modules in terms of the file size and the number of procedures. The above two factors may explain the relatively high similarity among each of these three modules' group of individual profiles.</p><p>For a more detailed examination, we calculate the distribution of procedure usage counts within each individual profile. <ref type="table" target="#tab_4">Table 3</ref> shows the results for winword.exe (95).</p><p>We see that every individual profile has its share of unique procedures and subgroup procedures. The common procedures constitute between 61.4% and 83.1% of the procedures in an individual profile, while the percentage of unique procedures in an individual profile ranges from 1.2% to 9.0%. In terms of the procedures included, none of the profiles is a subset or superset of another profile. We have observed similar phenomena for other benchmark modules. For several benchmark modules, one or more relatively small individual profiles have no unique procedures, but they still contain subgroup procedures. winhlp32.exe and netscape301.exe are the only two benchmark modules where one person uses a subset of the procedures another person uses.</p><p>We also examine whether there are highly similar usage patterns among small groups of users. To evaluate this, we use pair-wise comparison between all individual profiles for a module to see whether some of them have significantly higher similarity among themselves than with other profiles. For each pair of profiles, we calculate the percentage of procedures included in both among all procedures included in either of them. This percentage measures the similarity between two profiles. <ref type="table">Table 4</ref> lists the results for winword.exe (95). All numbers in the table fall between 66.6% and 77.2%, indicating that similarity between each pair of users is on a close level. In the analysis for other Percentage of Procedures unique procedures (used by only one user) subgroup procedures (used by more than one but not all users) common procedures (used by all users)</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Figure 2. Usage count distribution for all benchmark modules</head><p>The Y-axis is the percentage of procedures in the combined profile that fit into a given category. The number of users and the total number of procedures in the combined profile for each benchmark module can be found in  benchmark modules, we have seen a few cases of relatively higher similarity between two or three individuals, but we do not think they are sufficient to conclude that there is particularly high similarity among small groups of users.</p><p>Results in this subsection imply that users use applications in different ways, supporting the theory that user-specific profiling is important for effective optimization.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.3">Correlation between procedure usage count and execution count</head><p>In this subsection, we examine whether there is correlation between a procedure's usage count and its execution count. In many profile-based optimizations, priority is given to the most frequently executed code. In this case, procedures with higher execution counts are more important to the optimization than those with lower counts.</p><p>The procedure execution counts in FX!32 profiles do not always match the traditional definition of procedure execution count. In FX!32, control transfers within the translated Alpha code are not captured in the profile. Since a user may perform program translation from time to time, a procedure's execution count in the profile may be less than the number of times it has been called. However, experience shows that usually only up to a few percents of the counts will differ by more than one order of magnitude. For <ref type="figure" target="#fig_1">Figure 3</ref>, we divide execution counts into levels that each covers at least two orders of magnitude. This figure shows the usage count distribution of all procedures in the combined profile for winword.exe (95), broken down by their average execution counts.</p><p>Among 3842 procedures with average execution counts below 100, about 30% are unique procedures and another 30% are common procedures. Among 724 procedures with average execution counts above 10000, over 90% are used by all or all but one users. These numbers show that frequently executed procedures are more likely to appear in all or most individual profiles than those executed less frequently. In other words, the part of code that users execute the most is similar, despite the differences in their overall profiles. The statistics for other benchmark modules also support this conclusion.</p><p>For optimizations that give priority to frequently executed code, this conclusion on similarity suggests that despite the differences among users, we may find a representative training workload that exercises the procedures frequently used by most users. On the other hand, such a workload may not cover enough procedures for any one user. For winword.exe (95), 2535 procedures have been used by four or five users with average execution counts above 100, while the smallest individual profile includes 4600 procedures and the combined profile includes 7317 procedures. Further analysis in the context of a specific optimization will determine the tradeoff between using such a user-independent training workload and using user-specific profiling.  --76.0% Happy 66.6% 72.5% 71.6% 76.0% -- <ref type="table">Table 4</ref>. Pair-wise comparison between five users of winword.exe <ref type="formula">(95)</ref> The number for each pair of users is the percentage of procedures included in both users' profiles among all procedures included in either of them.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.4">Change in similarity when profiles grow</head><p>When the individual profiles grow larger with more use of the program, one might speculate that their similarity increases as they all approach one common limit, the set of all procedures in the program. <ref type="table">Table 5</ref> examines the change in similarity between five winword.exe (95) profiles when some of them grow larger.</p><p>We took snapshots of the five individual profiles at six different times during a month. Each time at least one profile had grown since the last time. During the first five snapshots, the percentage of common procedures in the combined profile increased and the percentage of unique procedures decreased. In these cases, the similarity between individual profiles increased when some of them grew larger. However, the slow change in the similarity suggests that the individual profiles might never "converge"; that is, profiles from different users may never reach a certain high level of similarity, reflecting their different usage patterns. In fact, in the last snapshot where Sneezy's profile grew, the similarity between individual profiles slightly decreased due to the new procedures Sneezy had started to use. In summary, the users' accumulated usage patterns may become more similar with more use of the program, but some differences persist.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.5">Optimization performance</head><p>This subsection examines the impact of differences in profiles on the performance of programs optimized using the profiles. This impact is dependent on how the profile information is used during the optimization. Different optimizations may have varying sensitivity to differences in profiles. Even with the same optimization, the performance impact may vary for different programs and different workloads.</p><p>In our experiments, the FX!32 translator/optimizer uses the profile to determine the set of code to translate and to guide common compiler optimizations, such as procedure layout, procedure inlining and dead code elimination, on the translated code. We used different training profiles, both individual and combined, to translate/optimize the same module. For each profile, we measured the performance of the application using the translated code. Based on the results we discuss the effectiveness of using profiles from another user or a group of users to translate/optimize a program.</p><p>One difficulty in our experiments was measuring the performance of an interactive application. To achieve repeatability, we chose to measure the execution time of a standard, script-driven workload. We consequently assumed that our "test user" performed this same workload for both training and testing. In reality, a user's usage pattern of a program may change over time, causing the testing workload to be different from the training workload. The impact of this factor on program optimization is not investigated in this paper.</p><p>We conducted our experiments on benchmark modules winword.exe (95) and powerpnt.exe (97).</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.5.1">Microsoft Word benchmark</head><p>For testing on winword.exe (95) from Microsoft Word 7.0 for Windows 95, we used the workload from SYSmark32 for Windows NT version 1.0 distributed by BAPCo <ref type="bibr">[BAPCo]</ref>. We included two individual profiles used in the statistical analysis from users Grumpy and Happy, plus two relatively small individual profiles Dopey and Sleepy to examine the issue of "undertraining". <ref type="figure" target="#fig_2">Figure 4</ref> shows the results for these four individual profiles and various combined profiles. All performance measurements were done on a 500MHz Alpha computer with 64MB of main memory. Word 7.0 was the only application running on the system.</p><p>Without any translation/optimization, the program is executed entirely through emulation, which is slow (459 seconds). The Minimal profile, generated by starting up winword.exe and exiting immediately, is practically the smallest user profile possible and a subset of any real user profile. Its test result (292 seconds) indicates a lower bound of optimization benefit one should expect from using any profile.  <ref type="table">Table 5</ref>. Change in similarity when individual profiles grow larger: winword.exe (95), five users We draw several conclusions from Figure 4:</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Number of Procedures Used By</head><p>1. We achieve the best performance (242 seconds) when we translate the program by using the test user profile. When using a profile from another user or a group, we see performance that is 1-9% worse (245-264 seconds) but still much better than using the Minimal profile.</p><p>2. The optimization benefit has a rough trend of increasing with the similarity between the training profile and the testing profile. However, this relation is not monotonic.</p><p>3. In the graph, the black bars correspond to profiles from groups that include the test user, while the gray bars correspond to profiles from other users and groups that do not include the test user. With the exception of BAPCO+Dopey+Sleepy+Grumpy+Happy, "black bar profiles" provide more effective optimization than "gray bar profiles." This suggests that a group's combined profile is more effective for optimization if the group includes the test user than if not.</p><p>4. Among combined profiles that include the test user profile (the black bars), the larger the profile, the less the optimization benefit. This suggests that a combined profile may become less effective for a user in the group when the group is large. A possible explanation is that extra procedures in the translated code increase memory system load and cause sub-optimal code layout. This may also explain why BAPCO+Dopey+ Sleepy+Grumpy+Happy provides less effective optimization than Dopey+Sleepy+Grumpy+Happy.</p><p>For this benchmark, user-specific profiling has measurable impact on optimization performance. Standard deviation is within 2 seconds for all numbers except 6 seconds for "None" (number, %)</p><p>The number of procedures in the training profile, the similarity between the training profile and the BAPCo profile (calculated as the percentage of procedures included in both profiles among all procedures included in either of them)</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>None</head><p>No profile, and therefore no translation/optimization Minimal profile The profile generated by starting up winword.exe and then exiting immediately BAPCo profile The profile generated from one run of the testing workload from BAPCo +</p><p>The combining of profiles D, S, G, H Dopey, Sleepy, Grumpy, Happy</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.5.2">Microsoft PowerPoint benchmark</head><p>For powerpnt.exe (97) from Microsoft PowerPoint 97, we used an automated testing script designed at Digital Equipment Corporation. Similar with BAPCo workloads, it uses Microsoft Visual Test to drive the application. This script was originally designed to test the functionality of PowerPoint. It included some wait time in between tasks. In this sense, it may be closer to a real user than BAPCo workloads, which mostly consist of continuously executed CPU-intensive tasks.</p><p>On the other hand, some application response time and background activity may be hidden by the wait time, making the throughput measurement of execution time less sensitive to the code quality. <ref type="figure" target="#fig_3">Figure 5</ref> shows the results. All performance measurements were done on a 500MHz Alpha computer with 128MB of main memory. PowerPoint 97 was the only application running on the system.</p><p>The results show that all the individual and combined profiles are almost equally effective for optimization, with differences on the level of 1%. This implies that for this program and this workload, user-specific profiling does not have significant impact on the performance of FX!32 translation/optimization. The number of procedures in the training profile, the similarity between the training profile and the Tester profile (calculated as the percentage of procedures included in both profiles among all procedures included in either of them)</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>None</head><p>No profile, and therefore no translation/optimization Minimal profile The profile generated by starting up powerpnt.exe and then exiting immediately Tester profile</p><p>The profile generated from one run of the testing script +</p><p>The combining of profiles D, M, P Donald, Mickey, Pluto</p><p>Results for these two benchmarks indicate that depending on the program and the workload, differences in profiles can have measurable or insignificant impact on optimization performance.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.">Summary</head><p>This paper has compared and analyzed FX!32 profiles from different users for a set of Windows NT programs. We discovered that the sets of procedures used by individuals are fairly different. Among all procedures used by a group of users, typically around 50% are used by all users, while 7-24% are used by only one of the users. In most cases, the users have usage patterns different from each other, without anyone using a subset or superset of the procedures another person uses. Frequently executed procedures tend to be used by most individuals. With more use of the program over time, different people's usage patterns may become increasingly similar, but our results suggested that they will never converge. For the FX!32 program translation/optimization, differences in profiles can have impact on optimization performance for some benchmarks. Using profiles from another user or a group may be less effective than using the test user's own profile, but is always effective compared to using no profile or a minimal profile. Overall, we conclude that user-specific profiling is an important factor to consider in profile-based optimization.</p></div><figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_1"><head>Figure 3 .</head><label>3</label><figDesc>Figure 3. Procedure distribution: usage count vs. execution count: winword.exe (95), five users Average Execution Count: procedure execution count averaged over users who have use this procedure (Average Execution Count = execution count in combined profile / usage count) number at the top of each bar: the total number of procedures in this range</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_2"><head>Figure 4 .</head><label>4</label><figDesc>Figure 4. Optimization results for winword.exe (95) Training Profile The profile used to translate/optimize the program Execution Time The execution time of the BAPCo workload using the translated code. Average of three warm runs. Standard deviation is within 2 seconds for all numbers except 6 seconds for "None" (number, %) The number of procedures in the training profile, the similarity between the training profile and the BAPCo profile (calculated as the percentage of procedures included in both profiles among all procedures included in either of them)</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_3"><head>Figure 5 .</head><label>5</label><figDesc>Figure 5. Optimization results for powerpnt.exe (97) Training Profile The profile used to translate/optimize the program Execution Time The execution time of the testing workload using the translated code. Average of three warm runs. Standard deviation is within 2 seconds for all numbers (number, %) The number of procedures in the training profile, the similarity between the training profile and the Tester profile (calculated as the percentage of procedures included in both profiles among all procedures included in either of them)</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_2" validated="false"><head>Table 2 . Summary of profiles</head><label>2</label><figDesc></figDesc><table>Combined 
The number of procedures in the combined profile 
Smallest, Largest, Average 
</table></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_3" validated="true"><head>Table 2 .</head><label>2</label><figDesc></figDesc><table>Profiled 
# of Number of Proc. by Usage Count 
User 
Proc. 
1 
(unique) 
2-4 
(subgroup) 
5 
(common) 
Bashful 
4600 
55 
722 
3823 
Doc 
4990 
69 
1098 
3823 
Grumpy 
5332 
210 
1299 
3823 
Sneezy 
5846 
312 
1711 
3823 
Happy 
6222 
562 
1837 
3823 
Combined 7317 
1208 
2286 
3823 

</table></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_4" validated="false"><head>Table 3 .</head><label>3</label><figDesc></figDesc><table>Procedure distribution among five users of 
winword.exe (95) 

# of Proc.: number of procedures in the profile 

We have replaced all user names with pseudonyms. For 
each user, unique procedures are those used by this user 
but none of the other four. Common procedures are those 
used by all five users. 

</table></figure>

			<note place="foot" n="1"> Usually, profiling is done continuously when the application is running and optimization is delayed until off-line.</note>

			<note place="foot" n="2"> This is evaluated by looking at the profile size, the run count (number of times a module has been executed), and asking the users themselves. The run count alone is not a good indication, because one run of an interactive application may involve a varying number of tasks. Typically, the run count is larger than 10 for these profiles. 3 As verification, we compared the profiles generated from running an automated script on two machines, and found them virtually identical.</note>
		</body>
		<back>

			<div type="acknowledgement">
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Acknowledgement</head><p>Many members of the AMT group at Digital Equipment Corporation provided enormous support and important feedback for this project. Special thanks to my advisor at Harvard University, Prof. J. Bradley Chen, for his generous help on improving this paper. Also, thanks to members of the program committee as well as many people at Harvard for their valuable comments.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Availability</head><p>The complete set of results for all benchmarks is available in a technical report <ref type="bibr">[WR98]</ref> and through the URL http://www.eecs.harvard.edu/~zhwang/NT98/</p></div>
			</div>

			<div type="references">

				<listBibl>

<biblStruct xml:id="b0">
	<analytic>
		<title level="a" type="main">The Measured Performance of Personal Computer Operating Systems</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><forename type="middle">B</forename><surname>Chen</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Y</forename><surname>Endo</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">K</forename><surname>Chan</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Mazieres</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Dias</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Seltzer</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><forename type="middle">D</forename><surname>Smith</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">In ACM Transactions on Computer Systems</title>
		<imprint>
			<biblScope unit="volume">14</biblScope>
			<biblScope unit="issue">1</biblScope>
			<biblScope unit="page" from="3" to="40" />
			<date type="published" when="1996-02" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b1">
	<analytic>
		<title level="a" type="main">Spike: An Optimizer for Alpha/NT Executables</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Cohn</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Goodwin</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><forename type="middle">G</forename><surname>Lowney</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">N</forename><surname>Rubin</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the USENIX Windows NT Workshop, USENIX Association</title>
		<meeting>the USENIX Windows NT Workshop, USENIX Association</meeting>
		<imprint>
			<date type="published" when="1997-08" />
			<biblScope unit="page" from="17" to="24" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b2">
	<analytic>
		<title level="a" type="main">Using Latency to Evaluate Interactive System Performance</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Y</forename><surname>Endo</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Z</forename><surname>Wang</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><forename type="middle">B</forename><surname>Chen</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><forename type="middle">I</forename><surname>Seltzer</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the Second Symposium on Operating Systems Design and Implementation, USENIX Association</title>
		<meeting>the Second Symposium on Operating Systems Design and Implementation, USENIX Association</meeting>
		<imprint>
			<date type="published" when="1996-10" />
			<biblScope unit="page" from="185" to="199" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b3">
	<analytic>
		<title level="a" type="main">Predicting Conditional Branches from Previous Runs of a Program</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Fisher</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Freudenberger</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the Fifth International Conference on Architectural Support for Programming Languages and Operating Systems</title>
		<meeting>the Fifth International Conference on Architectural Support for Programming Languages and Operating Systems</meeting>
		<imprint>
			<publisher>ACM</publisher>
			<date type="published" when="1992-10" />
			<biblScope unit="page" from="85" to="95" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b4">
	<analytic>
		<title level="a" type="main">An Analysis of Dynamic Branch Prediction Schemes on System Workloads</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">N</forename><surname>Gloy</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><surname>Young</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><forename type="middle">B</forename><surname>Chen</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><forename type="middle">D</forename><surname>Smith</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 23rd Annual International Symposium on Computer Architecture, ACM</title>
		<meeting>the 23rd Annual International Symposium on Computer Architecture, ACM</meeting>
		<imprint>
			<date type="published" when="1996-05" />
			<biblScope unit="page" from="12" to="21" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b5">
	<analytic>
		<title level="a" type="main">DIGITAL FX!32: Combining Emulation and Binary Translation</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><forename type="middle">J</forename><surname>Hookway</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><forename type="middle">A</forename><surname>Herdeg</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Digital Equipment Corporation</title>
		<imprint>
			<biblScope unit="volume">9</biblScope>
			<biblScope unit="issue">1</biblScope>
			<biblScope unit="page" from="3" to="12" />
			<date type="published" when="1997" />
		</imprint>
	</monogr>
	<note>In Digital Technical Journal</note>
</biblStruct>

<biblStruct xml:id="b6">
	<analytic>
		<title level="a" type="main">Execution Characteristics of Desktop Applications on Windows NT</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Lee</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><surname>Crowley</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Baer</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><surname>Anderson</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">B</forename><surname>Bershad</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">To appear in Proceedings of the 25th International Symposium on Computer Architecture</title>
		<imprint>
			<publisher>IEEE</publisher>
			<date type="published" when="1998-06" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b7">
	<analytic>
		<title level="a" type="main">Studies of Windows NT Performance Using Dynamic Execution Traces</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Perl</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Sites</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the Second Symposium on Operating Systems Design and Implementation, USENIX Association</title>
		<meeting>the Second Symposium on Operating Systems Design and Implementation, USENIX Association</meeting>
		<imprint>
			<date type="published" when="1996-10" />
			<biblScope unit="page" from="169" to="183" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b8">
	<monogr>
		<title level="m" type="main">A Statistical Analysis of User-Specific Profiles</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Z</forename><surname>Wang</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">N</forename><surname>Rubin</surname></persName>
		</author>
		<idno>TR-09- 98</idno>
		<imprint>
			<date type="published" when="1998-07" />
		</imprint>
		<respStmt>
			<orgName>Computer Science Group, Harvard University</orgName>
		</respStmt>
	</monogr>
<note type="report_type">Technical Report</note>
</biblStruct>

<biblStruct xml:id="b9">
	<analytic>
		<title level="a" type="main">System Support for Automated Profiling and Optimization</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">X</forename><surname>Zhang</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Z</forename><surname>Wang</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">N</forename><surname>Gloy</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><forename type="middle">B</forename><surname>Chen</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><forename type="middle">D</forename><surname>Smith</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 16th ACM Symposium of Operating Systems Principles, ACM</title>
		<meeting>the 16th ACM Symposium of Operating Systems Principles, ACM</meeting>
		<imprint>
			<date type="published" when="1997-10" />
			<biblScope unit="page" from="15" to="26" />
		</imprint>
	</monogr>
</biblStruct>

				</listBibl>
			</div>
		</back>
	</text>
</TEI>
