<?xml version="1.0" encoding="UTF-8"?>
<TEI xmlns="http://www.tei-c.org/ns/1.0" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
xsi:schemaLocation="http://www.tei-c.org/ns/1.0 /Users/atharsefid/Desktop/grobid-0.5.3/grobid-home/schemas/xsd/Grobid.xsd"
 xmlns:xlink="http://www.w3.org/1999/xlink">
	<teiHeader xml:lang="en">
		<encodingDesc>
			<appInfo>
				<application version="0.5.3" ident="GROBID" when="2020-09-29T04:25+0000">
					<ref target="https://github.com/kermitt2/grobid">GROBID - A machine learning software for extracting information from scholarly documents</ref>
				</application>
			</appInfo>
		</encodingDesc>
		<fileDesc>
			<titleStmt>
				<title level="a" type="main">Constructing and Managing Appliances for Cloud Deployments from Repositories of Reusable Components</title>
			</titleStmt>
			<publicationStmt>
				<publisher/>
				<availability status="unknown"><licence/></availability>
			</publicationStmt>
			<sourceDesc>
				<biblStruct>
					<analytic>
						<author role="corresp">
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Matthew</forename><forename type="middle">S</forename><surname>Wilson</surname></persName>
							<email>msw@rpath.com</email>
							<affiliation key="aff0">
								<orgName type="institution">rPath, Inc. Raleigh</orgName>
								<address>
									<region>North Carolina</region>
								</address>
							</affiliation>
						</author>
						<title level="a" type="main">Constructing and Managing Appliances for Cloud Deployments from Repositories of Reusable Components</title>
					</analytic>
					<monogr>
						<imprint>
							<date/>
						</imprint>
					</monogr>
				</biblStruct>
			</sourceDesc>
		</fileDesc>
		<profileDesc>
			<abstract>
				<p>In order to efficiently utilize Cloud Computing environments (more specifically, Infrastructure as a Service offerings), developers must be able to quickly incorporate their applications into integrated systems commonly called software appliances. This paper describes a system that can be used to construct and maintain software appliances called Conary. The core of Conary is a software configuration management system that places all the components included in an appliance in a ver-sioned repository. The version control system properties of Conary&apos;s software configuration management design naturally facilities image creation and updates. An approach utilizing Conary solves many of the challenges faced by adopters of Cloud Computing.</p>
			</abstract>
		</profileDesc>
	</teiHeader>
	<text xml:lang="en">
		<body>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="1">Introduction</head><p>The availability of virtualization and cloud computing can allow Information Technology (IT) organizations to be more flexible and responsive to business needs <ref type="bibr" target="#b0">[1]</ref>, but this flexibility does not come without new challenges. Enterprise developers are adopting new platforms (such as LAMP scripting languages <ref type="bibr" target="#b1">[2]</ref> and Ruby <ref type="bibr" target="#b2">[3]</ref>) to more rapidly and efficiently build applications, but IT organizations are often slow to support deploying them. Much of the time spent in the deployment of new applications is fitting the application onto one of several standardized operating systems. This is a major pitfall in traditional software deployment which is only exasperated by virtualization; a better solution is to build Virtual Appliances <ref type="bibr" target="#b3">[4]</ref>.</p><p>The construction and maintenance of virtual appliances requires a holistic approach. As operating system, support libraries, application frameworks, and application components are delivered as a preconfigured unit, the mechanism that assembles the unit and maintains it over time should be designed to manage the system as a whole. Some projects make appliance creation easier, however they achieve it though existing automated operating system installation and post-install scripting capabilities. The operating system and application are continue to be managed separately and the appliance creator still has to design and implement an update mechanism, be that through distributing new virtual machine images or an integrated online update system. Conary <ref type="bibr" target="#b6">[7]</ref> embodies a new approach to constructing and maintaining complete systems of software. This paper will detail Conary's approach to system management with a holistic software configuration management system. Design considerations derived from Conary's approach will be discussed. Finally, implementation will be discussed.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2">Approach</head><p>Traditionally software configuration management practices have been applied to components that, when combined, constitute a software product <ref type="bibr" target="#b7">[8]</ref>. Typically software configuration management is a software development practice, enabling developers to manage the dependencies and interconnections of source code in order to produce consistent binary objects. This approach is sufficient when the software product is an application that is installed on a general purpose operating system. However, if the product is a fully integrated stack of software -from the operating system to the applicationthe scope of software configuration management must be widened to cover every included component. Furthermore, once all the components are versioned individually, the amalgamation of these specific versioned components must also be versioned <ref type="bibr" target="#b8">[9]</ref>.</p><p>Once a full set of software is managed under version control and grouped together, several operations come naturally. A deployment image can be generated from the versioned group of software. This deployment image can be used to install on bare metal systems, imported into a local virtualization system's inventory, or deployed on off-premises infrastructure in the cloud. This image is a transient object; it can always be recreated from the repository. The image is simply a vehicle to deploy the application stack.</p><p>Once a system is deployed, the same repository of versioned components used to create the image can be used to update a running system. The deployed image contains a database that records the system state including all the versions of the components that comprise it. Updating the system is much like updating a source code checkout from a traditional software configuration management system. Files are added, removed, and updated in accordance to the versioned objects in the repository. This incremental update function is particularly important when deploying into the cloud where transferring large amounts of data should be avoided.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3">Design and Implementation</head><p>When laying the architecture for Conary, unique design challenges were considered. Storing files and distributing them to clients had to be efficient for both repository disk space and network transfer. The file format used by clients to obtain incremental changes had to be compact and facilitate operations more akin to software configuration management than package management. Coalescing software components into a functioning, dependency closed set had to be easy for both the developer and the systems engineer. This section will provide information on the implementations that met these design challenges.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.1">File Contents Store</head><p>Conary's purpose is to manage large numbers of interdependent software components over time. This results in several design challenges. Because Conary is placing every software component, including the operating system, under version control, an efficient storage mechanism was required. Traditional software packaging systems store the same file contents redundantly as new versions are produced. This leads to wasted storage in package repositories and unneeded data transfer by each client downloading the package to apply an update.</p><p>Instead of storing the same file contents in multiple atomic package archives, Conary uses a content addressable storage system to record each distinct file in the repository. A SHA-1 <ref type="bibr" target="#b9">[10]</ref> digest of the file contents is calculated. The file is compressed using gzip <ref type="bibr" target="#b10">[11]</ref> and hexadecimal representation of the digest is used as the file name. Unlike most version control systems, Conary does not store file deltas. The typical rate of change for files managed by Conary is much lower than source code files. Storing whole compressed files saves the client and the server from reconstructing file contents from a series of file deltas.</p><p>Concerns have been raised <ref type="bibr" target="#b11">[12]</ref> regarding the safety of assuming that a cryptographic hash is sufficient to declare that two inputs are actually different. These concerns have have been reasonably addressed <ref type="bibr" target="#b12">[13]</ref>, therefore Conary does not take any additional measures to ensure that SHA-1 hash collisions do not occur.</p><p>The space saving benefits of storing file contents using this method have been measured in two Conary repositories populated from software packaged in RPM <ref type="bibr" target="#b13">[14]</ref> format. See <ref type="table" target="#tab_0">Table 1</ref>. As updated RPM files are imported into the repository, the space saving effect increases. As most servers hosting a software repository have large disks, the space saving benefit is not of highest value; the greater value comes in reducing data transfer across the network to geographically distributed systems.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.2">Changesets</head><p>Conary uses a custom changeset file to transmit data to and from a repository. Both the repository and a Conary- managed system use the same changeset format. When a repository applies a changeset, the resulting new object is stored in the database and unique file contents are recorded in the contents store; when a system applies a changeset, the new object is stored in the local database and the file system is updated to the new state. Conary treats the local system much like a repository. The main difference is that a repository can store multiple versions of an object, whereas a local system stores only one. Changesets can be either relative or absolute. A relative changeset contains the differences between two versioned objects and are smaller than absolute changesets. An absolute changeset contains the entire object and can be used to update a repository or a system that does not contain a previous version of the object, or to update a system if the installed version is not known.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Repository</head><note type="other">Conary Size RPM Size Savings CentOS 5 1,080 MiB 1,307 MiB 17.4% SLES 10 SP2 1,259 MiB 1,902 MiB 33.8%</note></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.3">Groups</head><p>Building a group in Conary means composing software components into a cohesive set, closing the set's dependencies, and recording the specific versions of the components included in the group. This feature enables an appliance builder to truly manage the entire system of software as a unit composed of versioned objects, instead of a loosely coupled set of installed software. Furthermore, during the build process policies are applied to the software included in the group. This catches common errors such as file path conflicts and including multiple versions of the same package. In the future, these policies can be extended to inspect package metadata to discover hints regarding package incompatibility or version dependencies. In cases where programmatic determination of compatibility is unreliable, software providers can use groups to define sets of system software that are known to work correctly together.</p><p>Groups are created by processing a Conary recipe file. Recipe files are small Python programs that, when interpreted, locate the requested software components from the repository, ensure dependency closure, and create a changeset that can be committed to a Conary repository. By using Python as the recipe language, Conary can take advantage of object oriented features such as inheritance. In the following group recipe example a superclass is loaded from the "group-appliance" component in a Conary repository. This superclass is provided by the operating system platform and ensures that the minimum system software is included in the group. loadRecipe('group-appliance') class Appliance(GroupApplianceRecipe):</p><p>name='group-jira-appliance' version='1.0' def addPackages(r): r.add('openssh-server') r.add('tomcat') r.add('jira')</p><p>By using inheritance, the appliance builder can focus on the application and its dependencies. Often the required system software components differ between virtualization targets. For example, if an appliance will be deployed in the 32-bit EC2 environment then a Xen-optimized "nosegneg" glibc package should be included in the appliance. If VMware is the target, the vmxnet and vmblock drivers should be included to optimize disk and network performance. The GroupApplianceRecipe superclass handles these differences; the appliance developer can focus on the application. At build time the appliance developer specifies the required targets (32-bit, 64-bit, Xen, VMware, etc.) and the appropriate flavors <ref type="bibr" target="#b6">[7]</ref> of the group are produced.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.4">Deployment</head><p>Once the full set of versioned software components for an appliance are bound together as a group, a deployment image can be created. rBuilder <ref type="bibr">[15]</ref> includes a system that automates this process. A file system large enough to house the appliance software is created. The appropriate group is then installed onto the file system. Any finalization scripts included in the software components are executed in a contained virtual environment. The resulting file system is then manipulated as required for the target environment. For example, the file system can be transformed into a a VMware formatted VMDK image <ref type="bibr">[16]</ref> or a HyperV VHD image <ref type="bibr">[17]</ref>. To deploy the appliance to the Amazon Web Services EC2 cloud, the file system image is bundled and uploaded using the EC2 deployment tools.</p><p>Building an image is a starting point for a software appliance. To efficiently maintain multiple deployed appliances in geographically distributed locations, a Conary repository should be co-located with the deployed appliances. This mirror Conary repository is updated using relative changesets to reduce data transfer over slower links. Mirrors can be configured to propagate only changes made to a particular group, reducing the repository footprint.</p><p>There are several options for executing updates on the appliance from simple cron-based scripts to WEBM/CIM solutions. Update coordination between multiple appliances is an area that needs additional thought.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4">Related Work</head><p>Several other projects and products are constructing virtual appliances. In one such project, virt-factory <ref type="bibr" target="#b4">[5]</ref> uses Red Hat's kickstart <ref type="bibr" target="#b14">[18]</ref> operating system installation scripting language and Puppet <ref type="bibr">[19]</ref> manifests to perform operating system customization and application deployment. One problem with this approach is that the operating system and application are still managed disjointedly. Organizations adopting a similar approach with scripting and automation tools like Puppet must set up multiple software repositories, build synchronization scripts to distribute these repositories geographically, and rely on incremental scripting to manipulate systems from state to state. Neither kickstart nor Puppet have integrated version control systems, therefore an organization must take additional steps to version control these files <ref type="bibr">[20]</ref>.</p><p>Online offerings such as RightScale <ref type="bibr">[24]</ref> help deploy and scale applications in the cloud. This is beneficial if your deployment target is EC2, but the same technology cannot be used for other cloud targets, private virtualization infrastructures, or bare metal deployments. SUSE Studio <ref type="bibr">[23]</ref> and CohesiveFT's Elastic Server <ref type="bibr">[25]</ref> create software appliance images, but updates are not coordinated between all the included software components. When updates are applied, the appliance retrieves the latest version of each installed package from the repository.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5">Conclusion</head><p>The software appliance model aims to unify applications and operating systems into a single unit which brings new requirements to system maintenance. It is more effective to build manageability into a system from day one than to retrofit <ref type="bibr" target="#b5">[6]</ref>. Existing server automation tools help reduce a system administrator's workload but do not make the systems themselves more manageable. As virtualization and cloud computing increases the number of deployed systems to manage, new approaches to building inherently manageable systems must considered. No reputable software development organization would attempt to deliver a quality product without a software configuration management system <ref type="bibr" target="#b15">[21]</ref>. It is time the same methodologies are employed to manage entire software systems.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="6">Availability</head><p>Conary is freely available under the Common Public License and can be downloaded from ftp:// download.rpath.com/conary/. Alternatively, rPath makes Conary available to users under a commercial license. rPath's commercial rBuilder product automates building deployment images for bare metal, virtualization, and cloud targets.</p></div><figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_0"><head>Figure 1 :</head><label>1</label><figDesc>Figure 1: Conary Repository Architecture Overview</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_0" validated="false"><head>Table 1 : Storage requirements for packages imported into a Conary repository versus the native RPM package size</head><label>1</label><figDesc></figDesc><table></table></figure>
		</body>
		<back>

			<div type="acknowledgement">
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="7">Acknowledgments</head><p>The development of Conary and related technologies is partially supported by the Department of Energy under grant number DE-FG02-06ER84505. Erik Troan assisted by writing a tool to calculate the storage utilized by the contents store versus binary RPMs. Thanks to Elizabeth Yarbrough, who helped proofread, and to the anonymous reviewers for their helpful feedback.</p></div>
			</div>

			<div type="references">

				<listBibl>

<biblStruct xml:id="b0">
	<monogr>
				<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Jeffrey</forename><forename type="middle">C</forename><surname>Mogul</surname></persName>
		</author>
		<title level="m">Operating Systems Should Support Business Change, USENIX Tenth conference on Hot Topics in Operating Systems</title>
		<imprint>
			<date type="published" when="2005" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b1">
	<analytic>
		<title/>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">George</forename><surname>Lawton</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">LAMP Lights Enterprise Development Efforts, Computer</title>
		<imprint>
			<biblScope unit="volume">38</biblScope>
			<biblScope unit="issue">9</biblScope>
			<date type="published" when="2005-09" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b2">
	<analytic>
		<title level="a" type="main">Enterprise Integration with Ruby</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Steve</forename><surname>Vinoski</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE Internet Computing</title>
		<imprint>
			<biblScope unit="volume">10</biblScope>
			<biblScope unit="issue">4</biblScope>
			<date type="published" when="2006-07" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b3">
	<analytic>
		<title level="a" type="main">Simplifying Service Deployment with Virtual Appliances</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Changhua</forename><surname>Sun</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Le</forename><surname>He</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Qingbo</forename><surname>Wang</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Ruth</forename><surname>Willenborg</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">IEEE International Conference on Services Computing</title>
		<imprint>
			<date type="published" when="2008" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b4">
	<analytic>
		<title level="a" type="main">Manageable Virtual Appliances</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">David</forename><surname>Lutterkort</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Mark</forename><surname>Mcloughlin</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Linux Symposium</title>
		<imprint>
			<date type="published" when="2007" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b5">
	<monogr>
				<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">George</forename><surname>Candea</surname></persName>
		</author>
		<title level="m">Toward Quantifying System Manageability, USENIX Fourth Workshop on Hot Topics in System Dependability</title>
		<imprint>
			<date type="published" when="2008" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b6">
	<analytic>
		<title level="a" type="main">Repository-based System Management Using Conary</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Michael</forename><forename type="middle">K</forename><surname>Johnson</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Erik</forename><forename type="middle">W</forename><surname>Troan</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Matthew</forename><forename type="middle">S</forename><surname>Wilson</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Linux Symposium</title>
		<imprint>
			<date type="published" when="2004" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b7">
	<analytic>
		<title level="a" type="main">Version Models for Software Configuration Management</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Reidar</forename><surname>Conradi</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Bernhard</forename><surname>Westfechtel</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">ACM Computing Surveys</title>
		<imprint>
			<biblScope unit="volume">30</biblScope>
			<biblScope unit="issue">2</biblScope>
			<date type="published" when="1998-06" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b8">
	<monogr>
		<title level="m" type="main">A version to rule them all, journal entry</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Erik</forename><forename type="middle">W</forename><surname>Troan</surname></persName>
		</author>
		<ptr target="http://ewtroan.livejournal.com/23225.html" />
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b9">
	<analytic>
		<title/>
	</analytic>
	<monogr>
		<title level="j">Federal Information Processing Standards (FIPS) Publication</title>
		<imprint>
			<biblScope unit="page" from="180" to="181" />
			<date type="published" when="1995" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b10">
	<monogr>
		<title level="m" type="main">GZIP File Format Specification version 4.3. Internet RFC 1952</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">L</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Peter</forename><surname>Deutsch</surname></persName>
		</author>
		<imprint>
			<date type="published" when="1996-05" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b11">
	<analytic>
		<title level="a" type="main">An analysis of compareby-hash</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Valerie</forename><surname>Henson</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Aurora</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">USENIX Hot Topics in Operating Systems</title>
		<imprint>
			<date type="published" when="2003" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b12">
	<analytic>
		<title level="a" type="main">Compare-by-Hash: A Reasoned Analysis</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Black</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">USENIX Annual Technical Conference</title>
		<imprint>
			<date type="published" when="2006" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b13">
	<monogr>
				<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Mark</forename><surname>Ewing</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Erik</forename><surname>Troan</surname></persName>
		</author>
		<title level="m">The RPM Packaging System, First Conference on Freely Redistributable Software</title>
		<imprint>
			<date type="published" when="1996" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b14">
	<monogr>
				<ptr target="http://www.redhat.com/docs/manuals/enterprise/RHEL-5-manual/Installation_Guide-en-US/ch-kickstart2.html" />
		<title level="m">Inc. Red Hat Enterprise Linux Installation Guide</title>
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b15">
	<analytic>
				<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Jacky</forename><surname>Estublier</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">David</forename><surname>Leblang</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Andr</forename><surname>Van Der Hoek</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Reidar</forename><surname>Conradi</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Geoffrey</forename><surname>Clemm</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Walter</forename><surname>Tichy</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Darcy</forename><surname>Wiborg-Weber</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Impact of Software Engineering Research on the Practice of Software Configuration Management</title>
		<imprint>
			<date type="published" when="2005-10" />
			<biblScope unit="volume">14</biblScope>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b16">
	<analytic>
		<title level="a" type="main">Vasanth Bala, emphOpening black boxes: using semantic information to combat virtual machine image sprawl</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Darrell</forename><surname>Reimer</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Arun</forename><surname>Thomas</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Glenn</forename><surname>Ammons</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Todd</forename><surname>Mummert</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Bowen Alpern</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the fourth ACM SIGPLAN/SIGOPS international conference on Virtual execution environments</title>
		<meeting>the fourth ACM SIGPLAN/SIGOPS international conference on Virtual execution environments</meeting>
		<imprint>
			<date type="published" when="2008" />
		</imprint>
	</monogr>
</biblStruct>

				</listBibl>
			</div>
		</back>
	</text>
</TEI>
