<?xml version="1.0" encoding="UTF-8"?>
<TEI xmlns="http://www.tei-c.org/ns/1.0" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
xsi:schemaLocation="http://www.tei-c.org/ns/1.0 /Users/atharsefid/Desktop/grobid-0.5.3/grobid-home/schemas/xsd/Grobid.xsd"
 xmlns:xlink="http://www.w3.org/1999/xlink">
	<teiHeader xml:lang="en">
		<encodingDesc>
			<appInfo>
				<application version="0.5.3" ident="GROBID" when="2020-09-29T02:02+0000">
					<ref target="https://github.com/kermitt2/grobid">GROBID - A machine learning software for extracting information from scholarly documents</ref>
				</application>
			</appInfo>
		</encodingDesc>
		<fileDesc>
			<titleStmt>
				<title level="a" type="main">AONT-RS: Blending Security and Performance in Dispersed Storage Systems</title>
			</titleStmt>
			<publicationStmt>
				<publisher/>
				<availability status="unknown"><licence/></availability>
			</publicationStmt>
			<sourceDesc>
				<biblStruct>
					<analytic>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Jason</forename><forename type="middle">K</forename><surname>Resch</surname></persName>
							<email>jresch@cleversafe.com</email>
							<affiliation key="aff0">
								<orgName type="department" key="dep1">Development Cleversafe</orgName>
								<orgName type="department" key="dep2">EECS Department</orgName>
								<orgName type="institution">University of Tennessee</orgName>
								<address>
									<addrLine>Inc. 222 S. Riverside Plaza, 203 Claxton Complex Knoxville</addrLine>
									<postCode>1700, 60606, 37996</postCode>
									<settlement>Suite, Chicago</settlement>
									<region>IL, TN</region>
								</address>
							</affiliation>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">James</forename><forename type="middle">S</forename><surname>Plank</surname></persName>
							<email>plank@cs.utk.edu</email>
							<affiliation key="aff0">
								<orgName type="department" key="dep1">Development Cleversafe</orgName>
								<orgName type="department" key="dep2">EECS Department</orgName>
								<orgName type="institution">University of Tennessee</orgName>
								<address>
									<addrLine>Inc. 222 S. Riverside Plaza, 203 Claxton Complex Knoxville</addrLine>
									<postCode>1700, 60606, 37996</postCode>
									<settlement>Suite, Chicago</settlement>
									<region>IL, TN</region>
								</address>
							</affiliation>
						</author>
						<title level="a" type="main">AONT-RS: Blending Security and Performance in Dispersed Storage Systems</title>
					</analytic>
					<monogr>
						<imprint>
							<date/>
						</imprint>
					</monogr>
				</biblStruct>
			</sourceDesc>
		</fileDesc>
		<profileDesc>
			<abstract>
				<p>Dispersing files across multiple sites yields a variety of obvious benefits, such as availability, proximity and reliability. Less obviously, it enables security to be achieved without relying on encryption keys. Standard approaches to dispersal either achieve very high security with correspondingly high computational and storage costs, or low security with lower costs. In this paper, we describe a new dispersal scheme, called AONT-RS, which blends an All-Or-Nothing Transform with Reed-Solomon coding to achieve high security with low computational and storage costs. We evaluate this scheme both theoretically and as implemented with standard open source tools. AONT-RS forms the backbone of a commercial dispersed storage system, which we briefly describe and then use as a further experimental testbed. We conclude with details of actual deployments.</p>
			</abstract>
		</profileDesc>
	</teiHeader>
	<text xml:lang="en">
		<body>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="1">Introduction</head><p>Dispersed storage systems coalesce multiple storage sites into a collective whole. Files are decomposed into smaller blocks which are computationally massaged and then dispersed to the storage sites. When a client desires to read a file, it retrieves some subset of the blocks, which are combined to reconstitute the original file. Compared to traditional single-site storage systems, dispersed storage systems offer a variety of benefits. Multiple independent storage sites offer greater availability than a single site, since they have no single point of failure. When sites are physically distributed across a wide area, they offer physical proximity to distributed clients, which can improve performance and scalability. Finally, the massaging of data typically includes adding redundancy in the form of erasure codes or secret sharing, which improves reliability in the face of failures.</p><p>There have been many dispersed storage systems developed in the past ten years.</p><p>Examples include storage systems such as Oceanstore <ref type="bibr" target="#b22">[23]</ref>, Pergamum <ref type="bibr" target="#b28">[29]</ref>, POTSHARDS <ref type="bibr" target="#b29">[30]</ref>, PASIS <ref type="bibr" target="#b8">[9]</ref>, Gridsharing <ref type="bibr" target="#b30">[31]</ref>, Glacier <ref type="bibr" target="#b10">[11]</ref>, Cleversafe <ref type="bibr" target="#b3">[4]</ref> and Tahoe-LAFS <ref type="bibr" target="#b31">[32]</ref> among others. Related to dispersed storage systems are distributed or peer-to-peer storage systems which use replication rather than coding to achieve reliability. Examples include LOCKSS <ref type="bibr" target="#b13">[14]</ref>, Google file system <ref type="bibr" target="#b7">[8]</ref>, Elephant <ref type="bibr" target="#b26">[27]</ref>, PAST <ref type="bibr" target="#b25">[26]</ref> and BitTorrent <ref type="bibr" target="#b4">[5]</ref>. A side benefit of dispersal is the ability to provide security without the use of encryption keys. The basic techniques are classics from computer science literature: Shamir's secret sharing <ref type="bibr" target="#b27">[28]</ref> and Rabin's information dispersal based on non-systematic erasure codes <ref type="bibr" target="#b20">[21]</ref>. Each technique is a (k, n) threshold scheme: The storage system transforms a file into n distinct blocks. A client or attacker must retrieve at least k of the n blocks to reconstruct the file. With fewer than k blocks, the client or attacker gets no information. Several of the abovementioned systems <ref type="bibr" target="#b8">[9,</ref><ref type="bibr" target="#b29">30,</ref><ref type="bibr" target="#b30">31]</ref> use these techniques to achieve security by storing each of the n pieces at a different site, and assuming that an attacker will not be able to authenticate himself to at least k of them. This avoids encryption strategies which require the secure storage of encryption keys, a difficult and dangerous practice (see <ref type="bibr" target="#b29">[30]</ref> for a thorough discussion of this problem).</p><p>Each technique achieves a different level of security with different performance and storage requirements. If the original file is b bytes in size, Shamir's scheme requires a total of nb bytes, while Rabin's requires nb k . Shamir's requires more computation as well. To compensate for the extra storage and computation, Shamir's scheme is more secure, achieving information theoretic security. Rabin's security is far less, and would be unacceptable in many environments.</p><p>In this paper, we describe a further modification to Rabin's scheme that achieves improved computational performance, security and integrity. We achieve this by combining the All-Or-Nothing Transform (AONT) <ref type="bibr" target="#b23">[24]</ref> with systematic Reed-Solomon erasure codes <ref type="bibr" target="#b12">[13]</ref>.</p><p>Hence, we call it AONT-RS. We describe the technique, evaluate it both theoretically and experimentally and detail how it fits into a commercial dispersed storage system. We conclude with some field data of actual deployments.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2">Dispersal Algorithms</head><p>At the heart of all (k, n) threshold schemes (which we heretofore call dispersal algorithms) is a matrix-vector product, illustrated in <ref type="figure" target="#fig_0">Figure 1</ref>. The data to be stored is broken into words or elements which are w bits in length. A generator or dispersal matrix G is created, which has n rows and k columns. This matrix is multiplied by a kelement vector D (called the data or message) to yield a n-element vector C called the codeword. Each element of the codeword is stored on a different storage node. The dispersal matrix is constructed so that all combinations of k rows yield invertible matrices. This gives us a technique to reconstruct D from any k surviving elements of the codeword: each row of G corresponds to the calculation of a codeword element. We create a new k × k matrix A from the rows of G that correspond to the k surviving elements. We invert A and multiply A −1 by the surviving elements to yield D. The construction of G guarantees that A is invertible.</p><p>So that elements may fit into computer words, it is convenient that w be a power of two. To achieve this, we employ Galois Field arithmetic, GF(2 w ), where addition is equal to bitwise exclusive-or (XOR) and multiplication is implemented in a variety of ways either in hardware or software. In this way, dispersal is simply a variant of the well known Reed-Solomon codes <ref type="bibr" target="#b12">[13,</ref><ref type="bibr" target="#b21">22]</ref>.</p><p>A tutorial on implementing Reed-Solomon codes in this manner is available in <ref type="bibr" target="#b16">[17]</ref>, and a thorough discussion of implementing Galois Field arithmetic is provided in <ref type="bibr" target="#b9">[10]</ref>. There is also a methodology that converts multiplications into XOR's described in <ref type="bibr" target="#b2">[3]</ref>. There are opensource implementations of these codes and methodologies in <ref type="bibr" target="#b15">[16,</ref><ref type="bibr" target="#b19">20,</ref><ref type="bibr" target="#b24">25,</ref><ref type="bibr" target="#b35">36]</ref>.</p><p>Shamir's secret sharing algorithm encodes w bits of data in d 0 . The remaining elements of D are randomly chosen w-bit words. The matrix G is a Vandermonde matrix, where g i, j = i j , which guarantees that any k rows are invertible so long as n ≤ 2 w <ref type="bibr" target="#b27">[28]</ref>. Thus, when one uses Shamir's algorithm on a b-byte file, the total storage requirement is nb bytes, and the act of encoding requires O(knb) XOR and multiplication operations (we will characterize this further in Section 6 below). The security guarantees of Shamir's algorithm are very strong -even with an infinite amount of computing power, unless an attacker has possession of k words, he cannot determine anything about the initial data. Moreover, this is done without the necessity of storing encryption keys.</p><p>Rabin's information dispersal algorithm (IDA) weakens the security, but improves both storage efficiency and performance. Each element of D now contains a word of data. Thus the storage requirement is nb k bytes, improving both storage efficiency and encoding performance by a factor of k. Like Shamir, k elements of the codeword are required to reconstruct the original data. However, the security guarantees of Rabin are far less than Shamir. We will analyze this below in Section 5, but attackers looking for known or patterned data can find it more easily from elements of the codeword. To combat this problem, Rabin suggests a technique to generate the rows of G randomly, embed the row id's within each codeword element, then encrypt the codewords <ref type="bibr" target="#b20">[21]</ref>. Unfortunately, this requires storing an external encryption key, which does not solve the main problem we wish to solve (providing security without securely storing encryption keys).</p><p>In 1993, Krawczyk proposed a blending of Rabin and Shamir, by encrypting the data with a key-based encryption algorithm, and then dispersing the encrypted data with an IDA and the key with a secret sharing scheme <ref type="bibr" target="#b11">[12]</ref>. This is called Secret Sharing Made Short (SSMS). Our dispersal algorithm, described in the next section, also enriches Rabin's IDA with security. Unlike SSMS, it does so without secret sharing, and with the integration of integrity checking for corruption.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3">A New Dispersal Algorithm: AONT-RS</head><p>We enrich Rabin's IDA in two ways. First, we employ a variant of Rivest's All-or-nothing Transform (AONT) as a preprocessing pass over the data <ref type="bibr" target="#b23">[24]</ref>. The AONT may be viewed as a (s + 1, s + 1) threshold scheme. Data composed of s words of size w A 1 is encoded into s + 1 different words so that none of the original words may be decoded unless all s + 1 encoded words are present, or an attacker possesses enough computing power to crack an encryption key. The key, however, is encoded with the data. If a file's size is b bytes, the performance of encoding is O(b). The benefits of the AONT are:</p><p>• No external keys are necessary.</p><p>• Very little extra storage is required.</p><p>• The computational requirements of the attacker may be a parameter of the encoding.</p><p>• The performance is good.</p><p>The AONT works as follows. The data is composed of s words d 0 ,...,d s−1 , each of which is w A bits in length. A random key K is chosen, and each codeword c i is calculated as:</p><formula xml:id="formula_0">c i = d i ⊕ E(K, i + 1),</formula><p>where E is a key-based encryption algorithm such as AES <ref type="bibr" target="#b5">[6]</ref>. A final codeword, c k , is calculated to be a function of K and a hash of the other codewords. The AONT has computational security, which means that unless an attacker possesses all s+ 1 codewords or can guess K, the attacker cannot get information about any word or data. We will discuss this further in section 5 below. We modify this scheme slightly. We add an extra word of data d s , called a canary <ref type="bibr" target="#b1">[2]</ref>. This word has a known, fixed value, which allows us to check the integrity of the data when it is decoded.</p><p>We generate c 0 , . . . , c s as described above and then calculate a hash h of the s + 1 codewords using a standard hash algorithm such as SHA-256 <ref type="bibr">[15]</ref> having an output at least as long as K. We then calculate a final block c s+1 as:</p><formula xml:id="formula_1">c s+1 = K ⊕ h.</formula><p>Our second modification of Rabin's IDA is to employ a systematic erasure code instead of a non-systematic one. A systematic code is defined to be one where the codeword contains the original elements of D. Without loss of generality, the first k elements of C are equal to the elements of D: c i = d i for 0 ≤ i &lt; k. This means that the first k rows of G compose a k × k identity matrix as pictured in <ref type="figure" target="#fig_1">Figure 2</ref>.</p><p>Employing a systematic erasure code instead of a nonsystematic one (as in both the Shamir and Rabin algorithms) improves performance because it eliminates the <ref type="bibr" target="#b0">1</ref> Since AONT-RS mixes AONT with dispersal, we differentiate its word size from the dispersal's word size using w A instead of w. need to encode the first k codewords. Since many systems use values of k that are large relative to n (e.g. POT-SHARDS' evaluation uses a (3,5) Shamir scheme <ref type="bibr" target="#b29">[30]</ref>) the savings during encoding with a systematic erasure code are substantial. Moreover, when decoding, codeword elements that are equal to data elements do not have to be decoded, which improves performance further.</p><p>We call our dispersal technique AONT-RS, as it is a combination of the All-Or-Nothing Transform and ReedSolomon coding. The intuition is that we use the AONT for security and the dispersal for availability, proximity and fault-tolerance. This is unlike Shamir, Rabin and SSMS which use dispersal to achieve both functions. Several diagrams depict the operation of AONT-RS and interaction between AONT and Reed-Solomon coding. In <ref type="figure" target="#fig_2">Figure 3</ref>, data is processed by AONT. A canary is appended to the data, and the data and canary are encrypted with a random key. A hash value of the encrypted data is computed. The hash value and random key are then combined via bitwise exclusive-or to form a difference, which is appended to the encrypted data to form the AONT package.</p><p>Once processed by AONT, the result is treated as normal input to a systematic IDA, as depicted in <ref type="figure" target="#fig_3">Figure 4</ref>.  The IDA splits the input into k slices formed directly from the input and computes n − k coding slices. Slices are then stored to separate locations.</p><p>At a future time, slices may be retrieved and used to recover the data. The first step in this process requires obtaining a threshold number of slices, as in <ref type="figure" target="#fig_4">Figure 5</ref>. Short of a threshold number of slices the entire AONT package cannot be recovered; there is not enough information contained in m &lt; k slices to yield the original input, whose length is k times the slice length. However, if one possesses any k of the slices, they may compute the original input to the IDA which in this case is the AONT package.</p><p>As shown in <ref type="figure" target="#fig_5">Figure 6</ref>, Reversing the AONT operation is trivial when one possesses the entire package. The first step is to compute the hash, h, of the encrypted data. Since the last block contains K ⊕ h and we know the hash value h, we may exclusive-or the last block with the hash to find (K ⊕ h ⊕ h). Since h ⊕ h equals zero, the result is the random key K. The random key is then used to decrypt the encrypted data, and the canary is checked to detect corruption.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4">A Concrete Example</head><p>To help illustrate, we present a concrete example. Suppose we have a 4KB block of data, D that we wish to massage into 16 slices on 16 storage nodes so that we may reconstruct and verify the data so long as we pos- </p><formula xml:id="formula_2">s i, j = d j ⊕ 9 ! x=1 (i + 1) x r j,x ,</formula><p>where r j,x is a random byte and arithmetic is over GF <ref type="formula">(2 8</ref> ). The total storage requirement is 64 KB.</p><p>Rabin: To apply Rabin, we pad D to be 4100 bytes and then partition it into ten data slices DS 0 ,...,DS 9 of 410 bytes each. As with Shamir, we view each data slice DS i to be composed of 410 individual bytes DS i,0 ,... Ds i,409 . We then calculate each of the 16 slices using Reed-Solomon coding on the individual bytes: 2</p><formula xml:id="formula_3">s i, j = 9 ! x=0 (i + 1) x d x, j .</formula><p>Again, arithmetic is over GF(2 8 ). The total storage requirement is 16*410 = 6.41 KB.</p><p>SSMS: With SSMS, we select a random 16-byte encryption key and encrypt the data with an encryption algorithm such as AES. We then disperse it using Rabin and disperse the key using Shamir. The total storage requirement is 16*(410+16) = 6.65 KB.</p><p>AONT-RS: We will be adding 34 additional bytes to the data, and we will first view it as being composed of 257 16-byte words, d 0 , . . . , d 256 , where the first 256 words are the original data. We set d 256 to be a 16-byte canary value. We choose K to be sixteen random bytes and set each c i to equal d i ⊕ E(K, i + 1) where E is a standard encryption algorithm. Next we calculate h to be a 16-byte hash of c 0 , . . . , c 256 . Finally, we set c 257 to equal h ⊕ K. The last 2 bytes are immaterial -they are simply padding so that the data may be partitioned into ten equal slices. They could be used as additional canaries if desired.</p><p>As with Rabin, we partition the 4130 bytes into ten data slices DS 0 , . . . , DS 9 of 413 bytes each. These will be stored on the first ten storage nodes. Six additional coding slices CS 0 , . . . ,CS 5 will be calculated using a different dispersal matrix, such as the one depicted in <ref type="figure" target="#fig_6">Fig- ure 7</ref>, which is derived from the Vandermonde matrix for systematic coding (see <ref type="bibr" target="#b17">[18]</ref> for an explanation of why a Vandermonde matrix is inadequate for this purpose  In each of the four methods, a client or attacker needs to acquire 10 of the 16 slices to read the data. Each method has different security and performance characteristics, which are included in the sections of Security and Performance below.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5">Security Evaluation</head><p>The threat model that we use is one where individual storage servers belong to different domains, both administrative and physical. Servers may be lost due to nonsecurity-related events like power failure or water damage, or their security may be compromised; for example a rogue system administrator or outside attacker can steal data. Moreover, servers may become corrupted either maliciously or due to the natural process of time. We assume that the physical dispersal of storage servers is limiting on an attacker, and that the difficulty of breaching servers in multiple domains, along with a judicious choice of k and n, is sufficient to make the system secure.</p><p>All of these schemes provide a good level of securityif one cannot truly decode the data without acquiring all k slices, then an attacker without some a priori information about the data will not be able to glean anything from fewer than k slices. In the words of Rabin, "We do not see a way of fully reconstructing even small portions of D from k − 1 pieces" <ref type="bibr" target="#b20">[21]</ref>. <ref type="bibr" target="#b2">3</ref> However, if an attacker has some notion of what data he or she is seeking but possesses fewer than k − 1 slices, then the schemes differ greatly. We will consider the most pathological example: An attacker possesses m &lt; k <ref type="bibr" target="#b2">3</ref> We have changed the variables in the quote to match our paper. slices of the codeword C and wants to verify whether the data that it encodes matches some predetermined value. Further, if the attacker can verify that one slice of D matches, then the attacker can be assured that the rest matches. While this seems rather generous to the attacker, there are many realistic attacking scenarios that can be reduced to this one <ref type="bibr" target="#b6">[7]</ref>. For each algorithm, we assume that the attacker knows how the slices were generated, except for the random numbers.</p><p>Shamir: Shamir's security is guaranteed. Attackers cannot get any information from fewer than k slices, regardless of their computing power. For example, with k − 1 slices each of size w, there are 2 w potential values of d 0 that can generate those slices. Thus, every possible value of d 0 is equally likely. One needs the k-th slice to determine the actual value of d 0 . This is information theoretic security.</p><p>Rabin: Since Rabin's IDA has no randomness, it has no security, even if the attacker owns just one slice. Since the attacker knows how the slices are generated, compromise consists solely of verifying that a slice has a predetermined value. Further, if the generator matrix is known and the data has recognizable patterns (i.e. it is not random looking) then it is possible to guess the content of missing slices. If one has k − 1 slices, trying each of the 2 w possibilities for words of a missing slice will yield k recognizable words when the correct value is attempted.</p><p>SSMS: SSMS has computational security <ref type="bibr" target="#b11">[12]</ref>. Without the key, one has to break the encryption, which can be made computationally intractible with a large enough key. Moreover, since Shamir protects the key with information theoretic security, there is no way get the key with fewer than k slices.</p><p>AONT-RS: AONT has the property that unless one has all of the encrypted data, one cannot decode any of it. This is because one needs all of the data to discover K, and one cannot decode any of the data without K. However, if an attacker owns K and one slice, then the attacker can easily verify that D has a predetermined value, just as in Rabin. Thus, we analyze the difficulty in having the attacker figure out K's value. Suppose the attacker owns the first slice, which contains the first encoded word of D, which is equal to d 0 ⊕ E(K, 1). The encoding function guarantees that enumeration is the only way to discover K's value, which means that an attacker must test up to 2 w A potential values of K to discover its real value. Like SSMS, this is computational security.</p><p>Thus, both AONT-RS and SSMS have computational security. If an attacker owns any data slice, then compromise can only occur by discovering K as above.  slices adds no information -the act of verification still boils down to enumerating all potential values of K. The encryption and therefore missing words in other slices cannot be guessed in the same way they can under Rabin. Special mention must be made of storing K ⊕ h as the last element of the codeword. Cryptographic hash functions are designed to have an unpredictable and uniformly distributed output. Further, they are designed to follow the strict avalanche criterion <ref type="bibr" target="#b34">[35]</ref>, meaning h is dependent on every bit of input. Therefore unless an attacker knows all code words c 0 , . . . , c s , h cannot be predicted. Modeling the hash function as a random oracle, h encrypts K in the same manner as a One-Time-Pad <ref type="bibr" target="#b33">[34]</ref> and provides information theoretic security since h is the same length as K. Therefore K ⊕ h yields no information about K when h is unknown.</p><p>Moreover, the avalance criterion allows the canary to be sufficient to check integrity. If any bit of the stored slices is modified, then with sufficient probability, the calculated hash h 񮽙 will be different from the one used to calculate the difference. Since h 񮽙 differs from h, the calculated encryption key K will be incorrect, and as a result, the value in the calculated canary will differ from its known value.</p><p>While computational security is not as strong as information theoretic security, in our view it is functionally equivalent. As long as w A is sufficiently large, it is computationally infeasible for an attacker to even verify that slices hold given data. For example, when w = 256 as in Section 4, compromise requires the enumeration of 2 256 keys. To put this in perspective, if each person on earth had access to a trillion computers that can test a trillion keys per second, it would take over 10 35 years on average to correctly guess the key. According to some estimates of proton half-life, most matter in the universe will have decayed before the key would be found <ref type="bibr" target="#b0">[1]</ref>.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="6">Theoretical Performance</head><p>Let Perf(R,C, S) be the CPU time that it takes to encode D, composed of S total bytes, with a R × C dispersal matrix. In terms of big-O notation, Perf(R,C, S) = O(RCS). A more precise evaluation of Perf(R,C, S) is difficult, because of the variety of ways that the encoding may be implemented. If one implements the encoding with standard finite field arithmetic, then:</p><formula xml:id="formula_4">Perf(R,C, S) = S C 񮽙 (R − 1)(C − 1) Mult + R(C − 1) XOR 񮽙 ,</formula><p>where Mult is the bandwidth of performing Galois Field multiplication and XOR is the bandwidth of performing XOR operations. This is because encoding becomes a series of dot products to create R coding slices each of whose size is S C bytes. The difference in the number of multiplications vs. XORs arises becuase nearly all dispersal matrices are like <ref type="figure" target="#fig_6">Figure 7</ref> and have ones in their top rows and leftmost columns. Implementations of Reed-Solomon coding do, however, differ in their performance characteristics. Using Cauchy Reed-Solomon coding <ref type="bibr" target="#b2">[3]</ref>, for example, substitutes additional XOR operations for the multiplication and can improve performance significantly <ref type="bibr" target="#b18">[19]</ref>.</p><p>Additionally, let AONT(S) be the time that it takes to perform the AONT on S bytes of data. The choice of w A , encryption and hashing technique will all affect AONT(S). In general, though, it is O(S) and is also easy to parallelize <ref type="bibr" target="#b23">[24]</ref>.</p><p>Given the parameters k, n, b, Perf(R,C, S), and AONT(S) the performance of the three main dispersal algorithms and their storage requirements are given in <ref type="table" target="#tab_1">Table 1</ref>. Since SSMS doesn't specify a recommended dispersal or encryption algorithm, we omit it from the remaining analyses. Roughly, its performance will be close to AONT-RS.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="7">Microbenchmark Performance</head><p>To assess actual performance, we used open-source C libraries to perform the various functionalities. All tests were performed on a 4-core Intel Xeon W3530 at 2.80 GHz with 6 GB of memory at 1066 MHz running Linux kernel 2.6.32. Despite having multiple cores, all benchmarks were performed using a single thread. For ReedSolomon coding, we used Luigi Rizzo's open source library over GF(2 8 ) <ref type="bibr" target="#b24">[25]</ref>. We tested a variety of k-of-n configurations, ranging from 3-of-6 to 32-of-64, measuring c e , defined as the bandwidth of creating each coding slice, times k. For a given machine, c e should be relatively constant, since the time to create each coding slice should be linear in k. Despite the wide disparity in configurations, we observe that c e is fairly consistent, with a minimum of 921.60 MB/s in the 3-of-6 configuration, to a maximum of 994.00 MB/s in 27-of-54. The average performance for the 30 configurations tested is 965.61 MB/s with a standard deviation of 11.42 MB/s. Thus, we can use c e to approximate Perf as:</p><formula xml:id="formula_5">Perf(R,C, S) = RCS 965.61MB/s .</formula><p>The encoding time for AONT is dependent on the choice of cipher and hash function. To encode S bytes using AONT, both the cipher and hash function must process S bytes. Therefore the time equals the sum of the time to encrypt S bytes plus the time to hash S bytes. We tested the performance of two pairs of cipher/hash algorithms, one tailored for high security (AES-256 and SHA-256) and the other tailored for performance (RC4-128 and MD5). For this test, we used OpenSSL 0.9.8k with a block size of 8 KB. The results are in  Thus, we come up with two functions for AONT(S), one which we call secure <ref type="bibr">(AES-256 and SHA-256)</ref>, and one which we call fast (RC4-128 and MD5):</p><formula xml:id="formula_6">AONT secure (S) = S 75.60MB/s AONT fast (S) = S 237.99MB/s</formula><p>We now have the necessary information to use <ref type="table" target="#tab_1">Table 1</ref> to evaluate the performance of the three dispersal algorithms for any k-of-n configuration. We do so in <ref type="figure" target="#fig_8">Figure 8</ref>. Each graph affixes a k-of-n ratio called a rate and then plots the speed of encoding in MB of data per second. The rates increase by <ref type="bibr" target="#b0">1</ref> 6 for each successive graph, starting with a very low rate of 1 6 and proceeding to a very high rate of <ref type="bibr" target="#b4">5</ref> 6 . The trade-offs of the various formulas are apparent from the graph. There is a dispersal cost for all three algorithms and an AONT cost for the AONT-RS algorithms. The AONT cost is constant, since it depends solely on the size of the data. Thus, when dispersal is very fast, as in the 1-of-6 and 2-of-6 cases, Rabin outperforms AONT-RS fast and Shamir outperforms AONT-RS secure . As k and n grow, however, the dispersal costs increase. This increase is most pronounced with Shamir, then with Rabin and finally with AONT-RS. For each rate except the very low <ref type="bibr" target="#b0">1</ref> 6 , there is a point where the performance of AONT-RS fast becomes the best, and a point where AONT-RS secure 's performance surpasses both Shamir and Rabin. These points come at lower values of n for higher k-of-n rates.</p><p>A schematic of Cleversafe's storage architecture is depicted in <ref type="figure" target="#fig_9">Figure 9</ref>. Although not plotted above, of special interest is the 3-of-5 data point, since this is the kof-n configuration measured by POTSHARDS <ref type="bibr" target="#b29">[30]</ref>, an archival storage system that uses Shamir for both faulttolerance and security. For this configuration, the perfor- mance of AONT-RS secure (65.4 MB/s) is nearly identical to Shamir (64.4 MB/s), which means that a system like POTSHARDS can achieve computational security rather than information theoretic security for the same performance, but with a factor of three less storage.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="8">Commercial Dispersed Storage System</head><p>AONT-RS is a feature in the storage software and appliances sold by Cleversafe, which developed the technique to address the threat model of compromise, theft or loss of disks and devices. By appropriately tuning the dispersal configuration, all disks or devices at an entire site can be stolen and the data will remain confidential. Similarly, as long as a minimum threshold of servers are available, subsets of servers may be brought offline temporarily for maintenance, or permanently for replacement. Since the servers are protected by AONT-RS, storage owners may dispose of servers without having to "wipe" the drives clean, since the information on the servers is impossible to obtain without gaining access to some subset of the remaining servers.</p><p>Two paradigms are exposed to clients -a block paradigm that supports standard protocols like NFS, CIFS, FTP and iSCSI, and an object paradigm that supports larger storage units for better performance. An Accesser calculates mappings that associate blocks or objects to slices on dispersed storage servers (termed "Slicestores" in Cleversafe's product). A common configuration is to encode each block or object into 16 slices using a (10, 16)-threshold AONT-RS scheme.</p><p>Block reads and writes that use iSCSI go through the Accesser. The Accesser performs the block-to-slice encoding and decoding, and also manages the traffic to and from the servers. The other protocols require a Gateway, typically co-located with the Accesser, that translates between the various file protocols and iSCSI. Since this path has two hops and interacts with the servers with small messages, the performance of the block protocols is limited by the networking hardware and not the AONT-RS protocol. Storage servers do support multiple Accessers, which relieves one bottleneck of the blockbased system.</p><p>To achieve better performance, Cleversafe also exports a protocol for large objects. Objects are partitioned into Megabyte-sized chunks, which are then encoded into slices for dispersal. Clients may either read and write objects through the Accesser using HTTP, or they may use a SDK to perform their own AONT-RS encoding/decoding so that they may interact directly with the servers. In both cases, the client manages the context of the object name. A common software architecture is that clients use a database to maintain the the meaning and relationships of the content, and they store the object names in a column of the database.</p><p>Slice pointers are 48 bytes in length and are composed of three parts: routing information that enables slices to be routed to and from the correct servers, the source name which identifies the slice, and vault information which enables access control. The source name is opaque -its interpretation is dependent on the specific client and server. Vaults are logical containers of storage. Each vault has its own quotas, data coding parameters and access controls. Access controls are identitybased; each vault may have an arbitrary number of accounts granted read or write permissions to it.</p><p>Each slice is stored with metadata that identifies the slice's coding parameters and a version number. The version number is increased for each distinct write of the block or object, and concurrency control is maintained via the SDK with transactions and a three-phase commit. An additional parameter of each system is the write threshold, z, where k ≤ z ≤ n. This specifies how many slices must be written before a write can be committed. Setting z closer to k improves latency at the expense of reliability for a window of time. The remaining (n − z) writes are processed in the background, which reduces this window of exposure.  Authentication in the system is two-way: servers authenticate themselves to clients by means of a digital certificate, which identifies it within the dispersed storage system and allows TLS sessions to be created. The method of authentication of the client to the server is flexible -both password and certificate-based authentication are supported. Despite use of AONT-RS, secure network communication is still required for security since a threshold number of slices travel together over the 'last mile' of the client's connection.</p><p>All components are written in Java. Reed-Solomon erasure coding is performed using Java's FEC library <ref type="bibr" target="#b15">[16]</ref>, and encryption using SunJCE.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="9">Measured Performance</head><p>To measure performance, we use a commercial configuration with one or two clients and eight servers. The client and Accesser machines each have a 4-core Intel(R) Xeon(R) X3430 processor running at 2.40 GHz with 8 MB cache and 16 GB of ECC RAM. Four GB of memory is allocated to the JVM when executing the software. We use the Java HotSpot(TM) 64-Bit Server VM (build 17.0-b16, mixed mode) running Java 1.6.0 21. The storage servers each have a 4-core Intel(R) Xeon(R) X3460 processor at 2.80 GHz with 8 MB cache and 16 GB of ECC RAM. For storage, each server has twelve 2 TB Seagate SATA drives. The networking between components consists of a 10 Gb Ethernet switch. To handle simultaneous connections to multiple servers, the Accessers have 10 Gb network interface cards. The servers' cards are 1 Gb.</p><p>Our main test has the client spend 10 minutes reading and writing 10 MB objects, held in main memory, to the eight-server storage network, using the SDK and object interface. The coding parameters are k = 5 and n = 8, and five threads are employed by the client to leverage all of its cores. As in section 7, we recorded microbenchmarks of the various components of dispersal:</p><formula xml:id="formula_7">AONT secure (S) = S 104.77MB/s AONT fast (S) = S 249.03MB/s c e = 2628MB/s</formula><p>The performance of a control and the dispersal algorithms is shown in <ref type="figure" target="#fig_0">Figure 10(a)</ref>. The control has the client perform no encoding, but still sends 8 slices to the servers. While the Cleversafe implementation is flexible, allowing us to embed Rabin and both AONT-RS dispersal algorithms, we did not implement Shamir within the framework. This is because the blowup of storage requirements by a factor of five would be unreasonable.</p><p>We show the actual performance of writes and reads for the control, the two AONT-RS implementations and Rabin. We also include the projected write performance of the dispersal algorithms, including Shamir, using the performance equations from section 7, the microbenchmarks, plus the performance of the control as the actual dispersal bandwidth (214 MB/s).</p><p>For the three dispersal algorithms that we tested, the projected performance was within ten percent of the actual performance. We find this result compelling because the system on which the tests were performed was a production-level system, implementing the full functionality of Cleversafe's commercial storage system, including access control and metadata management.</p><p>In the tests with coding, the CPU utilization of the client is measured to be 90%. Since the closest I/O bottlenecks are the eight 1-Gbps links to the storage servers, it is clear that the limiting factor in these tests is the ability of the client computer to process data. To further affirm the client as bottleneck, we ran two clients simultaneously and present their performance in <ref type="figure" target="#fig_0">Fig- ure 10(b)</ref>. The clients' performance is nearly identical to <ref type="figure" target="#fig_0">Figure 10(a)</ref>.</p><p>It is worth noting that AONT-RS secure exhibits worse performance when reading than when writing; we expected that during reads, less CPU resources would be required, since some slices do not need to be processed by the IDA. The worse performance is due to the SunJCE implementation of AES, which is significantly slower when decrypting than when encrypting. In a stand-alone benchmark we observed 31.51 MB/s vs. 44.77 MB/s when encrypting.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="10">Tales of Deployment</head><p>Today, there are over 20 Cleversafe dispersed storage installations in pilot and production around the world, with customers drawing from a diverse set of industries including financial, health care, entertainment, and defense. Several customers (who have asked to remain anonymous) have cited one important factor in their purchasing decision: that the contents of small sets of servers are meaningless in isolation. Thus, one can decommission disk drives or potentially even server sites without having to "wipe" them, which can be expensive <ref type="bibr" target="#b3">4</ref> . Since nearly all U.S. states have "data breach laws," that require companies to proactively disclose the loss of storage that is not encrypted <ref type="bibr" target="#b32">[33]</ref>, using AONT-RS can save companies time, attorney fees and bad publicity that results from having to alert consumers to a data breach.</p><p>One of Cleversafe's deployments is for The Museum of Broadcast Communications that serves its video collections on the Internet. In particular, over 8,500 hours of historical audio and video content have been digitized and stored on tens of terabytes in one of Cleversafe's dispersed storage systems. Roughly 200,000 monthly visitors access the archives over the web.</p><p>The Museum deployment is composed of 16 storage servers, each having 4 TB of raw capacity and spread across 8 sites: Chicago, Dallas (two locations) Denver, New Jersey, San Francisco, Seattle and Tampa. The sites are situated across three power grids in the continental United States, and the data is dispersed in a 10-of-16 configuration. In this way, even if one entire power grid shuts down, enough servers will remain accessible to retrieve all the data. The Museum uses the object store interface inside its internal database, so that users employ the database to search a rich set of metadata about the movies, which can then be retrieved using the object handle.</p><p>Internally, Cleversafe maintains dispersed storage systems having over 1 PB of capacity. These are used internally for development, testing and storing production data. Employees have their own personal vaults with access to a 30 TB pool of dispersed storage, which is implemented over 8 geographically separated storage servers across the United States.</p><p>In one case, Cleversafe initially deployed a system across four sites, but at a later time decided that it should be migrated to 8 sites to provide better tolerance to site and power grid outages. To accomplish this without bringing the system down, machines were incrementally boxed up and shipped across the country, such that at all times a threshold number remained online. Therefore the system remained accessible for reads and writes throughout the process. The same essential technique is now used to apply software updates. Nodes are upgraded individually allowing the system to maintain availability throughout the upgrade process.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="11">Conclusion</head><p>Dispersed storage systems enable availability, scalability, and performance based on physical proximity. They also enable security via (k, n) threshold schemes that require attackers to authenticate themselves to k of n storage nodes in order to read data. The threshold schemes provide this security without relying on the secure storage of encryption keys, which is a notoriously difficult problem.</p><p>We have described a new dispersal algorithm called AONT-RS, which combines the All-Or-Nothing Transform with systematic Reed-Solomon codes to achieve computational security. Compared to traditional approaches to dispersal, AONT-RS has a very attractive blend of properties. Its storage and computational footprint is much less than Shamir secret sharing. While Shamir achieves information theoretic security AONT-RS's security can be tuned so that compromise is computationally infeasible. Compared to Rabin's classic dispersal algorithm, AONT-RS achieves a far greater degree of security, and also better performance for larger installations. This is because AONT-RS is based on a systematic Reed-Solomon erasure code rather than the nonsystematic code employed by Rabin. We have detailed the theoretical and applied performance of the dispersal algorithms, and described a commercial dispersed storage product that is based upon the dispersal algorithm.</p><p>AONT-RS is not specific to our dispersal solution. For example, the POTSHARDS archival storage system <ref type="bibr" target="#b29">[30]</ref> could use AONT-RS to implement computational rather than information theoretic security and reduce their storage requirements by a factor of three. Other solutions such as Gridsharing <ref type="bibr" target="#b30">[31]</ref> can improve their security by employing AONT-RS rather than a standard systematic Reed-Solomon code.</p><p>In future work, we would like to collect data from our private and commercial deployments concerning failures, node availability, compromise and attack. Such data will enable us to make better policy decisions concerning configurations of dispersed storage. These decisions will allow us to tune the AONT and erasure code configuration used, and will also allow us to make the most efficient use of our storage.</p></div><figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_0"><head>Figure 1 :</head><label>1</label><figDesc>Figure 1: The central matrix-vector product for all dispersal algorithms.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_1"><head>Figure 2 :</head><label>2</label><figDesc>Figure 2: A systematic erasure code.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_2"><head>Figure 3 :</head><label>3</label><figDesc>Figure 3: Encoding operation of AONT.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_3"><head>Figure 4 :</head><label>4</label><figDesc>Figure 4: Dispersal of AONT package using a systematic IDA such as Reed-Solomon coding.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_4"><head>Figure 5 :</head><label>5</label><figDesc>Figure 5: Recovering the AONT package from a threshold number of slices.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_5"><head>Figure 6 :</head><label>6</label><figDesc>Figure 6: Restoring data from an AONT package.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_6"><head>Figure 7 :</head><label>7</label><figDesc>Figure 7: Dispersal matrix for the systematic (10, 16) Reed-Solomon code over GF(2 8 ).</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_7"><head></head><label></label><figDesc>If an attacker owns a coding slice, then the attacker must again enumerate potential values of K, calculate poten- tial values of the slice and verify them. Owning k − 1 Algorithm Running Time Storage Shamir Perf(n, k, kb) nb Rabin Perf(n, k, b) nb k AONT-RS AONT(b) + Perf(n − k, k, b) n(b+w A ) k</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_8"><head>Figure 8 :</head><label>8</label><figDesc>Figure 8: Performance comparison of the dispersal algorithms. Each graph affixes the k-to-n rate and plots speed of encoding with each dispersal algorithm.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_9"><head>Figure 9 :</head><label>9</label><figDesc>Figure 9: A high-level picture of Cleversafe's storage architecture.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_10"><head>Figure 10 :</head><label>10</label><figDesc>Figure 10: Actual and projected performance of dispersed storage of 10 MB objects on a (5, 8) test configuration.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_1" validated="false"><head>Table 1 :</head><label>1</label><figDesc></figDesc><table>Running time and storage requirements of the three dispersal algorithms. 

</table></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_2" validated="true"><head>Table 2 .</head><label>2</label><figDesc></figDesc><table>Encoding Rate (MB/s) 
AES-256 
143.30 
RC4-128 
414.17 
SHA-256 
160.03 
MD5 
559.47 

</table></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_3" validated="false"><head>Table 2 :</head><label>2</label><figDesc></figDesc><table>Performance of two encryption algorithms 
(AES-256 and RC4-128) and two hash algorithms (SHA-
256 and MD5). 

</table></figure>

			<note place="foot" n="2"> While Rabin does not use a Vandermonde matrix in [21], the matrix he employs has the same properties.</note>

			<note place="foot" n="4"> For example, see http://www.east-tec.com/enterprise/ disposesecureent/.</note>
		</body>
		<back>

			<div type="acknowledgement">
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="12">Acknowledgements</head><p>This material is based upon work supported by the National Science Foundation under grants CNS-0615221 and CSR-1016636. The authors gratefully acknowledge Ilya Volvovski's contribution to the work, plus Steve Hand for shepherding the paper through the final reviewing process.</p></div>
			</div>

			<div type="references">

				<listBibl>

<biblStruct xml:id="b0">
	<analytic>
		<title level="a" type="main">Review of particle physics</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Amsler</forename></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Physics Letters B</title>
		<imprint>
			<biblScope unit="volume">667</biblScope>
			<biblScope unit="page">1</biblScope>
			<date type="published" when="2008" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b1">
	<monogr>
		<title level="m" type="main">Computer Viruses and Malware (Advances in Information Security)</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Aycock</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename></persName>
		</author>
		<imprint>
			<date type="published" when="2006" />
			<publisher>Springer-Verlag</publisher>
			<pubPlace>New York</pubPlace>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b2">
	<monogr>
		<title level="m" type="main">An XOR-based erasure-resilient coding scheme</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Blomer</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Kalfane</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Karpinski</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Karp</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Luby</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>And</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Zuckerman</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename></persName>
		</author>
		<idno>TR-95-048</idno>
		<imprint>
			<date type="published" when="1995-08" />
		</imprint>
		<respStmt>
			<orgName>International Computer Science Institute</orgName>
		</respStmt>
	</monogr>
<note type="report_type">Tech. Rep.</note>
</biblStruct>

<biblStruct xml:id="b3">
	<monogr>
		<title level="m" type="main">Cleversafe dispersed storage. Community portal:www.cleversafe.org</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Cleversafe</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Inc</forename></persName>
		</author>
		<imprint>
			<date type="published" when="2010" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b4">
	<analytic>
		<title level="a" type="main">Incentives build robustness in BitTorrent</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Cohen</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">B</forename></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Workshop on Economics of Peer-to-Peer Systems</title>
		<meeting><address><addrLine>Berkely, CA</addrLine></address></meeting>
		<imprint>
			<date type="published" when="2003-06" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b5">
	<monogr>
		<title level="m" type="main">The Design of Rijndael, AES -The Advanced Encryption Standard</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Daemen</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>And</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Rijmen</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">V</forename></persName>
		</author>
		<imprint>
			<date type="published" when="2002" />
			<publisher>Springer-Verlag</publisher>
			<pubPlace>New York</pubPlace>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b6">
	<monogr>
		<title/>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Ferguson</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">N</forename><surname>Schneier</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">B</forename><surname>And</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Kohno</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><forename type="middle">Cryptography</forename><surname>Engineering</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2010" />
			<publisher>John Wiley &amp; Sons Ltd</publisher>
			<pubPlace>Chichester</pubPlace>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b7">
	<analytic>
		<title level="a" type="main">The Google file system</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Ghemawat</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Gobioff</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">H</forename><surname>And</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Leung</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><forename type="middle">T</forename></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">19th ACM Symposium on Operating Systems Principles (SOSP &apos;03</title>
		<imprint>
			<date type="published" when="2003" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b8">
	<analytic>
		<title level="a" type="main">Efficient byzantine-tolerant erasure-coded storage</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Goodson</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">G</forename><forename type="middle">R</forename><surname>Wylie</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><forename type="middle">J</forename><surname>Ganger</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">G</forename><forename type="middle">R</forename><surname>And Reiter</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><forename type="middle">K</forename></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">DSN-04: International Conference on Dependable Systems and Networks</title>
		<meeting><address><addrLine>Florence, Italy</addrLine></address></meeting>
		<imprint>
			<publisher>IEEE</publisher>
			<date type="published" when="2004" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b9">
	<analytic>
		<title level="a" type="main">Optimizing Galois Field arithmetic for diverse processor architectures and applications</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Greenan</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">K</forename><surname>Miller</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">E</forename><surname>And</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><forename type="middle">J</forename><surname>Schwartz</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">MAS-COTS 2008: 16th IEEE Symposium on Modeling, Analysis and Simulation of Computer and Telecommunication Systems</title>
		<meeting><address><addrLine>Baltimore, MD</addrLine></address></meeting>
		<imprint>
			<date type="published" when="2008-09" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b10">
	<analytic>
		<title level="a" type="main">Glacier: Highly durable decentralized storage despite massive corrolated failures</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Haeberlen</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Mislove</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>And</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Dr-Uschel</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">2nd Symposium on Networked Systems Design and Implementation (NSDI)</title>
		<imprint>
			<date type="published" when="2005" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b11">
	<analytic>
		<title level="a" type="main">Secret sharing made short</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Krawczyk</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">H</forename></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">13th Annual International Conference on Advances in Cryptology</title>
		<imprint>
			<date type="published" when="1993" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b12">
	<monogr>
		<title level="m" type="main">The Theory of Error-Correcting Codes, Part I</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Macwilliams</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">F</forename><forename type="middle">J</forename><surname>And</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Sloane</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">N</forename><forename type="middle">J</forename></persName>
		</author>
		<imprint>
			<date type="published" when="1977" />
			<publisher>North-Holland Publishing Company</publisher>
			<pubPlace>Amsterdam, New York, Oxford</pubPlace>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b13">
	<analytic>
		<title level="a" type="main">LOCKSS: A peer-to-peer digital preservation system</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Maniatis</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><surname>Rosenthal</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><forename type="middle">S H</forename><surname>Rous-Sopoulos</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>And Baker</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">ACM Transactions on Computer Systems</title>
		<imprint>
			<biblScope unit="volume">23</biblScope>
			<date type="published" when="2003" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b14">
	<monogr>
				<ptr target="http://csrc.nist.gov/publications/fips/fips180-3/fips180-3final.pdf" />
		<title level="m">FIPS PUB 180-3</title>
		<imprint>
			<date type="published" when="2008-10" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b15">
	<monogr>
		<title level="m" type="main">Java FEC Library v1.0.3. Open source code distribution</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Onion</forename><surname>Networks</surname></persName>
		</author>
		<ptr target="http://onionnetworks.com/fec/javadoc/" />
		<imprint>
			<date type="published" when="2001" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b16">
	<analytic>
		<title level="a" type="main">A tutorial on Reed-Solomon coding for fault-tolerance in RAID-like systems</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Plank</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><forename type="middle">S</forename></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Software -Practice &amp; Experience</title>
		<imprint>
			<biblScope unit="volume">27</biblScope>
			<biblScope unit="issue">9</biblScope>
			<biblScope unit="page" from="995" to="1012" />
			<date type="published" when="1997-09" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b17">
	<analytic>
		<title level="a" type="main">Note: Correction to the 1997 tutorial on Reed-Solomon coding</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Plank</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><forename type="middle">S</forename><surname>And</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Ding</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Y</forename></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Software -Practice &amp; Experience</title>
		<imprint>
			<biblScope unit="volume">35</biblScope>
			<biblScope unit="issue">2</biblScope>
			<biblScope unit="page" from="189" to="194" />
			<date type="published" when="2005-02" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b18">
	<analytic>
		<title level="a" type="main">A performance evaluation and examination of open-source erasure coding libraries for storage</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Plank</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><forename type="middle">S</forename><surname>Luo</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Schuman</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><forename type="middle">D</forename><surname>Xu</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">L</forename><surname>And</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Wilcox-O&amp;apos;</forename><surname>Hearn</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Z</forename></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">FAST-2009: 7th Usenix Conference on File and Storage Technologies</title>
		<imprint>
			<date type="published" when="2009-02" />
			<biblScope unit="page" from="253" to="265" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b19">
	<monogr>
		<title level="m" type="main">Jerasure: A library in C/C++ facilitating erasure coding for storage applications -Version 1.2</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Plank</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><forename type="middle">S</forename><surname>Simmerman</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>And</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Schuman</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><forename type="middle">D</forename></persName>
		</author>
		<imprint>
			<date type="published" when="2008-08" />
		</imprint>
		<respStmt>
			<orgName>University of Tennessee</orgName>
		</respStmt>
	</monogr>
<note type="report_type">Tech. Rep. CS-08-627</note>
</biblStruct>

<biblStruct xml:id="b20">
	<analytic>
		<title level="a" type="main">Efficient dispersal of information for security, load balancing, and fault tolerance</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Rabin</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><forename type="middle">O</forename></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Journal of the Association for Computing Machinery</title>
		<imprint>
			<biblScope unit="volume">36</biblScope>
			<biblScope unit="issue">2</biblScope>
			<biblScope unit="page" from="335" to="348" />
			<date type="published" when="1989-04" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b21">
	<analytic>
		<title level="a" type="main">Polynomial codes over certain finite fields</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Reed</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">I</forename><forename type="middle">S</forename><surname>And</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Solomon</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">G</forename></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Journal of the Society for Industrial and Applied Mathematics</title>
		<imprint>
			<biblScope unit="volume">8</biblScope>
			<biblScope unit="page" from="300" to="304" />
			<date type="published" when="1960" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b22">
	<analytic>
		<title level="a" type="main">Maintenance-free global data storage</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Rhea</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Wells</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><surname>Eaton</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><surname>Geels</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Zhao</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">B</forename><surname>Weatherspoon</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">H</forename><surname>And</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Kubia-Towicz</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE Internet Computing</title>
		<imprint>
			<biblScope unit="volume">5</biblScope>
			<biblScope unit="page" from="40" to="49" />
			<date type="published" when="2001" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b23">
	<analytic>
		<title level="a" type="main">All-or-nothing encryption and the package transform</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Rivest</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">4th International Workshop on Fast Software Encryption</title>
		<imprint>
			<date type="published" when="1997" />
			<biblScope unit="page" from="210" to="218" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b24">
	<monogr>
		<title level="m" type="main">Erasure codes based on Vandermonde matrices</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Rizzo</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">L</forename></persName>
		</author>
		<ptr target="http://planete-bcast.inrialpes.fr/rubrique.php3?idrubrique=10" />
		<imprint>
			<date type="published" when="1998" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b25">
	<analytic>
		<title level="a" type="main">Storage management and caching in PAST, a largescale, persistent peer-to-peer storage utility</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Rowstron</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>And</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Druschel</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">ACM SIGOPS Operating Systems Review</title>
		<imprint>
			<biblScope unit="volume">35</biblScope>
			<biblScope unit="page" from="188" to="201" />
			<date type="published" when="2001" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b26">
	<analytic>
		<title level="a" type="main">The Google file system</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Santry</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><forename type="middle">S</forename><surname>Feeley</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><forename type="middle">J</forename><surname>Hutchinson</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">N</forename><forename type="middle">C</forename><surname>Veitch</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><forename type="middle">C</forename><surname>Carton</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">W</forename><surname>And</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Ofir</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">17th ACM Symposium on Operating Systems Principles (SOSP &apos;99</title>
		<imprint>
			<date type="published" when="1999" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b27">
	<analytic>
		<title level="a" type="main">How to share a secret</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Shamir</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Communications of the ACM</title>
		<imprint>
			<biblScope unit="volume">22</biblScope>
			<biblScope unit="page" from="612" to="613" />
			<date type="published" when="1979-11" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b28">
	<analytic>
		<title level="a" type="main">Replacing tape with energy efficient, reliable, disk-based archival storage</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Storer</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><forename type="middle">W</forename><surname>Greenan</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">K</forename><forename type="middle">M</forename><surname>Miller</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">E</forename><forename type="middle">L</forename><surname>And</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Voruganti</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">K</forename><surname>Pergamum</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">FAST-2008: 6th Usenix Conference on File and Storage Technologies</title>
		<meeting><address><addrLine>San Jose</addrLine></address></meeting>
		<imprint>
			<date type="published" when="2008-02" />
			<biblScope unit="page" from="1" to="16" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b29">
	<analytic>
		<title level="a" type="main">POTSHARDS -a secure, long-term storage system</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Storer</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><forename type="middle">W</forename><surname>Greenan</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">K</forename><forename type="middle">M</forename><surname>Miller</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">E</forename><forename type="middle">L</forename><surname>And</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Voruganti</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">K</forename></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">ACM Transactions on Storage</title>
		<imprint>
			<biblScope unit="volume">5</biblScope>
			<biblScope unit="issue">2</biblScope>
			<date type="published" when="2009-06" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b30">
	<analytic>
		<title level="a" type="main">An approach for fault tolerant and secure data storage in collaborative work environments</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Subbiah</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>And</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Blough</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><forename type="middle">M</forename></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">In ACM Workshop on Storage Security and Survivability</title>
		<imprint>
			<date type="published" when="2005" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b31">
	<monogr>
		<title level="m" type="main">Tahoe least authority file system</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Taho-Lafs</forename></persName>
		</author>
		<ptr target="http://tahoe-lafs.org/trac/tahoe-lafs" />
		<imprint>
			<date type="published" when="2010" />
		</imprint>
	</monogr>
	<note>Open source code distribution</note>
</biblStruct>

<biblStruct xml:id="b32">
	<monogr>
		<title level="m" type="main">Keeping pace with data encryption laws</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Vance</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">K</forename></persName>
		</author>
		<ptr target="www.esecurityplanet.com/trends/article.php/3887111" />
		<imprint>
			<date type="published" when="2010-06" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b33">
	<analytic>
		<title level="a" type="main">Cipher printing telegraph systems for secret wire and radio telegraphic communications</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Vernam</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">G</forename><forename type="middle">S</forename></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Journal of the IEEE</title>
		<imprint>
			<biblScope unit="volume">55</biblScope>
			<biblScope unit="page" from="109" to="115" />
			<date type="published" when="1926" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b34">
	<analytic>
		<title level="a" type="main">On the design of S-boxes</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Webster</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><forename type="middle">F</forename><surname>And</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Tavares</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><forename type="middle">E</forename></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Advances in CryptologyCrypto &apos;85</title>
		<imprint>
			<publisher>Springer-Verlag</publisher>
			<date type="published" when="1985" />
			<biblScope unit="page" from="523" to="534" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b35">
	<monogr>
		<title/>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Wilcox-O&amp;apos;</forename><surname>Hearn</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Z</forename></persName>
		</author>
		<ptr target="http://pypi.python.org/pypi/zfec" />
		<imprint>
			<date type="published" when="2008" />
		</imprint>
	</monogr>
	<note>Zfec 1.4.0. Open source code distribution</note>
</biblStruct>

				</listBibl>
			</div>
		</back>
	</text>
</TEI>
