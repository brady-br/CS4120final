<?xml version="1.0" encoding="UTF-8"?>
<TEI xmlns="http://www.tei-c.org/ns/1.0" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
xsi:schemaLocation="http://www.tei-c.org/ns/1.0 /Users/atharsefid/Desktop/grobid-0.5.3/grobid-home/schemas/xsd/Grobid.xsd"
 xmlns:xlink="http://www.w3.org/1999/xlink">
	<teiHeader xml:lang="en">
		<encodingDesc>
			<appInfo>
				<application version="0.5.3" ident="GROBID" when="2020-09-29T02:33+0000">
					<ref target="https://github.com/kermitt2/grobid">GROBID - A machine learning software for extracting information from scholarly documents</ref>
				</application>
			</appInfo>
		</encodingDesc>
		<fileDesc>
			<titleStmt>
				<title level="a" type="main">UBCIS: Ultimate Benchmark for Container Image Scanning</title>
			</titleStmt>
			<publicationStmt>
				<publisher/>
				<availability status="unknown"><licence/></availability>
			</publicationStmt>
			<sourceDesc>
				<biblStruct>
					<analytic>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Shay</forename><surname>Berkovich</surname></persName>
							<affiliation key="aff0">
								<orgName type="department" key="dep1">BlackBerry Limited</orgName>
								<orgName type="department" key="dep2">BlackBerry Limited</orgName>
								<orgName type="institution">University of Waterloo</orgName>
							</affiliation>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Jeffrey</forename><surname>Kam</surname></persName>
							<affiliation key="aff0">
								<orgName type="department" key="dep1">BlackBerry Limited</orgName>
								<orgName type="department" key="dep2">BlackBerry Limited</orgName>
								<orgName type="institution">University of Waterloo</orgName>
							</affiliation>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Glenn</forename><surname>Wurster</surname></persName>
							<affiliation key="aff0">
								<orgName type="department" key="dep1">BlackBerry Limited</orgName>
								<orgName type="department" key="dep2">BlackBerry Limited</orgName>
								<orgName type="institution">University of Waterloo</orgName>
							</affiliation>
						</author>
						<title level="a" type="main">UBCIS: Ultimate Benchmark for Container Image Scanning</title>
					</analytic>
					<monogr>
						<imprint>
							<date/>
						</imprint>
					</monogr>
				</biblStruct>
			</sourceDesc>
		</fileDesc>
		<profileDesc>
			<abstract>
				<p>Containers are regularly used in modern cloud-native deployment practices. They support agile and continuous integra-tion/continuous deployment (CI/CD) paradigms, isolating services. As containers become more ubiquitous, container security becomes crucial as well. Scanning container images for known vulnerabilities caused by vulnerable software is a critical security activity of the CI/CD process. Both commercial and open-source tools exist for container image scanning. Results from these scanners, however, are inconsistent. Inconsistent results make it hard for developers to choose the best solution for their environment. In this paper, we present the Ultimate Benchmark for Container Image Scanning (UB-CIS), a benchmark for evaluating image scanners. UBCIS contains a classification of known vulnerabilities in common base container images, as well as a framework for running container vulnerability scanning tools. UBCIS makes it possible to evaluate scanners. We discuss intricacies of classifying vulnerabilities, presenting a process that can be used when determining the relevance of vulnerability. Finally, we provide recommendations for choosing the best scanner for a specific environment.</p>
			</abstract>
		</profileDesc>
	</teiHeader>
	<text xml:lang="en">
		<body>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="1">Introduction</head><p>Many container image vulnerability scanning tools are being introduced by commercial and open-source groups. Container image vulnerability scanning is focused on finding instances of already-known vulnerabilities in binaries on the system. This is in contrast to many vulnerability scanning tools (e.g., static analysis), which are focused on finding new or undiscovered vulnerabilities. This is also in contrast to detecting malicious container interactions <ref type="bibr" target="#b20">[23]</ref>.</p><p>Docker encourages container image reuse by making it easy to obtain base images and extend them. There are multiple registries hosting public images, including Docker Hub <ref type="bibr">[8]</ref>, GCR <ref type="bibr" target="#b8">[11]</ref>, and Quay <ref type="bibr" target="#b18">[21]</ref>. However, the same reasons that facilitate rapid container adoption also increase the risk of using vulnerable software. Zerouali et. al. <ref type="bibr" target="#b24">[29]</ref> suggest over half of the images hosted on Docker Hub have not been updated in four months or more, and that one out of every five installed packages in a container is outdated. Shu et. al. <ref type="bibr" target="#b19">[22]</ref> document no significant difference between community and official images. The same study shows that using latest images <ref type="bibr" target="#b15">[18]</ref> does not eliminate the need for scanning. Using a tool to scan for known vulnerabilities in your image is therefore critical to the security of the system.</p><p>The Ultimate Benchmark for Container Image Scanning (UBCIS) is designed to evaluate the precision, recall, and F-measure of container image vulnerability scanning tools. We address two main problems with this work. The first is the classification of vulnerabilities detected by scanning tools. Our work subdivides container image vulnerabilities based on their applicability to the container image. The second problem addressed is providing a framework that can be used to assess new scanning tools. We measure the ability of a scanner to detect vulnerabilities caused by out-of-date applications.</p><p>Our contributions are 1) a benchmark tool for container scanner evaluation; 2) an evaluation of three popular scanners on common container images; 3) a vulnerability judging process for classifying vulnerabilities; 4) a set of vulnerabilities which have been judged and can be used with the benchmark tool to evaluate scanners; 5) recommendations for choosing a scanner; and 6) an in-depth analysis of how scanners interpret different vulnerability classes and how that interpretation affects the precision, recall, and F-measure of the scanner. This benchmark has solved the problem of choosing the best scanner for our production container deployments.</p><p>In addition to being used within corporate environments to choose the right container scanning tool, UBCIS can also be used in studies that require container image scanning. Current studies use specific open-source scanners as a single source of truth on the number and type of vulnerabilities in the container image <ref type="bibr" target="#b11">[14,</ref><ref type="bibr" target="#b12">15,</ref><ref type="bibr" target="#b19">22,</ref><ref type="bibr" target="#b21">24]</ref>. As we show, results vary between scanners, potentially affecting studies suppositions. UBCIS will empower scholars to choose the appropriate image vulnerability scanner when engaging in related research.</p><p>In Section 2, we discuss applicability classes for vulnerabilities a scanner detects. We create a benchmark and evaluate three scanners in Section 3. Section 4 documents our observations and recommendations. Section 5 contains related work. We conclude in Section 6.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2">Classification of Vulnerabilities</head><p>Scanning for known vulnerabilities in a container image involves three steps: (1) identifying all components (e.g., executables, libraries, scripts) of the image, along with their version; (2) given the list of components, querying security feeds for applicable vulnerabilities; and (3) reporting each vulnerability affecting a component in the container image. The following list highlights why different scanners may give different results:</p><p>• Most scanners query the package manager, while few perform binary analysis. The two approaches might cause different versions to be detected.</p><p>• While common vulnerabilities can be found in a single vulnerability feed such as National Vulnerability Database (NVD) <ref type="bibr" target="#b17">[20]</ref>, most scanners employ a set of vulnerability feeds (including some commercial) to use as many sources of potential vulnerabilities as possible. The list of feeds, along with the feed prioritization, differs greatly from scanner to scanner.</p><p>• Some scanners authors curate vulnerability feeds, leading to a lag in time between the vulnerability being known and being reported by a specific scanner.</p><p>• Ambiguity -It is sometimes unclear whether a vulnerability exists in an open source component, or if it is present in the component as deployed in the container. Scanners authors can weight vulnerability feed information differently when deciding whether to report a vulnerability in a container.</p><p>Consider debian:10.2, a popular and widely-adopted base image. Running four different scanners on this image results in four different sets of vulnerabilities. No set is a superset or a subset of another, no set encompasses all image vulnerabilities, and every set contains at least one false positive. Customers looking to procure an image scanner may not choose the best tool for their environment if they merely look at the number of detected vulnerabilities without considering other factors.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.1">Applicability Classes</head><p>To quantify the impact of scanner design choices, we ran four different scanners on three different container images, manually examining each detected vulnerability. Based on this analysis, we have identified several applicability classes for vulnerabilities detected by a scanning tool, expanding on GitHub <ref type="bibr" target="#b9">[12]</ref>. We call classes (I, MM, and D) ambiguous classes.  <ref type="bibr" target="#b4">[6]</ref>). FP / False Positive -Vulnerability is not applicable to the container image. This can be due to differences in packaging for the distribution, or back-ported fixes.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3">Scanner Evaluation</head><p>The most obvious scanner evaluation metric is how many vulnerabilities are reported. This metric in isolation is error prone. A better metric of the scanner success is the Relevant vulnerabilities detected by the scanner under evaluation as true positives (TP), with not-relevant vulnerabilities being false positives (FP). Relevant vulnerabilities not detected by the scanner are false negatives (FN). Precision is defined as the fraction of retrieved vulnerabilities that are in fact relevant, or Precision = T P/(T P + FP). Recall is the fraction of relevant vulnerabilities detected by the scanner, or Recall = T P/(T P + FN). The F-measure characterizes the combined performance of recall and precision, or</p><formula xml:id="formula_0">F-measure = (2 * Recall * Precision)/(Recall + Precision).</formula><p>We use these three metrics to assess scanner quality.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.1">Docker Image Choice</head><p>Debian, Alpine and Ubuntu make up over 87% of docker base images on Docker Hub <ref type="bibr" target="#b21">[24]</ref>. CentOS, Buildroot and Fedora lag significantly. Image pull numbers confirm the popularity of Debian, Alpine, and Ubuntu <ref type="bibr" target="#b12">[15,</ref><ref type="bibr" target="#b21">24]</ref>. We use these three distributions in our evaluation, supporting them in UBCIS.</p><p>To choose a specific image, we need to choose a tag. Within the registry, every container image can be uniquely described by the tuple repo-name:tag, where repo-name is the name of the image and tag is the version. For OS-level base images, repo-name is always the distribution and tag is usually the distribution version (e.g., debian:buster, ubuntu:18.04, or alpine:3.10). The latest tag denotes the most recent rolling image version. We choose images in <ref type="table">Table 1</ref> that are stable (not latest), but also popular, being used in current deployments so that the scanner evaluation is relevant.</p><p>Another good reason to choose popular images is to prevent scanners from gaming the system. Any scanner that scores well in the benchmark tests will, by definition, score well on the majority of real-world images. By benchmarking scanners, we encourage continual improvement on real-world data sets.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Image</head><p>Repo </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.2">Process</head><p>To build the benchmark, we merged the findings of multiple scanners; Anchore <ref type="bibr" target="#b1">[2]</ref>, Trivy <ref type="bibr">[26]</ref>, Clair <ref type="bibr" target="#b3">[4]</ref>, and a binary scanner. Anchore, Trivy, and Clair all use the container package manager to obtain a list of installed software. The binary scanner attempts to detect binaries and their version numbers without using the package manager. Different component retrieval techniques ensure better coverage of detected packages and thus better coverage of discovered vulnerabilities.</p><p>We ran the scanners in their default configuration, ensuring feeds are available. For each vulnerability reported by each scanner in each image, we manually judge the vulnerability to determine its applicability class (see Section 2.1), generating a list of all vulnerabilities found by any scanner. Overall, we judged 146 vulnerabilities for Debian, Alpine, and Ubuntu images.</p><p>We call the process of classifying the reason for the detected vulnerability the vulnerability judging process. This process is manual and non-trivial. We perform the following sequence of steps, in order, until we have a result: Step D3 is interesting as some scanners flag a meta-package (i.e., a package without content) as containing a vulnerability. This vulnerability is a False Positive as there is no code that can be vulnerable (e.g., libc-utils in Alpine flagged by some scanners is an empty/meta package <ref type="bibr" target="#b14">[17]</ref>). Step D4 is a common source of variance between scanners. Reasons range from wrong operating system (e.g., a Windows vulnerability in Linux-based distros), to specific distro-level package usage that changes the applicability of the vulnerability. The relevant information in a vulnerability feed does not follow a standard format. It can appear in multiple places, causing discrepancies. D5 is another source of variance between scanners because they fail to recognize backports and ad-hoc fixes, leading to false positives. If questions raised in D4 and D5 cannot be answered, the vulnerability will fall into an ambiguous class (Section 2.1).</p><p>We choose to put more weight in distribution-specific security feeds (i.e., Debian Security Tracker <ref type="bibr" target="#b5">[7]</ref>, Alpine-secdb <ref type="bibr" target="#b0">[1]</ref>, or Ubuntu CVE Tracker <ref type="bibr" target="#b23">[27]</ref>) than in general security feeds like NVD <ref type="bibr" target="#b17">[20]</ref>. Distribution-specific feed maintainers have more information and expertise to determine what is applicable in their case.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.3">Benchmark Modes</head><p>To generate precision, recall, and F-measure metrics, all ambiguous classes must be mapped to either false positives or false negatives. We define two modes of benchmark evaluation: paranoid and relaxed. Paranoid mode maps ambiguous classes to true positives. Relaxed mode maps ambiguous classes to false positives. Choosing paranoid or relaxed mode when evaluating scanner results will depend on the risk tolerance of the company using the scanner, impacting the benchmark evaluation and result.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Trivy</head><p>Anchore Clair     <ref type="table" target="#tab_3">Table 2</ref> highlights the significance of relaxed and paranoid mode in <ref type="table" target="#tab_5">Table 3</ref> . With only two options available (report or ignore), scanners address inconclusive results by expanding vulnerability severity scale to include values such as Unknown, Negligible or Unimportant. By including inconclusive results, the scanner defers analysis to the customer. <ref type="table" target="#tab_5">Table 3</ref> shows that the best scanner for Debian would be Trivy in both relaxed and paranoid mode. For Alpine, Anchore and Trivy are equally good. For Ubuntu, Anchore and Clair show similar results.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4">Observations</head><p>No scanner is best for all combinations of images and benchmark modes. Companies exploring the purchase of an image scanner should follow these recommendations:</p><p>1. Assess risk tolerance. Can we afford to miss vulnerabilities (relaxed mode), or must we treat all vulnerabilities as potentially critical (paranoid mode)? Scanners with a better paranoid mode score will generally raise more alerts, requiring more resources. 2. Look at the deployment environment. What base image are we using? Is the image supported by the scanner? 3. Based on risk (#1) and base image (#2), use the benchmark results <ref type="table" target="#tab_5">(Table 3)</ref> to select the appropriate scanner. 4. From our experience, no image had zero vulnerabilities.</p><p>A lack of vulnerabilities points to configuration problems or an unsupported image. 5. Combining multiple scanners in a CI/CD pipeline is a good idea. In paranoid mode, we suggest using the union of all scan results. In relaxed mode, use the intersection.</p><p>If the evaluated scanner is not in the benchmark, it can be added. Section 6 has links to the open-sourced benchmark.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5">Related Work</head><p>Research on benchmarking security tools is limited. El et. al.</p><p>[9] discuss benchmarks for web vulnerability scanners, a difficult task due to vast landscape of web applications as well as multitude of potential web vulnerabilities and vulnerability classes. Nevertheless, Chen <ref type="bibr" target="#b2">[3]</ref> attempts to benchmark web vulnerability scanners. UBCIS appears to be the first work that benchmarks container image scanners, although the CIS benchmark does exist to address run-time container security configuration best practices <ref type="bibr" target="#b10">[13]</ref>. Studies of vulnerability classification are common, especially ones examining vulnerability type <ref type="bibr" target="#b7">[10,</ref><ref type="bibr" target="#b16">19]</ref>. Moreover, meta-studies and surveys are available that analyze existing vulnerability classification schemes <ref type="bibr" target="#b13">[16,</ref><ref type="bibr" target="#b22">25]</ref>. We are not aware of any studies that focus on the applicability of detected vulnerabilities. Our work focuses on the applicability, highlighting that mis-identification of vulnerabilities can be for several different reasons (see Section 2.1). Mapping of vulnerabilities to either TPs or FPs is an important environmental decision.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="6">Conclusion and Future Work</head><p>In this paper we discuss UBCIS, a tool created to evaluate the precision, recall, and F-measure of image scanners against base image distributions. We used UBCIS, evaluating three scanning tools against three of the most popular base images. We created a judging process for candidate vulnerabilities, manually evaluated all identified vulnerabilities to determine their relevance. Evaluation results can be applied immediately.</p><p>Correlating vulnerabilities between libraries will give a more granular picture of scanner detection. Such correlation is future work, as is extending the benchmark to deal with language specific package repositories (e.g., NPM, PIP, Ruby Gems). The dynamic nature of packages in these repositories, along with the number of vulnerabilities, presents a challenge.</p><p>Expanding the benchmark to include more images (e.g., CentOS) is future work. The open-source UBCIS benchmark will be available along with the vulnerability classification at https://github.com/blackberry/UBCIS, allowing others to use and build on UBCIS. Benchmark results will need to be regenerated as new vulnerabilities are judged, and as scanners improve. We have automated the process except for vulnerability judging.</p></div><figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_0"><head>D0</head><label></label><figDesc>Determine the package name, version, and metadata. D1 Is the vulnerability already triaged? If so, use the result. D2 Is the vulnerability language or distribution specific? We ignore vulnerabilities in language specific package repositories such as NPM, PIP, or Ruby Gems at this point in time. D3 Is the vulnerable package detected by the scanner empty? If so, mark as a false positive. D4 Is the vulnerability applicable to the distribution? If not, mark as a false positive. D5 Is the vulnerability fixed in the distribution? If so, mark as false positive. If not, mark as a true positive.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_3" validated="false"><head>Table 2 :</head><label>2</label><figDesc></figDesc><table>Vulnerability totals and groups per scanner/image. 

</table></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_4" validated="false"><head>Table 2 shows the results of three scanners. The total number of detected unique vulnerabilities differ wildly, highlighting</head><label>2</label><figDesc></figDesc><table>Trivy 

Anchore 
Clair 
Precision 
Recall 
F-measure 
Precision 
Recall 
F-measure 
Precision 
Recall 
F-measure 

Debian 10.2 
Relaxed 
0.78 
0.98 
0.87 
0.69 
0.51 
0.59 
0.71 
0.86 
0.78 
Paranoid 
1.00 
0.69 
0.82 
1.00 
0.41 
0.58 
0.96 
0.64 
0.77 

Alpine 3.9.4 
Relaxed 
1.00 
1.00 
1.00 
1.00 
1.00 
1.00 
1.00 
0.20 
0.33 
Paranoid 
1.00 
1.00 
1.00 
1.00 
1.00 
1.00 
1.00 
0.20 
0.33 

Ubuntu 18.10 
Relaxed 
NA 
0.00 
NA 
0.46 
0.73 
0.56 
0.48 
0.67 
0.56 
Paranoid 
NA 
0.00 
NA 
0.92 
0.42 
0.57 
0.90 
0.36 
0.51 

</table></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_5" validated="false"><head>Table 3 :</head><label>3</label><figDesc></figDesc><table>Precision, Recall and F-measure per scanner per benchmark mode. 

the impact of choices discussed in Section 2. Furthermore, 
unsupported images are a real problem. Although we were 
planning on including Fedora, we discovered during testing 
that most scanners did not support it. Also, Trivy does not 
support Ubuntu 18.10. 
Many vulnerabilities on debian:10.2 and ubuntu:18.10 
fall into ambiguous classes based on manual analysis. The 
high number of vulnerabilities falling into ambiguous classes 
in </table></figure>
		</body>
		<back>
			<div type="references">

				<listBibl>

<biblStruct xml:id="b0">
	<monogr>
		<title level="m" type="main">Alpine Security Databse v3.9 CVE List. YAML Object (accessed 14</title>
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b1">
	<monogr>
		<title/>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="middle">Web</forename><surname>Github -Anchore Engine</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Page</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2020-05-14" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b2">
	<monogr>
				<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Shay</forename><surname>Chen</surname></persName>
		</author>
		<ptr target="http://sectooladdict.blogspot.com/2017/11/wavsep-2017-evaluating-dast-against.html" />
		<title level="m">WAVSEP 2017/2018-Evaluating DAST against PT/SDL Challenges</title>
		<imprint>
			<date type="published" when="2018" />
		</imprint>
	</monogr>
<note type="report_type">Technical report</note>
</biblStruct>

<biblStruct xml:id="b3">
	<monogr>
		<title/>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="middle">Web</forename><surname>Github -Clair</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Page</surname></persName>
		</author>
		<ptr target="https://github.com/quay/clair" />
		<imprint>
			<date type="published" when="2020-05-14" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b4">
	<monogr>
				<ptr target="https://security-tracker.debian.org/tracker/CVE-2019-9192" />
		<title level="m">CVE-2019-9192 -Debian Bug Tracker. Web Page (accessed</title>
		<imprint>
			<date type="published" when="2020-05-14" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b5">
	<monogr>
		<title/>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Debian</forename><surname>Security Bug</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Tracker</surname></persName>
		</author>
		<ptr target="https://security-tracker.debian.org/tracker/" />
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b6">
	<analytic>
		<title level="a" type="main">Benchmarking vulnerability scanners: An experiment on scada devices and scientific instruments</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Malaka</forename><surname>El</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Emma</forename><surname>Mcmahon</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Sagar</forename><surname>Samtani</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">2017 IEEE International Conference on Intelligence and Security Informatics (ISI)</title>
		<imprint>
			<publisher>IEEE</publisher>
			<date type="published" when="2017" />
			<biblScope unit="page" from="83" to="88" />
		</imprint>
	</monogr>
	<note>Mark Patton, and Hsinchun Chen</note>
</biblStruct>

<biblStruct xml:id="b7">
	<monogr>
		<title level="m" type="main">Tree approach to vulnerability classification</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Sophie</forename><surname>Engle</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Sean</forename><surname>Whalen</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Damien</forename><surname>Howard</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Matt</forename><surname>Bishop</surname></persName>
		</author>
		<idno>CSE-2006-10</idno>
		<ptr target="http://nob.cs.ucdavis.edu/bishop/notes/2006-cse-10/2006-cse-10.pdf" />
		<imprint>
			<date type="published" when="2015" />
			<pubPlace>Davis</pubPlace>
		</imprint>
		<respStmt>
			<orgName>Department of Computer Science, University of California</orgName>
		</respStmt>
	</monogr>
<note type="report_type">Technical Report</note>
</biblStruct>

<biblStruct xml:id="b8">
	<monogr>
		<title level="m" type="main">Google container registry. Web Page</title>
		<imprint>
			<date type="published" when="2020-05-14" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b9">
	<monogr>
		<title level="m" type="main">Why does my security scanner show that an image has CVEs? Web Page</title>
		<imprint>
			<date type="published" when="2020-05-14" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b10">
	<monogr>
		<title level="m" type="main">CIS Docker Community Edition Benchmark</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><surname>Goyal</surname></persName>
		</author>
		<ptr target="https://www.cisecurity.org/benchmark/docker/" />
		<imprint/>
	</monogr>
<note type="report_type">Technical report</note>
</biblStruct>

<biblStruct xml:id="b11">
	<monogr>
		<title level="m" type="main">Over 30% of official images in Docker hub contain high priority security vulnerabilities</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Jayanth</forename><surname>Gummaraju</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Tarun</forename><surname>Desikan</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Yoshio</forename><surname>Turner</surname></persName>
		</author>
		<ptr target="https://blog.banyansecurity.io/blog/over-30-of-official-images-in-docker-hub-contain-high-priority-security-vulnerabilities" />
		<imprint>
			<date type="published" when="2015" />
			<pubPlace>BanyanOps</pubPlace>
		</imprint>
	</monogr>
<note type="report_type">Technical report</note>
</biblStruct>

<biblStruct xml:id="b12">
	<monogr>
		<title level="m" type="main">Static vulnerability analysis of Docker images</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Oscar</forename><surname>Henriksson</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Michael</forename><surname>Falk</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2017" />
		</imprint>
	</monogr>
	<note>Master&apos;s thesis, Blekinge Tekniska Högskola</note>
</biblStruct>

<biblStruct xml:id="b13">
	<analytic>
		<title level="a" type="main">A review of classification methods for network vulnerability</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Shuyuan</forename><surname>Jin</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Yong</forename><surname>Wang</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Xiang</forename><surname>Cui</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Xiaochun</forename><surname>Yun</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">2009 IEEE International Conference on Systems, Man and Cybernetics</title>
		<imprint>
			<publisher>IEEE</publisher>
			<date type="published" when="2009" />
			<biblScope unit="page" from="1171" to="1175" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b14">
	<monogr>
		<title level="m" type="main">Alpine Linux Packages -libc-utils meta package. Web Page</title>
		<imprint>
			<date type="published" when="2020-05-14" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b15">
	<monogr>
		<title level="m" type="main">Exploring container security: Let Google do the patching with new managed base images</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Dan</forename><surname>Lorenc</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Maya</forename><surname>Kaczorowski</surname></persName>
		</author>
		<ptr target="https://cloud.google.com/blog/products/containers-kubernetes/exploring-container-security-let-google-do-the-patching-with-new-managed-base-images" />
		<imprint>
			<date type="published" when="2018" />
			<pubPlace>Google Cloud</pubPlace>
		</imprint>
	</monogr>
<note type="report_type">Technical report</note>
</biblStruct>

<biblStruct xml:id="b16">
	<monogr>
		<title level="m" type="main">Common Weakness Enumeration. Presentation Slides</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Robert A Martin</surname></persName>
		</author>
		<ptr target="http://sqgne.org/presentations/2006-07/Martin-May-2007.pdf" />
		<imprint>
			<date type="published" when="2017-05" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b17">
	<monogr>
		<title level="m" type="main">National Vulnerability Database (NVD)</title>
		<ptr target="https://nvd.nist.gov/" />
		<imprint>
			<date type="published" when="2020-05-14" />
		</imprint>
	</monogr>
	<note>Web Page</note>
</biblStruct>

<biblStruct xml:id="b18">
	<monogr>
		<title level="m" type="main">Quay container registry. Web Page</title>
		<ptr target="https://quay.io" />
		<imprint>
			<date type="published" when="2020-05-14" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b19">
	<analytic>
		<title level="a" type="main">A study of security vulnerabilities on Docker hub</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Rui</forename><surname>Shu</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Xiaohui</forename><surname>Gu</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">William</forename><surname>Enck</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the Seventh ACM on Conference on Data and Application Security and Privacy</title>
		<meeting>the Seventh ACM on Conference on Data and Application Security and Privacy</meeting>
		<imprint>
			<date type="published" when="2017" />
			<biblScope unit="page" from="269" to="280" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b20">
	<analytic>
		<title level="a" type="main">Container security: Issues, challenges,and the road ahead</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Sari</forename><surname>Sultan</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Ahmad</forename><surname>Imtiaz</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Tassos</forename><surname>Dimitriou</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE Access</title>
		<imprint>
			<date type="published" when="2019-05" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b21">
	<analytic>
		<title level="a" type="main">Security analysis of container images using cloud analytics framework</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Byungchul</forename><surname>Tak</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Hyekyung</forename><surname>Kim</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Sahil</forename><surname>Suneja</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Canturk</forename><surname>Isci</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Prabhakar</forename><surname>Kudva</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">International Conference on Web Services</title>
		<imprint>
			<publisher>Springer</publisher>
			<date type="published" when="2018" />
			<biblScope unit="page" from="116" to="133" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b22">
	<analytic>
		<title level="a" type="main">Taxonomic analysis of classification schemes in vulnerability databases</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Anshu</forename><surname>Tripathi</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Umesh Kumar</forename><surname>Singh</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">6th International Conference on Computer Sciences and Convergence Information Technology (ICCIT)</title>
		<imprint>
			<publisher>IEEE</publisher>
			<date type="published" when="2011" />
			<biblScope unit="page" from="686" to="691" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b23">
	<monogr>
		<title/>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Cve</forename><surname>Ubuntu</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="middle">Web</forename><surname>Tracker</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Page</surname></persName>
		</author>
		<ptr target="https://people.canonical.com/~ubuntu-security/cve/" />
		<imprint>
			<date type="published" when="2020-05-14" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b24">
	<analytic>
		<title level="a" type="main">On the relation between outdated docker containers, severity vulnerabilities, and bugs</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Ahmed</forename><surname>Zerouali</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Tom</forename><surname>Mens</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Gregorio</forename><surname>Robles</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Jesus</forename><forename type="middle">M</forename><surname>Gonzalez-Barahona</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">26th International Conference on Software Analysis, Evolution and Reengineering (SANER)</title>
		<imprint>
			<publisher>IEEE</publisher>
			<date type="published" when="2019" />
			<biblScope unit="page" from="491" to="501" />
		</imprint>
	</monogr>
</biblStruct>

				</listBibl>
			</div>
		</back>
	</text>
</TEI>
