<?xml version="1.0" encoding="UTF-8"?>
<TEI xmlns="http://www.tei-c.org/ns/1.0" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
xsi:schemaLocation="http://www.tei-c.org/ns/1.0 /Users/atharsefid/Desktop/grobid-0.5.3/grobid-home/schemas/xsd/Grobid.xsd"
 xmlns:xlink="http://www.w3.org/1999/xlink">
	<teiHeader xml:lang="en">
		<encodingDesc>
			<appInfo>
				<application version="0.5.3" ident="GROBID" when="2020-09-29T02:44+0000">
					<ref target="https://github.com/kermitt2/grobid">GROBID - A machine learning software for extracting information from scholarly documents</ref>
				</application>
			</appInfo>
		</encodingDesc>
		<fileDesc>
			<titleStmt>
				<title level="a" type="main">Towards Provably-Secure Scalable Anonymous Broadcast</title>
			</titleStmt>
			<publicationStmt>
				<publisher/>
				<availability status="unknown"><licence/></availability>
			</publicationStmt>
			<sourceDesc>
				<biblStruct>
					<analytic>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Mahdi</forename><surname>Zamani</surname></persName>
							<email>zamani@cs.unm.edu</email>
							<affiliation key="aff0">
								<orgName type="laboratory">Raytheon BBN Technologies Cambridge</orgName>
								<orgName type="institution" key="instit1">University of New Mexico Albuquerque</orgName>
								<orgName type="institution" key="instit2">University of New Mexico Albuquerque</orgName>
								<orgName type="institution" key="instit3">University of New Mexico Albuquerque</orgName>
								<address>
									<region>NM, NM, NM, MA</region>
								</address>
							</affiliation>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Jared</forename><surname>Saia</surname></persName>
							<email>saia@cs.unm.edu</email>
							<affiliation key="aff0">
								<orgName type="laboratory">Raytheon BBN Technologies Cambridge</orgName>
								<orgName type="institution" key="instit1">University of New Mexico Albuquerque</orgName>
								<orgName type="institution" key="instit2">University of New Mexico Albuquerque</orgName>
								<orgName type="institution" key="instit3">University of New Mexico Albuquerque</orgName>
								<address>
									<region>NM, NM, NM, MA</region>
								</address>
							</affiliation>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Mahnush</forename><surname>Movahedi</surname></persName>
							<email>movahedi@cs.unm.edu</email>
							<affiliation key="aff0">
								<orgName type="laboratory">Raytheon BBN Technologies Cambridge</orgName>
								<orgName type="institution" key="instit1">University of New Mexico Albuquerque</orgName>
								<orgName type="institution" key="instit2">University of New Mexico Albuquerque</orgName>
								<orgName type="institution" key="instit3">University of New Mexico Albuquerque</orgName>
								<address>
									<region>NM, NM, NM, MA</region>
								</address>
							</affiliation>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Joud</forename><surname>Khoury</surname></persName>
							<email>jkhoury@bbn.com</email>
							<affiliation key="aff0">
								<orgName type="laboratory">Raytheon BBN Technologies Cambridge</orgName>
								<orgName type="institution" key="instit1">University of New Mexico Albuquerque</orgName>
								<orgName type="institution" key="instit2">University of New Mexico Albuquerque</orgName>
								<orgName type="institution" key="instit3">University of New Mexico Albuquerque</orgName>
								<address>
									<region>NM, NM, NM, MA</region>
								</address>
							</affiliation>
						</author>
						<title level="a" type="main">Towards Provably-Secure Scalable Anonymous Broadcast</title>
					</analytic>
					<monogr>
						<imprint>
							<date/>
						</imprint>
					</monogr>
				</biblStruct>
			</sourceDesc>
		</fileDesc>
		<profileDesc>
			<abstract>
				<p>We devise a scalable and provably-secure protocol for fully-anonymous broadcast in large-scale networks. Similar to the dining cryptographers networks (DC-NETS), our algorithm uses secure multi-party computation (MPC) to ensure anonymity. However, we address the weaknesses of DC-NETS, which are poor scalability and vulnerability to jamming attacks. When compared to the state-of-the-art, our protocol reduces the total bit complexity from O(n 2) tõ O(n) per anonymous message sent in a network of size n; total latency increases from O(1) to polylog(n). We assume up to a one third fraction of the parties is controlled by a static Byzantine adversary. We further assume that this adversary is compu-tationally unbounded, and thus make no cryptographic hardness assumptions.</p>
			</abstract>
		</profileDesc>
	</teiHeader>
	<text xml:lang="en">
		<body>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="1">Introduction</head><p>Anonymous communication allows individuals to communicate with each other without fear of surveillance. An anonymity system attempts to conceal the relation between messages and their intended recipients, between messages and their actual senders, or both (full anonymity).</p><p>Today, political and commercial entities are increasingly engaging in sophisticated cyber-warfare to damage, disrupt, or censor information content <ref type="bibr" target="#b10">[11]</ref>. In designing anonymity systems, there is a need to ensure reliability even against a powerful adversary. In this paper, we consider a Byzantine adversary that controls up to a certain fraction of parties in the network. The controlled parties can launch both passive (e.g. eavesdropping, nonparticipation) and active attacks (e.g. jamming, message dropping, corruption, and forging).</p><p>Two widely-accepted architectures for providing anonymity against such an adversary are Mix networks (MIX-NETS) and Dining Cryptographers networks (DC-NETS), both of which were originally proposed by Chaum <ref type="bibr">[1,</ref><ref type="bibr">2]</ref>. MIX-NETS are cryptographic in nature, require semi-trusted infrastructure nodes, and are known to be vulnerable to traffic analysis and active attacks <ref type="bibr" target="#b11">[12]</ref>. DC-NETS <ref type="bibr">[2,</ref><ref type="bibr" target="#b9">10,</ref><ref type="bibr" target="#b12">13,</ref><ref type="bibr" target="#b13">14]</ref>, on the other hand, provide unconditionally-secure anonymous broadcast protocols among a group of parties without requiring trusted third-parties. The core idea of DC-NETS is that a protocol for secure multi-party computation (MPC) can be used to perform sender and receiver anonymous broadcast. For example, if party p i wants to broadcast a message m i anonymously, then all other parties participate in a secure multi-party sum with input zero, while party p i participates with input m i . All parties learn the sum, which is m i while all inputs remain private. This ensures that no party can trace the output message m i to its input, keeping p i anonymous.</p><p>Although DC-NETS are provably-secure against traffic analysis, they face several challenges. First, a reservation mechanism is required to schedule which party is broadcasting without compromising the anonymity of the sender. Second, DC-NETS are susceptible to collisions, which degrade throughput. A jamming adversary may even use collisions to render the channel useless by continuously transmitting in every round. Third, typical DC-NETS are not scalable given that the total bit complexity 1 required to anonymously broadcast a single bit within a group of size n is Ω(n 2 ).</p><p>State-of-the-art approaches that address some of these challenges include <ref type="bibr" target="#b3">[4,</ref><ref type="bibr" target="#b9">10,</ref><ref type="bibr" target="#b12">13]</ref>. The majority of these methods are cryptographic in nature, and scale poorly with network size, rendering them impractical for large networks. We are not aware of any unconditionallysecure anonymous protocol that scales better than O(n 2 ) bits per anonymous bit sent.</p><p>In this paper, we address the scalability and jamming limitations of DC-NETS. We do so using the recent scalable MPC algorithm of <ref type="bibr" target="#b5">[6]</ref>. Our jamming-resistant protocol provides full anonymity at a total bit complexity of˜Oof˜ of˜O(n) per anonymous message 2 and a total latency of polylog(n).</p><p>Our protocol is provably-secure as it is based on a formal security framework, which follows from the security of secure multi-party computation. In particular, our protocol is not vulnerable to end-to-end traffic analysis attacks common to circuit-based approaches like Tor <ref type="bibr" target="#b7">[8]</ref>. We also provide provable anonymity against a priori knowledge that an adversary might have regarding the potential communicating parties, another property that Tor fails to provide 3 . Moreover, unlike Tor, which relies on centralized path setup servers, our protocol is fullydecentralized.</p><p>Our result is motivated by a vision of creating peer-topeer versions of microblogging services with large number of users such as Twitter, but with provable anonymity guarantees. In Twitter, users can tolerate a higher messaging latency when compared to interactive web browsing applications. Therefore, trading-off latency for bandwidth cost and load-balancing is a promising goal for such applications.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2">Model and Problem Statement</head><p>We assume a network of n parties whose identities are common knowledge <ref type="bibr" target="#b3">4</ref> . We assume there is a private and authenticated communication channel between every pair of parties and the communication is synchronous. Moreover, our protocol does not require the presence of any trusted third-party and we do not assume the existence of a reliable broadcast channel.</p><p>We assume t &lt; (1/3 − ε)n of the parties are controlled by a Byzantine adversary, for some positive constant ε. The adversary is actively trying to prevent the protocol from succeeding by attacking (1) the anonymity of the senders and receivers, and (2) the integrity of communications, by attempting to corrupt, forge, or drop messages. We say that the parties controlled by the adversary are dishonest and that the remaining parties are honest. The adversary is computationally unbounded thus, we make no cryptographic hardness assumptions. We also assume that the adversary is static meaning that it must select the set of dishonest parties at the start of the protocol. Finally, we make the standard assumption that the honest parties strictly follow our protocol, and do not form coalitions in which information is exchanged.</p><p>We say a network is fully-anonymous if it provides both sender and receiver anonymity. A protocol is sender (receiver) anonymous if the adversary is unable to distinguish between any of the honest parties as the sender (receiver) of a message <ref type="bibr" target="#b4">5</ref> . More formally, a protocol is sender (receiver) anonymous if conditioned on all messages and information that the adversary gathers from all dishonest parties, the probability of an honest party being the actual sender (receiver) of a message is at most 1/(n − t).</p><p>In this paper, we design a fully-anonymous and scalable anonymity system. We assume all participating parties are publicly known, i.e. we are not trying to hide the participants' identities or their locations.</p><p>Note on the synchrony assumption The synchrony assumption in our model is due to the result of <ref type="bibr" target="#b5">[6]</ref>. We point out that our protocol can also work in a fullyasynchronous setting using the result of <ref type="bibr" target="#b6">[7]</ref>. In that setting, however, we can only guarantee that, conditioned on all information that is gathered by the adversary, the probability that a given honest party is the sender of a message is at most 1/(n − 2t) instead of 1/(n − t). Also, t must be decreased to less than (1/8 − ε)n in the asynchronous setting, for some positive constant ε.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3">Our Results</head><p>Our main result is as follows.</p><p>Theorem 1. Assume there are n parties in a fullyconnected network with private channels, up to t &lt; n/3 of which are controlled by an adversary, and each party has a constant-size message to broadcast. If all honest parties follow the protocol of section 6, then with high probability:</p><p>1. Each honest party broadcasts its message to all other honest parties with probability 1/k, where k &gt; 1 is a constant, 2. The communication is fully-anonymous, 3. Each party sends˜Osends˜ sends˜O(n) bits and performs˜Operforms˜ performs˜O(n) computations,</p><p>4. The latency of the protocol is polylog(n).</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4">Further Related Work</head><p>Von Ahn et al.</p><p>[13] develop a cryptographic broadcast protocol based on DC-NETS that is resistant to a static Byzantine adversary. A set of n parties with private inputs compute and share the sum of their inputs without revealing any parties' input. The authors introduce k-anonymity, which means no polynomial-time adversary may distinguish the sender/receiver of a message from among k honest senders/receivers. To achieve kanonymity, they partition the set of parties into groups of size M = O(k) and execute a multi-party sum protocol inside each group. The jamming detection mechanism is weak against an adversary who may waste valuable resources by adaptively filling up to M channels. In the case where n-anonymity is desired, the protocol requires O(n 3 ) messages to be sent per anonymous message and the total bit complexity is O(n 4 ). The protocol has latency that is O(1) on average when the number of broadcasts is large, but which can be O(n) in worst case for a single broadcast. While we similarly use a secure sum computation, our protocol is non-cryptographic and handles both jamming detection and correction. Golle and Juels <ref type="bibr" target="#b9">[10]</ref> employ cryptographic proofs of correctness to solve the jamming problem in DC-NETS assuming a static Byzantine adversary. The protocol detects jamming with high probability in O(1) rounds, requiring a total communication and computation complexity of O(n 2 ) bits. Their protocol assumes the existence of a reliable broadcast and a centralized trusted authority for key management distribution.</p><p>The Xor-trees approach of <ref type="bibr" target="#b8">[9]</ref> extends DC-NETS to achieve O(n) amortized bit complexity, which is optimal. In this protocol, only a single user is allowed to send at any one time in a Xor-tree. Hence, the protocol is subject to performance degradation due to collisions as the number of users increases. The protocol assumes the existence of a public-key infrastructure and a non-Byzantine polynomial-time adversary. The total bit complexity of the protocol is O(n 2 t 2 ) bits in worst case, where t is the number of dishonest parties. The latency of the protocol is O(n) in worst case. However, a sender may broadcast large payloads to amortize the costs. The amortized latency of the protocol is O(1).</p><p>The Verdict protocol of <ref type="bibr" target="#b4">[5]</ref> (which is based on Dissent <ref type="bibr">[3]</ref>) has a client-server architecture and uses verifiable DC-NETS, where participants use public-key cryptography to construct ciphertext, and knowledge proofs to detect and exclude jamming parties before disruption. The protocol assumes the existence of a few highlyavailable servers, where at least one server is honest. All servers must be alive, however, for the protocol to work. An interesting aspect of Verdict is that it is robust to a large fraction of Byzantine parties (up to n − 2). The paper demonstrates empirically that the system scales well with the number of clients, when the number of servers is fixed.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5">Preliminaries</head><p>In this section, we define standard terms used throughout the paper and then move to a recent result used in our protocol.</p><p>Notation An event occurs with high probability, if it occurs with probability at least 1 − 1/n c , for any c &gt; 0 and sufficiently large n. We assume all computations occur over a finite field F.</p><p>Secure MPC We make critical use of a scalable protocol for secure MPC. Assume n parties in a fullyconnected synchronous network who want to jointly compute any arbitrary function over their inputs while keeping their inputs private.</p><p>Dani et al.</p><p>[6] describe an algorithm for solving MPC in this setting. They create groups of parties with logarithmic size called quorums. In each quorum, at least a 2/3 fraction of parties is honest. Let C be a circuit that computes the desired function, f , over n inputs. For each gate G in circuit C, a quorum Q G is assigned to G. This quorum is used to compute the output of G. Their protocol ensures that the parties in Q G all learn the sum of the output of G plus a mask value R G selected uniformly at random from the field F. Shares of R G are held jointly by the parties in the quorum, but the value is unknown to any individual. Thus, no party learns any information about the output of G, but the parties together have enough information to provide the input for computation of the masked output of the next gate. This procedure is repeated to compute the values for the gates in the next layer of the circuit. At the top level of the circuit, the output of f is computed and is sent down to all parties through all-to-all communication between the quorums.</p><p>Let f be any function over n inputs, and C be a circuit that computes f . Let m be the number of gates in C and d be the depth of C. The following theorem gives the main result of <ref type="bibr" target="#b5">[6]</ref>.</p><p>Theorem 2.</p><p>[6] There exists a perfectly-secure protocol that can compute f with high probability while ensuring each party sends˜Osends˜ sends˜O( n+m n + √ n) messages and performs˜O performs˜ performs˜O( n+m n + √ n) computations. This protocol has total latency O(d + polylog(n)).</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="6">Our Protocol</head><p>Assume n parties p 1 , ..., p n , where for 1 ≤ i ≤ n, party p i has a message m i to broadcast to the network anonymously. Party p i chooses a number l ∈ [1, r] uniformly at random and forms a vector X i = [x i j ], where x il = m i and x i j = 0 (for all 1 ≤ j ≤ r and j = l). For some constant k &gt; 1, each of the r = kn positions in X i is referred to as a slot. For simplicity, we assume r is an integer power of two. The parties then run the MPC algorithm of section 5 to compute a function f (X 1 , X 2 , ..., X n ) such that every party learns the vector addition ∑ n i=1 X i and none of the parties can send more than one non-zero input. In the following, we explain the circuit that computes function f .</p><p>Our Circuit <ref type="figure" target="#fig_1">Figure 1</ref> shows the circuit, which consists of two major subcircuits: JAMDETECTOR that detects jamming inputs and ADDER that computes the component-wise addition. We now describe each part of the circuit in detail.</p><formula xml:id="formula_0">G I G I G I G S G S G S ...</formula><p>...</p><formula xml:id="formula_1">x 11 x 12 x 1r p 1 ADDER JAMDETECTOR X 1 = [x 1j ], 0 &lt; j r X 2 = [x 2j ], 0 &lt; j r X n = [x nj ], 0 &lt; j r JAMDETECTOR G I G I G I G S G S G S ...</formula><p>...</p><formula xml:id="formula_2">x 21 x 22 x 2r p 2 JAMDETECTOR G I G I G I G S G S G S ...</formula><p>...  • Input gates: In <ref type="figure" target="#fig_1">Figure 1</ref>, gates labeled G I are called input gates and compute the identity function G I (x i j ) = x i j . Input gates are necessary for ensuring consistency among all inputs a party sends during the protocol execution.</p><p>• Jam detector: Each party is associated with exactly one JAMDETECTOR subcircuit. The subcircuit has r inputs and r outputs: all outputs are set to zero if no jamming is detected for the corresponding party otherwise all outputs are set to a non-zero value. Figure 2 depicts a circuit for n = 2 and r = 4 showing the subcircuit in detail. Each JAMDETECTOR consists of three types of gates, which are defined in the following on the field F:</p><formula xml:id="formula_3">G 1 (y) = 0, if y = 0 1 otherwise G 2 (y 1 , y 2 ) =    0, if y 1 + y 2 = 0 1, if y 1 + y 2 = 1 2 otherwise G 3 (y) = 0, if y = 0, 1 −1 otherwise</formula><p>Each JAMDETECTOR contains a perfect binary tree consisting of only G 2 gates over r leaf nodes, consisting of only G 2 gates. This tree is connected from its root gate to an inverted perfect binary tree of only G 3 gates over r/2 leaf nodes, consisting of only G 3 gates.</p><p>• Selector gates: Gates labeled G S in <ref type="figure" target="#fig_1">Figure 1</ref> and <ref type="figure">Fig- ure 2</ref> are called selector gates. Each of these gates acts like a selector function: if the first input (which is an output of a JAMDETECTOR subcircuit) is zero, it simply outputs the second input otherwise it outputs zero. The selector gate is defined as follows:</p><formula xml:id="formula_4">G S (y 1 , y 2 ) = y 2 , if y 1 = 0 0 otherwise</formula><p>where y 1 is the output of corresponding G 3 and y 2 is the output of corresponding input gate.</p><p>• Adder: There is one ADDER subcircuit, which is a simple sum circuit and consists of r perfect binary trees each of which has n leaf nodes. The j-th binary tree sums up the outputs of all the j-th selector gates from all parties, which correspond to all the j-th slots. In order to avoid sending incorrect data down the tree when a collision happens, each sum gate in ADDER simply outputs zero if both of its inputs are non-zero.</p><p>Circuit Computation Using the MPC algorithm described in section 5, the inputs of all parties are sent up the circuit simultaneously. The JAMDETECTOR subcircuit filters out any jamming inputs and sends the rest of them up to ADDER. The ADDER subcircuit computes the sum of all non-jamming inputs and finally, the result is sent down to every party via the output propagation algorithm described in <ref type="bibr" target="#b5">[6]</ref>. The MPC algorithm ensures that (1) the output of the circuit is computed correctly and is reliably sent to all parties; and (2) no party learns any information about the inputs or outputs of intermediate gates, except what can be learned from their own input and the final output of the circuit.</p><formula xml:id="formula_5">JAMDETECTOR + + + + ADDER G 1 G 1 G I I G G 1 G 1 G 2 I G I G G 2 G 3 G 3 G S G 3 G S G S G S G 2 X 2 = [x 2j ], 0 &lt; j 4 x 21 x 22 x 23 x 24 p 2 G 1 G 1 G I I G G 1 G 1 G 2 I G I G G 2 G 3 G 3 G S G 3 G S G S G S G 2 X 1 = [x 1j ], 0 &lt; j 4 x 11 x 12 x 13 x 14 p 1</formula><p>Figure 2: Our circuit for n = 2 and r = 4. The figure shows the JAMDETECTOR subcircuit in detail.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="7">Analysis</head><p>In this section, we prove Theorem 1. As shown in the proof of Theorem 2 in <ref type="bibr" target="#b5">[6]</ref>, each gate in the circuit outputs the expected value.</p><p>Lemma 1. Consider a JAMDETECTOR subcircuit, r input gates (G I ), and r selector gates (G S ) associated with party p i (see <ref type="figure" target="#fig_1">Figure 1</ref>). During the computation of the circuit, at most one of the selector gates, say G * S , outputs a non-zero value. If p i is honest, then G * S is chosen uniformly at random from the r selector gates.</p><p>Proof. Assume p i has a message m i to broadcast. First, consider the case where p i is honest. p i chooses an input gate uniformly at random and sends m i to that gate and sends 0 to all other input gates. Hence, at most one G 1 gate outputs 1 and the rest output 0. Thus, all G 2 gates output 0 or 1, and consequently all G 3 gates output 0. Finally, the output of all G s gates is the same as the output of the corresponding input gate. Hence, at most one G s gate, say G * S , outputs a non-zero value. Obviously, G * S is chosen uniformly at random because the corresponding input gate is chosen uniformly at random. Now, consider the case where p i is dishonest and sends non-zero values to more than one of his input gates (this corresponds to a jamming attack). In this case, more than one G 1 outputs 1 and since the sum is greater than one, all G 3 gates output −1 and all G s gates output 0.</p><p>In the protocol of section 6, we explained that each party selects one of the r slots uniformly at random. Even if all parties are honest (i.e. no jamming is occurring), collisions are always possible meaning that one or more parties may choose the same slot for their non-zero message. Unfortunately, there is no efficient non-interactive method that guarantees all parties select distinct slots. Hence, for simplicity, we ensure that the number of slots is large enough so that the probability of collision remains small. The following lemma gives an upper-bound on the probability of collisions.</p><p>Lemma 2. If r = kn, where r is the number of slots and k &gt; 1 is a constant, then the probability of collision for one party is less than 1/k.</p><p>Proof. By Lemma 1, we can ensure that each party sends his input to at most one slot, i.e. jamming has already been prevented. Let p be an arbitrary honest party. The probability that another party chooses exactly the same slot that p chooses is 1/r. So, the probability of collision for p is at most (n−1)/r. Since r = kn, the probability of collision is at most (n − 1)/kn &lt; 1/k. As in <ref type="bibr" target="#b12">[13]</ref>, in most cases we can set r = 2n, which makes the probability of collision for a party less than 1/2. Lemma 3. Our protocol is fully-anonymous and it ensures that for each honest party p i , who sends message m i , all honest parties learn m i with probability 1 − 1/k.</p><p>Proof. Theorem 2 guarantees that the adversary only learns the set of outputs and the corresponding slots besides his own input. The input slots were chosen independently and uniformly at randomly by each party. As proved in Lemma 1, every m j sent by an honest party p j (1 ≤ j ≤ n) appears in at most one of the corresponding selector gates uniformly at random and all other selector gates output 0. Since the ADDER subcircuit keeps the ordering of slots, the output slots corresponding to honest parties are also chosen uniformly at random and thus, give the adversary no extra information. Therefore, conditioned on all information that the adversary can learn during the protocol, the probability that m i is sent by any honest party p j (1 ≤ j ≤ n) is 1/(n − t). This means that the communication is sender-anonymous.</p><p>Theorem 2 guarantees that all honest parties learn every output of the circuit with high probability, one of which is m i . This shows that the communication is receiver-anonymous and thus, the protocol is fullyanonymous. Moreover, based on Lemma 2, the probability that it fails to deliver m i is less than 1/k. Lemma 4. The circuit constructed in section 6 has depth O(log n) and O(nr) gates, where r is the number of slots.</p><p>Proof. In the circuit of <ref type="figure" target="#fig_1">Figure 1</ref>, for each party a subtree of depth 2 log r + 3 consisting of 5r − 2 gates is required ignoring the ADDER circuit, which consists of r binary trees each with n leaves. Each tree has depth log n + 1 and consists of 2n − 1 gates so the ADDER subcircuit has (2n − 1)r gates. Therefore, the total number of gates in a circuit for n parties is 7nr − 2n − r and the circuit has depth 2 log r + log n + 4.</p><p>Lemma 5. If all honest parties follow our protocol, then with high probability, the protocol sends˜Osends˜ sends˜O(n) bits and performs˜Operforms˜ performs˜O(n) computations for sending one anonymous bit. The latency of the protocol is polylog(n).</p><p>Proof. The MPC protocol of <ref type="bibr" target="#b5">[6]</ref> requires each party to send˜Osend˜ send˜O( n+m n + √ n) bits and perform˜Operform˜ perform˜O( n+m n + √ n) computations to compute any arbitrary function f , where m is the number of gates in the circuit for computing f . However, unlike <ref type="bibr" target="#b5">[6]</ref> that propagates only one message (the result of computation) to every party at the output propagation phase, our protocol transmits n messages at this phase. Therefore, it requires each party to send˜O send˜ send˜O( n 2 +m n + √ n) bits. From Lemma 4, we have m = O(n 2 ) gates so each party sends˜Osends˜ sends˜O(n + √ n) = ˜ O(n) bits for sending n anonymous bits. Alternatively, the protocol sends˜Osends˜ sends˜O(n) bits for sending one anonymous bit. With a similar argument, the protocol requires each party to perform˜Operform˜ perform˜O(n) computations. As Theorem 2 shows, the MPC algorithm takes O(d + polylog(n)) rounds to compute any arbitrary circuit with depth d, where n is the number of parties. Lemma 4 shows that the circuit of section 6 for n parties has depth O(log n), since r = O(n). Therefore, the protocol takes polylog(n) rounds to send an anonymous bit.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="8">Conclusion and Open Problems</head><p>We described a Byzantine-resistant protocol for fullyanonymous broadcast in large-scale networks that has a total communication complexity of˜Oof˜ of˜O(n) bits per anonymous bit and a polylogarithmic latency. To the best of our knowledge, this is the first result that ensures provable anonymity against an unbounded adversary that sends asymptotically less than O(n 2 ) bits per anonymous bit.</p><p>Although the˜Othe˜ the˜O(n) bit complexity of our protocol scales very well comparing to the state-of-the-art, the actual bandwidth cost is still very high. This is mainly due to the large constants in the communication complexity of the scalable MPC algorithm and the large number of gates in our circuit. It may be possible to decrease the message cost significantly in practice by using threshold cryptography to speed up Byzantine agreement <ref type="bibr" target="#b14">[15]</ref>, which is used repeatedly in the MPC algorithm for simulating a reliable broadcast channel.</p><p>One aspect of our DC-NET-based model is that the adversary can only try to corrupt the protocol by actively jamming the channels, which makes it possible to detect dishonest parties. We are interested in the average cost of our protocol when multiple broadcasts occur and thus, it may be possible to blacklist parties that exhibit adversarial behavior. We hope to create an algorithm that achieves amortized resource costs per anonymous message sent that is significantly better than our algorithm for a single-shot communication.</p><p>Our work (and most previous work) assumes the identities of parties is a common knowledge. This does not conform, for example, with the fully distributed nature of peer-to-peer systems. We are interested to know if we can do better in this respect and still retain efficiency and provable security.</p></div><figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_1"><head>Figure 1 :</head><label>1</label><figDesc>Figure 1: Our circuit for n parties showing JAMDETECTOR and ADDER subcircuits as black-boxes.</figDesc></figure>
		</body>
		<back>

			<div type="acknowledgement">
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="9">Acknowledgments</head><p>The authors would like to acknowledge supports from IARPA under grant W911NF-11-2-0051 and NSF under grant CCR-0313160 and CAREER Award 644058. The authors would also like to thank Josh Karlin from Google for making a valuable contribution to the discussions and for his supportive comments.</p></div>
			</div>

			<div type="references">

				<listBibl>

<biblStruct xml:id="b0">
	<analytic>
		<title level="a" type="main">Untraceable electronic mail, return addresses, and digital pseudonyms</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Chaum</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Commun. ACM</title>
		<imprint>
			<biblScope unit="volume">24</biblScope>
			<biblScope unit="page" from="84" to="90" />
			<date type="published" when="1981-02" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b1">
	<analytic>
		<title level="a" type="main">The dining cryptographers problem: Unconditional sender and recipient untraceability</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Chaum</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename></persName>
		</author>
		<idno type="doi">65-75.10.1007/BF00206326</idno>
	</analytic>
	<monogr>
		<title level="j">Journal of Cryptology</title>
		<imprint>
			<biblScope unit="volume">1</biblScope>
			<date type="published" when="1988" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b2">
	<analytic>
		<title level="a" type="main">Dissent: accountable anonymous group messaging</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Corrigan-Gibbs</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">H</forename><surname>And</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Ford</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">B</forename></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 17th ACM conference on Computer and Communications Security</title>
		<meeting>the 17th ACM conference on Computer and Communications Security<address><addrLine>New York, NY, USA</addrLine></address></meeting>
		<imprint>
			<date type="published" when="2010" />
			<biblScope unit="page" from="340" to="350" />
		</imprint>
	</monogr>
	<note>CCS&apos;10, ACM</note>
</biblStruct>

<biblStruct xml:id="b3">
	<monogr>
		<title level="m" type="main">Dining in the Sunshine: Verifiable Anonymous Communication with Verdict</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Corrigan-Gibbs</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">H</forename><surname>Wolinsky</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><forename type="middle">I</forename><surname>And</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Ford</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">B</forename></persName>
		</author>
		<imprint>
			<date type="published" when="2012-09" />
		</imprint>
	</monogr>
	<note>ArXiv e-prints</note>
</biblStruct>

<biblStruct xml:id="b4">
	<analytic>
		<title level="a" type="main">Proactively accountable anonymous messaging in verdict</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Corrigan-Gibbs</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">H</forename><surname>Wolinsky</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><forename type="middle">I</forename><surname>And</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Ford</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">B</forename></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 22nd USENIX Security Symposium</title>
		<meeting>the 22nd USENIX Security Symposium</meeting>
		<imprint>
			<date type="published" when="2013" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b5">
	<analytic>
		<title level="a" type="main">Brief announcement: breaking the o(nm) bit barrier, secure multiparty computation with a static adversary</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Dani</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">V</forename><surname>King</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">V</forename><surname>Movahedi</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>And</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Saia</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename></persName>
		</author>
		<ptr target="http://arxiv.org/abs/1203.0289" />
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 2012 ACM symposium on Principles of distributed computing</title>
		<meeting>the 2012 ACM symposium on Principles of distributed computing<address><addrLine>New York, NY, USA</addrLine></address></meeting>
		<imprint>
			<date type="published" when="2012" />
			<biblScope unit="page" from="227" to="228" />
		</imprint>
	</monogr>
	<note>PODC &apos;12, ACM</note>
</biblStruct>

<biblStruct xml:id="b6">
	<monogr>
		<title level="m" type="main">Quorums quicken queries: Efficient asynchronous secure multiparty computation</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Dani</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">V</forename><surname>King</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">V</forename><surname>Movahedi</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>And</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Saia</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename></persName>
		</author>
		<ptr target="http://cs.unm.edu/~saia/papers/mpc-asynch.pdf" />
		<imprint>
			<date type="published" when="2013" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b7">
	<analytic>
		<title level="a" type="main">Tor: the second-generation onion router</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Dingledine</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Mathewson</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">N</forename><surname>And</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Syverson</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 13th USENIX Security Symposium</title>
		<meeting>the 13th USENIX Security Symposium<address><addrLine>Berkeley, CA, USA</addrLine></address></meeting>
		<imprint>
			<date type="published" when="2004" />
			<biblScope unit="volume">13</biblScope>
			<biblScope unit="page" from="21" to="21" />
		</imprint>
	</monogr>
	<note>SSYM&apos;04, USENIX Association</note>
</biblStruct>

<biblStruct xml:id="b8">
	<analytic>
		<title level="a" type="main">Xor-trees for efficient anonymous multicast and reception</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Dolev</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>And</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Ostrobsky</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">ACM Trans. Inf. Syst. Secur</title>
		<imprint>
			<biblScope unit="volume">3</biblScope>
			<biblScope unit="issue">2</biblScope>
			<biblScope unit="page" from="63" to="84" />
			<date type="published" when="2000-05" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b9">
	<analytic>
		<title level="a" type="main">Dining cryptographers revisited</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Golle</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><surname>And</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Juels</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of Eurocrypt</title>
		<meeting>Eurocrypt</meeting>
		<imprint>
			<date type="published" when="2004-05" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b10">
	<monogr>
		<title level="m" type="main">Cyber warfare: A nuclear option?</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Krepinevich</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><forename type="middle">F</forename></persName>
		</author>
		<imprint>
			<date type="published" when="2012" />
			<publisher>Center for Strategic and Budgetary Assessments</publisher>
			<pubPlace>Washington, DC, USA</pubPlace>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b11">
	<analytic>
		<title level="a" type="main">Networks without user observability design options</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Pfitzmann</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>And</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Waidner</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. of a workshop on the theory and application of cryptographic techniques on Advances in cryptology-EUROCRYPT &apos;85</title>
		<meeting>of a workshop on the theory and application of cryptographic techniques on Advances in cryptology-EUROCRYPT &apos;85<address><addrLine>New York, NY, USA</addrLine></address></meeting>
		<imprint>
			<publisher>Springer-Verlag New York, Inc</publisher>
			<date type="published" when="1986" />
			<biblScope unit="page" from="245" to="253" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b12">
	<analytic>
		<title level="a" type="main">k-anonymous message transmission</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Von</forename><surname>Ahn</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">L</forename><surname>Bortz</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>And</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Hopper</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">N</forename><forename type="middle">J</forename></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 10th ACM conference on Computer and communications security</title>
		<meeting>the 10th ACM conference on Computer and communications security<address><addrLine>New York, NY, USA</addrLine></address></meeting>
		<imprint>
			<date type="published" when="2003" />
			<biblScope unit="page" from="122" to="130" />
		</imprint>
	</monogr>
	<note>CCS &apos;03, ACM</note>
</biblStruct>

<biblStruct xml:id="b13">
	<analytic>
		<title level="a" type="main">The dining cryptographers in the disco: unconditional sender and recipient untraceability with computationally secure serviceability</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Waidner</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>And</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Pfitzmann</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">B</forename></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the workshop on the theory and application of cryptographic techniques on Advances in cryptology</title>
		<meeting>the workshop on the theory and application of cryptographic techniques on Advances in cryptology<address><addrLine>New York, NY, USA</addrLine></address></meeting>
		<imprint>
			<publisher>Springer-Verlag New York, Inc</publisher>
			<date type="published" when="1990" />
			<biblScope unit="page">690</biblScope>
		</imprint>
	</monogr>
	<note>EUROCRYPT &apos;89</note>
</biblStruct>

<biblStruct xml:id="b14">
	<analytic>
		<title level="a" type="main">Practical robust communication in dhts tolerating a byzantine adversary</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Young</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Kate</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Goldberg</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">I</forename><surname>And</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Karsten</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 2010 IEEE 30th International Conference on Distributed Computing Systems</title>
		<meeting>the 2010 IEEE 30th International Conference on Distributed Computing Systems<address><addrLine>Washington, DC, USA</addrLine></address></meeting>
		<imprint>
			<publisher>Notes</publisher>
			<date type="published" when="2010" />
			<biblScope unit="page" from="263" to="272" />
		</imprint>
	</monogr>
	<note>ICDCS &apos;10</note>
</biblStruct>

<biblStruct xml:id="b15">
	<monogr>
		<title level="m" type="main">Throughout this paper, total bit complexity (or total communication complexity) means the total number of bits sent by all parties in all rounds of a protocol</title>
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b16">
	<monogr>
		<title level="m" type="main">The symbol˜Osymbol˜ symbol˜O, is used as a variant of the big-O notation that ignores logarithmic factors. Thus, f (n) = ˜ O(g(n)) means f (n) =</title>
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b17">
	<monogr>
		<title level="m" type="main">O(g(n) log k g(n)) for some k</title>
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b18">
	<monogr>
		<title level="m" type="main">For example, the adversary might know beforehand that some group of dissidents are likely to be communicating and could redirect all its resources to prove this</title>
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b19">
	<monogr>
		<title level="m" type="main">Obviously, delivering a message to all parties guarantees receiver anonymity</title>
		<imprint>
			<biblScope unit="volume">12</biblScope>
		</imprint>
	</monogr>
</biblStruct>

				</listBibl>
			</div>
		</back>
	</text>
</TEI>
