<?xml version="1.0" encoding="UTF-8"?>
<TEI xmlns="http://www.tei-c.org/ns/1.0" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
xsi:schemaLocation="http://www.tei-c.org/ns/1.0 /Users/atharsefid/Desktop/grobid-0.5.3/grobid-home/schemas/xsd/Grobid.xsd"
 xmlns:xlink="http://www.w3.org/1999/xlink">
	<teiHeader xml:lang="en">
		<encodingDesc>
			<appInfo>
				<application version="0.5.3" ident="GROBID" when="2020-09-29T02:33+0000">
					<ref target="https://github.com/kermitt2/grobid">GROBID - A machine learning software for extracting information from scholarly documents</ref>
				</application>
			</appInfo>
		</encodingDesc>
		<fileDesc>
			<titleStmt>
				<title level="a" type="main">BNV: Enabling Scalable Network Experimentation through Bare-metal Network Virtualization</title>
			</titleStmt>
			<publicationStmt>
				<publisher/>
				<availability status="unknown"><licence/></availability>
			</publicationStmt>
			<sourceDesc>
				<biblStruct>
					<analytic>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Pravein</forename><surname>Govindan</surname></persName>
							<affiliation key="aff0">
								<orgName type="department">School of Computing</orgName>
								<orgName type="institution">National University of Singapore</orgName>
							</affiliation>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Kannan</forename><surname>Ahmad</surname></persName>
							<affiliation key="aff0">
								<orgName type="department">School of Computing</orgName>
								<orgName type="institution">National University of Singapore</orgName>
							</affiliation>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Soltani</forename><surname>Mun</surname></persName>
							<affiliation key="aff0">
								<orgName type="department">School of Computing</orgName>
								<orgName type="institution">National University of Singapore</orgName>
							</affiliation>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Choon</forename><surname>Chan</surname></persName>
							<affiliation key="aff0">
								<orgName type="department">School of Computing</orgName>
								<orgName type="institution">National University of Singapore</orgName>
							</affiliation>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Ee-Chien</forename><surname>Chang</surname></persName>
							<affiliation key="aff0">
								<orgName type="department">School of Computing</orgName>
								<orgName type="institution">National University of Singapore</orgName>
							</affiliation>
						</author>
						<title level="a" type="main">BNV: Enabling Scalable Network Experimentation through Bare-metal Network Virtualization</title>
					</analytic>
					<monogr>
						<imprint>
							<date/>
						</imprint>
					</monogr>
				</biblStruct>
			</sourceDesc>
		</fileDesc>
		<profileDesc>
			<abstract>
				<p>New paradigms and architectures, such as Software Defined Networking (SDN), have added an unprecedented increase in the rate of research and development conducted in the field of computer networks. With this increase , there is a rising need for platforms that can enable researchers and operators to experiment with various scenarios involving performance testing, SDN, security research, topology designs, etc. However, the available emulators fail to address fundamental needs of the experiments requiring diverse and scalable set of topolo-gies. In this work, we propose a novel approach to embed arbitrary topologies on a substrate network of pro-grammable ToR switches using our network virtualiza-tion technique, called Bare-metal Network Virtualization (BNV). BNV is entirely software configurable and has been implemented on open source software and unmodified OpenFlow-enabled switches. The system has been deployed and currently running in a production testbed in National Cybersecurity Laboratory (NCL) for a year. Our evaluations show that BNV can support various data-center topologies with less number of switches which can facilitate building a high fidelity, repeatable and isolated experimentation platform for data-center, SDN and security research in computer networks.</p>
			</abstract>
		</profileDesc>
	</teiHeader>
	<text xml:lang="en">
		<body>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="1">Introduction</head><p>Network experimentation is an integral part of Network and Systems research. With new paradigms like Software Defined Networking, networks are becoming more programmable and customizable according to application requirements. Data-center architects and network operators, constantly work on optimizing network topologies and algorithms under various scenarios and to maintain the production network in a steady state <ref type="bibr" target="#b16">[18]</ref>.</p><p>Fidelity and repeatability are two of the essential requirements for any experimentation platform. Additionally, to mimic real-life production network scenarios, flexibility and scalability in emulation of topologies are essential at both the control-plane and data-plane. Unfortunately, none of the available tools can satisfy both fidelity and flexibility in the data-plane.</p><p>In most cases, experiments rely on network emulation tools like Mininet <ref type="bibr" target="#b11">[13]</ref>, NS, etc. These tools allow experimenters to create topologies very quickly on their host machines. However, since they run on the CPU of the machines they are hosted on, the network performance depends on the deployment environment. Hence, it is hard to achieve fidelity and repeatability in the experiments. Additionally, these tools cannot scale to emulate production networks <ref type="bibr" target="#b16">[18,</ref><ref type="bibr" target="#b24">26]</ref>.</p><p>Network testbeds like CloudLab <ref type="bibr" target="#b19">[21]</ref>, DeterLab <ref type="bibr" target="#b17">[19]</ref> provide an environment for network and security experimentation. However, since the network is considered as an infrastructure <ref type="bibr" target="#b0">[1]</ref> and managed using VLANs, experimenters cannot program their network to perform SDNbased experiments.</p><p>In this work, we propose BNV, a network virtualization technique to bridge the gap between production networks and emulation tools by providing the following features:</p><p>Flexible network topology. BNV provides each tenant with their desired topology in a bare-metal fashion (virtualization is done at the switch hardware) while the underlying topology is entirely different. Hence, multiple arbitrary topologies can be provisioned over the hardware switches using BNV as a network hypervisor. Our technique makes emulating large topologies more accessible and cheaper compared to the actual cost of building one. The experimenters can design custom algorithms or protocols to program their allocated network.</p><p>Fidelity. BNV provides consistent performance at hardware line-rate. Such fidelity requirement is essential for network experimentation involving applications whereby the network configurations need fine-tuning for optimal performance and regulatory verification. Isolation and performance guarantee for multiple tenants. BNV allows different tenants or experimenters with different application requirements and topologies to share the same network infrastructure while guaranteeing complete isolation and repeatable performance by implementing buffer and queue management.</p><p>To implement BNV, we address the following challenges: 1. What is the right substrate network for BNV with maximum flexibility and minimum wiring changes? 2. What is the algorithm needed to find the most efficient network embedding? 3. How to implement BNV using existing tools?</p><p>To address (1), we propose a novel topology wiring using loop-back links in switches, to emulate multiple arbitrarily connected virtual switches. To address (2), we formulate the problem as an integer linear programming (ILP) to maximize the scalability of experimental support and fidelity. For (3), we implement BNV over an existing network hypervisor OpenVirteX <ref type="bibr" target="#b5">[7]</ref> and also integrated the platform with a bare-metal provisioning system DeterLab <ref type="bibr" target="#b17">[19]</ref>. We have deployed BNV in a Cyber-Security testbed called National Cybersecurity Lab (NCL) <ref type="bibr">[4]</ref> for over a year for experimenters to run SDN and other experiments.</p><p>Our evaluations have shown that BNV can support high fidelity virtualization of network topologies, and can virtualize networks consisting of more than 100 network devices using only five top-of-rack (ToR) switches, while supporting line-rate for high-performance testing of production workloads.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2">BNV Architecture</head><p>The main component of BNV which differentiates it from other network hypervisors is the one-to-many mapping which virtually slices the switches in the underlying physical infrastructure into multiple arbitrarily connected virtual switches (collection of physical switch ports), without losing the queuing behavior and providing fidelity in mapping. We use the terms physical or substrate topology interchangeably. <ref type="figure" target="#fig_0">Figure 1</ref> shows the architecture of BNV. BNV connects to the SDN switches via OpenFlow. Users submit BNV can create multiple tenants and supports use of any SDN controllers to control slice of the network independently, without interfering with the other tenants co-located on the same physical switch. We explain how BNV performs topology abstraction and flow translation in the following two sub-sections. We present the ILP based embedding of BNV mapper module in section 3.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.1">Topology Abstraction</head><p>In a generic topology, switches are connected to hosts using relatively low-bandwidth links, and other switches (or core-network) using high-bandwidth links. We introduce additional link type to perform topology abstraction.The switches, apart from connecting to hosts or other switches, have special links which are loopback links, i.e., a link between two ports on the same switch. If a switch has X ports, H ports are connected to the hosts, C ports are connected to other switches, and L ports are loop-ports which form L 2 loopback links. The number of loopback links can be pre-configured as shown in <ref type="figure" target="#fig_1">Figure 2</ref>.a or dynamically configured by placing an L2-Switch or circuit switch between the host and the SDN Switch (ToR) as shown in <ref type="figure" target="#fig_1">Figure 2</ref>.b. With this configuration, we can dynamically configure the number of ports allocated to host and loopback at run-time through VLAN or circuit switch reconfiguration.</p><p>With the loopback links any two connected virtual switches can map to a single physical switch using the loopback link as their inter-switch link. Consider a substrate network as in <ref type="figure" target="#fig_2">Figure 3</ref>. The hosts are connected to the switches using 1Gbps links, and the inter-switch link has a bandwidth of 10Gbps. The virtual topology to be implemented is a triangular network (3 switches and 3 hosts) with 1Gbps links. The virtual topology mapping to the substrate is shown in <ref type="figure" target="#fig_2">Figure 3</ref> where the links vL1 and vL2 are mapped to the CLink1, which is a backbone link in substrate network. vL3 in the virtual topology is mapped to the substrate network using loopLink1. Loopback links provide flexibility in abstraction while maintain the fidelity of the virtual links.  </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.2">Flow Translation</head><p>BNV performs flow-table translations to provide flowspace and dataplane isolation for virtualizing multiplelinks to support arbitrary topologies. Packet tagging and metering are used to achieve topology virtualization.</p><p>We maintain the virtual link information encoded in the packet header. We call it lTag for simplicity.</p><p>Refering to the virtual topology in <ref type="figure" target="#fig_2">Figure 3</ref> with three links vL1, vL2 and vL3, the corresponding lTags being 1,2 and 3, We have two scenarios for mapping of the virtual links:</p><p>Case 1: Two connected virtual switches maps to different physical switches with a (in)direct link. (Example : vL1) In that case, any packet that travels vL1 is tagged with lTag 1 on the outgoing port of CLink1. Similarly, Flows are translated to attach the lTag in the match based on which virtual switch and virtual port the flowmod is meant for. Also, a drop-meter m is created to rate-limit the flows to the max-rate of 1G as in the virtual topology. For instance, assume a tenant adds a flow entry {in port : 1, ip dest : x.x.x.x, actions = out put : 2} to vS1 for routing a packet via link vL1. The translated flowmod is {in port : 1, ip dest : x.x.x.x, actions = meter : 1, lTag : 1, out put : 2}.</p><p>Case 2: Two connected virtual switches maps to the same physical switches (vL3). Consider a FlowMod to enable ip-destination based forwarding from H1 to H2 are below: vS1 : {in port : 1, ip dest : y.y.y.y, actions = out put : 3} vS2 : {in port : 2, ip dest : y.y.y.y, actions = out put : 1}</p><p>Loopback link: LoopLink1 emulates vL3. The FlowMods that were pushed earlier can be implemented by performing the translation of the output ports to physical ports, and adding the appropriate lTag in the physical topology as in <ref type="table" target="#tab_0">Table 1</ref>. Typically Loopback links can be dedicated to a single tenant and they can naturally emulate inter-switch links.</p><p>Metering: We employ two kinds of data-plane isolation using meters: 1. Shared links (cLink1): When multiple virtual links share a single physical link, they share the same queues. We mitigate the interference by restricting a single virtual link from exhausting the port buffers by partitioning the maximum burst size of a physical link (measured using techniques in <ref type="bibr" target="#b13">[15]</ref>) to multiple virtual links. 2. Shared Switches (pSwitch1): When a single physical switch is sliced into multiple virtual switches, it's important to slice the buffer such that the virtual switches do not run out of buffer. In this case, we apply a meter to the flows from all ports of a virtual switch. We explain the implications and observations of metering in Section 4.3.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3">BNV Mapper</head><p>In this section, we present the formulation of the network embedder (BNV Mapper) as an ILP to maximize the fidelity of the embedding of the virtual topology and to minimize the overheads. The (user) input to the BNV Mapper is the virtual network topology that consists of a set of : 1) hosts V , 2) (virtual) switches S and 3) (virtual) links L. Each link is bi-directional and has a required bandwidth b. A link can be associated with either (1) two switches (corelink L c ) or (2) a switch and a host (hostlink L h ). The user input is next converted into a form where the switches are broken down into (1) Core-link. A link between two switches is represented as a link between two switch-ports. (2) Host-link. A link between a switch-port and a host. In this way, each switch s can be represented as a set of switch-links or host-links. For a link that is associated with a switch, the required TCAM size t(s) can be specified.</p><p>The physical topology consists of a set of: 1) physical server machines H, 2) physical switches R and 3) physical links Q. Similar to the virtual topology, Q can be categorized into corelinks Q c and hostlinks Q h . The available bandwidth of a link i is represented as B i . Note that, Q c comprises of both loopback links and backbone links (links between the switches).</p><p>We define a binary decision variable x iv , which is set to one if a virtual corelink i is mapped to the physical corelink v, and zero otherwise. Similarly, y jw , which indicates if a virtual hostlink j is mapped to a physical hostlink w. Mapping of hostlink automatically implies mapping of virtual host to physical server. The objective function is given below by Equation (1 Figure 4: Allocation for big-switch abstraction</p><p>The objective function has two terms. The first term represents the amount of resources to support mapping of corelinks (x iv b i ) and the second term represents the resources needed to map a single virtual switch over multiple physical switches (M m pq ). The overall goal is to minimize the usage of substrate backbone (core) links, since these links are (generally) under-provisioned relative to the hostlinks. This indirectly maximizes the usage of loopback links which provide higher fidelity in emulation. The constraints are:</p><formula xml:id="formula_0">∑ v∈Q c x iv = 1, ∀i ∈ L c<label>(2)</label></formula><formula xml:id="formula_1">∑ w∈Q h y jw = 1, ∀ j ∈ L h<label>(3)</label></formula><formula xml:id="formula_2">∑ v∈Q h y jv b j ≤ B v , ∀ j ∈ L h<label>(4)</label></formula><formula xml:id="formula_3">∑ v∈Q h y jv c j ≤ C v , ∀ j ∈ L h<label>(5)</label></formula><formula xml:id="formula_4">∑ i∈L c ∑ v∈Q r c x iv t(i) + ∑ j∈L h ∑ w∈Q r h y jw t( j) ≤ N r , ∀r ∈ R (6) z mn = ∑ v∈Q c x iv b i + ∑ w∈Q h y jw b j , ∀i ∈ L m c , j ∈ L m h , m ∈ S, n ∈ R<label>(7)</label></formula><p>M m pq = min(z mp .z mq ), ∀m ∈ S, {p, q} ∈ R</p><formula xml:id="formula_5">∑ v∈Q c x iv b i + M m p v q v ≤ B v , ∀i ∈ L c , ∀m ∈ S, v ∈ Y, {p v , q v } ∈ R<label>(8)</label></formula><p>Constraint (2) and (3) mandates each virtual corelink to be mapped to only one substrate corelink and similarly for hostlinks. Constraint (4) ensures that each physical hostlink is provisioned within it's capacity. Constraint (5) ensures that the physical host is not allocated beyond it's core capacity. The notation uses hostlink instead of host, however, in the model hostlink is synonymous to host. Also, Constraint (4) and (5) are needed only for VM-based provisioning like OpenStack. They are not needed for bare-metal provisioning methods since each virtual host is allocated an entire server blade. Constraint (6) makes sure we do not exceed the TCAM capacity bounds of the switch. TCAM specified for every virtual switch is split equally among it's corelinks and hostlinks for simplicity in allocation. Big-Switch Abstraction. Constraint <ref type="formula" target="#formula_4">(7)</ref> defines a variable z m,n which depicts the total bandwidth of virtual links of virtual switch m that are mapped to physical switch n. Constraint (8) creates a R x R matrix for each virtual switch indicating the amount of intra-switch bandwidth between two physical switches mapped to a single virtual switch. It allocates the minimum link bandwidth generated by each physical switch for a given pair of physical switches mapping to same big virtual switch. <ref type="figure">Figure 4</ref> illustrates an example of the embedding of a virtual switch with 5 hosts onto three substrate switches each mapping a different number of hosts. In <ref type="figure">Figure 4</ref>, each virtual switch is associated with a table containing the bandwdith to be limited for traffic to a particular set of hosts belonging to a physical switch. Finally, Constraint (9) makes sure the physical corelinks are provisioned within their capacity accounting both inter-switch links and intra-switch link utilization.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4">Testbed Implementation and Evaluation</head><p>We have implemented BNV over OpenVirtex [7] using OpenFlow 1.3. We have also integrated BNV with DeterLab <ref type="bibr" target="#b17">[19]</ref> which provides bare-metal provisioning. We use Gurobi <ref type="bibr" target="#b2">[3]</ref> as the ILP solver. The users submit their topology as a NS file 1 . The SDN switches are specified by defining the switch-type as "ofswitch".</p><p>BNV is deployed and currently functional on the production testbed of the National Cybersecurity Lab 2 for a year to provision SDN-based experiments with arbitrary topologies. The experimenters can completely use the functionalities supported by OpenFlow 1.3 (Meters, groups, etc.), and can develop and use custom network applications (BGP, congestion control, etc.). The network testbed layout is shown in <ref type="figure" target="#fig_3">Figure 5</ref>. The testbed has four HP3800 SDN Switches, each connecting to a cluster of 24 Lenovo X3550 servers. The SDN switches are connected using a core-switch which is used only for L2 connectivity. The server blades are also connected to a control-switch, which is used for out-of-band management (IPMI, PXE booting). Each SDN switch has 12 loopback links and 1 10G uplink to the core-switch. Each loopback link is formed by connecting two ports using a short cable. <ref type="figure">Figure 6</ref> shows the testbed with the static loopback wiring of 12 links per switch. We additionally perform software-configurable loopback for one cluster in our staging platform. In the following sub-sections we evaluate BNV's fidelity, isolation and embedding capabilities.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.1">Performance Fidelity</head><p>In this section, we evaluate the fidelity of the virtual topology created by BNV by making use of one-to-many abstraction and many-to-one abstraction. The evaluation considers variations of two topologies: (1) a star topology with 1 switch and 16 hosts <ref type="figure" target="#fig_4">(Figure 7</ref>(a) and <ref type="figure" target="#fig_4">Figure  7</ref>(b)) and (2) a Clos topology with 4 switches and 16 hosts <ref type="figure" target="#fig_4">(Figure 7</ref>(c) and <ref type="figure" target="#fig_4">Figure 7(d)</ref>). We change the physical wiring of the testbed to implement the physical clos topology.</p><p>We run an Apache Spark application (wordcount on a 50GB file) on all 4 topologies and we plot the CDFs of shuffle read times on the four topologies in <ref type="figure">Figure 8</ref>.</p><p>We observe that the CDFs of the physical and virtual networks are very similar. The use of loopback links ( </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.2">Topology Flexibility</head><p>Recent works on topology convertibility <ref type="bibr" target="#b26">[28]</ref> demonstrate tangible gains in network performance by changing the network topology dynamically. BNV can leverage its inherent ability to map arbitrary network topology to allow researchers to experiment with different topologies quickly. This makes it possible to perform fine-grain optimization of topology for a work-load and ability to emulate traffic patterns reliably in a topology. BNV can virtualize the network to support various topologies like FatTree <ref type="bibr" target="#b4">[6]</ref>, Clos, JellyFish <ref type="bibr" target="#b23">[25]</ref>, Hyper-X etc in a matter of a few seconds. We illustrate how a FatTree is mapped on to substrate topology in <ref type="figure">Figure 9</ref>.</p><p>We create four experiments with various topologies: Binary Tree (16 hosts, 15 switches), Star (16 hosts, 1 switch), FatTree with degree 4 (16 hosts, 20 switches), and JellyFish <ref type="bibr" target="#b23">[25]</ref>(16 hosts, 20 switches) and perform a wordcount application for a 50GB file in Apache Spark. We use custom partitioning in order to increase the interrack traffic. We perform 10 runs and plot the average shuffle read time for the four topologies in <ref type="figure" target="#fig_0">Figure 10</ref>.</p><p>We observe that tree topology has the longest shuffle read time due to its very limited bisection bandwidth. The star finishes fastest since it has full bisection bandwidth. FatTree and JellyFish perform somewhere in between as expected. ECMP <ref type="bibr" target="#b12">[14]</ref> was used to split the traffic equally based on link utilization calculated at the controller in the case of FatTree and JellyFish. Now, taking a closer look at only two topologies: FatTree and JellyFish. FatTree and Jellyfish observe really close shuffle time. On an average, the shuffle time in JellyFish is about 7-8% lower. This is due to high interrack traffic. Then we vary the data placement in Spark to increase the intra-pod locality. We plot the CDF of the shuffle read times in <ref type="figure" target="#fig_0">Figure 11</ref> for FatTree and Jellyfish. Interestingly, we observe an increased shuffle time (∼7.5%) in case of JellyFish compared to FatTree. To summarize our observation, JellyFish performs much better than FatTree when there are lot of inter-rack network traffic and FatTree performs better than JellyFish when there are lot of intra-rack exchanges. This performance behaviour observed is consistent with the observations made by recent work on convertible topologies <ref type="bibr" target="#b26">[28]</ref>. Thus, BNV can achieve fidelity and flexibility in terms of its topology implementation.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.3">Isolation</head><p>We spawn three experiments on BNV with the following topologies: 1) Expt-1: FatTree4 (16 hosts and 20 switches) running wordcount of 1GB file using Spark continuously with heavy inter-rack traffic, 2) Expt-2: JellyFish (random topology) topology with 16 hosts and 20 switches running iperf among all pairs and 3) Expt-3: Random topology using up the rest of the available switch-ports(8) and hosts(8) running ping between the pair of nodes with the longest hop-count. Initially, all experiments are idle with applications not running. The experimentation scenario is as follows : 1) Between 0-60 minutes, we run the application on each of the experiments for 20 minutes without interference. 2) Between 60-80 minutes (shaded region), all three applications are run in parallel. 3) We repeat step (1) between 80-140 minutes.</p><p>We present the findings in <ref type="figure" target="#fig_0">Figure 12</ref>, where we plot different performance metrics such as average shuffle time for expt-1(top), aggregate throughput for expt-2(middle) and ping latency for expt-3(bottom). The shaded region (comprising 20 minutes) represents the portion of time the experiments were run in parallel, and the non-shaded regions depict the performance for individual runs. Observe that the applications see no perceivable difference in performance when the other experiments which share the same switches and backbone links are run.</p><p>Buffer partition: When two tenants share a physical link (typically backbone links), a burst of traffic from a single tenant could fill up the buffers and TX Queue, thus impacting the other tenants. Fortunately, we can achieve an approximate buffer partition by allocating the maximum burst for a particular virtual link or set of ports (using OpenFlow meters) during provisioning by considering the switch-port buffer-size to be one of the constraints in the BNV mapper. In the following, we perform two experiments to measure the impact of bursty traffic.</p><p>Bursty transmission on a specific output port does not affect the traffic on other switch-ports: We perform an experiment with two tenants allocated different slices of the same switch: one tenant performing UDP bursts (sending at the maximum rate) of 11 hosts to 1 host, and the other generating a TCP traffic at line-rate on hosts running over two other ports. In <ref type="figure" target="#fig_0">Figure 13</ref>, the shaded region is the period where the UDP bursts occur. Clearly, the UDP traffic has no impact on the TCP traffic due to the buffer isolation provided. Although switch architectures <ref type="bibr" target="#b3">[5,</ref><ref type="bibr" target="#b9">11]</ref> perform buffer isolation inherently, in order to be generic and not rely on specific switch architectures, we allocate a burst-rate for all the ports belonging to each virtual switch, and apply the same meter to all the flows belonging to the virtual switch's ports. In this way, we guarantee that the amount of buffer used by a single (or a set of) flow(s) is bounded. Although, this implies that the switch-buffer may be under-utilized in certain circumstances, we reckon that this measure is necessary to guarantee isolation, fidelity and repeatability of experiments.</p><p>Burst transmission on shared ports (and links) minimally affects the traffic: We perform an experiment, where the backbone link is shared by two virtual links (either same or different tenants). vlink1 is allocated 1/10th of the bandwidth of the physical link, and the rest of the bandwidth is allocated to virtual-link2. We transmit TCP flow on virtual-link1 and 10 different UDP flows on vlink2 to saturate the physical link. We observe the impact of UDP traffic-bursts of vlink2 on vlink1. The results are shown in <ref type="figure" target="#fig_0">Figure 14</ref>. We can observe that the TCP throughput is not affected even during the presence of burst transmission. This is primarily because we limit the maximum burst per port. At the 180 th second, we turn off metering-based isolation. We notice that the TCP flow on vlink1 is completely starved due to bursty UDP flows on vlink2 in the absence of burst/ rate limiting.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.4">Network Mapping Simulation</head><p>In this section, we evaluate through simulation the network embedding efficiency of BNV by considering a network consisting of 5 switches consisting of 48 down-link ports (1G each) of which, 24 ports to be connected to physical servers, and the 24 remaining ports are used form loopback links (12 loopback links per switch).</p><p>We embed random topologies with increasing number of switches and links to the physical topology. We consider two sets of random topologies with a fixed number n.sqrt(n) Links (no loops) n.sqrt(n) Links (loops) 2n Links (no loops) 2n Links (loops) <ref type="figure" target="#fig_0">Figure 15</ref>: Mapping of Random Topologies of n switches: 1) Number of links = 2n and, 2) Number of links = n √ n. We perform the network mapping with 10 set of topologies for each size of random topology. We plot the percentage of backbone link's bandwidth utilization against the topology size (number of switches) in <ref type="figure" target="#fig_0">Figure 15</ref>. For topologies with 2n links, the gain is clearly evident, as we are able to fit bigger topologies (up to 130 nodes and 260 links) using loopback links compared to only 60 nodes (and 120 links) and without loopback links, leading to approximately 2× gain. Similarly, for topologies with n √ n links, we are able to fit topologies with 40 switches (252 links) with loopback links, compared to 25 switches (125 links) leading to 2× gain. Additionally, we embedded topologies from Topology Zoo <ref type="bibr" target="#b14">[16]</ref> and observed successful mapping for 96.5% of topologies.</p><p>Take-away: BNV can emulate a network topology with high fidelity and repeatability by maintaining the key characteristics of each topology while guaranteeing isolation for each experiment. BNV Mapper can embed a large collection of topology efficiently. The addition of loopback links increases the scalability significantly.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5">Related Work</head><p>Network Hypervisors: Network hypervisors like FlowVisor <ref type="bibr" target="#b22">[24]</ref>, OpenVirteX <ref type="bibr" target="#b5">[7]</ref> and FSFW <ref type="bibr" target="#b1">[2]</ref> are used in major testbeds like GENI <ref type="bibr" target="#b7">[9]</ref>. However, these works can only provide either the corresponding physical topology or a subset of it. <ref type="bibr" target="#b21">[23]</ref> explains ways to provide SDN experimentation in testbeds. However, supporting embedding of arbitrary network topologies is not explored by existing hypervisors or testbeds.</p><p>Switch Abstractions: NVP[17] performs network virtualization using virtual switches in the hypervisor. Since, it is based on hypervisor, it is hard to produce arbitrary topologies using software switches due to packet processing CPU overhead at the VMs or servers. Trellis <ref type="bibr" target="#b8">[10]</ref>, VINI <ref type="bibr" target="#b6">[8]</ref> propose creation of arbitrary network topologies using containerization and tunnel abstractions. However, they cannot achieve line-rate needed for heavy workload testing. Similarly, Mininet <ref type="bibr" target="#b11">[13]</ref> and Maxinet <ref type="bibr" target="#b25">[27]</ref> are popular network emulation tools used to construct SDN-based virtual topologies on server/clusters. These are excellent tools for functional testing, however they cannot scale to emulate large networks carrying traffic at line-rate. CrystalNet <ref type="bibr" target="#b16">[18]</ref> provides an extensible testing environment to mimic production networks using a large number of virtual machines from public cloud infrastructures. However, it does not claim fidelity of network dataplane. BNV can bridge this gap by providing fidelity of the network data plane. Recently, MiniReal <ref type="bibr" target="#b24">[26]</ref> has proposed an approach to achieve multi-switch abstraction using a single bare-metal switch by modifying the software of the switches and also loopback link. BNV is different in that it performs virtualization functioning as a network hypervisor and does not need to modify the switch software. Additionally, it can dynamically modify topologies at run-time, while providing repeatable performance.</p><p>Network Embedders: There exists a variety of virtual network embedding techniques <ref type="bibr" target="#b10">[12,</ref><ref type="bibr" target="#b20">22]</ref>. Other experimental setups like DeterLab <ref type="bibr" target="#b17">[19]</ref> use Assign <ref type="bibr" target="#b18">[20]</ref>. Assign <ref type="bibr" target="#b18">[20]</ref> uses simulated annealing to get an embedding for a particular network topology. BNV Mapper, since it tries to embed arbitrary topologies, needs exact port mapping. Additionally, BNV Mapper has a different objective from the works in <ref type="bibr" target="#b10">[12]</ref> to reduce the burden on the backbone links, and use loopback links instead.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="6">Conclusion</head><p>We developed BNV (Bare-metal Network Virtualization), which provides high-fidelity network experimentation at data-plane and control-plane using programmable switches. BNV can support arbitrary network topologies using a unique method of creating loopbacks in switches in order to provide high fidelity. We propose an ILPbased formulation for efficient embedding of complex topologies to the substrate. We have built BNV on top of OpenVirtex, and deployed on a production testbed. BNV accurately emulates the characteristics of the topologies implemented over the substrate network while isolating multiple experiments.</p></div><figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_0"><head>Figure 1 :</head><label>1</label><figDesc>Figure 1: BNV System Overview</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_1"><head>Figure 2 :</head><label>2</label><figDesc>Figure 2: Loopback Configuration in Network</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_2"><head>Figure 3 :</head><label>3</label><figDesc>Figure 3: Mapping of Virtual Topology with Loopbacks</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_3"><head>Figure 5 :</head><label>5</label><figDesc>Figure 5: BNV testbed setup environment</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_4"><head>Figure 7 :</head><label>7</label><figDesc>Figure 6: Loopbacks in Switches</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_5"><head>Figure 7 (Figure 8 :</head><label>78</label><figDesc>Figure 8: Performance comparison on emulation</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_6"><head>Figure 11 :</head><label>11</label><figDesc>Figure 10: Apache Spark performance over various Topologies generated using BNV</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_7"><head>Figure 12 :Figure 13 :</head><label>1213</label><figDesc>Figure 12: Concurrent experiments to check isolation</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_8"><head>Figure 14 :</head><label>14</label><figDesc>Figure 14: Observation of TCP traffic completely unaffected by UDP bursts in the same egress (shared)ports.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_0" validated="true"><head>Table 1 : Flow Translation using loopback link</head><label>1</label><figDesc></figDesc><table>Entity 
FlowMod added to Switch 

vS1 
pSwitch1 : {in port=1,ip dest:y.y.y.y, 
actions=meter:1,lTag:2,output:3} 

vS2 
pSwitch1 : {in port=4,ip dest:y.y.y.y,lTag:2, 
actions=RemoveLTag,output:2} 

</table></figure>

			<note place="foot" n="1"> Refer https://ncl.sg/bnvirtusage.pdf 2 https://ncl.sg</note>
		</body>
		<back>

			<div type="acknowledgement">
			</div>

			<div type="references">

				<listBibl>

<biblStruct xml:id="b0">
	<monogr>
		<title/>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Cloudlab</surname></persName>
		</author>
		<ptr target="http://docs.cloudlab.us/planned.html" />
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b1">
	<monogr>
		<title/>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Flowspace</forename><surname>Firewall</surname></persName>
		</author>
		<ptr target="http://globalnoc.iu.edu/sdn/fsfw.htm" />
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b2">
	<monogr>
		<title/>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Gurobi</surname></persName>
		</author>
		<ptr target="http://www.gurobi.com/" />
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b3">
	<analytic>
		<title/>
	</analytic>
	<monogr>
		<title level="j">Intel Ethernet Switch Family Memory Efficiency. White Paper</title>
		<imprint>
			<date type="published" when="2009" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b4">
	<monogr>
		<title level="m" type="main">A scalable, commodity data center network architecture</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Al-Fares</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Loukissas</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Vahdat</surname></persName>
		</author>
		<editor>SIG-COMM</editor>
		<imprint>
			<date type="published" when="2008" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b5">
	<monogr>
		<title level="m" type="main">Openvirtex: Make your virtual sdns programmable</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Al-Shabibi</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>De Leenheer</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Gerola</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Koshibe</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">G</forename><surname>Parulkar</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">E</forename><surname>Salvadori</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">B</forename><surname>Snow</surname></persName>
		</author>
		<editor>HotSDN</editor>
		<imprint>
			<date type="published" when="2014" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b6">
	<analytic>
		<title level="a" type="main">In vini veritas: Realistic and controlled network experimentation</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Bavier</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">N</forename><surname>Feamster</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Huang</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">L</forename><surname>Peterson</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Rexford</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">SIGCOMM</title>
		<imprint>
			<date type="published" when="2006" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b7">
	<monogr>
		<title level="m" type="main">GENI: A federated testbed for innovative network experiments</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Berman</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><forename type="middle">S</forename><surname>Chase</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">L</forename><surname>Landweber</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Nakao</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Ott</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Raychaudhuri</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Ricci</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">I</forename><surname>Seskar</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2014" />
			<publisher>Computer Networks</publisher>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b8">
	<monogr>
		<title level="m" type="main">Trellis: A platform for building flexible</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Bhatia</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2008" />
		</imprint>
	</monogr>
	<note>fast virtual networks on commodity hardware. CoNEXT</note>
</biblStruct>

<biblStruct xml:id="b9">
	<monogr>
		<title level="m" type="main">Broadcom smart-buffer technology</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Das</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2012" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b10">
	<analytic>
		<title level="a" type="main">Virtual network embedding: A survey</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Fischer</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><forename type="middle">F</forename><surname>Botero</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><forename type="middle">T</forename><surname>Beck</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">H</forename><surname>De Meer</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">X</forename><surname>Hesselbach</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE Communications Surveys Tutorials</title>
		<imprint>
			<date type="published" when="2013" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b11">
	<analytic>
		<title level="a" type="main">Reproducible network experiments using container-based emulation</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">N</forename><surname>Handigol</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">B</forename><surname>Heller</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">V</forename><surname>Jeyakumar</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">B</forename><surname>Lantz</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">N</forename><surname>Mckeown</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">CoNEXT</title>
		<imprint>
			<date type="published" when="2012" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b12">
	<monogr>
		<title level="m" type="main">Analysis of an equal-cost multi-path algorithm</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><surname>Hopps</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2000" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b13">
	<analytic>
		<title level="a" type="main">Netest: a tool to measure the maximum burst size, available bandwidth and achievable throughput</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">G</forename><surname>Jin</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">B</forename><surname>Tierney</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">ITRE</title>
		<imprint>
			<date type="published" when="2003" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b14">
	<analytic>
		<title level="a" type="main">The internet topology zoo</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Knight</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">H</forename><forename type="middle">X</forename><surname>Nguyen</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">N</forename><surname>Falkner</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Bowden</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Roughan</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE Journal on Selected Areas in Communications</title>
		<imprint>
			<date type="published" when="2011" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b15">
	<analytic>
		<title level="a" type="main">Network virtualization in multi-tenant datacenters</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><surname>Koponen</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">NSDI</title>
		<imprint>
			<date type="published" when="2014" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b16">
	<analytic>
		<title level="a" type="main">Crystalnet: Faithfully emulating large production networks</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">H</forename><surname>Liu</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">SOSP</title>
		<imprint>
			<date type="published" when="2017" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b17">
	<analytic>
		<title level="a" type="main">The deter project: Advancing the science of cyber security experimentation and test</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Mirkovic</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><forename type="middle">V</forename><surname>Benzel</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><surname>Faber</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Braden</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><forename type="middle">T</forename><surname>Wroclawski</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Schwab</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">IEEE HST</title>
		<imprint>
			<date type="published" when="2010" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b18">
	<analytic>
		<title level="a" type="main">A solver for the network testbed mapping problem</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Ricci</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><surname>Alfeld</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Lepreau</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">SIGCOMM CCR</title>
		<imprint>
			<date type="published" when="2003" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b19">
	<monogr>
		<title level="m" type="main">Introducing CloudLab: Scientific infrastructure for advancing cloud architectures and applications. ;login</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Ricci</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">E</forename><forename type="middle">E</forename><surname>Eide</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2014" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b20">
	<monogr>
				<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Riggio</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">F</forename><forename type="middle">D</forename><surname>Pellegrini</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">E</forename><surname>Salvadori</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Gerola</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><forename type="middle">D</forename><surname>Corin</surname></persName>
		</author>
		<title level="m">Progressive virtual topology embedding in openflow networks. 2013 IFIP/IEEE IM</title>
		<imprint>
			<date type="published" when="2013" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b21">
	<monogr>
		<title level="m" type="main">Enabling sdn experimentation in network testbeds</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>S R</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Mikovic</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><forename type="middle">G</forename><surname>Kannan</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><surname>Mun Choon</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">K</forename><surname>Sklower</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2017" />
			<publisher>SDN-NFVSec</publisher>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b22">
	<monogr>
		<title level="m" type="main">Can the production network be the testbed? In OSDI</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Sherwood</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">G</forename><surname>Gibb</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">K</forename><surname>Yap</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">G</forename><surname>Appenzeller</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Casado</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">N</forename><surname>Mckeown</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">G</forename><surname>Parulkar</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2010" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b23">
	<analytic>
		<title level="a" type="main">Jellyfish: Networking data centers randomly</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Singla</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C.-Y.</forename><surname>Hong</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">L</forename><surname>Popa</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><forename type="middle">B</forename><surname>Godfrey</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">NSDI</title>
		<imprint>
			<date type="published" when="2012" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b24">
	<analytic>
		<title level="a" type="main">Minireal: A real sdn network testbed built over an sdn bare metal commodity switch</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><forename type="middle">Y</forename><surname>Wang</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">I</forename><forename type="middle">Y</forename><surname>Lee</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">ICC</title>
		<imprint>
			<date type="published" when="2017" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b25">
	<analytic>
		<title level="a" type="main">Maxinet: Distributed emulation of software-defined networks</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><surname>Wette</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Drxler</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Schwabe</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">IFIP Networking</title>
		<imprint>
			<date type="published" when="2014" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b26">
	<analytic>
		<title level="a" type="main">A tale of two topologies: Exploring convertible data center network architectures with flat-tree</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Y</forename><surname>Xia</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">X</forename><forename type="middle">S</forename><surname>Sun</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Dzinamarira</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">X</forename><forename type="middle">S</forename><surname>Wu</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><forename type="middle">E</forename><surname>Huang</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Ng</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">ACM SIGCOMM</title>
		<imprint>
			<date type="published" when="2017" />
		</imprint>
	</monogr>
</biblStruct>

				</listBibl>
			</div>
		</back>
	</text>
</TEI>
