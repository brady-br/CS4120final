<?xml version="1.0" encoding="UTF-8"?>
<TEI xmlns="http://www.tei-c.org/ns/1.0" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
xsi:schemaLocation="http://www.tei-c.org/ns/1.0 /Users/atharsefid/Desktop/grobid-0.5.3/grobid-home/schemas/xsd/Grobid.xsd"
 xmlns:xlink="http://www.w3.org/1999/xlink">
	<teiHeader xml:lang="en">
		<encodingDesc>
			<appInfo>
				<application version="0.5.3" ident="GROBID" when="2020-09-29T02:54+0000">
					<ref target="https://github.com/kermitt2/grobid">GROBID - A machine learning software for extracting information from scholarly documents</ref>
				</application>
			</appInfo>
		</encodingDesc>
		<fileDesc>
			<titleStmt>
				<title level="a" type="main">Supporting Distributed Execution of Smartphone Workloads on Loosely Coupled Heterogeneous Processors</title>
			</titleStmt>
			<publicationStmt>
				<publisher/>
				<availability status="unknown"><licence/></availability>
			</publicationStmt>
			<sourceDesc>
				<biblStruct>
					<analytic>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Felix</forename><forename type="middle">Xiaozhu</forename><surname>Lin</surname></persName>
							<affiliation key="aff0">
								<orgName type="institution">Rice University</orgName>
							</affiliation>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Zhen</forename><surname>Wang</surname></persName>
							<affiliation key="aff0">
								<orgName type="institution">Rice University</orgName>
							</affiliation>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Lin</forename><surname>Zhong</surname></persName>
							<affiliation key="aff0">
								<orgName type="institution">Rice University</orgName>
							</affiliation>
						</author>
						<title level="a" type="main">Supporting Distributed Execution of Smartphone Workloads on Loosely Coupled Heterogeneous Processors</title>
					</analytic>
					<monogr>
						<imprint>
							<date/>
						</imprint>
					</monogr>
				</biblStruct>
			</sourceDesc>
		</fileDesc>
		<profileDesc>
			<abstract>
				<p>Modern smartphones are embracing asymmetric, loosely coupled processors that have drastically different performance power tradeoffs. To exploit such architecture for energy proportionality, both application and OS workloads need to be distributed. We propose Kage, a combination of runtime and OS support, to replicate application execution and OS functions over asymmetric processors. Kage selectively creates replicas of application and OS services and maintains state consistency for them with low overhead. By doing so, it is able to reduce processor energy consumption of light-loaded smartphones manyfold. While enabling energy-proportionality, Kage simplifies application programming by providing the illusion of a single system image and per-process address spaces.</p>
			</abstract>
		</profileDesc>
	</teiHeader>
	<text xml:lang="en">
		<body>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="1.">Introduction</head><p>Mobile systems, most notably smartphones, are seeing a great variety of workloads, from intensive ones, e.g., web browsing and gaming, to light ones, e.g., receiving instant messages. At the same time, users expect their smartphones to deliver high performance for intensive workloads while consuming low energy for light workloads. This essentially calls for energy-proportionality: scale down energy consumption at the same rate as workloads scale down. Today, mobile systems are embracing asymmetric processors with different performance-power tradeoffs, in hopes of executing any given workload on a processor that has the best tradeoff while keeping all other processors in a low-power state. As an example scenario, the system could periodically fetch emails with its low-power (small) processors while supporting interactive email composition with its highperformance (big) ones.</p><p>The key characteristic of such an asymmetric architecture is how processors are coupled, i.e., the presence or absence of hardware cache-coherence. Tightly coupled processors share a unified, coherent address space backed up by hardware, e.g., ARM big.LITTLE <ref type="bibr" target="#b4">[5]</ref> and NVIDIA Tegra 3 <ref type="bibr" target="#b11">[13]</ref>. The unified coherence mechanism restricts asymmetry among processors and therefore limits the energy-proportionality resulted from the asymmetry. In addition, tightly coupled processors are likely to be co-located on chip and therefore experience similar thermal constraint.</p><p>In contrast, loose coupling offers better energyproportionality for a wider range of workloads. Systemon-Chip (SoC) examples include TI OMAP4 <ref type="bibr" target="#b14">[16]</ref>, OMAP5 <ref type="bibr">[17]</ref>, and Samsung Exyons <ref type="bibr" target="#b13">[15]</ref>. The authors are also aware of smartphones that employ 16-bit microcontrollers to deal with sensor data processing on behalf of the main SoC. Without hardware coherence, processors are allowed to be highly asymmetric, where performance and power consumption may differ by orders of magnitude. For instance, on OMAP4 <ref type="bibr" target="#b14">[16]</ref> as illustrated in <ref type="figure" target="#fig_0">Figure 1</ref>, the clock rates of loosely coupled Cortex-A9 and Cortex-M3 differ by ~4x, much higher than the tight coupling case, e.g., up to 1.7x in big.LITTLE <ref type="bibr" target="#b4">[5]</ref>. Although attractive, loosely coupled processors poses serious programming challenges to the entire mobile software stack because program state in both user and OS code becomes distributed and potentially inconsistent. In this paper, we use the term OS to refer to software infrastructure that supports the execution of user code.</p><p>Targeting energy-proportionality, we seek to support a broad range of smartphone workloads over loosely  </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>System Bus</head><p>coupled processors. In particular, our system must adapt to two major characteristics of smartphone workloads: (i) high temporal variation, i.e., workloads with time-varying computational demands and (ii) wide spatial distribution, in particular, the use of diverse OS functions.</p><p>To achieve the goals above, we propose Kage, a suite of runtime and OS support. Kage distributes both application and OS workloads over loosely coupled processors, while presenting a single system image and per-process unified address spaces to applications.</p><p>Kage greatly improves system energy-proportionality. Estimated based on our observations of smartphone CPU usage and clock rates, any workloads using less than 12% of a Cortex-A9 core of OMAP4 SoC, can be executed on a single Cortex-M3 core without overrunning the maximum instruction throughput. By enabling this, Kage reduces the processor energy consumption of such light workloads by four times. Note that this estimation is conservative: we only considered workloads that can be executed on Cortex-M3 at its lowest possible clock rate and ignored energy savings from its other clock rates.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.">Related Work</head><p>Hardware heterogeneity is widely used for energyproportionality. Heterogeneous processors may be tightly coupled <ref type="bibr" target="#b4">[5,</ref><ref type="bibr" target="#b7">8,</ref><ref type="bibr" target="#b11">13]</ref>, which eases programming but limits energy saving. Alternatively, loosely coupled heterogeneous processors offer much higher efficiency, but directly programming them is difficult due to separate address spaces and separate system images <ref type="bibr" target="#b0">[1,</ref><ref type="bibr" target="#b6">7,</ref><ref type="bibr" target="#b12">14]</ref>.</p><p>Function replication is common in distributed systems, usually for the sake of scalability. Back in the 1980s, the V distributed system <ref type="bibr" target="#b3">[4]</ref> replicates OS functions among a group of homogeneous workstations, by implementing software distributed shared memory (DSM) below the OS. More recently, factored OS (fos) <ref type="bibr" target="#b15">[18]</ref> parallelizes individual OS services over multiple cores with explicit message passing. Although inspiring, they do not account for architectural asymmetry, processor power state changes, or legacy OS code, the major challenges we face on smartphones.</p><p>Aiming at performance or isolation, many heterogeneous systems split their functions into complementary partitions and pin such partitions on different processors <ref type="bibr" target="#b1">[2,</ref><ref type="bibr" target="#b9">11]</ref>. However, under highly time-varying workloads, partitioned but not replicated functions can easily become either performance or energy-efficiency bottleneck. In multicore systems, device virtualization <ref type="bibr" target="#b2">[3]</ref> supports distributing OS workloads, by allowing multiple instances of the same OS service (e.g., network stack) to execute concurrently. However, without sharing state, these instances do not collaboratively provide a single system image, making it difficult for an application to span across processors.</p><p>We have built Reflex [9], a system that supports executing simple, periodic tasks on low-power processors and keeps distributed application state consistent. Such user tasks can be pinned on low-power processors due to their low temporal variation; besides, systematic replication of OS functions is unnecessary in Reflex since these tasks only access a few OS functions. In building Kage, we leverage our experiences with Reflex to explicitly treat both temporal variation and spatial distribution that exist in a much broader range of workloads.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.">Observations of Workloads</head><p>The unique characteristics of smartphone workloads challenge existing system support and motivate Kage, as we will see in the following measurements. All data are collected on a combination of Android ICS (4.0.3) and Samsung Galaxy S2, a mainstream smartphone.</p><p>Workloads Change over Time: Many smartphone workloads are known to have high temporal variations.</p><p>To experimentally show this, we measure the CPU usage from /proc in two benchmark applications, the Android home screen and the Google Gmail client. As shown in <ref type="figure">Figure 2</ref>, for each benchmark application, we sample the main thread's CPU usage, which is broken down into user and kernel parts, denoted as thread:user and thread:kenrel in the figure; meanwhile, we sample CPU usage of the rest of the system other than the main thread, denoted as rest of system. Results show that both benchmarks have time-varying workloads. During user inactivity, the CPU usage is low to moderate (5%-20% globally). Once interactive workloads emerge, the global CPU usage usually spikes by a few orders of magnitude, up to 100%.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Same Application Threads Experience Varying Workloads:</head><p>Existing smartphone applications do not necessarily organize their program code into separate threads or even separate functions based on the computational demands of the code. As shown in the measurements above, the CPU usage of a single thread can vary by orders of magnitude. Sometimes the variation is purely temporal: the same code segment can have highly varying demand, e.g., application UI renderer.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Many OS Functions Experience Varying Workloads:</head><p>Overall, smartphone OS workloads exhibit significant temporal variations: in both benchmarks, when total workloads increase, the CPU usage of OS usually scales up accordingly. More importantly, the same OS function can experience highly varying workloads. <ref type="figure" target="#fig_1">Fig- ure 3</ref> shows system-wide invocations of OS kernel functions during the executions of two benchmarks: browser, an intensive workload incurring 82% global CPU usage on average, in which the user is actively using Chrome browser for browsing; home-idle, a light workload incurring 7% global CPU usage on average, in which the smartphone is idle and the home screen is shown. As shown in the figure, many OS functions are invoked with both intensive and light workloads. <ref type="figure" target="#fig_1">Figure 3</ref> also indicates that smartphone applications usually use a variety of OS functions, even when the workloads are light. This is because when the user is inactive and the system is lightly loaded, various 'background' tasks are maintaining the smartphone's presence by interacting with the external world, e.g., cloud servers or the physical environment, which naturally invokes various OS functions.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Applications Use Diverse OS Functions: Results in</head></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.">Implications on Design</head><p>We next discuss the implications of the workloads characteristics on the design of Kage.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>4.1.Replicating Application Execution</head><p>To achieve energy-proportionality with time-varying workloads described above essentially calls for a way of spreading applications on heterogeneous processors, which (i) enables a single thread to use different processors, with choices made at run time and (ii) preserves the existing program structure and therefore maximizes the reuse of existing application code. Note that (i) is useful even to threads with sustained light workloads: when big processors are active and the energy saving from using small processors diminishes, such threads can switch to big processors to avoid expensive inter-processor communication.</p><p>On cache-coherent multicores, the two requirements are naturally met with transparent thread migration, which, however, becomes difficult in face of extremely architectural asymmetry and lack of cache coherence. Partitioning a single thread into a set of 'heterogeneous' threads is infeasible because of that a single thread may have varying workloads (Section 3) as well as the tedious programming efforts in handling extra concurrency.</p><p>Execution Replication: To meet such requirements on asymmetric architecture, we argue that the OS/runtime must provide an abstraction of execution replication. From a programmer's view, execution replication enables a thread to switch its execution among multiple replicas on heterogeneous processors. The control flow is still one: all replicas cooperatively execute and 'yield' to each other. The possible yielding locations in code are defined by programmer and are chosen dynamically, under decisions collectively made by user code, runtime, and OS.  </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>4.2.Replicating OS Functions</head><p>In face of high variations in OS workloads, some OS functions need to be replicated across heterogeneous processors. The rationales are twofold: (i) to present a single, coherent system image to physically distributed applications, in particular, references of OS objects, e.g., file descriptors, should remain valid across processors; (ii) to execute given OS workloads on processors that provide the best performance-power tradeoff. While (i) may be easily achieved by merely replicating OS interface, for example, redirecting all syscalls to a specific processor, only by replicating the actual OS functions can we achieve (ii), the key to energyproportionality for OS workloads. Furthermore, the use of diverse OS functions warrants a system support for replicating a large set of OS functions, rather than handcrafting a few specific ones.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>4.3.Limiting Inter-Processor Sharing</head><p>Distributed workloads extensively share state: within an application, threads and their replicas share user and OS state; globally, multiple applications can share OS state, e.g., opened files. Due to the high communication overhead among loosely coupled processors, it is crucial for the system to limit inter-processor sharing and access contention. As an example, a Cortex-A9 core of OMAP4 can fetch 32 byte data from the other A9 core through their shared L2 cache in tens of nanoseconds <ref type="bibr" target="#b5">[6]</ref>; however, it takes 1000 times longer or 70 μs for a Cortex-A9 core to fetch the same data from a Cortex-M3 core: the inter-processor sharing requires software to write back and then invalidate cache lines, and to use a hardware spinlock on a slow peripheral bus (shown in <ref type="figure" target="#fig_0">Figure 1</ref>) to synchronize accesses of the main memory.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.4.">Ensuring System Responsiveness</head><p>Interactive smartphone workloads are usually intensive, and they must be executed on the big processor as soon as they emerge. Although loose coupling and aggressive processor power management introduces delay in starting the execution, the system can still appear responsive to the user. The introduced delay consists of three parts: inter-processor interrupt, the big processor waking up from a low-power state, and software synchronizing state shared between processors. In our measurements of OMAP4, it takes 20-30 μs to deliver an inter-processor interrupt from Cortex-M3 to Cortex-A9 through a hardware mailbox; it takes up to 2 ms for the Cortex-A9 core to wake up from the retention power state <ref type="bibr">[10]</ref>. Ultimately, it is the responsibility of the state synchronization scheme to keep the total delay much lower than the latency-perception threshold of human, i.e., several tens of milliseconds.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5.">Kage Overview</head><p>We next sketch Kage design. In the discussion, we assume a hardware architecture consisting of two loosely coupled, heterogeneous processors, a popular design among modern mobile SoCs. <ref type="figure" target="#fig_2">Figure 4</ref> illustrates the structure of Kage.</p><p>Application and runtime: From a programmer's view, an application can launch threads on both processors, big and small. Conceptually, each thread has a replica that is always available on the other processor; a thread and its replica voluntarily yield their own executions to each other for using different processors alternately. In this way, an application is free to choose processors according to its own performance-power goal. Under the hood, a thread on the other processor, i.e., a remote thread, implements the replica; the OS schedules the original thread and the remote one alternately: when the original thread yields, the OS suspends it and resumes the remote thread, and vice versa.</p><p>Within an application, the Kage runtime library creates a unified address space across all the threads, with a user-level software shared memory. Given limited inter-processor concurrency per application, the shared memory design is able to perform coherence operations OS structure: As shown in <ref type="figure" target="#fig_2">Figure 4</ref>, Kage OS is distributed. On each heterogeneous processor, Kage OS runs a small local kernel, which only consists of minimum functions to abstract hardware heterogeneity. For any OS service that is not tied to a specific processor and deserves energy-proportional execution, Kage OS creates per-processor replicas, each of which realizes the function. All these OS replicas act as peers: locally, they serve requests from application threads on the same processor; globally, they cooperate to create a single, coherent image to all applications.</p><p>To maintain the single system image illusion, Kage OS keeps the state of OS replicas consistent with an OSlevel software shared memory. Unlike in a single application, the OS shared memory design needs to handle much higher inter-processor concurrency from multiple applications on different processors. In order to reduce the communication overhead, the shared memory tracks and only maintains consistency for OS objects shared across application boundaries.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="6.">Open Questions</head><p>Proper Programming Abstractions should be carefully devised for both application and OS code, so that replicas can be easily created and their state is maintained as consistent. While arguing for a structural change to software stack, we target at maximizing reuse of existing smartphone application and OS codebases which are already huge. We believe that single system image and unified address space are essential foundations of higher-level abstractions.</p><p>Implementation of Replicas brings the key challenge of transferring stack content across heterogeneous processors. We plan to retrofit ideas from distributed systems, including lightweight virtualization and linked stack. We will co-design the replica internals with the programming abstractions, in order to leverage programmers' assistance for reducing overhead.</p><p>Scheduling of Application Threads determines the inter-processor concurrency within an application, a key factor to the complexity and overhead of the shared memory design. In particular, the OS has to decide which thread to pick when multiple ones are ready on both big and small processors. We plan to experiment with various scheduling strategies.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="7.">Conclusion</head><p>Kage is a suite of OS and runtime that can greatly improve the energy proportionality for a wide range of smartphone workloads. In order to achieve such a goal, Kage distributes both user and OS workloads over loosely coupled processors by selectively replicating application execution and OS functions. A full implementation of Kage is in progress.</p></div><figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_0"><head>Figure 1 : The architecture of TI OMAP4 SoC, which fea- tures two types of asymmetric processors that are not cache-coherent. Data with asterisks are estimated based on a</head><label>1</label><figDesc>Figure 1: The architecture of TI OMAP4 SoC, which features two types of asymmetric processors that are not cache-coherent. Data with asterisks are estimated based on a DVFS providing 1:5 performance scaling and 1:17 power scaling [12]</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_1"><head>Figure 3 : Diverse OS kernel functions invoked under a typical intensive benchmark (Browser) and a typical light benchmark (Home-idle), with each benchmark runs for 300 seconds. The invocations are reported by Linux perf</head><label>3</label><figDesc>Figure 3: Diverse OS kernel functions invoked under a typical intensive benchmark (Browser) and a typical light benchmark (Home-idle), with each benchmark runs for 300 seconds. The invocations are reported by Linux perf tool</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_2"><head>Figure 4 :</head><label>4</label><figDesc>Figure 4: The structure of Kage ARM Cortex M3 ARM Cortex A9 Local Kernel</figDesc></figure>
		</body>
		<back>
			<div type="references">

				<listBibl>

<biblStruct xml:id="b0">
	<analytic>
		<title level="a" type="main">Somniloquy: augmenting network interfaces to reduce PC energy usage</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Y</forename><surname>Agarwal</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Hodges</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Chandra</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Scott</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><surname>Bahl</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Gupta</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. USENIX NSDI</title>
		<meeting>USENIX NSDI</meeting>
		<imprint>
			<date type="published" when="2009-04" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b1">
	<analytic>
		<title level="a" type="main">The Multikernel: A new OS architecture for scalable multicore systems</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Baumann</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><surname>Barham</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><surname>Dagand</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><surname>Harris</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Isaacs</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Peter</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><surname>Roscoe</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Schüpbach</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Singhania</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. ACM SOSP</title>
		<meeting>ACM SOSP</meeting>
		<imprint>
			<date type="published" when="2009-10" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b2">
	<analytic>
		<title level="a" type="main">Corey: an operating system for many cores</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Boyd-Wickizer</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">H</forename><surname>Chen</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Chen</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Y</forename><surname>Mao</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">F</forename><surname>Kaashoek</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Morris</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Pesterev</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">L</forename><surname>Stein</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Wu</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Y</forename><surname>Dai</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Y</forename><surname>Zhang</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Z</forename><surname>Zhang</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. USENIX OSDI</title>
		<meeting>USENIX OSDI</meeting>
		<imprint>
			<date type="published" when="2008-12" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b3">
	<analytic>
		<title level="a" type="main">The V distributed system</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Cheriton</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Commun. ACM</title>
		<imprint>
			<biblScope unit="volume">31</biblScope>
			<date type="published" when="1988" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b4">
	<monogr>
				<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><surname>Greenhalgh</surname></persName>
		</author>
		<title level="m">Big.LITTLE Processing with ARM Cortex-A15 and Cortex-A7,&quot; ARM White Paper</title>
		<imprint>
			<date type="published" when="2011" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b5">
	<analytic>
		<title level="a" type="main">Full-system analysis and characterization of interactive smartphone applications</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Gutierrez</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><forename type="middle">G</forename><surname>Dreslinski</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><forename type="middle">F</forename><surname>Wenisch</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><surname>Mudge</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Saidi</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><surname>Emmons</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">N</forename><surname>Paver</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. IEEE Intl. Symp. on Workload Characterization</title>
		<meeting>IEEE Intl. Symp. on Workload Characterization</meeting>
		<imprint>
			<date type="published" when="2011-11" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b6">
	<monogr>
		<title level="m" type="main">CoMOS: An operating system for heterogeneous multi-processor sensor devices</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><forename type="middle">C</forename><surname>Han</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Goraczko</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Helander</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Liu</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">B</forename><surname>Priyantha</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">F</forename><surname>Zhao</surname></persName>
		</author>
		<idno>MSR-TR- 2006-117</idno>
		<imprint>
			<date type="published" when="2006" />
			<pubPlace>Microsoft Research</pubPlace>
		</imprint>
	</monogr>
<note type="report_type">Technical Report</note>
</biblStruct>

<biblStruct xml:id="b7">
	<analytic>
		<title level="a" type="main">Single-ISA heterogeneous multi-core architectures: the potential for processor power reduction</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Kumar</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">K</forename><forename type="middle">I</forename><surname>Farkas</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">N</forename><forename type="middle">P</forename><surname>Jouppi</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><surname>Ranganathan</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><forename type="middle">M</forename><surname>Tullsen</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. IEEE/ACM MICRO</title>
		<meeting>IEEE/ACM MICRO</meeting>
		<imprint>
			<date type="published" when="2003-12" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b8">
	<analytic>
		<title level="a" type="main">Reflex: using low-power processors in smartphones without knowing them</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">F</forename><forename type="middle">X</forename><surname>Lin</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Z</forename><surname>Wang</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Likamwa</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">L</forename><surname>Zhong</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. ACM ASPLOS</title>
		<meeting>ACM ASPLOS</meeting>
		<imprint>
			<date type="published" when="2012-04" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b9">
	<analytic>
		<title level="a" type="main">Helios: heterogeneous multiprocessing with satellite kernels</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">E</forename><forename type="middle">B</forename><surname>Nightingale</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">O</forename><surname>Hodson</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Mcilroy</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><surname>Hawblitzel</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">G</forename><surname>Hunt</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. ACM SOSP</title>
		<meeting>ACM SOSP</meeting>
		<imprint>
			<date type="published" when="2009-10" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b10">
	<analytic>
		<title level="a" type="main">A 32-bit PowerPC system-on-a-chip with support for dynamic voltage scaling and dynamic frequency scaling</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">K</forename><forename type="middle">J</forename><surname>Nowka</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">G</forename><forename type="middle">D</forename><surname>Carpenter</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">E</forename><forename type="middle">W</forename><surname>Macdonald</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">H</forename><forename type="middle">C</forename><surname>Ngo</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">B</forename><forename type="middle">C</forename><surname>Brock</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">K</forename><forename type="middle">I</forename><surname>Ishii</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><forename type="middle">Y</forename><surname>Nguyen</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><forename type="middle">L</forename><surname>Burns</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE J Solid-State Circuits</title>
		<imprint>
			<biblScope unit="volume">37</biblScope>
			<date type="published" when="2002" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b11">
	<monogr>
		<title/>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Nvidia</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Nvidia</forename><surname>Tegra</surname></persName>
		</author>
		<ptr target="http://www.nvidia.com/object/tegra-3-processor.html" />
		<imprint>
			<biblScope unit="volume">3</biblScope>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b12">
	<analytic>
		<title level="a" type="main">LittleRock: Enabling Energy-Efficient Continuous Sensing on Mobile Phones</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">B</forename><surname>Priyantha</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Lymberopoulos</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Liu</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Pervasive Computing</title>
		<imprint>
			<date type="published" when="2011" />
			<biblScope unit="volume">10</biblScope>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b13">
	<monogr>
				<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Samsung</surname></persName>
		</author>
		<ptr target="http://www.samsung.com/global/business/semiconductor/productInfo.do?fmly_id=844&amp;partnum=Exynos%204210" />
		<title level="m">Exynos 4210 Application Processor</title>
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b14">
	<monogr>
		<title level="m" type="main">OMAP4 Applications Processor: Technical Reference Manual</title>
		<imprint>
			<date type="published" when="2010" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b15">
	<analytic>
		<title level="a" type="main">Factored operating systems (fos): the case for a scalable operating system for multicores</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Wentzlaff</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Agarwal</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">SIGOPS Oper. Syst. Rev</title>
		<imprint>
			<biblScope unit="volume">43</biblScope>
			<date type="published" when="2009" />
		</imprint>
	</monogr>
</biblStruct>

				</listBibl>
			</div>
		</back>
	</text>
</TEI>
