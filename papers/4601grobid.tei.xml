<?xml version="1.0" encoding="UTF-8"?>
<TEI xmlns="http://www.tei-c.org/ns/1.0" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
xsi:schemaLocation="http://www.tei-c.org/ns/1.0 /Users/atharsefid/Desktop/grobid-0.5.3/grobid-home/schemas/xsd/Grobid.xsd"
 xmlns:xlink="http://www.w3.org/1999/xlink">
	<teiHeader xml:lang="en">
		<encodingDesc>
			<appInfo>
				<application version="0.5.3" ident="GROBID" when="2020-09-29T04:25+0000">
					<ref target="https://github.com/kermitt2/grobid">GROBID - A machine learning software for extracting information from scholarly documents</ref>
				</application>
			</appInfo>
		</encodingDesc>
		<fileDesc>
			<titleStmt>
				<title level="a" type="main">On the fragility and limitations of current Browser-provided Clickjacking protection schemes</title>
			</titleStmt>
			<publicationStmt>
				<publisher/>
				<availability status="unknown"><licence/></availability>
			</publicationStmt>
			<sourceDesc>
				<biblStruct>
					<analytic>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Sebastian</forename><surname>Lekies</surname></persName>
							<email>sebastian.lekies@sap.com</email>
							<affiliation key="aff0">
								<orgName type="institution" key="instit1">SAP Research</orgName>
								<orgName type="institution" key="instit2">University Bochum</orgName>
								<orgName type="institution" key="instit3">SAP Research</orgName>
								<orgName type="institution" key="instit4">University Bochum</orgName>
								<orgName type="institution" key="instit5">SAP Research</orgName>
							</affiliation>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Mario</forename><surname>Heiderich</surname></persName>
							<email>mario.heiderich@rub.de</email>
							<affiliation key="aff0">
								<orgName type="institution" key="instit1">SAP Research</orgName>
								<orgName type="institution" key="instit2">University Bochum</orgName>
								<orgName type="institution" key="instit3">SAP Research</orgName>
								<orgName type="institution" key="instit4">University Bochum</orgName>
								<orgName type="institution" key="instit5">SAP Research</orgName>
							</affiliation>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Dennis</forename><surname>Appelt</surname></persName>
							<email>dennis.appelt@sap.com</email>
							<affiliation key="aff0">
								<orgName type="institution" key="instit1">SAP Research</orgName>
								<orgName type="institution" key="instit2">University Bochum</orgName>
								<orgName type="institution" key="instit3">SAP Research</orgName>
								<orgName type="institution" key="instit4">University Bochum</orgName>
								<orgName type="institution" key="instit5">SAP Research</orgName>
							</affiliation>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Thorsten</forename><surname>Holz</surname></persName>
							<email>thorsten.holz@rub.de</email>
							<affiliation key="aff0">
								<orgName type="institution" key="instit1">SAP Research</orgName>
								<orgName type="institution" key="instit2">University Bochum</orgName>
								<orgName type="institution" key="instit3">SAP Research</orgName>
								<orgName type="institution" key="instit4">University Bochum</orgName>
								<orgName type="institution" key="instit5">SAP Research</orgName>
							</affiliation>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Martin</forename><surname>Johns</surname></persName>
							<email>martin.johns@sap.com</email>
							<affiliation key="aff0">
								<orgName type="institution" key="instit1">SAP Research</orgName>
								<orgName type="institution" key="instit2">University Bochum</orgName>
								<orgName type="institution" key="instit3">SAP Research</orgName>
								<orgName type="institution" key="instit4">University Bochum</orgName>
								<orgName type="institution" key="instit5">SAP Research</orgName>
							</affiliation>
						</author>
						<title level="a" type="main">On the fragility and limitations of current Browser-provided Clickjacking protection schemes</title>
					</analytic>
					<monogr>
						<imprint>
							<date/>
						</imprint>
					</monogr>
				</biblStruct>
			</sourceDesc>
		</fileDesc>
		<profileDesc>
			<abstract>
				<p>An important and timely attack technique on the Web is Clickjacking (also called UI redressing), in which an attacker tricks the unsuspicious victim into clicking on a specific element without his explicit knowledge about where he is actually clicking. In order to protect their websites from being exploitable, many web masters deployed different countermeasures to this kind of attack. In this paper, we explore the limitations and shortcomings of current anti-clickjacking approaches and present several bypasses of state-of-the-art tools, including an attack we call Nested Clickjacking that enables us to perform Clickjacking against the social network Google+. Furthermore, we present the results of a large scale empirical study on the usage of current anti-clickjacking mechanisms on about 2 million web pages. The results of our analysis show that about 15 % of the analyzed web sites protect themselves against Clickjacking.</p>
			</abstract>
		</profileDesc>
	</teiHeader>
	<text xml:lang="en">
		<body>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="1">Introduction</head><p>In the last several years, we have observed a move from server-side attacks to client-side attacks. Especially the web browser has become an attractive target for attackers and many different attack vectors ranging from CrossSite-Scripting (XSS) over Cross-Site Request Forgery (CSRF) to pharming attacks and many others have been developed (see for example <ref type="bibr" target="#b1">[2,</ref><ref type="bibr" target="#b10">[11]</ref><ref type="bibr" target="#b11">[12]</ref><ref type="bibr" target="#b12">[13]</ref><ref type="bibr" target="#b13">[14]</ref><ref type="bibr" target="#b20">21]</ref>). Since being introduced by <ref type="bibr">Hansen and Grossman in 2008 [8]</ref>, the Web attacks which are summarized under the term clickjacking (also called UI redressing <ref type="bibr" target="#b34">[35]</ref>) have received considerable attention both from attackers as well as defenders. The basic idea behind such attacks is that an adversary can lure an unsuspicious user into interacting with an authenticated user interface to conduct state changing actions or to extract sensitive information without the user's consent. This is typically achieved by changing the user interface in such a way that the user is tricked into clicking on a specific element without his explicit knowledge about where he is actually clicking.</p><p>Clickjacking is actually an important problem in practice. For instance, only recently Facebook opened a lawsuit against a company that is suspected to conduct clickjacking attacks against Facebook users. Solely in this case the adversaries were able to earn about $1,200,000 per month according to estimations by Facebook <ref type="bibr" target="#b5">[6]</ref>. Clickjacking attacks are often reported in practice and typically social media sites are targeted by these attacks. In order to counter the growing menace imposed by Clickjacking, several protective measures such as for example JavaScript-based frame-busting <ref type="bibr" target="#b29">[30]</ref> or the X-Frame-Options header <ref type="bibr" target="#b21">[22]</ref> were proposed.</p><p>Unfortunately, these mechanisms are only able to protect against attacks in some cases, but not in others as we will show in this paper. We have performed an empirical analysis of the currently deployed anti-clickjacking mechanisms in respect to their flexibility, ability to protect against novel attack variants, and their current limitations. We were able to identify several weaknesses of the current state-of-the-art tools that enable us to perform Clickjacking attacks despite deployed countermeasures. For example, we introduce an attack vector called nested Clickjacking that allows Clickjacking via cross-domain framing despite of a deployed X-Frame-Options response header field.We successfully performed such an attack against the social network Google+ which demonstrates the practical relevance of these attacks. To assess the attack surface and to examine the usage of Clickjacking protection mechanisms in the wild, we also performed a large-scale study in which we analyzed more than 2 million web pages and studied how widely deployed anti-clickjacking mechanisms are. We found that from the investigated Top 20,000 Alexa web sites almost three thousand domains utilize at least one approach for defending against such attacks. The majority of sites use some kind of frame busting code, which unfortunately does not offer a robust mitigation.</p><p>In summary, we make the following key contributions in this paper:</p><p>• We perform an in-depth analysis of the current methods to counter Clickjacking attacks. To this end, we consolidate existing shortcomings of stateof-the-art tools and introduce novel attacks, including Nested Clickjacking, which we successfully demonstrate against Google+. Furthermore, we present bypasses of the ClearClick technique introduced by NoScript <ref type="bibr" target="#b19">[20]</ref> and an implementation problem of Safari's HTML5 offline application cache that leads to a circumvention of HTTP header-based protection schemes such as the XFrame-Options header.</p><p>• To study the deployment of current countermeasures, we conducted an empirical study of more than 2 million web pages with regards to Clickjacking protection mechanisms. We found that many sites actually use current anti-clickjacking mechanisms which unfortunately have their specific limitations.</p><p>The rest of the paper is structured as follows. While we outline the basic attack scenario in Section 2, Section 3 cover the latest Clickjacking protection mechanisms. In Section 4 we then show that the presented mechanisms are either not applicable in many environments or can be circumvented due to technical flaws. Finally, in Section 5 we investigate the usage of Clickjacking protection among the Alexa Top 20,000 websites in order to gain insights into the threats imposed by Clickjacking and ineffective protection capabilities.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2">Technical Background: Clickjacking</head><p>Clickjacking (also called UI redressing) <ref type="bibr" target="#b3">[4,</ref><ref type="bibr" target="#b7">8,</ref><ref type="bibr" target="#b28">29,</ref><ref type="bibr" target="#b34">35]</ref> is an attack that lures an unsuspicious user into clicking on an element that is different to what the user perceives to click on. The attacker tricks the user to perform such a click, often in conjunction with an authenticated user interface to conduct state changing actions or to extract sensitive information without the user's consent. This kind of attack was first reported in June 2002 by Ruderman, who noted in the Mozilla bug tracking system that transparent iframes can lead to security problems <ref type="bibr" target="#b28">[29]</ref>. In 2008, Hansen and Grossman rediscovered this problem and coined the term Clickjacking <ref type="bibr" target="#b7">[8]</ref>. They presented several attack vectors and this work was the starting point for more research in this area. Callegati and Ramilli provide an overview of the attack concept and discuss implementation details <ref type="bibr" target="#b3">[4]</ref>.</p><p>In general, a typical clickjacking attack can be broken down into three different steps:</p><p>1. Forcing the browser to render a third party UI to which the user is authenticated (i.e., where the user is able to access sensitive information or to conduct state changing actions) within a container that is controlled by the attacker. Examples for such a container are popup windows and the iframe element (see Section 4 for more details).</p><p>2. Disguising the third party UI in a fashion that the user is unable to recognize it. For instance, this can be achieved by making it transparent, by totally or partly covering it with other elements, by reducing its size, or by displaying it for only a very short amount of time (e.g., through rapid page navigation).</p><p>3. Luring the user into interacting with the disguised UI without the user being aware of the presence of the third party UI.</p><p>Contrary to the popular belief, Clickjacking attacks are not limited to the use of invisible iframes, but can be conducted in a variety of different ways. The dangerous nature of Clickjacking lies in the fact that it can be conducted against web applications that are free of any technical flaws since the main attack is performed against a web browser, in which the victim clicks on an element without realizing that he in fact interacts with another website. Furthermore, it is in general harder to detect on the server-side whether a request was conducted by the user intentionally or whether the user was tricked into clicking a certain UI element. Nevertheless, serverside approaches have the appealing advantage that they enable an administrator to deploy a protection mechanism for the whole site, without caring of individual web browsers, and thus they are widely used in practice.</p><p>An exemplary Clickjacking attack could therefore be executed as follows: an attacker creates a website called funnykittengame.org which contains a game that lures an unsuspicious user into interacting with the website. While the user plays the game, the attacker's website dynamically creates a transparent iframe element pointing to the user's banking application at secure-banking.com. During the game, the attacker places the iframe directly underneath the user's cursor. As the iframe is transparent, the user is not able to spot the iframe and therefore believes that he is still interacting with the game UI. However, when he clicks the mouse the next time, the corresponding click is not sent to the game UI, but to his banking application and can cause state changes on that site. More technical details and examples are available in the literature <ref type="bibr" target="#b3">[4,</ref><ref type="bibr" target="#b7">8]</ref>.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3">Current Defenses Against Clickjacking</head><p>After having introduced the necessary background information, we now consolidate the state-of-the-art of combating Clickjacking attacks and review related work in this area. In addition to server-side approaches, which are the main focus of this paper, we also discuss clientside protection to provide a comprehensive overview of the defensive landscape. This serves as a basis for the attacks we introduce in the next section.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.1">Client-side Approaches</head><p>NoScript ClearClick: One client-side approach to mitigate the risk imposed by Clickjacking is the Firefox extension NoScript, created and maintained by Maone <ref type="bibr" target="#b19">[20]</ref>. This tool provides an additional array of protective features for Firefox users, including a configurable, domainsensitive and selective script execution blocker, mechanisms to enforce secure transport protocols, a tool to prohibit access for websites to possible Intranet origins, and an add-in called ClearClick. This tool aims for Clickjacking protection by extending the browser's functionality and this is achieved in the following way: ClearClick monitors clicks and other user interactions occurring on a website framed by a page from a different origin. Once a user attempts to click a link on a framed website that appears to be victim of obfuscation attempts from its parent and cross-origin document, the interaction will be blocked. Consequently, a warning dialog will be shown, requiring the user to perform at least two confirming interactions to finally allow the possibly malicious process.</p><p>Our research shows that ClearClick can be circumvented and we presented in the next section an attack that involves drag&amp;drop interaction. Another attack vector was recently presented by <ref type="bibr">Kotowicz et al.</ref>, that also demonstrates the limitations of ClearClick <ref type="bibr" target="#b14">[15]</ref>. In contrast, our approach enables a robust handling and prevention of Clickjacking attacks.</p><p>Alternative Browser Designs: There are alternative browser designs like Gazelle <ref type="bibr" target="#b32">[33]</ref>, OP <ref type="bibr" target="#b6">[7]</ref>, or the secure web browser <ref type="bibr" target="#b9">[10]</ref> that propose novel designs of web browsers that take security considerations into account. While such clean-slate approaches offer nice properties and can also protect against many kinds of attacks, we aim at techniques that are deployed in practice today.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.2">Server-side Approaches</head><p>Due to the fragile nature of client-side approaches, a complimentary line of work attempts to solve the problem at the server-side as we discuss in the following.</p><p>Frame Busting: So called frame busting was one of the first countermeasures that was deployed against Clickjacking. The basic idea behind frame busting is to avoid the unauthorized framing of a web page. This is achieved using a small snippet of JavaScript code, which first checks if the page that contains the script is currently framed. If this is the case, the script navigates the top document of the framing hierarchy away from the framing page towards the URL of the script's including page, effectively "busting out" of the frame <ref type="bibr" target="#b29">[30]</ref>. Listing 1 depicts an example of framebusting code. Note that many other ways exist to bust out of a frame, but the basic idea is mostly the same.</p><formula xml:id="formula_0">&lt; script type =" text / javascript " &gt; if ( top != self ) { top . location = self . location ; } &lt;/ script &gt;</formula><p>Listing 1: Example for JavaScript framebusting code.</p><p>Unfortunately, the vanilla frame busting technique, as shown above, exposes flaws that can be potentially utilized to circumvent the protection mechanism <ref type="bibr" target="#b29">[30]</ref>. Such circumvention can be achieved through two distinct techniques. First, the adversary can attempt to avoid the navigation of the top window, e.g., via 204 flushing <ref type="bibr" target="#b4">[5]</ref>, double framing <ref type="bibr" target="#b29">[30]</ref>, or by simply asking the user not to leave the website via the onbeforeunload event. Second, the attacker can try to disable the frame busting code itself, for example, by misusing modern XSS-Filters <ref type="bibr" target="#b24">[25]</ref> or by using sandboxed iframes <ref type="bibr" target="#b33">[34]</ref>.</p><p>After an investigation of the frame busters used by the Alexa Top 500 websites, Rydstedt et al. proposed an improved frame busting code that avoids the identified weaknesses <ref type="bibr" target="#b29">[30]</ref>. The main idea of their approach is to disable the rendering process unless the framing test was successfully executed. This can be implemented by dynamically setting cascading style sheets (CSS) properties (see Listing 2 for details). At the time of this writing, this method represents (to the best of our knowledge) the most secure frame busting solution <ref type="bibr" target="#b25">[26]</ref>. However, Clickjacking attacks can also be carried out in other ways as we show in the next section and thus frame busting does not offer a full protection.</p><p>&lt; style &gt; body { display : none ;} &lt;/ style &gt; &lt; script &gt; if ( self == top ) { document . g e t E l e m e n t s B y T a g N a m e (" body ") <ref type="bibr">[0]</ref>. style . display = " block "; } else { top . location = self . location ; } &lt;/ script &gt; Listing 2: Improved framebusting code from <ref type="bibr" target="#b29">[30]</ref> X-Frame-Options: Microsoft introduced the so called X-Frame-Options header in order to counter the growing threat imposed by Clickjacking <ref type="bibr" target="#b21">[22]</ref>. Similar to frame busting, the X-Frame-Options header also aims at preventing framing. However, it does not rely on JavaScript, but instead it is implemented as a native capability of the web browser. By attaching an X-Frame-Options HTTP response header to an outgoing request, a web server can influence the framing behavior of the corresponding document. The header's value can take one of two different tokens: DENY and SAMEORIGIN. While DENY prevents the browser from rendering the document within a frame completely, SAMEORIGIN allows the browser to display a resource within a frame whenever the top frame was served by the same origin. Although, the X-Frame-Options header is nowadays supported by every major browser, it is still not standardized, leaving room for browser incompatibilities. For instance, Internet Explorer supports a third header value called ALLOW-FROM, which takes exactly one additional parameter, specifying a domain which is allowed to frame the delivered resource <ref type="bibr" target="#b16">[17]</ref>.</p><p>Content Security Policy (CSP): The Content Security Policy is a mechanism that was developed to mitigate the risks imposed by content injection vulnerabilities such as cross-site scripting <ref type="bibr" target="#b31">[32]</ref>. The mechanism itself consists of a declarative policy that is deployed on the server side and enforced by the client. Thereby, the policy contains a set of directives that restrict the functionality of a web application to the minimum that is required to run the application within the browser. Earlier revisions of CSP contained a directive called frameancestors, which aims at combatting Clickjacking. Originally, this directive allowed developers and site administrators to supply a list of comma separated domains including wildcard identifiers.</p><p>However, the current revision of the Content Security Policy specification does not cover this directives addressing protection from frame-based Clickjacking attacks anymore. Based on several problems with CSP's implementation, the directive was flagged deprecated and cannot be found in current versions of the specification draft. The Internet Draft by Ross on HTTP Header Frame Options and the W3C Editor's Draft by van Kesteren on the From-Origin Header are currently discussed as possible successors for either the X-Frame-Options header and the CSP frame-ancestors directive <ref type="bibr" target="#b27">[28,</ref><ref type="bibr" target="#b30">31]</ref>. However, at the time of writing, it still remains unclear what approach will be used eventually.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4">Open Issues With Clickjacking</head><p>While the countermeasures presented in Section 3 are able to prevent standard attack scenarios, they typically fail in more complex situations. In this section, we provide a comprehensive review of their current limitations: For one, we describe application scenarios in which the current mitigation strategies are not applicable. Furthermore, we cover and introduce sophisticated attacks that are able to circumvent the current protective approaches.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.1">Protection Despite Framing</head><p>The core assumption of the current defense mechanisms is that Clickjacking can be avoided by preventing crossdomain framing of web content. As a result, each of the described server-side mechanisms provides two different configuration options: either framing of a webpage can be forbidden completely, or framing can be limited to same origin pages only.</p><p>However, this is too limiting in practice for various use cases in which framing is an essential aspect. Especially in commercial environments, such as corporate portal solutions or online advertisement, cross-domain framing is often required and essential. Hence, the current anti-framing-based solutions are not applicable here. Nevertheless, those pages can still be a valuable target for Clickjacking attacks due to their often sensitive nature.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.2">Double Clickjacking</head><p>Besides utilizing cross-domain iframes, there are further, lesser known ways to conduct Clickjacking attacks. One such method is Double Clickjacking <ref type="bibr" target="#b8">[9]</ref>. Instead focusing on frames, double Clickjacking relies on opening the cross-domain content in a new window. More precisely, the attacked page is opened within a "pop-under" window, i.e., a window that is hidden under the main window immediately after it was created via JavaScript. In general, this process is so fast that the user is not able to spot the window and its content before it is hidden. After opening such a window, the attacker's page lures the user into double clicking an element on his page (e.g., by letting the user play a game). The first click hits the element on the attacker's page. This action immediately brings the pop-under window to the front (and the clickable element directly under the user's cursor). The second click then hits the attacked page and triggers the targeted state changing action. Finally, after a very short amount of time, the attacker's page then hides and closes the pop-under window again, preventing the user from recognizing the true nature of the attack.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.3">Clickjacking via History Navigation</head><p>A second Clickjacking attack method that does not rely on framing was presented by <ref type="bibr">Zalewski [36]</ref>. It utilizes JavaScript's ability to navigate forward and backward within the browser window's history via the JavaScript history object. When a victim visits the attacker's page, the attacker opens another window (via window.open()) containing the page that is being attacked. As the attacker's main page receives the window handle from window.open(), it is able to instruct the pop up to navigate to arbitrary URLs. Immediately after opening it, the main page triggers the other window to navigate away from the attacked page to another attacker controlled site. Due to the fact that the attacked site was opened first, the currently opened site is able to navigate back to it via history.back(). Now the attacker again lures the victim into clicking on different elements of his page. In the right moment (i.e., just before the user clicks) the page calls history.back(). Therefore, the browser window navigates back and the click hits the attacked page that is immediately loaded from cache. Right after the click the main window again triggers a navigation, so that the user is not able to recognize that his click was hijacked. As for the attack presented before, the current protection mechanisms are not effective at all against this attack.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.4">Nested Clickjacking</head><p>During our research, we explored how current web browsers handle sites that carry an X-Frame-Options header.</p><p>We identified a vulnerability within the X-Frame-Options mechanism that allows Clickjacking via cross-domain framing despite of a deployed X-Frame-Options response header field.</p><p>Attack Description: The root cause of this vulnerability is the way in which browsers verify the frame origin when the X-Frame-Options header is set to SAMEORIGIN. In that case, browsers only compare the origin of the framed page to the origin of the top window. Thereby, the top window is not necessarily the window that embeds the frame, but only the topmost window within the framing hierarchy. In between the framed page and the top window, there could be multiple other frames of different origins. If an attacker controls a framed page he is, thus, able to conduct Clickjacking attacks against the embedding page despite of a deployed X-Frame-Options:SAMEORIGIN header. Due to the nature of this attack, we call it Nested Clickjacking. To illustrate the attack we now cover a real-world attack scenario.</p><p>Real-World Example -Exploiting Google+ via Google's Image Search 1 : To verify the validity of our finding, we examined web applications that both utilize frames themselves and use the X-Frame-Options header. This way, we discovered a Clickjacking vulnerability on google.com. On the main page Google offers a feature that allows an authenticated user to <ref type="bibr" target="#b0">1</ref> This issue has been reported to Google While the domain images.google.com is different from google.com, the URL google.com/imgres can be used to smuggle an attacker controlled frame onto the google.com domain: the attacker uploads a random image to a web page that is indexed by Google's search engine. When searching for the image, Google previews the attacker controlled site within the preview frame. The attacker is now able to include a frame pointing back to google.com on his site (see <ref type="figure" target="#fig_0">Figure 1</ref> for an illustration). As the top window's domain is also google.com, the browser will not stop the rendering process despite of the deployed X-Frame-Options header. Hence, the attacker is now able to conduct Clickjacking attacks by luring a user onto the search result page.</p><p>Assessment: At first sight, it seems to be unlikely that an attacker is able smuggle a frame onto a third-party website, but there are multiple ways to realize such a scenario. On the one hand, an adversary could trigger the creation of a frame element himself or he could take control of an already existing one. The former can be achieved by utilizing a method such as shown in the previous example or by misusing an HTML injection vulnerability at the target site where XSS is not exploitable due to an XSS filter or any other circumstances. The later can also be achieved in multiple ways. An attacker could for example buy large-scale banner advertisements that are loaded within an iframe on a vulnerable websites. Furthermore, the attacker could misuse a persistent XSS vulnerability at a page that is framed by the target website. This is important in practice as it demonstrates how a vulnerability at one site can suddenly open a Clickjacking vulnerability at another site that would otherwise be protected by the X-Frame-Options header.</p><p>In order to avoid Nested Clickjacking vulnerabilities a Web site could utilize Deny instead of Same-Origin for its security sensitive Web pages. However, this is only possible if those sensitive Web pages are not subject to framing within the Web application.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.5">Circumventing Header-based protection mechanisms in Safari</head><p>Additionally to the nested Clickjacking vulnerability, we discovered a way to remove custom HTTP response headers within Safari for HTML5 offline applications 2 . HTML5 offers a new mechanism that allows a Web application to cache certain resources for offline usage. In order to do so, the application needs to specify a manifest file that tells the browser to store certain HTML documents within the so called application cache <ref type="bibr" target="#b2">3</ref> . Whenever an HTTP request is conducted towards a cached document, it is not loaded via HTTP but directly loaded from the App Cache (even if an internet connection is available). Hence this feature can be used to reduce bandwidth consumption and to make Web pages offline available. During our research we discovered that Safari's App Cache only stores the HTML body of the cached document; HTTP response headers are simply dropped. So, whenever a document is loaded from App Cache custom HTTP response headers such as the X-Frame-Options header are not present although the original document carried these headers. Hence any header-based (security) mechanism is useless when used in conjunction with the HTML5 Offline Application feature within Safari. Given Apple's (and therewith Safari's) market leadership with mobile devices and the fact that offline features are often deployed in mobile versions of Web applications <ref type="bibr" target="#b15">[16]</ref>, this behavior represents a critical and potentially widespread vulnerability. For example, both GMail and Hotmail utilize X-Frame-Options in conjunction with HTML offline features in their mobile versions. Hence, both applications are vulnerable to Clickjacking when accessed via the mobile Safari browser.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.6">Circumventing ClearClick</head><p>Finally, we studied the NoScript ClearClick behavior to evaluate its robustness in protecting users from classic Clickjacking attacks. During our research, we noticed the following classification features that ClearClick allies to tell potentially malicious interactions apart from benign framing and element overlapping:</p><p>• ClearClick analyzes whether an element (collection) containing an Iframe, object, or embed element overlaps with any other element that is receiving a mouse or keyboard event. This is based on the principles of classic Clickjacking attacks discussed in Section 3. Several checks are being applied on behalf of the overlapping element, to help ClearClick tell apart potentially malicious intent from benign interaction.</p><p>• ClearClick analyzes the opacity value of the element and checks for a specific threshold. Once the opacity has reached a value below 0.3, the click on elements framed by the overlapping element is being considered a possible Clickjacking attack and a warning dialog is displayed. In general, ClearClick attempts to judge upon the overlapping element visibility determined by opacity, size and other factors to decide whether to display the warning and block the click or not.</p><p>In essence, ClearClick attempts to find out, if the element receiving the click is by any chance visible to the user. If the element is hardly visible or not visible at all, ClearClick assumes an attack scenario and informs the user with the mentioned dialog window. The click is being prevented, the event interrupted.</p><p>One exploit to bypass ClearClick has recently been developed by <ref type="bibr">Kotowicz et al.</ref> that exploits the visibility check by hiding the clicked elements in unexpected ways <ref type="bibr" target="#b14">[15]</ref>. The bypass technique is based on a variation of the formerly published CursorJacking attack by Bordi <ref type="bibr" target="#b2">[3]</ref>. By using the CSS directive cursor:none, the cursor is being hidden and replaced by a fake JavaScript based representation that appears at a different location having the unsuspecting user think it is the actual pointer. The actual cursor nevertheless still exists, it is simply invisible for the victim. By pointing the fake cursor over a link or button and performing a click, the victim will unknowingly click with the invisible cursor pointing to a different element than the visible fake cursor. A proof of concept website has been developed and made publicly available <ref type="bibr" target="#b14">[15]</ref>.</p><p>We also developed a bypass of ClearClick that involves the necessity for a drag&amp;drop interaction by the victim. The attacker can trick the victim into dragging an element into another element and drop it there. After that, the click needs to be initiated. The workings of this exploit are based on the fact that Firefox allows dragging embedded style elements. The unsuspecting user will drag a CSS style element into an Iframe, where it potentially sets all elements of the framed document to a state of opacity. Note that the framed website itself is applied with an opacity of zero to be hidden, but since no visibility impairing measurements have been applied for the Iframe itself, ClearClick must assume a legitimate action based on its heuristic and detection rules. Therefore the click will not be stopped and the Clickjacking attack can be performed successfully. Both attacks have been reported to Maone, and are being prevent since NoScript versions 2.2.7 and 2.2.8. <ref type="bibr" target="#b18">[19]</ref>. The code snippet shown in Listing 3 demonstrates our bypass based on the CSS drag &amp; drop vulnerability.</p><p>// evil . com &lt; script &gt; window . onload = function () document . execCommand ( ' SelectAll ' , null , true ) &lt;/ script &gt; &lt; h2 co n te nted i ta bl e = true ondragend = test . style . opacity =1 &gt; Drag &lt; style &gt;# foo *{ opacity :0} # target { position : absolute ; top :0; left :0; height :150; width :300; display : block } &lt;/ style &gt; Me &lt;/ h2 &gt; &lt; object id = test style = overflow : none ; opacity :.1; data =" http :// victim . com /" &gt; &lt;/ object &gt; // victim . com &lt; body id = foo &gt; &lt; h1 co n tent ed i ta bl e = true &gt; drop me here &lt;/ h1 &gt; &lt;h1 &gt; &lt; a id = target href =" http :// www . test . de /" &gt; CLICK &lt;/ a &gt; &lt;/ h1 &gt; &lt;/ body &gt;</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Listing 3:</head><p>Bypassing NoScript ClearClick with Drag&amp;Drop CSS Ultimately, we discovered a third novel attack vector against ClearClick, which is utilizing a quirky behavior of the Gecko rendering engine when handling invalid SVG filter URIs applied via CSS. Once the filter URI given via CSS is pointing to an invalid or nonexisting SVG filter set, the element requesting those filters is being rendered invisible. For ClearClick, opacity and dimensions as well as other criteria are not matching the Clickjacking detection rule-set; therefore clicks on an element made invisible via invalid SVG filters appeared perfectly visible for ClearClick and accordingly no Clickjacking alert was raised. Listing 4 shows an example attack vector to demonstrate the issue. We submitted this bug to the NoScript author who created a fix within few hours; the problem has been marked resolved with NoScript 2.3.1rc3. Note that this vulnerability, unlike the aforementioned ones, neither requires exotic user interaction nor displays any visible traces of the attack before it occurs. </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5">An Empirical Study on Clickjacking Protection in the Wild</head><p>To investigate the perceived threat imposed by Clickjacking, we examined the usage of Clickjacking protection mechanisms in the wild. The usage of protection mechanisms will yield insights into how web masters assess the risk imposed by this kind of attack. If the risk is considered high, we expect that more websites use some kind of protection measures. In several related studies, different researchers analyzed the prevalence of malicious web pages and drive-by downloads attacks on the Internet <ref type="bibr" target="#b17">[18,</ref><ref type="bibr" target="#b22">23,</ref><ref type="bibr" target="#b23">24,</ref><ref type="bibr" target="#b26">27]</ref>. Closely related to the work presented in this section is a study by Balduzzi et al., who introduced a system to automatically detect Clickjacking attacks and analyzed over one million unique web pages for such attacks <ref type="bibr" target="#b0">[1]</ref>. Their system simulates user clicks on all clickable elements of a given website and detects the consequences of these clicks in terms of Clickjacking attacks. We also perform a large-scale study, but study the empirical deployment of three Clickjacking protection mechanisms as discussed next. This provides a thorough overview of current mitigation techniques and extends previous studies in this area.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5.1">Methodology</head><p>In order to assess the current usage of Clickjacking protection mechanisms, we decided to conduct a large-scale measurement study of the Alexa Top Sites since these sites are an interesting target for this kind of attacks. Thereby, we were mainly interested in the following research questions when crawling these sites:</p><p>(RQ1) How many websites make use of frame busters, X-Frame-Options or CSP?</p><p>(RQ2) How many websites have cross-domain frames deployed on their websites (and hence are vulnerable to Nested Clickjacking)?</p><p>(RQ3) How many websites are framed by crossdomain websites and are thus not able to deploy X-Frame-Options header?</p><p>Crawling Scope: As stated by Rydstedt et al., we expect that frame busting code is often not placed on the main page of a website, but on login or password reset pages <ref type="bibr" target="#b29">[30]</ref>. Therefore, we decided to focus on the Alexa Top 20,000 websites and the first level subpages of each domain. The subpages where discovered by following any link on the main page that pointed towards a resource on the same domain or a subdomain of the corresponding website.</p><p>Frame Busting Detection: In order to detect frame busting code on a website, we conducted a simple but effective test: we simply framed the page under investigation and checked whether the top frame conducted some kind of redirect. If such a redirect was observed, we conclude that frame busting was present on the studied page.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5.2">Results</head><p>In this section, we present the results of our survey and discuss these results in the context of the identified research questions.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5.2.1">General Overview</head><p>In total, our crawling infrastructure was able to crawl 2,039,679 unique web pages, from which 139,216 (6,8 %) returned an error code or where unreachable at the time of analysis. Therefore, we were able to successfully investigate 1,900,463 web pages for Clickjacking protection mechanisms. Out of the investigated 20,000 Alexa web sites, a total of 2,975 (14.88 %) domains utilized at least one approach for defending against Clickjacking. Note that some of the sites actually utilize multiple defense mechanisms. While 972 (4.86 %) domains deployed X-Frame-Options headers, a total of 2,230 (11.15 %) sites utilized a JavaScript-based approach and only two (0.01 %) made use of CSP for preventing framing. <ref type="table">Table 1</ref> provides a summarized overview of these numbers.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Mechanism</head><p>Pages In the following, we discuss the results for the individual research questions mentioned above.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5.2.2">RQ1: Protection mechanisms</head><p>In total, we discovered that 87,685 unique web pages busted out of the frame in our testing scenario. Compared to the total number of 1,900,463 pages, this represents only 4.61 %. However, if we aggregate those numbers for each website (i.e., mainpage + subpages), we can observe that 2,230 sites (which corresponds to 11.15 % of all sites) deploy frame busters on at least one subpage. This means that web masters are not deploying frame busters throughout all of their pages, but only to certain spots. This assumption is strengthened by another observation: while 899 websites deploy frame busting directly on the main page, 1,331 only protect some of their subpages.</p><p>As already stated in Section 3.2, future versions of the Content Security Policy (CSP) will not support the antiframing directive frame-ancestors any more. Therefore, it is not surprising that only two websites utilize this feature for header-based framing protection. More interesting are the numbers gained for the X-Frame-Options header: while we were able to identify 972 websites utilizing this header, only 265 of these sites deployed it on the main page. The vast majority of 707 sites deployed it only on some of their subpages. As discussed above, a very similar behavior can also be observed for frame busting code. This very telling data point raises an interesting question: Why are web masters not rolling out the protective measurements on a wide scale, but only on some very specific spots? Wouldn't it be easier for them to configure their web servers in a less granular fashion? One answer to this question are potential limitations of the investigated approaches: as most anticlickjacking protections follow the "disable-framing-tobe-secure" approach, many webmasters could be forced to trade off between functionality (by enabling framing) and security (by disabling framing). Hence, protection is only applied to neuralgic points of a website, where the desired functionality can still be achieved with deployed protective measures.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5.2.3">RQ2 &amp; RQ3: Framing Behavior</head><p>Besides the protection mechanisms itself, we are also interested in the framing behavior of the investigated sites.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Value</head><p>Pages SAME-ORIGIN 7,906 (72 %) DENY 3,076 (28 %)  On the one hand, this enables us to learn more about the applicability of frame-based security solutions, and on the other hand we are able to measure the impact of the Nested Clickjacking attack presented in Section 4.4. In total, we were able to count 4,007,176 million iframe elements on 14,449 (72.25 %) of the 20,000 Alexa sites and their subpages. About 2,812,274 (70.18 %) of those frames are pointing towards cross-domain resources (we exclude subdomain frames from this number) and hence are potentially vulnerable to the Nested Clickjacking attack. Given the fact, that 72% of all the observed X-Frame-Options header (See <ref type="table" target="#tab_1">Table 2</ref> for details) utilize the same-origin value, it is very likely that Nested Clickjacking attacks can successfully be conducted in practice.While the raw number of crossdomain iframes is surprisingly high, the number of framed web sites is small. In total, we identified 17,496 unique domains that were being framed. While these sites are not able to deploy frame-based anti-clickjacking solutions, they are also a valuable target for attackers to conduct a nested Clickjacking attack. Especially, if an attacker is able to gain control over a domain that is framed often, he is able to increase the available attack surface by the amount of frames pointing to that domain. As shown in <ref type="figure" target="#fig_2">Figure 2</ref>, the top ten domains, for example, are represented in about 36.29 % of all the investigated cross-domain iframe elements.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="6">Conclusion</head><p>In this paper we investigated the current state-of-theart browser-provided Clickjacking protection schemes. Clickjacking is an attack in which an adversary tricks the unsuspicious victim into clicking on a specific element without the victim's explicit consent. Thereby, the current defensive tools can be divided into client-side and server-side approaches. While we investigated NoScript Clearclick as a representative for the client-side, we conducted an in-depth analysis of Frame Busting, the XFrame-Options header and the Content Security Policy for the server-side.</p><p>We consolidated little known bypasses and limitations and also discovered two novel attack scenarios including Nested Clickjacking which we successfully demonstrate against Google+, and a CSS-based bypass of the ClearClick technique introduced by NoScript.</p><p>Furthermore, we studied the deployment of these countermeasures by conducting an empirical study of more than 2 million web pages. Thereby, we discovered that many sites protect themselves against Clickjacking attacks. However, we also discovered that many websites are still susceptible to attacks due to the identified bypasses and weaknesses of the presented countermeasures. These problems clearly demonstrate that the nature of Clickjacking attacks is far more complex than previously assumed by the research community. Novel countermeasures are needed that take these more complex scenarios and attacks into consideration to successfully counter the threats imposed by Clickjacking.</p></div><figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_0"><head>Figure 1 :</head><label>1</label><figDesc>Figure 1: Illustration of Nested Clickjacking</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_2"><head>Figure 2 :</head><label>2</label><figDesc>Figure 2: Top Ten of the framed domains</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_1" validated="false"><head>Table 2 : X-Frame-Options values</head><label>2</label><figDesc></figDesc><table></table></figure>

			<note place="foot" n="2"> This issue has been reported to Apple. However, at the time of this writing a fix was not available yet 3 Note: the App Cache is different from the standard browser cache</note>
		</body>
		<back>
			<div type="references">

				<listBibl>

<biblStruct xml:id="b0">
	<analytic>
		<title level="a" type="main">A solution for the automated detection of clickjacking attacks</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Balduzzi</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Egele</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Kirda</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">E</forename><surname>Balzarotti</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>And</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Kruegel</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">ACM Symposium on Information</title>
		<imprint>
			<date type="published" when="2010" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b1">
	<analytic>
		<title level="a" type="main">Robust defenses for cross-site request forgery</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Barth</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Jackson</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><surname>And</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Mitchell</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><forename type="middle">C</forename></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">ACM Conference on Computer and Communications Security</title>
		<imprint>
			<date type="published" when="2008" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b2">
	<monogr>
		<title/>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Bordi</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">E</forename><surname>Cursorjacking</surname></persName>
		</author>
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b3">
	<analytic>
		<title level="a" type="main">Frightened by links</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Callegati</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">F</forename><surname>And</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Ramilli</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE Security &amp; Privacy</title>
		<imprint>
			<biblScope unit="volume">7</biblScope>
			<biblScope unit="page" from="72" to="76" />
			<date type="published" when="2009" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b4">
	<monogr>
		<title level="m" type="main">Preventing frame busting and click jacking (ui redressing)</title>
		<imprint/>
		<respStmt>
			<orgName>CODERRR</orgName>
		</respStmt>
	</monogr>
</biblStruct>

<biblStruct xml:id="b5">
	<monogr>
		<title level="m" type="main">Washington State AG Target Clickjackers</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Facebook</forename><surname>Security</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Facebook</surname></persName>
		</author>
		<idno>last accessed 02/12/12</idno>
		<ptr target="https://www.facebook.com/notes/facebook-security/facebook-washington-state-ag-target-clickjackers/10150494427000766" />
		<imprint>
			<date type="published" when="2012-01" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b6">
	<analytic>
		<title level="a" type="main">Secure Web Browsing with the OP Web Browser</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Grier</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><surname>Tang</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>And</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">King</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><forename type="middle">T</forename></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">IEEE Symposium on Security and Privacy</title>
		<imprint>
			<date type="published" when="2008" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b7">
	<monogr>
		<title/>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Hansen</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>And</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Grossman</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Clickjacking</surname></persName>
		</author>
		<ptr target="http://www.sectheory.com/clickjacking.htm,lastaccessed02/13/12" />
		<imprint>
			<date type="published" when="2008" />
			<publisher>August</publisher>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b8">
	<monogr>
		<title level="m" type="main">Clickjacking attacks unresolved. White paper, CyLab</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Huang</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">L.-S</forename><surname>And</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Jackson</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename></persName>
		</author>
		<imprint>
			<date type="published" when="2011-07" />
		</imprint>
	</monogr>
	<note>Available online</note>
</biblStruct>

<biblStruct xml:id="b9">
	<analytic>
		<title level="a" type="main">Building a secure web browser</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Ioannidis</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>And</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Bellovin</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><forename type="middle">M</forename></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">USENIX Technical Conference</title>
		<imprint>
			<date type="published" when="2001" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b10">
	<analytic>
		<title level="a" type="main">Protecting browsers from DNS rebinding attacks</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Jackson</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><surname>Barth</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Bortz</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Shao</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">W</forename><surname>And</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Boneh</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">ACM Conference on Computer and Communications Security</title>
		<imprint>
			<date type="published" when="2007" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b11">
	<analytic>
		<title level="a" type="main">Protecting browser state from web privacy attacks</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Jackson</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><surname>Bortz</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Boneh</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>And</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Mitchell</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><forename type="middle">C</forename></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">World Wide Web Conference Series</title>
		<imprint>
			<date type="published" when="2006" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b12">
	<analytic>
		<title level="a" type="main">Client side protection against session riding</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Johns</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>And</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Winter</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Requestrodeo</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the OWASP Europe</title>
		<meeting>the OWASP Europe</meeting>
		<imprint>
			<date type="published" when="2006-05" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b13">
	<analytic>
		<title level="a" type="main">Dynamic pharming attacks and locked same-origin policies for web browsers</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Karlof</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><surname>Shankar</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">U</forename><surname>Tygar</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><forename type="middle">D</forename><surname>And</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Wagner</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">ACM Conference on Computer and Communications Security</title>
		<imprint>
			<date type="published" when="2007" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b14">
	<monogr>
		<title/>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Kotowicz</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">K</forename><surname>Cursorjacking Again</surname></persName>
		</author>
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b15">
	<monogr>
		<title level="m" type="main">Create offline web applications on mobile devices with html5</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Krueger</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename></persName>
		</author>
		<ptr target="http://www.ibm.com/developerworks/web/library/wa-offlineweb/" />
		<imprint>
			<date type="published" when="2010-05" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b16">
	<monogr>
		<title level="m" type="main">Combating clickjacking with xframe-options</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Law</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">E</forename></persName>
		</author>
		<ptr target="http://blogs.msdn.com/b/ieinternals/archive/2010/03/30/combating-clickjacking-with-x-frame-options.aspx" />
		<imprint>
			<date type="published" when="2010-03" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b17">
	<analytic>
		<title level="a" type="main">Blade: an attack-agnostic approach for preventing drive-by malware infections</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">L</forename><forename type="middle">U</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">L</forename><surname>Yegneswaran</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">V</forename><surname>Porras</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><forename type="middle">A</forename><surname>And</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Lee</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">W</forename></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">ACM Conference on Computer and Communications Security</title>
		<imprint>
			<date type="published" when="2010" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b18">
	<monogr>
		<title/>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Maone</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">G</forename><surname>Noscript</surname></persName>
		</author>
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b19">
	<monogr>
		<title/>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Maone</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">G</forename><surname>Noscript</surname></persName>
		</author>
		<ptr target="http://noscript.net/faq#clearclick" />
		<imprint>
			<date type="published" when="2012-01" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b20">
	<analytic>
		<title level="a" type="main">Automatic generation of xss and sql injection attacks with goaldirected model checking</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Martin</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>And</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Lam</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><forename type="middle">S</forename></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">USENIX Security Symposium</title>
		<imprint>
			<date type="published" when="2008" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b21">
	<monogr>
		<title level="m" type="main">Ie8 security part vii: Clickjacking defenses</title>
		<imprint>
			<date type="published" when="2009" />
		</imprint>
		<respStmt>
			<orgName>MICROSOFT</orgName>
		</respStmt>
	</monogr>
</biblStruct>

<biblStruct xml:id="b22">
	<analytic>
		<title level="a" type="main">Automated web patrol with strider honeymonkeys: Finding web sites that exploit browser vulnerabilities</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Min</forename><surname>Wang</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Y</forename><surname>Beck</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>And</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Jiang</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">X</forename></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Network and Distributed System Security Symposium (NDSS)</title>
		<imprint>
			<date type="published" when="2005" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b23">
	<analytic>
		<title level="a" type="main">A crawler-based study of spyware in the web</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Moshchuk</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Bragin</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><surname>Gribble</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><forename type="middle">D</forename><surname>And</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Levy</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">H</forename><forename type="middle">M</forename></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Network and Distributed System Security Symposium (NDSS</title>
		<imprint>
			<date type="published" when="2006" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b24">
	<monogr>
		<title level="m" type="main">Our favorite xss filters and how to attack them</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Nava</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">E</forename><forename type="middle">V</forename><surname>And</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Lindsay</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename></persName>
		</author>
		<ptr target="http://www.blackhat.com/presentations/bh-usa-09/VELANAVA/BHUSA09-VelaNava-FavoriteXSS-SLIDES.pdf" />
		<imprint>
			<date type="published" when="2009-07" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b25">
	<monogr>
		<title/>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Owasp</forename><surname>Clickjacking</surname></persName>
		</author>
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b26">
	<analytic>
		<title level="a" type="main">The ghost in the browser analysis of web-based malware</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Provos</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">N</forename><surname>Mcnamee</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Mavrommatis</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><surname>Wang</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">K</forename><surname>And</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Modadugu</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">N</forename></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Usenix Security Symposium</title>
		<imprint>
			<date type="published" when="2007" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b27">
	<monogr>
		<title level="m" type="main">draft-gondrom-frame-options-01 -HTTP header frame options</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Ross</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename></persName>
		</author>
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b28">
	<monogr>
		<title level="m" type="main">Bug 154957 -iframe content background defaults to transparent</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Ruderman</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename></persName>
		</author>
		<ptr target="https://bugzilla.mozilla.org/show_bug.cgi?id=154957" />
		<imprint>
			<date type="published" when="2002-06" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b29">
	<monogr>
		<title level="m" type="main">Busting frame busting: a study of clickjacking vulnerabilities at popular sites</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Rydstedt</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">G</forename><surname>Bursztein</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">E</forename><surname>Boneh</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>And</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Jackson</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename></persName>
		</author>
		<editor>IEEE Oakland Web 2.0 Security and Privacy</editor>
		<imprint>
			<date type="published" when="2010" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b30">
	<monogr>
		<title level="m" type="main">The From-Origin header</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">V</forename><surname>Kesteren</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename></persName>
		</author>
		<ptr target="http://dvcs.w3.org/hg/from-origin/raw-file/tip/Overview.html" />
		<imprint>
			<date type="published" when="2011-12" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b31">
	<monogr>
		<title level="m" type="main">Content security policy</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>W3c</surname></persName>
		</author>
		<ptr target="http://www.w3.org/TR/CSP/" />
		<imprint>
			<date type="published" when="2011-11" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b32">
	<analytic>
		<title level="a" type="main">The Multi-Principal OS Construction of the Gazelle Web Browser</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Wang</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">H</forename><forename type="middle">J</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Grier</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><surname>Moshchuk</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>King</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><forename type="middle">T</forename><surname>Choudhury</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><surname>And</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Venter</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">H</forename></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">USENIX Security Symposium</title>
		<imprint>
			<date type="published" when="2009" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b33">
	<monogr>
		<title level="m" type="main">The iframe element</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Whatwg</forename></persName>
		</author>
		<imprint>
			<date type="published" when="2010" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b34">
	<monogr>
		<title level="m" type="main">Arbitrary page mashups (UI redressing)</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Zalewski</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename></persName>
		</author>
		<idno>02/12/12</idno>
		<ptr target="http://code.google.com/p/browsersec/wiki/Part2#Arbitrary_page_mashups_" />
		<imprint>
			<pubPlace>UI_redressing</pubPlace>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b35">
	<monogr>
		<title level="m" type="main">X-frame-options is worth less than you think. Website</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Zalewski</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename></persName>
		</author>
		<ptr target="http://lcamtuf.coredump.cx/clickit/" />
		<imprint>
			<date type="published" when="2011-12" />
		</imprint>
	</monogr>
</biblStruct>

				</listBibl>
			</div>
		</back>
	</text>
</TEI>
