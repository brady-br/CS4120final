<?xml version="1.0" encoding="UTF-8"?>
<TEI xmlns="http://www.tei-c.org/ns/1.0" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
xsi:schemaLocation="http://www.tei-c.org/ns/1.0 /Users/atharsefid/Desktop/grobid-0.5.3/grobid-home/schemas/xsd/Grobid.xsd"
 xmlns:xlink="http://www.w3.org/1999/xlink">
	<teiHeader xml:lang="en">
		<encodingDesc>
			<appInfo>
				<application version="0.5.3" ident="GROBID" when="2020-09-29T02:00+0000">
					<ref target="https://github.com/kermitt2/grobid">GROBID - A machine learning software for extracting information from scholarly documents</ref>
				</application>
			</appInfo>
		</encodingDesc>
		<fileDesc>
			<titleStmt>
				<title level="a" type="main">Turning Down the LAMP: Software Specialisation for the Cloud</title>
			</titleStmt>
			<publicationStmt>
				<publisher/>
				<availability status="unknown"><licence/></availability>
			</publicationStmt>
			<sourceDesc>
				<biblStruct>
					<analytic>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Anil</forename><surname>Madhavapeddy</surname></persName>
							<affiliation key="aff0">
								<orgName type="institution" key="instit1">University of Cambridge 1</orgName>
								<orgName type="institution" key="instit2">University of Nottingham 2</orgName>
								<orgName type="institution" key="instit3">Citrix Systems R&amp;D</orgName>
							</affiliation>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Richard</forename><surname>Mortier</surname></persName>
							<affiliation key="aff0">
								<orgName type="institution" key="instit1">University of Cambridge 1</orgName>
								<orgName type="institution" key="instit2">University of Nottingham 2</orgName>
								<orgName type="institution" key="instit3">Citrix Systems R&amp;D</orgName>
							</affiliation>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Ripduman</forename><surname>Sohan</surname></persName>
							<affiliation key="aff0">
								<orgName type="institution" key="instit1">University of Cambridge 1</orgName>
								<orgName type="institution" key="instit2">University of Nottingham 2</orgName>
								<orgName type="institution" key="instit3">Citrix Systems R&amp;D</orgName>
							</affiliation>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Thomas</forename><surname>Gazagnaire</surname></persName>
							<affiliation key="aff0">
								<orgName type="institution" key="instit1">University of Cambridge 1</orgName>
								<orgName type="institution" key="instit2">University of Nottingham 2</orgName>
								<orgName type="institution" key="instit3">Citrix Systems R&amp;D</orgName>
							</affiliation>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Steven</forename><surname>Hand</surname></persName>
							<affiliation key="aff0">
								<orgName type="institution" key="instit1">University of Cambridge 1</orgName>
								<orgName type="institution" key="instit2">University of Nottingham 2</orgName>
								<orgName type="institution" key="instit3">Citrix Systems R&amp;D</orgName>
							</affiliation>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Tim</forename><surname>Deegan</surname></persName>
							<affiliation key="aff0">
								<orgName type="institution" key="instit1">University of Cambridge 1</orgName>
								<orgName type="institution" key="instit2">University of Nottingham 2</orgName>
								<orgName type="institution" key="instit3">Citrix Systems R&amp;D</orgName>
							</affiliation>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Derek</forename><surname>Mcauley</surname></persName>
							<affiliation key="aff0">
								<orgName type="institution" key="instit1">University of Cambridge 1</orgName>
								<orgName type="institution" key="instit2">University of Nottingham 2</orgName>
								<orgName type="institution" key="instit3">Citrix Systems R&amp;D</orgName>
							</affiliation>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Jon</forename><surname>Crowcroft</surname></persName>
							<affiliation key="aff0">
								<orgName type="institution" key="instit1">University of Cambridge 1</orgName>
								<orgName type="institution" key="instit2">University of Nottingham 2</orgName>
								<orgName type="institution" key="instit3">Citrix Systems R&amp;D</orgName>
							</affiliation>
						</author>
						<title level="a" type="main">Turning Down the LAMP: Software Specialisation for the Cloud</title>
					</analytic>
					<monogr>
						<imprint>
							<date/>
						</imprint>
					</monogr>
				</biblStruct>
			</sourceDesc>
		</fileDesc>
		<profileDesc>
			<abstract>
				<p>The wide availability of cloud computing offers an unprecedented opportunity to rethink how we construct applications. The cloud is currently mostly used to package up existing software stacks and operating systems (e.g. LAMP) for scaling out websites. We instead view the cloud as a stable hardware platform, and present a programming framework which permits applications to be constructed to run directly on top of it without intervening software layers. Our prototype (dubbed Mirage) is unashamedly academic; it extends the Objective Caml language with storage extensions and a custom run-time to emit binaries that execute as a guest operating system under Xen. Mirage applications exhibit significant performance speedups for I/O and memory handling versus the same code running under Linux/Xen. Our results can be generalised to offer insight into improving more commonly used languages such as PHP, Python and Ruby, and we discuss lessons learnt and future directions.</p>
			</abstract>
		</profileDesc>
	</teiHeader>
	<text xml:lang="en">
		<body>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="1">Introduction</head><p>Cloud computing has changed the economics of hosting in recent years. As large datacenters have grown to provide modern Internet services, deployment of virtualisation platforms has enabled their computing power to be rented by customers to run their own applications. The first such service was Amazon's Elastic Computing <ref type="bibr" target="#b0">[1]</ref>, which provides resources to customers dynamically and scales up and down according to demand.</p><p>Unfortunately, this extremely dynamic resource availability within the cloud is not well supported by traditional software stacks, e.g., LAMP (Linux, Apache, MySQL, PHP). These are very "thick," containing extensive support for legacy systems and code built up over years. This makes them cumbersome to build and deploy, inefficient to run, and complex to administer securely. Some of these concerns are being tackled via prepackaged binary images, bolt-on "accelerators" which dynamically optimise scripting code such as PHP, and automated security update infrastructure.</p><p>In this paper we propose departing from this approach of layering systems, instead developing a software stack designed explicitly for use in the cloud. Standard interfaces such as POSIX are less relevant in this highly distributed environment, and a fresh software stack can also help to exploit the new capabilities of virtualisation more effectively, such as live relocation. Software efficiency now brings direct financial rewards in cloud environments, providing a much greater impetus to improve on the current state-of-the-art and reducing resistance to change from the open source community (e.g. the "NoSQL" movement <ref type="bibr" target="#b14">[15]</ref>).</p><p>This paper makes several contributions:</p><p>(i) the motivation for constructing a new software stack ( §2), and its architecture ( §3);</p><p>(ii) early performance results that demonstrate significant improvements in I/O and memory speeds, suggesting this is an area worth exploring ( §4); and (iii) a discussion which generalises our results to other programming frameworks ( §5).</p><p>Finally, we examine related work and conclude ( §6).</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2">A New Approach: Mirage</head><p>The key principle behind Mirage is to treat cloud virtual hardware as a compiler target, and convert high-level language source code directly into kernels that run on it. Our prototype compiler uses the OCaml language ( §3) to further remove dynamic typing overheads and introduce more safety at compile time. We now break down our design considerations into efficiency, security, simplicity, purpose, and ease-of-use, as follows: Efficiency Multiplexed interfaces in modern software stacks generate substantial overheads which, when deployed at scale, waste energy and thus money <ref type="bibr" target="#b32">[32]</ref>. Making efficient use of the cloud requires the ability to instantiate and destroy virtual machines (VMs) with low latency, difficult with today's heavyweight software stacks such as LAMP. We discuss concurrency ( §3.2) and storage ( §3.3) later, and how Mirage improves the situation.</p><p>Security Mirage applications are bootable images generated from code written in a strongly type-checked language. The language eliminates low-level memory issues such as buffer overflows. The application's configuration is analysed during compilation to remove unused features, reducing the attack surface for attackers while also reducing memory usage.</p><p>Simplicity The semantics of many OS interfaces are inconsistent, due to having to support a wide application base which has evolved over time-both networking <ref type="bibr" target="#b3">[4]</ref> and filesystem <ref type="bibr" target="#b22">[23]</ref> APIs have known deficiencies. OS kernels often favour performance over strict safety <ref type="bibr" target="#b5">[6]</ref>, and when applications such as databases need strong guarantees (e.g., writing blocks to disk), they are forced to make conservative assumptions and suffer performance drops. Current software stacks are already heavy with layers: (i) an OS kernel; (ii) user processes; (iii) a languageruntime such as the JVM or .NET CLR; and (iv) threads in a shared address space. The main driver for virtualisation to date has been to consolidate under-utilised physical hosts, and this adds another runtime software layer with the hypervisor. This is essential to run existing OSs and software to run unmodified <ref type="figure" target="#fig_0">(Figure 1 (left)</ref>).</p><p>Focus Most operating systems try to solve everything-from desktops to network servers to fast-paced games. In some cases, such as concurrency, researchers have spent a lot of time examining individual models, e.g., threading versus event architectures <ref type="bibr" target="#b34">[34,</ref><ref type="bibr" target="#b37">37]</ref>, and a general-purpose kernel has to support all of them. Mirage focusses on the domain of I/O intensive cloud servers, which lets us specialise the stack (see <ref type="figure" target="#fig_0">Figure 1</ref> (right)) and reap the benefits.</p><p>Ease of Deployment There have been many brave attempts in the past to build systems like this which use high-level languages <ref type="bibr" target="#b10">[11,</ref><ref type="bibr" target="#b12">13]</ref> or radically different designs <ref type="bibr" target="#b7">[8]</ref>, but they all hit the issue of research OSs becoming rapidly obsolete with advances in physical hardware <ref type="bibr" target="#b23">[24]</ref>. In contrast, the hypervisors being used for cloud computing (mostly Xen and Hyper-V) provide a standard but complex and low-level interface to program against <ref type="bibr" target="#b26">[26]</ref>. Mirage hides this complexity behind the compiler toolchain, and gives a programmer usable, high-level language abstractions whilst targeting the lowlevel virtual hardware interface directly.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3">Design and Implementation</head><p>Objective Caml <ref type="bibr" target="#b16">[17]</ref>, or OCaml, is a modern functional language supporting a variety of programming styles, including functional, imperative, and object-oriented. It is a dialect of the ML family, with a well-designed, theoretically-sound type system that has been developed since the 1970s <ref type="bibr" target="#b15">[16]</ref>.</p><p>ML is a pragmatic system that strikes a balance between imperative languages, e.g., C, and pure functional languages, e.g., Haskell. It features type inference, algebraic data types, and higher-order functions, but also permits references and mutable data structures while guaranteeing that all such side-effects are always typesafe and will never cause memory corruption. Safety is achieved by two methods: (i) static type-checking; and (ii) dynamic bounds checking of array and buffers.</p><p>We have previously shown how to construct secure, high-performance network applications using OCaml <ref type="bibr" target="#b18">[19]</ref>.</p><p>Our applications were largely OSindependent, and so a simpler runtime dedicated to the purpose of running them could deliver significant cost savings and performance improvements in cloud environments-now the central goal of Mirage. We do not modify the OCaml compiler itself, but rather the runtime libraries it provides to interface with the OS. This code is mostly written in C, and includes the garbage collector and memory allocator.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.1">Memory Management</head><p>The static type safety guarantees made by OCaml eliminate the need for runtime hardware memory protection, except against other unsafe system components. Mirage runs applications in a single 64-bit virtual address space (see <ref type="figure" target="#fig_1">Figure 2)</ref>  memory mapping in favour of Address Space Randomisation (ASR) for protection against buffer overflows <ref type="bibr" target="#b28">[28]</ref>. Mirage does not benefit from ASR since the application is type-safe, and the runtime itself has little dynamic allocation and no shared library mappings.</p><p>In 64-bit mode, the bottom 128TB and the top 120TB of virtual address space are available for use by the guest, with the rest either reserved by the hypervisor or noncanonical addresses. The application begins with code and static data mapped into the bottom portion of virtual memory, and the OCaml heap area and network buffers placed separately into the top 120TB region. Pages are transmitted and received in Xen by granting them to the hypervisor <ref type="bibr" target="#b36">[36]</ref>. The exact size allocated to each region is configurable, but is aligned to 2MB boundaries to use x86 64 "superpages" resulting in smaller page-tables.</p><p>Statically mapping virtual memory in this fashion provides Mirage with a significant speed boost. Under normal kernels, the standard OCaml garbage collector cannot guarantee that its address space is contiguous in virtual memory and maintains a page table to track the allocated heap regions. In tight allocation loops, the pagetable lookup can take around 15% of CPU time, an overhead which disappears in Mirage (see <ref type="figure" target="#fig_3">Figure 4</ref>).</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.2">Concurrency</head><p>In Mirage, we collapse all concurrency into two distinct models: (i) lightweight control-flow threads for managing I/O and timeouts; and (ii) optimised inter-VM communication for parallel computation. Each Mirage instance runs as on a single CPU core, and depends on the hypervisor to divide up a physical host into several single-core VMs. Thus, a parallel program runs as eight VMs on a single eight-core machine, or be spread across four two-core physical hosts. Communication is optimised dynamically: if the VMs are running on the same physical machine, Mirage uses shared memory channels instead of the network stack.</p><p>We believe that these two models are sufficient to capture the main uses of parallel programming without running into the difficulty of creating a unified model suitable for both large-scale distributed computation and highly scalable single-server I/O <ref type="bibr" target="#b33">[33]</ref>. Our control threads are based on the Lwt co-operative threading library <ref type="bibr" target="#b35">[35]</ref>, and has syntax extensions to permit programming in a similar style to pre-emptive threading. Although we do not present a full evaluation of threading in this paper due to space limitations, informal benchmarks are available for Lwt which illustrate our points <ref type="bibr" target="#b8">[9]</ref>.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.3">Storage</head><p>Mirage provides a persistence mechanism as a nonintrusive language extension to OCaml <ref type="bibr" target="#b11">[12]</ref>. For each datatype specified by the programmer, we statically generate functions at compile time to save and retrieve values of this type to and from the Xen virtual block devices. This approach has several advantages: (i) the programmer can persist arbitrary OCaml types with no explicit conversion: the details are completely abstracted away; (ii) the code is statically generated and highly optimised for efficiency; and (iii) better static safety is guaranteed by auto-generating interfaces. For example: type t = { name: string; mail: string } with orm let me = { name="Anil"; mail="avsm2@cam.ac.uk" } let main () = let db = t_open "contacts" in t_save db t; let cam = t_get˜mailt_get˜mail:('Contains "ac.uk") db in printf "Found %d @ac.uk" (List.length cam)</p><p>The type t is a standard OCaml type, with an annotation to mark it as a storage type. Variables of type t can be saved and queried via the t open, t save and t get functions.</p><p>The backend uses the SQLite database library, and SQL is automatically generated from the application's datatypes and never used by the programmer directly. SQLite has a VFS layer to let OSs define their own I/O mechanisms. Mirage implements a Xen blkfront VFS which interacts directly with a block device without an intervening filesystem. This layer performs highly optimised I/O: (i) all database read/writes are 4KB page-aligned and contiguous segments use blkfront scatter-gather allowing up to 11 pages to be sent in one request; (ii) the journal file is mostly appended to, and only needs to be flushed when the VFS layer requests a sync; (iii) write barriers can maintain safe journal semantics without needing to wait for a synchronous disk flush. Although some of these assumptions are invalid for general-use filesystems, they work very well with a database engine.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4">Evaluation</head><p>So far, we have asserted several performance benefits to running Mirage kernels. We now confirm our hypothesis via performance tests on Mirage as kernels versus on virtualised Linux. Tests were conducted on a quad-core Intel Xeon 2.83GHz system with 4GB RAM, running Xen 3.4.3 and a 64-bit Linux 2.6.27.29 dom0 kernel. The guests were configured with 1GB RAM, 1 vCPU, and LVM block storage. The Linux guest used the same 64-bit PV kernel as dom0 and an ext2 filesystem.</p><p>We evaluated the performance of our database storage by running a benchmark that inserts, updates and deletes records of varying sizes over 5000 iterations. The database was checked after each iteration and all values compared to ensure integrity. <ref type="figure" target="#fig_2">Figure 3</ref> shows the results of this benchmark with varying record sizes. Linux is faster for small record sizes but performance decreases as individual record sizes increase. In contrast, Mirage performance is significantly faster and scales better with increasing record size. We attribute this to the specialised buffer cache in Mirage which takes advantage of page-aligned direct I/O, as well as the optimised heuristics for journal files (which are typically short-lived and only require flushing to disk once, memory permitting). One of the main benefits of implementing the SQLite VFS operations in OCaml is to let us experiment with different heuristics and data structures more easily; one of the main benefits of Mirage is exactly that it makes this kind of specialisation straightforward. We tested memory allocation performance by allocating 100 million strings of varying sizes (see <ref type="figure" target="#fig_3">Figure 4)</ref>. Again, Mirage is faster than Linux for larger allocations, illustrating the benefits of running without a kernel/userspace divide. x86 64 does not have segmentation, and Xen protects its own memory using page-level checks and runs both the guest kernel and userspace in ring 3 <ref type="bibr" target="#b24">[25]</ref>. This makes system calls and page table manipulation relatively slow, a problem which Mirage avoids by not context-switching in ring 3.</p><p>In terms of binary size, the Mirage images for the benchmarks were around 600KB in size, in contrast to Linux distributions which are difficult to squeeze below 16MB, or Windows which runs into hundreds of megabytes.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5">Lessons Learnt and Future Directions</head><p>Although it is a great platform for trying out ideas, OCaml is dwarfed by the vast user-bases of Ruby, Python and PHP. We now consider some of the lessons that can be pulled out to improve other frameworks, and our plans for interesting directions based on them:</p><p>Multi-scale not multi-core There is much concern about multi-core scalability of scripting languages (which often have global interpreter locks). In a virtual platform, this simply isn't as important as scaling widely across hosts and letting the hypervisor divide up cores. Frameworks which currently use (for example) fork(2) on a host to spawn processes would benefit from using cloud management APIs to request resources and eliminate the distinction between cores and hosts. Indeed, the lack of a standard interface from within a guest to cloud APIs (as an analogue to kernel syscalls from userspace) is a glaring omission. We are currently building a system of cloud syscalls with a view to constructing self-scaling applications that can alter their resource usages dynamically in a cloud environment. For largescale computation, our Skywriting system <ref type="bibr" target="#b21">[22]</ref> provides a task-parallel coordination language that provides efficient job dispatch for individual hosts and their cores, leaving Mirage instances to do the actual computation work on reasonably sized chunks of data. Type-driven meta-programming Using code to generate more code (a key aspect of our storage mechanism) is also used in dynamic languages to interface to databases (e.g. ActiveRecord in Ruby on Rails). However, this generated code does not need to be the same language as the host, and so dynamic languages could derive a lot of free performance by using code-generation (e.g. LLVM <ref type="bibr" target="#b13">[14]</ref>) to approach the performance of our statically typed implementation.</p><p>One of the more exciting examples of this in Mirage is the ability to run across multiple cloud provider's database systems. An application can run on Amazon EC2 using virtual block devices, and the same source code also works directly against Google AppEngine using the Datastore API (via an OCaml-to-Java compiler <ref type="bibr" target="#b4">[5]</ref>). Support for this only required adding a code generator to our storage compiler, and we are also implementing Amazon SimpleDB and Tokyo Cabinet backends. This research direction offers a solution to one of the biggest problems with using cloud infrastructurevendor lock-in-since the same source code could run on several vendor's infrastructure such as Amazon and Google (both of whom have had high-profile outages in 2009). Fat-free code Code size and startup time has traditionally been poor for scripting languages. It is of crucial importance for client-side Javascript frameworks like jQuery that offer highly compressed "min" versions, and normal versions for development use. In a cloud environment, traffic spikes (e.g. a link from a popular media site) can drive load up by orders of magnitude in seconds. A framework which can start instances very quickly (boot kernel, load code, prime caches, establish database connections) is well positioned to minimise the use and cost of cloud resources. Mirage demonstrates how little code is actually required from a cloud kernel, with a typical web-server binary around 400Kb (and with further room for improvement). Facebook has taken initial steps in this direction by pre-compiling PHP to C++/Linux binaries using its HipHop compiler <ref type="bibr" target="#b39">[39]</ref>, and we are looking into porting this to run directly under Mirage. Dont forget to be virtual Cloud platforms offer several features not easily available on physical hosts, such as live relocation. Currently, this happens at the OS level, and applications have little control over the process. The simple memory layout in Mirage ( §3.1) allows us to optimise live-relocation performance (by garbage collecting before it begins, and only allocating to the minor heap), and also to propagate such events to the application via callbacks. This would permit, e.g. a web server node to update a DNS entry when it migrates, or a game server to send more frequent updates to clients to account for network disruption. Push the limits of packaging There are a number of packaging systems which assemble small, crunched distributions suitable for cloud deployment <ref type="bibr" target="#b38">[38]</ref>, but odd limits still exist in the vendor infrastructures. For example, the biggest cloud computing vendor-Amazondoes not permit users to upload their own kernels, instead limiting them to user-space images or providing custom kernel modules. This means that a Mirage application must bootstrap itself as a Linux kernel module (overwriting the Amazon-supplied kernel once it has booted) in order to run in this environment. The reasons for this are probably not technical, but to do with supportability of custom compiled kernels or new operating systems, but it will impact the deployment of vertical operating systems like Mirage somewhat.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="6">Related Work and Conclusions</head><p>Mirage draws on several research projects for its inspiration. It is structured as a "vertical operating system" in the style of Exokernel <ref type="bibr" target="#b7">[8]</ref>, and provided as a series of component libraries like Flux OSKit <ref type="bibr" target="#b9">[10]</ref>.</p><p>Barrelfish <ref type="bibr" target="#b1">[2]</ref> provides an environment specifically for multicore systems, using fast shared-memory communication between processes. Mirage uses a hypervisor as its scheduler, focusing on fast single-vCPU execution. The Extremely Reliable OS (EROS) had a similar focus on removing runtime layers <ref type="bibr" target="#b30">[30]</ref>, and its single-level store <ref type="bibr">KeyKOS [29]</ref> extended the memory system all the way to the disk, as our language-integrated storage also does.</p><p>We derive a great deal of inspiration from Foxnet <ref type="bibr" target="#b2">[3]</ref>, which built a TCP/IP stack in Standard ML. However, they reported very slow performance, and we aim to capture their elegant interface while meeting modern performance demands. Functional programming has enjoyed more industrial attention in recent years, in missioncritical systems <ref type="bibr" target="#b6">[7]</ref>, the financial sector <ref type="bibr" target="#b20">[21]</ref>, the systems community (the Xen control stack is written in OCaml <ref type="bibr" target="#b27">[27]</ref>) and even the latest Microsoft language <ref type="bibr" target="#b31">[31]</ref>. We believe that the cost-saving opportunity with Mirage in the cloud will be a great motivating factor encouraging the adoption of statically-typed languages.</p><p>In conclusion, Mirage is a new approach to specialising software for cloud computing environments to improve efficiency and thus cut costs. Mirage rethinks several aspects of application design by integrating networking and storage closely with the hardware and language being used. A prime design goal is simplicity, making formal analysis and debugging easier.</p></div><figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_0"><head>Figure 1 :</head><label>1</label><figDesc>Figure 1: A conventional software stack (left) and the statically-linked Mirage approach (right).</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_1"><head>Figure 2 :</head><label>2</label><figDesc>Figure 2: Virtual memory layout of a 64-bit Mirage kernel running under Xen.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_2"><head>Figure 3 :</head><label>3</label><figDesc>Figure 3: Performance of a SQL stress test running as a direct kernel vs. 64-bit Linux userspace.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_3"><head>Figure 4 :</head><label>4</label><figDesc>Figure 4: Allocation performance under Mirage vs. 64-bit Linux, for 100 million varied-size allocations.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_0" validated="false"><head>. Modern OS kernels discourage static</head><label></label><figDesc></figDesc><table>OS text 
and data 

network 
buffers 

reserved 
by Xen 

OCaml 
minor heap 

OCaml 
major heap 

IP header 

TCP header 

transmit 
packet 
data 

IP header 

TCP header 

receive 
packet 
data 

4KB 
120TB 

128TB 

64-bit virtual address space 

</table></figure>
		</body>
		<back>

			<div type="acknowledgement">
			</div>

			<div type="references">

				<listBibl>

<biblStruct xml:id="b0">
	<analytic>
		<title/>
		<ptr target="http://aws.amazon.com" />
	</analytic>
	<monogr>
		<title level="j">Amazon Web Services</title>
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b1">
	<analytic>
		<title level="a" type="main">Singhania. The multikernel: a new OS architecture for scalable multicore systems</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Baumann</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><surname>Barham</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P.-E</forename><surname>Dagand</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><surname>Harris</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Isaacs</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Peter</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><surname>Roscoe</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Schüpbach</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the ACM SIGOPS 22nd symposium on Operating Systems Principles</title>
		<meeting>the ACM SIGOPS 22nd symposium on Operating Systems Principles<address><addrLine>New York, NY, USA</addrLine></address></meeting>
		<imprint>
			<publisher>ACM</publisher>
			<date type="published" when="2009" />
			<biblScope unit="page" from="29" to="44" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b2">
	<analytic>
		<title level="a" type="main">A structured TCP in Standard ML</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">E</forename><surname>Biagioni</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the Conference on Communications Architectures, Protocols and Applications (SIGCOMM)</title>
		<meeting>the Conference on Communications Architectures, Protocols and Applications (SIGCOMM)<address><addrLine>New York, NY, USA</addrLine></address></meeting>
		<imprint>
			<publisher>ACM Press</publisher>
			<date type="published" when="1994" />
			<biblScope unit="page" from="36" to="45" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b3">
	<analytic>
		<title level="a" type="main">Rigorous specification and conformance testing techniques for network protocols, as applied to TCP, UDP, and sockets</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Bishop</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Fairbairn</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Norrish</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><surname>Sewell</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Smith</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">K</forename><surname>Wansbrough</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Conference on Applications, Technologies, Architectures, and Protocols for Computer Communications (SIGCOMM)</title>
		<imprint>
			<publisher>ACM Press</publisher>
			<date type="published" when="2005" />
			<biblScope unit="page" from="265" to="276" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b4">
	<monogr>
		<title/>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">X</forename><surname>Clerc</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Cadmium</surname></persName>
		</author>
		<ptr target="http://cadmium.x9c.fr" />
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b5">
	<monogr>
		<title level="m" type="main">Barriers and journalling filesystems</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Corbet</surname></persName>
		</author>
		<ptr target="http://lwn.net/Articles/283161" />
		<imprint>
			<date type="published" when="2008-05" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b6">
	<analytic>
		<title level="a" type="main">Birth of the industrial haskell group</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Coutts</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">CUFP &apos;09: Proceedings of the 2009 Video Workshop on Commercial Users of Functional Programming</title>
		<meeting><address><addrLine>New York, NY, USA</addrLine></address></meeting>
		<imprint>
			<publisher>ACM</publisher>
			<date type="published" when="2009" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b7">
	<analytic>
		<title level="a" type="main">Exokernel: an operating system architecture for application-level resource management</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><forename type="middle">R</forename><surname>Engler</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><forename type="middle">F</forename><surname>Kaashoek</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>O&amp;apos;toole</surname><genName>Jr</genName></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 15th ACM Symposium on Operating Systems Principles</title>
		<meeting>the 15th ACM Symposium on Operating Systems Principles<address><addrLine>Colorado</addrLine></address></meeting>
		<imprint>
			<date type="published" when="1995-12" />
			<biblScope unit="page" from="251" to="266" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b8">
	<monogr>
		<title level="m" type="main">Comparing lightweight threads</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Fernandez</surname></persName>
		</author>
		<ptr target="http://eigenclass.org/hiki/lightweight-threads-with-lwt" />
		<imprint>
			<date type="published" when="2008" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b9">
	<analytic>
		<title level="a" type="main">The Flux OSKit: a substrate for kernel and language research</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">B</forename><surname>Ford</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">G</forename><surname>Back</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">G</forename><surname>Benson</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Lepreau</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Lin</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">O</forename><surname>Shivers</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 16th ACM Symposium on Operating Systems Principles (SOSP)</title>
		<meeting>the 16th ACM Symposium on Operating Systems Principles (SOSP)<address><addrLine>New York, NY, USA</addrLine></address></meeting>
		<imprint>
			<publisher>ACM Press</publisher>
			<date type="published" when="1997" />
			<biblScope unit="page" from="38" to="51" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b10">
	<monogr>
		<title level="m" type="main">Design and implementation of an operating system in Standard ML</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">G</forename><surname>Fu</surname></persName>
		</author>
		<imprint>
			<date type="published" when="1999" />
		</imprint>
		<respStmt>
			<orgName>University of Hawaii</orgName>
		</respStmt>
	</monogr>
	<note>Master&apos;s thesis</note>
</biblStruct>

<biblStruct xml:id="b11">
	<analytic>
		<title level="a" type="main">Statically-typed value persistence for ML</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><surname>Gazagnaire</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Madhavapeddy</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Workshop on Generative Technologies (WGT)</title>
		<imprint>
			<publisher>ACM</publisher>
			<date type="published" when="2010-03" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b12">
	<analytic>
		<title level="a" type="main">A principled approach to operating system construction in haskell</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><surname>Hallgren</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><forename type="middle">P</forename><surname>Jones</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Leslie</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Tolmach</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">SIGPLAN Not</title>
		<imprint>
			<biblScope unit="volume">40</biblScope>
			<biblScope unit="issue">9</biblScope>
			<biblScope unit="page" from="116" to="128" />
			<date type="published" when="2005" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b13">
	<analytic>
		<title level="a" type="main">Llvm: A compilation framework for lifelong program analysis &amp; transformation</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><surname>Lattner</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">V</forename><surname>Adve</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">CGO &apos;04: Proceedings of the international symposium on Code generation and optimization</title>
		<meeting><address><addrLine>Washington, DC, USA</addrLine></address></meeting>
		<imprint>
			<publisher>IEEE Computer Society</publisher>
			<date type="published" when="2004" />
			<biblScope unit="page">75</biblScope>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b14">
	<analytic>
		<title level="a" type="main">Will nosql databases live up to their promise?</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">N</forename><surname>Leavitt</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Computer</title>
		<imprint>
			<biblScope unit="volume">43</biblScope>
			<biblScope unit="issue">2</biblScope>
			<biblScope unit="page" from="12" to="14" />
			<date type="published" when="2010" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b15">
	<analytic>
		<title level="a" type="main">The Zinc experiment: An economical implementation of the ML language</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">X</forename><surname>Leroy</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">INRIA</title>
		<imprint>
			<biblScope unit="volume">117</biblScope>
			<date type="published" when="1990" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b16">
	<monogr>
		<title level="m" type="main">Vouillon. The Objective Caml system</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">X</forename><surname>Leroy</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Doligez</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Garrigue</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Rémy</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename></persName>
		</author>
		<imprint>
			<date type="published" when="2005" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b17">
	<monogr>
		<title/>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Madhavapeddy</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Mirage</surname></persName>
		</author>
		<ptr target="http://github.com/mirage" />
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b18">
	<analytic>
		<title level="a" type="main">Melange: creating a &quot;functional</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Madhavapeddy</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Ho</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><surname>Deegan</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Scott</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Sohan</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Internet. SIGOPS Oper. Syst. Rev</title>
		<imprint>
			<biblScope unit="volume">41</biblScope>
			<biblScope unit="issue">3</biblScope>
			<biblScope unit="page" from="101" to="114" />
			<date type="published" when="2007" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b19">
	<analytic>
		<title level="a" type="main">Multiscale not multicore: Efficient heterogeneous cloud computing</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Madhavapeddy</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Mortier</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Crowcroft</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Hand</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. ACM-BCS Visions of Computer Science, Electronic Workshops in Computing</title>
		<meeting>ACM-BCS Visions of Computer Science, Electronic Workshops in Computing<address><addrLine>Edinburgh, UK</addrLine></address></meeting>
		<imprint>
			<publisher>BCS</publisher>
			<date type="published" when="2010-04" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b20">
	<analytic>
		<title level="a" type="main">Caml trading -experiences with functional programming on wall street</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Y</forename><surname>Minsky</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Weeks</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">J. Funct. Program</title>
		<imprint>
			<biblScope unit="volume">18</biblScope>
			<biblScope unit="issue">4</biblScope>
			<biblScope unit="page" from="553" to="564" />
			<date type="published" when="2008" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b21">
	<analytic>
		<title level="a" type="main">Scripting the cloud with Skywriting</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Murray</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Hand</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Hot Topics in Cloud Computing</title>
		<meeting><address><addrLine>Boston, MA, USA</addrLine></address></meeting>
		<imprint>
			<publisher>USENIX Association</publisher>
			<date type="published" when="2010-06" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b22">
	<analytic>
		<title level="a" type="main">Rethink the sync</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">E</forename><forename type="middle">B</forename><surname>Nightingale</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">K</forename><surname>Veeraraghavan</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><forename type="middle">M</forename><surname>Chen</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Flinn</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">ACM Trans. Comput. Syst</title>
		<imprint>
			<biblScope unit="volume">26</biblScope>
			<biblScope unit="issue">3</biblScope>
			<date type="published" when="2008" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b23">
	<monogr>
				<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Pike</surname></persName>
		</author>
		<title level="m">Systems software research is irrelevant</title>
		<imprint>
			<date type="published" when="2000" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b24">
	<analytic>
		<title level="a" type="main">Xen 3.0 and the art of virtualization</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">I</forename><surname>Pratt</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">K</forename><surname>Fraser</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Hand</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><surname>Limpach</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Warfield</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Magenheimer</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Nakajima</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Mallick</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 2005</title>
		<meeting>the 2005</meeting>
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b25">
	<analytic>
		<title/>
	</analytic>
	<monogr>
		<title level="j">Ottawa Linux Symposium</title>
		<imprint>
			<date type="published" when="2005-07" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b26">
	<analytic>
		<title level="a" type="main">Hype and virtue</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><surname>Roscoe</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">K</forename><surname>Elphinstone</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">G</forename><surname>Heiser</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">HOTOS&apos;07: Proceedings of the 11th USENIX workshop on Hot topics in operating systems</title>
		<meeting><address><addrLine>Berkeley, CA, USA</addrLine></address></meeting>
		<imprint>
			<publisher>USENIX Association</publisher>
			<date type="published" when="2007" />
			<biblScope unit="page" from="1" to="6" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b27">
	<analytic>
		<title level="a" type="main">Using Functional Programming within an Industrial Product Group: Perspectives and Perceptions. Technical Report to appear</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Scott</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Sharp</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><surname>Gazagnaire</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Madhavapeddy</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Citrix Systems</title>
		<imprint>
			<date type="published" when="2010-04" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b28">
	<analytic>
		<title level="a" type="main">On the effectiveness of address-space randomization</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">H</forename><surname>Shacham</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Page</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">B</forename><surname>Pfaff</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">E.-J</forename><surname>Goh</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">N</forename><surname>Modadugu</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Boneh</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 11th ACM Conference on Computer and Communications Security (CCS)</title>
		<meeting>the 11th ACM Conference on Computer and Communications Security (CCS)<address><addrLine>New York, NY, USA</addrLine></address></meeting>
		<imprint>
			<publisher>ACM Press</publisher>
			<date type="published" when="2004" />
			<biblScope unit="page" from="298" to="307" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b29">
	<analytic>
		<title level="a" type="main">Design evolution of the eros single-level store</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><forename type="middle">S</forename><surname>Shapiro</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Adams</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">ATEC &apos;02: Proceedings of the General Track of the annual conference on USENIX Annual Technical Conference</title>
		<meeting><address><addrLine>Berkeley, CA, USA</addrLine></address></meeting>
		<imprint>
			<publisher>USENIX Association</publisher>
			<date type="published" when="2002" />
			<biblScope unit="page" from="59" to="72" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b30">
	<analytic>
		<title level="a" type="main">Eros: A principle-driven operating system from the ground up</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><forename type="middle">S</forename><surname>Shapiro</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">N</forename><surname>Hardy</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE Software</title>
		<imprint>
			<biblScope unit="volume">19</biblScope>
			<biblScope unit="issue">1</biblScope>
			<biblScope unit="page" from="26" to="33" />
			<date type="published" when="2002" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b31">
	<monogr>
		<title level="m" type="main">Expert F# (Expert&apos;s Voice in .Net)</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Syme</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Granicz</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Cisternino</surname></persName>
		</author>
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b32">
	<analytic>
		<title level="a" type="main">Layered multiplexing considered harmful</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><forename type="middle">L</forename><surname>Tennenhouse</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 1st International Workshop on High-Speed Networks</title>
		<meeting>the 1st International Workshop on High-Speed Networks</meeting>
		<imprint>
			<date type="published" when="1989-11" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b33">
	<analytic>
		<title level="a" type="main">Why events are a bad idea (for high-concurrency servers)</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Von Behren</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Condit</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">E</forename><surname>Brewer</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 9th conference on Hot Topics in Operating Systems</title>
		<meeting>the 9th conference on Hot Topics in Operating Systems<address><addrLine>Berkeley, CA, USA</addrLine></address></meeting>
		<imprint>
			<date type="published" when="2003" />
			<biblScope unit="page" from="4" to="4" />
		</imprint>
	</monogr>
<note type="report_type">USENIX Association</note>
</biblStruct>

<biblStruct xml:id="b34">
	<analytic>
		<title level="a" type="main">Capriccio: scalable threads for internet services</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Von Behren</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Condit</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">F</forename><surname>Zhou</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">G</forename><forename type="middle">C</forename><surname>Necula</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">E</forename><surname>Brewer</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">SOSP &apos;03: Proceedings of the nineteenth ACM symposium on Operating systems principles</title>
		<meeting><address><addrLine>New York, NY, USA</addrLine></address></meeting>
		<imprint>
			<publisher>ACM</publisher>
			<date type="published" when="2003" />
			<biblScope unit="page" from="268" to="281" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b35">
	<analytic>
		<title level="a" type="main">Lwt: a cooperative thread library</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Vouillon</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">ML &apos;08: Proceedings of the 2008 ACM SIGPLAN workshop on ML</title>
		<meeting><address><addrLine>New York, NY, USA</addrLine></address></meeting>
		<imprint>
			<publisher>ACM</publisher>
			<date type="published" when="2008" />
			<biblScope unit="page" from="3" to="12" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b36">
	<analytic>
		<title level="a" type="main">Facilitating the development of soft devices</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Warfield</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">K</forename><surname>Fraser</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Hand</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><surname>Deegan</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 2005 USENIX Annual Technical Conference (General Track)</title>
		<meeting>the 2005 USENIX Annual Technical Conference (General Track)</meeting>
		<imprint>
			<publisher>USENIX</publisher>
			<date type="published" when="2005-04" />
			<biblScope unit="page" from="379" to="382" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b37">
	<analytic>
		<title level="a" type="main">SEDA: an architecture for well-conditioned, scalable internet services</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Welsh</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Culler</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">E</forename><surname>Brewer</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">SIGOPS Oper. Syst. Rev</title>
		<imprint>
			<biblScope unit="volume">35</biblScope>
			<biblScope unit="issue">5</biblScope>
			<biblScope unit="page" from="230" to="243" />
			<date type="published" when="2001" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b38">
	<analytic>
		<title level="a" type="main">Constructing and managing appliances for cloud deployments from repositories of reusable components</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><forename type="middle">S</forename><surname>Wilson</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Hot Topics in Cloud Computing</title>
		<imprint>
			<date type="published" when="2009-06" />
		</imprint>
	</monogr>
	<note>USENIX Association</note>
</biblStruct>

<biblStruct xml:id="b39">
	<monogr>
				<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">H</forename><surname>Zhao</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">I</forename><surname>Proctor</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Yang</surname></persName>
		</author>
		<ptr target="http://developers.facebook.com/blog/post/358" />
		<title level="m">Hiphop for PHP</title>
		<imprint/>
	</monogr>
</biblStruct>

				</listBibl>
			</div>
		</back>
	</text>
</TEI>
