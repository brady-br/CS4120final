<?xml version="1.0" encoding="UTF-8"?>
<TEI xmlns="http://www.tei-c.org/ns/1.0" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
xsi:schemaLocation="http://www.tei-c.org/ns/1.0 /Users/atharsefid/Desktop/grobid-0.5.3/grobid-home/schemas/xsd/Grobid.xsd"
 xmlns:xlink="http://www.w3.org/1999/xlink">
	<teiHeader xml:lang="en">
		<encodingDesc>
			<appInfo>
				<application version="0.5.3" ident="GROBID" when="2020-09-29T01:56+0000">
					<ref target="https://github.com/kermitt2/grobid">GROBID - A machine learning software for extracting information from scholarly documents</ref>
				</application>
			</appInfo>
		</encodingDesc>
		<fileDesc>
			<titleStmt>
				<title level="a" type="main">DISTROY: Detecting Integrated Circuit Trojans with Compressive Measurements</title>
			</titleStmt>
			<publicationStmt>
				<publisher/>
				<availability status="unknown"><licence/></availability>
			</publicationStmt>
			<sourceDesc>
				<biblStruct>
					<analytic>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Youngjune</forename><forename type="middle">L</forename><surname>Gwon</surname></persName>
							<affiliation key="aff0">
								<orgName type="institution">Harvard University</orgName>
							</affiliation>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">H</forename><forename type="middle">T</forename><surname>Kung</surname></persName>
							<affiliation key="aff0">
								<orgName type="institution">Harvard University</orgName>
							</affiliation>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Dario</forename><surname>Vlah</surname></persName>
							<affiliation key="aff0">
								<orgName type="institution">Harvard University</orgName>
							</affiliation>
						</author>
						<title level="a" type="main">DISTROY: Detecting Integrated Circuit Trojans with Compressive Measurements</title>
					</analytic>
					<monogr>
						<imprint>
							<date/>
						</imprint>
					</monogr>
				</biblStruct>
			</sourceDesc>
		</fileDesc>
		<profileDesc>
			<abstract>
				<p>Detecting Trojans in an integrated circuit (IC) is an important but hard problem. A Trojan is malicious hardware-it can be extremely small in size and dormant until triggered by some unknown circuit state. To allow wake-up, a Trojan could draw a minimal amount of power, for example, to run a clock or a state machine, or to monitor a triggering event. We introduce DISTROY (Discover Trojan), a new approach that can efficiently and reliably detect extremely small background power leakage that a Trojan creates and as a result, we can detect the Trojan. We formulate our method based on com-pressive sensing, a recent advance in signal processing, which can recover a signal using the number of measurements approximately proportional to its sparsity rather than size. We argue that circuit states in which the Tro-jan background power consumption stands out are rare, and thus sparse, so that we can apply compressive sensing. We describe how this is done in DISTROY so as to afford sufficient measurement statistics to detect the presence of Trojans. Finally, we present our initial simulation results that validate DISTROY and discuss the impact of our work in the field of hardware security.</p>
			</abstract>
		</profileDesc>
	</teiHeader>
	<text xml:lang="en">
		<body>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="1">Introduction</head><p>Many semiconductor companies today are fabless. They outsource the manufacturing of their integrated circuit (IC) products to cheaper or more advanced fabrication facilities. While this go-with-remote-foundries model provides a compelling option, it makes easier for an attacker to compromise the fabrication process and insert a Trojan, malicious hardware that not only alters the original design but also performs security attacks.</p><p>Trojans comprise a subtle addition to an IC. A Trojan can be as small as a single gate, or as large as a microcontroller capable of launching systematic security attacks <ref type="bibr" target="#b12">[12]</ref>. Detecting Trojans is challenging partly because their structure is unknown, which makes it infeasible to perform functional tests of the IC to detect the Trojans based on the circuit functionality. Trojans are also dormant at times, and in general, there is no a priori knowledge of their activation mechanism.</p><p>The two premises available to a Trojan detector is that a Trojan will draw some power <ref type="bibr" target="#b0">[1]</ref> and alter the physical structure of the circuit <ref type="bibr" target="#b1">[2]</ref>. However, detecting the latter-circuit alteration-is difficult and often impractical as it may require costly destructive inspection of the circuit, performed using expensive equipment. Furthermore, a Trojan designer can anticipate and make sure that circuit analysis techniques such as path-length measurement will fail to reveal the Trojan. Therefore, we are left with power usage as the main detection vector. We assume that a Trojan designer's only option is to increase the power consumption of the circuit. We argue that this is a reasonable assumption based on the following two cases:</p><p>1. The Trojan designer does not know the circuit design. In this case, the designer will merely add Trojan gates without modifying the original circuit. 2. The Trojan designer knows the circuit design. In this case, the designer can first optimize the circuit to reduce its power consumption, and then insert the Trojan gates, leaving the power consumption unchanged. However, we can assume this case is avoidable by making the original circuit slack-free, so that no further power reduction is possible.</p><p>In this paper we focus on combinatorial circuits, that is, circuits where the inputs and outputs of each gate are determined by the inputs to the circuit. Such circuits may serve as basic blocks of larger, possibly stateful circuits, and can be gated-selectively powered on-to allow testing in isolation. In contrast, we don't restrict the Trojan circuits to be combinatorial; a Trojan may, for instance, run a clock, a state machine, or monitor triggering events for its activation.</p><p>Logic gates consume orders of magnitude different amounts of power depending on their inputs. Thus, to expose the Trojan power consumption, it is important to discover circuit inputs, or test vectors, which lead to low circuit power consumption by, for example, putting as many gates as possible into low power states. This is generally a hard problem with a number of heuristic solutions based on solving instances of SAT (satisfiability) <ref type="bibr" target="#b10">[10]</ref>. We will call such low power consumptioninducing inputs the revealing test vectors. In signal processing parlance, we say that with such test vectors the SNR is high, where the desired signal is the Trojan power consumption, and the noise the deviation in power use from expected in the non-Trojan parts of the circuit.</p><p>We propose DISTROY (Discover Trojan), a new approach that substantially reduces the I/O requirement in detecting small power leakage due to Trojans embedded in ICs. With reduced I/O, the approach still allows offchip Trojan detectors to recover the most significant indicators of Trojan-induced power variations. DISTROY relies on the assumption that revealing test vectors are rare, or sparse. Compressive sensing <ref type="bibr" target="#b2">[3]</ref>, a recent technique developed in signal processing, forms the basis of DISTROY that enables simple encoding and accurate reconstruction of the most significant power consumption anomalies among the test vectors applied. We show that DISTROY can robustly detect the presence of power leakage resulting from the background power consumption of on-chip Trojans even when the drawn power is extremely small.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2">Compressive Sensing</head><p>Baraniuk <ref type="bibr" target="#b2">[3]</ref> and Candès and Wakin <ref type="bibr" target="#b3">[4]</ref> provide good tutorial introductions of compressive sensing for interested readers. We provide here some basic results required to follow the technical details of the paper.</p><p>Consider a real-valued, length-N input vector x = ï¿¿x 1 x 2 . . . x N ï¿¿. Suppose the vector has an alternative representation in a basis Ψ, x = Ψs, where only K elements of s are non-zero. We will say that such a vector x is K-sparse. When K ï¿¿ N , we regard x as compressible.</p><p>Compressive sensing encodes x by producing measurements y = Φx. Here, the matrix Φ of size M × N is called a measurement matrix. We can reconstruct x by solving the system of equations y = Φx where there are more unknowns (N ) than equations (M ). Note that in compressive sensing, the number of equations is the number of (compressive) measurements.</p><p>Compressive sensing theory states that we can restore s, the K-sparse form of x, with high probability when Φ is a random matrix and when M ≥ cK log(N/K) where c is a small constant. Linear programming solves for x by minimizing the ï¿¿ 1 -norm of s:</p><formula xml:id="formula_0">min s∈R N ï¿¿sï¿¿ ï¿¿1 subject to y = Φx, x = Ψs.<label>(1)</label></formula><p>An interesting property of the ï¿¿ 1 -minimization is that the quality of the decoding is a function of M . The larger M is, the more accurate the reconstruction becomes. Furthermore, recovery is incremental-using small M we recover the largest components of s, and if we wish to recover more components, we grow M accordingly.</p><p>Another powerful feature of compressive sensing is the care-free, low-complexity encoding unlike conventional coding or compression schemes. It is coupled with the flexibility of incorporating any Ψ in decoding that transforms x to a sparse form, which makes compressive sensing potentially a ground-breaking solution for many security problems such as intrusion detection and identification of spam and DDoS attacks (or more generically any form of anomaly).</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3">How Trojans May Be Detected</head><p>In this section we provide some background on circuit characterization based on power consumption statistics and describe a simple, baseline method for Trojan detection.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.1">Background: Log-normal Leakage Current Model</head><p>ICs typically operate at a fixed voltage. Since power is a product of voltage and current, we will refer to current and power interchangeably. When a circuit's inputs are held constant, the circuit still consumes a certain amount of power because logic gates typically pass a small, but non-zero amount of current. The current consumed in such a static circuit is referred to as leakage current.</p><p>The leakage current of a gate depends on its inputs. For example, <ref type="table" target="#tab_0">Table 1</ref> shows the leakage current values for a 2-input NAND gate manufactured in a certain process, for 3 different input combinations. We will refer to each input combination as a gate state. Note that the leakage currents of different gate states can vary by orders of magnitude! The leakage current varies from gate to gate, because the physical dimensions of gate features vary in manufacturing. Since the physical variations are typically normally distributed, and have an exponential effect on current, a common way to model leakage current is using the log-normal distribution <ref type="bibr" target="#b4">[5]</ref>.</p><p>To predict the total power consumption of a circuit, we must know the inputs to each gate, which, for a combinatorial circuit, can be derived from the circuit inputs. For example, consider a circuit depicted in Figure 1. There will be 3 · 3 = 9 possible combinations of gate states and 2 3 = 8 test vectors (over input bits X, Y , and Z). Note that circuits often have some gate states that are physically unrealizable. We can then obtain the leakage current distribution for each test vector as the distribution of a sum of log-normal random variables, each corresponding to one gate in a specific state. For example, consider applying test vector ï¿¿0, 0, 0ï¿¿ to It follows that gate A will have inputs ï¿¿0, 0ï¿¿ and gate B inputs ï¿¿1, 0ï¿¿, and so we can expect that these gates will draw log-normally distributed amounts of current with parameters from the first two rows in <ref type="table" target="#tab_0">Table 1</ref>, respectively. We can see that the total current consumed by the circuit in this example will be the random variable I T OT AL = LN (0.223, 0.082) + LN (4.578, 3.026) where LN (µ, σ) denotes a log-normally distributed random variable with the given parameters.</p><p>At present, no closed-form is known for the probability distribution of I T OT AL . However, there are many approximation methods which work well in practice, such as that by Fernandes and Vemuri <ref type="bibr" target="#b4">[5]</ref>, which we adopted for this paper.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.2">Baseline Approach</head><p>Figure 2 depicts a baseline approach for detecting Trojans. We apply N test vectors v 1 , v 2 , . . . , v N to the CUT, obtaining N power measurements x 1 , x 2 , . . . , x N , one for each vector. For the same N test vectors, we compute, as outlined in the previous subsection, the expected values of the leakage current distribution for each test vector, x G = ï¿¿g 1 , g 2 , . . . , g N ï¿¿. Note that these groundtruth values can be obtained offline.</p><p>Next, we compare the power measurements x i with the expected power measurements to decide whether or not Trojans are present in the CUT. When there are no Trojans present, any deviation from the expected measurement consists of only one source-the chip fabrication variations, which is accounted for by the gate models. However, when there are Trojans present, the gates comprising the Trojan draw additional leakage current and thus shift the probability distribution of total circuit current as depicted schematically in <ref type="figure" target="#fig_2">Figure 3</ref>. We choose a rejection threshold α such that if the total current is above α then we declare that the circuit contains Trojans.</p><p>There always exists some likelihood of error. Referring to <ref type="figure" target="#fig_2">Figure 3</ref>, we can see errors could occur either 1) when there is no Trojan, but total leakage current is larger than the rejection threshold-an event called a false positive, or 2) when there is a Trojan but the total leakage current falls below the threshold, an event called a false negative. We can reduce the likelihood of both of these events by testing groups of multiple chips as described in the following subsection. </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.3">Testing Multiple Chips from Same</head><p>Process to Improve Detection Reliability</p><p>We can improve the detection reliability by testing multiple chips manufactured with the same fabrication process. We consider the following two ways to use multiple chips, which reduce the false positive and negative rates, respectively: 1) Reducing False Positives. To reduce false positives, we can test groups of P chips, for some P greater than one, and require that for all of them, the total leakage current exceeds the rejection threshold before we can declare a Trojan. The larger P is, the fewer false positives are expected. Note that increasing P also increases the false negative rate; this can be mitigated by the following method.</p><p>2) Reducing False Negatives. To reduce the chance of false negatives, we can declare a Trojan if at least P out of Q chips exhibit leakage current past the rejection threshold, where P is defined earlier in 1) and Q &gt; P . For a given P , the larger Q is, the fewer false negatives are expected.</p><p>A detailed analysis of tuning the parameters α, P and Q is beyond the scope of this paper, but a simple strategy may consist of the following four steps. 1) Choose α which gives approximately equal rates of both types of error. 2) Increase P until the desired false positive rate is reached. This may result in increased false negative rates. 3) Increase Q until the false negative rate is low enough. This may increase the false positive rate   again. 4) Repeat steps 2 and 3 until both error rates are at acceptable levels.</p><formula xml:id="formula_1">0 ) 0 ! 0 * 񮽙 " ) +$񮽙 񮽙 ), # , " * +$񮽙 񮽙 *, # , " $ +$񮽙 񮽙 $, # , # ) # ! # * 񮽙</formula></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>!"#$%&amp;''()&amp;*'&amp;+'(+,</head></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4">DISTROY</head><p>DISTROY consists of the front-end scanner and backend analyzer. In this section we describe these components of DISTROY in detail. </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.1">The Front-end</head></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.2">The Back-end</head><p>The back-end performs the decoding of compressive measurements y i using the minimization of Equation (1). However, as noted in Section 2, to make decoding work with high probability, the variables under optimization must be K-sparse. But neither the expected measurements nor those of the CUT are sparse by themselves; how can we recover them using compressive sensing decoding?</p><p>Note that we are interested in finding the measurements which significantly deviate from the expected ones. Let us define a new set of variables, d 1 , d 2 , . . . , d N describing these deviations; more specifically, d i = x i − g i . We can see that the deviations are going to be relatively more sparse; for example, in the ideal case without process variations, we would expect d i = 0 unless a Trojan circuit is present. Normalizing by the standard deviation σ of leakage current, we can decode d i <ref type="bibr">Double-C17 (from ISCAS-85 Benchmark)</ref>  using Equation <ref type="formula" target="#formula_0">(1)</ref>'s minimization as follows:</p><formula xml:id="formula_2">min ï¿¿ ï¿¿ ï¿¿ ï¿¿ ï¿¿ d i σ i ï¿¿ ï¿¿ ï¿¿ ï¿¿ subj. y = Φ       g 1 + d 1 g 2 + d 2</formula><p>. . .</p><formula xml:id="formula_3">g N + d N       (2)</formula><p>The normalization is needed because of the "largestfirst" decoding property of compressive sensing. Without the 1/σ i factor in the objective function, the largest values we decoded might not be Trojan power consumption outliers, but merely largest power consumptions occuring in test vectors with high variance. Having obtained the deviations d i , we can now use the same types of statistical tests as in the baseline case of Section 3.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5">Evaluation</head><p>Our evaluation features a benchmark circuit that contains 100 NAND gates. We performed a logic simulation of the circuit and applied the Fernandes and Vemuri method <ref type="bibr" target="#b4">[5]</ref> to model log-normal leakage current distributions. This section explains our evaluation methodology and discusses empirical results.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5.1">Benchmark Circuit and Trojans</head><p>The original c17 circuit from the ISCAS-85 benchmark suite <ref type="bibr" target="#b5">[6]</ref> consists of 6 NAND gates; we combine two c17 blocks to create double-c17, which contains 20 NAND gates as depicted in <ref type="figure">Figure 5</ref>. Lastly, we use five double-c17 blocks to produce double-c17x5 shown in <ref type="figure">Figure 6</ref>.</p><p>The double-c17x5 circuit takes a 16-bit input, which yields a test vector space size of 2 16 . Since this is a relatively small set, our simulation uses all possible test vectors and obtains corresponding gate states of the circuit for each vector. Furthermore, we compute the distribution of the sum of leakage currents through all gates in the circuit as described in Section 3.1. Inserting Trojans.</p><p>We prepared five unmodified double-c17x5s and placed one to five NAND gates at random locations to create trojan-1, ..., trojan-5. (That is, the smallest Trojan circuit is a single NAND gate.) We then ran logic simulations for the Trojan circuits and again used approximation to determine their leakage current distributions.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5.2">Performance Metrics</head><p>Achieved compression gain N/M . Enabled by compressive sensing, DISTROY can detect Trojans with M measurements for off-chip analysis that are several times fewer than the original N . False positive rate. False positives occur when DIS-TROY pronounces a clean circuit Trojan-infected. False negative rate. False negatives occur when DIS-TROY fails to detect a Trojan-infected circuit.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5.3">Trojan Detection Decision</head><p>We adopt the baseline detection method described in Section 3.2 and extend it to take advantage of multiple test vectors per chip, as well as multiple chips. First, for a single test vector, similar to Section 3.2, we declare the test vector a Trojan witness if its leakage current exceeds the mean by more than some threshold value 2σ.</p><p>Let us define an equivalence class of test vectors to be a set of test vectors that result in equal gate state counts. For example, if the test vectors v 3 and v 7 produce the state counts ï¿¿C 0 = 32, C 1 = 50, C 2 = 18ï¿¿ where C 0 represents the total number of 2-NAND gates with input 00, C 1 with input 01 or 10, and C 2 with input 11, then the two test vectors are members of the same equivalence class.</p><p>We use equivalence classes as a convenient, easy to precompute tool to jointly reason about the statistics of multiple test vectors. Specifically, we apply the following criteria. We first divide the N test vectors used in a test into their equivalence classes. Then, we throw out all equivalence classes that have less than some number N Req of member test vectors. Lastly, if we find that at least L% of test vectors in one of the remaining equivalence classes are Trojan witnesses, we declare the CUT Trojan-infected. ideal values. We run N = 1, 000 random test vectors on a clean, Trojan-free double-c17x5 and Trojaninfected double-c17x5s of five Trojan sizes, compress the current leakages with varying number of measurements (M ), and count the number of Trojan witnesses. <ref type="figure">Figure 7</ref> depicts the false positive and false negative rates for our smallest and largest Trojan circuits. We used parameters N Req = 20 and L = 50%. We have analyzed the leakage current distribution of all equivalence classes (using Fernandes and Vemuri <ref type="bibr" target="#b4">[5]</ref>), ranked them, and selected test vectors from the lowest-power inducing equivalence classes to force the effect of additional gates from Trojan circuits more pronounced. We note that using some optimal set of test vectors we can reduce false positive and false negative rates.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5.4">Discussion</head><p>We find that DISTROY can achieve up to 5-or 4-to-1 compression ratio, which justifies the use of compressive sensing for Trojan detection. We can think of compression as a speedup in the Trojan detection time by reducing the chip's output bandwidth requirement.</p><p>In Section 3.3, we discussed the use of multiple chips fabricated under the same process to improve reliability of the test. <ref type="figure">Figure 8</ref> exhibits such an improvement. We consider the case for M = 200 (i.e., the compression gain of 5). We ran 100 test cases using P = 1 to 10 chips from the same process and recorded the reduction of false positive rate. Using either random or optimal test vectors, we were able to achieve no false positives. The similar result holds true for false negative rate. Fixing P = 2 and varying Q from 2 to 10, we were able to eliminate false negatives starting with Q = 6.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="6">Related Work</head><p>Agrawal et al. <ref type="bibr" target="#b0">[1]</ref> introduced IC fingerprinting, a signal processing technique using side-channel power analysis to detect the presence of additional circuits. IC fingerprinting assumes a gold circuit fabricated physically to extract the reference fingerprint used in testing that serves decision criteria. The compressive sensing based approach offers a possible implementation direction for fingerprinting methods. <ref type="bibr">Nelson et al. [9]</ref> presented gatelevel characterization (GLC) techniques to model power and delay characteristics more precisely. GLC relies on statistical methods, singular value decomposition (SVD) in particular, to solve for a characterization vector used to detect a Trojan circuit. The compressive sensing approach of this paper can benefit from using such methods in selecting Trojan-revealing test vectors.</p><p>More recently, Trojan detection in ICs has attracted considerable research efforts at the IEEE Symposium on Security &amp; Privacy (Oakland). They include Huffmire et al. <ref type="bibr" target="#b7">[8]</ref>, an isolation primitive for hardware components to run on FPGAs that can help interconnect traceability among others but provides little protection against potentially malicious central component such as a Trojaninfected microcontroller chip. <ref type="bibr">Hicks et al. [7]</ref> proposed Unused Circuit Identification (UCI) to detect malicious hardware hidden in circuits at design time by identifying pairs of dependent signals replaceable by a wire without affecting any test vector outcome. <ref type="bibr">Sturton et al. [11]</ref> demonstrated a valid attack against UCI by showing that it is possible to build malicious circuits exhibiting hidden behavior upon receiving a special trigger and bypassing the UCI detection successfully.</p><p>All these approaches are orthogonal to the compressive sensing-based approach of this paper, which has the goal of reducing I/O requirements without compromising important information for detecting Trojans.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="7">Conclusion</head><p>Trojans are a hard problem and serious security threat for today's fabless IC business model. We have presented DISTROY, a novel and unconventional use of compressive sensing to address the Trojan detection problem.</p><p>Because of the largest-first decoding property, compressive sensing decodes the largest abnormal power consumption values first. From the decoded values, we can detect the Trojans reliably and accurately.</p><p>We have used a reasonable benchmark circuit for our evaluation and also for illustrative purposes. In the near future, we plan to validate DISTROY in implementation, applying it to real circuits.</p></div><figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_0"><head>Figure 1 '</head><label>1</label><figDesc>Figure 1's circuit, that is, X = 0, Y = 0, Z = 0. It follows that gate A will have inputs ï¿¿0, 0ï¿¿ and gate B inputs ï¿¿1, 0ï¿¿, and so we can expect that these gates will draw log-normally distributed amounts of current with parameters from the first two rows in Table 1, respectively. We can see that the total current consumed by the circuit in this example will be the random variable I T OT AL = LN (0.223, 0.082) + LN (4.578, 3.026) where LN (µ, σ) denotes a log-normally distributed random variable with the given parameters. At present, no closed-form is known for the probability distribution of I T OT AL . However, there are many approximation methods which work well in practice, such as that by Fernandes and Vemuri [5], which we adopted for this paper.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_1"><head>Figure 1 :Figure 2 :</head><label>12</label><figDesc>Figure 1: Example circuit with 2 NAND gates.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_2"><head>Figure 3 :</head><label>3</label><figDesc>Figure 3: Diagram of probability distributions of total circuit leakage current for a clean and Trojan-infected circuit. The probability mass is shifted to the right by the magnitude of the added Trojan current.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_4"><head>Figure 4 :</head><label>4</label><figDesc>Figure 4: The DISTROY front-end applies N randomly chosen test vectors to a CUT, measures corresponding leakage currents, and compresses to M linear combinations.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_5"><head>Figure 5 :Figure 6 :</head><label>56</label><figDesc>Figure 5: double-c17 combines two ISCAS-85 c17s. Double-C17x5 (100 NAND Gates)</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_6"><head>M</head><label></label><figDesc>Figure 7: False positive and negative rates obtained from circuits containing Trojans of size 1 and 5 gates.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_7"><head>Q</head><label></label><figDesc>Figure 8: Using multiple chips fabricated under the same process improves false positive and negative rates.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_0" validated="false"><head>Table 1 : Leakage current mean and standard deviation of a 2- input NAND gate (source: Singh et al. [10]).</head><label>1</label><figDesc></figDesc><table>Input (state) 
µ (nA) 
σ (nA) 
00 
.223 
.082 
01 or 10 
4.578 
3.026 
11 
13.109 
16.785 

</table></figure>
		</body>
		<back>

			<div type="acknowledgement">
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Acknowledgments</head><p>This material is based on research sponsored by Air Force Research Laboratory under agreement numbers FA8750-10-2-0115 and FA8750-10-2-0180. The U.S. Government is authorized to reproduce and distribute reprints for Governmental purposes notwithstanding any copyright notation thereon. The views and conclusions contained herein are those of the authors and should not be interpreted as necessarily representing the official policies or endorsements, either expressed or implied, of Air Force Research Laboratory or the U.S. Government. The authors would like to thank the Office of the Secretary of Defense (OSD/ASD(R&amp;E)/RD/IS&amp;CS) for their guidance and support of this research. In addition, we'd like to thank our HotSec'11 reviewers for their helpful comments.</p></div>
			</div>

			<div type="references">

				<listBibl>

<biblStruct xml:id="b0">
	<analytic>
		<title level="a" type="main">Trojan Detection Using IC Fingerprinting</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Agrawal</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Baktir</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Karakoyunlu</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Rohatgi</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><surname>And</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Sunar</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">B</forename></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">IEEE Symposium on Security and Privacy</title>
		<imprint>
			<date type="published" when="2007" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b1">
	<analytic>
		<title level="a" type="main">Consistency-based characterization for IC Trojan detection</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Alkabani</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Y</forename><surname>And</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Koushanfar</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">F</forename></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. of ICCAD</title>
		<meeting>of ICCAD</meeting>
		<imprint>
			<date type="published" when="2009" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b2">
	<analytic>
		<title/>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Baraniuk</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><forename type="middle">G</forename><surname>Sensing</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Lecture Notes in IEEE Signal Processing Magazine</title>
		<imprint>
			<biblScope unit="volume">24</biblScope>
			<biblScope unit="issue">4</biblScope>
			<date type="published" when="2007-07" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b3">
	<analytic>
		<title level="a" type="main">An Introduction To Compressive Sampling</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Candéscand´candés</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">E</forename><forename type="middle">J</forename><surname>And</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Wakin</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><forename type="middle">B</forename></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE Sig. Proc. Mag</title>
		<imprint>
			<biblScope unit="volume">25</biblScope>
			<biblScope unit="page" from="21" to="30" />
			<date type="published" when="2008" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b4">
	<analytic>
		<title level="a" type="main">Accurate estimation of vector dependent leakage power in the presence of process variations</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Fernandes</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>And</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Vemuri</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. of ICCD</title>
		<meeting>of ICCD</meeting>
		<imprint>
			<date type="published" when="2009" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b5">
	<analytic>
		<title level="a" type="main">Unveiling the ISCAS-85 Benchmarks: A Case Study in Reverse Engineering</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><forename type="middle">C</forename><surname>Hansen</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">H</forename><surname>Yalcin</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Hayes</forename><surname>And</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><forename type="middle">P</forename></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE Design &amp; Test</title>
		<imprint>
			<biblScope unit="volume">16</biblScope>
			<biblScope unit="page" from="72" to="80" />
			<date type="published" when="1999-07" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b6">
	<analytic>
		<title level="a" type="main">Overcoming an Untrusted Computing Base: Detecting and Removing Malicious Hardware Automatically</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Hicks</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Finnicum</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>King</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><forename type="middle">T</forename><surname>Martin</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><forename type="middle">M K</forename><surname>And</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Smith</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><forename type="middle">M</forename></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">IEEE Symposium on Security and Privacy (Oakland)</title>
		<imprint>
			<date type="published" when="2010" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b7">
	<analytic>
		<title level="a" type="main">Moats and Drawbridges: An Isolation Primitive for Reconfigurable Hardware Based Systems</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Huffmire</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><surname>Brotherton</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">B</forename><surname>Wang</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">G</forename><surname>Sherwood</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><surname>Kastner</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Levin</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><forename type="middle">E</forename><surname>Nguyen</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><forename type="middle">D</forename><surname>And</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Irvine</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><forename type="middle">E</forename></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">IEEE Symposium on Security and Privacy</title>
		<meeting><address><addrLine>Oakland</addrLine></address></meeting>
		<imprint>
			<date type="published" when="2007" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b8">
	<monogr>
		<title level="m" type="main">SVD-Based Ghost Circuitry Detection</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Nelson</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Nahapetian</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Koushanfar</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">F</forename><surname>And</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Potkonjak</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename></persName>
		</author>
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b9">
	<monogr>
		<title/>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Springer-Verlag</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2009" />
			<biblScope unit="page" from="221" to="234" />
			<pubPlace>Berlin, Heidelberg</pubPlace>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b10">
	<analytic>
		<title level="a" type="main">Minimum Leakage Vector Computation Using Weighted Partial MaxSAT</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Singh</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Gulati</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">K</forename><surname>And</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Khatri</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">IEEE Midwest Symposium on Circuits and Systems</title>
		<imprint>
			<date type="published" when="2010" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b11">
	<analytic>
		<title level="a" type="main">Defeating UCI: Building Stealthy and Malicious Hardware</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Sturton</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><surname>Hicks</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Wagner</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>And</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">King</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><forename type="middle">T</forename></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">IEEE Symposium on Security and Privacy</title>
		<meeting><address><addrLine>Oakland</addrLine></address></meeting>
		<imprint>
			<date type="published" when="2011" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b12">
	<analytic>
		<title level="a" type="main">Silencing Hardware Backdoors</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Waksman</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>And</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Sethumadhavan</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">IEEE Symposium on Security and Privacy</title>
		<meeting><address><addrLine>Oakland</addrLine></address></meeting>
		<imprint>
			<date type="published" when="2011" />
		</imprint>
	</monogr>
</biblStruct>

				</listBibl>
			</div>
		</back>
	</text>
</TEI>
