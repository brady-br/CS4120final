<?xml version="1.0" encoding="UTF-8"?>
<TEI xmlns="http://www.tei-c.org/ns/1.0" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
xsi:schemaLocation="http://www.tei-c.org/ns/1.0 /Users/atharsefid/Desktop/grobid-0.5.3/grobid-home/schemas/xsd/Grobid.xsd"
 xmlns:xlink="http://www.w3.org/1999/xlink">
	<teiHeader xml:lang="en">
		<encodingDesc>
			<appInfo>
				<application version="0.5.3" ident="GROBID" when="2020-09-29T04:02+0000">
					<ref target="https://github.com/kermitt2/grobid">GROBID - A machine learning software for extracting information from scholarly documents</ref>
				</application>
			</appInfo>
		</encodingDesc>
		<fileDesc>
			<titleStmt>
				<title level="a" type="main">CANvas: Fast and Inexpensive Automotive Network Mapping CANvas: Fast and Inexpensive Automotive Network Mapping</title>
			</titleStmt>
			<publicationStmt>
				<publisher/>
				<availability status="unknown"><licence/></availability>
				<date>August 14-16, 2019</date>
			</publicationStmt>
			<sourceDesc>
				<biblStruct>
					<analytic>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Sekar</forename><surname>Kulandaivel</surname></persName>
							<affiliation key="aff0">
								<orgName type="institution" key="instit1">Carnegie Mellon University</orgName>
								<orgName type="institution" key="instit2">Carnegie Mellon University</orgName>
								<orgName type="institution" key="instit3">Carnegie Mellon University</orgName>
								<orgName type="institution" key="instit4">Carnegie Mellon University</orgName>
								<orgName type="institution" key="instit5">Carnegie Mellon University</orgName>
							</affiliation>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Tushar</forename><surname>Goyal</surname></persName>
							<email>tgoyal1@alumni.cmu.edu</email>
							<affiliation key="aff0">
								<orgName type="institution" key="instit1">Carnegie Mellon University</orgName>
								<orgName type="institution" key="instit2">Carnegie Mellon University</orgName>
								<orgName type="institution" key="instit3">Carnegie Mellon University</orgName>
								<orgName type="institution" key="instit4">Carnegie Mellon University</orgName>
								<orgName type="institution" key="instit5">Carnegie Mellon University</orgName>
							</affiliation>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Arnav</forename><forename type="middle">Kumar</forename><surname>Agrawal</surname></persName>
							<email>akagrawa@alumni.cmu.edu</email>
							<affiliation key="aff0">
								<orgName type="institution" key="instit1">Carnegie Mellon University</orgName>
								<orgName type="institution" key="instit2">Carnegie Mellon University</orgName>
								<orgName type="institution" key="instit3">Carnegie Mellon University</orgName>
								<orgName type="institution" key="instit4">Carnegie Mellon University</orgName>
								<orgName type="institution" key="instit5">Carnegie Mellon University</orgName>
							</affiliation>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Vyas</forename><surname>Sekar</surname></persName>
							<email>vsekar@andrew.cmu.edu</email>
							<affiliation key="aff0">
								<orgName type="institution" key="instit1">Carnegie Mellon University</orgName>
								<orgName type="institution" key="instit2">Carnegie Mellon University</orgName>
								<orgName type="institution" key="instit3">Carnegie Mellon University</orgName>
								<orgName type="institution" key="instit4">Carnegie Mellon University</orgName>
								<orgName type="institution" key="instit5">Carnegie Mellon University</orgName>
							</affiliation>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Sekar</forename><surname>Kulandaivel</surname></persName>
							<affiliation key="aff0">
								<orgName type="institution" key="instit1">Carnegie Mellon University</orgName>
								<orgName type="institution" key="instit2">Carnegie Mellon University</orgName>
								<orgName type="institution" key="instit3">Carnegie Mellon University</orgName>
								<orgName type="institution" key="instit4">Carnegie Mellon University</orgName>
								<orgName type="institution" key="instit5">Carnegie Mellon University</orgName>
							</affiliation>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Tushar</forename><surname>Goyal</surname></persName>
							<affiliation key="aff0">
								<orgName type="institution" key="instit1">Carnegie Mellon University</orgName>
								<orgName type="institution" key="instit2">Carnegie Mellon University</orgName>
								<orgName type="institution" key="instit3">Carnegie Mellon University</orgName>
								<orgName type="institution" key="instit4">Carnegie Mellon University</orgName>
								<orgName type="institution" key="instit5">Carnegie Mellon University</orgName>
							</affiliation>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Arnav</forename><forename type="middle">Kumar</forename><surname>Agrawal</surname></persName>
							<affiliation key="aff0">
								<orgName type="institution" key="instit1">Carnegie Mellon University</orgName>
								<orgName type="institution" key="instit2">Carnegie Mellon University</orgName>
								<orgName type="institution" key="instit3">Carnegie Mellon University</orgName>
								<orgName type="institution" key="instit4">Carnegie Mellon University</orgName>
								<orgName type="institution" key="instit5">Carnegie Mellon University</orgName>
							</affiliation>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Vyas</forename><surname>Sekar</surname></persName>
							<affiliation key="aff0">
								<orgName type="institution" key="instit1">Carnegie Mellon University</orgName>
								<orgName type="institution" key="instit2">Carnegie Mellon University</orgName>
								<orgName type="institution" key="instit3">Carnegie Mellon University</orgName>
								<orgName type="institution" key="instit4">Carnegie Mellon University</orgName>
								<orgName type="institution" key="instit5">Carnegie Mellon University</orgName>
							</affiliation>
						</author>
						<title level="a" type="main">CANvas: Fast and Inexpensive Automotive Network Mapping CANvas: Fast and Inexpensive Automotive Network Mapping</title>
					</analytic>
					<monogr>
						<title level="m">Proceedings of the 28th USENIX Security Symposium</title>
						<meeting>the 28th USENIX Security Symposium <address><addrLine>Santa Clara, CA, USA</addrLine></address>
						</meeting>
						<imprint>
							<date type="published">August 14-16, 2019</date>
						</imprint>
					</monogr>
					<note>This paper is included in the 978-1-939133-06-9 Open access to the Proceedings of the 28th USENIX Security Symposium is sponsored by USENIX. https://www.usenix.org/conference/usenixsecurity19/presentation/kulandaivel</note>
				</biblStruct>
			</sourceDesc>
		</fileDesc>
		<profileDesc>
			<abstract>
				<p>Modern vehicles contain tens of Electronic Control Units (ECUs), several of which communicate over the Controller Area Network (CAN) protocol. As such, in-vehicle networks have become a prime target for automotive network attacks. To understand the security of these networks, we argue that we need tools analogous to network mappers for traditional networks that provide an in-depth understanding of a network&apos;s structure. To this end, our goal is to develop an automotive network mapping tool that assists in identifying a vehicle&apos;s ECUs and their communication with each other. A significant challenge in designing this tool is the broadcast nature of the CAN protocol, as network messages contain no information about their sender or recipients. To address this challenge, we design and implement CANvas, an automotive network map-per that identifies transmitting ECUs with a pairwise clock offset tracking algorithm and identifies receiving ECUs with a forced ECU isolation technique. CANvas generates network maps in under an hour that identify a previously unknown ECU in a 2009 Toyota Prius and identify lenient message filters in a 2017 Ford Focus.</p>
			</abstract>
		</profileDesc>
	</teiHeader>
	<text xml:lang="en">
		<body>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="1">Introduction</head><p>Recent efforts have demonstrated numerous vulnerabilities in automotive networks, particularly those that employ the CAN communication protocol. Although CAN is the prevailing standard for intra-vehicular communication due to its low cost and robustness, its broadcast nature has enabled many exploits initially exposed by the early work of Koscher et al. <ref type="bibr" target="#b16">[20]</ref>. These exploits target the intra-vehicular CAN bus via either direct physical access <ref type="bibr" target="#b5">[9,</ref><ref type="bibr" target="#b16">20]</ref> or the remote exploitation of an ECU with existing direct access <ref type="bibr" target="#b24">[26]</ref>. For the purpose of planning their well-known exploit <ref type="bibr" target="#b24">[26]</ref>, Miller et al. <ref type="bibr" target="#b23">[25]</ref> analyzed the intra-vehicular networks of several vehicles, which revealed that the 2014 Jeep Cherokee was the "most hackable" based on its layout of ECUs. Once the authors gained access to the CAN via an exploited ECU, they simply had to discover which ECUs and real physical functions react to injected messages.</p><p>From these anecdotes, we can see that the set of ECUs and their inter-ECU communication channels determine the vulnerability of a vehicle's ECU network. Consequently, we argue that the automotive security world needs tools similar to Nmap <ref type="bibr" target="#b17">[21]</ref>, which are used to map the structure of modern IP networks. Such mapping tools prove useful in both attack and defense scenarios, such as identifying potentially malicious servers, attesting server configurations, and auditing firewalls by identifying available network connections. Analogously, with such a tool for scanning a car's network, we could (1) discover potentially malicious ECUs inserted through an attacker, (2) attest to the network configuration of ECUs over time, and (3) identify potential ECUs that are vulnerable to a recent type of attack ( §2).</p><p>To aid in these scenarios, an ideal network mapper would require three main outputs: (1) the transmitting ECU for each unique CAN message, (2) the set of receiving ECUs for each unique CAN message and (3) a list of all active ECUs in the vehicle. To ensure that our network mapper is practical for our envisioned use cases, we ideally want our tool to be (a) fast to permit analysis of multiple vehicles at a time and limit the time a vehicle must be running and (b) inexpensive to avoid requiring costly equipment such as an oscilloscope or logic analyzer.</p><p>Unfortunately, extracting the necessary information to map these communication channels requires an unreasonable amount of effort. In the work by <ref type="bibr">Koscher et al. [20]</ref>, the authors analyzed the security of a vehicle's components by manually extracting ECUs to isolate and interact with them. This type of analysis requires significant time and effort or access to limited or proprietary information <ref type="bibr" target="#b23">[25]</ref>. Second, obtaining vehicles for extended time and with permission to disassemble is costly and expensive. Considering new model years and over-the-air update capabilities, the frequency of analyzing an intra-vehicular network will quickly increase in time and cost requirements.</p><p>A key challenge we face in realizing this vision in practice is the lack of source information in CAN messages. CAN messages are "contents-addressed," i.e. messages are labeled based on their data and provide no indication to the message's sender. Another significant challenge in mapping a CAN bus is the broadcast nature of the CAN protocol; we cannot tell which ECUs have received a message. A CAN message is not explicitly addressed to its recipients, but a node can indicate it has correctly received a message ( §3).</p><p>In this paper, we present CANvas, a system that demonstrates a fast and inexpensive automotive network mapper without resorting to vehicle disassembly ( §4). Rather than require physically isolating each ECU, our key insight is to extract message information by re-purposing two observations from prior work:</p><p>• Identifying message source ( §5): Prior work by Cho et al. <ref type="bibr" target="#b7">[11]</ref> state that clock skew is a unique characteristic to a given ECU and thus build an intrusion detection system (IDS) that measures this skew from the timestamps of periodic CAN messages. Using this insight, we envision a mapper that computes clock skew per unique message and uses skew to group messages from the same sender.</p><p>Unfortunately, due to shortcomings of their approach in our mapping context, we instead track the clock offset of two messages over time to determine their source.</p><p>• Identifying message destination(s) ( §6): In another prior work <ref type="bibr" target="#b6">[10]</ref>, the authors propose a denial-of-service (DoS) attack that exploits CAN's error-handling protocol to disable a target ECU. Using this insight, the mapper could disable all but one ECU via this DoS attack and observe what messages are correctly received by the isolated ECU. However, due to shortcomings in their method w.r.t. our context, we develop a method to forcefully isolate each ECU and detect which messages the ECU receives despite the broadcast nature of CAN.</p><p>We implement the CANvas mapper on the open-source Arduino Due microcontroller with a clock speed of 84 MHz and an on-board CAN controller. We evaluate our mapper on five real vehicles <ref type="bibr" target="#b17">(2009</ref><ref type="bibr">Toyota Prius, 2017</ref><ref type="bibr">Ford Focus, 2008</ref><ref type="bibr">Ford Escape, 2010</ref><ref type="bibr">Toyota Prius, and 2013</ref> and on extracted ECUs from three Ford vehicles. We show that CANvas accurately identifies ECUs in the network and the source and destinations of each unique CAN message in under an hour ( §7).</p><p>Contributions and roadmap: In summary, this paper makes the following contributions:</p><p>• Designing an accurate message source identification algorithm that tracks a message's relative clock offset ( §5); • Engineering a reliable message destination identification method by isolating ECUs with a forced shutdown technique ( §6); • A real implementation that maps five real vehicles and extracted ECUs ( §7) along with two real examples of motivating use cases for mapping ( §2). After defining the automotive network mapping problem and describing typical CAN bus setups ( §3), we highlight the challenges of identifying message information via the CAN protocol and provide an overview of our approach ( §4). Finally, we discuss open issues and limitations ( §8) and related work ( §9) before concluding the paper ( §10).</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2">Motivation</head><p>In this section, we discuss motivating scenarios for mapping in the context of intra-vehicular networks and describe characteristics of an ideal version of this security tool. To guide our design, we draw an analogy to Nmap <ref type="bibr" target="#b17">[21]</ref>, a popular network scanning tool that discovers hosts, services, and their interconnections in traditional computer networks. We identify a number of automotive-specific scenarios to illustrate the potential benefits of mapping, although this is not meant to be a comprehensive list.</p><p>Malicious ECU discovery: One main feature of Nmap is its ability to discover hosts, i.e. enumerate devices on the network. In the context of automotive networks, these "devices" are equivalent to a vehicle's ECUs. One major automotive cybersecurity concern (depicted in <ref type="figure" target="#fig_0">Figure 1</ref>) is the potential for an attacker to gain access to a physical network and add a new device <ref type="bibr" target="#b24">[26]</ref>, which could be a malicious ECU installed by an untrusted party or even by a vehicle owner who installs a CAN-enabled device purchased from an untrusted source. For an attacker that aims to insert this ECU into the network under the guise of a new equipment installation, the ECU could connect to the existing CAN bus and gain unfettered access to the CAN. If a defender performs a mapping through the vehicle's lifetime, they could verify changes to the network's ECUs. We provide an example of this scenario in §7 where we discover a previously unknown ECU that was installed in a modified 2009 Toyota Prius.    <ref type="figure">Figure 3</ref>: Assume that only the instrument cluster should receive messages from the engine. If the exploited telematics ECU is able to receive engine messages, then an attacker <ref type="bibr" target="#b6">[10]</ref> could shutdown the engine ECU via the exploited telematics ECU.</p><p>different features in an existing vehicle. As the configuration of the network can change over time, it is necessary for vehicle owners to attest to the vehicle's expected configuration. If a user does not own the vehicle over its lifetime as in the malicious ECU discovery scenario, we could implement an online database where vehicle owners could upload the outputs of their network maps for comparison against maps generated from brand-new vehicles. Any differences from the expected maps could indicate malicious or accidental network changes.</p><p>Lenient filter identification: Nmap is often used to perform port scanning to identify open ports <ref type="bibr" target="#b17">[21]</ref>, which are potential vulnerabilities. These "open ports" are analogous to the set of CAN messages that an ECU is able to correctly receive, which we refer to as the ECU's message-receive filter. Now consider an attacker who aims to target a safety-critical ECU (e.g. engine ECU) as depicted in <ref type="figure">Figure 3</ref>. If gaining direct access to the engine ECU proves infeasible, the attacker could access an ECU that is less critical and potentially has access to remote networks (e.g. telematics ECU). Using the ECU shutdown attack as discussed in recent work <ref type="bibr" target="#b6">[10]</ref>, our attacker can shutdown the engine ECU by gaining control of the telematics ECU and reprogramming it; the attacker simply needs to receive a message from the victim ECU to target it. To combat this, a defender could perform a similar analysis via network mapping and implement filters that prevent the message from being received to limit the damage from a potential shutdown attack. We provide an example of this scenario in §7 where we discover lenient message-receive filters in a 2017 Ford Focus.</p><p>Goals: In designing a useful automotive network mapper, we must consider a few requirements that we impose to ensure practicality in the context of our motivating scenarios: Fast: First, we want to limit the amount of time a vehicle (and its ECUs) are turned on. Also, a fast mapping process will make it more practical for a user to verify the state of their vehicle's network after a repair. Considering these reasons, we aim to achieve a mapping time of under one hour.</p><p>Inexpensive: To permit greater access to the mapper, the mapper should consist of relatively inexpensive components and should avoid expensive tools, such as oscilloscopes and logic analyzers. We aim to limit costs to under $100; a lowcost approach to network mapping will permit more users for our system.</p><p>Vehicle-agnostic: Every vehicle has a different setup of ECUs on the CAN bus and can employ additional features of the CAN protocol. For our mapper to be practical, it must work on many makes and models of vehicles as well as rely on only standard CAN features.</p><p>Minimally-intrusive and non-destructive: One extreme approach for mapping a vehicle requires physical disassembly, which is a very intrusive process and requires a great deal of access to the target vehicle. We should limit this access to simply connecting to a diagnostics port on the vehicle. If a CAN bus is not exposed on this port, we describe a method of getting access to these buses with minimal disassembly in §8. Additionally, the mapper must not cause any permanent damage to the vehicle or its network. Any of our methods can put the network into a non-ideal state (warning lights on, gear shift disabled, etc.), but as long as restarting the vehicle undoes any imposed errors, we satisfy this constraint.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3">Problem Overview</head><p>In this section, we give a concrete problem formulation for the network mapper and discuss technical challenges. We preface with some necessary background on CAN to understand the overall problem and mapping challenges.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.1">CAN basics</head><p>To better understand the message information we hope to gain using a network mapper and the associated challenges in acquiring that information, we first discuss some necessary background on how the CAN protocol works. CAN in modern vehicles: All vehicles produced for the U.S. market in 2008 and after are required to implement the CAN protocol for diagnostics purposes <ref type="bibr">[4]</ref>. Many vehicles will often employ either one, two or three CAN buses. In the event of three CAN buses, it is likely that the vehicle has one bus for powertrain components (engine, transmission, etc.),</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>USENIX Association</head><p>28th USENIX Security Symposium 391</p><formula xml:id="formula_0">S O F Arbitration ID R T R I D E r 0 D L C DATA C R C ACK E O F I F S</formula><p>As ECUs lose arbitration, a single transmitter will win Single arbitration winner transmits its data ECUs that correctly receive this message will set the ACK bit <ref type="figure">Figure 4</ref>: Each CAN frame is transmitted on the bus bit-by-bit. A single transmitter wins arbitration and will listen to receiving ECUs during the ACK slot.</p><p>one bus for infotainment components (radio, etc.) and another for body components (door controller, headlights, etc.). These CAN buses are usually exposed through a vehicle's On-Board Diagnostics (OBD-II) port as detailed in §8.</p><p>Message broadcast bus: The CAN protocol <ref type="bibr">[13-15, 32, 33]</ref> is defined as a message broadcast bus, which means that ECUs in the network communicate with each other via messages. These ECUs are connected to a shared network where all ECUs can receive all transmissions. Due to the nature of this broadcast bus, it is not possible to send a message to a specific ECU. In the CAN protocol, after a message is broadcast to the network, devices that correctly receive this message will acknowledge their reception.</p><p>Typical CAN setup: A typical CAN setup for a vehicle will grant each ECU with a unique set of IDs and each message will be labeled with an ID, which is then transmitted onto the bus. An ECU will be responsible for a subset of the message IDs seen in the network, and each message ID will only be sent by a single ECU. Each message is queued by a software task, process or interrupt handler on the ECU, and each ECU will queue a message when the message's associated event occurs.</p><p>CAN frame format: Each CAN message from an ECU uses its assigned message ID (interchangeably referred to as the ID or the arbitration ID), which determines its priority on the CAN bus and may serve as an identifier for the message's contents. These messages are transmitted and received at the physical layer by an ECU's CAN controller as CAN data frames in the format depicted in <ref type="figure">Figure 4</ref>. The key fields in the CAN data frame, as relevant to our work, are: the start-of-frame (SOF) bit, the arbitration/message ID field, the acknowledgement (ACK) slot and the end-of-frame (EOF) bits.</p><p>All ECUs in the network with a queued message simultaneously start to transmit their message at the same time. During the arbitration ID field, all but one ECU will eventually stop transmitting based on CAN's arbitration resolution. Once an ECU has won arbitration on the bus, it will be the only sender and transmit the remainder of the CAN data frame until the ACK slot. During the ACK slot, the transmitter now becomes  a receiver on the bus and all other ECUs in the network that correctly receive a message will simultaneously send a dominant bit on the network. This slot is then followed by the EOF and the inter-frame space (IFS).</p><p>Message arbitration: To understand how ECUs communicate on the CAN bus, it is necessary to discuss the CAN message arbitration process <ref type="bibr" target="#b9">[13]</ref><ref type="bibr" target="#b10">[14]</ref><ref type="bibr" target="#b11">[15]</ref><ref type="bibr" target="#b31">33]</ref>. CAN is designed to support collision detection and bit-wise arbitration on message priority to allow higher-priority messages to dominate the network. The arbitration of these messages is performed on the message ID field of a data frame, where a lower ID indicates a higher priority. This priority-based arbitration process sets a 0-bit as dominant and a 1-bit as recessive. Since a 0-bit is dominant, a message with a lower ID will get priority on the CAN bus and will be sent before a message with a higher ID that is queued at the same time.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.2">Mapping requirements</head><p>Unlike most traditional packet-switched networks, CAN messages do not have fields that identify the message's source and destination(s), which makes the mapping problem difficult. To develop a mapper that will aid in the motivating scenarios of §2, we formulate three required outputs for CANvas:</p><p>ECU enumeration: The importance of enumerating ECUs is evident in all of our provided scenarios as seen in <ref type="table" target="#tab_2">Table 1</ref>; enumeration highlights new or absent ECUs. Note that in all of these scenarios, it is not necessary to know an ECU's type (engine, transmission, etc.) or its functionality (fan speed control, tire pressure sensing, etc.).</p><p>Formally, let E i denote ECU i in a given vehicle that contains n total ECUs that are CAN-enabled. For each E i in a vehicle's set of ECUs, E 1:n , the ECU is responsible for sending a specific set of m messages labeled with a unique arbitration ID from the set, I E i ,1:m . This set of IDs is unique to E i and no other ECU in the network should send the same ID. Given a CAN traffic dump from a vehicle, CANvas' enumerator should determine the number of ECUs, n, and differentiate between them to determine the set of ECUs E 1:n for that particular vehicle.</p><p>Message source identification ( §5): In the malicious ECU discovery and continuous network attestation scenarios, changes to the set of transmitted messages for each ECU can pinpoint a potentially malicious reconfiguration. This means that a goal for our mapper is to map each message ID to its source ECU.</p><p>Formally, given a CAN traffic dump from which we extract the set of uniquely-ID'd messages where l is the number of total unique message/arbitration IDs and I 1:l is the set of unique IDs, we should be able to determine which ECU E i sent each unique message. This step is very closely related to ECU enumeration; once we know which ECU E i that an arbitrary ID I j originates from, we can produce a mapping of the ID to its source ECU, I j ∈ E i . Using this mapping, we can group the IDs with a common source ECU and complete our enumeration.</p><p>Message destination identification ( §6): For the continuous network attestation scenario, we want to look for changes in what messages an ECU correctly receives as this could also indicate a potentially malicious reconfiguration. This component plays an important role in the lenient filter identification scenario, where an attacker could shutdown an ECU from an unintended message recipient.</p><p>We assume that at least one ECU in the network will correctly receive each message in the network. Formally, given the set of l unique IDs, I 1:l , from a traffic dump, we should be able to determine the set of ECUs, E 1:k , that correctly receive a message labeled with an arbitrary I j . The expected output of this component should be a mapping of an ID to its destination ECUs, I j,E 1:k .</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.3">Challenges in an automotive context</head><p>However, to achieve these mapping goals, we encounter two major challenges to determining the source and destination ECUs for CAN messages: (a) CAN lacks identifying source information and (b) CAN implements a broadcast protocol, which naturally implies that all nodes receive all messages. We discuss how we approach and solve these challenges in §5 and §6.</p><p>Lack of source information: If a message sent from ECU E i has no identifying information, then it is non-trivial to determine that E i sent the message. Since CAN messages are considered to be "contents-addressed" <ref type="bibr" target="#b9">[13]</ref><ref type="bibr" target="#b10">[14]</ref><ref type="bibr" target="#b11">[15]</ref><ref type="bibr" target="#b31">33]</ref>, the value of the message ID is only related to the message's data and priority. In practice, the source ECU has no weight in determining the chosen arbitration ID for a particular message.</p><p>Broadcast protocol: We define destination as an ECU that correctly receives a message at the CAN controller level. Unfortunately, determining which ECUs correctly receive a message is non-trivial as an ECU connected to the CAN bus cannot detect which of its messages are received by certain ECUs. The ACK bit itself only indicates that some ECU has received the message, not which particular ECU(s) have received it. As multiple ECUs will set the ACK bit when a message is received, we cannot simply use this ACK bit to determine the set of ECUs E 1:k that receive an arbitrary I j .</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4">System Overview</head><p>In this section, we provide a high-level overview of the CANvas network mapper. Generate full network map 10</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Record</head><p>Figure 5: CANvas obtains source mapping results by step 4. Then, it will enumerate the ECUs in step 5.</p><p>CANvas then performs destination mapping and generates the full map at step 10.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.1">High-level idea</head><p>CANvas mapping overview: We split CANvas into two main components: (1) a source mapper and (2) a destination mapper.</p><p>As detailed in §3, we satisfy our ECU enumeration requirement by simply using the output of source mapping. For (1), we passively collect several minutes of CAN traffic. After an offline data collection, the source mapper uses the data to produce a mapping of each unique CAN ID to its source ECU and subsequently, by grouping IDs with a shared source, a list of all active source ECUs on the bus. For (2), we interact with the network directly and perform an online analysis to determine message destination. CANvas systematically isolates each ECU, which will most likely cause the vehicle to enter a temporary error state that the user can reset.</p><p>User capabilities: We assume that the user has access to the OBD-II port of the vehicle and can connect the CANvas mapper directly to the CAN bus with the ability to read and write to the bus. We also assume that the vehicle even has a CAN bus and that the standard CAN protocol is implemented, which most vehicles will reflect <ref type="bibr" target="#b7">[11]</ref>. The user should also be able to transition the vehicle's ignition switch between the LOCK, ACC and ON positions as the user will have to reset the vehicle after each iteration to exit the error state.</p><p>Scope and evasion: We assume that the vehicle does not implement countermeasures that will alter timing of message transmissions, potentially to prevent intruders from identifying transmitting ECUs. We also assume that the vehicle cannot identify a maliciously-triggered error and prevent intruders from abusing CAN's error-handling protocol to shutdown an ECU. The vehicle should not employ an intrusion detection system capable of preventing an ECU suspension. We further discuss adversarial evasion and other scenarios for bus configurations in §8.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.2">CANvas workflow</head><p>The workflow of CANvas involves four major steps seen in 1. Data collection: The CAN pins of the OBD-II port provide access to the frame-level signals and the message-level data. CANvas will read this traffic for several minutes and timestamp each received message. From this traffic, we will obtain the set of unique message IDs observed in the network and a set of timestamped data for each ID. 2. Source mapping: With the list of all unique message IDs, the source mapper will extract the timestamped CAN traffic for each ID and determine which IDs share the same source as detailed in §5. To do this, we select two message IDs and run their CAN traffic through our comparison algorithm, which will determine if the two IDs originate from the same ECU. 3. ECU enumeration: Using the set of matching ID pairs from source mapping, the enumerator will simply group pairs that originate from the same ECU. The output of this step will be a list of ECUs and associated source IDs. 4. Destination mapping: Using the ECU enumeration output, the destination mapper will identify the ECUs that correctly receive a given message ID. CANvas will isolate a target ECU by performing a shutdown on all other ECUs, which we discuss in §6. Once an ECU is isolated, we inject all unique observed message IDs and determine which ECUs receive the message.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5">ID Source Mapping</head><p>In this section, we describe an approach to map each CAN message to its source.</p><p>Intuition: Due to the absence of source information in a CAN message, we must rely on some uniquely identifying characteristic that can be tied to a particular ECU. Following observations from prior work <ref type="bibr" target="#b7">[11,</ref><ref type="bibr" target="#b27">29]</ref> and CAN documentation <ref type="bibr">[2,</ref><ref type="bibr" target="#b10">14]</ref>, we consider clock skew as a candidate fingerprinting mechanism. In particular, time instants for in-vehicle ECUs rely on a quartz crystal clock <ref type="bibr" target="#b10">[14]</ref>, and we can use the relationship between these clocks to identify a transmitting ECU. We first define the following terms considering two clocks, C 1 and C 2 :</p><p>• Clock frequency:  ered to be synchronized, and two clocks with a nonzero relative clock skew are said to "skew apart," or have an increasing relative offset over time <ref type="bibr">[2]</ref>. Since the CAN protocol does not implement a global clock, it is considered to be unsynchronized as each ECU relies on its own local clock.</p><p>Observation 1: The clock offset and skew of an ECU relative to any other ECU is distinct, thus providing us with a uniquely identifying characteristic for source mapping.</p><p>High-level idea: To map each unique ID to its transmitting ECU, we break the module into two steps as <ref type="figure" target="#fig_4">Figure 6</ref> illustrates: (1) computing either the skew skewf (I i ) or offset offsetf (I i ) of each ID I i and (2) then clustering IDs with the same skew or offset where each cluster denotes a distinct source ECU, E src . This module outputs a mapping of source ECUs to their set of source IDs. The main input to this module is a passively-logged CAN traffic dump, which contains entries in the form of (I i ,t I i ,n ) where I i is the ID of the message and t I i ,n is the timestamp of the n th occurrence of I i .</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5.1">Prior work and limitations</head><p>Cho et al. <ref type="bibr" target="#b7">[11]</ref> use clock skew as a means of building an intrusion detection mechanism to identify an attack by a malicious ECU. Specifically, this work uses timestamps of periodicallyreceived message IDs and posit that IDs with the same skew originate from the same ECU.</p><p>To compute the clock skew of an ID I i over time, Cho et al. <ref type="bibr" target="#b7">[11]</ref> perform the following steps: <ref type="formula" target="#formula_1">(1)</ref>  </p><formula xml:id="formula_1">skewf Cho i (N) = kO i kN = O i N<label>(1)</label></formula><p>As an extension to this work, Sagong et al. <ref type="bibr" target="#b27">[29]</ref> note that the skew of Equation 1 varies significantly based on N and use Sa mpl es 0x262 0x4C8 0x521</p><p>Figure 7: E A transmits IDs 0x570, 0x571 and 0x572 at the same period and E B transmits IDs 0x262, 0x4C8 and 0x521 at different periods. Above are plots of accumulated clock offset vs. samples for E A and E B using the algorithm by Cho et al. <ref type="bibr" target="#b7">[11]</ref>.</p><p>an updated formula for S I i w.r.t. batch size:</p><formula xml:id="formula_2">skewf Sagong i (N) = N · kO i kN = O i<label>(2)</label></formula><p>Using data from a real vehicle, we now highlight a key limitation of Equations 1 and 2. Consider <ref type="figure">Figure 7</ref>: (1) E A is the source of IDs 0x570, 0x571 and 0x572, which share the same period and (2) E B is the source of IDs 0x262, 0x4C8 and 0x521, which each have different periods. In <ref type="figure">Figure 7</ref>, we use skewf Cho i with N = 20 to plot the skew of all six IDs; skewf Sagong i produces similar results. We can correctly conclude from <ref type="figure">Figure 7</ref> that the IDs of E A originate from a single ECU. However, from <ref type="figure">Figure 7</ref>, we will incorrectly conclude that IDs 0x262, 0x4C8 and 0x521 originate from three separate ECUs. Our analysis and experiments shed light on why these approaches fail-the skew value they compute is perioddependent.</p><p>As such, we update Equations 1 and 2 w.r.t. period T and batch size N:</p><formula xml:id="formula_3">skewf Cho i (N, T ) = kO i kT N = O i T N<label>(3)</label></formula><formula xml:id="formula_4">skewf Sagong i (N, T ) = N · kO i kT N = O i T<label>(4)</label></formula><p>To potentially fix this issue, we can attempt a strawman that is not dependent on period or batch size.</p><formula xml:id="formula_5">skewf Straw i (N, T ) = T N · kO i kT N = O i<label>(5)</label></formula><p>Ideally, accounting for both batch-size and message-period (essentially batch-period, NT ) using Equation 5 should give us a unique value that is common only among IDs from the same ECU. We apply Equation 5 for all I i of a vehicle, and we attempt to establish distinct groupings of the computed skew for each ID, S I i , which would identify which I i share the same E src . Unfortunately, this is a difficult task as I i from the same E src still do not have similar skews. This issue is further demonstrated as S I i varies across different data dumps or even segments of a given dump. Upon further inspection, we find that the measured S I i is affected by the deviation in an ID's period. This deviation in the period, σ p i , is attributed to sources of "noise", i.e. the period of a given message varies due to scheduling, queuing and arbitration delay. We also find that some I i produce S I i with more deviation than others and produce widely-varying skew values, thus making our straw-man solution an unlikely candidate for source mapping.</p><p>Observation 2: We need a method of extracting the clock skew invariant that is: (a) independent of the period of I i and (b) robust to noise in the period.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5.2">Pairwise offset tracking</head><p>Issue with straw-man: In Equation 5, it is clear that, relative to the receiver, this "skew" function computes offset rather than true skew. Following our definitions in §5, a plot of relative offset over time should either be linearly increasing or decreasing if there is a nonzero skew between two clocks. In other words, if the relative skew between an E src and the receiver is non-zero, then we should observe a gradual change in the offset. However, previous work <ref type="bibr" target="#b7">[11,</ref><ref type="bibr" target="#b27">29]</ref> fails to capture this change in offset over time.</p><p>Relative offset as a unique identifier: As mentioned in §5, clock offset and skew of an ECU relative to another ECU is distinct. We must note that the clock offset measured from one ID, I 1 , of an E src may not be the same as the offset of another ID, I 2 , from E src . If the initial transmission time of I 1 differs from that of I 2 , the O I 1 could not equal O I 2 . Rather, the invariant here is the change in relative offset, ∆O I i ; as the skew of E src relative to the receiver is a constant nonzero value, the ∆O I i will be a constant nonzero as well (the derivative of offset is skew).</p><p>By measuring this change in offset, we can uniquely identify an E src , but we must ensure our method of extracting this change in offset is (a) robust to a noisy period and (b) period-independent. To address the issue of noise in the period of I i , p I i , we compute the relative offset between a pair Figure 8: Timeline of two message IDs, I 1 and I 2 , that have periods, p 1 = 7ms and p 2 = 9ms. Their hyper-period occurs every 63ms.</p><p>of two different IDs denoted by O I 1 ,I 2 . By performing this computation pair-wise, we expect O I 1 ,I 2 to have a deviation of approximately 0 if I 1 , I 2 ∈ E src as the sources of noise for I 1 , I 2 should mostly be shared. In reality, this deviation is very close but not exactly equal to 0; we define a practical threshold for this deviation in §7. With a pairwise approach to computing O I 1 ,I 2 and the requirement for a period-independent approach, we face a new challenge: determining at what point in time to observe this relative offset regardless of the period of I 1 or I 2 .</p><p>Observation 3: Compute offset at the hyper-period of I 1 and I 2 , or the least common multiple of their periods.</p><p>Measuring offset at the hyper-period: To guide our algorithm design for computing ∆O I 1 ,I 2 over time, we first model two periodically-transmitted IDs observed on the CAN bus. Consider two IDs, I 1 and I 2 , from the same E src which transmit at a period of p 1 and p 2 , respectively. For example, let p 1 be 7ms and p 2 be 9ms. For now, we assume that the relative offset between I 1 and I 2 is 0. This offset should not change over time as they originate from the same E src . To accurately compute the relative offset of these two IDs, O I 1 ,I 2 , we must select a time instant when the expected offset should also be 0: the hyper-period of I 1 and I 2 , or the least common multiple of p 1 and p 2 . As seen in <ref type="figure">Figure 8</ref>, this time instant occurs at 63ms, or the lcm(7, 9). Therefore, by computing the difference between the times reported from I 1 and I 2 every 63ms, or the hyper-period of I 1 and I 2 , we can track the value of relative offset over time. If this relative offset is a nonzero constant, then the two IDs originate from the same ECU.</p><p>With an input of several minutes of timestamped CAN data to Algorithm 1, we can track relative offset over the timeline of two message IDs. Note that each timestamp has a noise component that stems from scheduling, queuing and arbitration delay. To compare whether two message IDs originate from the same ECU, we first assume that they are sent by separate ECUs. The two message IDs, I 1 and I 2 , have periods, p 1 and p 2 , and they have relative offsets, O I 1 and O I 2 . We draw the following relationships between these variables: </p><formula xml:id="formula_6">∆ I 1 ,I 2 = [ ] 8:</formula><p>while pos I 1 &lt; len(log I 1 ) and pos I 2 &lt; len(log I 2 ) do return true if σ(∆ I 1 ,I 2 ) &lt; threshold else f alse <ref type="bibr">13:</ref> end function</p><p>• p 2 = l p 1 , where l is the ratio of the periods.</p><p>• O I 2 = jO I 1 , where if j=1, then both IDs sent by same ECU; otherwise, they were sent by different ECUs.</p><p>• n = ml, where LCM(n, m) = l as depicted in <ref type="figure">Figure 8</ref>.</p><p>By computing the difference between every n occurrences of I 1 and every m occurrences of I 2 , which occurs at the hyperperiod of I 1 and I 2 , we produce the following equation:</p><formula xml:id="formula_7">O I 1 ,I 2 = (mp 2 + O I 2 + i 2 ) − (np 1 + O I 1 + i 1 )</formula><p>We find that when we average the result of the above equation across the entire data log, the expected value is 0 if I 1 and I 2 originate from the same ECU. In reality, this value is close to 0 due to the deviation of a message's period. From experimental data, we define a threshold of 1ms for the change in relative offset, where a value under the threshold will classify the two IDs with the same source ECU. Using this approach to revisit the setup described in <ref type="figure">Figure 7</ref>, we correctly conclude that IDs 0x262, 0x4C8 and 0x521 originate from the same ECU.</p><p>Practical challenges: While the above approach is correct, there are a number of other practical challenges we need to address to ensure accurate mapping:</p><p>1. Large hyper-period: Consider a hyper-period that is "large", or on the scale of several minutes, e.g. the hyperperiod of p 1 = 980ms and p 2 = 5008ms is over 20 minutes.</p><p>Since we only extract one relative offset value per hyperperiod, we would need hours of CAN traffic to produce a valid result. To ensure that our mapper is fast, this length of traffic log is unreasonable; we want to produce a full network map in under an hour. Fortunately, with a pairwise approach, we can choose to not attempt a comparison when the hyper-period is large; for example, if we assume that the E src of I 1 also transmits another ID, I 3 , where the hyper-period of I 1 and I 3 is small, we can still determine that I 1 , I 3 ∈ E src . 2. Large period deviation, σ p i : In early experiments, we discovered messages that had a large measured σ p i (we define large as σ p i ≥ 0.1p i ) and, at first, assumed that these messages were either aperiodic or sporadic (aperiodic with a hard deadline). However, upon closer inspection, we noticed that these messages appeared to be periodic in nature. We observed three different patterns that altered the measured σ p i : (1) the period simply had a large σ p i , (2) periodic messages would occasionally stop transmitting for some time, and (3) periodic messages were missing their deadlines. With a large enough σ p i , the deviation would conceal an inconstant ∆O I i and make it difficult to detect a mismatch. We experimentally find that a σ p i greater than 8% of p i results in incorrect outputs. Therefore, CANvas will choose to test I i on the following cases when its σ p i is under a defined threshold, which we set to σ p i ≤ 0.08p i from our experiments. 3. Periodic messages that occasionally stop: We find that some I i are periodic and will stop transmitting for some time, causing a measured σ p i to be large. To combat this issue, we only perform pairwise offset tracking when the given message was actively transmitting. In the event we compare two I i that both occasionally stop and there is no overlap of active transmissions, we then rely on our pairwise approach to match the I i to another ID from the same E src . 4. Messages that miss deadlines: For some I i with a large σ p i , we observe two different inter-arrival times: p i and 2p i . When a task on one of the ECUs misses its deadline and cannot produce a message on time, it will skip that cycle and transmit during the next cycle <ref type="bibr">[2]</ref>. Thus, when a deadline is missed, we will observe an inter-arrival time of 2p i . In this situation, there are two options: (1) perform relative offset tracking on portions of the log when deadlines are not missed or (2) interpolate the missed inter-arrival times. If a message frequently misses its deadline, the first option is not viable. To interpolate a missed arrival time, we insert a psuedo-entry in the traffic log with a timestamp equal to the average of the preceding and the following timestamp.</p><p>Factors for mapping time: For source mapping, we experimentally find that 30 minutes of data provides enough samples for larger hyper-periods to map accurately. While this stage has static run-time, the variation in time requirements will be dependent on the number of observed messages IDs. The more message IDs that exist in the network, the longer the mapping time takes; vehicles with more message IDs take longer to complete mapping due to an increase in messagepairs. However, to further reduce mapping time, mapping messages with small periods requires much less traffic data. To save additional time if necessary, it is recommended to reduce the traffic log length for high-frequency messages. Also, if there are few large periodic messages or if those messages are not relevant for whatever reason, the length of the initial traffic log can be reduced as necessary instead of the recommended 30 minutes.  </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="6">ID Destination Mapping</head><p>The goal of the destination mapping module is to accurately associate each ID with its set of receiving ECUs. The key consideration here is to maximize the accuracy of our mappings within our defined time constraint. In this section, we describe an approach to map each CAN message to one or more destination ECUs as defined in §4 and then present a systematic procedure that reliably determines which messages an ECU correctly receives.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="6.1">Problem formulation</head><p>Intuition: As defined in §4, the destination(s) of a particular CAN message are those ECUs who correctly receive a given message. Despite the broadcast nature of CAN, if an ECU does not correctly receive a message, it will not set the ACK bit; however, if other ECUs receive this message, they will set the dominant ACK bit. Unfortunately, an ACK observed by the transmitting ECU only means that some active ECU correctly received the message. Therefore, with multiple active ECUs in the network, we cannot identify which ECUs were the destination for a given message. Consider the scenario in <ref type="figure" target="#fig_8">Figure 9</ref> where there was only one active destination ECU, E dst , in the network other than the transmitting source ECU, E src . For each message sent by E src , a set ACK bit (performed only by E dst ) would indicate that only one ECU received the message: E dst . Thus, in this scenario, E src could simply inject all possible I i and detect which messages have a set ACK bit. The major challenge here is identifying a method of isolating an E dst and "removing" all other ECUs from the network. We define the bare minimum of "removal" as preventing an ECU from participating in the acknowledgement process.</p><p>Observation 4: Our idea for performing this removal is to transition an ECU into an error-state that prevents it from setting the ACK bit for any message. We now introduce the error-handling mechanism for CAN <ref type="bibr">[2,</ref><ref type="bibr" target="#b6">10]</ref>, which follows the state diagram in <ref type="figure" target="#fig_0">Figure 10</ref>. Each ECU has two error counters: one for errors detected as a receiver (the Receive Error Counter, or REC), and another for errors detected as a transmitter (the Transmit Error Counter, or TEC). The TEC increments much faster than the REC as the transmitter is more likely to be at fault; the TEC increments by 8 while the REC increments by 1. If a message is received correctly, the error counter will decrease by 1. We describe the three CAN error-states and, under what conditions, the ECU will transition:</p><p>• Error-active: When an error is detected by an ECU in error-active, it will transmit an active error flag, or 6 dominant bits, that destroy the bus traffic. When either the TEC or REC increments past 127, the ECU transitions to errorpassive.</p><p>• Error-passive: When an error is detected in error-passive, the ECU transmits a passive error flag, or 6 recessive bits, that do not destroy the bus traffic. Once the TEC or REC increases above 255, the ECU goes to bus-off.</p><p>• Bus-off: In this state, the ECU effectively removes itself from the network; it will not transmit anything onto the bus, including setting the ACK bit.</p><p>Thus, it is evident that we can isolate an ECU by transitioning all other ECUs to the bus-off state.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="6.2">Limitations of prior work</head><p>Imposing bus-off state: The challenge in transitioning an ECU to bus-off is to determine what kind of error to produce and how to produce it. We look to previous work <ref type="bibr" target="#b6">[10]</ref> that aims to shutdown an ECU for the purpose of an attack. The authors aim to shutdown an ECU by causing an error in the target ECU. By exploiting the error-handling protocol in CAN, where bus-off effectively removes an ECU from the network, they choose to increment the error counter of a target by causing a bit error. This error occurs when a transmitting ECU reads back each bit it writes; when the actual bit is different, the ECU invokes an error.</p><p>Since only one ECU is expected to win the bus arbitration as detailed in §2, the authors point out that two winners would potentially cause a bit error. For example, suppose that the victim ECU transmits a message with ID 0x262. If the attacker ECU also transmits ID 0x262 at the exact same time as the victim, both ECUs will win arbitration. However, to ensure that the victim has a bit error, the attacker's message will set its DLC, or data length count, to 0 (most practical messages contain at least some data). After a sufficient number of these attack messages, the victim ECU will transition into the busoff state.</p><p>The main challenge here is synchronizing the attack message with the victim message so they both enter arbitration simultaneously. Their insight as depicted in <ref type="figure" target="#fig_0">Figure 11</ref> is to inject a message of higher priority around the time when the victim should transmit. The higher priority message will block the victim until the bus is idle, where it will then transmit. The attacker will load its attack message immediately after the higher priority message is transmitted, thus allowing both the victim and attack message to arbitrate simultaneously. Since there is noise in the true transmission time of the victim's first attempt at transmitting, there is a chance that the attacker will need to make multiple attempts to cause an error. The number of injection attempts needed to cause a single bit error, κ, is defined as the following where I is a confidence attack parameter (high parameter value means higher confidence in attack), σ p v is the jitter deviation of the victim's period, and S bus is the speed of the bus in Kbps:</p><formula xml:id="formula_8">κ = 2 √ 2Iσ p v S bus 124 (6)</formula><p>The authors state that only one of these injections is needed to cause a bit error if setting I = 3 and at most 2 if setting I = 4, given that the period deviation is 0.025ms. Straw-man limitations: Suppose we used the above ap- proach to cause a bus-off in a real vehicle. Unfortunately, in sample traffic dumps from two real vehicles, the smallest deviation that we observed was approximately 0.15ms. Using the equation given by Cho et al. <ref type="bibr" target="#b6">[10]</ref>, the number of preceded message injections per error is 8 when the period deviates by at least 0.205ms; if 8 injections are required, any successful bit error would be undone by successful message transmissions. We look at available traffic logs used in the works by Miller et al. <ref type="bibr" target="#b22">[24]</ref>. For this traffic log, the majority of the messages have a period deviation over 0.205ms. In other words, assuming the best case scenario of 0.15ms, we would need to inject at least 6 higher-priority messages, or preceded messages, for a bus speed of 500Kbps. Considering that each successful transmission by the victim ECU decrements the TEC by 1, we would effectively only increase the TEC by 2 with each successful attack (instead of the expected 8). Since the majority of messages have a period deviation greater than 0.205ms, it is highly unlikely to use this method for isolating an ECU.</p><p>Observation 5: We need a method of transitioning an ECU into the bus-off state that is reliable and robust even when the period deviates by more than 0.025ms.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="6.3">Forced ECU isolation</head><p>High-level idea: To map each unique ID to its set of destination ECUs, we break the module into two steps. We repeat these two steps for all n ECUs in the network. The first step is to isolate the target ECU and shut off all others by transitioning the non-target ECUs to the bus-off state. As there are n ECUs in the network, we will need to "bus-off" n − 1 ECUs for each ECU, i.e. we will need to perform the bus-off at least n(n − 1) times. Once we isolate an ECU, we then inject the set of all I i and observe which messages have a set ACK bit, thus identifying the set of I i where the target ECU is an E dst .</p><p>Inducing a direct bit-error: Isolating an ECU via the busoff method requires a quick and effective approach. Since we are not limited to operating through the interface of a CAN controller, we can directly view the CAN frames in real-time via digital I/O pins. However, since we are using a microcontroller that operates at the same voltage of the CAN controller, we do not operate at the true CAN voltage. Instead, we tap directly between the interface of the Arduino's CAN controller and the CAN transceiver, where we can safely access the bus data. At this junction, we observe that the data on the line is within the Arduino's voltage and contains the full data frame, including SOF, ACK and EOF bits. With this access to the full data frame rather than just the components of the CAN message, we can directly induce an error on the bus and thus achieve the bus-off attack as seen in <ref type="figure" target="#fig_0">Figure 12</ref>.</p><p>Observation 6: By reading the ID of the message in real-time, we can choose to attack any ID by simply driving a dominant bit to the CAN transceiver.</p><p>Note that the bus-off method requires attacking a message ID every time it occurs until the ECU enters the bus-off state. However, in the event that a message has a very long period, the time to perform the bus-off will not satisfy our speed requirement. As such, we can employ the result of CANvas' source mapping component by identifying the ID with the smallest period per ECU and attacking just that ID. In practice, we have found that every real ECU we have encountered has at least one ID that operates under 100ms. Thus, this approach makes the destination mapping component of CANvas fast.</p><p>Determining message receive filter: Now that we can isolate a single ECU in the network, we can simply inject all messages in the observed ID space and determine which messages are correctly received by the ECU. However, to view the ACK bit at the network level, which is not visible to the user, the obvious option is to use a logic analyzer. As this does not satisfy our requirement for low-cost mapping, we seek an alternative. We observed that if a message is sent to a single ECU and it does not correctly receive the message, the transmitter will re-attempt to send the message until it is received correctly. As such, if we transmit a message and see a continuous stream of the same ID from our transmitter, then we may conclude that the message ID is not received by the isolated ECU.</p><p>Practical challenges of mapping a real vehicle: Since our approach to destination mapping involves shutting off multiple ECUs at a time, we encounter a couple of challenges in a real vehicle setting: (1) ECUs that auto-recover and (2) ECUs that are persistently active. We now define these scenarios and provide a detailed approach to addressing these practical challenges:</p><p>1. ECUs that auto-recover: In our earlier experiments, we performed a simple experiment to verify the potential of an isolation method. We attempted to transition all ECUs in the network to the bus-off state by shorting the CAN bus pins, which would effectively cause a transmit error for all ECUs and force them into bus-off. However, after removing the short, we saw that some CAN messages were still transmitted onto the network, clearly indicating that some ECUs left the bus-off state. We find that these ECUs would wait a predefined amount of time before re-transmitting again as these ECUs were critical to the vehicle's powertrain (engine, hybrid, etc.) <ref type="bibr" target="#b10">[14]</ref>. In this situation, we would transmit a portion of the injected messages onto the bus and then re-isolate our target ECU when a non-target starts to transmit again. This approach is only reasonable for recovery times on the scale of seconds. 2. ECUs that are persistently active: Out of the set of ECUs that did auto-recover, we also noticed that one ECU seemed to be persistently active. In other words, there appeared to be no delay between a transition into the bus-off state and the next transmission from the ECU. Upon closer inspection, we found that this ECU would auto-recover only after 128 occurrences of 11 recessive bits <ref type="bibr" target="#b25">[27]</ref>. In this situation, we must "hold" the bus open by constantly transmitting false messages from our device to trick the recovering ECU into thinking that the bus is still active.</p><p>Factors for mapping time: For destination mapping, the run-time is dependent on the number of ECUs and increases with more ECUs. We acknowledge the potential of long runtimes for vehicles with 70+ ECUs if all were CAN-enabled.</p><p>To combat this, we suggest performing the bus-off on the ID with the smallest period per ECU to reduce the time attributed to achieving ECU isolation. Also, for our two vehicles, all observed IDs were active when the vehicle was simply in ACC rather than ON so there may be no need to crank the engine per ECU.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="7">Evaluation</head><p>In this section, we show that CANvas:</p><p>1. identifies an unexpected ECU in a '09 Toyota Prius, 2. identifies lenient message-receive filters in a '17 Ford Focus, 3. produces a sound source mapping of two real vehicles and accurately identifies the source of approximately 95% of all I i in the network and a complete destination mapping with an isolation technique that is 100% reliable, 4. successfully demonstrate our forced ECU isolation on three extracted ECUs, 5. and produces source mapping of three additional vehicles. Setup and methodology: Our experimental setup includes five real vehicles and several synthetic networks to demonstrate the above benefits. Below is a brief description of the CANvas hardware implementation, five real vehicles and our synthetic network of real ECUs:</p><p>• Mapping device: To interface with a CAN bus, our mapping device consists of three components: an Arduino Due microcontroller with an 84 MHz clock and an on-board CAN controller, a TI VP232 CAN transceiver, and a 120Ω resistor. To gain direct write access to the bus for destination mapping, we connect a digital I/O pin to the driver input pin of the transceiver.</p><p>• '09 Toyota Prius and '17 Ford Focus: The Prius contains eight original ECUs that transmit on a single CAN bus at 500 kbps. The Focus contains eleven original ECUs that transmit on three CAN buses at varying speeds; as our model of the Focus is the standard edition, only the highspeed 500 kbps bus has more than one active ECU. We obtain ground truth for our experiments by physically taking apart the car and gaining direct access to the ECUs by splicing directly into the CAN wires as seen in <ref type="figure" target="#fig_0">Figure 13</ref>. We use a paid subscription to both Toyota and Ford's mechanics' manuals <ref type="bibr" target="#b0">[3,</ref><ref type="bibr" target="#b2">6]</ref> for guidance on disassembly of vehicle components. Due to the non-destructive design of CANvas, our interaction does not impose any permanent errors to the vehicle.</p><p>• '08 Ford Escape, '10 Toyota Prius and '15 Ford Fiesta</p><p>We obtain CAN traffic from three additional vehicles for testing only our source mapper, as we did not have permission to inject data. We use data from the '09 Prius and '17 Focus to partially confirm our source mapping output without disassembling these vehicles.</p><p>• Synthetic networks: To further validate the capability of our mapper, we perform additional experiments on three real engine ECUs extracted from a '12 Ford Focus, '13 Ford Escape and '14 Ford Escape.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="7.1">Discovering an unexpected ECU</head><p>We now describe a real scenario where, in the process of designing CANvas, we discovered an unexpected ECU in our Prius. Using the results of our source mapping on the '09 Prius as seen in <ref type="table" target="#tab_9">Table 2</ref>, we noticed that there were a total of nine ECUs when only eight were expected. Even after manually disconnecting all eight known ECUs, we still observed CAN traffic, specifically IDs I 570−572 , coming from a single ECU. By looking at the history of the vehicle and systematically disconnecting various systems, we discovered that this ECU was installed as part of a modification from several years ago. The Prius had an additional battery installed to grant it all-electric capabilities, and with the use of the network mapper, we now know that a new CAN-enabled device was added. If we took a network map of the vehicle when first purchased or used an online database as mentioned in §2, we could easily compare our results with published results and identify the unexpected ECU. We confirm that these IDs are new by comparing our IDs to a same-generation Prius <ref type="bibr" target="#b20">[23]</ref>.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="7.2">Identifying lenient filters</head><p>As detailed in §2, a real concern for network security is the ability to shut-down an ECU by simply receiving the target's CAN messages. Using the results of CANvas' destination mapping, we can identify several instances where an ECU is expected to only receive messages from a subset of other ECUs but still receives all other messages. We have found that all ECUs in the Focus and Prius do not employ any filter on the receipt of incoming messages. In Ford's Motorcraft TechInfo   Service <ref type="bibr" target="#b0">[3]</ref>, we can see simple diagrams of how the ECUs communicate as part of the vehicle's systems. For example, the Focus' braking system involves communication between the instrument panel cluster, the transmission ECU, the body control ECU and the engine ECU. Now suppose an attacker takes over the infotainment unit of the Focus, has complete access to rewrite the ECU's code and gains the ability to inject CAN messages as described in §2. The attacker can launch a bus-off attack and shut-down the transmission ECU simply because the infotainment ECU receives its messages. It is evident that these devices need filters on what messages are received by their CAN controllers.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="7.3">Mapping our test vehicles</head><p>We now present results and observations from mapping both the Prius and Focus.</p><p>Source mapping results: Using a threshold of 1ms and 30 minutes of traffic collection, we get a false positive rate of 0% for both vehicles, permitting us to get a sound source mapping output. Out of a total of 59 unique message IDs, our pairwise timing comparison resulted in 102 matching pairs for the Prius. By performing a simple grouping of these pairs as detailed in §5, we get the output as seen in <ref type="table" target="#tab_9">Table 2</ref>. While the majority of the IDs observed on the Prius have a strong periodic characteristic, we discuss some special cases we encountered. Most of the messages were under five seconds except for I 57F with a period of 5 seconds and I 602 with a period of 60 seconds. The majority of our messages matched with multiple IDs from the same ECUs but due to the large period of I 57F and I 602 , they only had a single match. However, due to our pairwise approach, we can still map these two IDs using a shared matching pair as discussed in §5. We also encounter a few examples of messages that miss their deadline and wait until the next cycle to re-transmit. For the Focus, we observe messages that miss their deadlines and either transmit two messages on the next cycle or drop the missed message and wait for the next cycle. In these cases, we simply remove the inter-arrival times that exceed two standard deviations from the average period and interpolate for the removed timestamps as discussed in §5.</p><p>Destination mapping results: With a CAN bus running at 500 kbps, we discover that all of the ECUs in the Prius do not implement any filtering between the network and the CAN controller. When each ECU is isolated, we see that all IDs are properly acknowledged by the receiving ECU. We do observe two ECUs that recover quickly from the busoff method, specifically the engine control module and the skid control ECU. With the other ECUs in the vehicle, it was sufficient to perform our bus-off once and the ECU would stop transmitting. For these two ECUs, we selected the smallest period ID and held the bus open by injecting false messages to keep the two ECUs from auto-recovering. Additionally, we discovered that the Focus also do not implement any sort of filtering for the IDs we observe on the CAN. From these findings, we can conclude that attacking via the reception of a message for these vehicles could prove trivial due to the lack of filtering between the network and the controller. In general, the maximum number of manual transitions of the ignition switch is equal to the number of detected CAN-enabled ECUs in the vehicle. For the keyless ignition of the 2009 Prius, we transition the ignition 7 times as two ECUs recover on their own (the Prius has 9 total CAN-enabled ECUs). For the keyed ignition of the 2017 Focus, we transition the ignition 7 times as two ECUs recover on their own (the Focus has 9 total CAN-enabled ECUs).</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="7.4">Mapping additional vehicles</head><p>Mapping real extracted Ford ECUs: We also obtained three Ford engine ECUs from a '12 Focus, '13 Escape and '14 Escape. By collecting data from these three ECUs, we found that they shared the many of the same message IDs and conclude that they are based off of the same engine controller configuration. As they all auto-recover, they were prime candidates for testing our forced ECU isolation technique.</p><p>We use CANvas on three other vehicles to look for data that seems logical to our findings from the test cars. For the Ford vehicles, we look for similarities with our extracted engine ECUs. For the '08 Escape, we found a set of IDs that we believe is the engine ECU and only has a subset of those found on our extracted ECU. For the '15 Fiesta, we also found a likely candidate for an engine ECU that has more IDs than our extracted ECUs. Since these vehicles range over three different Ford generations, it seems logical that the newer engine ECUs transmit more IDs. Additionally, we find a few similarities between the '09 and '10 Prius. We found an ECU on the '10 that is likely to be the skid control ECU, which has similar IDs to the '09 Prius. These findings potentially demonstrate CANvas' source mapping capabilities.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="8">Discussion</head><p>Adversarial evasion: For CANvas' source mapping, an adversary could attempt to modify the timestamps to trick CANvas into thinking that a pair of IDs originate from the same ECU when in fact the opposite is true, and vice versa. We acknowledge that an attacker who aims to spoof IDs from an implanted or compromised ECU breaks the assumption for message-source analysis. If the attacker performs an active attack (i.e. attack occurs during data capture) or simultaneously transmits with the spoofed ECU, then IDSes from several previous works could detect such an attack and thus we did not perform such experiments. CANvas instead could discover ECUs that do not actively inject messages but rather change the ID-ECU source mapping (a new ECU or existing ECU that sends different IDs). We also make the assumption that ECUs do not intentionally alter their timing due to the challenges that arise from scheduling real-time embedded systems. There are numerous challenges that automakers already face in achieving reliable and robust scheduling for their vehicles and any modification to the timing of CAN messages would add a great amount of complexity to the already complex challenge of scheduling. Additionally, as our destination mapping approach deals with the error-handling mechanism, it would also not be practical to change these basics of CAN.</p><p>Avoiding permanent damage: We take care to avoid any damage to our test vehicles. Even with our active interaction with the bus in destination mapping, most dash lights that turn on are simply reset by power cycling the car; it may sometimes be necessary to drive the car for a few minutes so the ECUs can identify the absence of a real error. After mapping, all of our vehicles operate with no error codes once the above steps have been followed. Sometimes, a persistent Diagnostic Trouble Code may exist in the network as indicated by the Malfunction Indicator Light (MIL, commonly known as a "check engine light"). To remedy this, a simple OBD-II scan tool can be used to reset these lights with no harm to the vehicle. In the event of network communication failure (e.g. bus-off), manufacturers implement a "limp-home" mode where ECUs will default to secondary programming and allow the vehicle to operate with limited capabilities <ref type="bibr" target="#b3">[7]</ref>. It is possible for the CAN bus to be shorted (effectively causing a bus-off on all ECUs) during faults, repairs, etc. so this mode protects the vehicle from our methods. In our experiments, the engine did not need to be running as all ECUs became active with the ignition at ACC. However, this may not apply to all vehicles so it is possible that the ignition will need to be ON.</p><p>Multiple CAN buses: For the typical OBD-II port, the CAN bus uses pins 6 and 14 on the connector. While many vehicles only have one CAN bus using these pins, it is possible for additional CANs to exist. These CAN buses may not be connected and they may employ different bus speeds. Sometimes, vehicles may also employ a gateway which handles how and which messages are passed between the various buses for reasons of fault confinement and network security. These CAN buses are often accessible at the OBD-II port but on different pins that are vendor optional: pins 3 and 11 and pins 1 and 8/9. In the case that a CAN bus is not exposed to the OBD-II, it is possible to access this bus by simply removing the door panel of a car and accessing the connector between the door assembly and the car body. This connector will likely contain the unexposed bus, which can be discovered as suggested by others <ref type="bibr" target="#b28">[30]</ref>.</p><p>Message acceptance filtering: CAN controllers have the option to employ a programmable acceptance filter where a message that is received by the controller can either be sent to the application layer or dropped after the message is received. It is possible to define message destination as a message that is "accepted" by an ECU rather than correctly received. This definition provides finer granularity on message destination and can prove useful for many other security scenarios; however, to identify what messages are accepted by an ECU, this may require vendor-specific methods. For example, in our experimental setup, we enable a CAN protocol feature called the overload frame <ref type="bibr" target="#b30">[32]</ref>. If a vendor chooses to enable this feature, an accepted message can be determined by flooding the bus as fast as possible with a given message ID. When the receiving ECU gets behind on processing these messages, it will transmit an overload frame, indicating its acceptance filter allows the injected message ID; if the ID is dropped, then no overload frame will be present.</p><p>Non-transmitting ECUs: CANvas expects ECUs to transmit their messages periodically, but it is possible for ECUs to only activate under certain conditions or simply read from the network. As all ECUs that receive messages but have the ability to write to the network must participate in the ACK process, CANvas' forced ECU isolation technique can be used to identify the presence of a non-transmitting ECU. CANvas should detect these ECUs prior to starting to ensure that the detected ECUs do not interfere with destination mapping.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="9">Related Work</head><p>We already discussed several of the key related work with respect to source and destination mapping. We discuss other related efforts here.</p><p>Automotive attacks: There have been a number of efforts at demonstrating vulnerabilities of automotive networks, including work on injecting messages <ref type="bibr" target="#b16">[20]</ref>, attacking keyless entry systems <ref type="bibr" target="#b4">[8,</ref><ref type="bibr" target="#b12">16,</ref><ref type="bibr" target="#b26">28]</ref>, and specific components such as TPMS <ref type="bibr" target="#b13">[17,</ref><ref type="bibr" target="#b14">18]</ref>. Our work can better inform such attack efforts and defenses by proactively identifying possible attack channels.</p><p>Intrusion detection for automotive: Given the growing security concerns, related work has also developed intrusion detection and firewall capabilities akin to traditional networks (e.g., <ref type="bibr" target="#b7">[11,</ref><ref type="bibr" target="#b15">19,</ref><ref type="bibr" target="#b18">22,</ref><ref type="bibr" target="#b27">29,</ref><ref type="bibr" target="#b29">31]</ref>). Some of these may interfere with mapping efforts. More generally, however, these may have blind spots that a network mapper can highlight.</p><p>Alternative source identification: We acknowledge previous efforts that aim to identify message sources <ref type="bibr" target="#b8">[12,</ref><ref type="bibr" target="#b25">27]</ref>. While these efforts may prove valid, they either require many hours of data or require physical access to the bus for just source mapping. CANvas permits source mapping using a passively-recorded timestamped traffic log.</p><p>Authentication in CAN: We acknowledge that authentication for CAN devices may implicitly solve the source mapping problem. However, proposed authentication methods are rarely employed in real vehicles due to either the permanent addition of new devices or changes to the existing CAN protocol. Prior work, such as the TCAN system <ref type="bibr" target="#b1">[5]</ref>, requires the addition of a new device, access to two locations on the bus and a static authentication table. CANvas, however, acknowledges that timing characteristics can and will change due to clock drift. By comparing clock offsets, CANvas does not rely on static timing characteristics. CANvas does not even need physical access to the bus for source mapping as we only require a hardware-timestamped traffic log, and we operate solely from the OBD-II port without an additional permanent device. Other work on ECU fingerprinting: Following initial efforts on fingerprinting <ref type="bibr" target="#b10">[14,</ref><ref type="bibr" target="#b25">27]</ref>, other work has improved on their basic approach by identifying potential pitfalls <ref type="bibr" target="#b7">[11,</ref><ref type="bibr" target="#b8">12,</ref><ref type="bibr" target="#b27">29]</ref>. As we show in our work, all of these still suffer from the same limitations in our context as they still assume either active access to the bus or very long traffic dumps.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="10">Conclusions</head><p>In this work, we develop CANvas, a fast and inexpensive automotive network mapper. We have released our code and data under open-source licenses to enable further work in this area. A natural direction of future work is to add richer functionality, e.g. identifying the function of an ECU (transmission ECU, engine ECU, etc.), identifying gateway ECUs that potentially bridge multiple CAN buses and identifying vendor-specific message acceptance filters. Future work should also investigate network mapping on other automotive protocols, e.g. automotive Ethernet.</p></div><figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_0"><head>Figure 1 :</head><label>1</label><figDesc>Figure 1: A network mapper could discover potentially malicious ECUs from an untrusted party.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_2"><head>Figure 2 :</head><label>2</label><figDesc>Figure 2: A network mapper could compare a generated map to one found on an online database. Differences between these maps could identify changes in ECUs (Case 1) and/or their message configurations (Case 2).</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_3"><head>Figure 5 :</head><label>5</label><figDesc></figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_4"><head>Figure 6 :</head><label>6</label><figDesc>Figure 6: CANvas aims to cluster message IDs with a similar relative skew or offset.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_6"><head>Algorithm 1</head><label>1</label><figDesc>Pairwise offset tracking 1: function PAIRWISECOMPARE(I 1 , I 2 , log I 1 , log I 2 ) 2: p 1 = ComputeAveragePeriod(log I 1 ) 3: p 2 = ComputeAveragePeriod(log I 2 ) 4: n = lcm(p 1 , p 2 )/p 1 5: m = lcm(p 1 , p 2 )/p 2 6: pos I 1 = 0, pos I 2 = 0 7:</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_7"><head>∆</head><label></label><figDesc>I 1 ,I 2 .append(log I 1 [pos I 1 ] − log I 2 [pos I 2 ]) 10: pos I 1 + = n 11: pos I 2 + = m 12:</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_8"><head>Figure 9 :</head><label>9</label><figDesc>Figure 9: Observing ACK bit with single ECU in network.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_9"><head>Figure 10 :</head><label>10</label><figDesc>Figure 10: CAN transitions between three error states: error-active, error-passive and bus-off.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_10"><head>Figure 11 :</head><label>11</label><figDesc>Figure 11: Injecting a fabricated message to impose a bus-off [10].</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_11"><head>Figure 12 :</head><label>12</label><figDesc>Figure 12: CANvas identifies target message by end of ID field and injects dominant bits during the DATA field.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_12"><head>Figure 13 :</head><label>13</label><figDesc>Figure 13: Images of the vehicles we used for ground truth: the 2009 Toyota Prius and the 2017 Ford Focus.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_0" validated="false"><head>) .</head><label>.</label><figDesc></figDesc><table>Filter 
Lenient Filter 
Filter 

Instrument Panel 
Cluster ECU: 
Receives messages 
from engine 

Engine ECU: 
Transmits 
messages to 
instrument panel 

Exploited 
Telematics ECU: 
Capable of 
interrupting any 
received message 

Message 

</table></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_2" validated="false"><head>Table 1 : Mapping requirements for motivating scenarios</head><label>1</label><figDesc></figDesc><table></table></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_9" validated="false"><head>Table 2 : 2009 Toyota Prius source mapping output</head><label>2</label><figDesc></figDesc><table></table></figure>

			<note place="foot" n="394"> 28th USENIX Security Symposium USENIX Association</note>
		</body>
		<back>

			<div type="acknowledgement">
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Acknowledgements</head><p>This work was funded in part by the PITAXVIII PITA award and the CNS-1564009 NSF IoT award. We gratefully acknowledge support from Technologies for Safe and Efficient Transportation (T-SET) University Transportation Center. This work was also supported in part by the CONIX Research Center, one of six centers in JUMP, a Semiconductor Research Corporation (SRC) program sponsored by DARPA. We thank the anonymous reviewers and our shepherd Konrad Rieck for their helpful suggestions.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Availability</head><p>This work is made available <ref type="bibr">[1]</ref> to encourage the community to add richer functionality and use CANvas to further the creation of automotive security tools.</p></div>
			</div>

			<div type="references">

				<listBibl>

<biblStruct xml:id="b0">
	<monogr>
		<title/>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Motorcraft Info Service</surname></persName>
		</author>
		<ptr target="https://www.motorcraftservice.com/" />
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b1">
	<monogr>
		<title/>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Tcan</surname></persName>
		</author>
		<ptr target="https://autosec.se/wp-content/uploads/2019/03/3.-ESCAR-EU-2018.pdf" />
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b2">
	<monogr>
		<title/>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Toyota Techinfo Service</surname></persName>
		</author>
		<ptr target="https://techinfo.toyota.com" />
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b3">
	<monogr>
		<title level="m" type="main">What limp mode is, and why cars use it</title>
		<ptr target="https://repairpal.com/symptoms/what-is-limp-mode-why-cars-use-it" />
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b4">
	<analytic>
		<title level="a" type="main">Analysis of attacks against the security of keyless-entry systems for vehicles and suggestions for improved designs</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Ansaf</forename><surname>Ibrahem Alrabady</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Mahmud</forename><surname>Syed Masud</surname></persName>
		</author>
		<ptr target="https://ieeexplore.ieee.org/iel5/25/30186/01386610.pdf" />
	</analytic>
	<monogr>
		<title level="m">IEEE transactions on vehicular technology</title>
		<imprint>
			<date type="published" when="2005" />
			<biblScope unit="volume">54</biblScope>
			<biblScope unit="page" from="41" to="50" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b5">
	<analytic>
		<title level="a" type="main">Comprehensive experimental analyses of automotive attack surfaces</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Stephen</forename><surname>Checkoway</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Damon</forename><surname>Mccoy</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Brian</forename><surname>Kantor</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Danny</forename><surname>Anderson</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Hovav</forename><surname>Shacham</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Stefan</forename><surname>Savage</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Karl</forename><surname>Koscher</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Alexei</forename><surname>Czeskis</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Franziska</forename><surname>Roesner</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Tadayoshi</forename><surname>Kohno</surname></persName>
		</author>
		<ptr target="http://www.autosec.org/pubs/cars-usenixsec2011.pdf" />
	</analytic>
	<monogr>
		<title level="m">USENIX Security Symposium</title>
		<meeting><address><addrLine>San Francisco</addrLine></address></meeting>
		<imprint>
			<date type="published" when="2011" />
			<biblScope unit="page" from="77" to="92" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b6">
	<analytic>
		<title level="a" type="main">Error handling of in-vehicle networks makes them vulnerable</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Kyong-Tak</forename><surname>Cho</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Kang</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Shin</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 2016 ACM SIGSAC Conference on Computer and Communications Security</title>
		<meeting>the 2016 ACM SIGSAC Conference on Computer and Communications Security</meeting>
		<imprint>
			<biblScope unit="page" from="1044" to="1055" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b7">
	<analytic>
		<title level="a" type="main">Fingerprinting electronic control units for vehicle intrusion detection</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Kyong-Tak</forename><surname>Cho</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Kang</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Shin</surname></persName>
		</author>
		<ptr target="https://www.usenix.org/system/files/conference/usenixsecurity16/sec16_paper_cho.pdf" />
	</analytic>
	<monogr>
		<title level="m">USENIX Security Symposium</title>
		<imprint>
			<date type="published" when="2016" />
			<biblScope unit="page" from="911" to="927" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b8">
	<analytic>
		<title level="a" type="main">Identifying ecus using inimitable characteristics of signals in controller area networks</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Wonsuk</forename><surname>Choi</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Hyo</forename><forename type="middle">Jin</forename><surname>Jo</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Samuel</forename><surname>Woo</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Ji</forename><forename type="middle">Young</forename><surname>Chun</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Jooyoung</forename><surname>Park</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Dong Hoon</forename><surname>Lee</surname></persName>
		</author>
		<ptr target="https://ieeexplore.ieee.org/iel7/25/4356907/08303766.pdf" />
	</analytic>
	<monogr>
		<title level="j">IEEE Transactions on Vehicular Technology</title>
		<imprint>
			<biblScope unit="volume">67</biblScope>
			<biblScope unit="issue">6</biblScope>
			<biblScope unit="page" from="4757" to="4770" />
			<date type="published" when="2018" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b9">
	<monogr>
		<title level="m" type="main">Controller area network (can) schedulability analysis: Refuted, revisited and revised. Real-Time Systems</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Alan</forename><surname>Robert I Davis</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Burns</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Reinder</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Johan</forename><forename type="middle">J</forename><surname>Bril</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Lukkien</surname></persName>
		</author>
		<idno type="doi">10.1007/s11241-007-9012-7</idno>
		<ptr target="https://link.springer.com/article/10.1007/s11241-007-9012-7" />
		<imprint>
			<date type="published" when="2007" />
			<biblScope unit="volume">35</biblScope>
			<biblScope unit="page" from="239" to="272" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b10">
	<monogr>
		<title level="m" type="main">Understanding and using the controller area network communication protocol: theory and practice</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Marco</forename><surname>Di Natale</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Haibo</forename><surname>Zeng</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Paolo</forename><surname>Giusto</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Arkadeb</forename><surname>Ghosal</surname></persName>
		</author>
		<ptr target="http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.512.5543&amp;rep=rep1&amp;type=pdf" />
		<imprint>
			<date type="published" when="2012" />
			<publisher>Springer Science &amp; Business Media</publisher>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b11">
	<analytic>
		<title level="a" type="main">An overview of controller area network</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Mohammad</forename><surname>Farsi</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Karl</forename><surname>Ratcliff</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Manuel</forename><surname>Barbosa</surname></persName>
		</author>
		<ptr target="https://ieeexplore.ieee.org/iel5/2218/17068/00788104.pdf" />
	</analytic>
	<monogr>
		<title level="j">Computing &amp; Control Engineering Journal</title>
		<imprint>
			<biblScope unit="volume">10</biblScope>
			<biblScope unit="issue">3</biblScope>
			<biblScope unit="page" from="113" to="120" />
			<date type="published" when="1999" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b12">
	<analytic>
		<title level="a" type="main">Relay attacks on passive keyless entry and start systems in modern cars</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Aurélien</forename><surname>Francillon</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Boris</forename><surname>Danev</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Srdjan</forename><surname>Capkun</surname></persName>
		</author>
		<ptr target="https://www.research-collection.ethz.ch/bitstream/handle/20.500.11850/42365/eth-4572-01.pdf" />
	</analytic>
	<monogr>
		<title level="m">Proceedings of the Network and Distributed System Security Symposium (NDSS)</title>
		<meeting>the Network and Distributed System Security Symposium (NDSS)</meeting>
		<imprint>
			<date type="published" when="2011" />
		</imprint>
		<respStmt>
			<orgName>Department of Computer Science</orgName>
		</respStmt>
	</monogr>
	<note>Eidgenössische Technische Hochschule Zürich</note>
</biblStruct>

<biblStruct xml:id="b13">
	<analytic>
		<title level="a" type="main">Cyber-physical security for smart cars: taxonomy of vulnerabilities, threats, and attacks</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Abdulmalik</forename><surname>Humayed</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Bo</forename><surname>Luo</surname></persName>
		</author>
		<ptr target="https://dl.acm.org/citation.cfm?id=2735992" />
	</analytic>
	<monogr>
		<title level="m">Proceedings of the ACM/IEEE Sixth International Conference on Cyber-Physical Systems</title>
		<meeting>the ACM/IEEE Sixth International Conference on Cyber-Physical Systems</meeting>
		<imprint>
			<publisher>ACM</publisher>
			<date type="published" when="2015" />
			<biblScope unit="page" from="252" to="253" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b14">
	<analytic>
		<title level="a" type="main">Security and privacy vulnerabilities of in-car wireless networks: A tire pressure monitoring system case study</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Rob</forename><surname>Millerb Ishtiaq Roufa</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Hossen</forename><surname>Mustafaa</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Sangho Ohb Travis</forename><surname>Taylora</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Wenyuan</forename><surname>Xua</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Marco</forename><surname>Gruteserb</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Wade</forename><surname>Trappeb</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Ivan</forename><surname>Seskarb</surname></persName>
		</author>
		<ptr target="https://www.usenix.org/legacy/event/sec10/tech/full_papers/Rouf.pdf" />
	</analytic>
	<monogr>
		<title level="m">19th USENIX Security Symposium</title>
		<meeting><address><addrLine>Washington DC</addrLine></address></meeting>
		<imprint>
			<date type="published" when="2010" />
			<biblScope unit="page" from="11" to="13" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b15">
	<analytic>
		<title level="a" type="main">Intrusion detection system using deep neural network for invehicle network security</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Min-Joo</forename><surname>Kang</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Je-Won</forename><surname>Kang</surname></persName>
		</author>
		<idno type="doi">10.1371/journal.pone.0155781</idno>
		<ptr target="https://journals.plos.org/plosone/article?id=10.1371/journal.pone.0155781" />
	</analytic>
	<monogr>
		<title level="j">PloS one</title>
		<imprint>
			<biblScope unit="volume">11</biblScope>
			<biblScope unit="issue">6</biblScope>
			<biblScope unit="page">155781</biblScope>
			<date type="published" when="2016" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b16">
	<analytic>
		<title level="a" type="main">Experimental security analysis of a modern automobile</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Karl</forename><surname>Koscher</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Alexei</forename><surname>Czeskis</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Franziska</forename><surname>Roesner</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Shwetak</forename><surname>Patel</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Tadayoshi</forename><surname>Kohno</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Stephen</forename><surname>Checkoway</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Damon</forename><surname>Mccoy</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Brian</forename><surname>Kantor</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Danny</forename><surname>Anderson</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Hovav</forename><surname>Shacham</surname></persName>
		</author>
		<ptr target="http://www.autosec.org/pubs/cars-oakland2010.pdf" />
	</analytic>
	<monogr>
		<title level="m">Security and Privacy (SP), 2010 IEEE Symposium on</title>
		<imprint>
			<publisher>IEEE</publisher>
			<date type="published" when="2010" />
			<biblScope unit="page" from="447" to="462" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b17">
	<monogr>
		<title level="m" type="main">Nmap network scanning: The official Nmap project guide to network discovery and security scanning. Insecure</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Gordon Fyodor Lyon</surname></persName>
		</author>
		<ptr target="https://dl.acm.org/citation.cfm?id=1538595" />
		<imprint>
			<date type="published" when="2009" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b18">
	<analytic>
		<title level="a" type="main">A method of preventing unauthorized data transmission in controller area network</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Tsutomu</forename><surname>Matsumoto</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Masato</forename><surname>Hata</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Masato</forename><surname>Tanabe</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Katsunari</forename><surname>Yoshioka</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Kazuomi</forename><surname>Oishi</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">2012 IEEE 75th Vehicular Technology Conference (VTC Spring)</title>
		<imprint>
			<biblScope unit="page" from="1" to="5" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b19">
	<analytic>
		<title/>
		<ptr target="https://ieeexplore.ieee.org/iel5/6238551/6239848/06240294.pdf" />
	</analytic>
	<monogr>
		<title level="j">IEEE</title>
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b20">
	<monogr>
		<title level="m" type="main">Communication with a toyota prius</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Jérôme</forename><surname>Maye</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Mario</forename><surname>Krucker</surname></persName>
		</author>
		<ptr target="https://attachments.priuschat.com/attachment-files/2017/04/122809_" />
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b21">
	<monogr>
		<title/>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Communication_With_A_Toyota_Prius</surname></persName>
		</author>
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b22">
	<analytic>
		<title level="a" type="main">Adventures in automotive networks and control units</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Charlie</forename><surname>Miller</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Chris</forename><surname>Valasek</surname></persName>
		</author>
		<ptr target="http://illmatics.com/car_hacking.pdf" />
	</analytic>
	<monogr>
		<title level="j">Def Con</title>
		<imprint>
			<biblScope unit="volume">21</biblScope>
			<biblScope unit="page" from="260" to="264" />
			<date type="published" when="2013" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b23">
	<monogr>
		<title level="m" type="main">A survey of remote automotive attack surfaces. black hat USA</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Charlie</forename><surname>Miller</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Chris</forename><surname>Valasek</surname></persName>
		</author>
		<ptr target="http://illmatics.com/remote%20attack%20surfaces.pdf" />
		<imprint>
			<date type="published" when="2014" />
			<biblScope unit="page">94</biblScope>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b24">
	<monogr>
		<title level="m" type="main">Remote exploitation of an unaltered passenger vehicle</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Charlie</forename><surname>Miller</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Chris</forename><surname>Valasek</surname></persName>
		</author>
		<ptr target="http://illmatics.com/Remote%20Car%20Hacking.pdf" />
		<imprint>
			<date type="published" when="2015" />
			<biblScope unit="page">91</biblScope>
			<pubPlace>Black Hat USA</pubPlace>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b25">
	<analytic>
		<title level="a" type="main">Source identification using signal characteristics in controller area networks</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Bogdan</forename><surname>Pal-Stefan Murvay</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Groza</surname></persName>
		</author>
		<ptr target="https://ieeexplore.ieee.org/iel7/97/4358004/06730667.pdf" />
	</analytic>
	<monogr>
		<title level="j">IEEE Signal Processing Letters</title>
		<imprint>
			<biblScope unit="volume">21</biblScope>
			<biblScope unit="issue">4</biblScope>
			<biblScope unit="page" from="395" to="399" />
			<date type="published" when="2014" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b26">
	<monogr>
		<title level="m" type="main">Keyless entry system using a rolling code</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Xiaowei</forename><surname>Irving S Reed</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Xuemin</forename><surname>Yin</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Chen</surname></persName>
		</author>
		<ptr target="https://patentimages.storage.googleapis.com/c3/02/da/89f0cef9c2a9ea/US5600324.pdf" />
		<imprint>
			<date type="published" when="1997-02-04" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b27">
	<analytic>
		<title level="a" type="main">Cloaking the clock: emulating clock skew in controller area networks</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Xuhang</forename><surname>Sang Uk Sagong</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Andrew</forename><surname>Ying</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Linda</forename><surname>Clark</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Radha</forename><surname>Bushnell</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Poovendran</surname></persName>
		</author>
		<ptr target="https://dl.acm.org/citation.cfm?id=3207896.3207901" />
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 9th ACM/IEEE International Conference on Cyber-Physical Systems</title>
		<meeting>the 9th ACM/IEEE International Conference on Cyber-Physical Systems</meeting>
		<imprint>
			<publisher>IEEE Press</publisher>
			<date type="published" when="2018" />
			<biblScope unit="page" from="32" to="42" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b28">
	<monogr>
		<title level="m" type="main">The Car Hacker&apos;s Handbook: A Guide for the Penetration Tester</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Craig</forename><surname>Smith</surname></persName>
		</author>
		<ptr target="http://opengarages.org/handbook/" />
		<imprint>
			<date type="published" when="2016" />
			<publisher>No Starch Press</publisher>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b29">
	<analytic>
		<title level="a" type="main">Intrusion detection system based on the analysis of time intervals of can messages for in-vehicle network</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Hyun</forename><forename type="middle">Min</forename><surname>Song</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Ha</forename><forename type="middle">Rang</forename><surname>Kim</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Huy Kang</forename><surname>Kim</surname></persName>
		</author>
		<ptr target="https://ieeexplore.ieee.org/abstract/document/7427089/" />
	</analytic>
	<monogr>
		<title level="m">2016 international conference on information networking (ICOIN)</title>
		<imprint>
			<publisher>IEEE</publisher>
			<date type="published" when="2016" />
			<biblScope unit="page" from="63" to="68" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b30">
	<analytic>
		<title/>
		<ptr target="http://esd.cs.ucr.edu/webres/can20.pdf" />
	</analytic>
	<monogr>
		<title level="j">CAN Specification. Bosch</title>
		<imprint>
			<date type="published" when="1991" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b31">
	<analytic>
		<title level="a" type="main">Analysing real-time communications: Controller area network (can)</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Ken</forename><surname>Tindell</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Andy</forename><forename type="middle">J</forename><surname>Hanssmon</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Wellings</surname></persName>
		</author>
		<ptr target="http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.57.5047&amp;rep=rep1&amp;type=pdf" />
	</analytic>
	<monogr>
		<title level="m">RTSS</title>
		<imprint>
			<publisher>Citeseer</publisher>
			<date type="published" when="1994" />
			<biblScope unit="page" from="259" to="263" />
		</imprint>
	</monogr>
</biblStruct>

				</listBibl>
			</div>
		</back>
	</text>
</TEI>
