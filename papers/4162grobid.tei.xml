<?xml version="1.0" encoding="UTF-8"?>
<TEI xmlns="http://www.tei-c.org/ns/1.0" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
xsi:schemaLocation="http://www.tei-c.org/ns/1.0 /Users/atharsefid/Desktop/grobid-0.5.3/grobid-home/schemas/xsd/Grobid.xsd"
 xmlns:xlink="http://www.w3.org/1999/xlink">
	<teiHeader xml:lang="en">
		<encodingDesc>
			<appInfo>
				<application version="0.5.3" ident="GROBID" when="2020-09-29T04:00+0000">
					<ref target="https://github.com/kermitt2/grobid">GROBID - A machine learning software for extracting information from scholarly documents</ref>
				</application>
			</appInfo>
		</encodingDesc>
		<fileDesc>
			<titleStmt>
				<title level="a" type="main">DATA -Differential Address Trace Analysis: Finding Address-based Side-Channels in Binaries DATA -Differential Address Trace Analysis: Finding Address-based Side-Channels in Binaries</title>
			</titleStmt>
			<publicationStmt>
				<publisher/>
				<availability status="unknown"><licence/></availability>
				<date>August 15-17. 2018</date>
			</publicationStmt>
			<sourceDesc>
				<biblStruct>
					<analytic>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Samuel</forename><surname>Weiser</surname></persName>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Stefan</forename><surname>Mangard</surname></persName>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Georg</forename><surname>Sigl</surname></persName>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Samuel</forename><surname>Weiser</surname></persName>
							<affiliation key="aff2">
								<orgName type="institution">Graz University of Technology</orgName>
								<address>
									<addrLine>2 Fraunhofer AISEC</addrLine>
								</address>
							</affiliation>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Andreas</forename><surname>Zankl</surname></persName>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Raphael</forename><surname>Spreitzer</surname></persName>
							<affiliation key="aff2">
								<orgName type="institution">Graz University of Technology</orgName>
								<address>
									<addrLine>2 Fraunhofer AISEC</addrLine>
								</address>
							</affiliation>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Katja</forename><surname>Miller</surname></persName>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Stefan</forename><surname>Mangard</surname></persName>
							<affiliation key="aff2">
								<orgName type="institution">Graz University of Technology</orgName>
								<address>
									<addrLine>2 Fraunhofer AISEC</addrLine>
								</address>
							</affiliation>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Georg</forename><surname>Sigl</surname></persName>
							<affiliation key="aff3">
								<orgName type="institution">Technical University of Munich</orgName>
							</affiliation>
						</author>
						<author>
							<affiliation key="aff0">
								<orgName type="institution">Graz University of Technology</orgName>
								<address>
									<addrLine>Andreas Zankl</addrLine>
								</address>
							</affiliation>
						</author>
						<author>
							<affiliation key="aff1">
								<orgName type="department" key="dep1">Raphael Spreitzer</orgName>
								<orgName type="department" key="dep2">Fraunhofer AISEC; Technical</orgName>
								<orgName type="institution" key="instit1">Fraunhofer AISEC</orgName>
								<orgName type="institution" key="instit2">Graz University of Technology</orgName>
								<orgName type="institution" key="instit3">Katja Miller</orgName>
								<orgName type="institution" key="instit4">Fraunhofer AISEC</orgName>
								<orgName type="institution" key="instit5">Graz University of Technology</orgName>
								<orgName type="institution" key="instit6">University of Munich</orgName>
							</affiliation>
						</author>
						<title level="a" type="main">DATA -Differential Address Trace Analysis: Finding Address-based Side-Channels in Binaries DATA -Differential Address Trace Analysis: Finding Address-based Side-Channels in Binaries</title>
					</analytic>
					<monogr>
						<title level="m">Proceedings of the 27th USENIX Security Symposium</title>
						<meeting>the 27th USENIX Security Symposium <address><addrLine>Baltimore, MD, USA</addrLine></address>
						</meeting>
						<imprint>
							<date type="published">August 15-17. 2018</date>
						</imprint>
					</monogr>
					<note>Open access to the Proceedings of the 27th USENIX Security Symposium is sponsored by USENIX. This paper is included in the</note>
				</biblStruct>
			</sourceDesc>
		</fileDesc>
		<profileDesc>
			<abstract>
				<p>Cryptographic implementations are a valuable target for address-based side-channel attacks and should, thus, be protected against them. Countermeasures, however, are often incorrectly deployed or completely omitted in practice. Moreover, existing tools that identify information leaks in programs either suffer from imprecise abstraction or only cover a subset of possible leaks. We systematically address these limitations and propose a new methodology to test software for information leaks. In this work, we present DATA, a differential address trace analysis framework that detects address-based side-channel leaks in program binaries. This accounts for attacks exploiting caches, DRAM, branch prediction, controlled channels, and likewise. DATA works in three phases. First, the program under test is executed to record several address traces. These traces are analyzed using a novel algorithm that dynamically realigns traces to increase detection accuracy. Second, a generic leakage test filters differences caused by statistically independent program behavior, e.g., randomization, and reveals true information leaks. The third phase classifies these leaks according to the information that can be obtained from them. This provides further insight to security analysts about the risk they pose in practice. We use DATA to analyze OpenSSL and PyCrypto in a fully automated way. Among several expected leaks in symmetric ciphers, DATA also reveals known and previously unknown leaks in asymmetric primitives (RSA, DSA, ECDSA), and DATA identifies erroneous bug fixes of supposedly fixed constant-time vulnerabilities.</p>
			</abstract>
		</profileDesc>
	</teiHeader>
	<text xml:lang="en">
		<body>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="1">Introduction</head><p>Side-channel attacks infer sensitive information, such as cryptographic keys or private user data, by monitoring inadvertent information leaks of computing devices. Cryptographic implementations are a valuable target for various side-channel attacks <ref type="bibr" target="#b10">[11,</ref><ref type="bibr" target="#b44">45,</ref><ref type="bibr" target="#b76">77]</ref>, as a successful attack undermines cryptographic security guarantees. Especially software-based microarchitectural attacks (e.g., cache attacks, DRAM attacks, branchprediction attacks, and controlled-channel attacks) are particularly dangerous since they can be launched from software and, thus, without the need for physical access. Many of these software-based attacks exploit addressbased information leakage to recover cryptographic keys of symmetric <ref type="bibr" target="#b5">[6,</ref><ref type="bibr" target="#b35">36]</ref> or asymmetric <ref type="bibr" target="#b27">[28,</ref><ref type="bibr" target="#b86">87]</ref> primitives.</p><p>Various countermeasures against address-based information leakage have been proposed on an architectural level <ref type="bibr" target="#b51">[52,</ref><ref type="bibr" target="#b61">62,</ref><ref type="bibr" target="#b80">81]</ref>. However, these require changing the hardware, which prohibits fast and wide adoption. A more promising line of defense are software countermeasures, which remove address-based information leaks by eliminating key-dependent memory accesses to data and code memory. For example, data leakage can be thwarted by means of bit-slicing <ref type="bibr" target="#b42">[43,</ref><ref type="bibr" target="#b46">47,</ref><ref type="bibr" target="#b65">66]</ref>, and control-flow leakage by unifying the control flow <ref type="bibr" target="#b20">[21]</ref>. Even though software countermeasures are already well studied, in practice their adoption to crypto libraries is often partial, error-prone, or non-transparent, as demonstrated by recent attacks on OpenSSL <ref type="bibr" target="#b26">[27,</ref><ref type="bibr" target="#b27">28,</ref><ref type="bibr" target="#b87">88]</ref>.</p><p>To address these issues, leakage detection tools have been developed that allow developers and security analysts to identify address-based side-channel vulnerabilities. Most of these tools, however, primarily focus on cache attacks and can be classified into static and dynamic approaches. Many static analysis methods use abstract interpretation <ref type="bibr" target="#b23">[24,</ref><ref type="bibr" target="#b24">25,</ref><ref type="bibr" target="#b47">48,</ref><ref type="bibr" target="#b56">57]</ref> to give upper leakage bounds, ideally proving the absence of information leaks in already secured implementations, e.g., the evaluation of Salsa20 <ref type="bibr" target="#b23">[24]</ref>. However, these approaches struggle to accurately describe and pinpoint information leaks due to over-approximation <ref type="bibr">[24, page 443]</ref>, rendering leakage bounds meaningless in the worst case. Moreover, their approximations of the program's data plane fundamentally prohibit the analysis of interpreted code.</p><p>In contrast, dynamic approaches <ref type="bibr" target="#b40">[41,</ref><ref type="bibr" target="#b83">84,</ref><ref type="bibr" target="#b88">89]</ref> focus on concrete program executions to reduce false positives. Contrary to static analysis, dynamic analysis cannot prove the absence of leakage without exhaustive input search, which is infeasible for large input spaces. However, in case of cryptographic algorithms, testing a subset of inputs is enough to encounter information leaks with a high probability, because crypto primitives heavily diffuse the secret input during processing. Thus, there is a fundamental trade-off between static analysis (minimizing false negatives) and dynamic analysis (minimizing false positives).</p><p>We aim for a pragmatic approach towards minimizing false positives, allowing developers to identify information leaks in real-world applications. Thus, we focus on dynamic analysis and tackle the limitations of existing tools. In particular, existing tools either focus on control-flow leaks or data leaks, but not both at the same time <ref type="bibr" target="#b79">[80,</ref><ref type="bibr" target="#b88">89]</ref>; they consider the strongest adversary to observe cache-line accesses only <ref type="bibr" target="#b40">[41]</ref>, which is too coarsegrained in light of recent attacks <ref type="bibr">(CacheBleed [88]</ref>); many of them lack the capability to properly filter program activity that is statistically independent of secret input <ref type="bibr" target="#b49">[50,</ref><ref type="bibr" target="#b79">80,</ref><ref type="bibr" target="#b83">84]</ref>; and most do not provide any means to further assess the severity of information leaks, i.e., the risk they bring and the urgency with which they must be fixed. Based on these shortcomings, we argue that tools designed to identify address-based information leaks must tackle the following four challenges:</p><p>1. Leakage origin: Detect the exact location of data and control-flow leaks in programs on byte-address granularity instead of cache-line granularity. 2. Detection accuracy: Minimize false positives, e.g., caused by non-determinism that is statistically independent of the secret input, and provide reasonable strategies to also reduce false negatives. 3. Leakage classification: Provide means to classify leaks with respect to the information gained by an adversary. 4. Practicality: Report information leaks (i) fully automated, i.e., without requiring manual intervention, (ii) using only the program binary, i.e., without requiring the source code, and (iii) efficiently in terms of performance. In this work, we tackle these challenges with differential address trace analysis (DATA), a methodology and tool to identify address-based information leaks in application binaries. DATA is intended to be a companion during testing and verification of security-critical software. <ref type="bibr" target="#b0">1</ref> It targets programs processing secret input, e.g., keys or passwords, and reveals dependencies between the secret and the program execution. Every leak that DATA iden-tifies in a program is potentially exposed to side-channel attacks. DATA works in three phases. Difference Detection: The first phase generates noiseless address traces by executing the target program with binary instrumentation. It identifies differences in these traces on a byte-address granularity. This accounts for all address-based side-channel attacks such as cache attacks <ref type="bibr" target="#b60">[61,</ref><ref type="bibr" target="#b63">64,</ref><ref type="bibr" target="#b86">87]</ref>, DRAM attacks <ref type="bibr" target="#b64">[65]</ref>, branch-prediction attacks <ref type="bibr" target="#b0">[1]</ref>, controlled-channel attacks <ref type="bibr" target="#b85">[86]</ref>, and many blackbox timing attacks <ref type="bibr" target="#b10">[11]</ref>. Leakage Detection: The second phase tests data and control-flow differences for dependencies on the secret input. A generic leakage test compares the address traces of (i) a fixed secret input and (ii) random secret inputs. If the traces differ significantly, the corresponding data or control-flow differences are labeled as secret-dependent leaks. This minimizes false positives and explicitly addresses non-deterministic program behavior introduced by blinding or probabilistic encryption, for example. Leakage Classification: The third phase classifies the information leakage of secret-dependent data and control-flow differences. This is achieved with specific leakage tests that find linear and non-linear relations between the secret input and the address traces. These leakage tests are a valuable tool for security analysts to determine the severity and exploitability of a leak.</p><p>We implement DATA in a fully automated evaluation tool that allows analyzing large software stacks, including initialization operations, such as key loading and parsing, as well as cryptographic operations. We use DATA to analyze OpenSSL and PyCrypto, confirming existing and identifying new vulnerabilities. Among several expected leaks in symmetric ciphers (AES, Blowfish, Camellia, CAST, Triple DES, ARC4), DATA also reveals known and previously unknown leaks in asymmetric primitives (RSA, DSA, ECDSA) and identifies erroneous bug fixes of supposedly resolved vulnerabilities. Outline. The remainder of this paper is organized as follows. In Section 2, we discuss background information and related work. In Section 3, we present DATA on a high level. In Sections 4-6 we describe the three phases of DATA. In Section 7, we give implementation details. In Section 8, we evaluate DATA on OpenSSL and PyCrypto. In Section 9, we discuss possible leakage mitigation techniques. Finally, we conclude in Section 10.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2">Background and Related Work</head></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.1">Microarchitectural Attacks</head><p>Microarchitectural side-channel attacks rely on the exploitation of information leaks resulting from contention for shared hardware resources. Especially microarchitectural components such as the CPU cache, the DRAM, and the branch prediction unit, where contention is based on memory addresses, enable powerful attacks that can be conducted from software only. For instance, attacks exploiting the different memory access times to CPU caches (aka cache attacks) range from timing-based attacks <ref type="bibr" target="#b10">[11]</ref> to more fine-grained attacks that infer accesses to specific memory locations <ref type="bibr" target="#b60">[61,</ref><ref type="bibr" target="#b63">64,</ref><ref type="bibr" target="#b86">87]</ref>. Likewise, DRAM row buffers have been used to launch sidechannel attacks <ref type="bibr" target="#b64">[65]</ref> by exploiting row buffer conflicts of different memory addresses. Also, the branch prediction unit has been exploited to attack OpenSSL RSA implementations <ref type="bibr" target="#b0">[1]</ref>. <ref type="bibr">Xu et al.</ref> [86] demonstrated a new class of attacks on shielded execution environments like Intel SGX, called controlled-channel attacks. They enable noise free observations of memory access patterns on a page granularity. For a detailed overview on microarchitectural attacks we refer to recent survey papers <ref type="bibr" target="#b28">[29,</ref><ref type="bibr" target="#b75">76]</ref>.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.2">Detection of Information Leaks</head></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.2.1">Terminology</head><p>We consider a program secure if it does not contain address-based information leaks. We distinguish between data and control-flow leakage. Data leakage occurs if accessed memory locations depend on secret inputs. Control-flow leakage occurs if code execution depends on secret inputs. We further distinguish between deterministic and non-deterministic programs. Latter include any kind of non-determinism such as randomization of intermediates (blinding) or results (probabilistic constructions). A false positive denotes an identified information leak that is in fact none. A false negative denotes an information leak which was not identified.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.2.2">Blackbox Timing Leakage Detection</head><p>These techniques measure the execution time of implementations for different classes of inputs and rely on statistical tests to infer whether or not the implementation leaks information <ref type="bibr" target="#b22">[23]</ref>. <ref type="bibr">Reparaz et al. [67]</ref> use Welch's t-test <ref type="bibr" target="#b82">[83]</ref> to identify vulnerable cryptographic implementations. More advanced approaches use symbolic execution to give upper leakage bounds <ref type="bibr" target="#b62">[63]</ref>. However, these approaches fall short for more fine-grained address-based attacks such as cache attacks.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.2.3">Address-based Leakage Detection</head><p>We distinguish between static and dynamic approaches. Static Approaches. Well-established static approaches are CacheAudit <ref type="bibr" target="#b23">[24,</ref><ref type="bibr" target="#b47">48]</ref> and follow-up works <ref type="bibr" target="#b24">[25,</ref><ref type="bibr" target="#b56">57]</ref>, which symbolically evaluate all program paths. Rather than pinpointing the leakage origin, CacheAudit accumulates potential leakage into a single metric, which represents an upper-bound on the maximum leakage possible. While a zero leakage bound guarantees absence of address-based side channels, a non-zero leakage bound could become rather imprecise (false positives) due to abstractions made on the data of the program. Abstraction also fundamentally prohibits analysis of interpreted code as it is encoded in the data plane of the interpreter. Dynamic Approaches. Dynamic analysis relies on concrete program executions, which possibly introduce false negatives. Ctgrind <ref type="bibr" target="#b49">[50]</ref> propagates secret memory throughout the program execution to detect its usage in conditional branches or memory accesses. However, ctgrind suffers from false positives as well as false negatives <ref type="bibr" target="#b3">[4]</ref>. In contrast, Stacco <ref type="bibr" target="#b83">[84]</ref> records address traces and analyzes them with respect to Bleichenbacher attacks <ref type="bibr" target="#b14">[15]</ref>, for which finding a single control-flow leak suffices. Stacco does not consider data leakage, and they do not consider reducing false negatives, i.e., finding multiple control-flow leaks within the traces. If they did, they would suffer from false positives due to improper trace alignment (they use Linux diff tool).</p><p>None of the above approaches supports specific leakage models to further assess the information leak. <ref type="bibr">Zankl et al. [89]</ref> analyze modular exponentiations under the Hamming weight model, but they do not consider other leakage models and only detect control-flow leaks. Combined Approaches. CacheD <ref type="bibr" target="#b79">[80]</ref> combines dynamic trace recording with static analysis introducing both, false negatives and false positives. They symbolically execute only instructions that might be influenced by the secret key. Since they only analyze a single execution, they miss leakage in other execution paths. Moreover, they do not model control-flow leaks. Attack-based Approaches. These are dynamic approaches that conduct specific attacks but do not generalize to other attacks. For instance, Brumley and Hakala <ref type="bibr" target="#b18">[19]</ref> as well as <ref type="bibr">Gruss et al. [36]</ref> suggested to detect implementations vulnerable to cache attacks by relying on template attacks. <ref type="bibr">Irazoqui et al. [41]</ref> use cache observations and a mutual information metric to identify control-flow and data leaks. Basu et al. <ref type="bibr" target="#b8">[9]</ref> and Chattopadhyay et al. <ref type="bibr" target="#b19">[20]</ref> quantify the information leakage in cache attacks.</p><p>Orthogonal Work. Other approaches analyze source code <ref type="bibr" target="#b13">[14]</ref>, which does not account for compilerintroduced information leaks or platform-specific behavior (cf. <ref type="bibr" target="#b3">[4]</ref>). Yet others demand source-code annotations <ref type="bibr" target="#b3">[4,</ref><ref type="bibr" target="#b4">5,</ref><ref type="bibr" target="#b6">7]</ref> or specify entirely new languages <ref type="bibr" target="#b15">[16]</ref>. While they can prove absence of leakage for already secured code, they struggle to pinpoint leaks in vulnerable code. In contrast, DATA is designed to find and pinpoint leakage in insecure, unannotated programs. After mitigating leakage found by DATA, absence of leakage could be proven using <ref type="bibr" target="#b3">[4,</ref><ref type="bibr" target="#b4">5,</ref><ref type="bibr" target="#b6">7,</ref><ref type="bibr" target="#b15">16,</ref><ref type="bibr" target="#b24">25]</ref>. </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.3">Improvement Over Existing Tools</head><p>By addressing the identified challenges in Section 1, DATA overcomes several shortcomings of existing approaches, as shown in <ref type="table" target="#tab_0">Table 1</ref>.</p><p>Leakage Origin. DATA follows a dynamic trace-based approach to identify both control flow and data leakage on byte-address granularity. This avoids wrong assumptions about attackers, e.g., only observing memory accesses at cache-line granularity <ref type="bibr" target="#b23">[24,</ref><ref type="bibr" target="#b40">41,</ref><ref type="bibr" target="#b79">80]</ref>, which were disproved by more advanced attacks <ref type="bibr" target="#b0">[1,</ref><ref type="bibr" target="#b87">88]</ref>. Nevertheless, identifying information leaks on a byte granularity still allows to map them to more coarse-grained attacks. Detection Accuracy. Static approaches like CacheAudit suffer from false positives. In contrast, DATA filters keyindependent differences with a high probability, thereby reducing false positives even for non-deterministic program behavior. However, as with all dynamic approaches, DATA could theoretically miss leakage that is not triggered during execution. Nevertheless, we found that in practice few traces already suffice, e.g., ≤ 10 for asymmetric algorithms, and ≤ 3 for symmetric algorithms, due to the high diffusion provided by these algorithms. Although without formal guarantee, this gives evidence that DATA reduces false negatives successfully. </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3">Differential Address Trace Analysis</head><p>DATA is a methodology and a tool to identify addressbased information leaks in program binaries. Threat Model. To cover a wide variety of possible attacks, we consider a powerful adversary who attempts to recover secret information from side-channel observations. In practice, attackers will likely face noisy observations because side channels typically stem from shared resources affected by noise from system load. Also, practical attacks only monitor a limited number of addresses or memory blocks. For DATA, we assume that the attacker can accurately observe full, noise-free address traces. More precisely, the attacker does not only learn the sequence of instruction pointers <ref type="bibr" target="#b58">[59]</ref>, i.e., the addresses of instructions, but also the addresses of the operands that are accessed by each instruction. This is a strong attacker model that covers many side-channel attacks targeting the processor microarchitecture (e.g., branch prediction) and the memory hierarchy (e.g., various CPU caches, prefetching, DRAM). A strong model is preferable here to detect as many vulnerabilities as possible. In line with <ref type="bibr" target="#b34">[35]</ref>, we consider defenses, such as address space layout randomization (ASLR) and code obfuscation, as ineffective against powerful attackers. Limitations. DATA covers software side channels of components that operate on address information only, e.g., cache prefetching and replacement, and branch prediction. In contrast, the recent Spectre <ref type="bibr" target="#b43">[44]</ref> and Meltdown <ref type="bibr" target="#b50">[51]</ref> bugs exploit not only address information but actual data which is speculatively processed but insufficiently isolated across different execution contexts. In these attacks, sensitive data spills over to the address bus. These hardware bugs cannot be detected by analyzing software binaries with tools listed in <ref type="table" target="#tab_0">Table 1</ref>. While software-only defenses exist for specific CPU models <ref type="bibr" target="#b21">[22,</ref><ref type="bibr" target="#b77">78]</ref>, a generic solution should fix the hardware.</p><p>Methodology. DATA consists of three phases, the difference detection phase, the leakage detection phase, and the leakage classification phase, as depicted in <ref type="figure" target="#fig_0">Figure 1</ref>.</p><p>In the difference detection phase, we execute the target program multiple times with varying secret inputs and record all accessed addresses with dynamic binary instrumentation in so-called address traces. Thereby, we ensure to capture both, control flow and data leakages at their exact origin. The recorded address traces are then compared and address differences are reported.</p><p>The leakage detection phase verifies whether reported address differences are actually secret-dependent and filters all that are statistically independent. For this step, the program is repeatedly executed with one fixed secret input and a set of varying (random) secret inputs. In contrast to the previous phase, only the initially reported differences need to be monitored. The address traces belonging to the fixed input are then compared to those of the random inputs using a generic leakage test. Statistical differences are reported as true information leaks.</p><p>The leakage classification phase helps security analysts to assess the severity of previously confirmed leaks. This is done with specific leakage tests that find linear or non-linear relations between a given secret input and the previously recorded address traces. Such relations are formulated as so-called leakage models, e.g., the Hamming weight model. If a relation is found, the corresponding leakage model defines the information an attacker can learn about the secret input by observing memory accesses to the identified addresses. All detected relations are included in the final leakage report. Relation to Similar Concepts. The idea of DATA is similar to differential power analysis (DPA) <ref type="bibr" target="#b45">[46]</ref>, which works on power traces. However, power traces are often noisy due to measurement uncertainty and the underlying physics. Hence, DPA often requires several thousand measurements and non-constant time implementations demand heavy pre-processing to correctly align power traces <ref type="bibr" target="#b54">[55]</ref>. In contrast, address traces are noisefree, which minimizes the number of required measurements and allows perfect re-alignment for non-constant time traces (due to control-flow leaks).</p><p>DATA is also related to differential computation analysis (DCA) <ref type="bibr" target="#b16">[17]</ref>. DCA relies on software execution traces to attack white-box crypto implementations. While DCA is conceptually similar to DATA, DCA attacks (whitebox model) consider a much stronger adversary who can read the actual content of accessed memory locations.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4">Difference Detection Phase</head><p>We now introduce address-based information leaks and discuss the steps to identify them, namely recording of address traces and finding differences within the traces. Notation. DATA analyzes a program binary P with respect to address leakage of secret input k. Let P(k) denote the execution of a program with controllable secret input k. We write t = trace(P(k)) to record a trace of accessed addresses during program execution. We define an address trace t = [a 0 , a 1 , a 2 , a 3 ...] as a sequence of executed instructions, augmented with memory addresses. For instructions operating on CPU registers, a i = ip holds the current instruction pointer ip. In case of memory operations, a i = (ip, d) also holds the accessed memory address d. Information leaks appear as differences in address traces. We develop an algorithm diff(t 1 ,t 2 ) that, given a pair of traces (t 1 , t 2 ), identifies all differences. If the traces are equal, diff(t 1 ,t 2 ) = ∅. A deterministic program P is leakage free if and only if no differences show up for any pair of secret inputs (k i , k j ):</p><formula xml:id="formula_0">∀k i , k j : diff(trace(P(k i )), trace(P(k j ))) = ∅ (1)</formula></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.1">Address-based Information Leakage</head><p>Data leakage is characterized by one and the same instruction (ip) accessing different memory locations (d).</p><p>Consider the code snippet in Listing 1, assuming line numbers equal code addresses. Execution with two different keys key A = <ref type="bibr" target="#b9">[10,</ref><ref type="bibr" target="#b10">11,</ref><ref type="bibr" target="#b11">12]</ref> and key B = [16, 17, 18] yields two address traces t A = trace(P(key A )) and t B = trace(P(key B )), with differences marked bold: 0 p r o g r a m e n t r y : c a l l p r o c e s s w i t h u s e r -i n p u t 1 u n s i g n e d char LUT [ 1 6 ] = { 0 x52 , 2 0 x19 , . . . 16 0 x37 } ; 17 i n t t r a n s f o r m ( i n t k v a l ) { r e t u r n LUT[ k v a l %16]; } 18 i n t p r o c e s s ( i n t key <ref type="bibr">[ 3 ]</ref> ) { 19 i n t v a l = t r a n s f o r m ( 0 ) ; 20 v a l += t r a n s f o r m ( key <ref type="bibr">[ 0 ]</ref> ) ; 21 v a l += t r a n s f o r m ( key <ref type="bibr">[ 1 ]</ref> ) ; 22 v a l += t r a n s f o r m ( key <ref type="bibr">[ 2 ]</ref> ) ; 23 r e t u r n v a l ; } Listing 1: Table look-up causing data leak.</p><p>Since the base address of LUT is 1, this operation leaks memory address kval + 1. The first call to transform (line 19) with kval = 0 results in a 1 = (17, 1). Subsequent calls (line 20-22) leak sensitive key bytes. The differences in the traces-marked bold-reveal key dependencies.</p><p>To accurately report data leakage and to distinguish non-leaking cases (line 19) from leaking cases (line 20-22), we take the call stack into account. We formalize data leaks as tuples (ip, cs, ev) of the leaking instruction ip, its call stack cs, and the evidence ev. The call stack is a list of caller addresses leading to the leaking function. For example, the first leak has the call stack cs = <ref type="bibr">[0,</ref><ref type="bibr" target="#b19">20]</ref>. The evidence is a set of leaking data addresses d. The larger the evidence set, the more information leaks. For example, ev = {11, 01} for the first leak, ev = {12, 02} for the second one, etc. Our diff algorithm would report:</p><formula xml:id="formula_1">diff(t A ,t B ) = {(17, [0, 20], {11, 01}), (17, [0, 21], {12, 02}), (17, [0, 22], {13, 03})}</formula><p>Control-flow leakage is caused by key-dependent branches. Consider the exponentiation in Listing 2, executed with two keys k A = 4 = 100 b and k B = 7 = 111 b . This yields the following address traces, where R, P, and T denote the data addresses of the variables r, p, and t.</p><formula xml:id="formula_2">trace(P(k A )) = t A = [0, 1,2, 3, 4, (7, R), (8, P), (9, R),</formula><p>2, 3, 5,(7,T),(8,P),(9,T), 2, 3, 5,(7,T),(8,P),(9,T), 2, 6] trace(P(k B )) = t B = [0, 1,2, 3, 4, (7, R), (8, P), (9, R), 2, 3, 4,(7,R),(8,P),(9,R), 2, 3, 4,(7,R),(8,P),(9,R), 2, 6]</p><p>There are two differences in the traces, both marked bold. The differences occur due to the if in line 3 which branches to line 4 or 5, depending on the key bit b, and causes operations in line 7 and 9 to be done either on the intermediate variable r or a temporary variable t. A control-flow leak is characterized by its branch point, where the control flow diverges, and its merge point, where branches coalesce again. In this example, the branch point is at line 3 and the merge point at line 2, when the next loop iteration starts. We model controlflow leaks as tuples (ip, cs, ev) of branch point ip, call stack cs, and evidence ev. For example, both differences occur at the same call stack cs = <ref type="bibr">[0]</ref>. Hence, they are reported as the same leak. The evidence is a set of subtraces corresponding to the two branches. Our diff algorithm would report:</p><formula xml:id="formula_3">diff(t A ,t B ) = {(3, [0], {[4, (7, R), (8, P), (9, R)],</formula><p>[5, (7, T ), (8, P), (9, T )]} )}</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.2">Recording Address Traces</head><p>We execute the program on a dynamic binary instrumentation (DBI) framework, namely Intel Pin <ref type="bibr" target="#b53">[54]</ref>, and store the accessed code and data addresses in an address trace. To execute the program in a clean and noise-free environment, we disable ASLR and keep public inputs (e.g., command line arguments, environment variables) to the program fixed. As shown in <ref type="figure" target="#fig_0">Figure 1</ref>, we repeat this multiple times with varying inputs, causing address leaks to show up as differences in the address traces.</p><p>The concept of DATA is agnostic to concrete recording tools and, hence, could also rely on other tools <ref type="bibr" target="#b70">[71]</ref> or hardware acceleration like Intel Processor Trace (IPT) <ref type="bibr" target="#b38">[39]</ref>. Since the recording time is small compared to trace analysis, we did not investigate other tools.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.3">Finding Trace Differences</head><p>The trace comparison algorithm (diff) in Algorithm 1 sequentially scans a pair of traces (t A , t B ) for address differences, while continuously re-aligning traces in the same pass. Whenever ip values match but data addresses (d) do not, a data difference is detected (lines 4-6).</p><p>Algorithm 1: Identifying address trace differences (diff). input : t A ,t B ... the two traces output: rep ... the report of all differences  Control-flow differences occur when ip differs (line 9-11). Differences are reported using report data diff and report cf diff using the format specified in Section 4.1. Trace Alignment. For control-flow differences, it is crucial to determine the correct merge points, as done by Algorithm 2. Starting from the branch point, it sequentially scans both traces, extending two sets S A and S B (lines 7-8) with the scanned instructions. If their intersection M becomes non-empty (lines 9-10), M holds the merge point's ip. We then determine the first occurrence of M in both branches using find (lines 11-12) and realign the traces before proceeding (Algorithm 1, line 11). Context-Sensitivity. Since control-flow leaks could incorporate additional function calls (e.g., function mul in Listing 2), we need to exclude those from the merge point search. Therefore, we maintain the current calling depth in counters C A and C B (lines 3-6) and skip calling depths &gt; 0 (lines 7-8). The functions isCall(a) and isRet(a) return true iff the assembler instruction at address a.ip is a function call or return, respectively. If the calling depth drops below zero, the trace returned to the function's call-site. We stop scanning this trace (lines <ref type="bibr" target="#b14">[15]</ref><ref type="bibr" target="#b15">[16]</ref><ref type="bibr" target="#b16">[17]</ref> and wait for the other trace to hit a merge point.</p><formula xml:id="formula_4">1 rep = ∅, i = 0, j = 0 2 while i &lt; |t A | ∧ j &lt; |t B | do 3 a = t A [i], b = t B [i] 4 if a.ip = b.ip then 5 if a.d = b.d then 6 rep = rep ∪ report data diff(t A ,t B , i, j) 7 end 8 i++, j++ 9 else 10 rep = rep ∪ report cf diff(t A ,t B , i, j) 11 (i, j) = find merge point(t A ,t B , i, j</formula><formula xml:id="formula_5">1 k = i, l = j, C A = 0, C B = 0, S A = ∅, S B = ∅ 2 while k &lt; |t A | ∧ l &lt; |t B | do 3 if isCall(t A [k]) then C A ++ ; 4 if isRet(t A [k]) then C A --; 5 if isCall(t B [l]) then C B ++ ; 6 if isRet(t B [l]) then C B --; 7 if C A &lt;= 0 then S A = S A ∪ t A [k].ip ; 8 if C B &lt;= 0 then S B = S B ∪ t B [l].ip ; 9 M = S A ∩ S B 10 if M = ∅ then 11 k = find(t A [i...k], M)</formula><p>Our context sensitive alignment also works for techniques like retpoline <ref type="bibr" target="#b77">[78]</ref> that aim to prevent Spectre attacks, since they just add additional call/ret layers. Code directly manipulating the stack pointer (return stack refill <ref type="bibr" target="#b77">[78]</ref>, setjmp/longjmp, exceptions, etc.) could be supported by detecting such stack pointer manipulations alongside calls and rets. Comparison to Related Work. Trace alignment has been studied before as the problem of correspondence between different execution points. Several approaches for identifying execution points exist <ref type="bibr" target="#b73">[74]</ref>. Instruction counter based approaches <ref type="bibr" target="#b57">[58]</ref> uniquely identify points in one execution but fail to establish a correspondence between different executions. Using calling contexts as correspondence metric could introduce temporal ambiguity in distinguishing loop iterations <ref type="bibr" target="#b74">[75]</ref>. Xin et al. <ref type="bibr" target="#b84">[85]</ref> formalize the problem of relating execution points across different executions as execution indexing (EI). They propose structural EI (SEI), which uses taken program paths for indexing but could lose comprehensiveness by mismatching execution points that should correspond <ref type="bibr" target="#b73">[74]</ref>. Other approaches combine call stacks with loop counting to avoid problems of ambiguity and comprehensiveness <ref type="bibr" target="#b73">[74]</ref>. Many demand recompilation <ref type="bibr" target="#b73">[74,</ref><ref type="bibr" target="#b74">75,</ref><ref type="bibr" target="#b84">85]</ref>, which prohibits their usage in our setting. Specifically, EI requires knowledge of post-dominators, typically extracted from control flow graphs (CFGs) <ref type="bibr" target="#b29">[30]</ref>, which are not necessarily available (e.g., obfuscated binaries or dynamic code generation). Using EI, Johnson et al. <ref type="bibr" target="#b41">[42]</ref> align traces in order to propagate differences back to their originating input. We use a similar intuition as Johnson et al. in processing and aligning traces in a single pass, however, without the need to make program execution indices explicit. By constantly re-aligning traces, we inherently maintain correspondence of execution points. Our set-based approach does not require CFG or post-dominator information.</p><p>In contrast to EI, we do not explicitly recover loops. This could cause imprecision when merging control-flow leaks embedded within loops. If the two branches are significantly asymmetric in length, we might match multiple shorter loop iterations against one longer iteration, thus introducing an artificial control-flow leak (false positive) when one branch leaves the loop while the other does not. Should such leaks occur, they would be dismissed as key independent in phase two. Note that correspondence (correct alignment) would be automatically restored as soon as both branches leave the loop. Also, this is not a fundamental limitation of DATA, as other trace alignment methods could be implemented as well. Combining Results. We run our diff algorithm pairwise on all recorded traces and accumulate the results in an intermediate report. Testing multiple traces helps capture nested leakage, that is, leakage which appears conditionally, depending on which branches are taken in a superordinate control-flow leak. Nested leakage would remain hidden when testing trace pairs which either take the wrong superordinate branch or exercise both branches.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5">Leakage Detection Phase</head><p>We implement a generic leakage test to reduce the number of false positives in case of (randomized) program behavior and events that are statistically independent of the secret input. The program is repeatedly executed with one fixed secret input and a set of random secret inputs. If the distributions of accessed addresses in these two sets can be distinguished, the corresponding address differences are marked as secret-dependent. A challenge that arises during this generic leakage test is that false negatives might occur if the fixed input is particularly similar to the average random case. We address this challenge by repeating the generic leakage test with multiple distinct fixed inputs and merging the results in the end. We introduce an appropriate leakage-evidence representation to compare distributions of accessed addresses.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5.1">Evidence Representation</head><p>We unify the representation of both data and control-flow evidences in so-called evidence traces. These traces hold a time-ordered sequence of memory addresses that a particular instruction accesses during one program execution. Note the difference to evidence sets used in Section 4.1, which are computed over multiple program executions. Evidence traces contain all essential information exploited in practical attacks, such as how often an address is accessed <ref type="bibr" target="#b10">[11,</ref><ref type="bibr" target="#b44">45]</ref> and also when, i.e., at which position an address is accessed in the trace <ref type="bibr" target="#b86">[87]</ref>. Recording. Similar to the difference detection phase, the target program is executed to gather address traces. This time, however, we only monitor the previously detected differences, which significantly reduces trace sizes and instrumentation time. For each instruction that caused address differences in the first phase, we gather individual evidence traces. Addresses accessed in case of data differences are written to the trace in chronological order. For control flow differences, the branch target addresses taken at the branch points are written to the evidence trace, again in chronological order. Building Histograms. As we execute the target program with multiple inputs, we accumulate the evidence traces   Implications. While the use of H addr and H pos reduces the measurement effort, we might miss leaks that only show up in H full . Such a leak would occur, if the secret permutes the addresses in the evidence traces, e.g., [r 1 , r 2 ] and [r 2 , r 1 ], while the length of the evidence traces as well as the number of accesses per address remains the same. These special cases can still be detected with a multi-dimensional generic leakage test using H full .</p><formula xml:id="formula_6">ev 0 = [r 1 , r 2 ], ev 1 = [r 3 , r 3 , r 2 , r 3 , r 1 ], ev 2 = [r 2 , r 1 , r 2 ]</formula></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5.2">Generic Leakage Test</head><p>We compile the evidence traces into two histograms, namely H fix addr and H fix pos for fixed secret inputs, and H rnd addr and H rnd pos for random inputs. If these histograms can be distinguished, the corresponding address difference constitutes a true information leak. In side-channel literature <ref type="bibr" target="#b32">[33,</ref><ref type="bibr" target="#b66">67]</ref>, this fixed-vs-random input testing is typically done by applying Welch's t-test <ref type="bibr" target="#b82">[83]</ref> to distributions of power consumption, electromagnetic emanation, or execution time measurements. For DATA, we cannot use the t-test, because it assumes normal distributions and evidence trace distributions are not necessarily normal. Instead, we use the more generic Kuiper's test <ref type="bibr" target="#b48">[49]</ref>, which does not make this assumption. The test essentially determines whether two probability distributions stem from the same base distribution or not. It is closely related to the Kolmogorov-Smirnov (KS) test but performs better when distributions differ in the tails instead of around the median. Since we do not assume anything about the tested distributions, we choose the increased sensitivity of Kuiper's test over the KS test at almost identical computational cost.</p><p>In preparation for Kuiper's test, we normalize our previously compiled histograms to obtain probability distributions. For the explanation of the test, assume two random variables X and Y , for which n X and n Y samples are observed. The first step of the test is to derive the empirical distribution functions F X (x) and F Y (x) as</p><formula xml:id="formula_7">F X (x) = 1 n X · n X ∑ i=1 I [X i ,∞] (x) .<label>(2)</label></formula><p>I is the indicator function, which is 1 if X i ≤ x, and 0 otherwise. F Y (x) is calculated accordingly. The Kuiper statistic V is then computed as</p><formula xml:id="formula_8">V = sup x [F X (x) − F Y (x)] + sup x [F Y (x) − F X (x)] . (3)</formula><p>The deviation of both distributions is significant if the Kuiper statistic V exceeds the significance threshold:</p><formula xml:id="formula_9">V st = Q −1 st (1 − α) C st (n X , n Y ) .<label>(4)</label></formula><p>C st relates the threshold to the number of samples each empirical distribution is based on. This is important, as a larger number of samples increases the sensitivity of the Kuiper statistic. It is approximated as</p><formula xml:id="formula_10">C st (n X , n Y ) = n X n Y (n X + n Y ) + 0.155 + 0.24 n X n Y (n X +n Y )</formula><p>. <ref type="formula">(5)</ref> Q st is derived from the asymptotic distribution of the Kuiper statistic. It links the test statistic to a certain confidence level and is defined as</p><formula xml:id="formula_11">Q st (λ ) = 2 ∞ ∑ i=1 4i 2 λ 2 − 1 e −2i 2 λ 2 .<label>(6)</label></formula><p>Its inverse, Q −1 st , is calculated numerically. The value (1 − α) determines the probability with which Kuiper's test produces false positives. For all tests performed in this work, this probability is set to 0.0001. If Kuiper's test statistic is significant, the corresponding data or control-flow difference is flagged as an information leak. Accuracy. The probability of reporting false positives is sufficiently minimized by the choice of (1 − α). False negatives can occur, if the histograms H addr and H pos are insufficient estimations of the underlying evidence distributions. This happens if the number of program executions for fixed and random inputs is too small. It is, however, a common problem of unspecific leakage testing to determine a required minimum number <ref type="bibr" target="#b54">[55,</ref><ref type="bibr" target="#b71">72]</ref>. Analysts using DATA should therefore add traces until the test results stabilize and no new leaks are detected.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="6">Leakage Classification Phase</head><p>The leakage classification phase is based on a specific leakage test, which tests for linear and non-linear relations between the secret input and the evidences of information leaks. Finding these relations requires appropriate representations for both input and evidence traces, which are described in the following two sections.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="6.1">Evidence Representation</head><p>Similar to the leakage detection phase, we collect evidence traces for multiple random secret inputs. Unlike before, however, we do not merge evidence traces into histograms, since this would dismiss information about which input belongs to which evidence trace. Instead, we aggregate evidence traces into evidence matrices, where each column represents a unique trace (and unique secret input). Since evidence traces might differ both in length and accessed addresses, we cannot store them directly in a matrix. Instead, we capture the characteristics of the evidence traces in two separate matrices, M ev addr and M ev pos . The rows in both matrices correspond to the possible addresses in the traces. M ev addr stores the number</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>USENIX Association 27th USENIX Security Symposium 611</head><p>of accesses per address. If an address does not occur in a trace, the corresponding matrix entry is set to zero. M ev pos stores the position of each address in the evidence trace.</p><p>If an address does not occur in a trace, the matrix entry is set to '-1'. This labels an absent address and has no negative impact on the statistical test. Any other negative value works as well, because all valid positions are nonnegative integers. If an address occurs more than once in a trace, the matrix entry is set to the rounded median of the trace positions. The median adequately determines around which position in the evidence trace an address is accessed most frequently.</p><p>The following example illustrates how evidence matrices are compiled. We reuse the evidence traces ev 0 to ev 2 from Section 5.1 and insert one column for each trace. For each of the addresses r 1 to r 3 , we insert one row. After adding the data, we obtain:</p><formula xml:id="formula_12">M ev addr =   1 1 1 1 1 2 0 3 0   , M ev pos =   0 4 1 1 2 1 -1 1 -1  </formula></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="6.2">Leakage Model</head><p>The transformation of the input is called leakage model. It defines which property or part of the secret input is compared to the evidence representations stored in M ev addr and M ev pos . This serves two purposes. First, it confines the scope of the statistical test. This is important because the complete input space of a secret is often too large to handle in practice, e.g., &gt; 2 128 for strong cryptographic keys. Second, this confinement implicitly quantifies the information an adversary could gain from observing evidences. A well-known leakage model is the Hamming weight model <ref type="bibr" target="#b54">[55]</ref>, which reduces a secret input to the number of its 1-bits. In <ref type="bibr" target="#b88">[89]</ref>, the Hamming weight model is used to find leaks in asymmetric cipher implementations. Another popular approach is slicing the secret input into smaller chunks <ref type="bibr" target="#b45">[46]</ref>, e.g., bytes or bits. While input slices are a good fit for byte-and bitwise operations in symmetric ciphers, they might not be the best fit for big-integer operations in asymmetric ciphers. Clearly, the choice of an appropriate leakage model is important, but ultimately depends on the target program. It requires some degree of domain knowledge, which we assume that analysts have. Our framework is designed to support a variety of leakage models, including Hamming weight and input slicing.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="6.3">Specific Leakage Test</head><p>For the specific leakage test, the target binary is executed n times with random secret inputs. Instead of gathering new measurements, we reuse the (random input) traces from the leakage detection phase. In preparation for the test, we derive M ev addr and M ev pos from the traces. We also transform the secret inputs according to the chosen leakage model L and store the results in the input matrix M in L . Similar to the evidence matrices, every input gets assigned a column in M in L . The number of rows is defined by the model, e.g., the Hamming weight of the entire input requires one row. All rows in M in L are then compared to all rows in M ev addr and M ev pos . For these comparisons, the selected rows are interpreted as pairwise observations of two random variables, X and Y , with length n X = n Y = n. We then use the Randomized Dependence Coefficient (RDC) <ref type="bibr" target="#b52">[53]</ref> to determine the relation between the observations. The RDC detects linear and non-linear relations between random variables, its test statistic R is defined between 0 and 1, with R = 1 showing perfect dependency and R = 0 stating statistical independence. The parameters of the RDC are set to the values proposed in <ref type="bibr" target="#b52">[53]</ref>: k = 20 and s = 1 6 . In contrast to mutual information estimators and similar metrics <ref type="bibr" target="#b67">[68]</ref>, which are also used in side-channel literature <ref type="bibr" target="#b30">[31]</ref>, the RDC can be calculated efficiently, especially for large sample sizes (n &gt; 100). We precompute the significance threshold R st for a given confidence level α by generating a sufficiently large number (≥ 10 4 ) of statistically independent sequences of length n (the same length as the rows in M ev addr , M ev pos , and M in L ) and estimating the distribution of R. Since the resulting distribution is approximately normal, we estimate the mean µ and the standard deviation σ . The significance threshold is then derived from Φ −1 (x), which is the inverse cumulative distribution function of the standard normal distribution, as follows:</p><formula xml:id="formula_13">R st = µ + σ · Φ −1 (α) .<label>(7)</label></formula><p>The value (1 − α) determines the probability with which the RDC produces false positives. For all tests performed in this work, it is set to 0.0001. If R exceeds R st , the tested rows exhibit a significant statistical relation. This means that an adversary is able to infer the values and properties of the secret input that are defined by the leakage model from side-channel observations. Accuracy. The probability of reporting false positives is sufficiently minimized by the choice of (1 − α). False negatives can occur if the number of observations n is too small. Similar to the discussion in Section 5, it is not possible to determine a required minimum number of observations that holds for arbitrary target programs. Naturally, simple and direct relations will be discovered with far less observations than faint and indirect ones.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="7">Implementation and Optimizations</head><p>While the concept of DATA is platform independent, we implement trace recording on top of the Intel Pin frame- work <ref type="bibr" target="#b37">[38]</ref> for analyzing x86 binaries. We record address traces in separate trace files. To reduce their size, we only monitor instructions with branching behavior and their target branch as well as instructions performing memory operations. This suffices to detect control-flow and data leakage. To speed up recording of evidence traces in the second phase, we only record those instructions flagged as potential leaks in the first phase. We implement the difference detection as well as the generic and the specific leakage tests in Python scripts, which condense all findings into human-readable leakage reports in XML format, structuring information leaks by libraries, functions, and call stacks. Tracking Heap Allocations. Depending on the utilization of the heap, identical memory objects could get assigned different addresses by the memory allocator. During trace analysis, this could cause the same objects to be interpreted as different ones. We encountered such behavior for OpenSSL, which dynamically allocates big numbers on the heap and resizes them on demand. This causes frequent re-allocations and big numbers hopping between different heap addresses for different program executions. Our Pintool can therefore be configured to detect heap objects and replace their virtual address with its relative address offset. Currently, our analysis treats all heap objects equally, making the results more readable. More elaborate approaches like <ref type="bibr" target="#b72">[73]</ref> are left as future work.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="8">Evaluation and Results</head><p>We used Pin version 3.2-81205 for instrumentation and compiled glibc 2.24 as well as OpenSSL 1.1.0f 2 in a default configuration with additional debug information, using GCC version 6.3.0. Although debug symbols are not required by DATA, it incorporates available debug symbols in the final report. This allows to map detected leaks to the responsible functions and data symbols. <ref type="bibr" target="#b1">2</ref> Specifically, we tested commit 7477c83e15.  <ref type="table" target="#tab_4">Table 2</ref> shows the results of the three phases of DATA, namely address differences, generic and specific leaks. OpenSSL (Symmetric Primitives). As summarized in the upper part of <ref type="table" target="#tab_4">Table 2</ref>, AES-NI (AES new instructions <ref type="bibr" target="#b36">[37]</ref>) as well as AES-VP (vector permutations based on SSSE3 extensions) do not leak. However, when using AES-NI (and other ciphers) via the OpenSSL command-line tool, the key parsing yields two data leaks, as indicated in brackets. Calling the AES-NI implementation without this command-line tool, as also done for the other three AES implementations, does not trigger these two data leaks. Besides, we identified four data leaks in the bit-sliced AES. While OpenSSL uses the protected implementation by Käspar and Schwabe <ref type="bibr" target="#b42">[43]</ref> for the actual encryption, they use the same unprotected key expansion as used in T-table implementations. All other tested symmetric implementations yield a significant number of data leaks since they rely on lookup tables with key-dependent memory accesses, which makes them vulnerable to cache attacks <ref type="bibr" target="#b10">[11,</ref><ref type="bibr" target="#b76">77]</ref>. These leaks have also been confirmed by the byte leakage model test. <ref type="figure" target="#fig_5">Figure 3</ref> shows statistical test results of the vulnerable AES T-table implementation for the first five rounds, averaged over the 16 table lookups in each round. Phase two finds generic key dependencies, regardless of the round (values well above V st ), confirming its accuracy. The chosen byte leakage model detects linear dependencies to the first round state (s 1 ), which allows known-plaintext attacks <ref type="bibr" target="#b10">[11]</ref>. For intermediate rounds, for which the chosen byte leakage model is not applicable, the test output is well below the threshold R st . By adapting the leakage model to the last round state, one could also test for ciphertext-only attacks <ref type="bibr" target="#b59">[60]</ref>. Moreover, one can see that the Hamming weight model on key bytes detects the same leakage but with a lower confidence, since it loses information about the key. This emphasizes the importance of choosing appropriate leak-age models. We summarize results in Appendix A. OpenSSL (Asymmetric Primitives). The asymmetric primitives show significant non-deterministic behavior, which is dismissed in the leakage detection phase. For example, OpenSSL uses RSA base blinding with a random blinding value. From 2248 differences in RSA, 1510 are dismissed, leaving 278 control-flow and 460 data leaks with key dependency. Among those, we found two constant-time vulnerabilities in RSA and DSA, respectively, which bypass constant-time implementations in favor of vulnerable implementations. This could allow key recovery attacks similar to <ref type="bibr" target="#b2">[3,</ref><ref type="bibr" target="#b81">82]</ref>. Moreover, DATA reconfirms address differences in the ECDSA wNAF implementation, as exploited in <ref type="bibr" target="#b9">[10,</ref><ref type="bibr" target="#b25">26,</ref><ref type="bibr" target="#b78">79]</ref>.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="8.1">Analysis Results</head><p>For asymmetric ciphers, we applied the Hamming weight (HW) model as well as the key bit model. The majority of leaks reported by the HW model are indicating that the length of the key or of intermediate values leaks (as the HW usually correlates with the length). For example, we detect leaks in functions that determine the length of big numbers, reconfirming the findings of <ref type="bibr" target="#b79">[80]</ref>. Also, OpenSSL uses lazy heap allocation to resize objects on demand. This can cause different heap addresses for different key lengths, which will show up as data leakage. In contrast to the HW, the key bit model is more fine-grained and thus targets very specific leaks only, e.g., it reveals leaks that occur when the private key is parsed. This constitutes an insecure usage of the private key, and a very subtle bug to find. Details about leaking functions are given in Appendix A. Python. We tested PyCrypto 2.6.1 running on CPython 2.7.13. The lower part of <ref type="table" target="#tab_4">Table 2</ref> summarizes our results. PyCrypto incorporates native shared libraries for certain cryptographic operations. From a side-channel perspective, this is desirable since those native libraries could be tightened against side-channel attacks, independently of the used interpreter. However, we found that all ciphers leak key bytes via unprotected lookup table implementations within those shared libraries, as indicated by the byte leakage model. We list the leaks in Appendix A. Leakage-free Crypto. We analyzed Curve25519 in NaCl <ref type="bibr" target="#b12">[13]</ref> as well as the corresponding Diffie-Hellman variant of OpenSSL (X25519) and found no addressbased information leakage (apart from OpenSSL's key parsing), approving their side-channel security.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="8.2">Discussion</head><p>Detection Accuracy. For symmetric algorithms in OpenSSL, we recorded up to 10 traces in the difference detection phase. We found that 3 traces are sufficient as more traces did not uncover additional differences. The low number of traces results from the high diffusion and the regular design of symmetric ciphers, which yields a  <ref type="figure">Figure 4</ref>: Dismissed non-deterministic differences and discovered leaks for OpenSSL RSA as stacked plot.</p><p>high probability for quickly hitting all variations in the program execution. This suggests that the difference detection phase achieves good accuracy for symmetric ciphers. Symmetric ciphers are typically deterministic, thus all differences are key-dependent. Indeed, <ref type="table" target="#tab_4">Table 2</ref> shows that the leakage detection phase confirms all differences as leaks.</p><p>To evaluate DATA's accuracy on non-deterministic programs, we tested OpenSSL asymmetric ciphers and collected up to 30 traces, as shown in <ref type="figure">Figure 4</ref>. While the address differences found in the difference detection phase do not settle within 30 traces (introducing false negatives), an important finding is that the majority of these differences are due to statistically independent program activity, e.g., RSA base blinding. These differences are characterized as key-independent and successfully filtered in the leakage detection phase. The number of actual data and control-flow leaks with key dependencies already settles at 4 traces. The few leaks observable with more traces are due to heap cleanup (these leaks were already discovered at heap allocation), leakage of the heap object's size, and exploring more paths of already discovered programming bugs. For example, DATA discovered the aforementioned RSA constant-time vulnerability, which was missed by other solutions, with only two traces. Analyzing more traces identifies more information leaks caused by the same programming bug. Hence, we recommend ≤ 10 traces for asymmetric primitives as a conservative choice. We observed similar behavior for DSA and ECDSA, but omit the details for brevity. Performance. We ran our experiments on a Xeon E5-2630v3 with 386 GB RAM. DATA achieves good performance, adapting its runtime to the number of discovered leaks. Analysis of the leakage-free AES-NI and AES-VP took around 6 s, as only the first phase is needed. Finding leaks in the OpenSSL AES T-table implementation took 5 CPU minutes. Leakage classification took 8 CPU min. Asymmetric algorithms require more traces and yield significantly more differences. Hence, the first phases took between 29.8 (for DSA) and 79.8 CPU minutes (for ECDSA). Running all three phases on RSA takes 233.8 CPU minutes with a RAM utilization of less than 4.5 GB (single core). By exploiting parallelism, the actual execution time can be significantly reduced, e.g., from 55 min to approximately 250 s for the first phase of RSA. Analyzing PyCrypto yields large address traces due to the interpreter (1GB and more), nevertheless DATA handles such large traces without hassle: The first phase discards all non-leaking instructions, stripping down trace sizes of the subsequent phases to kilobytes (see Appendix B).</p><p>Summary. The adoption of side-channel countermeasures is often partial, error-prone, and non-transparent in practice. Even though countermeasures have been known for over a decade <ref type="bibr" target="#b65">[66]</ref>, most OpenSSL symmetric ciphers as well as PyCrypto do not rely on protected implementations like bit-slicing. Also, the bit-sliced AES adopted by OpenSSL leaks during the key schedule, as the developers integrated it only partially <ref type="bibr" target="#b42">[43]</ref> since practical attacks have not been shown yet. Moreover, we discovered two new vulnerabilities, bypassing OpenSSL's constant-time implementations for RSA and DSA initialization. Considering incomplete bug fixes of similar vulnerabilities identified by Garcia et al. <ref type="bibr" target="#b26">[27,</ref><ref type="bibr" target="#b27">28]</ref>, this sums up to four implementation bugs related to the same countermeasure. This clearly shows that the tedious and errorprone task of implementing countermeasures should be backed by appropriate tools such as DATA to detect and appropriately fix vulnerabilities as early as possible.</p><p>We found issues in loading and parsing cryptographic keys as well as initialization routines. Finding these issues demands analysis of the full program execution, from program start to exit, which is out of reach for many existing tools. Also, analysis often neglects these information leaks because an attacker typically has no way to trigger key loading and other single events in practice. However, when using OpenSSL inside SGX enclaves (cf. Intel's SGX SSL library <ref type="bibr" target="#b39">[40]</ref>), the attacker can trigger arbitrarily many program executions, making single-event leakage practically relevant, as demonstrated by the RSA key recovery attack in <ref type="bibr" target="#b81">[82]</ref>.</p><p>Responsible Disclosure. We informed the library developers as well as Intel of our findings. In response, OpenSSL merged our proposed patches upstream.</p><p>Security Implications. A leak found by DATA does not necessarily constitute an exploitable vulnerability. The leakage classification phase helps in rating its severity, however, an accurate judgment often demands significant effort in assembling and improving concrete attacks <ref type="bibr" target="#b11">[12]</ref>. We argue that, unless good counter-arguments are given, any leak should be considered serious.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="9">Mitigating Address-based Leaks</head><p>After using DATA to identify address-based information leaks in cryptographic software implementations, the following approaches could be applied as mitigation. Software-based Mitigations. Coppens et al. <ref type="bibr" target="#b20">[21]</ref> proposed compiler transformations to eliminate keydependent control-flow dependencies. Similar approaches are followed by other program transformations <ref type="bibr" target="#b1">[2,</ref><ref type="bibr" target="#b55">56]</ref> and transactional branching <ref type="bibr" target="#b7">[8]</ref>. Data leaks of lookup table implementations can be mitigated by bitslicing <ref type="bibr" target="#b42">[43,</ref><ref type="bibr" target="#b46">47,</ref><ref type="bibr" target="#b65">66]</ref>. Scatter-gather prevents data leaks on RSA exponentiation by interleaving data in memory such that cache lines are accessed irrespective of the used index. However, scatter-gather must be implemented correctly to prevent more sophisticated attacks <ref type="bibr" target="#b87">[88]</ref>. Oblivious RAM <ref type="bibr" target="#b31">[32,</ref><ref type="bibr" target="#b76">77,</ref><ref type="bibr" target="#b90">91]</ref> has been proposed as a generic countermeasure against data leaks by hiding memory access patterns. Hardened software implementations could then be proven leakage-free using <ref type="bibr" target="#b3">[4,</ref><ref type="bibr" target="#b4">5,</ref><ref type="bibr" target="#b6">7,</ref><ref type="bibr" target="#b15">16,</ref><ref type="bibr" target="#b24">25]</ref>. Mitigations on Architectural/OS Level. Cache coloring <ref type="bibr" target="#b68">[69]</ref> and similar cache isolation mechanisms <ref type="bibr" target="#b51">[52]</ref> have been proposed to mitigate cache attacks. Others <ref type="bibr" target="#b89">[90]</ref> proposed OS-level defenses against last-level cache attacks by controlling page sharing via a copy-onaccess mechanism. Hardware transactional memory can be used to mitigate cache attacks by keeping all sensitive data in the cache during the computation <ref type="bibr" target="#b33">[34]</ref>. Compilerbased tools aim to protect SGX enclaves against cache attacks <ref type="bibr" target="#b17">[18]</ref> or controlled channel attacks <ref type="bibr" target="#b69">[70]</ref>.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="10">Conclusion</head><p>In this work, we proposed differential address trace analysis (DATA) to identify address-based information leaks. We use statistical tests to filter non-deterministic program behavior, thus improving detection accuracy.</p><p>DATA is efficient enough to analyze real-world software -from program start to exit. Thereby, we include key loading and parsing in the analysis and found leakage which has been missed before. Based on DATA, we confirmed existing and identified several unknown information leaks as well as already (supposedly) fixed vulnerabilities in OpenSSL. In addition, we showed that DATA is capable of analyzing interpreted code (PyCrypto) including the underlying interpreter, which is conceptually impossible with current static methods. This shows the practical relevance of DATA in assisting security analysts to identify information leaks as well as developers in the tedious task of correctly implementing countermeasures. Outlook. The generic design of DATA also allows detecting other types of leakage such as variable time floating point instructions by including the instruction operands in the recorded address traces. DATA also paves the way for analyzing other interpreted languages and quantifying the effects of interpretation and just-intime compilation on side-channel security. Moreover, DATA could be extended to analyze multi-threaded programs by recording and analyzing individual traces per execution thread.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Acknowledgments</head><p>We would like to thank the anonymous reviewers, as well as Mario Werner and our shepherd Stephen McCamant for their valuable feedback and insightful discussions that helped improve this work.</p><p>This work was partially supported by the TU Graz LEAD project "Dependable Internet of Things in Adverse Environments", by the Austrian Research Promotion Agency (FFG) via the K-project DeSSnet, which is funded in the context of COMET -Competence Centers for Excellent Technologies by BMVIT, BMWFW, Styria and Carinthia, as well as the European Research Council (ERC) under the European Unions Horizon 2020 research and innovation programme (grant agreement No 681402).</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>A Leaking Functions</head><p>OpenSSL <ref type="table">(Symmetric Primitives)</ref>. To analyze AES, we implemented a wrapper that calls the algorithm directly. For other algorithms, we used the openssl enc command-line tool with keys in hex format. DATA identified information leaks in the code that parses these keys. In particular, the leaks occur in function set hex, which uses stdlib's isxdigit function that performs leaking table lookups. Besides, OPENSSL hexchar2int uses a switch case to convert key characters to integers. Although symmetric keys are usually stored in binary format, one should be aware of such leaks.</p><p>The bit-sliced AES implementation uses the vulnerable x86 64 AES set encrypt key function for key schedule. In addition, the unprotected AES leaks in function x86 64 AES encrypt compact. Blowfish leaks at BF encrypt, Camellia leaks the LCamellia SBOX at Camellia Ekeygen and x86 64 Camellia encrypt, CAST leaks the CAST S table0 to 7 at CAST set key as well as CAST encrypt, DES leaks the des skb at DES set key unchecked as well as DES SPtrans at DES encrypt2.</p><p>OpenSSL (Asymmetric Primitives). For the analysis of asymmetric ciphers, we use OpenSSL to generate keys in PEM format and then invoke the openssl pkeyutl command-line tool to create signatures with those keys. Similar to symmetric ciphers, asymmetric implementations leak during key loading and parsing. We found leaks in EVP DecodeUpdate, in EVP DecodeBlock via lookup table data ascii2bin, in c2i ASN1 INTEGER that uses c2i ibuf and in BN bin2bn. Although the key is typically loaded only once at program startup, this has direct implications on applications using Intel SGX SSL.</p><p>DATA discovered two new vulnerabilities regarding OpenSSL's handling of constant-time implementations. The first one leaks during the initialization of Montgomery constants for secret RSA primes p and q. This is a programming bug: the so-called constant-time flag is set for p and q in function rsa ossl mod exp but not propagated to temporary working copies inside BN MONT CTX set, as shown in Listing 3, since the function BN copy in line 3 does not propagate the consttimeflag from mod to mont-&gt;N. This causes the inversion in line 5 to fall back to non-constant-time implementations (int bn mod inverse and BN div). The second vulnerability is a missing constant-time flag for the DSA private key inside dsa priv decode. This causes the DSA key loading to use the unprotected exponentiation function BN mod exp mont. Moreover, DATA confirms that ECDSA still uses the vulnerable point multiplication in ec wNAF mul, which was exploited in <ref type="bibr" target="#b9">[10,</ref><ref type="bibr" target="#b25">26,</ref><ref type="bibr" target="#b78">79]</ref>.</p><p>Finally, we found that the majority of information leaks reported for OpenSSL are leaking the length of the key or of intermediate variables. For example, we reconfirm the leak in BN num bits word <ref type="bibr" target="#b79">[80]</ref>, which leaks the number of bits of the upper word of big numbers. There are several examples where the key length in bytes is leaked, e.g., via ASN1 STRING set, BN bin2bn, strlen of glibc as well as via heap allocation.</p><p>PyCrypto. PyCrypto symmetric ciphers leak during encryption, mostly via lookup tables. AES leaks the tables Te0 to Te4 and Td0 to Td3 in functions ALGnew, rijndaelKeySetupEnc and rijndaelEncrypt. Blowfish leaks in functions ALGnew and Blowfish encrypt. CAST leaks the tables S1 to S4 in function block encrypt and the tables S5 to S8 in schedulekeys half. Triple DES leaks the table des ip in function desfunc as well as deskey. ARC4 leaks in function ALGnew. <ref type="table" target="#tab_6">Table 3</ref> summarizes the performance figures of DATA for each phase. <ref type="bibr" target="#b2">3</ref> Unless stated otherwise, all timings reflect the runtime in CPU minutes (single-core) and thus represent a fair and conservative metric. If tasks are parallelized, the actual runtime can be significantly reduced. Difference Detection Phase. For OpenSSL, the trace size is &lt; 30 MB for symmetric and &lt; 55 MB for asymmetric ciphers. For PyCrypto, each trace has approximately 1 GB, because the execution of the interpreter is included. Regarding runtime, OpenSSL symmetric ciphers require less than a minute. PyCrypto ciphers finish in 5 minutes or less, despite large trace sizes. OpenSSL asymmetric ciphers need between 29.8 and 79.8 CPU minutes for two reasons. First, they require more traces. As we compare traces pairwise in the first phase, the runtime grows quadratically in the number of traces. Second, asymmetric ciphers yield significantly more differences that need to be analyzed. Especially control-flow differences demand costly re-alignment of traces. Yet, these results are quite encouraging, especially since the automated analysis of large real-world software stacks is out of reach for many existing tools. Also, we see possible improvements in further speeding up analysis times.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>B Performance</head><p>Leakage Detection Phase. We analyze three fixed and one random setàset`setà 60 traces, yielding 240 traces in total. Since this phase only analyzes address differences reported by the previous phase, the sizes of the recorded traces are significantly smaller. From several MB to over 1 GB in phase one, the traces are now several KB to around 1.3 MB for RSA. This makes recording and analyzing an even larger number of traces, e.g., more than 240, efficient. For example, the analysis of OpenSSL bitsliced AES takes less than 5 CPU minutes. As expected, analyzing PyCrypto takes longer due to the instrumentation of the Python interpreter. Also, analysis of RSA is slower due to the high number of address differences to analyze. For example, RSA generates traces of up to 1343.9 KB to be analyzed. Nevertheless, phase two completes within less than 61 CPU minutes. Leakage Classification Phase. The last phase records and analyzes 200 traces with random keys. To speed up recording, we reuse traces from the random input set of the previous phase. We benchmarked symmetric ciphers with the byte leakage model. Analysis times vary heavily between ciphers, because the performance critically depends on the number of reported address leaks and the size of the evidences, which need to be classified. For instance, most ciphers complete in less than 80 minutes, and AES bit-sliced in even 3.2 minutes. In contrast, PyCrypto Blowfish took almost 9 CPU hours because of a <ref type="bibr" target="#b2">3</ref> The overall performance might be higher than the sum of all phases because it includes the generation of final reports. much larger number of evidences compared to PyCrypto AES, as can be seen from their trace sizes (271.8 kB for Blowfish versus 13.6 kB for AES). In general, testing the HW model is faster than the bit model because the HW cumulates all key bits into a single metric, while for the bit model we need to analyze multiple key bits independently. <ref type="table" target="#tab_4">Table 2</ref> shows that the cumulative runtime over both models is between 55 and 95 min. Also, the classification phase is generally slower than the leakage detection phase. This is because, first, DATA performs more specific leakage tests than generic ones (H addr/pos vs. M ev addr/pos ), and second, the RDC is more costly to compute than Kuiper's test. We believe significant performance savings are possible by pruning large evidence lists and by optimizing the RDC implementation. Summary. The last two columns illustrate that the overall performance of DATA adapts to the amount of discovered leakage, which is desirable. Leakage-free implementations finish within 6 s, while leaky ones take up to 580 CPU minutes. In any of the phases, analysis requires less than 4.5 GB of RAM when executing on a single core. This is within the range of desktop computers and commodity laptops. When multi-core environments are available, one can exploit parallelism to greatly speed up analysis times. In fact, we parallelized phase one and reduced its runtime for RSA from 55 CPU minutes to approximately 250 real seconds. Similar optimizations could be implemented for phase two and three. Moreover, when doing frequent testing, software developers could not only omit the leakage classification phase intended for security analysts but also skip the leakage detection phase in case of deterministic algorithms. </p></div><figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_0"><head>Figure 1 :</head><label>1</label><figDesc>Figure 1: Overview of differential address trace analysis (DATA).</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_1"><head></head><label></label><figDesc>Listing 2: Branch causing control-flow leak.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_2"><head>12 l</head><label>12</label><figDesc>= find(t B [ j...l], M) 13 return (k, l) 14 end 15 if C A &gt;= 0 then k++ ; 16 if C B &gt;= 0 then l++ ; 17 end 18 error No merge point found</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_3"><head>Figure 2 :</head><label>2</label><figDesc>Figure 2: Histogram H full over evidence traces.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_4"><head></head><label></label><figDesc>H addr contains one entry per address, counting how often each address occurs in the traces. Thus, H addr = [3, 4, 3] for addresses [r 1 , r 2 , r 3 ]. H pos records the length of the traces, which yields H pos = [0, 1, 1, 0, 1] for lengths 1 to 5. For illustration purposes, counting the number of accesses per position would yield [3, 3, 2, 1, 1, 0] for positions 1 to 6. The (negative) differences between the positions are [0, 1, 1, 0, 1], which is exactly H pos .</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_5"><head>Figure 3 :</head><label>3</label><figDesc>Figure 3: OpenSSL AES T-table leakage classification.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_0" validated="true"><head>Table 1 : Comparison of leakage detection tools. means that the tool suffers from false positives/negatives. means that the tool does not suffer from false positives/negatives. S denotes statistical guarantees.</head><label>1</label><figDesc></figDesc><table>Tool 
Approach 
Finest 
Covered vulnerabilities 
False positives 
False 
Output 
Source code 
Tool 
granularity CF leak 
Data leak 
Deterministic Non-deterministic negatives 
Leaks 
Key dependency 
required 
available 
CacheAudit [24] 
Static analysis 
Cache line 





Leakage bound 

no 

CacheAudit 2 [25] 
Static analysis 
Byte address 





Leakage bound 

no 

CacheD [80] 
Combined 
Cache line 





Leak origin 

no 

ctgrind [50] 
Dynamic 
Byte address 





Leak origin 

yes 

Stacco [84] 
Dynamic (trace-based) Byte address 


a 


Leak origin 

no 

MI-Tool [41] 
Dynamic (attack-based) 
Cache line 


S 
S 

Leak origin 
generic 
yes 

Zankl et al. [89] 
Dynamic (trace-based) Byte address 


S 
S 

Leak origin 
HW 
no 

DATA 
Dynamic (trace-based) Byte address 


S 
S 


Leak origin 
generic, HW, etc. 
no 


a Only the first control-flow leak is reliably identified. Reporting multiple leaks could cause false positives. 

</table></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_4" validated="true"><head>Table 2 : Leakage summary of algorithms.</head><label>2</label><figDesc></figDesc><table>Algorithm 
Differences 
Generic 
Specific 
Dismissed CF Data Byte/Bit HW 
AES-NI 
0 (2) 
0 
0 0 (2) 
0 (2) 
-
AES-VP 
0 
0 
0 
0 
0 
-
AES bit-sliced 
4 
0 
0 
4 
4 
-
AES T-table 
20 
0 
0 
20 
20 
-
Blowfish 
194 
0 
0 
194 
171 
-
Camellia 
82 
0 
0 
82 
55 
-
CAST 
202 
0 
0 
202 
133 
-
DES 
138 
0 
0 
138 
63 
-
Triple DES 
410 
0 
0 
410 
292 
-
ECDSA (secp256k1) 
515 
487 
1 
27 
3 
1 
DSA 
781 
354 160 
267 
19 
33 

OpenSSL 

RSA 
2248 
1510 278 
460 
11 139 
AES 
96 
0 
0 
96 
96 
-
ARC4 
5 
0 
0 
5 
5 
-
Blowfish 
384 
0 
0 
384 
384 
-
CAST 
284 
0 
0 
284 
216 
-
PyCrypto 

Triple DES 
108 
0 
12 
96 
101 
-

</table></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_6" validated="true"><head>Table 3 : Performance of DATA during the analysis of OpenSSL (top) and PyCrypto (bottom). Sizes are per trace. Time is in CPU minutes. Trace sizes for Classification are identical to Leakage Detection.</head><label>3</label><figDesc></figDesc><table>Algorithm 

Difference Detection 
Leakage Detection 
Classification 
Total 

Traces 
Size 
Time Traces 
Size 
Time Traces 
Time 
Time 
RAM 
(MB) (min.) 
(kB) 
(min.) 
(min.) (min.) 
(MB) 
AES-NI 
3 
0.5 
0.1 
-
-
-
-
-
0.1 
72.0 
AES-VP 
3 
0.5 
0.1 
-
-
-
-
-
0.1 
72.2 
AES bit-sliced 
3 
0.5 
0.4 
240 
0.2 
4.6 
200 
3.2 
8.4 
77.1 
AES T-table 
3 
0.5 
0.4 
240 
1.8 
4.6 
200 
8.0 
13.2 
101.4 
Blowfish 
3 
28.2 
0.8 
240 
264.8 
13.7 
200 
79.1 
96.0 
717.8 
Camellia 
3 
27.3 
0.6 
240 
2.5 
9.0 
200 
17.5 
27.3 
146.8 
CAST 
3 
27.3 
0.6 
240 
5.4 
9.2 
200 
36.3 
46.4 
247.5 
DES 
3 
27.3 
0.6 
240 
3.9 
9.1 
200 
9.9 
19.9 
139.5 
Triple DES 
3 
27.3 
0.7 
240 
13.9 
10.5 
200 
49.2 
60.9 
351.7 
ECDSA (secp256k1) 
10 
54.1 
79.8 
240 
387.9 
18.3 
200 
55.3 161.2 1,316.3 
DSA 
10 
35.6 
29.8 
240 
195.4 
14.7 
200 
56.9 106.1 1,054.6 

OpenSSL 

RSA 
10 
44.2 
55.0 
240 
1,343.9 
60.9 
200 
94.3 233.8 4,414.0 
AES 
3 
1081.6 
4.0 
240 
13.6 
43.6 
200 
88.2 136.2 1,223.0 
ARC4 
3 
1081.5 
3.9 
240 
6.4 
43.1 
200 
60.3 107.6 1,222.7 
Blowfish 
3 
1082.3 
5.0 
240 
271.8 
47.9 
200 
526.5 582.2 2,302.6 
CAST 
3 
1081.6 
4.0 
240 
11.8 
44.0 
200 
76.7 125.1 1,223.0 
PyCrypto 

Triple DES 
3 
1082.4 
4.2 
240 
65.8 
45.0 
200 
63.3 113.3 1,223.8 

time Cryptography. In Conference on Computer and Commu-
nications Security -CCS 2014 (2014), ACM, pp. 1267-1279. </table></figure>

			<note place="foot" n="1"> DATA is open-source and can be retrieved from https://github.com/Fraunhofer-AISEC/DATA.</note>

			<note place="foot">t A = [0, 18, 19, (17, 1), 20, (17, 11), 21, (17, 12), 22, (17, 13), 23] t B = [0, 18, 19, (17, 1), 20, (17, 01), 21, (17, 02), 22, (17, 03), 23] The function &apos;transform&apos; leaks the argument kval, which is used as index into the array LUT (line 17).</note>
		</body>
		<back>
			<div type="references">

				<listBibl>

<biblStruct xml:id="b0">
	<analytic>
		<title level="a" type="main">Predicting Secret Keys Via Branch Prediction</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Aciiç</forename><surname>Mez</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">O</forename><surname>Koç</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><forename type="middle">¸ K</forename><surname>And</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Seifert</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Topics in Cryptology -CT-RSA 2007</title>
		<imprint>
			<publisher>Springer</publisher>
			<date type="published" when="2007" />
			<biblScope unit="volume">4377</biblScope>
			<biblScope unit="page" from="225" to="242" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b1">
	<analytic>
		<title level="a" type="main">Transforming Out Timing Leaks</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Agat</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Principles of Programming Languages -POPL 2000</title>
		<imprint>
			<publisher>ACM</publisher>
			<date type="published" when="2000" />
			<biblScope unit="page" from="40" to="53" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b2">
	<analytic>
		<title level="a" type="main">Cache-Timing Attacks on RSA Key Generation</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Aldaya</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><forename type="middle">C</forename><surname>Garc´iagarc´ia</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><forename type="middle">P</forename><surname>Tapia</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">L</forename><forename type="middle">M A</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">And</forename><surname>Brum-Ley</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">B</forename><forename type="middle">B</forename></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IACR Cryptology ePrint Archive</title>
		<imprint>
			<biblScope unit="volume">2018</biblScope>
			<biblScope unit="page">367</biblScope>
			<date type="published" when="2018" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b3">
	<analytic>
		<title level="a" type="main">Verifying Constant-Time Implementations</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Almeida</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><forename type="middle">B</forename><surname>Barbosa</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Barthe</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">G</forename><surname>Dupressoir</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">F</forename><surname>And</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Emmi</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">USENIX Security Symposium</title>
		<imprint>
			<date type="published" when="2016" />
			<biblScope unit="page" from="53" to="70" />
		</imprint>
	</monogr>
	<note>USENIX Association</note>
</biblStruct>

<biblStruct xml:id="b4">
	<analytic>
		<title level="a" type="main">Formal Verification of Side-Channel Countermeasures Using Self-Composition</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Almeida</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><forename type="middle">B</forename><surname>Barbosa</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Pinto</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><forename type="middle">S</forename><surname>And</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Vieira</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">B</forename></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Sci. Comput. Program</title>
		<imprint>
			<biblScope unit="volume">78</biblScope>
			<biblScope unit="page" from="796" to="812" />
			<date type="published" when="2013" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b5">
	<analytic>
		<title level="a" type="main">A Shared Cache Attack That Works across Cores and Defies VM Sandboxing -and Its Application to AES</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Apecechea</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">G</forename><forename type="middle">I</forename><surname>Eisenbarth</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><surname>And</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Sunar</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">B</forename><surname>S$a</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">IEEE Symposium on Security and Privacy -S&amp;P 2015</title>
		<imprint>
			<publisher>IEEE Computer Society</publisher>
			<date type="published" when="2015" />
			<biblScope unit="page" from="591" to="604" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b6">
	<monogr>
				<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Barthe</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">G</forename><surname>Betarte</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">G</forename><surname>Campo</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><forename type="middle">D</forename><surname>Luna</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><forename type="middle">D</forename><surname>And</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Pichardie</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename></persName>
		</author>
		<title level="m">System-level Non-interference for Constant</title>
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b7">
	<analytic>
		<title level="a" type="main">Preventing Timing Leaks Through Transactional Branching Instructions</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Barthe</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">G</forename><surname>Rezk</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><surname>And</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Warnier</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Electr. Notes Theor. Comput. Sci</title>
		<imprint>
			<biblScope unit="volume">153</biblScope>
			<biblScope unit="page" from="33" to="55" />
			<date type="published" when="2006" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b8">
	<analytic>
		<title level="a" type="main">Testing Cache SideChannel Leakage</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Basu</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><surname>And</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Chattopadhyay</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Internaional Conference on Software Testing, Verification and Validation Workshops -ICST Workshops</title>
		<imprint>
			<publisher>IEEE Computer Society</publisher>
			<date type="published" when="2017" />
			<biblScope unit="page" from="51" to="60" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b9">
	<analytic>
		<title level="a" type="main">Just a Little Bit&quot; : A Small Amount of Side Channel Can Go a Long Way</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Benger</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">N</forename><surname>Van De Pol</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Smart</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">N</forename><forename type="middle">P</forename><surname>And</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Yarom</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Y</forename></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Cryptographic Hardware and Embedded Systems -CHES 2014</title>
		<imprint>
			<publisher>Springer</publisher>
			<date type="published" when="2014" />
			<biblScope unit="volume">8731</biblScope>
			<biblScope unit="page" from="75" to="92" />
		</imprint>
	</monogr>
	<note>Ooh Aah</note>
</biblStruct>

<biblStruct xml:id="b10">
	<monogr>
		<title level="m" type="main">Cache-Timing Attacks on AES</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><forename type="middle">J</forename><surname>Bernstein</surname></persName>
		</author>
		<ptr target="https://cr.yp.to/antiforgery/cachetiming-20050414.pdf.Accessed" />
		<imprint>
			<date type="published" when="2004" />
			<biblScope unit="page" from="2018" to="2023" />
		</imprint>
	</monogr>
<note type="report_type">Technical report</note>
</biblStruct>

<biblStruct xml:id="b11">
	<analytic>
		<title level="a" type="main">Sliding Right into Disaster: Left-toRight Sliding Windows Leak</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><forename type="middle">J</forename><surname>Bernstein</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Breitner</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Genkin</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">L</forename><forename type="middle">G</forename><surname>Bruin-Derink</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">N</forename><surname>Heninger</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><surname>Lange</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><surname>Van Vreden-Daal</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Yarom</forename><surname>And</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Y</forename></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Cryptographic Hardware and Embedded Systems -CHES 2017</title>
		<imprint>
			<publisher>Springer</publisher>
			<date type="published" when="2017" />
			<biblScope unit="volume">10529</biblScope>
			<biblScope unit="page" from="555" to="576" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b12">
	<monogr>
				<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><forename type="middle">J</forename><surname>Bernstein</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><surname>Lange</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Schwabe</forename><surname>And</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><surname>Nacl</surname></persName>
		</author>
		<ptr target="https://nacl.cr.yp.to/.Accessed" />
		<title level="m">Networking and Cryptography library</title>
		<imprint>
			<biblScope unit="page" from="2018" to="2023" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b13">
	<analytic>
		<title level="a" type="main">Verifying Constant-Time Implementations by Abstract Interpretation</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Blazy</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Pichardie</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>And</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Trieu</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">European Symposium on Research in Computer Security -ES-ORICS 2017</title>
		<imprint>
			<publisher>Springer</publisher>
			<date type="published" when="2017" />
			<biblScope unit="volume">10492</biblScope>
			<biblScope unit="page" from="260" to="277" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b14">
	<analytic>
		<title level="a" type="main">Chosen Ciphertext Attacks Against Protocols Based on the RSA Encryption Standard PKCS #1</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Bleichenbacher</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Advances in Cryptology -CRYPTO 1998</title>
		<imprint>
			<publisher>Springer</publisher>
			<date type="published" when="1998" />
			<biblScope unit="volume">1462</biblScope>
			<biblScope unit="page" from="1" to="12" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b15">
	<analytic>
		<title level="a" type="main">Verifying High-Performance Cryptographic Assembly Code</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">B</forename><surname>Bond</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><surname>Hawblitzel</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Kapritsos</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">K</forename><forename type="middle">R M</forename><surname>Leino</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><forename type="middle">R</forename><surname>Lorch</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">B</forename><surname>Parno</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Rane</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><forename type="middle">T V</forename><surname>Setty</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Thompson</forename><surname>And</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">L</forename><surname>Vale</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">USENIX Security Symposium</title>
		<imprint>
			<date type="published" when="2017" />
			<biblScope unit="page" from="917" to="934" />
		</imprint>
	</monogr>
	<note>USENIX Association</note>
</biblStruct>

<biblStruct xml:id="b16">
	<analytic>
		<title level="a" type="main">Differential Computation Analysis: Hiding Your White-Box Designs is Not Enough</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Bos</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><forename type="middle">W</forename><surname>Hubain</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><surname>Michiels</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">W</forename><surname>And</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Teuwen</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Cryptographic Hardware and Embedded Systems -CHES 2016</title>
		<imprint>
			<publisher>Springer</publisher>
			<date type="published" when="2016" />
			<biblScope unit="volume">9813</biblScope>
			<biblScope unit="page" from="215" to="236" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b17">
	<monogr>
		<title level="m" type="main">SGX: Hardening SGX Enclaves against Cache Attacks with Data Location Randomization</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Brasser</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">F</forename><surname>Capkun</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Dmitrienko</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Frassetto</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><surname>Kostiainen</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">K</forename><surname>Uller</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">U</forename><surname>And</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Sadeghi</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Dr</surname></persName>
		</author>
		<idno>CoRR abs/1709.09917</idno>
		<imprint>
			<date type="published" when="2017" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b18">
	<analytic>
		<title level="a" type="main">Cache-Timing Template Attacks</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Brumley</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">B</forename><forename type="middle">B</forename><surname>And</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Hakala</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><forename type="middle">M</forename></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Advances in Cryptology -ASIACRYPT 2009</title>
		<imprint>
			<publisher>Springer</publisher>
			<date type="published" when="2009" />
			<biblScope unit="volume">5912</biblScope>
			<biblScope unit="page" from="667" to="684" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b19">
	<analytic>
		<title level="a" type="main">Quantifying the information leak in cache attacks via symbolic execution</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Chattopadhyay</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Beck</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Rezine</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>And</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Zeller</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">International Conference on Formal Methods and Models for System Design -MEMOCODE 2017</title>
		<imprint>
			<publisher>ACM</publisher>
			<date type="published" when="2017" />
			<biblScope unit="page" from="25" to="35" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b20">
	<analytic>
		<title level="a" type="main">Practical Mitigations for Timing-Based SideChannel Attacks on Modern x86 Processors</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Coppens</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">B</forename><surname>Verbauwhede</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">I</forename><surname>Bosschere</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">K</forename><forename type="middle">D</forename><surname>Sutter</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">B</forename><forename type="middle">D</forename></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">IEEE Symposium on Security and Privacy -S&amp;P 2009</title>
		<imprint>
			<publisher>IEEE Computer Society</publisher>
			<date type="published" when="2009" />
			<biblScope unit="page" from="45" to="60" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b21">
	<monogr>
		<title level="m" type="main">The current state of kernel page-table isolation</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Corbet</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename></persName>
		</author>
		<ptr target="https://lwn.net/Articles/741878/.Ac-cessed" />
		<imprint>
			<date type="published" when="2018" />
			<biblScope unit="page" from="2018" to="2023" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b22">
	<analytic>
		<title/>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Coron</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Kocher</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><forename type="middle">C</forename><surname>And</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Naccache</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Statistics and Secret Leakage. In Financial Cryptography -FC</title>
		<imprint>
			<biblScope unit="page" from="157" to="173" />
			<date type="published" when="1962" />
			<publisher>Springer</publisher>
		</imprint>
	</monogr>
	<note>LNCS</note>
</biblStruct>

<biblStruct xml:id="b23">
	<analytic>
		<title level="a" type="main">CacheAudit: A Tool for the Static Analysis of Cache Side Channels</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Doychev</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">G</forename><surname>Feld</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Opf</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">B</forename><surname>Mauborgne</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">L</forename><surname>And</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Reineke</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">USENIX Security Symposium</title>
		<imprint>
			<date type="published" when="2013" />
			<biblScope unit="page" from="431" to="446" />
		</imprint>
	</monogr>
	<note>USENIX Association</note>
</biblStruct>

<biblStruct xml:id="b24">
	<analytic>
		<title level="a" type="main">Rigorous Analysis of Software Countermeasures Against Cache Attacks</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Doychev</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">G</forename><surname>And K ¨ Opf</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">B</forename></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Programming Language Design and Implementation -PLDI 2017</title>
		<imprint>
			<publisher>ACM</publisher>
			<date type="published" when="2017" />
			<biblScope unit="page" from="406" to="421" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b25">
	<analytic>
		<title level="a" type="main">Attacking OpenSSL Implementation of ECDSA with a Few Signatures</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Fan</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Wang</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">W</forename><surname>And</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Cheng</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Q</forename></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Conference on Computer and Communications Security -CCS 2016</title>
		<imprint>
			<publisher>ACM</publisher>
			<date type="published" when="2016" />
			<biblScope unit="page" from="1505" to="1515" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b26">
	<analytic>
		<title level="a" type="main">Constant-Time Callees with Variable-Time Callers</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Garc´iagarc´ia</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><forename type="middle">P</forename><surname>And</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Brumley</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">B</forename><forename type="middle">B</forename></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">USENIX Security Symposium</title>
		<imprint>
			<date type="published" when="2017" />
			<biblScope unit="page" from="83" to="98" />
		</imprint>
	</monogr>
	<note>USENIX Association</note>
</biblStruct>

<biblStruct xml:id="b27">
	<analytic>
		<title level="a" type="main">Make Sure DSA Signing Exponentiations Really are Constant-Time</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Garc´iagarc´ia</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><forename type="middle">P</forename><surname>Brumley</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">B</forename><forename type="middle">B</forename><surname>And</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Yarom</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Y</forename></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Conference on Computer and Communications Security -CCS 2016</title>
		<imprint>
			<publisher>ACM</publisher>
			<date type="published" when="2016" />
			<biblScope unit="page" from="1639" to="1650" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b28">
	<analytic>
		<title level="a" type="main">A Survey of Microarchitectural Timing Attacks and Countermeasures on Contemporary Hardware</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">G</forename><forename type="middle">E</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Q</forename><surname>Yarom</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Y</forename><surname>Cock</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>And</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Heiser</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">G</forename></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">J. Cryptographic Engineering</title>
		<imprint>
			<biblScope unit="volume">8</biblScope>
			<biblScope unit="page" from="1" to="27" />
			<date type="published" when="2018" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b29">
	<analytic>
		<title level="a" type="main">Finding Dominators in Practice</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Georgiadis</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">L</forename><surname>Werneck</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><forename type="middle">F F</forename><surname>Tarjan</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><forename type="middle">E</forename><surname>Tri-Antafyllis</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>And</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">August</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><forename type="middle">I</forename></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">European Symposium on Algorithms -ESA 2004</title>
		<imprint>
			<publisher>Springer</publisher>
			<date type="published" when="2004" />
			<biblScope unit="volume">3221</biblScope>
			<biblScope unit="page" from="677" to="688" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b30">
	<analytic>
		<title level="a" type="main">Mutual Information Analysis</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Gierlichs</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">B</forename><surname>Batina</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">L</forename><surname>Tuyls</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><surname>And</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Preneel</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">B</forename></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Cryptographic Hardware and Embedded Systems -CHES 2008</title>
		<imprint>
			<publisher>Springer</publisher>
			<date type="published" when="2008" />
			<biblScope unit="volume">5154</biblScope>
			<biblScope unit="page" from="426" to="442" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b31">
	<analytic>
		<title level="a" type="main">Software Protection and Simulation on Oblivious RAMs</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Goldreich</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">O</forename><surname>And</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Ostrovsky</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">J. ACM</title>
		<imprint>
			<biblScope unit="volume">43</biblScope>
			<biblScope unit="page" from="431" to="473" />
			<date type="published" when="1996" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b32">
	<monogr>
		<title level="m" type="main">A Testing Methodology for Side Channel Resistance Validation</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Goodwill</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">G</forename><surname>Jun</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">B</forename><surname>Jaffe</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>And</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Rohatgi</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename></persName>
		</author>
		<ptr target="http://csrc.nist.gov/news_events/non-invasive-attack-testing-workshop/papers/08_Goodwill.pdf" />
		<imprint>
			<date type="published" when="2011" />
			<biblScope unit="page" from="2018" to="2023" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b33">
	<analytic>
		<title level="a" type="main">Strong and Efficient Cache SideChannel Protection using Hardware Transactional Memory</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Gruss</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Lettner</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Schuster</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">F</forename><surname>Ohrimenko</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">O</forename><surname>Haller</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">I</forename><surname>And</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Costa</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">USENIX Security Symposium</title>
		<imprint>
			<date type="published" when="2017" />
			<biblScope unit="page" from="217" to="233" />
		</imprint>
	</monogr>
	<note>USENIX Association</note>
</biblStruct>

<biblStruct xml:id="b34">
	<analytic>
		<title level="a" type="main">Prefetch Side-Channel Attacks: Bypassing SMAP and Kernel ASLR</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Gruss</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Maurice</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><surname>Fogh</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Lipp</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>And</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Man-Gard</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Conference on Computer and Communications Security -CCS 2016</title>
		<imprint>
			<publisher>ACM</publisher>
			<date type="published" when="2016" />
			<biblScope unit="page" from="368" to="379" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b35">
	<analytic>
		<title level="a" type="main">Cache Template Attacks: Automating Attacks on Inclusive Last-Level Caches</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Gruss</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Spreitzer</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>And</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Mangard</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">USENIX Security Symposium</title>
		<imprint>
			<date type="published" when="2015" />
			<biblScope unit="page" from="897" to="912" />
		</imprint>
	</monogr>
	<note>USENIX Association</note>
</biblStruct>

<biblStruct xml:id="b36">
	<monogr>
				<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Gueron</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><forename type="middle">White</forename><surname>Paper</surname></persName>
		</author>
		<ptr target="https://software.intel.com/file/24917.Accessed" />
		<title level="m">Intel Advanced Encryption Standard (AES) Instructions Set</title>
		<imprint>
			<date type="published" when="2010" />
			<biblScope unit="page" from="2018" to="2023" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b37">
	<monogr>
		<title level="m" type="main">Pin -A Dynamic Binary Instrumentation Tool</title>
		<ptr target="https://software.intel.com/en-us/articles/pintool/.Ac-cessed" />
		<imprint>
			<biblScope unit="page" from="2018" to="2023" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b38">
	<monogr>
		<title level="m" type="main">Intel 64 and IA-32 Architectures Software Developers Manual</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Intel</forename></persName>
		</author>
		<imprint>
			<date type="published" when="2016" />
			<biblScope unit="page" from="325462" to="061" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b39">
	<monogr>
		<title level="m" type="main">SgxSSL Library User Guide</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Intel</forename><surname>Intel</surname></persName>
		</author>
		<ptr target="https://software.intel.com/sites/default/files/managed/3b/05/Intel-SgxSSL-Library-User-Guide.pdf.Accessed" />
		<imprint>
			<date type="published" when="2018" />
			<biblScope unit="page" from="2018" to="2023" />
		</imprint>
	</monogr>
	<note>Rev. 1.2.1.</note>
</biblStruct>

<biblStruct xml:id="b40">
	<monogr>
		<title level="m" type="main">Did we learn from LLC Side Channel Attacks? A Cache Leakage Detection Tool for Crypto Libraries</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Irazoqui</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">G</forename><surname>Cong</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">K</forename><surname>Guo</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">X</forename><surname>Khattri</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">H</forename><surname>Kanu-Parthi</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><forename type="middle">K</forename><surname>Eisenbarth</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><surname>And</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Sunar</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">B</forename></persName>
		</author>
		<idno>CoRR abs/1709.01552</idno>
		<imprint>
			<date type="published" when="2017" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b41">
	<analytic>
		<title level="a" type="main">Differential Slicing: Identifying Causal Execution Differences for Security Applications</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Johnson</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">N</forename><forename type="middle">M</forename><surname>Caballero</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Chen</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">K</forename><forename type="middle">Z</forename><surname>Mcca-Mant</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Poosankam</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><surname>Reynaud</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>And</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Song</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">IEEE Symposium on Security and Privacy -S&amp;P 2011</title>
		<imprint>
			<publisher>IEEE Computer Society</publisher>
			<date type="published" when="2011" />
			<biblScope unit="page" from="347" to="362" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b42">
	<analytic>
		<title level="a" type="main">Faster and Timing-Attack Resistant AES-GCM</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">K ¨ Asper</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">E</forename><surname>And</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Schwabe</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Cryptographic Hardware and Embedded Systems -CHES 2009</title>
		<imprint>
			<publisher>Springer</publisher>
			<date type="published" when="2009" />
			<biblScope unit="volume">5747</biblScope>
			<biblScope unit="page" from="1" to="17" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b43">
	<monogr>
				<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Kocher</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><surname>Genkin</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Gruss</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Haas</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">W</forename><surname>Hamburg</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Lipp</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Mangard</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Prescher</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><surname>Schwarz</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>And</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Yarom</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Y</forename></persName>
		</author>
		<title level="m">Spectre Attacks: Exploiting Speculative Execution. meltdownattack.com</title>
		<imprint>
			<date type="published" when="2018" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b44">
	<analytic>
		<title level="a" type="main">Timing Attacks on Implementations of DiffieHellman, RSA, DSS, and Other Systems</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Kocher</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><forename type="middle">C</forename></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Advances in Cryptology -CRYPTO 1996</title>
		<imprint>
			<publisher>Springer</publisher>
			<date type="published" when="1996" />
			<biblScope unit="volume">1109</biblScope>
			<biblScope unit="page" from="104" to="113" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b45">
	<analytic>
		<title level="a" type="main">Differential Power Analysis</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Kocher</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><forename type="middle">C</forename><surname>Jaffe</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>And</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Jun</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">B</forename></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Advances in Cryptology -CRYPTO 1999</title>
		<imprint>
			<publisher>Springer</publisher>
			<date type="published" when="1999" />
			<biblScope unit="volume">1666</biblScope>
			<biblScope unit="page" from="388" to="397" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b46">
	<analytic>
		<title level="a" type="main">A Fast and Cache-Timing Resistant Implementation of the AES</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">K ¨ Onighofer</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Topics in Cryptology -CT-RSA 2008</title>
		<imprint>
			<publisher>Springer</publisher>
			<date type="published" when="2008" />
			<biblScope unit="volume">4964</biblScope>
			<biblScope unit="page" from="187" to="202" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b47">
	<analytic>
		<title level="a" type="main">Automatic Quantification of Cache Side-Channels</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">K ¨ Opf</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">B</forename><surname>Mauborgne</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">L</forename><surname>And</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Ochoa</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Computer Aided Verification -CAV 2012</title>
		<imprint>
			<publisher>Springer</publisher>
			<date type="published" when="2012" />
			<biblScope unit="volume">7358</biblScope>
			<biblScope unit="page" from="564" to="580" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b48">
	<monogr>
				<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Kuiper</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">N</forename><forename type="middle">H</forename></persName>
		</author>
		<title level="m">Tests concerning random points on a circle. Indagationes Mathematicae (Proceedings) 63, Supplement C</title>
		<imprint>
			<date type="published" when="1960" />
			<biblScope unit="page" from="38" to="47" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b49">
	<monogr>
		<title level="m" type="main">Checking that Functions are Constant Time with Valgrind</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Langley</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Ctgrind</surname></persName>
		</author>
		<ptr target="https://github.com/agl/ctgrind.Accessed" />
		<imprint>
			<biblScope unit="page" from="2018" to="2023" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b50">
	<monogr>
		<title/>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Lipp</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Schwarz</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Gruss</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Prescher</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><surname>Haas</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">W</forename><surname>Mangard</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Kocher</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><surname>Genkin</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Yarom</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Y</forename><surname>And</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Hamburg</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Meltdown</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2018" />
		</imprint>
	</monogr>
	<note>meltdownattack.com</note>
</biblStruct>

<biblStruct xml:id="b51">
	<analytic>
		<title level="a" type="main">CATalyst: Defeating last-level cache side channel attacks in cloud computing</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Liu</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">F</forename><surname>Ge</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Q</forename><surname>Yarom</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Y</forename><surname>Mckeen</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">F</forename><surname>Rozas</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><forename type="middle">V</forename><surname>Heiser</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">G</forename><surname>And</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Lee</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><forename type="middle">B</forename></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">High Performance Computer Architecture -HPCA 2016</title>
		<imprint>
			<publisher>IEEE Computer Society</publisher>
			<date type="published" when="2016" />
			<biblScope unit="page" from="406" to="418" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b52">
	<analytic>
		<title level="a" type="main">The Randomized Dependence Coefficient</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">L ´ Opez-Paz</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Hennig</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><surname>And</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">B</forename><surname>Sch¨olkopf</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Neural Information Processing Systems -NIPS 2013</title>
		<imprint>
			<date type="published" when="2013" />
			<biblScope unit="page" from="1" to="9" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b53">
	<analytic>
		<title level="a" type="main">Pin: Building Customized Program Analysis Tools with Dynamic Instrumentation</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Luk</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><surname>Cohn</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><forename type="middle">S</forename><surname>Muth</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Patil</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">H</forename><surname>Klauser</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Lowney</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><forename type="middle">G</forename><surname>Wallace</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Reddi</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">V</forename><forename type="middle">J</forename><surname>And</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Hazel-Wood</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">K</forename><forename type="middle">M</forename></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Programming Language Design and Implementation -PLDI 2005</title>
		<imprint>
			<publisher>ACM</publisher>
			<date type="published" when="2005" />
			<biblScope unit="page" from="190" to="200" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b54">
	<monogr>
		<title level="m" type="main">Power Analysis Attacks -Revealing the Secrets of Smart Cards</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Mangard</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Oswald</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">E</forename><surname>And</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Popp</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename></persName>
		</author>
		<imprint>
			<date type="published" when="2007" />
			<publisher>Springer</publisher>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b55">
	<analytic>
		<title level="a" type="main">Transforming Out Timing Leaks, More or Less</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Mantel</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">H</forename><surname>And</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Starostin</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">European Symposium on Research in Computer Security -ESORICS 2015</title>
		<imprint>
			<publisher>Springer</publisher>
			<date type="published" when="2015" />
			<biblScope unit="volume">9326</biblScope>
			<biblScope unit="page" from="447" to="467" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b56">
	<analytic>
		<title level="a" type="main">A Systematic Study of Cache Side Channels Across AES Implementations</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Mantel</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">H</forename><surname>Weber</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>And K ¨ Opf</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">B</forename></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Engineering Secure Software and Systems -ESSoS 2017</title>
		<imprint>
			<publisher>Springer</publisher>
			<date type="published" when="2017" />
			<biblScope unit="volume">10379</biblScope>
			<biblScope unit="page" from="213" to="230" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b57">
	<analytic>
		<title level="a" type="main">A Software Instruction Counter</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Mellor-Crummey</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><forename type="middle">M</forename><surname>And</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Leblanc</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><forename type="middle">J</forename></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Architectural Support for Programming Languages and Operating Systems -ASPLOS 1989</title>
		<imprint>
			<publisher>ACM Press</publisher>
			<date type="published" when="1989" />
			<biblScope unit="page" from="78" to="86" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b58">
	<analytic>
		<title level="a" type="main">The Program Counter Security Model: Automatic Detection and Removal of Control-Flow Side Channel Attacks</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Molnar</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Piotrowski</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Schultz</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>And Wag-Ner</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><forename type="middle">A</forename></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Information Security and Cryptology -ICISC 2005</title>
		<imprint>
			<publisher>Springer</publisher>
			<date type="published" when="2005" />
			<biblScope unit="volume">3935</biblScope>
			<biblScope unit="page" from="156" to="168" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b59">
	<analytic>
		<title level="a" type="main">Advances on Access-Driven Cache Attacks on AES</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Neve</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>And</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Seifert</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Selected Areas in Cryptography -SAC 2006</title>
		<imprint>
			<publisher>Springer</publisher>
			<date type="published" when="2006" />
			<biblScope unit="volume">4356</biblScope>
			<biblScope unit="page" from="147" to="162" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b60">
	<analytic>
		<title level="a" type="main">Cache Attacks and Countermeasures: The Case of AES</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Osvik</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><forename type="middle">A</forename><surname>Shamir</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>And</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Tromer</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">E</forename></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Topics in Cryptology -CT-RSA 2006</title>
		<imprint>
			<publisher>Springer</publisher>
			<date type="published" when="2006" />
			<biblScope unit="volume">3860</biblScope>
			<biblScope unit="page" from="1" to="20" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b61">
	<monogr>
		<title level="m" type="main">Partitioned Cache Architecture as a Side-Channel Defence Mechanism. IACR Cryptology ePrint Archive</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Page</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename></persName>
		</author>
		<imprint>
			<date type="published" when="2005" />
			<biblScope unit="page">280</biblScope>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b62">
	<analytic>
		<title level="a" type="main">Multirun Side-Channel Analysis Using Symbolic Execution and Max-SMT</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Pasareanu</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><forename type="middle">S</forename><surname>Phan</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Q</forename><surname>And</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Malacaria</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Computer Security Foundations -CSF 2016</title>
		<imprint>
			<publisher>IEEE Computer Society</publisher>
			<date type="published" when="2016" />
			<biblScope unit="page" from="387" to="400" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b63">
	<monogr>
		<title level="m" type="main">Cache Missing for Fun and Profit</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Percival</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename></persName>
		</author>
		<ptr target="http://www.daemonology.net/hyperthreading-considered-harmful/.Accessed" />
		<imprint>
			<date type="published" when="2005" />
			<biblScope unit="page" from="2018" to="2023" />
		</imprint>
	</monogr>
<note type="report_type">Technical report</note>
</biblStruct>

<biblStruct xml:id="b64">
	<analytic>
		<title level="a" type="main">DRAMA: Exploiting DRAM Addressing for Cross-CPU Attacks</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Pessl</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><surname>Gruss</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Maurice</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><surname>Schwarz</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>And</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Mangard</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">USENIX Security Symposium</title>
		<imprint>
			<date type="published" when="2016" />
			<biblScope unit="page" from="565" to="581" />
		</imprint>
	</monogr>
	<note>USENIX Association</note>
</biblStruct>

<biblStruct xml:id="b65">
	<analytic>
		<title level="a" type="main">Bitslice Implementation of AES</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Rebeiro</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><surname>Selvakumar</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><forename type="middle">D</forename><surname>And</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Devi</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><forename type="middle">S L</forename></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Cryptology and Network Security -CANS 2006</title>
		<imprint>
			<publisher>Springer</publisher>
			<date type="published" when="2006" />
			<biblScope unit="volume">4301</biblScope>
			<biblScope unit="page" from="203" to="212" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b66">
	<monogr>
				<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Reparaz</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">O</forename><surname>Balasch</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>And</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Verbauwhede</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">I</forename><surname>Dude</surname></persName>
		</author>
		<title level="m">is my code constant time? In Design, Automation &amp; Test in Europe -DATE 2017</title>
		<imprint>
			<publisher>IEEE</publisher>
			<date type="published" when="2017" />
			<biblScope unit="page" from="1697" to="1702" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b67">
	<monogr>
		<title level="m" type="main">An Empirical Study of Leading Measures of Dependence</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Reshef</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><forename type="middle">N</forename><surname>Reshef</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Y</forename><forename type="middle">A</forename><surname>Sabeti</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><forename type="middle">C</forename><surname>And</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Mitzen-Macher</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><forename type="middle">M</forename></persName>
		</author>
		<idno>CoRR abs/1505.02214</idno>
		<imprint>
			<date type="published" when="2015" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b68">
	<analytic>
		<title level="a" type="main">Limiting cachebased side-channel in multi-tenant cloud using dynamic page coloring</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Shi</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Song</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">X</forename><surname>Chen</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">H</forename><surname>And</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Zang</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">B</forename></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Dependable Systems and Networks Workshops -DSNW</title>
		<imprint>
			<publisher>IEEE</publisher>
			<date type="published" when="2011" />
			<biblScope unit="page" from="194" to="199" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b69">
	<monogr>
				<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Shih</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Lee</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Kim</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><surname>And</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Peinado</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>T-Sgx</surname></persName>
		</author>
		<title level="m">Eradicating Controlled-Channel Attacks Against Enclave Programs</title>
		<imprint>
			<publisher>The Internet Society</publisher>
			<date type="published" when="2017" />
		</imprint>
	</monogr>
	<note>Network and Distributed System Security Symposium -NDSS 2017</note>
</biblStruct>

<biblStruct xml:id="b70">
	<analytic>
		<title level="a" type="main">BitBlaze: A New Approach to Computer Security via Binary Analysis</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Song</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><forename type="middle">X</forename><surname>Brumley</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Yin</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">H</forename><surname>Caballero</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Jager</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">I</forename><surname>Kang</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><forename type="middle">G</forename><surname>Liang</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Z</forename><surname>Newsome</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Poosankam</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><surname>And</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Saxena</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">International Conference on Information Systems Security -ICISS 2008</title>
		<imprint>
			<publisher>Springer</publisher>
			<date type="published" when="2008" />
			<biblScope unit="volume">5352</biblScope>
			<biblScope unit="page" from="1" to="25" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b71">
	<monogr>
		<title level="m" type="main">How (not) to Use Welch&apos;s T-test in Side-Channel Security Evaluations. IACR Cryptology ePrint Archive</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Standaert</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">F</forename></persName>
		</author>
		<imprint>
			<date type="published" when="2017" />
			<biblScope unit="page">138</biblScope>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b72">
	<analytic>
		<title level="a" type="main">Memory indexing: canonicalizing addresses across executions</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Sumner</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">W</forename><forename type="middle">N</forename><surname>And</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Zhang</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">X</forename></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Foundations of Software Engineering -FSE 2010</title>
		<imprint>
			<publisher>ACM</publisher>
			<date type="published" when="2010" />
			<biblScope unit="page" from="217" to="226" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b73">
	<analytic>
		<title level="a" type="main">Identifying execution points for dynamic analyses</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Sumner</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">W</forename><forename type="middle">N</forename><surname>And</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Zhang</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">X</forename></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Automated Software Engineering -ASE 2013</title>
		<imprint>
			<publisher>IEEE</publisher>
			<date type="published" when="2013" />
			<biblScope unit="page" from="81" to="91" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b74">
	<analytic>
		<title level="a" type="main">Precise calling context encoding</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Sumner</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">W</forename><forename type="middle">N</forename><surname>Zheng</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Y</forename><surname>Weeratunge</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>And</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Zhang</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">X</forename></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">International Conference on Software Engineering -ICSE 2010</title>
		<imprint>
			<publisher>ACM</publisher>
			<date type="published" when="2010" />
			<biblScope unit="page" from="525" to="534" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b75">
	<monogr>
		<title level="m" type="main">Survey of Microarchitectural Side and Covert Channels, Attacks, and Defenses. IACR Cryptology ePrint Archive</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Szefer</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename></persName>
		</author>
		<imprint>
			<date type="published" when="2016" />
			<biblScope unit="page">479</biblScope>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b76">
	<analytic>
		<title level="a" type="main">Efficient Cache Attacks on AES, and Countermeasures</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Tromer</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">E</forename><surname>Osvik</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><forename type="middle">A</forename><surname>And</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Shamir</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">J. Cryptology</title>
		<imprint>
			<biblScope unit="volume">23</biblScope>
			<biblScope unit="page" from="37" to="71" />
			<date type="published" when="2010" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b77">
	<monogr>
		<title level="m" type="main">Retpoline: a software construct for preventing branch-target-injection</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Turner</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename></persName>
		</author>
		<ptr target="https://support.google.com/faqs/answer/7625886.Accessed" />
		<imprint>
			<date type="published" when="2018" />
			<biblScope unit="page" from="2018" to="2023" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b78">
	<analytic>
		<title level="a" type="main">Just a Little Bit More</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Van De Pol</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">N</forename><forename type="middle">P</forename><surname>Smart</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Yarom</forename><surname>And</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Y</forename></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Topics in Cryptology -CT-RSA 2015</title>
		<imprint>
			<publisher>Springer</publisher>
			<date type="published" when="2015" />
			<biblScope unit="volume">9048</biblScope>
			<biblScope unit="page" from="3" to="21" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b79">
	<analytic>
		<title level="a" type="main">CacheD: Identifying Cache-Based Timing Channels in Production Software</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Wang</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Wang</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><surname>Liu</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">X</forename><surname>Zhang</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>And</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">W</forename><forename type="middle">U</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">USENIX Security Symposium</title>
		<imprint>
			<date type="published" when="2017" />
			<biblScope unit="page" from="235" to="252" />
		</imprint>
	</monogr>
	<note>USENIX Association</note>
</biblStruct>

<biblStruct xml:id="b80">
	<analytic>
		<title level="a" type="main">New Cache Designs for Thwarting Software Cache-Based Side Channel Attacks</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Wang</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Z</forename><surname>And</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Lee</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><forename type="middle">B</forename></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">International Symposium on Computer Architecture -ISCA 2007</title>
		<imprint>
			<publisher>ACM</publisher>
			<date type="published" when="2007" />
			<biblScope unit="page" from="494" to="505" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b81">
	<analytic>
		<title level="a" type="main">Single Trace Attack Against RSA Key Generation in Intel SGX SSL</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Weiser</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Spreitzer</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>And</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Bodner</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">L</forename></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">ASIA Conference on Information</title>
		<imprint>
			<publisher>ACM</publisher>
			<date type="published" when="2018" />
			<biblScope unit="volume">2018</biblScope>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b82">
	<analytic>
		<title level="a" type="main">The generalization of student&apos;s problem when several different population varlances are involved</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Welch</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">B</forename><forename type="middle">L</forename></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Biometrika</title>
		<imprint>
			<biblScope unit="volume">34</biblScope>
			<biblScope unit="page" from="28" to="35" />
			<date type="published" when="1947" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b83">
	<analytic>
		<title level="a" type="main">STACCO: Differentially Analyzing Side-Channel Traces for Detecting SS-L/TLS Vulnerabilities in Secure Enclaves</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Xiao</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Y</forename><surname>Li</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Chen</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>And</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Zhang</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Y</forename></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Conference on Computer and Communications Security -CCS 2017</title>
		<imprint>
			<publisher>ACM</publisher>
			<date type="published" when="2017" />
			<biblScope unit="page" from="859" to="874" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b84">
	<analytic>
		<title level="a" type="main">Efficient Program Execution Indexing</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Xin</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">B</forename><surname>Sumner</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">W</forename><forename type="middle">N</forename><surname>And</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Zhang</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">X</forename></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Programming Language Design and Implementation -PLDI 2008</title>
		<imprint>
			<publisher>ACM</publisher>
			<date type="published" when="2008" />
			<biblScope unit="page" from="238" to="248" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b85">
	<analytic>
		<title level="a" type="main">Controlled-Channel Attacks: Deterministic Side Channels for Untrusted Operating Systems</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">X</forename><forename type="middle">U</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Y</forename><surname>Cui</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">W</forename><surname>And</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Peinado</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">IEEE Symposium on Security and Privacy -S&amp;P 2015</title>
		<imprint>
			<publisher>IEEE Computer Society</publisher>
			<date type="published" when="2015" />
			<biblScope unit="page" from="640" to="656" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b86">
	<analytic>
		<title level="a" type="main">FLUSH+RELOAD: A High Resolution, Low Noise, L3 Cache Side-Channel Attack</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Yarom</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Y</forename><surname>And</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Falkner</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">K</forename></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">USENIX Security Symposium</title>
		<imprint>
			<date type="published" when="2014" />
			<biblScope unit="page" from="719" to="732" />
		</imprint>
	</monogr>
	<note>USENIX Association</note>
</biblStruct>

<biblStruct xml:id="b87">
	<analytic>
		<title level="a" type="main">CacheBleed: A Timing Attack on OpenSSL Constant-time RSA</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Yarom</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Y</forename><surname>Genkin</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>And</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Heninger</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">N</forename></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">J. Cryptographic Engineering</title>
		<imprint>
			<biblScope unit="volume">7</biblScope>
			<biblScope unit="page" from="99" to="112" />
			<date type="published" when="2017" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b88">
	<analytic>
		<title level="a" type="main">Automated Detection of Instruction Cache Leaks in Modular Exponentiation Software</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Zankl</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Heyszl</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>And</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Sigl</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">G</forename></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Smart Card Research and Advanced Applications -CARDIS 2016</title>
		<imprint>
			<publisher>Springer</publisher>
			<date type="published" when="2016" />
			<biblScope unit="volume">10146</biblScope>
			<biblScope unit="page" from="228" to="244" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b89">
	<analytic>
		<title level="a" type="main">A Software Approach to Defeating Side Channels in Last-Level Caches</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Zhou</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Z</forename><surname>Reiter</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><forename type="middle">K</forename><surname>And</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Zhang</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Y</forename></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Conference on Computer and Communications Security -CCS 2016</title>
		<imprint>
			<publisher>ACM</publisher>
			<date type="published" when="2016" />
			<biblScope unit="page" from="871" to="882" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b90">
	<analytic>
		<title level="a" type="main">HIDE: An Infrastructure for Efficiently Protecting Information Leakage on the Address Bus</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Zhuang</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">X</forename><surname>Zhang</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><surname>And</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Pande</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Architectural Support for Programming Languages and Operating Systems -ASPLOS 2004</title>
		<imprint>
			<publisher>ACM</publisher>
			<date type="published" when="2004" />
			<biblScope unit="page" from="72" to="84" />
		</imprint>
	</monogr>
</biblStruct>

				</listBibl>
			</div>
		</back>
	</text>
</TEI>
