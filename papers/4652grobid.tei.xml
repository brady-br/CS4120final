<?xml version="1.0" encoding="UTF-8"?>
<TEI xmlns="http://www.tei-c.org/ns/1.0" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
xsi:schemaLocation="http://www.tei-c.org/ns/1.0 /Users/atharsefid/Desktop/grobid-0.5.3/grobid-home/schemas/xsd/Grobid.xsd"
 xmlns:xlink="http://www.w3.org/1999/xlink">
	<teiHeader xml:lang="en">
		<encodingDesc>
			<appInfo>
				<application version="0.5.3" ident="GROBID" when="2020-09-29T04:27+0000">
					<ref target="https://github.com/kermitt2/grobid">GROBID - A machine learning software for extracting information from scholarly documents</ref>
				</application>
			</appInfo>
		</encodingDesc>
		<fileDesc>
			<titleStmt>
				<title level="a" type="main">RouteDetector: Sensor-based Positioning System that Exploits Spatio-Temporal Regularity of Human Mobility</title>
			</titleStmt>
			<publicationStmt>
				<publisher/>
				<availability status="unknown"><licence/></availability>
			</publicationStmt>
			<sourceDesc>
				<biblStruct>
					<analytic>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Takuya</forename><surname>Watanabe</surname></persName>
							<affiliation key="aff0">
								<orgName type="laboratory">NTT Secure Platform Labs</orgName>
								<orgName type="institution" key="instit1">Waseda University</orgName>
								<orgName type="institution" key="instit2">Waseda University</orgName>
							</affiliation>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Mitsuaki</forename><surname>Akiyama</surname></persName>
							<affiliation key="aff0">
								<orgName type="laboratory">NTT Secure Platform Labs</orgName>
								<orgName type="institution" key="instit1">Waseda University</orgName>
								<orgName type="institution" key="instit2">Waseda University</orgName>
							</affiliation>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Tatsuya</forename><surname>Mori</surname></persName>
							<affiliation key="aff0">
								<orgName type="laboratory">NTT Secure Platform Labs</orgName>
								<orgName type="institution" key="instit1">Waseda University</orgName>
								<orgName type="institution" key="instit2">Waseda University</orgName>
							</affiliation>
						</author>
						<title level="a" type="main">RouteDetector: Sensor-based Positioning System that Exploits Spatio-Temporal Regularity of Human Mobility</title>
					</analytic>
					<monogr>
						<imprint>
							<date/>
						</imprint>
					</monogr>
				</biblStruct>
			</sourceDesc>
		</fileDesc>
		<profileDesc>
			<abstract>
				<p>We developed a novel, proof-of-concept side-channel attack framework called RouteDetector, which identifies a route for a train trip by simply reading smart device sensors: an accelerometer, magnetometer, and gyroscope. All these sensors are commonly used by many apps without requiring any permissions. The key technical components of RouteDetector can be summarized as follows. First, by applying a machine-learning technique to the data collected from sensors, RouteDetector detects the activity of a user, i.e., &quot;walking,&quot; &quot;in moving vehicle,&quot; or &quot;other.&quot; Next, it extracts departure/arrival times of vehicles from the sequence of the detected human activities. Finally, by correlating the detected departure/arrival times of the vehicle with timetables/route maps collected from all the railway companies in the rider&apos;s country, it identifies potential routes that can be used for a trip. We demonstrate that the strategy is feasible through field experiments and extensive simulation experiments using timetables and route maps for 9,090 railway stations of 172 railway companies.</p>
			</abstract>
		</profileDesc>
	</teiHeader>
	<text xml:lang="en">
		<body>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="1">Introduction</head><p>Modern smart devices, such as smartphones, smart watches, and smart glasses, have powerful embedded sensors such as accelerometers, magnetometers, gyroscopes, ambient light sensors, and heart rate monitors. While these sensors are used to provide new user experiences, they also bring the new line of side-channel attacks <ref type="bibr" target="#b0">[1,</ref><ref type="bibr" target="#b1">2,</ref><ref type="bibr" target="#b2">3,</ref><ref type="bibr" target="#b3">4,</ref><ref type="bibr" target="#b4">5,</ref><ref type="bibr" target="#b5">6,</ref><ref type="bibr" target="#b6">7,</ref><ref type="bibr" target="#b7">8]</ref>.</p><p>Let us consider a new side-channel attack called SPS (sensor-based positioning system), which also exploits sensors of smart devices. The ultimate goal of an SPS attack is to estimate the location of a user by reading sensors but without using conventional geolocation methodologies such as GPS, cell tower signals, or WiFi. Clearly, achieving the goal is difficult, primarily due to the high degree of freedom of user mobility.</p><p>The goal of this work is to make the SPS attack feasible. To this end, we exploit the spatio-temporal regularity of human mobility patterns <ref type="bibr" target="#b8">[9]</ref>; e.g., a person may use a fixed route on a transportation system for her/his commuting. Also, vehicles of transportation systems are generally expected to exhibit a temporal regularity unless they encounter operation problems such as natural disasters or rail accidents. We expect that exploiting the regularity enables us to reduce the degree of freedom of human mobility.</p><p>With this approach in mind, we develop a novel proof-of-concept attack framework called RouteDetector, which targets the location of passengers of transport service. It aims to identify the route of your train trip (i.e., the sequence of train stations) by simply reading three hardware sensors -accelerometer, magnetometer, and gyroscope -which are all accessible from any apps without requiring any permissions. A unique technical concept of RouteDetector is that it makes use of not only data collected from multiple sensors embedded in a smart device, but it also leverages external data that can extract privacy information by correlating with collected sensor data.</p><p>The key technical components of RouteDetector can be summarized as follows: First, by applying a machinelearning technique to the data collected from sensors, RouteDetector classifies the activity of a user, e.g., walking, riding on a moving vehicle, or other status such as still. Next, using the sequences of the detected activities, RouteDetector extracts departure/arrival times of vehicle(s). Finally, RouteDetector correlates the extracted departure/arrival times of vehicle(s) with timetables/route maps of all vehicles and searches the potential mobility paths.</p><p>The key findings of this work are summarized as follows:</p><p>• Our field experiments using smart devices demonstrate that the RouteDetector framework can de-tect departure/arrival times of vehicles with errors smaller than six seconds on average.</p><p>• Our extensive simulation experiments using timetables and route maps for 9,090 railway stations of 172 railway companies demonstrate that given a sequence of departure/arrival times, RouteDetector can identify routes used for a trip by train, and the average number of identified routes becomes close to one if the number of stations used on a trip is more than six.</p><p>These findings support that the attack is feasible. The rest of this paper is organized as follows. Section 2 describes the threat models we assume for RouteDetector In section 3, we present the details of the RouteDetector framework. Section 4 shows the results of performance evaluation. Section 6 discusses the limitations of RouteDetector and future research directions. We also discuss the possible counter measures against RouteDetector. Section 7 summarizes the related work. We conclude our work in section 8.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2">Threat models</head><p>Our threat model assumes that a malicious software, which requires only a permission of Internet connection, is installed on the victim's device. The software keeps collecting sensor values and estimating the activities of the owner of the device; i.e., walking (running), moving on a vehicle, or other. Sequences of detected activities are periodically sent to the adversary's computer. The adversary's computer estimates the route of transportation by analyzing the sequences. Note that it is also possible that the user device computes the estimation of routes and sends the estimated results to the adversary. It is easy for an adversary to know the hardware model of the smart device; for instance, in the Android platform, by accessing the fields of Android.os.Build class, he/she can obtain the hardware information, such as brand, manufacturer, and/or model. He/she can also know whether a smart device is being held in someone's hand or is inside a bag by reading the ambient light sensor or proximity sensor. Because the threat model targets passengers on public transportation systems, it is not useful where no public transportation system is available. We also assume that the adversary knows the list of public transportation systems that would likely be used by the victim. For instance, if a victim lives in a particular country, the adversary assumes that the victim may use any of railways available in that country. We also need to assume that the transportation system operates punctually; otherwise, RouteDetector's estimation may be inaccurate. We will study the issue in Sec. 4. Other limitations will be discussed in Sec. 6.  <ref type="figure">Figure 1</ref>: High-level overview of the RouteDetector framework.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3">RouteDetector Framework</head><p>In this section, we present an overview of the RouteDetector framework (Sec. 3.1). Then, we describe the sensors we used for our analysis (Sec. 3.2). We then describe the key technical components of the RouteDetector framework; the detection of user activities in Sec. 3.3, detection of departure/arrive time sequences of vehicles in Sec. 3.4, and the extraction of candidate routes in Sec. 3.5.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.1">Goal and Overview</head><p>The goal of the RouteDetector framework is to identify the route of a vehicle used by an owner of a smart device by reading the device's sensors. If a vehicle is a passenger train, a route is defined as a set of stations along a path. <ref type="figure">Figure 1</ref> depicts the high-level overview that achieves the goal, together with the number of corresponding subsections that describe the technical details. First, it reads values from sensors. As sensors, we picked up accelerometer, linear acceleration, magnetometer, and rotation vector, which are all accessible from any app without requiring any permissions. Details of data collection are described in Sec. 3.2. Next, we ex- tract user activities from the collected sensor data. The user activities are defined as a set of three classes, walking, riding on a moving vehicle (vehicle in short), and others, which includes various activities such as standing, sitting, or sleeping. To this end, we pre-process raw sensor data so that we can apply a supervised machinelearning (ML) approach. As a supervised ML algorithm, we adopt random forest, which is known to achieve robust and good performance for multi-class classification tasks. Details of data pre-processing and ML application are described in Sec. 3.3. From the extracted user activities, we can identify sequences of vehicle departure/arrival times. For instance, if we find a consecutive pairs of vehicle and others, it is likely that a user was on a vehicle. We can also consider cases in which a user made a transit. Details of detecting vehicle departure/arrival time sequence are described in Sec. 3.4. Finally, from an extracted vehicle departure/arrival time sequence, we search candidate routes, using timetables and railway route maps that cover the potential residential area of the victim, e.g., a country. We develop a fast algorithm that works in a breadth-first search manner. Details of extracting departure/arrival time sequence are described in Sec. 3.4.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.2">Sensor Data</head><p>Of the available sensors embedded into a smart device, we adopt four sensors; accelerometer, linear acceleration, magnetometer, and rotation vector. <ref type="table" target="#tab_1">Table 1</ref> summarizes the sensors we used. Although we tested other sensors, such as an ambient light sensor, the data was not effective in detecting user activities. Note that the four sensors can be divided into two classes: physical sensors and virtual sensors. While the accelerometer, magnetometer, and gyroscope are physical sensors that read raw values, the remaining sensor, linear acceleration, is a virtual sensor whose values are computed based on physical sensors. We note that the sensors are accessible from any app without requiring any permissions; therefore, they are prone to be covertly abused by a malicious developer.</p><p>We developed an Android app that collects the sensor data. All the values are collected at a rate of 10 Hz, i.e., read 10 values per second. The app also has a function to generate labels that are used for supervised ML.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.3">Detection of User Activities</head><p>Using the collected sensor data, we classify user activities into three distinct classes, walk, vehicle, and others. Note that vehicle refers to the status when a user is on a moving vehicle. If n user is standing on a vehicle, which is stopping at a station, his/her status is likely classified as others. We first pre-process raw sensor data in Sec. 3.3.1. Next, we apply a supervised machinelearning (ML) approach to the pre-processed data to detect user activities in Sec. 3.3.2.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.3.1">Data Pre-processing</head><p>We apply several data pre-processing techniques to the raw sensor data. <ref type="figure" target="#fig_0">Figure 2</ref> summarizes the data preprocessing scheme. First, to eliminate the effect of differences in the directions in 3D space, we compute a norm</p><formula xml:id="formula_0">for each 3D vector; i.e., a = √ a 2 x + a 2 y + a 2 z .</formula><p>Figures 3 (a) and (b) are examples of scalarized data. We then divide time series data into a set of blocks. A block consists of N samples for each sensor data; i.e., for each sensor data, a block b i has data:</p><formula xml:id="formula_1">D (i) (a) = {a (i) 1 , a (i) 2 , . . . , a (i) N }.</formula><p>We experimentally set N as N = 20, which corresponds to 2 seconds length with the 10-Hz rate of sensor data sampling. For each block, we extract features that can be used to characterize the patterns of temporal variability for the three classes. To this end, we adopted simple metrics; i.e., mean, standard deviation, minimum, and maximum. Finally, we normalize the data by subtracting means and dividing by standard deviations. In summary, the time series data is divided into blocks, and each block consists of four features for four sensors, resulting in feature vectors with 4 × 4 = 16 dimensions.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.3.2">Classifying User Activities</head><p>Using the pre-processed sensor data, we classify activities into three classes; walk, vehicle, and others. As a classification scheme, we adopt the Random forest algorithm, which is an ensemble learning algorithm used for classification or regression. In the training phase, the Random forest algorithm constructs multiple decision trees using randomly sampled data. In the classification phase, it predicts the most plausible class by taking the majority votes of the multiple decision trees. The good feature of Random forest is that it naturally achieves multi-class classification with a measure of score. We note that we also tested other supervised machine learning algorithms, such as SVM or logistic regression. It turned out that the differences in performance among the algorithms were not significant, but the Random forest algorithm worked best.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.4">Detection of Departure/Arrival Time Sequences of Vehicles</head><p>Using the detected user activities, we extract sequences of vehicle departure/arrival times. Among the user activities, we are most interested in vehicle activity because the start/end of the activity corresponds with the departure/arrival, respectively. However, as shown in <ref type="figure" target="#fig_1">Fig. 3</ref> (c), the predicted activities include some noise due to the inevitable classification errors. To reduce the effect of classification errors, we leverage the temporal correlation of the activities; i.e., once a user gets on a vehicle, it is likely that he/she stays on the vehicle for several minutes. Namely, we use the exponentially weighted moving average (EWMA) to account for temporal correlation of data. Let A n be the classified activity at block n, and W, V, and O be the set of blocks that are classified as walk, vehicle, and others, respectively. We define W n , V n , and O n as</p><formula xml:id="formula_2">W n = 1 W (A n ) V n = 1 V (A n ) O n = 1 O (A n ),</formula><p>where 1 Y (x) is an indicator function that is defined as</p><formula xml:id="formula_3">1 Y (x) =        1 if x ∈ Y 0 if x Y.</formula><p>First, we compute the EWMA of V n ; i.e.,</p><formula xml:id="formula_4">V n = λV n + (1 − λ)V n−1 ,</formula><p>where V n is EWMA and 0 ≤ λ ≤ 1 is a constant parameter that determines the smoothing factor. If λ is close to one/zero, the EWMA has a larger weight on the last observation/past observations. The parameter λ is empirically configured, as we will show later. Although the EWMA introduces a certain time lag to the original data, the size of the lag was negligible, as we will show later. Using the EWMA, the classified activities are corrected, as Next, using the corrected activities V n , we extract departure/arrival time sequences using the following algorithm, where τ is a threshold that determines the minimum length of time for a trip between two stations. In this calculation, we set τ = 60 (seconds).</p><formula xml:id="formula_5">V n =        1 if V n ≥ 0.5 0 if V n &lt; 0.5.</formula><p>Algorithm 1 Vehicle DEP./ARR. time sequences detection algorithm.</p><formula xml:id="formula_6">1: D =false ▷ Initial state 2: for all n = 1, 2, . . . do 3: if V n = 0 AND V n+1 = 1 then 4: T d = t n+1</formula><p>▷ t n is time at block n.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>5:</head><p>D =true ▷ A vehicle has been departured.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>6:</head><p>if V n = 1 AND V n+1 = 0 AND D = 1 then 7:</p><p>T a = t n+1 8:</p><formula xml:id="formula_7">D =false 9: if T a − T d &gt; τ then 10: return T a , T d</formula><p>We note that using blocks that were not classified as vehicles, i.e., {n; V n = 0}, W n and O n can be corrected using the similar procedure. Tracking W n and O n is useful for detecting transferring lines; i.e., if we observe a sequence of classified activities such as vehicle (3 mins), walk (2 mins), others (4 mins), and vehicle (5 mins), it is likely that a person changed lines. <ref type="figure" target="#fig_1">Figure 3 (e)</ref> shows such an example. The victim first got on a train and got off the train after three stations. He/she then changed lines (see the area "transfer" shown in the graph of W n ), and got on the next train.</p><p>As we shall see later, the activity of riding an escalator could be misclassified as being on a vehicle, although a person may be using it for transferring lines. Such a misclassification can be safely removed with this heuristic. <ref type="figure" target="#fig_1">Figure 3 (d)</ref> and (e) show such an example where all the ground-truth escalator points, which were misclassified as "vehicle" by random forest, are successfully eliminated in the corrected user activities. The heuristics are also useful for eliminating other errors regarding activity detection.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.5">Extracting Candidate Routes</head><p>Finally, using the extracted sequences of departure/arrival times, we estimate candidate routes. We formulate the estimation task as follows. Using railway route maps, we first create a single graph that consists of nodes (stations) connected by links (railroads). Next, using timetables corresponding to the railway route maps, we extend the graph so that it expresses temporal structure. Let us call the extended graph a "train graph." In a train graph, a link l(A, B, T d , T a , L) expresses a vehicle that departures station A at time T d and arrives at station B at time T a ; A and B are adjacent stations on line L. Note that we do not need to build/keep an entire train graph beforehand. Instead, we compile a set of all links and dynamically build subgraphs by applying our search algorithm to the set of links.</p><p>We use <ref type="figure">Fig. 4</ref> to demonstrate how the algorithm of searching candidate routes works. In the example, we have the input departure/arrival time sequence of {T d j, T a j} ( j = 1, 2, 3). Given the input, we first extract a set of links that satisfies l( * , * ,</p><formula xml:id="formula_8">T d 1, T a 1, * ) (Q1:</formula><p>query 1).</p><p>In the example, we found four links; (S 1, S 4,</p><formula xml:id="formula_9">T d 1, T a 1, L1), (S 1, S 5, T d 1, T a 1, L2), (S 2, S 6, T d 1, T a 1, L3</formula><p>), and (S 3, S 7, T d 1, T a 1, L4). For each link above, we recursively search the succeeding links. For instance, to find a link (vehicle) that departs station S 4 at time T d 2 and arrives at station X at time T a 2 on line L1, we search a link that satisfies l(S 4, * , T d 1, T a 1, L1) (see Q2) and found S 8 is the destination station. If we do not find any links that satisfy the given condition, we remove the paths from the search (see Q5, Q6). By continuing the above procedure, we can enumerate paths that satisfy the input departure/arrival time sequences; i.e., routes {S 1, S 4, S 8, S 11} and {S 3, S 7, S 10, S 12} in the example. Finally, when we get multiple routes for a given time sequence, it is useful that we can sort them according to some metrics. To this end, we compute the popularity of routes, as follows: For each link consisting of a route, we compute the number of other links that share the same pair of origin/destination stations with that link. We then sum up the numbers along the links of a route and define the result as a score. If a route has a larger score, it means that a larger number of trains run on that route. We adopt this score as a metric that expresses the popularity of a route.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4">Evaluation</head><p>In this section, we evaluate the performance of the RouteDetector framework. We first summarize the datasets we used for our analysis. Second, we evaluate the accuracy of the user activities detection scheme. We then evaluate the accuracy of departure/arrival time sequence detection. Finally, we evaluate the effectiveness of the candidate routes detection scheme.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.1">Data</head><p>The data we collected for evaluation is broadly classified into two datasets. The first set consists of sensor data used for detecting departure/arrival time sequences. The second set consists of timetables and railway route maps that are used for building a train map, which is then used to search candidate routes for a given time sequence. <ref type="table" target="#tab_2">Table 2</ref> presents the two smart devices used for our analysis. As we shall see later, different hardware sensors generally exhibit different values when given the same input. Therefore, we need to train each classification model for each device. Details regarding to the differences in device hardware will be discussed in Section 6.   Line are operated by Tokyo Metro. Of these lines, Yamanote Line is one of the busiest and most important lines that connect major stations in Tokyo. As shown in the table, we distinguish between two measurement types: a device held by hand (H) or located inside a still bag (B), which could be placed on the knee or on a rack. As we mentioned in Section 2, an adversary can distinguish the hardware of devices. He/she can also know whether a smart device is being held in someone's hand or is inside a bag by reading the ambient light sensor or proximity sensor.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.1.1">Sensor Data</head></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.1.2">Railway Route Maps and Timetables</head><p>While the coverage of collected sensor data is limited to a certain location, we use entire train services operated in Japan for building a train map. <ref type="table" target="#tab_5">Table 4</ref> summarizes the data we collected. Note that a link l(A, B, T d , T a , L) is defined in Section 3.5. We also note that if we can further specify the residential location of a victime, e.g., Kyoto area, the amount of data and candidate routes can be further reduced.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.2">User activities detection</head><p>We applied our user activities detection scheme to the data shown in <ref type="table" target="#tab_6">Table 5</ref>. The parameters of random forest were empirically optimized as n = 50 and m = 4, where n is the number of trees and m is the number of features used for each tree. To assess the generalization of the result, we employed 10-times, 10-fold cross-validation tests. We focused on the accuracy of detecting vehicles because it plays a crucial role in determining the departure/arrival time sequence. If a block of vehicle was incorrectly classified as walk or others, we defined it as a false negative. If a block of walk or others was classified as vehicle, we define it was false positive.   <ref type="table" target="#tab_7">Table 6</ref> summarizes the results. We noticed that classification accuracies are generally good in all the cases. We also noticed that measurement types of H, i.e., a device was inside a still bag, gave better accuracies. The result is intuitively natural because holding a smart device by hand may introduce motion noise.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.3">Departure/Arrival Time Sequences Detection</head><p>Next, we applied our departure/arrival time sequence detection algorithm to the extracted user activities. For each dataset, we picked up departure/arrival time sequences of 30 stations. The 30 samples are divided into a training set and a test set. Using the training set, the parameter of EWMA, λ, was optimized so that the difference between the detected departure/arrival time and observed departure/arrival time is minimized. Note that "detected" times are derived from sensors, "observed" times are manually labeled ones, and "scheduled" times are derived from a timetable corresponding to a train. To evaluate the performance, we employed 10-times, 3-fold cross-validation tests; i.e., 30 samples are randomly divided into 20 samples for a training set and 10 samples for a testing set, using different random seeds. <ref type="table">Table 7</ref> summarizes the absolute errors between detected and observed departure/arrival times. Note that observed departure/arrival times are not necessarily the scheduled times listed in timetables. The difference between the observed and scheduled times is shown in <ref type="figure" target="#fig_3">Fig. 5</ref>.</p><p>As we see, the detected departure/arrival times are close to the observed departure/arrival times. Maximal <ref type="table">Table 7</ref>: Absolute errors between detected times and observed (ground truth) times; departure (top) and arrival (bottom). m and σ are mean and standard deviation, respectively.  time differences are less than 3-11 seconds. Time differences are within 3-7 seconds. Note that all the departure/arrival events are perfectly detected. In addition, the observed departure/arrival times are also close to the scheduled times. Roughly 85% of trains depart within 60 seconds after the scheduled time has passed. Roughly 75% of trains arrived within 30 seconds around the scheduled time. In summary, the detected departure/arrival times by the RouteDetector framework are close to the observed departure/arrival times, which are close to the scheduled times. In the next subsection, we show how we search routes given the detected departure/arrival time sequences. We also present several case studies in Sec. 5.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.4">Candidate Routes Detection</head><p>While the evaluation of departure/arrival time detection scheme required empirical data, the evaluation of the candidate routes detection algorithm can be generalized by exploring paths on a train graph 1 . Using the train graph constructed from the data shown in <ref type="table" target="#tab_5">Table 4</ref>, we study the relationship between the number of links and the number of corresponding candidate routes. <ref type="figure" target="#fig_4">Figure 6</ref> shows the results. We can see that average number of identified routes becomes close to one if the number of stations used on a trip is more than six; i.e., if we observe more stations, the sequence of departure/arrival times become more unique. Even if the number of links is one, roughly 50% of time sequences T d , T a have less than four candidate routes.</p><p>Next, we study how quickly the search algorithm works. From the entire train graph, we first enumerate the routes whose lengths are less than 15 links, where we allowed, at most, two line changes. The number of enumerated routes was 6, 404, 455, 757. Using the C++ implementation of the algorithm that runs on a commodity PC, all these routes were searched within 74 mins. On average, a route was searched within 7.1 microseconds. Thus, the candidate routes detection worked quickly even though the scale of the train graph was huge.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5">Case study</head><p>In this section, we demonstrate the feasibility of the RouteDetector framework through the field experiments. Using sensor data collected from smartphone or tablet, we try to identify a route used for a trip. For brevity, we present three typical cases below. <ref type="figure" target="#fig_5">Figure 7</ref> presents a map of lines used for the case study.</p><p>Case 1 In this case, the train trip involved two lines, Yamanote line and Marunouchi line as shown in <ref type="figure" target="#fig_5">Fig. 7</ref>. <ref type="figure" target="#fig_1">Figure 3</ref> presents the measured/derived data for the case 1. <ref type="figure" target="#fig_1">From Fig. 3 (e)</ref>, we detected departure/arrival time 1 Because enumerating all the possible paths on a train graph could cause an explosion of states, we limit our search to the paths with lengths less than 15 stations.   <ref type="table" target="#tab_9">Table 8</ref>. As we see, all the detected departure/arrival times were correctly detected. Next, given this time sequence, we search the corresponding routes. The result is shown in <ref type="table" target="#tab_10">Table 9</ref>, which shows two routes are identified. Of the identified two routes, the route #1 had higher score and was identical to the ground truth. Thus, the RouteDetector successfully detected a route used for a train trip from sensor data.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Case 2</head><p>The case 2 was measured at Yamanote line. There was no transferring lines. The origin/destination stations were Tabata station and Kanda station, respectively. The trip involved 8 stations. <ref type="figure" target="#fig_6">Figure 8</ref> presents the detected activities and departure/arrival time sequence. In this case, the detected departure/arrival times were correctly detected. Given the time sequence, a unique route was identified. The identified route was identical to the ground truth.  Case 3 The case 3 was measured at Fukutoshin Line. Again, there was no transferring lines. The origin/destination stations were Nishi Waseda station and Shibuya station, respectively. In this case, while the detected departure/arrival times were identical to the observed times, they were slightly different from the scheduled time; i.e., the train was delayed at the time of measurement. We will discuss the issue of train operation in the next section. Given the detected time sequence, no train route was identified from the train graph.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="6">Discussion</head><p>In this section, we discuss several limitations of the RouteDetector framework. We also discuss countermeasures against the new threat brought by the RouteDetector framework.  </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="6.1">Limitations</head><p>Cross-Device Differences Our thread model assumes that an adversary knows the type of hardware to be attacked; i.e., he/she needs to have training data for detecting user activities for each device. In fact, we found that a random forest classifier trained to work with smartphone data did not work well for detecting the activities of tablet users. This observation suggests that a difference in hardware sensors is sensitive to the user activity detection scheme. One approach to this problem is to prepare training models for various devices. Another possible approach is to apply some data-processing techniques that can absorb the differences in the measurements of sensor values. We leave the issue for our future work.</p><p>Types of Vehicles While the target of this work was passenger trains, there are other types of transportation services, such as monorails or airplanes. If we can assume that vehicles are operated accurately according to timetable schedules, we may have a good chance to detect a route used for a trip. We conjecture that the RouteDetector will not work well for automobile transport services such as public bus transportation because of large deviations in operation timeline.</p><p>Train Operation Clearly, the success of the RouteDetector framework relies on the accuracy of the train operation. The detection accuracy may be limited in an environment where many trains tend to be delayed. For such a case, we need to study up to what amount of delay the attack works. To this end, we could artificially add a random delay and see how the framework reacts. We leave the analysis for our future work. We note that even in case of delay, some transportation systems provide information in real-time. Such information could be used to make the system more tolerant to delay. We also note that by continuously targeting a victim, an adversary can obtain multiple observations, which likely include the correct estimations; e.g., commuting routes. Thus, by collecting many candidate routes used by a target, an adversary can figure out locations frequently visited by the target in a statistical way.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="6.2">Countermeasures</head><p>Let us discuss some ways to mitigate or eliminate the risk caused by the attacks using the RouteDetector framework. <ref type="bibr">Michalevsky et al., presented Gyrophone [6]</ref>, which is an attack that recognizes speech by reading gyroscope. They mentioned countermeasures in their paper that apply low-pass filtering to the raw samples provided by sensors. If certain pass frequencies are enough for most of the applications, the filtering can be done without negative effects. In addition, they mentioned that it should be controlled by permission mechanisms or certain explicit authorization by the user when certain applications require an unusually high sampling rate. In the same way, restricting access to raw sensor data and building some filtration mechanism that can remove sensitive information without sacrificing other functions would be promising approaches as countermeasures against the attack with RouteDetector. For instance, to build a pedometer app, a developer can use a specific API that can retrieve step counts, instead of reading row sensor values of accelerometer. Thus, building wrapper APIs that provide many useful functions, while hiding raw data, is a promising approach to thwart sensor-based side-channel attacks.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="7">Related work</head><p>Techniques of sensor data analysis on mobile devices are mainly used for extending the range of application of mobile services, e.g., activity recognition and locationbased services. On the contrary, attackers can expose user's privacy by using above similar techniques analyzing sensor data. We introduce techniques for both benign and malicious uses.</p><p>Positioning without GPS An indoor positioning system (IPS) is presented as a solution to detect/navigate objects or people inside a building <ref type="bibr" target="#b9">[10]</ref>. Instead of using GPS, IPS techniques make use of other information sources such as radio wave, acoustic signals, and optical signals. As an example of malicious use of the positioning technique, Michalevsky et al. demonstrated that their developed PowerSpy application enables the attacker to infer the target device's location over those routes or areas by simply analyzing the target device's power consumption <ref type="bibr" target="#b7">[8]</ref>.</p><p>Device fingerprinting A device fingerprinting is other positive usage of sensors to identify and authenticate physical devices. Many studies reported that various IDs on a smartphone, e.g., IMEI (device ID), are easily stolen by malicious apps. To thwart ID-theft, Dey presented AccelPrint, which is a system that fingerprints based on the accelerometer, in order to identify devices without any specific ID or cookie <ref type="bibr" target="#b4">[5]</ref>. Das et al. also discussed the feasibility of using sensors embedded in smartphones, i.e., microphones and speakers, to uniquely identify individual devices <ref type="bibr" target="#b6">[7]</ref>.</p><p>Activity Recognition The CenceMe system developed by <ref type="bibr">Miluzzo et al. [11]</ref> combines the inference of individuals' activity using sensors' information with sharing of it through social networking services. To classify activities (sitting, standing, walking, running) of individuals, the preprocessor of CenceMe calculates the mean, standard deviation, and number of peaks of the accelerometer readings along the three axes of the accelerometer. RouteDetector's activity detection scheme is similar to this one, but it is extended to capture the motion of vehicles. RouteDetector also uses other hardware sensors, such as a magnetometer and gyroscope, which also play a key role in improving detection accuracy.</p><p>The accelerometer sensor provides an attacker with other opportunities to build new attacks. Many attacks targeting motion sensors, i.e., accelerometers and gyroscopes, that are embedded in smartphones are inferring user inputs, e.g., passwords on touch-screens by monitoring readings collected from motion sensors <ref type="bibr" target="#b0">[1,</ref><ref type="bibr" target="#b1">2,</ref><ref type="bibr" target="#b2">3,</ref><ref type="bibr" target="#b3">4]</ref>.</p><p>Sensor Access Control Although various kinds of sensor information contribute to extend and improve mobile computing and services, privacy issues have already been exposed as mentioned above. One of the most practical defenses is access control to sensor data. Unnecessary access by apps to sensor data should be controlled by OS or middleware on a device. FlaskDroid <ref type="bibr" target="#b11">[12]</ref> and ipShield <ref type="bibr" target="#b12">[13]</ref> are implemented as middleware on Android OS and provide fine-grain access control mechanism to resources including sensor information.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="8">Conclusion</head><p>A novel, proof-of-concept side-channel attack framework called RouteDetector was introduced. The key idea behind the framework is to leverage spatio-temporal regularity of human mobility; i.e., we targeted passengers of train systems. Our field experiments demonstrated that the RouteDetector framework detected departure/arrival times of vehicles with errors less than 6 seconds on average. Our extensive simulation experiments using timetables and route maps for 9,090 railway stations of 172 railway companies demonstrated that the RouteDetector successfully identified routes used for a trip by train, and the average number of identified routes became close to one if the number of stations used on a trip was more than six. These results quantitatively support that the attack is feasible.</p></div><figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_0"><head>Figure 2 :</head><label>2</label><figDesc>Figure 2: Overview of data pre-processing.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_1"><head>Figure 3 :</head><label>3</label><figDesc>Figure 3: (a): pre-processed sensor data, (b) magnification of (a) in Y-axis, (c) predicted user activities, (d) smoothened user activities, and (e) corrected user activities and departure/arrival times. In panels (a) and (b), A, L, M, and G represents accelerometer, linear acceleration, magnetometer, and gyroscope, respectively. In panel (e), circles/squares are detected departure/arrival times, respectively.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_2"><head>Figure 3 (Figure 4 :</head><label>34</label><figDesc>Figure 3 (d) shows smoothened user activities with the EWMA.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_3"><head>Figure 5 :</head><label>5</label><figDesc>Figure 5: Distributions of difference between observed and scheduled times. Departure times (top) and arrival times (bottom).</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_4"><head>Figure 6 :</head><label>6</label><figDesc>Figure 6: Number of links vs. number of candidate routes.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_5"><head>Figure 7 :</head><label>7</label><figDesc>Figure 7: Map of lines used for case study analysis.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_6"><head>Figure 8 :</head><label>8</label><figDesc>Figure 8: Detected activities of the case 2.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_7"><head>Figure 9 :</head><label>9</label><figDesc>Figure 9: Detected activities of the case 3.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_1" validated="true"><head>Table 1 : Summary of sensors.</head><label>1</label><figDesc></figDesc><table>Sensor 
Type 
unit 
Permission 
Description 

accelerometer 
physical 
m/s 2 
Not required 
Acceleration applied to a device including the gravity. 
linear acceleration 
virtual 
m/s 2 
Not required 
Acceleration applied to a device excluding the gravity. 
magnetometer 
physical 
µT 
Not required 
Strength of geomagnetic field. 
gyroscope 
physical rad/s 
Not required 
A device's rate of rotation. 

</table></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_2" validated="false"><head>Table 2 : Smart devices used for our analysis.</head><label>2</label><figDesc></figDesc><table>Device name (abbreviation) Type 
OS 
HTC J Butterfly (HTC) 
Smartphone 
Android 4.1.1 
Nexus 7 (Nexus) 
Smart Tablet Android 4.4.4 

</table></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_3" validated="false"><head>Table 3 summarizes</head><label>3</label><figDesc>the sensor data we collected. These data were measured across seven lines, operated by two railway companies. Four lines, Yamanote Line, Chuo Line, Keihin-Tohoku Line, and Saikyo Line, are operated by East Japan railway company. Three subway lines, Fukutoshin Line, Marunouchi Line, and Nanboku</figDesc><table></table></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_4" validated="true"><head>Table 3 : Sensor data collected for our analysis.</head><label>3</label><figDesc></figDesc><table>Data name 
Device Type # stations 
# lines 
# blocks 
HTC H 
HTC 
H 
57 
5 
12,007 
HTC B 
HTC 
B 
29 
1 
2,561 
Nexus H 
Nexus 
H 
29 
1 
2,543 
Nexus B 
Nexus 
B 
54 
5 
8,576 

</table></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_5" validated="false"><head>Table 4 :</head><label>4</label><figDesc></figDesc><table>Statistics of the train map built from railway 
route maps and timetables. Number of links is taken 
from timetables for weekdays. 

# railway companies 
# lines 
# stations 
# links 
172 
597 
9,090 
2,277,397 

</table></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_6" validated="false"><head>Table 5 : Numbers of labeled blocks used for evaluating performance of activity detection. All the labeled blocks are collected at the stations of Yamanote Line.</head><label>5</label><figDesc></figDesc><table>Data 
vehicle 
walk others 
HTC H 
609 1,327 
510 
HTC B 
691 1,360 
510 
Nexus H 
686 1,352 
505 
Nexus B 
602 1,304 
505 

</table></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_7" validated="false"><head>Table 6 : Performance of detecting vehicle activity.</head><label>6</label><figDesc></figDesc><table>ACC, 
</table></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_9" validated="false"><head>Table 8 :</head><label>8</label><figDesc></figDesc><table>Detected/observed/scheduled times for case 1. 
Detected and observed times are rounded. 

activities 
detected observed scheduled 
walking etc. 
-
departure 
10:56 
10:56 
10:56 
arrival 
10:58 
10:58 
10:58 
departure 
10:58 
10:58 
10:58 
arrival 
11:00 
11:00 
11:00 
departure 
11:00 
11:00 
11:00 
arrival 
11:03 
11:03 
11:03 
walking etc. 
-
departure 
11:10 
11:10 
11:10 
arrival 
11:12 
11:12 
11:12 
departure 
11:12 
11:12 
11:12 
arrival 
11:14 
11:14 
11:14 
walking etc. 
-

sequence. The results are summarized in </table></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_10" validated="true"><head>Table 9 : Two identified routes for case 1.</head><label>9</label><figDesc></figDesc><table>No. 
ground truth 
route #1 
route #2 
1 
Kokkai-gijido-mae 
Kokkai-gijido 
Edogawabashi 
2 
Kasumigaseki 
Kasumigaseki Gokokuji 
3 
Ginza 
Ginza 
Higashi Ikebukuro 
4 
Tokyo 
Tokyo 
Ikebukuro 
transfer 
4 
Tokyo 
Tokyo 
Ikebukuro 
5 
Kanda 
Kanda 
Kanamecho 
6 
Akihabara 
Akihabara 
Sengawa 
score -
2,664 
2,277 

񮽙 

O n 

񮽙 

W n 

00:10 
00:15 
00:20 

񮽙 

V n 

d 
a 

</table></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_11" validated="true"><head>Table 10 : Detected/observed/scheduled times for case 3.</head><label>10</label><figDesc></figDesc><table>activities 
detected observed scheduled 
walking etc. 
-
departure 
21:27 
21:27 
21:26 
arrival 
21:29 
21:29 
21:28 
departure 
21:30 
21:30 
21:28 
arrival 
21:32 
21:32 
21:32 
departure 
21:33 
21:33 
21:32 
arrival 
21:35 
21:35 
21:35 
departure 
21:35 
21:35 
21:35 
arrival 
21:37 
21:37 
21:37 
departure 
21:37 
21:37 
21:37 
arrival 
21:39 
21:39 
21:39 
walking etc. 
-

</table></figure>
		</body>
		<back>

			<div type="acknowledgement">
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Acknowledgements</head><p>A part of this work was supported by JSPS Grant-inAid for Challenging Exploratory Research (KAKENHI), Grant number 15K12038.</p></div>
			</div>

			<div type="references">

				<listBibl>

<biblStruct xml:id="b0">
	<analytic>
		<title level="a" type="main">TouchLogger: Inferring Keystrokes On Touch Screen From Smartphone Motion</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">L</forename><surname>Cai</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">H</forename><surname>Chen</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">The 6th USENIX Workshop on Hot Topics in Security (HotSec)</title>
		<imprint>
			<date type="published" when="2011" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b1">
	<analytic>
		<title level="a" type="main">ACCessory: Password Inference using Accelerometers on Smartphones</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">E</forename><surname>Owusu</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Han</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Das</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Perrig</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Zhang</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">The Twelfth Workshop on Mobile Computing Systems and Applications (HotMobile)</title>
		<imprint>
			<date type="published" when="2012" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b2">
	<analytic>
		<title level="a" type="main">TapLogger: Inferring User Inputs on Smartphone Touchscreens Using On-board Motion Sensors</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Z</forename><surname>Xu</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">K</forename><surname>Bai</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Zhu</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">The fifth ACM conference on Security and Privacy in Wireless and Mobile Networks</title>
		<imprint>
			<date type="published" when="2012" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b3">
	<analytic>
		<title level="a" type="main">TapPrints: Your Finger Taps Have Fingerprints</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">E</forename><surname>Miluzzo</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Varshavsky</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Balakrishnan</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><forename type="middle">R</forename><surname>Choudhury</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">The 10th International Conference on Mobile Systems, Applications, and Services (MobiSys)</title>
		<imprint>
			<date type="published" when="2012" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b4">
	<analytic>
		<title level="a" type="main">AccelPrint: Imperfections of Accelerometers Make Smartphones Trackable</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Dey</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">N</forename><surname>Roy</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">W</forename><surname>Xu</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><forename type="middle">R</forename><surname>Choudhury</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Nelakuditi</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">The 2014 Network and Distributed System Security (NDSS) Symposium</title>
		<imprint>
			<date type="published" when="2014" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b5">
	<analytic>
		<title level="a" type="main">Gyrophone: Recognizing Speech from Gyroscope Signals</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Y</forename><surname>Michalevsky</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Boneh</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">G</forename><surname>Nakibly</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">The 23rd USENIX Security Symposium</title>
		<imprint>
			<date type="published" when="2014" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b6">
	<analytic>
		<title level="a" type="main">Do You Hear What I Hear?: Fingerprinting Smart Devices Through Embedded Acoustic Components</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Das</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">N</forename><surname>Borisov</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Caesar</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">The 2014 ACM SIGSAC Conference on Computer and Communications Security (CCS)</title>
		<imprint>
			<date type="published" when="2014" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b7">
	<analytic>
		<title level="a" type="main">Powerspy: Location tracking using mobile device power analysis</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Y</forename><surname>Michalevsky</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">G</forename><surname>Nakibly</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Schulman</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Boneh</surname></persName>
		</author>
		<idno>abs/1502.03182</idno>
	</analytic>
	<monogr>
		<title level="j">CoRR</title>
		<imprint>
			<date type="published" when="2015" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b8">
	<analytic>
		<title level="a" type="main">Understanding individual human mobility patterns</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><forename type="middle">C</forename><surname>Gonzalez</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><forename type="middle">A</forename><surname>Hidalgo</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A.-L</forename><surname>Barabasi</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Nature</title>
		<imprint>
			<biblScope unit="volume">453</biblScope>
			<biblScope unit="page" from="779" to="782" />
			<date type="published" when="2008-06" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b9">
	<analytic>
		<title level="a" type="main">A Survey of Indoor Positioning Systems for Wireless Personal Networks</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Y</forename><surname>Gu</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Lo</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">I</forename><surname>Niemegeers</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">IEEE Communications Surveys &amp; Tutorials</title>
		<imprint>
			<date type="published" when="2009" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b10">
	<analytic>
		<title level="a" type="main">Sensing Meets Mobile Social Networks: The Design, Implementation and Evaluation of the CenceMe Application</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">E</forename><surname>Miluzzo</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">N</forename><forename type="middle">D</forename><surname>Lane</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">K</forename><surname>Fodor</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Peterson</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">H</forename><surname>Lu</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Musolesi</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><forename type="middle">B</forename><surname>Eisenman</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">X</forename><surname>Zheng</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><forename type="middle">T</forename><surname>Campbell</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">The 6th ACM conference on Embedded network sensor systems (SenSys)</title>
		<imprint>
			<date type="published" when="2008" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b11">
	<analytic>
		<title level="a" type="main">Flexible and Fine-Grained Mandatory Access Control on Android for Diverse Security and Privacy Policies</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Bugiel</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Heuser</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A.-R</forename><surname>Sadeghi</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">The 22nd USENIX Security Symposium</title>
		<imprint>
			<date type="published" when="2013" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b12">
	<analytic>
		<title level="a" type="main">ipShield: A Framework For Enforcing ContextAware Privacy</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Chakraborty</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><surname>Shen</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">K</forename><forename type="middle">R</forename><surname>Raghavan</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Y</forename><surname>Shoukry</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Millar</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Srivastava</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">The 11th USENIX Symposium on Networked Systems Design and Implementation (NSDI)</title>
		<imprint>
			<date type="published" when="2014" />
		</imprint>
	</monogr>
</biblStruct>

				</listBibl>
			</div>
		</back>
	</text>
</TEI>
