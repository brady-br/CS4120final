<?xml version="1.0" encoding="UTF-8"?>
<TEI xmlns="http://www.tei-c.org/ns/1.0" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
xsi:schemaLocation="http://www.tei-c.org/ns/1.0 /Users/atharsefid/Desktop/grobid-0.5.3/grobid-home/schemas/xsd/Grobid.xsd"
 xmlns:xlink="http://www.w3.org/1999/xlink">
	<teiHeader xml:lang="en">
		<encodingDesc>
			<appInfo>
				<application version="0.5.3" ident="GROBID" when="2020-09-29T03:04+0000">
					<ref target="https://github.com/kermitt2/grobid">GROBID - A machine learning software for extracting information from scholarly documents</ref>
				</application>
			</appInfo>
		</encodingDesc>
		<fileDesc>
			<titleStmt>
				<title level="a" type="main">Operating System Support for NVM+DRAM Hybrid Main Memory</title>
			</titleStmt>
			<publicationStmt>
				<publisher/>
				<availability status="unknown"><licence/></availability>
			</publicationStmt>
			<sourceDesc>
				<biblStruct>
					<analytic>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Jeffrey</forename><forename type="middle">C</forename><surname>Mogul</surname></persName>
							<email>jeff.mogul@hp.com</email>
							<affiliation key="aff1">
								<address>
									<postCode>94304</postCode>
									<settlement>Palo Alto</settlement>
									<region>CA</region>
									<country key="ES">Spain</country>
								</address>
							</affiliation>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Eduardo</forename><surname>Argollo</surname></persName>
							<email>eduardo.argollo@hp.com</email>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Mehul</forename><surname>Shah</surname></persName>
							<email>mehul.shah@hp.com</email>
							<affiliation key="aff1">
								<address>
									<postCode>94304</postCode>
									<settlement>Palo Alto</settlement>
									<region>CA</region>
									<country key="ES">Spain</country>
								</address>
							</affiliation>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Paolo</forename><surname>Faraboschi</surname></persName>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Paolo</forename><surname>Faraboschi@hp</surname></persName>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Com</surname></persName>
						</author>
						<author>
							<affiliation key="aff0">
								<orgName type="institution">HP Labs</orgName>
							</affiliation>
						</author>
						<title level="a" type="main">Operating System Support for NVM+DRAM Hybrid Main Memory</title>
					</analytic>
					<monogr>
						<imprint>
							<date/>
						</imprint>
					</monogr>
				</biblStruct>
			</sourceDesc>
		</fileDesc>
		<profileDesc>
			<abstract>
				<p>Technology trends may soon favor building main memory as a hybrid between DRAM and non-volatile memory, such as flash or PC-RAM. We describe how the operating system might manage such hybrid memories, using semantic information not available in other layers. We describe preliminary experiments suggesting that this approach is viable.</p>
			</abstract>
		</profileDesc>
	</teiHeader>
	<text xml:lang="en">
		<body>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="1">Introduction</head><p>For several decades, general-purpose CPUs have used DRAM for main memory. DRAM has many good features, and has benefited from Moore's Law, but DRAM is not perfect: it is relatively expensive in power and cost, as a fraction of an entire computer, and it is hard to put enough of it near a CPU. These problems are especially pressing in "scale-out" server farms, where we want both increased server density and reduced heat density.</p><p>On the other hand, flash memory can be denser, cheaper, and more power-efficient than DRAM, but it has problems with access timing, access unit sizes, and endurance. Because of these problems, and because it is reasonably non-volatile, flash is typically used in the storage hierarchy, rather than as main memory.</p><p>The semiconductor industry has been speculating for several years about the prospects for a "universal memory" (UM) technology that would replace both DRAM and flash, providing the best characteristics of both (and working around some scaling issues that might soon limit further improvements in both DRAM and flash) <ref type="bibr" target="#b0">[1]</ref>. Unfortunately, while there are many potential UM technologies, all have their problems, and mass adoption (hence reasonable prices) is still several years away <ref type="bibr" target="#b10">[11]</ref>.</p><p>In this paper, we argue that if it becomes practical and desirable to replace main-memory DRAM with UM, the characteristics of UM technologies (limited endurance; slow writes) will require explicit support from the operating system, and we describe aspects of that support.</p><p>To make things concrete, we describe a near-term design for main memory based on a hybrid of flash and DRAM, or FLAM. Quite possibly FLAM could improve main memory density, power, and cost. It might seem odd to propose using flash for main memory, since it has very high write latencies, and wears out after relatively few writes. Our goal, therefore, is to present a feasible design for hardware and operating system changes that compensate for these weaknesses of flash, and also to illustrate how the OS might support other varieties of UM.</p><p>Many computer systems now use flash memory for all or part of their storage hierarchy. Our design is different; flash is parallel, not subordinate, to DRAM.</p><p>We argue for approaches that exploit per-page knowledge, relatively simple for an OS to obtain, to inform the movement of pages between read-write DRAM and (effectively) read-only flash. Note that the flash pages are truly in the CPU's memory address space -memory-read instructions are satisfied directly from flash -but protected read-only, to allow the OS to intervene on memory writes.</p><p>The key to this approach is the use of flash only for pages with a relatively high time-to-next-write (TTNW), since the penalties (latency; wear-out) for flash writes are so high. Of course, the OS can only know a page's estimated time-to-next-write (ETTNW), and we identify OSlevel information that can help make these estimates. We also present experimental data suggesting that there are enough high-TTNW pages to justify using FLAM.</p><p>The main point of this paper is not that flash is ideal for this application -it is not -but that hybrid main memories built from DRAM and Non-Volatile Memory (NVM) are a plausible solution to some pressing problems, that software will have to manage the way these memories are used, and that the operating system is the best software layer to do that. The focus of our work is to show how having the OS carefully manage what goes into NVM, and when, can hide the non-ideal characteristics of NVM while allowing us to exploit its useful attributes. This approach should apply, with some variations, to both flash and other kinds of NVM, and we specifically discuss Phase-Change RAM (PC-RAM).</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="1.1">Motivation</head><p>Data center compute farms (this paper focusses on server applications) are increasingly limited by physical density and power constraints, and are being built from large numbers of relatively cheap servers. These trends put pressure on the amount of main memory per physical server, since they limit the number of DRAM "DIMMs" that can be placed in proximity to a CPU socket.</p><p>High-density DIMMs impose an exponential cost penalty; for example, Oct. 2008 street prices for 8GB of DRAM are $212/GB using 1 8GB DIMM, $50/GB using 2 4GB DIMMS, or $15/GB using 4 2GB DIMMs. However, adding DIMM slots consumes space on increasingly small "blade" server boards, and can complicate electrical signal integrity. DRAM also consumes nonnegligible power -per one study, 19% to 31% of peak power for recent server designs [12, <ref type="bibr">Table 3-3]</ref>.</p><p>We would therefore like to find a way to create at least the illusion of larger main memories without the cost, power, and density drawbacks of DRAM.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="1.2">Memory technologies</head><p>The insight (not ours; see <ref type="bibr" target="#b14">[15]</ref>) that inspired this paper is that flash has many of the characteristics that we want for main memory: per bit, it costs less, consumes less power, and consumes less space than DRAM.</p><p>However, flash has several problems that complicate its use as a direct replacement for DRAM:</p><p>• Erasing: Flash must be erased before it can be written.</p><p>Erasing tends to be slow, and one must erase a large block, rather than an individual word.</p><p>• Endurance: flash typical wears out after a relatively small number of erase+write cycles. For storage, write bandwidths are slow enough to avoid this problem, but not for main memory: at 5 GB/s, one can wear out 256GB of NOR in less than 60 days.</p><p>• Slow writes: Flash writes take much longer than DRAM writes, so flash writes are not compatible with typical memory controllers.</p><p>• Read timing: NAND flash requires reading an entire page, which makes it difficult to use for main memory. NOR flash, however, can be read more or less like DRAM (albeit at lower bandwidths). <ref type="table" target="#tab_0">Table 1</ref> shows values for various characteristics of several memory technologies, which we will assume for the purposes of this paper. It is difficult to get accurate values to make direct comparisons; for example, NOR flash is usually fabricated with an older technology generation than DRAM or NAND flash. We express density in terms of the feature size F (actually, in terms of the area F 2 ) rather than in absolute values; this allows density comparisons if one assumes a fixed feature size.</p><p>Similarly, we do not directly estimate cost/bit; generally, cost is directly proportional to density assuming both equal fabrication complexity and similar production volumes. These assumptions might be optimistic. <ref type="table" target="#tab_0">Table 1</ref> shows that NAND flash is superior to NOR flash in both cost and density, but because NAND flash cannot satisfy cache-line reads at speeds anywhere near DRAM, it is a poor basis for a hybrid design. <ref type="table" target="#tab_0">Table 1</ref> shows values for single-level cell (SLC) flash. Multi-level cell (MLC) flash can store 2 bits per cell, doubling its density but at the cost of a higher bit-error rate and lower endurance. MLC NAND flash is widely available, and Spansion has developed a cost-effective MLC NOR design <ref type="bibr" target="#b9">[10,</ref><ref type="bibr" target="#b14">15]</ref>. However, it is not clear that flash can be scaled much further into the future <ref type="bibr" target="#b8">[9]</ref>.</p><p>Proposed future memory technologies include Ferroelectric RAM, Magnetic RAM, Spin-Torque Transfer RAM, Resistive RAM, but these are still too exotic or are clearly bad candidates for main memory. (Burr et al. <ref type="bibr" target="#b4">[5]</ref> give a nice, up-to-date summary of non-volatile memory technologies, but they focus on storage-hierarchy applications.) However, the table includes data on PhaseChange RAM (PC-RAM) , which is at least a plausible candidate. PC-RAM uses heat to change a chalcogenide glass between crystalline and amorphous states. PC-RAM has much better endurance than flash, but apparently it is still finite.</p><p>Therefore, in this paper we explore two options for software-managed hybrid main memories: NOR flash and PC-RAM.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="1.3">Other alternatives for using NVM</head><p>We note that there are many other ways to use NVM in computer systems. There are obviously many uses of NVM in the storage system <ref type="bibr" target="#b4">[5]</ref>. One might also consider designing hybrid main-memory hardware that is fully transparent to software (perhaps this is Spansion's approach <ref type="bibr" target="#b14">[15]</ref>), which avoids the need for SW changes. However, the OS can make better decisions, using its semantic information about memory pages.</p><p>One could use NAND flash on the PCI bus as a very fast backing store for demand-paged DRAM, but PCI cannot not achieve the high memory bandwidth that a NOR+DRAM hybrid can support.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2">Design issues: NOR-flash hybrids</head><p>Here we sketch both hardware and software designs for SW-managed hybrids using NOR flash. (Sec. 3 will discuss how the designs might vary if using PC-RAM.)</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.1">Hardware design</head><p>We start by assuming that new hardware designs ought to be pin-compatible with standard DRAM DIMMs and memory controllers. While it is intriguing to consider how one might change these standard interfaces to better exploit novel main-memory technologies, incremental deployment is easier if one sticks to standards.</p><p>We propose a FLAM DIMM that contains as many NOR flash chips as possible, a modest amount of DRAM for buffering writes, and a simple controller ASIC.</p><p>The address space of the DIMM would be divided into several regions:</p><p>• Flash: directly mapped for cache-line-wide reads. The CPU would not be able to write directly to this region.</p><p>• DRAM copy buffer (CB): mapped for both reads and writes by the CPU.</p><p>• Control registers: accessed via the standard System Management Bus (SMBus), mapped into I/O space. Basic migration mechanism: Since flash cannot be written directly by CPU store operations, we instead stage page-sized writes in the CB. That is, when the OS decides to move a page P d from main-memory DRAM to FLAM, it allocates a pre-erased flash page P f (see sec. 2.2 for more details), copies P d into a free page in the CB P b , and then signals the FLAM controller to copy from P b to P f . This copy can proceed at flash-write speeds (i.e., slowly) without stalling the CPU. (In order to sustain the necessary write bandwidth, the NOR flash will have to be banked 8-16 ways.) When that copy is done, the controller signals the OS, which can then remap the corresponding virtual page P v from P d to P f , and invalidate the TLB entry.</p><p>A small portion of the CB would be set aside to hold the specifics of commands from the OS to the controller: for a copy commands, the (P b , P f ) pair; for an erase command, the offset and size of the sector(s) to erase.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.2">Basic software design</head><p>Given our proposed hardware design, the basic software mechanism is simple and is useful for UM technologies with limited or slow writes. We defer several more interesting problems to sec. 2.3 (deciding what pages to put into flash), sec. 2.4 (garbage-collecting the flash), and sec. 2.5 (wear-leveling).</p><p>Initially upon booting, the OS allocates all memory pages from DRAM. Based on heuristics described in sec. 2.3, it starts migrating pages from DRAM to FLAM.</p><p>The basic migration mechanism described in sec. 2.1 needs some elaboration. For example, the OS must set the page-table entries for P d (during migration) and P f (after migration) to be either read-only or read+execute, since any writes during migration could lead to inconsistencies, and any writes after migration won't work. If SW generates a store to one of these pages, it will fault. Before the write can proceed after the fault, the OS must either abort the migration (if it is still in progress), or copy the page back from FLAM to DRAM. In effect, a migrated page is handled similar to a copy-on-write page (and a shared migrated page might end up in both FLAM and DRAM after a true COW fault).</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.3">Deciding which pages to put in FLAM</head><p>Some relatively small fraction of memory is kernelprivate address space that cannot easily be migrated. However, pages used for user address space and file system buffering, which consume most of the DRAM, should be candidates for migration.</p><p>Within the set of candidate pages, the OS must choose those that have the best "return on investment" for migration to FLAM. This policy can vary depending on HW technology. We propose several heuristics, including some tests that use static information:</p><p>• Page types: Operating systems tend to associate pages with type information. Code pages, for example, are good candidates for migration to FLAM; stack pages are bad candidates. Our guess is that non-file pages shared between two processes might be bad candidates.</p><p>• File types: File types can be good indicators of ET-TNW. Vogels reported <ref type="bibr" target="#b15">[16]</ref> that the local-disk file size distribution "is dominated by executables, <ref type="bibr">[DLLs]</ref>, and fonts" -all read-only -and on network shares "the set of large files is augmented with development databases, archives and installation packages" -probably also read-only.</p><p>• File reference modes: Vogels pointed out <ref type="bibr" target="#b15">[16]</ref> that Windows offers a temporary file attribute to optimize its buffer cache behavior, that up to 80% of files in a Windows file trace were deleted within 4 secs. of creation, and that "at least 25%-35%" of these deleted new files could benefit from that attribute. Clearly, pages from files marked temporary should not be migrated to FLAM; unfortunately, most applications do not mark their temporary files.</p><p>• Application-supplied page attributes: We speculate that certain large, memory-hungry applications that understand their workload, such as databases, could provide coarse ETTNW values for certain pages, such as index files. and some dynamic tests:</p><p>• File names: The OS could record the historical TTNW distribution (or its smoothed mean) of otherwise hardto-classify files; limiting this DB to relatively large, frequently accessed files would maximize the benefits. Pages from a file with a large observed TTNW could be migrated to FLAM.</p><p>• Page history: In theory, the OS could track the TTNW for each page, and migrate pages with high observed TTNW. In practice, the DRAM space overhead for this tracking could be excessive (and the whole point of FLAM is to save DRAM). Throughout this paper, we have argued for using NVM as main memory while ignoring its non-volatility benefits. Of course, several OS and application functions could benefit from non-volatile main memory, and the OS could use this information to drive FLAM migration. We should note, however, that some superficially suitable applications (e.g., RIO <ref type="bibr" target="#b5">[6]</ref>) may not have sufficient low page-write rates to work with FLAM.</p><p>Migration decisions would, of course, also depend on other factors, such as how much free FLAM space is available, and tradeoffs between the extra CPU load for migration versus the inefficiency of running out of DRAM. This is likely to involve more heuristics than theory, just as with page-frame reclamation algorithms <ref type="bibr" target="#b2">[3]</ref>.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.4">Garbage collection</head><p>Since flash erase blocks are larger than pages, the OS will have to garbage collect as FLAM pages migrate back to DRAM, so that it can erase blocks in order to maintain a large-enough pool of free FLAM pages. We assume typical "copying garbage collector" mechanisms will apply, such as allocating pages with similar expecting lifetimes to the same erase block. For example, pages from the same mapped file probably have similar lifetimes.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.5">Wear leveling</head><p>Because flash has limited endurance, the OS needs to implement wear-leveling for the FLAM. Generally, this requires tracking the allocation status (allocated, free, erased) and erase-count for each FLAM block. The OS can then migrate pages to the erased block with the lowest erase-count. Since this metadata must persist across crashes and reboots, it should itself be stored in the FLAM, for non-volatility.</p><p>Flash endurance appears to be stated in terms of the number of erase cycles guaranteed by the vendor. We suspect that many flash blocks have longer endurance (and some will have shorter endurance) than this value; however, we have not been able to learn what endurance distributions look like.</p><p>As we understand it, flash writes basically work by damaging the dielectric, and wear-out occurs when this damage is permanent. Therefore, we believe that if the OS reads a FLAM page immediately after migration and compares it successfully to the source page, the OS can assume that the page has not yet worn out. If the comparison fails, the OS can abort the migration, and set the page's erase-count to infinity. This approach might squeeze out more lifetime from flash.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3">Designs for hybrids using PC-RAM</head><p>PC-RAM differs from flash in several important characteristics, both in terms of scaling (i.e., higher densities and potentially lower costs/bit) and endurance. We have seen a variety of estimated endurances for PC-RAM, possibly because there is some uncertainty as to which chalcogenic material yields the best tradeoffs <ref type="bibr" target="#b13">[14]</ref>, and also because the endurance for a large array is expected to be lower than for a single bit <ref type="bibr" target="#b3">[4]</ref>. It seems reasonable to assume an endurance of 10 8 , which is 2 or 3 orders of magnitude better than flash, but still finite.</p><p>PC-RAM also eliminates the erase phase associated with flash, greatly simplifying the overall system design.</p><p>While PC-RAM parts are almost ready to appear (e.g., from Samsung in 2009), we have not been able to find data sheets that specify read and write timings. It appears that PC-RAM writes cannot be faster than about 100ns <ref type="bibr" target="#b13">[14]</ref>, which implies that it might still be necessary to buffer writes in DRAM (as in sec. 2.1). We expect reads to happen at DRAM-like speeds, however.</p><p>Therefore, a hybrid using PC-RAM instead of NOR should allow us to simplify the design in several ways: no garbage collection: since there is no need to preerase large blocks, and possibly simpler wear-leveling: since PC-RAM endurance should allow fairly frequent writes (a mean write-spacing of 1.6 seconds for a 5-year lifetime, assuming 10 8 cycles allowed). However, PC-RAM might add some complexity; for example, wearout might not be immediately detectable using read-afterwrite, if (for example) "resistance drift" is to blame <ref type="bibr" target="#b3">[4]</ref>.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4">Preliminary experiments</head><p>The experiments we report here are quite preliminary. Our goal was to understand whether enough memory pages are accessed read-only for long enough intervals to justify migrating them into FLAM. (Prior work by Clark et al. exploited this same phenomenon for VM migration <ref type="bibr" target="#b6">[7]</ref>.)</p><p>We define "long enough" as a mean allowable Time Between Writes to a Page (TBWP), based on the endurance of the NVM technology and a desirable lifetime for the hardware. We chose a 5-year lifetime (which is probably slightly longer than typical server replacement life cycles). 5 years is 1.58e8 seconds, and so for endurances of 10 6 (flash) and 10 8 (PC-RAM), our target TBWPs are 158 sec. and 1.58 sec., respectively.</p><p>We considered three experimental approaches: hardware tracing via simulation, page-level tracing via kernel modification, and simulation of a FLAM system. We have only tried the first approach, so far.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.1">Simulator-based tracing</head><p>We can get precise traces of when pages are written using an architectural simulator. We used COTSon, a relatively fast simulator <ref type="bibr" target="#b1">[2]</ref>. However, even with COTSon, tracing at this level is slow. which limits the amount of simulated execution we can achieve. For example, one of our runs, covering 213 traced seconds, took 10 days.</p><p>We ran simulations of a 1-core Opteron CPU (64KB L1 caches, 2 MB L2 write-back cache, 2 GB main memory, 4KB/page) and Linux 2.6.15 running one of two applications: Nutch, a web-search engine (1.2 GHZ CPU), and the SPECjbb benchmark (3 GHz). SPECjbb was slightly modified for simulation feasibility, and was configured for 28 warehouses. We had COTSon trace all physical memory writebacks from the L2 cache, then computed a series of "write intervals" for each (physical) page; the length of an interval is the TBWP. We then calculated the median (50th percentile) TBWP for each page; <ref type="figure">fig. 1(a)</ref> shows the distribution of the fraction of pages as a function of their median TBWP.</p><p>Although these traces are too short to show definitive TBWP results for a target of 158 sec., <ref type="figure">fig. 1(a)</ref> shows that more than half of the pages in both benchmarks have median TBWP above 15.8 sec. Even if we want at least 75% of a page's write intervals to be longer than the target (see <ref type="figure">fig. 1(b)</ref>), we could still put about half of the pages in PC-RAM.</p><p>We also simulated a 4-core Nutch trial (800GHz Opteron, 8 MB L2), with a different dataset and workload. This trial modifies pages more rapidly, but still leaves more than half of RAM entirely unused; we are not sure yet what accounts for the difference in behavior.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5">Summary</head><p>We have argued that it might be advantageous to build main memory out of NVM+DRAM hybrids. To do so, • Some operations (e.g., writes for NOR flash and possibly for PC-RAM; reads and writes for NAND flash) will require DRAM buffering to match the timing constraints of a synchronous interface. This buffering will be visible to the OS, and so will affect the OS's pagemigration implementation.</p><p>• Avoiding problems with endurance will require some intelligence to decide what pages should migrate to NVM, and when; the OS appears the best place to apply that intelligence.</p><p>• Similarly, slow write speeds (especially for NOR flash) will also require OS-based intelligence to manage page migration. In short, the exploitation of future universal memory technologies is likely to create new opportunities for OS research and innovation.</p></div><figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_0"><head></head><label></label><figDesc>Figure 1: Distributions of times between writes to pages</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_0" validated="true"><head>Table 1 : Characteristics assumed in this paper (sources include [4, 8, 9, 13, 14] )</head><label>1</label><figDesc></figDesc><table>Technology 
Density 
Endurance Rand. read 
Write Erase 
Erase 
Idle "on" 
(cycles) 
time 
size 
power 
DRAM 
6-8 F 2 
10 15 
∼ 40-60 ns 
∼ 40-60 ns 
-
-∼4W-8W/DIMM 
NAND flash 
4-5 F 2 
10 5 -10 6 
5-50 us 
200 us/page 
2 ms e.g. 512KB 
∼0 
NOR flash 
10 F 2 
10 5 -10 6 
70 ns 
1 us 
1 sec e.g. 128KB 
∼0 
PC-RAM 
8-16 F 2 
10 8 -10 11 
60 ns? 100-1000 ns 
-
-
∼0 
Note: most of these values either vary with technology or are poorly defined 

</table></figure>
		</body>
		<back>
			<div type="references">

				<listBibl>

<biblStruct xml:id="b0">
	<analytic>
		<title level="a" type="main">Towards a Universal Memory</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Akerman</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Science</title>
		<imprint>
			<biblScope unit="volume">308</biblScope>
			<biblScope unit="issue">5721</biblScope>
			<biblScope unit="page" from="508" to="510" />
			<date type="published" when="2005-04-22" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b1">
	<analytic>
		<title level="a" type="main">COTSon: Infrastructure For Full System Simulation</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">E</forename><surname>Argollo</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Falcón</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><surname>Faraboschi</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Monchiero</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Ortega</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Operating Systems Review</title>
		<imprint>
			<biblScope unit="volume">43</biblScope>
			<biblScope unit="issue">1</biblScope>
			<date type="published" when="2009-01" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b2">
	<monogr>
		<title level="m" type="main">Understanding the Linux Kernel, Third Edition</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><forename type="middle">P</forename><surname>Bovet</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Cesati</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2005" />
			<pubPlace>O&apos;Reilly</pubPlace>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b3">
	<monogr>
		<title level="m" type="main">Phase change memory. Interconnect Technology Conf</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><forename type="middle">J</forename><surname>Breitwisch</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2008-06" />
			<biblScope unit="page" from="219" to="221" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b4">
	<analytic>
		<title level="a" type="main">Overview of candidate device technologies for storage-class memory</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">G</forename><forename type="middle">W</forename><surname>Burr</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">B</forename><forename type="middle">N</forename><surname>Kurdi</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IBM J. Research and Development</title>
		<imprint>
			<biblScope unit="volume">52</biblScope>
			<date type="published" when="2008-09" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b5">
	<analytic>
		<title level="a" type="main">The Rio File Cache: Surviving Operating System Crashes</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><forename type="middle">M</forename><surname>Chen</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">W</forename><forename type="middle">T</forename><surname>Ng</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. ASPLOS</title>
		<meeting>ASPLOS</meeting>
		<imprint>
			<date type="published" when="1996" />
			<biblScope unit="page" from="74" to="83" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b6">
	<analytic>
		<title level="a" type="main">Live migration of Virtual Machines</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><surname>Clark</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">K</forename><surname>Fraser</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. NSDI</title>
		<meeting>NSDI</meeting>
		<imprint>
			<date type="published" when="2005" />
			<biblScope unit="page" from="273" to="286" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b7">
	<monogr>
		<title level="m" type="main">Leveraging PCRAM Technology to Reduce Checkpointing Overhead in MPP Systems. Under review</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">X</forename><surname>Dong</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">N</forename><surname>Muralimanohar</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">N</forename><surname>Jouppi</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Y</forename><surname>Xie</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2009" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b8">
	<analytic>
		<title level="a" type="main">Flash memories: Successes and challenges</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><forename type="middle">K</forename><surname>Lai</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IBM J. Research and Devel</title>
		<imprint>
			<biblScope unit="volume">52</biblScope>
			<biblScope unit="issue">4/5</biblScope>
			<date type="published" when="2008-09" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b9">
	<analytic>
		<title/>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Lammers</surname></persName>
		</author>
		<ptr target="http://www.semiconductor.net/article/CA6571267.html" />
	</analytic>
	<monogr>
		<title level="j">Spansion Seeks DRAM Replacement in Servers</title>
		<imprint>
			<date type="published" when="2008-06-18" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b10">
	<analytic>
		<title level="a" type="main">Universal memory&apos; race still on the starting block</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Lapedus</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Mcgrath</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">EE Times</title>
		<imprint>
			<date type="published" when="2008-12-19" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b11">
	<monogr>
		<title level="m" type="main">Design and Analysis of Network and IO Consolidations in a General-Purpose Infrastructure</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">K</forename><surname>Leigh</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2007" />
		</imprint>
		<respStmt>
			<orgName>University of Houston</orgName>
		</respStmt>
	</monogr>
<note type="report_type">PhD thesis</note>
</biblStruct>

<biblStruct xml:id="b12">
	<analytic>
		<title level="a" type="main">Reliability study of phasechange nonvolatile memories</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Pirovano</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Redaelli</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE Trans. Device and Materials Reliability</title>
		<imprint>
			<biblScope unit="volume">4</biblScope>
			<biblScope unit="issue">3</biblScope>
			<biblScope unit="page" from="422" to="427" />
			<date type="published" when="2004-09" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b13">
	<analytic>
		<title level="a" type="main">Phase-change random access memory: A scalable technology</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Raoux</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">G</forename><forename type="middle">W</forename><surname>Burr</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IBM J. Research and Development</title>
		<imprint>
			<biblScope unit="volume">52</biblScope>
			<date type="published" when="2008-09" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b14">
	<monogr>
		<title level="m" type="main">Using Spansion EcoRAM to Improve TCO and Power Consumption in Internet Data Centers</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Inc</forename><surname>Spansion</surname></persName>
		</author>
		<ptr target="http://www.spansion.com/about/news/events/spansion_ecoram_whitepaper_06%08.pdf" />
		<imprint>
			<date type="published" when="2008" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b15">
	<analytic>
		<title level="a" type="main">File system usage in Windows NT 4.0</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">W</forename><surname>Vogels</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. SOSP</title>
		<meeting>SOSP</meeting>
		<imprint>
			<date type="published" when="1999" />
			<biblScope unit="page" from="93" to="109" />
		</imprint>
	</monogr>
</biblStruct>

				</listBibl>
			</div>
		</back>
	</text>
</TEI>
