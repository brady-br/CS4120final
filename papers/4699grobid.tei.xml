<?xml version="1.0" encoding="UTF-8"?>
<TEI xmlns="http://www.tei-c.org/ns/1.0" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
xsi:schemaLocation="http://www.tei-c.org/ns/1.0 /Users/atharsefid/Desktop/grobid-0.5.3/grobid-home/schemas/xsd/Grobid.xsd"
 xmlns:xlink="http://www.w3.org/1999/xlink">
	<teiHeader xml:lang="en">
		<encodingDesc>
			<appInfo>
				<application version="0.5.3" ident="GROBID" when="2020-09-29T04:29+0000">
					<ref target="https://github.com/kermitt2/grobid">GROBID - A machine learning software for extracting information from scholarly documents</ref>
				</application>
			</appInfo>
		</encodingDesc>
		<fileDesc>
			<titleStmt>
				<title level="a" type="main">Bitter Harvest: Systematically Fingerprinting Low-and Medium-interaction Honeypots at Internet Scale</title>
			</titleStmt>
			<publicationStmt>
				<publisher/>
				<availability status="unknown"><licence/></availability>
			</publicationStmt>
			<sourceDesc>
				<biblStruct>
					<analytic>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Alexander</forename><surname>Vetterl</surname></persName>
							<email>alexander.vetterl@cl.cam.ac.uk</email>
							<affiliation key="aff0">
								<orgName type="institution" key="instit1">University of Cambridge</orgName>
								<orgName type="institution" key="instit2">University of Cambridge</orgName>
							</affiliation>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Richard</forename><surname>Clayton</surname></persName>
							<email>richard.clayton@cl.cam.ac.uk</email>
							<affiliation key="aff0">
								<orgName type="institution" key="instit1">University of Cambridge</orgName>
								<orgName type="institution" key="instit2">University of Cambridge</orgName>
							</affiliation>
						</author>
						<title level="a" type="main">Bitter Harvest: Systematically Fingerprinting Low-and Medium-interaction Honeypots at Internet Scale</title>
					</analytic>
					<monogr>
						<imprint>
							<date/>
						</imprint>
					</monogr>
				</biblStruct>
			</sourceDesc>
		</fileDesc>
		<profileDesc>
			<abstract>
				<p>The current generation of low-and medium interaction honeypots uses off-the-shelf libraries to provide the transport layer. We show that this architecture is fatally flawed because the protocols are implemented subtly differently from the systems being impersonated. We present a generic technique for systematically fingerprinting low-and medium interaction honeypots at In-ternet scale with just one packet and an ERR (Equal Error Rate) of 0.0183. We conduct Internet-wide scans and identify 7 605 honeypot instances across nine different honeypot implementations for the most important network protocols SSH, Telnet, and HTTP. For SSH hon-eypots we also determined their patch level and find that they are poorly maintained-27% of the honeypots have not been updated within the last 31 months and only 39% incorporate improvements from 7 months ago. We believe our findings to be a &apos;class break&apos; in that trivial patches cannot address the issue.</p>
			</abstract>
		</profileDesc>
	</teiHeader>
	<text xml:lang="en">
		<body>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="1">Introduction</head><p>Early detection of new attack vectors and abusive behaviour is a cornerstone of contemporary approaches to improving Internet security. Honeypots, resources that appear to be legitimate systems, have long proven effective in capturing malware, helping to counter spam and providing early warning signals about upcoming threats. Secure Shell (SSH), Telnet, and HTTP were a focus of early honeypot research. Since SSH is the de facto standard to login to servers over an unsecured network, SSH honeypots continue to be extremely valuable. With the rise of the Mirai botnet, which recruits a variety of IoT devices using Telnet, it became evident that Telnet honeypots remain a key source of information <ref type="bibr" target="#b2">[3]</ref>.</p><p>For the last decade, honeypot research has received limited attention, with efforts mainly focused on the monitoring of human activity and the provision of a realistic environment for humans to interact with. Attackers have a strong motivation to detect honeypots at an early stage as they do not want to disclose their methods, exploits and tools <ref type="bibr" target="#b19">[21]</ref>. These attackers have attempted to distinguish honeypots by executing commands within the login shell (or the impersonation of the login shell) and examining the responses. This has led to an arms race as attackers develop new distinguishers and honeypot authors improve the verisimilitude of their system.</p><p>However, if a honeypot can be detected at the transport level, for example without completing the SSH handshake or Telnet options negotiation, the honeypot's value will be minimal and efforts to impersonate the service will be in vain <ref type="bibr" target="#b23">[25]</ref>. This aspect of the detection arms race is especially challenging because modern protocols such as SSH must handle a variety of versions, key exchange mechanisms, ciphers and service requests. Similarly, in Telnet the client and server can negotiate numerous settings such as line mode, echo and terminal type. As the RFCs do not mandate every aspect of a network protocol, two implementations of a complex protocol may deal with ambiguities differently, and this may reveal the presence of a honeypot.</p><p>Finding deviations between applications and their fingerprints has a long history and a number of theoretical and prototyped approaches, mainly based on binary analysis, have been proposed <ref type="bibr" target="#b5">[6,</ref><ref type="bibr" target="#b6">7,</ref><ref type="bibr" target="#b35">37]</ref>. Specific to fingerprinting honeypots, Holz et al. <ref type="bibr" target="#b19">[21]</ref> showed that the execution time of attackers' commands may be significantly longer due to the additional overhead of logging and sandboxing the execution of the honeypot itself. Similarly, Fu et al. <ref type="bibr" target="#b15">[17]</ref> found that attackers could use the latency of the networking layer to fingerprint honeypots. In 2015 Cymmetria Research summarized the known ways to fingerprint a variety of honeypots and provided a list of recommendations for honeypot developers <ref type="bibr" target="#b4">[5]</ref>.</p><p>All of these are individual findings, focusing on identifying single honeypot implementations. However, we are the first to observe that there is a generic weakness in the current generation of low-and medium-interaction honeypots because of their reliance on off-the-shelf libraries to implement large parts of the transport layer. These libraries are used for their convenience, but they were never intended to provide identical behaviour to 'real' servers. We systematically identify these differences, which can number in the thousands, and show that this allows us to locate a large variety of honeypots by Internet scale scanning.</p><p>We believe this to be a class break in that patches to the current generation of honeypots cannot address the issue. Until these honeypots are given a new architecture, anyone with moderate capabilities has a plethora of extremely simple and quick methods of identifying that a honeypot is running on a particular IPv4 address and can thereby treat it differently than otherwise.</p><p>Overall, we make three main contributions:</p><p>• We present a generic and accurate technique for systematically fingerprinting low-and medium interaction honeypots by constructing distinguishing probes at the transport layer. We identified thousands of deviations between honeypots and the services they are impersonating.</p><p>• We use this technique to perform Internet-wide scans for 9 different honeypots for the most important network protocols SSH, Telnet and HTTP. We find 7 605 honeypot instances residing on 6 125 IPv4 addresses: 2 779 honeypot instances for SSH, 1 166 for Telnet and 3 660 for HTTP.</p><p>• We provide insights into how honeypots are configured and deployed in practice. We discover that only 39% of the honeypots were updated within the previous 7 months. Furthermore, we find that 546 (72%) of the 758 Kippo honeypots are still (44 months later) vulnerable to a known fingerprinting technique that was first disclosed in 2014.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2">Background</head><p>Honeypots are classified by the type of system that they emulate, such as web or email servers, or general purpose remote access 'shells'. Honeypots are further classified as low interaction (in this context merely collecting credential guesses), medium interaction (providing a higher level of interaction) or high interaction (allowing attackers full control of a machine). High-interaction honeypots have significant value, but many people are unable to accept the risk that such honeypots may be used for DDoS attacks, malware distribution or the sending of email spam. However, lowand medium-interaction honeypots have proven effective as they are easy to deploy and to maintain, while at the same time potential harm is minimised. They are especially useful in collecting quantitative data about  <ref type="bibr" target="#b18">[20]</ref>. Honeypots that support Telnet 'out of the box' were not widely available at the time of that study. <ref type="table" target="#tab_0">Table 1</ref> provides an overview of the honeypots that we considered in our study, which we now discuss in detail.</p><p>SSH Honeypots: In this paper we consider SSH honeypots emulating generic servers running OpenSSH whose login credentials can be guessed and commands issued within an operating system shell such as bash. OpenSSH is the most widely used SSH protocol suite, and is installed on approximately 77% of all SSH servers listening on port 22 <ref type="bibr" target="#b11">[13]</ref>.</p><p>Many SSH honeypots have been developed over the years and one of the first SSH honeypots was Kojoney <ref type="bibr" target="#b22">[24]</ref> but active development ceased around 2006. Kojoney uses the TwistedConch library which dates back to 2002 and is the de facto standard implementation of SSHv2 for Python2/3. Kojoney inspired Kippo <ref type="bibr" target="#b21">[23]</ref> which was developed from 2009 to 2015 but the Kippo author now recommends people use a forked project called Cowrie <ref type="bibr" target="#b29">[31]</ref>. Cowrie has added more extensive logging and support for Telnet, and it remains under active development. The project's philosophy is to only implement shell commands that are being used by attackers and so as of 2018-01, Cowrie (partly) emulates 34 commands <ref type="bibr">[8]</ref>. In 2015, Deutsche Telekom included Kippo in T-Pot, a multi-honeypot platform "based on well-established honeypots" <ref type="bibr" target="#b7">[9]</ref>. T-Pot combines different honeypots for network services with an intrusion detection system and a monitoring and reporting engine. As of March 2016, Kippo was replaced by Cowrie "since it offers huge improvements over Kippo" <ref type="bibr" target="#b8">[10]</ref>.</p><p>Telnet Honeypots: Since mid-2016, and the rise of the Mirai botnet, there has been an increasing interest in Telnet honeypots. In this paper we consider four recent systems: MTPot, Telnet-IoT-Honeypot (TIoT), TelnetPassword-Honeypot (TPwd) and Cowrie.</p><p>MTPot, developed by Cymmetria Research, a company focusing on cyber deception, is designed to catch Mirai binaries. It is written in Python 2.x and uses the telnetsrv library for its telnet protocol implementation. TIoT also aims to catch IoT malware and is also written in Python 2.x, but with a custom implementation of the Telnet protocol. TPwd is written in C and also has its own implementation of the Telnet protocol.</p><p>HTTP/Web Honeypots: There are many web application honeypots available -some focusing on emulating Wordpress or various login interfaces to obtain credential guesses, while others are full web application honeypots. We focus on three honeypots of this second type: Conpot, Dionaea and Glastopf -all implemented in Python.</p><p>Conpot is a honeypot designed to emulate industrial control systems and by default it listens on ports 80, 102, 161 and 502. Dionaea supports almost all protocols and provides templates for each of them, including HTTP. Glastopf specifically focuses on HTTP and uses the BaseHTTPServer library to implement the protocol. Glastopf is the most highly recommended honeypot for HTTP, including in the ENISA report we mentioned above. Glastopf is also included within the latest versions of T-Pot.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3">Systematically fingerprinting honeypots</head><p>We present a new generic technique to systematically identify low-and medium-interaction honeypots based on protocol deviations. We find probes that result in distinctive protocol responses. This has resulted in the identification of thousands of deviations between honeypots and the services they are impersonating.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.1">Efficient Detection of Deviations</head><p>Given a set of implementations of a network protocol I = {I 1 , I 2 , ..., I x }, we send a set of probes P = {P 1 , P 2 , ..., P n } to I and record the set of responses R P . We then calculate the cosine similarity coefficients C for all responses R P i . The aim is to find the 'best' P i where the sum of C is</p><formula xml:id="formula_0">Probes (P)</formula><p>Implementation (I) send output Responses (R P ) Cosine similarity coefficients <ref type="bibr">(C)</ref> calculate <ref type="figure">Figure 1</ref>: Steps to identify probes with distinctive responses, which can then be used for Internet-wide scans. the lowest, i.e. the responses R P i for I j are overall the least similar. In other words, we try to find the probe that results in the most distinctive response across all the protocol implementations.</p><p>Cosine similarity is an established technique for comparing sets of information, commonly used to measure text semantic similarity. It has also proven useful in traffic analysis to find abnormalities <ref type="bibr" target="#b38">[40]</ref> and to measure domain similarity <ref type="bibr" target="#b26">[28,</ref><ref type="bibr" target="#b36">38]</ref>. We represent our responses R P as a vector of features appropriate to the network protocol. For example, in the case of Telnet, each individual terminal option character is treated as a feature. The resulting cosine similarity coefficient is a normalized value between 0 and 1. The higher the coefficient, the more similar the two items under comparison. The overall approach is outlined in <ref type="figure">Figure 1</ref>.</p><p>We fingerprinted the responses from widely deployed systems that support SSH, Telnet or HTTP along with the protocol libraries commonly used in building honeypots for these protocols. As honeypot developers supplement their chosen protocol library with custom code to emulate reference implementations, it is reasonable to expect to be able to generate unique fingerprints and so it proved. We then used the probe that resulted in the most distinctive responses for each protocol and sent it to every host on the Internet. From the responses we are able to determine the implementation (possibly a honeypot) that is running on each host.</p><p>The key point of our technique is that we are able to rapidly identify honeypots because of the way in which they have been implemented (using a particular protocol library) rather than having to consider how they respond when interacted with at length.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.2">Protocol 1: SSH</head><p>We look for deviations in responses to a client version string and a SSH2 MSG KEXINIT packet. For this comparison, we use five OpenSSH versions (6.6, 6.7, 6.8, 7.2, 7.5), the SSH server example supplied with TwistedConch and eight versions of the honeypots Kippo 1 and Cowrie 2 , four for each honeypot. We include multiple versions of Kippo and Cowrie as both honeypots have undergone substantial modifications over the years.</p><p>First, we create a set of client version strings:</p><p>SSH-protoversion-swversion SP comment crlf.</p><p>Our probes follow this syntax, but we alter individual parts -expecting this to result in differing responses.</p><p>We start with 'ssh' and 'SSH', we use 12 different protoversions ranging from 0.0 to 3.2, swversion (which identifies the software) we set OpenSSH or an empty string, comment we set to FreeBSD or an empty string, and the terminating crlf we set to either \r\n or an empty string. In short, we construct 192 client version strings:</p><formula xml:id="formula_1">[SSH, ssh]-[0.0, 0.1, 0.2, 1.0, 1.1, 1.2, 2.0, 2.1, 2.2, 3.0, 3.1, 3.2]-[OpenSSH, ""] SP[FreeBSD, ""][\r\n, ""].</formula><p>Second, we create SSH2 MSG KEXINIT packets using the algorithms defined in RFC 4250 <ref type="bibr" target="#b24">[26]</ref> and its intended update <ref type="bibr" target="#b1">[2]</ref>. Together these give 16 key-exchange algorithms, 2 host key algorithms, 15 encryption algorithms, 5 MAC algorithms and 3 compression algorithms. We supplement each of them with an empty string and do not include any supported languages in our packets. We populate the 16 byte cookie with random bytes and correctly pad the packet. This leads to the generation of 19 584 correctly formed packets where each packet offers just one algorithm of each type. In addition to these correctly formed packets, we create a variant with incorrect padding (mod 13 instead of mod 8) and another variant for which we omit the packet and padding length.</p><p>In total, we generate 58 752 different packets; in combination with the client versions, we issue 157 925 376 probes, 11 280 384 to determine how each of our 14 implementations will respond.</p><p>We record every character the servers send in response, including random content such as the cookie or the padding. Thus for SSH, we do not expect a cosine similarity of 1.0. In fact, including random parts has proven very valuable as we find that OpenSSH uses NULL characters to pad packets, but the honeypots use random bytes for padding (see Section 4.4.1). <ref type="table">Table 5</ref> in the Appendix gives the average similarity scores across all of the implementations. Overall, Kippo and Cowrie respond similarly to OpenSSH, with an average cosine similarity measure ranging from 0.66 to 0.81, but in no case do they manage to be identical across all probes. After calculating all the cosine similarity coefficients, as outlined in Section 3.1, we find that SSH-2.2-OpenSSH \r\n as version string and the SSH2 MSG KEXINIT packet including ecdh-sha2-nistp521 as key-exchange algorithm, ssh-dss as host key algorithm, blowfish-cbc as encryption algorithm, hmacsha1 as mac algorithm and zlib@openssh.com as compression algorithm, with the wrong padding, is the probe with the lowest cosine similarity coefficient C and will be used in our scans because it is the best distinguisher between honeypots and non-honeypot SSH servers.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.3">Protocol 2: Telnet</head><p>For Telnet we look for deviations in responses to our negotiation requests. For this comparison, we use Busybox versions 1.6.1, 1.7.2, 1.8.0, 1.9.0, 2.0.0, 2.1.1, 2.4.0, 2.6.2, Ubuntu-telnetd 0.17.4, FreeBSD 11.1 telnetd and the honeypots MTPot 3 , Cowrie <ref type="bibr" target="#b3">4</ref> , TPwd <ref type="bibr" target="#b4">5</ref> and TIoT <ref type="bibr" target="#b5">6</ref> .</p><p>Given the IAC escape character, four option codes WILL, WON'T, DO, DON'T and 40 Telnet options 7 , we create 160 different negotiation requests (n). The Telnet protocol specifies that an arbitrary number of requests (r) can be sent at any time. To get the most exhaustive coverage we test all 160 negotiation requests (n = 160), but limit the maximum number of negotiation requests per connection to two (r = 2). As we do not want to send the same requests twice, we generate 160! (160−2)! = 25 440 probes for each Telnet implementation. In total we generate 356 160 responses, 25 440 for each of our 14 implementations. The responses will contain the negotiation options that the server sends initially, along with the response it makes to our probe. <ref type="table">Table 6</ref> in the Appendix gives the average similarity scores across all of the implementations. Again, the honeypots respond in a similar way to other systems, but in no case do they manage to be identical across all probes. Cowrie responds most similarly to Ubuntu telnetd with an average cosine similarity measure of 0.94 followed by MTPot with 0.89. Interestingly, Busybox versions 1.6.0 to 2.4.0 have identical behaviour. After calculating all the coefficients, we find that \xff\xfb\x00\xff\xfb\x12, i.e. IAC WILL BINARY IAC WILL LOGOUT is the probe with the lowest cosine similarity coefficient C and will be used in our Internet-wide scan to find honeypot implementations.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.4">Protocol 3: HTTP/Web</head><p>For HTTP we look for deviations in responses to HTTP method requests. For this comparison, we use Apache versions 2.0.50, 2.2.34, 2.4.27, nginx versions 1.0.15, 1.4.7, 1.12.1, python3.5.2-aiohttp version 2.2.0, python2.7-simplehttpserver, python2.7-basehttpserver, Glastopf 8 , Conpot 9 , and Dionaea 0.6 <ref type="bibr" target="#b8">10</ref> .</p><p>Our probes follow the syntax of HTTP requests and are formed as follows: method char version. When considering the responses we omitted the semantics of the date and time information that is included in the header, but not the syntax. This prevents region/language configuration differences from affecting our results.</p><p>We use the 43 different request methods defined in RFC2616 <ref type="bibr" target="#b14">[16]</ref> and RFC2518 <ref type="bibr" target="#b17">[19]</ref>   with a preceding / as the path and 9 different HTTP versions ranging from version HTTP/0.0 to HTTP/2.2 to create our set of probes. In total, we sent 571 212 probes, 47 601 for each of our 12 implementations. <ref type="table">Table 7</ref> in the Appendix gives the average similarity scores. Again, no honeypot behaves identically to any of the systems we tested. Compared with our SSH and Telnet results, the similarity measures are much lower and the web server implementations respond far more distinctively. We find that Dionaea outperforms all the other honeypots we tested and is the most identical to Apache and nginx with average similarity measures ranging from 0.10 for nginx 1.4.7 to 0.20 for Apache 2.4.27. As expected, Glastopf most resembles python2-basehttpserver and python2-simplehttpserver -the underlying libraries used to provide its transport layer. We then identified the probe with the lowest coefficient C and we use GET /. HTTP/0.0\r\n\r\n for the Internet-wide scan.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4">Internet-wide Scanning</head><p>We use the probes we identified to perform six scans, two scans each for SSH, Telnet and HTTP honeypots, to find honeypots at Internet scale. <ref type="table" target="#tab_2">Table 2</ref> summarises these scans and gives the number of detected honeypots. All our scanning is performed from a dedicated host within our University network and in accordance with the ethical considerations outlined in Section 6.</p><p>First, we use ZMap and perform a one-packet scan sending TCP SYN packets to the respective ports 22, 23 and 80 using the exclusion list maintained by DNS-OARC <ref type="bibr" target="#b9">[11]</ref>. In total we scanned 3 336m IPv4 addresses, 78% of the IPv4 address space. We configured ZMap to scan at 30mbps and determined which IPv4 addresses responded successfully with a SYN-ACK packet.</p><p>Second, responsive IPv4 addresses were visited by a custom scanner which connects on the appropriate port and sends probes to identify honeypots. For each responsive IPv4 address we only try to connect once, with a socket timeout of six seconds.</p><p>For SSH, we only consider servers which appear to be running OpenSSH configured for SSHv2, i.e. when we connect to them on port 22 they send the server version string SSH-2.0-OpenSSH *, where * is the OpenSSH version (number). We then determine whether the server behaves identically to OpenSSH.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.1">Results</head><p>As shown in <ref type="figure" target="#fig_0">Figure 2a</ref>, we find that most SSH implementations are similar to OpenSSH 6.6 and 7.2. Only when we look for a cosine similarity score of 0.9 and higher does the number of hosts classified as OpenSSH significantly decrease. As we do not exclude the 'random' parts of the servers' responses (Section 3.2) we have no easy way of defining a threshold at which cosine similarity score we should accept the hypothesis that responses originate from SSH honeypots. We discuss how we overcome this with a detailed analysis of false positive and false negative rates in Section 4.2 below. Doing so, we classify 758 honeypots as Kippo and the remaining 2 021 are Cowrie honeypots (Scan 2). As Kippo and Cowrie respond very similarly to our probes, we differentiate them based on the disconnection messages (see Section 4.4.2).</p><p>The very first scan predated our systematic method of fingerprinting honeypots and was performed by sending a non-compliant SSH2 MSG KEXINIT packet to each responsive IPv4 address (Section 4.4.2). In that first scan, we found 2 844 honeypot instances, 1 938 instances of Cowrie and 906 of Kippo.</p><p>By design, Telnet servers do not advertise their implementation or version, so there are no deployment statistics available; we are the first to fill this gap. As shown in <ref type="figure" target="#fig_0">Figure 2b</ref>, a significant number of hosts are similar to Busybox versions 1.6 to 2.4, but as the similarity measure increases, the number of hosts we can definitively identify significantly decreases. We also find about 400k Telnet servers that are identical to Ubuntu telnetd. When identifying honeypots we only consider exact matches (a cosine similarity score of 1.0) and we find that there are 1 430 Telnet honeypots deployed. The vast majority of these are Cowrie (1 019) followed by MTPot (388), ToIT (22) and TPwd (1). In our second scan three months later we find 1 116 Telnet honeypots and again, the vast majority are Cowrie honeypots (938) followed by MTpot (216), TIoT (11) and TPwd (1). As shown in <ref type="figure" target="#fig_0">Figure 2c</ref>, most HTTP implementations resemble nginx 1.12.1 and Apache 2.2.34. We further observe that the number of implementations that are at all similar to one of the honeypots or the plain library implementations is minimal. In total, we find 2 616 instances of HTTP honeypots in our first scan and 3 660 in the second scan. Glastopf is the most widely used honeypot with 3 371 instances followed by <ref type="bibr">Dionaea (202)</ref> and <ref type="bibr">Conpot (87)</ref>. Differences between scans not only reflect changes to the honeypot population but also of course whether temporary Internet glitches meant that SYN-ACKs were not returned to ZMap.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.2">Validation</head><p>The nature of honeypots means that there is no publicly available list of honeypot IP addresses so we looked for ways to cross-validate our method.</p><p>The Telnet and HTTP Honeypots in our study do not include randomized content in their responses. Thus we can classify hosts as honeypots only when there is an exact match (cosine similarity score 1.0). We then used the second-best distinguishing probe for these honeypots to confirm the initial hypothesis that the servers' response is unique to the specific honeypot implementation. Doing so, we find that 1 136 of 1 166 (97.4%) Telnet honeypots, and 3 549 of 3 660 HTTP (97.0%) honeypots respond to these probes as expected (cosine similarity score of 1.0 for both probes). Manual inspection shows that all the discrepancies are caused by incomplete responses.</p><p>For SSH we first considered all responses classified as honeypots with a cosine similarity of 0.80 or more (9 607). We then remove the packet length, padding length, cookie and the random padding. This results in the identification of 2 779 instances of SSH honeypots which now had a cosine similarity score of 1.0.</p><p>We find a significant difference in the original cosine similarity scores between what we now know to be Cowrie honeypots (2 021), Kippo honeypots <ref type="formula">(758)</ref>, and all the other responses which we initially classified as not being a honeypot (6 828); Kruskal-Wallis, p = 0.001 with a mean rank of 8 245 (median = 0.981) for Cowrie honeypots, 8 057 (median = 0, 972) for Kippo and 3 424 (median = 0.857) for Non − honeypots (see <ref type="figure" target="#fig_3">Figure 3a)</ref>.</p><p>We further send the second-best probe to all of the 9 607 implementations that were initially been classified as SSH honeypots. As can be seen in <ref type="figure" target="#fig_3">Figure 3b</ref>, for all of the 2 779 fingerprinted honeypots the cosine similarity score for both, the initial probe and the confirmation probe (including the random parts), is 0.90 or higher.</p><p>In summary, the cosine similarity of 1.0 for payloads makes us certain that we have found 2 779 SSH honeypots. Furthermore, the resulting cosine similarity values of the second-best probe are effectively identical to the initial probe, 0.90 and higher.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.3">Accuracy</head><p>Evaluating our method further, it is essential to report false positive rates (FPR) and false negative rate (FNR). The FPR indicates how often our method identifies hosts as honeypots when they aren't and the FNR is the likelihood that our method fails to identify hosts as honeypots when they are. Assuming that the ground truth is 2 779 honeypots, we get an Equal Error Rate (ERR) of 0.0183 using the threshold (t) of 0.9235 and the best probe (see <ref type="figure" target="#fig_3">Figure 3c</ref>). In other words, at this point we falsely accept and at the same time fail to identify 51 honeypots.</p><p>When using both the best probe and the second-best probe, we achieve a slightly better ERR of 0.0132. This is a minor improvement and in most situations not worth the additional overhead of sending twice the number of packets. Arguably a real attacker would choose a higher FPR so they can be certain not to touch a honeypot at the expense of excluding potential targets.   </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.4">SSH: Implementation Flaws</head><p>We now explore some sources of divergence for the SSH protocol and show that there are numerous differences 'on-the-wire' between entirely standards compliant implementations; each of which gives attackers a quick and easy way of identifying honeypots at Internet scale.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.4.1">SSH Binary Packet Protocol</head><p>We find that Kippo and Cowrie use random bytes for the SSH2 MSG KEXINIT packet, but OpenSSH uses NULL characters for padding. The Binary Packet Protocol (BPP) of SSH is defined in RFC4253. Each packet consists of the packet length itself, the padding length, a payload, random padding and the Message Authentication Code (MAC). The BPP uses random padding to ensure that the total length of the packet T L p is a multiple of the cipher block size (or of 8, whichever is larger). Section 6 of the RFC further states that the padding MUST consist of at least 4 bytes and these bytes SHOULD be random.</p><p>We corresponded with the OpenSSH authors who told us that long ago they used random values but have changed to null padding bytes because this has no security implications either way <ref type="bibr" target="#b30">[32]</ref>. This difference means that observing just one SSH2 MSG KEXINIT packet is enough to distinguish OpenSSH from TwistedConch and hence determine if Kippo or Cowrie is responding.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.4.2">Disconnection Messages</head><p>A large source of divergences are the result of disconnection messages at various stages of the protocol exchange. We list three differences, each of which can serve as a distinguisher, and explain its origin.</p><p>Bad versions 2.2: We observe that changing the protocol version from 2.0 to 2.2 results in the disconnec- tion message "bad version 2.2" for TwistedConch, but OpenSSH does not raise an error and continues the protocol sequence by sending its SSH2 MSG KEXINIT packet.</p><p>Non-compliant SSH2 MSG KEXINIT packet: We find that we can trigger disconnection messages by sending SSH2 MSG KEXINIT packets that are not compliant with the SSH transport layer protocol. By omitting the packet and padding length, we force the SSH server to close the connection. Based on the disconnection message, we differentiate between Kippo ("bad packet length *", "Protocol mismatch.\n"), Cowrie ("Packet corrupt\n") and OpenSSH ("Packet corrupt\x00"). OpenSSH does have a similar error message to Kippo, but with a capital B, i.e. ("Bad packet length *"), where * is the packet length.</p><p>Non-compliant packet: If we violate the specification of the BPP and construct a SSH2 MSG KEXINIT packet so that T L p (mod 8) 񮽙 = 0, Kippo and Cowrie terminate the connection with, for example, the error message "bad packet mod (244%8 = 4)" where 244 ≡ T L p . OpenSSH provides no detail but terminates the connection with the generic reason "Packet corrupt".</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.5">Honeypot Deployment</head><p>Update Behaviour of SSH Honeypots: Based on the honeypots' responses, we split the SSH honeypots into four groups according to their patch level. The results are shown in <ref type="table" target="#tab_3">Table 3</ref>. In the first scan we found that 695 (24%) of the Kippo honeypots were more than 40 months out of date and hence would fall to a well-known fingerprinting technique first disclosed on 2014-05-28. Even by the second scan three months later, 546 had still not been updated (72.0% of a reduced population).</p><p>Kippo has not been actively developed since 2015, but the people running Cowrie are also failing to keep their deployments up to date. Our figures from the second scan show that only 1 071 (53%) of these honeypots had incorporated improvements from 7 months earlier. Since developers track the commands that adversaries use and continually add new features to make honeypots more covert, not updating a honeypot increases the chances that it may be fingerprinted (using traditional techniques) and thus limits its value in detecting new attack vectors.</p><p>Mass Deployment of Honeypots: We scanned for all three types of honeypots independently, but we now consider what we learn by linking them by IPv4 address. The 7 605 honeypot instances of our second scan reside on 6 125 IPv4 addresses. Thus a significant number of honeypot operators deploy several honeypots on a single host. We find 714 IPv4 addresses run Cowrie on port 22 (SSH) and simultaneously Glastopf on port 80 (HTTP); there are also 550 instances of Cowrie being run on both port 22 (SSH) and port 23 (Telnet). The risk here is that fingerprinting one honeypot instance may reveal the presence of other honeypots on the same host.</p><p>We also fetched the SSH host keys, which are intended to be unique, of all the honeypots that we had identified. We find that only 1 838 of the 2 844 SSH honeypots (65%) in the first scan have a unique host key. The remaining 1 006 honeypots have 71 host keys between them with a median of 5 honeypots per host key. For the second scan only 2 193 of the 2 779 honeypots (78.9%) have unique host keys. It follows that a substantial number of honeypot operators deploy more than one honeypot and while doing so exercise little caution. It is likely that honeypot operators use deployment scripts, docker containers or simply copy and paste the source files, including the same host key, to all their honeypots.</p><p>We determine which hosting companies honeypot operators use; we list the Top 10 ASs for all the honeypots that our scans identified in <ref type="table" target="#tab_4">Table 4</ref>. We find that the honeypot are hosted in 82 countries, with the majority being located at well-known cloud providers in the USA.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5">Discussion</head><p>Previously, especially for SSH honeypots, the main goal was to provide a realistic looking shell for humans to interact with. But with the rise of botnets probing random servers and fast Internet-wide scanning, almost everything a honeypot observes is generated by automated scripts. Meanwhile, honeypot operators and developers have put little emphasis on the underlying protocols, but have relied on off-the-shelf libraries. More emphasis needs to be placed on identically implementing the lower layers of the networking stack. We have shown that no honeypot developer has implemented a protocol the same way as the server they impersonate. The RFCs that define protocols do not mandate every protocol detail and hence there are numerous differences 'on-the-wire' between entirely standards compliant implementations. Ambiguities in RFCs are not the only source of divergence because code also evolves over time. For example, OpenSSH used random padding for its SSH2 MSG KEXINIT in version 3.6p1 and earlier, but now uses clear padding with NULL characters. The developers of OpenSSH argue that the SSH2 MSG KEXINIT packet is unencrypted and so random padding does not offer cryptographic benefits -but this change was missed by honeypot developers.</p><p>In the same vein honeypot operators need to carefully consider what Telnet terminal options, HTTP response codes, SSH version and authentication settings are sentand far more care is needed with SSH host keys. Copying the same key to multiple machines not only links honeypots together, but attackers need only see the same key returned by multiple locations for suspicions to be raised.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5.1">Practical Impact</head><p>The generic technique presented above allows the (automatic) generation of thousands of probes, any of which could be used to identify that a honeypot is running on a particular IPv4 address and thereby treat it differently than otherwise. Furthermore, we demonstrated that by identifying a probe with the maximum discriminatory power we can then rapidly scan the Internet to find thousands of honeypot instances. It will be easy to add scripts using these techniques into tools such as Metasploit. Since the probes do not leave meaningful log entries in any of our tested honeypots, operators will not be aware that their honeypot has been detected.</p><p>Once a honeypot is identified, it must be expected that it will be blacklisted by adversaries. The value of the honeypot will drastically decrease, in particular its value in collecting data about large-scale attacks will be minimal. Thus, the main practical impact of our findings will be high switching costs for honeypot owners. The honeypot will need to be moved to a new IP address, perhaps a new hosting provider.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5.2">Countermeasures</head><p>Short term, honeypot operators will want to assess whether attackers have started to identify them by carefully inspecting their logs and looking for incomplete connections and repetitive disconnection messages. However, these messages commonly arise for other reasons and without recourse to packet level logging this will not be unambiguous evidence of fingerprinting. While not our current aim, our technique can be adapted to find and subsequently filter probes that induce no or even less logging than the probes we used.</p><p>Medium term, the developers of honeypots and libraries such as TwistedConch (where the SSH distinguishers we have identified reside) may mitigate some of the issues we have identified. Cowrie has already implemented a fix to use NULL characters for padding.</p><p>Long term, the only robust fix is to develop a new generation of honeypots that implement protocols using exactly the same code as the systems they set out to impersonate. Otherwise, as attackers include our methods in their scripts, low-and medium-interaction honeypots will have minimal value. This is undesirable because low-and medium-interaction honeypots are an extremely useful source of information, and not everyone is prepared to run high-interaction honeypots as they need to be carefully operated and maintained.</p><p>This new generation is not especially difficult to implement and we have already developed a modified OpenSSH daemon to be used in conjunction with Cowrie so there will be no difference in responses <ref type="bibr" target="#b34">[36]</ref>.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="6">Ethical Considerations</head><p>We followed our institution's ethical research policy throughout, with appropriate authorisation at every stage.</p><p>We followed a strict responsible disclosure process and notified the relevant honeypot developers of our findings. We initially notified the developer of Cowrie on 2017-03-01 and subsequently the developers of the TwistedConch library used by Cowrie on 2017-03-14. Development of Kippo has ceased. Once we could fingerprint Telnet and HTTP honeypots, we also disclosed our results to the developers of TPwd, MTpot, TIoT, Cowrie, Dionaea, Glastopf and Conpot on 2017-10-16.</p><p>As of 2018-06, only one of the issues we have identified in Cowrie has been resolved. TwistedConch acknowledges that honeypots are an important use-case for their library, but they never promised byte-for-byte parity with OpenSSH. Based on the responses from the developers of Cowrie and TwistedConch, we are pessimistic that any further issues will be resolved.</p><p>The developer of Glastopf and Conpot agrees that fixes require a new architecture. Cymetria Research, the maintainer of MTPot, classified our findings as vulnerabilities as it is a "critical aspect of any honeypot" even though they say that some would argue otherwise. However, their view is that MTPot was intended to capture Mirai binaries and that it achieves that goal as Mirai does not try to fingerprint honeypots. The author of TIoT is not concerned about transport layer issues as his honeypot can be identified solely by its delivered content.</p><p>Before performing the Internet-wide scans to identify honeypot deployments, we thoroughly tested our scanner. For all scans we used the exclusion list maintained by DNS-OARC <ref type="bibr" target="#b9">[11]</ref>. The host used for scanning runs a web page on port 80 so that people who are scanned can determine the nature of our experiment and learn our contact details. We also added reverse DNS entries to clarify the nature of the host. We ensured that local CERTs were fully aware of our activity. We received two complaints and respected their request to be excluded from further scanning.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="7">Related Work</head><p>Closest to this work, Bethencourt et al. <ref type="bibr" target="#b3">[4]</ref> sent probes to ranges of IP addresses and observed changes of activity within published reports of sensor networks such as the SANS Internet Storm Center. Thus, over time, they could enumerate all sensors for particular systems. However, this approach requires that sensors make their data publicly available and our technique does not require this.</p><p>Brumley et al. <ref type="bibr" target="#b5">[6]</ref> showed that by automatically building symbolic formulas from binaries they could find deviations in the protocol implementations of HTTP and NTP. Similarly, AUTOPROBE <ref type="bibr" target="#b37">[39]</ref> generates fingerprints of malicious C&amp;C servers through binary analysis. Focusing on protocol reverse engineering, Comparetti et al. <ref type="bibr" target="#b6">[7]</ref> developed Prospex, a system to extract protocol specific information, but it may also be used to identify protocol deviations. Our approach differs from all of them in that it is scalable to a variety of implementations, that we do not rely on binary analysis, and that it works at Internet scale.</p><p>Identifying vulnerabilities and characterizing network services by sending specifically crafted packets towards network hosts and analysing their response is a long established practice. Popular tools include Nmap <ref type="bibr" target="#b25">[27]</ref> and more recently ZMap <ref type="bibr" target="#b12">[14]</ref>. Characterizing network hosts based on Internet-wide scanning has been previously performed for Industrial Control Systems (ICSs) and continuously for SSH. Censys.io performs weekly scans for all major protocols and grabs all publicly available information <ref type="bibr" target="#b11">[13]</ref>. Similarly. Feng et al. <ref type="bibr" target="#b13">[15]</ref> performed an Internet-wide scan to characterize ICSs and their usage. To get more accurate results, they trained a probability model and use a heuristic algorithm to exclude ICS honeypots. To do so, they use four characteristics including the number of open ports and HTTP configuration.</p><p>Focusing on SSH, Albrecht et al.</p><p>[1] present multiple vulnerabilities in SSH and perform an Internet-wide scan to obtain deployment statistics and estimate the impact of their new attacks. Similarly, Gasser et al. <ref type="bibr" target="#b16">[18]</ref> showed that the rate of software updates for SSH is slow and that many SSH keys are reused on different hosts. While our results will not explain all of the hundred thousand duplicate keys they found, some belong to honeypots and not 'real' systems.</p><p>There has been a long arms race between finding ways to detect honeypots and camouflaging their presence <ref type="bibr" target="#b10">[12,</ref><ref type="bibr" target="#b32">34]</ref>. In 2004, Provos <ref type="bibr" target="#b31">[33]</ref> developed Honeyd, a framework that simulates virtual computer systems and their TCP/IP stack to deceive fingerprinting tools. More recently, Mukkamala et al. <ref type="bibr" target="#b28">[30]</ref> demonstrate that honeypots within virtual environments respond slower to ICMP echo requests than real systems. Successful attempts to fingerprint Kippo have been made by sending eight carriage returns as the SSH client version as previous versions of Kippo return the error message "bad packet length 168430090" instead of replying with "Protocol mismatch" <ref type="bibr" target="#b27">[29]</ref>. In 2014, the SANS Technology Institute <ref type="bibr" target="#b32">[34]</ref> reported that attackers issue the command file /sbin/init that returns dynamic content to fingerprint Kippo. In 2015, Cymmetria Research summarized such known cases for a variety of honeypots and outlined a list of recommendations <ref type="bibr" target="#b4">[5]</ref>. However, unlike our automated and generic approach, these are individual findings inspecting single honeypot implementations.</p><p>Krawetz <ref type="bibr" target="#b23">[25]</ref> developed a tool called Honeypot Hunter to fingerprint honeypots. This tool tests if emails sent through the compromised system were actually delivered as advanced functionalities are likely not emulated by low-interaction honeypots. Similarly, Zou and Cunningham <ref type="bibr" target="#b39">[41]</ref> proposed fingerprinting honeypots based on their limited ability to participate in real attacks and execute malicious activities.</p><p>More recently, Shodan provides an online tool <ref type="bibr" target="#b33">[35]</ref> that allows anyone to check whether a host is running a honeypot or a real industrial control system (ICS). While Shodan's effort is still work-in-progress and mainly targets ICSs, we find that all of the honeypots' IPs that we identified are believed by Shodan to be real systems.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="8">Conclusion</head><p>We have presented a generic approach for systematically generating probes that can be used to find low and medium-interaction honeypots with just one or two packets, leaving minimal clues in the logging. Our technique is not only applicable to the SSH, Telnet and HTTP honeypots we discussed, but to a wide range of other protocols including SMTP, FTP, Modbus, S7 and SIP. We start by identifying a number of distinguishing probes and subsequently select the 'best' probe that minimises the effort to identify honeypots at Internet scale. We then present a number of techniques to determine the patch level of Kippo and Cowrie, the leading examples of medium interaction SSH honeypots.</p><p>The distinguishers we have identified result from design decisions to use off-the-shelf libraries (or in some cases newly developed code) to handle the protocol implementation -even though the libraries never promised byte-for-byte parity. This is a class break in that we do not believe that patching the current generation of honeypots can fully address the issues we have identified. The potential damage is worrying. We will need a new generation of honeypots with new architectures -and those new honeypots will need to be installed on new IP addresses with new settings and with far more attention paid to the mechanics of deployment so that honeypot collections cannot be linked together.</p><p>Our impression is that honeypot authors believe that they are dealing with na¨ıvena¨ıve human adversaries, but with the rise of fast Internet-wide scanning and the dominance of automated scripts probing servers, much more emphasis has to be put on ensuring that there is complete verisimilitude in the lower levels of the networking stack rather than just ensuring that humans can be fooled. This is, however, not an argument for high-interaction honeypots as many are unable to accept the risk that they pose or the effort required to monitor them to prevent them from doing harm. We need low-and medium-interaction honeypots; we just need a new generation that is far less easy to identify.</p></div><figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_0"><head>Figure 2 :</head><label>2</label><figDesc>Figure 2: Similarity of SSH, Telnet and HTTP implementations in the Internet-wide scan based on their responses to our probes. Results are based on the latest scans for each protocol.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_1"><head>(</head><label></label><figDesc>a) We find a significant difference between the cosine similarity scores and the classified groups -Cowrie honeypots, Kippo honeypots and hosts not classified as honeypots.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_2"><head>Error</head><label></label><figDesc>Result confirmation: For all of the finger- printed honeypots the cosine similarity score for both, the initial probe and the confirmation probe is 0.90 or higher.Rate (r) Equal Error Rate (ERR) False Positive Rate (FPR) False Negative Rate (FNR) (c) Our methods achieves an ERR of 0.0183 with a threshold of 0.9235, i.e. responses with a cosine similarity score of 0.9235 and higher are classified as honeypots.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_3"><head>Figure 3 :</head><label>3</label><figDesc>Figure 3: We validate our method by removing the random parts in the servers' responses and sending the second-best distinguishing probe to each potential honeypot.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_0" validated="true"><head>Table 1 : Honeypots in this study</head><label>1</label><figDesc></figDesc><table>Updated Language 
Library 

SSH 
Kippo 
May 15 
Python 
TwistedConch 
Cowrie 
May 18 
Python 
TwistedConch 
Telnet 
TPwd 
Feb 16 
C 
custom 
MTPot 
Mar 17 
Python 
telnetsrv 
TIoT 
May 17 
Python 
custom 
Cowrie 
May 18 
Python 
TwistedConch 
HTTP/Web 
Dionaea 
Sep 16 
Python 
custom 
Glastopf 
Oct 16 
Python 
BaseHTTPServer 
Conpot 
Mar 18 
Python 
BaseHTTPServer 

large-scale attacks. A 2012 report for the European Net-
work and Information Security Agency (ENISA) evalu-
ated the vast majority of available honeypots, including 
high-interaction honeypots. The authors recommend us-
ing the medium-interaction honeypots Kippo for SSH, 
Glastopf for HTTP and Dionaea for the remaining proto-
cols </table></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_2" validated="true"><head>Table 2 : Results of the Internet-Wide Scan. *Scan 1 (SSH) was performed with the techniques outlined in Section 4.4</head><label>2</label><figDesc></figDesc><table>SSH Honeypots 
Telnet Honeypots 
HTTP/Web Honeypots 
Date 
#ACKs Sum 
Kippo Cowrie TPwd MTPot 
TIoT 
Cowrie Dionaea Glastopf Conpot 

Scan 1 (SSH)* 
2017-09 18,196k 2844 
906 
1938 
Scan 2 (SSH) 
2018-01 20,586k 2779 
758 
2021 

Scan 1 (Telnet) 
2017-09 8,290k 1430 
1 
388 
22 
1019 
Scan 2 (Telnet) 
2018-01 8,169k 1166 
1 
216 
11 
938 

Scan 1 (HTTP) 
2017-10 58,775k 2616 
139 
2390 
87 
Scan 2 (HTTP) 
2018-01 67,615k 3660 
202 
3371 
87 

</table></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_3" validated="true"><head>Table 3 : Update Statistics for Kippo and Cowrie</head><label>3</label><figDesc></figDesc><table>Scan 1 (SSH) 
Scan 2 (SSH) 

Kippo &lt;2014-05-28 
695 (24.4%) 
546 (19.6%) 
Kippo &lt;2015-05-24 
211 
(7.4%) 
212 
(7.6%) 
Cowrie &lt;2017-06-06 
1228 (43.2%) 
950 (34.2%) 
Cowrie ≤date of scan 
710 (25.0%) 
1071 (38.6%) 

</table></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_4" validated="true"><head>Table 4 : Top 10 ASNs used to host Honeypots (latest scans)</head><label>4</label><figDesc></figDesc><table>CO ASN 
Organisation 
Telnet 
SSH HTTP Total 

US 16509 
Amazon.com 
140 
520 
506 1166 
JP 
2500 
WIDE Project 
-
-
490 
490 
US 14061 
Digital Ocean 
162 
189 
139 
490 
FR 16276 
OVH SAS 
117 
202 
122 
441 
TW 4662 
GCNet 
15 
2 
254 
271 
TW 18182 
Sony Network 
2 
-
256 
258 
US 15169 
Google LLC 
45 
139 
46 
230 
TW 9924 
Taiwan Fixed 
1 
74 
146 
221 
US 14618 
Amazon.com 
12 
70 
110 
192 
RO 43443 
DDNET Sol. 
30 
-
155 
185 

</table></figure>

			<note place="foot" n="1"> Commits 0d03635, 40b6527, 4999618 and 9645e50 on https://github.com/desaster/kippo 2 Commits 96ca2ba, dc45961, dbe88ed and fd801d1 on https://github.com/micheloosterhof/cowrie</note>

			<note place="foot" n="3"> https://github.com/Cymmetria/MTPot/commit/c32d433e 4 https://github.com/micheloosterhof/cowrie/commit/ffe669f 5 https://git.zx2c4.com/telnet-password-honeypot/commit/0f9b0c 6 https://github.com/Phype/telnet-iot-honeypot/commit/15343df9 7 We only use the main options from 0 to 39 [22] 8 https://github.com/mushorg/glastopf/commit/bcbcebe 9 https://github.com/mushorg/conpot/commit/74699fc 10 https://github.com/DinoTools/dionaea/commit/02492e2b</note>
		</body>
		<back>

			<div type="acknowledgement">
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Acknowledgments</head><p>This work was supported by the EPSRC [grant number EP/M020320/1] and a Premium Research Studentship from the Department of Computer Science and Technology, University of Cambridge. We are grateful to Ross Anderson, Alastair R. Beresford, Alice Hutchings, Daniel R. Thomas, Sergio Pastrana and to the anonymous reviewers for helpful comments on this paper.</p></div>
			</div>

			<div type="annex">
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Appendix</head></div>			</div>
			<div type="references">

				<listBibl>

<biblStruct xml:id="b0">
	<analytic>
		<title level="a" type="main">A Surfeit of SSH Cipher Suites</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Albrecht</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><forename type="middle">R</forename><surname>Degabriele</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><forename type="middle">P</forename><surname>Hansen</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><forename type="middle">B</forename><surname>And</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Paterson</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">K</forename><forename type="middle">G</forename></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. of the 23rd ACM SIGSAC Conference on Computer and Communications Security (CCS &apos;16</title>
		<meeting>of the 23rd ACM SIGSAC Conference on Computer and Communications Security (CCS &apos;16</meeting>
		<imprint>
			<date type="published" when="2016" />
			<biblScope unit="page" from="1480" to="1491" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b1">
	<monogr>
		<title level="m" type="main">KEX) Method Updates and Recommendations for Secure Shell (SSH)</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Baushke</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Key Exchange</surname></persName>
		</author>
		<ptr target="https://tools.ietf.org/id/draft-ietf-curdle-ssh-kex-sha2-09.html" />
		<imprint>
			<date type="published" when="2017" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b2">
	<analytic>
		<title level="a" type="main">Botnets and Internet of Things Security</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Bertino</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">E</forename><surname>And Islam</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">N</forename></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Computer</title>
		<imprint>
			<biblScope unit="volume">50</biblScope>
			<biblScope unit="page" from="76" to="79" />
			<date type="published" when="2017" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b3">
	<analytic>
		<title level="a" type="main">Mapping Internet Sensors with Probe Response Attacks</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Bethencourt</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Franklin</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>And</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Vernon</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. of the 14th USENIX Security Symposium (USENIX&apos;05</title>
		<meeting>of the 14th USENIX Security Symposium (USENIX&apos;05</meeting>
		<imprint>
			<date type="published" when="2005" />
			<biblScope unit="page" from="193" to="208" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b4">
	<monogr>
		<title level="m" type="main">Breaking Honeypots for Fun and Profit</title>
		<ptr target="https://www.blackhat.com/us-15/briefings.html#breaking-honeypots-for-fun-and-profit" />
		<imprint>
			<date type="published" when="2015" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b5">
	<analytic>
		<title level="a" type="main">Towards Automatic Discovery of Deviations in Binary Implementations with Applications to Error Detection and Fingerprint Generation</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Brumley</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Caballero</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Liang</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Z</forename><surname>Newsome</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>And</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Song</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. of the 16th USENIX Security Symposium (USENIX &apos;07</title>
		<meeting>of the 16th USENIX Security Symposium (USENIX &apos;07</meeting>
		<imprint>
			<date type="published" when="2007" />
			<biblScope unit="page" from="213" to="228" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b6">
	<analytic>
		<title level="a" type="main">Prospex: Protocol specification extraction</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Comparetti</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><forename type="middle">M</forename><surname>Wondracek</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">G</forename><surname>Kruegel</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><surname>And</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Kirda</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">E</forename></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. of the 30th IEEE Symposium on Security and Privacy (S&amp;P &apos;09</title>
		<meeting>of the 30th IEEE Symposium on Security and Privacy (S&amp;P &apos;09</meeting>
		<imprint>
			<date type="published" when="2009" />
			<biblScope unit="page" from="110" to="125" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b7">
	<monogr>
		<title level="m" type="main">A Multi-Honeypot Platform</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Deutsche</forename><surname>Telekom</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><forename type="middle">G</forename><surname>T-Pot</surname></persName>
		</author>
		<ptr target="http://dtag-dev-sec.github.io/mediator/feature/2015/03/17/concept.html" />
		<imprint>
			<date type="published" when="2015" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b8">
	<monogr>
		<title/>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Deutsche</forename><surname>Telekom</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><forename type="middle">G</forename></persName>
		</author>
		<ptr target="http://dtag-dev-sec.github.io/mediator/feature/2016/03/11/t-pot-16.03.html" />
		<imprint>
			<date type="published" when="2016" />
		</imprint>
	</monogr>
<note type="report_type">T-Pot 16.03 -Enhanced MultiHoneypot Platform</note>
</biblStruct>

<biblStruct xml:id="b9">
	<monogr>
				<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Dns-Oarc</forename></persName>
		</author>
		<ptr target="https://www.dns-oarc.net/oarc/services/dontprobe" />
		<title level="m">Don&apos;t Probe List</title>
		<imprint>
			<date type="published" when="2018" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b10">
	<analytic>
		<title level="a" type="main">NoSEBrEaK -Attacking Honeynets</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Dornseif</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Holz</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><surname>And</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Klein</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. of the 5th Annual IEEE SMC Information Assurance Workshop</title>
		<meeting>of the 5th Annual IEEE SMC Information Assurance Workshop</meeting>
		<imprint>
			<date type="published" when="2004" />
			<biblScope unit="page" from="123" to="129" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b11">
	<analytic>
		<title level="a" type="main">A Search Engine Backed by InternetWide Scanning</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Durumeric</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Z</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Adrian</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Mirian</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Bailey</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>And</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Halderman</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><forename type="middle">A</forename></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. of the 22nd ACM SIGSAC Conference on Computer and Communications Security (CCS &apos;15</title>
		<meeting>of the 22nd ACM SIGSAC Conference on Computer and Communications Security (CCS &apos;15</meeting>
		<imprint>
			<date type="published" when="2015" />
			<biblScope unit="page" from="542" to="553" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b12">
	<analytic>
		<title level="a" type="main">Fast Internet-wide Scanning and Its Security Applications</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Durumeric</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Z</forename><surname>Wustrow</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">E</forename><surname>And</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Halderman</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><forename type="middle">A</forename><surname>Zmap</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. of the 22nd USENIX Security Symposium (USENIX &apos;13</title>
		<meeting>of the 22nd USENIX Security Symposium (USENIX &apos;13</meeting>
		<imprint>
			<date type="published" when="2013" />
			<biblScope unit="page" from="605" to="619" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b13">
	<analytic>
		<title level="a" type="main">Characterizing Industrial Control System Devices on the Internet</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Feng</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">X</forename><surname>Li</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Q</forename><surname>And</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Wang</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">H</forename></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. of the 24th IEEE International Conference on Network Protocols (ICNP &apos;16</title>
		<meeting>of the 24th IEEE International Conference on Network Protocols (ICNP &apos;16</meeting>
		<imprint>
			<date type="published" when="2016" />
			<biblScope unit="page" from="1" to="10" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b14">
	<monogr>
		<title/>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Fielding</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Gettys</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Mogul</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Frystyk</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">H</forename><surname>Mas-Inter</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">L</forename><surname>Leach</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><surname>And</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Berners-Lee</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename></persName>
		</author>
		<idno>Protocol -HTTP/1.1</idno>
		<imprint>
			<date type="published" when="1999" />
		</imprint>
	</monogr>
<note type="report_type">RFC 2616 -Hypertext Transfer</note>
</biblStruct>

<biblStruct xml:id="b15">
	<analytic>
		<title level="a" type="main">On Recognizing Virtual Honeypots and Countermeasures</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">F</forename><forename type="middle">U</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">X</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Y</forename><forename type="middle">U</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">W</forename><surname>Cheng</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Tan</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">X</forename><surname>Streff</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">K</forename><surname>And</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Gra-Ham</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. of the 2nd IEEE International Symposium on Dependable</title>
		<meeting>of the 2nd IEEE International Symposium on Dependable</meeting>
		<imprint>
			<date type="published" when="2006" />
			<biblScope unit="page" from="211" to="218" />
		</imprint>
	</monogr>
	<note>Autonomic and Secure Computing (DASC &apos;06</note>
</biblStruct>

<biblStruct xml:id="b16">
	<analytic>
		<title level="a" type="main">A deeper understanding of SSH: Results from Internet-wide scans</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Gasser</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">O</forename><surname>Holz</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>And</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Carle</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">G</forename></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. of the Network Operations and Management Symposium (NOMS &apos;14</title>
		<meeting>of the Network Operations and Management Symposium (NOMS &apos;14</meeting>
		<imprint>
			<date type="published" when="2014" />
			<biblScope unit="page" from="1" to="9" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b17">
	<monogr>
				<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Goland</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Y</forename><surname>Whitehead</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">E</forename><surname>Faizi</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Carter</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>And</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Jensen</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename></persName>
		</author>
		<title level="m">RFC 2518 -HTTP Extensions for Distributed Authoring -WEBDAV</title>
		<imprint>
			<date type="published" when="1999" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b18">
	<monogr>
		<title level="m" type="main">Proactive Detection of Network Security Incidents</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Grudziecki</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><surname>Jacewicz</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><surname>Juszczyk</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">L</forename><surname>Kijewski</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><surname>And</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Pawlinski</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename></persName>
		</author>
		<ptr target="https://www.enisa.europa.eu/activities/cert/support/proactive-detection/proactive-detection-report" />
		<imprint>
			<date type="published" when="2011" />
		</imprint>
	</monogr>
<note type="report_type">Tech. rep.</note>
</biblStruct>

<biblStruct xml:id="b19">
	<analytic>
		<title level="a" type="main">Detecting Honeypots and Other Suspicious Environments</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Holz</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><surname>And</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Raynal</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">F</forename></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. of the 6th Annual IEEE System, Man and Cybernetics Information Assurance Workshop (SMC &apos;05</title>
		<meeting>of the 6th Annual IEEE System, Man and Cybernetics Information Assurance Workshop (SMC &apos;05</meeting>
		<imprint>
			<date type="published" when="2005" />
			<biblScope unit="page" from="29" to="36" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b20">
	<analytic>
		<title/>
		<ptr target="https://www.ietf.org/assignments/telnet-options/" />
	</analytic>
	<monogr>
		<title level="j">IETF. Telnet Options</title>
		<imprint>
			<date type="published" when="2011" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b21">
	<monogr>
		<title/>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Kippo</forename><surname>Honeypot</surname></persName>
		</author>
		<ptr target="https://github.com/desaster/kippo" />
		<imprint>
			<date type="published" when="2015" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b22">
	<monogr>
		<title level="m" type="main">Honeypot for the SSH Service</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Kojoney</forename></persName>
		</author>
		<ptr target="https://github.com/madirish/kojoney2" />
		<imprint>
			<date type="published" when="2015" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b23">
	<analytic>
		<title level="a" type="main">Anti-honeypot Technology</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Krawetz</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">N</forename></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE Security &amp; Privacy Magazine</title>
		<imprint>
			<biblScope unit="volume">2</biblScope>
			<biblScope unit="page" from="76" to="79" />
			<date type="published" when="2004" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b24">
	<monogr>
		<title level="m" type="main">RFC 4250 -The Secure Shell (SSH) Protocol Assigned Numbers</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Lehtinen</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>And</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Lonvick</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename></persName>
		</author>
		<imprint>
			<date type="published" when="2006" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b25">
	<monogr>
		<title level="m" type="main">Nmap Network Scanning: The Official Nmap Project Guide to Network Discovery and Security Scanning</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Lyon</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">G</forename><forename type="middle">F</forename></persName>
		</author>
		<imprint>
			<date type="published" when="2009" />
			<pubPlace>USA</pubPlace>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b26">
	<analytic>
		<title level="a" type="main">An Efficient Clustering Scheme to Exploit Hierarchical Data in Network Traffic Analysis</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Mahmood</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><forename type="middle">N</forename><surname>Leckie</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><surname>And</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Udaya</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE Transactions on Knowledge and Data Engineering</title>
		<imprint>
			<biblScope unit="volume">20</biblScope>
			<biblScope unit="page" from="752" to="767" />
			<date type="published" when="2008" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b27">
	<monogr>
		<title level="m" type="main">Detecting Kippo SSH Honeypots, Bypassing Patches, and All That Jazz</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Morris</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename></persName>
		</author>
		<ptr target="https://www.redpacketsecurity.com/problems-i-have-found-with-kippo-honeypot/" />
		<imprint>
			<date type="published" when="2014" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b28">
	<analytic>
		<title level="a" type="main">Network Based Detection of Virtual Environments and Low Interaction Honeypots Network Based Detection of Virtual Environments and Low Interaction Honeypots</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Mukkamala</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Yendrapalli</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">K</forename><surname>Basnet</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Shankarapani</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><forename type="middle">K</forename><surname>And</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Sung</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><forename type="middle">H</forename></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. of the Information Assurance and Security Workshop (IAW &apos;07</title>
		<meeting>of the Information Assurance and Security Workshop (IAW &apos;07</meeting>
		<imprint>
			<date type="published" when="2007" />
			<biblScope unit="page" from="92" to="98" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b29">
	<monogr>
		<title/>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Oosterhof</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Cowrie</surname></persName>
		</author>
		<ptr target="https://github.com/micheloosterhof/cowrie" />
		<imprint>
			<date type="published" when="2016" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b30">
	<monogr>
		<title level="m" type="main">Implications of using clear padding instead of random padding</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Openssh</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2017" />
		</imprint>
	</monogr>
	<note>Private communication</note>
</biblStruct>

<biblStruct xml:id="b31">
	<analytic>
		<title level="a" type="main">A Virtual Honeypot Daemon</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Provos</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">N</forename><surname>Honeyd</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. of the 12th USENIX Security Symposium (USENIX &apos;03</title>
		<meeting>of the 12th USENIX Security Symposium (USENIX &apos;03</meeting>
		<imprint>
			<date type="published" when="2003" />
			<biblScope unit="page" from="1" to="7" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b32">
	<monogr>
		<title level="m" type="main">Kippo Users Beware: Another Fingerprinting Trick</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Sans</forename><surname>Technology Institute</surname></persName>
		</author>
		<ptr target="https://isc.sans.edu/forums/diary/Kippo+Users+Beware+Another+fingerprinting+trick/18119/" />
		<imprint>
			<date type="published" when="2014" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b33">
	<monogr>
		<title/>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Shodan</forename><surname>Shodan -Honeyscore</surname></persName>
		</author>
		<ptr target="https://honeyscore.shodan.io/" />
		<imprint>
			<date type="published" when="2017" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b34">
	<monogr>
		<title level="m" type="main">OpenSSH Honeypot (sshd-honeypot)</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Vetterl</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename></persName>
		</author>
		<ptr target="https://github.com/amv42/sshd-honeypot" />
		<imprint>
			<date type="published" when="2018" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b35">
	<analytic>
		<title level="a" type="main">Automatic Network Protocol Analysis</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Wondracek</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">G</forename><surname>And</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Comparetti</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. of the 16th Annual Network &amp; Distributed System Security Symposium (NDSS &apos;08</title>
		<meeting>of the 16th Annual Network &amp; Distributed System Security Symposium (NDSS &apos;08</meeting>
		<imprint>
			<date type="published" when="2008" />
			<biblScope unit="page" from="1" to="18" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b36">
	<analytic>
		<title level="a" type="main">DNS for massive-scale command and control</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">X</forename><forename type="middle">U</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">K</forename><surname>Butler</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><surname>Saha</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>And</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Yao</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><forename type="middle">D</forename></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE Transactions on Dependable and Secure Computing</title>
		<imprint>
			<biblScope unit="volume">10</biblScope>
			<biblScope unit="page" from="143" to="153" />
			<date type="published" when="2013" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b37">
	<analytic>
		<title level="a" type="main">AutoProbe: Towards Automatic Active Malicious Server Probing Using Dynamic Binary Analysis</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">X</forename><forename type="middle">U</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Z</forename><surname>Nappa</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Baykov</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Yang</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">G</forename><surname>Caballero</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>And</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">G</forename><forename type="middle">U</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">G</forename></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. of the 21st ACM SIGSAC Conference on Computer and Communications Security (CCS &apos;14</title>
		<meeting>of the 21st ACM SIGSAC Conference on Computer and Communications Security (CCS &apos;14</meeting>
		<imprint>
			<date type="published" when="2014" />
			<biblScope unit="page" from="179" to="190" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b38">
	<analytic>
		<title level="a" type="main">An Architecture for Generating Semantics-aware Signatures</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Yegneswaran</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">V</forename><surname>Giffin</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Barford</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><surname>And</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Jha</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. of the 14th USENIX Security Symposium (USENIX &apos;05</title>
		<meeting>of the 14th USENIX Security Symposium (USENIX &apos;05</meeting>
		<imprint>
			<date type="published" when="2005" />
			<biblScope unit="page" from="97" to="112" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b39">
	<analytic>
		<title level="a" type="main">Honeypot-Aware Advanced Botnet Construction and Maintenance</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Zou</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><surname>And</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Cunningham</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. of the 36th Annual IEEE/IFIP International Conference on Dependable Systems and Networks (DSN &apos;06</title>
		<meeting>of the 36th Annual IEEE/IFIP International Conference on Dependable Systems and Networks (DSN &apos;06</meeting>
		<imprint>
			<date type="published" when="2006" />
			<biblScope unit="page" from="199" to="208" />
		</imprint>
	</monogr>
</biblStruct>

				</listBibl>
			</div>
		</back>
	</text>
</TEI>
