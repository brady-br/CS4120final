<?xml version="1.0" encoding="UTF-8"?>
<TEI xmlns="http://www.tei-c.org/ns/1.0" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
xsi:schemaLocation="http://www.tei-c.org/ns/1.0 /Users/atharsefid/Desktop/grobid-0.5.3/grobid-home/schemas/xsd/Grobid.xsd"
 xmlns:xlink="http://www.w3.org/1999/xlink">
	<teiHeader xml:lang="en">
		<encodingDesc>
			<appInfo>
				<application version="0.5.3" ident="GROBID" when="2020-09-29T02:01+0000">
					<ref target="https://github.com/kermitt2/grobid">GROBID - A machine learning software for extracting information from scholarly documents</ref>
				</application>
			</appInfo>
		</encodingDesc>
		<fileDesc>
			<titleStmt>
				<title level="a" type="main">Security Fusion: A New Security Architecture for Resource-Constrained Environments</title>
			</titleStmt>
			<publicationStmt>
				<publisher/>
				<availability status="unknown"><licence/></availability>
			</publicationStmt>
			<sourceDesc>
				<biblStruct>
					<analytic>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Suku</forename><surname>Nair</surname></persName>
							<affiliation key="aff0">
								<orgName type="institution">HACNET Labs Computer Science and Engineering Southern Methodist University</orgName>
							</affiliation>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Subil</forename><surname>Abraham</surname></persName>
							<affiliation key="aff0">
								<orgName type="institution">HACNET Labs Computer Science and Engineering Southern Methodist University</orgName>
							</affiliation>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Omar</forename><surname>Al</surname></persName>
							<affiliation key="aff0">
								<orgName type="institution">HACNET Labs Computer Science and Engineering Southern Methodist University</orgName>
							</affiliation>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Ibrahim</forename></persName>
							<affiliation key="aff0">
								<orgName type="institution">HACNET Labs Computer Science and Engineering Southern Methodist University</orgName>
							</affiliation>
						</author>
						<title level="a" type="main">Security Fusion: A New Security Architecture for Resource-Constrained Environments</title>
					</analytic>
					<monogr>
						<imprint>
							<date/>
						</imprint>
					</monogr>
				</biblStruct>
			</sourceDesc>
		</fileDesc>
		<profileDesc>
			<abstract>
				<p>There is a huge demand for wireless sensors and RFID tags for remote surveillance and tracking. However, in order for such technologies to gain wide acceptance in industry, there needs to be strong security integrated into them. Traditional cryptographic schemes are infeasible due to hardware, computation, and power constraints. To that end, we introduce a new security paradigm, namely security fusion. In this approach, strong security properties are synthesized from weaker point-to-point properties , thereby minimizing the resource requirements at each node without compromising the system-level security. In this paper, we describe the concept of security fusion and give a motivation example using finite state machines.</p>
			</abstract>
		</profileDesc>
	</teiHeader>
	<text xml:lang="en">
		<body>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="1">Introduction</head><p>Implementing security in sensors and RFID have posed great challenges given the severe limitations in processing power, memory and computational cycles. For instance, a passive RFID tag that complies with the EPC C1G2 standard <ref type="bibr" target="#b0">[1]</ref> has a baseband of 7500 Gate Equivalence (GE) out of which 200-2000 gates are reserved for security functionalities <ref type="bibr" target="#b13">[14]</ref>  <ref type="bibr" target="#b15">[16]</ref>. The chip area for such tags is approximately 0.8mm 2 and the power consumption is roughly 30 µW with EEPROM programming <ref type="bibr" target="#b7">[8]</ref>. Wireless sensors are also limited in processing speed, storage capacity and power. Popular sensor devices have RAM sizes ranging from 4 KB on the Mica2 platform <ref type="bibr" target="#b3">[4]</ref> to 10KB on the TelosB platform <ref type="bibr">[5]</ref>. The storage capacity is usually between 4KB and 512KB and may come incorporated with Bluetooth, Chipcorn CC100, or IEEE 802.15.4 compliant transceivers. Today, devices such as micro-sensors and nano-sensors are increasing in popularity over conventional sensors. These sensors are known for their extremely small size, low cost, and high sensitivity. Therefore, supporting cryptography has become a perennial problem given these characteristics. <ref type="table" target="#tab_0">Table 1</ref> (ref. <ref type="bibr" target="#b14">[15]</ref>) provides a comparison between various cryptographic algorithms with respect to the number of cycles, gates, and average power consumption. Generally speaking, the complexity involved with traditional cryptography is formidable for low-cost sensors and RFID. Despite Moore's Law, sensors and RFID will remain resource-constrained because of their design. On top of that, new advancements in process technologies will be insufficient for tighter constraints in the new generations of these devices. On the other extreme, lightweight cryptographic algorithms <ref type="bibr" target="#b5">[7]</ref> [10] <ref type="bibr" target="#b10">[11]</ref>  <ref type="bibr" target="#b14">[15]</ref> are also undesirable because of their weak resistance to cryptanalysis and other attacks. Consequently, there has always been this tradeoff between the cryptographic strength and the resource requirements of the device. This tradeoff is quite natural when using a point-to-point security model. In other words, in a point-to-point security model, system security is always constrained by the device capabilities, and depending on the application, it can be overkill to include heavy duty encryption.</p><p>In this paper, we describe a new paradigm in security for resource-constrained environments. Rather than lending to traditional point-to-point approaches, the goal here is to focus on aggregating lightweight security properties from multiple nodes to build a strong in-network security platform. We coin the term security fusion to refer to this concept of aggregating less stringent pointto-point security properties between nodes to construct strong system-level security properties. The principle of the security fusion approach is that nodes do not provide all the protection by themselves, since they only implement a simple lightweight primitive, but unlike traditional schemes, these primitives are fusible to provide greater security, much like the thin strands of a thick bulk rope.</p><p>Security fusion is suitable for aggregation-based environments with large numbers of communicating nodes. Here, we mention a few applications in real-time systems that satisfy these characteristics.</p><p>• Low-cost RFID: Security has become a rising concern for RFID mainly because scanning and replicating tags require little money or expertise. While cryptographic RFID purports to offer seemingly strong protection, they are too expensive to be used in large quantities. To overcome factors like power budget, computational latency, and cost, security fusion enables simple mechanisms to be incorporated in RFID tags, which can be consolidated quickly by the middleware. With multi-tag RFID systems <ref type="bibr" target="#b1">[2]</ref>, security fusion becomes more effective.</p><p>• Sensor networks: Sensor networks consist of autonomous nodes that collectively obtain measurements from the environment to improve systemlevel decisions. Due to the aggregate nature of data in sensor networks, it is natural to define security through a fusion model that protects the monitoring, tracking, and controlling functions of an application. Security fusion has a lot of potential in sensor networks. Using security fusion, it is possible to collate multiple sensor read-outs to reach a globally authentic decision.</p><p>• Embedded systems: Another potential application for security fusion is to preserve the componentlevel integrity of embedded systems. For instance, recent generations of smart phones consist of various interconnected components such as Bluetooth radio, WiFi radio, flash memory, and Codec chip. These components are manufactured by different suppliers and then integrated into a single platform.</p><p>In the event of counterfeiting, non-genuine components can be detected through security fusion using an aggregate verification check of the platform.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2">Previous Work</head><p>There are several topics which span the discussion on previous work. Here we briefly review some of the work in securing resource-constrained environments. A couple of security architectures have been proposed to protect sensor networks from various attacks. Perrig et al. <ref type="bibr" target="#b10">[11]</ref> introduced an architecture called SPINS which consists of two building blocks: SNEP -a security protocol that employs symmetric cryptography using RC5 for encryption and Message Authentication Code (MAC) for integrity, as well as µTESLA -which provides authentication for data broadcast. The SNEP protocol is designed for resource-constrained sensor networks. To encrypt messages in the SNEP protocol, each sensor node shares a master key with a base station, from which it derives one-time encryption keys to be fed to RC5. The other building block of SPIN, µTESLA, provides authenticated broadcast for sensor networks. µTESLA was designed based on the standard TESLA protocol, but is developed to address limited computing environments.</p><p>Another security architecture that has recieved a swirl of attention in the past few years is TinySec. TinySec, proposed by Wagner et al. <ref type="bibr" target="#b8">[9]</ref>, is a link layer security architecture for micro-sensor networks which is tightly coupled with Berkeley TinyOS. The motivation for TinySec was to increase the network resistance against denial-of-service attacks by enabling early detection of unauthorized packets in the network, and preventing them when they are first injected as opposed to waiting for packets to route to the destination, thus saving energy and bandwidth.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3">Security Fusion</head><p>The general approach of the security fusion paradigm is to introduce lightweight elements at individual nodes that provide a strong aggregation of security. In this section, we describe some of the theoretical foundations for these concepts. We implicitly discuss the concept of security fusion in-line with the problems of achieving authentication in a decision system. However, the broad motivation of the framework extends to other security attributes including integrity and confidentiality. It is important to note that security fusion is not just simply a framework for secure consensus among the nodes, but rather it extends to a fusion of security as a property. In contrast to approaches like trusting crowded-sourced nodes, the intended objective is to develop a centeralized challengeresponse system that aggregates security characteristics from multiple nodes. In this section, we present an instantiation of the security fusion concept based on the model of a finite state machine. But first, we begin by describing the physical architecture and the attack model.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.1">Physical Architecture</head><p>The physical architecture of the security fusion framework consists of a typical centralized cluster-based network which is comprised of a large number of nodes ( <ref type="figure" target="#fig_0">Figure 1</ref>). Each node is equipped with three components: computation, storage, and a communication. The physical architecture also consists of a group of readers acting as cluster heads. The communication model is limited to a challenge-response interaction between the reader and the nodes. Thus, minimal communication is performed in these nodes and no delegation of messages is necessary. In the setup stage of the architecture, every node shares a secret key with the system. Further, the keys are assumed to be distributed to the nodes before deployment.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.2">Attack Model</head><p>In the security fusion architecture, we consider an attacker that is adaptive across space and time. Given these characteristics, we identified a number of attacks that can be launched:</p><p>• Malicious read: With a rogue reader in possession, an attacker may attempt to read out from a node. By interrogating repeatedly, he may collect packets to derive the secret.</p><p>• Brute-force attacks: An attacker may expand his attack by exhausting all possible responses for a given node. He may listen passively to a communication or actively read out to collect packets.</p><p>• Replay attacks: An attacker may collect packets and replay them back to the system at a later time. The success of the attack will depend on whether an attacker can replay the correct responses to fool the system.</p><p>• Physical capture: A determined attacker may go as far as capturing a node to extract the shared secret. We assume that compromised nodes will not reveal the secrets of other nodes as no two nodes will share the same secret.</p><p>• Replication: In an attempt to spoof the responses, an attacker may replicate a node and insert it into the network hoping to disrupt the system.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.3">Security Fusion Example: Finite State Machines</head><p>In this paper, we present an example of the fusion concept based on the model of a finite state machine. Finite state machines serve as a basic computational model that can help build systems with secure global properties. In this example, each node will have a unique state machine that is shared as a secret key with the backend system. The underlying state machine governs the output pattern of the node by following certain transition rules. Furthermore, each state of the machine is assigned a disjoint set of uniquely randomly-generated values, or pseudonyms, which represent the outputs. The input to the state machine is internally derived and can be used to express something like sensor detection results (as boolean logic detection/ non-detection).</p><p>In the execution of the state machine, the nodes communicate the boolean logic by randomly selecting a pseudonym from a set of possible pseudonyms assigned to the current state before the state machine transitions to the next state. Then, the outputs are sent to the backend system and decoded to reach a consensus. The security properties derived from this consensus are hard, meaning that they are non-trivially amplified with increased number of nodes.</p><p>In the analysis of the fusion methodology, the state machine stored in each node is deterministic. However by using the pseudonyms, the obfuscation converts the deterministic state machine (DFA) into one which is larger in size and non-deterministic (NFA) from an attacker's perspective. For a certain selection, we can show that the NFAs are cumbersome to reduce by minimization algorithms, especially when scaled to a large number of nodes. These non-deterministic properties are collated to build a strong fusion property for security.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.4">Description of the State Machine</head><p>A state machine can be described by "transition" and "output" rules. Transition rules define the mappings from the current state to the next state given the input value. Output rules define possible values emitted by a node for a given state and transition. Let us assume we have a state machine with n states (s 1 , s 2 , ...s n ). Since we are considering a state machine with a single-bit input, we have two transitions per state: "0" and "1".</p><p>In the following, we describe the transition and output rules using a Mealy model <ref type="bibr" target="#b4">[6]</ref>. Transition rules: (Current state, Input) → Next state</p><formula xml:id="formula_0">• (s i , 0) → s j • (s i , 1) → s v , where (0 ≤ i, j, v ≤ n)</formula><p>Output rules: (Current state, Input) → Output</p><formula xml:id="formula_1">• (s i , 0) → k j • (s i , 1) → k v , where k j 񮽙 = k v</formula></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Figure 2: State diagram</head><p>Consider assigning k unique pseudonyms to each state in the state machine, of which p(1 ≤ p ≤ k) pseudonyms are used to represent a transition on (0) and q(q = k − p) pseudonyms are used to represent a transition on (1). In the execution of the state machine, a node randomly selects a pseudonym from either set p or q assigned to the current state. Then it transmits the pseudonym and transitions to the next state using the transition rules. As an example, consider a 3-state finite state machine 1. n=3 {s 1 , s 2 , s 3 } 2. k=3 [Each state is assigned a set of 3 numbers of which p(1 &lt;= p &lt; k) numbers may be used to represent (0) and q = k − p numbers may be used to represent a (1).]</p><p>3. The total set of numbers available for the 3-finite state machine = nk = 9</p><p>4. Each state {s 1 , s 2 , s 3 } will have k=3 numbers assigned to it. <ref type="figure">Figure 2</ref> illustrates the state diagram and <ref type="table" target="#tab_1">Table 2</ref> shows an example of a pseudonym assignment for the state diagram. In the next section, we describe the protocol and authentication procedure using the state machine model. </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.5">Security Protocol</head><p>In the security protocol, each node is associated with a unique state machine which is shared as a secret key with the backend system. After each interrogation from the reader, nodes may change their states according to the transition rules defined prior to deployment. The reader verifies the legitimacy of a node by checking the expected current state and confirming the correct application of the rules. A basic protocol for this interaction is depicted below.</p><p>Denote N: node, R: reader It should be noted that even though the values read from each node are similar to a point-to-point security channel, no security properties are derived from just one value. Rather, a large number of the read values are collated to derive the security fusion properties.</p><p>In order to properly authenticate a node, the backend system needs to maintain a copy of the state machines associated with all the nodes in the network. These state machines are indexed by the corresponding node id. When interrogated by a reader, a node responds with a pseudonym and possibly with its id. This value of the pseudonym depends on the state machine rules defined prior to deployment. Since the system can obtain the node's state and the pseudonyms assigned for that state, it could simply authenticate a node by the pseudonym. The backend system can also deduce the original value of the node using the mapping between the pseudonyms and the actual information. After getting the response, the system will also update its copy of the state machine corresponding to that node with the new state value. In the back-end server, the system assigns a unique node id and stores flag bits to track the current state of the node. For every state and machine input, the server also stores the next state and pseudonym set. Whenever the server receives a response, it checks if the value matches any of the elements in the pseudonym set of the node's current execution. Otherwise, the response is rejected.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.6">State Machine Selection</head><p>Because these state machines vary in their security strength, a stringent criteria is needed to select machines with strong properties. In this section, we describe the criteria for selecting state machines to provide strong protection for the overall architecture. The selection is based on the following factors:</p><p>1. State reachability: Here we mean complete reachability in which every state should have a path to every other state through one or more transitions. From a security perspective, a machine with unreachable states is analogous to a secret key with unused bits. Therefore, any state machine with unreachable states or with a potential of being unreachable should be discarded after a number of transitions.</p><p>2. State complexity: The generated state machine is stored as a deterministic automaton. Using statistical properties, an attacker can only simulate a nondeterministic version of the machine. Converting a non-deterministic machine to deterministic may lead to exponential blow up in the number of states. The explosion in state space does not occur for all non-deterministic machines. Therefore, choosing structures that lead to explotion in the state space is the key for increasing the complexity. In <ref type="bibr" target="#b12">[13]</ref>, Sutner proposed a class of non-deterministic machines that satisfy the desired property.</p><p>3. Pseudonym randomness: Pseudonyms need to be cryptographically secure so that an adversary cannot predict the values. Since the numbers are generated prior to assignment, they can be pre-computed using crypto classes of PRNG algorithms. These algorithms either use stream or block ciphers. Examples of current implementations include Blum Blum Shub, ANSI X9.17, and CryptGenRandom.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.">Pattern randomness:</head><p>Pattern randomness highly depends on the selection randomness of the pseudonyms in every state. We propose to use different randomness tests to choose machines with higher output distribution. Using a black box approach, a random input stream of 1's and 0's (which can be crypto generated) is produced to evaluate the distribution of the pseudonyms generated by the state machine. A basic statistical test is to analyze the frequency of the outputs to measure the distributed equiprobability. Other tests based on chisquare <ref type="bibr" target="#b2">[3]</ref>, such as serial and poker tests, may be conducted. These tests evaluate the frequency for a sequence of numbers of some length, e.g. sequence of every five numbers at a time.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.7">Security Analysis</head><p>In this section, we evaluate the state machine approach based on the attack model described previously in Section 3.2. Since the state machines do not reveal the actual state mappings, an attacker can only collect the pseudonyms assigned to the states. In other words, the pseudonyms are used to hide the internal state of the machine, so if an attacker is going to reconstruct the state machine, he will need to collect successive pseudonyms by observing the output pattern.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.7.1">State machine complexity</head><p>One simple way an attacker has of reconstructing the state machine is to treat every pseudonym as a state value. Based on that, the state machine constructed by the attacker is an NFA with nk states and nk 2 transitions for every node, where n is the number of states in the encoded machine and k is the number of pseudonyms assigned to each state. It can be shown from formal theory, that the NFA derived by the attacker is equivalent in behavior to the DFA encoded inside the node. Though an attacker is able to reconstruct a state machine to model the readout patterns, the size of the state machine constructed by the attacker is larger than the original machine (with nk states and nk 2 transitions for every node). This is an artifact of the non-determinism introduced by hiding the internal state of the machine. The node state machine is modeled by assigning the pseudonyms to a given pair of state and input, where as the state machine derived by the attacker is modeled by using the pseudonyms as the state values.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.7.2">State machine minimization</head><p>With a large number of nodes, the complexity for storing the NFAs is formidable for the attacker because it requires vast amount of memory and processing capabilities at his disposal. Therefore, in order to scale the attack, the attacker needs to resort to a minimization algorithm in order to reduce the size of the state machines produced by the NFAs. One of the classical algorithms to minimize these state machines is an algorithm proposed by Hopcroft's <ref type="bibr" target="#b11">[12]</ref>. Hopcroft's Algorithm is a minimization procedure which transforms a given state machine into an equivalent state machine with minimum number of states.</p><p>Based on Hopcroft's Algorithm, it takes mlog(m) steps to minimize a deterministic finite state machine (DFA) with m-states. Hence, if the state machine derived by the attacker was deterministic, it would take (nk)log(nk) steps to minimize it. However since the state machine derived by the attacker is non-deterministic, we cannot directly apply the algorithm. Instead, the attacker needs to convert the NFA to a DFA first before applying the algorithm. Unfortunately for the attacker, there exists some NFA that leads to a state blowup when converted to a DFA.</p><p>• NFA-DFA Blowup: Given a natural number m, there exists an m-state NFA whose minimal equivalent DFA has ≥ 2 m−1 states. This is a long-known result in automata theory and in our case, we have m = nk states. Because of the state blowup in the conversion, the overall problem becomes NP-hard <ref type="bibr" target="#b11">[12]</ref>  <ref type="bibr" target="#b12">[13]</ref>. That is, converting an NFA to a DFA can cause an exponential increase in the number of states which makes the problem of minimization NP-hard whenever you do not start with a DFA. In this scheme, we realize that not all NFAs will produce an exponential blowup. However, in the earlier subsection, we described a selection criteria required to guarantee this property. Based on this property, we can see that the security complexity is not simply a linear correlation of the number of states. Further, it is possible that an attacker handles state explosions for one or few NFAs, but in order to make the problem intractable for the attacker, the system needs to have a large number of nodes. Since the number of states at each node is small by design, an attacker may be able to exploit them, but a large number of them would be exponentially complex to reduce because of the security fusion property. The question as to how many nodes are needed to have a practical sense of security will depend on the underlying assumptions on the memory and computational resources available to the attacker and the size of the individual state machines.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4">Conclusion</head><p>In this paper, we have introduced the concept of security fusion, a new security architecture for resourceconstrained environments. Since standard cryptographic solutions are likely to be impractical for such an infrastructure, our architecture employs lightweight techniques to circumvent large-scale cloning and replay attacks for system-level protection. In this paper, we described a model based on finite state machines with some details on the architecture. Analysis of the security properties demonstrated that the security complexity is hard with respect to the number of states. These properties can be leveraged to build the theory and practice of security services in resource-constrained environments. For future work, we plan to extend the architecture and apply other fusion techniques for improved security properties and overall complexity.</p></div><figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_0"><head>Figure 1 :</head><label>1</label><figDesc>Figure 1: Physical architecture</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_1"><head>1</head><label></label><figDesc>. R → N: Send read query 2. N: Obtain &lt;bit value&gt; (0/1) 3. N → R: N moves to the next state based on &lt;bit value&gt; and outputs a pseudonym from set p or q 4. R resolves N's output and re-syncs</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_0" validated="true"><head>Table 1 : Cost analysis of various algorithms</head><label>1</label><figDesc></figDesc><table>Algorithm 
Key 
Bits 
Plaintext Cycles 
GE 
Power 
(µW ) 

AES 
128 
128 
1016 
3595 
8.15 

TEA 
128 
64 
64 
2355 
12.34 

SHA-1 
L 
192 
405 
4276 
26.73 

LFSR 
32 
64 
92 
685 
0.1582 

DES 
56 
64 
144 
2309 
2.14 

ECC 
113 
L 
195159 
10k 
L 

L denotes number of bits 

</table></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_1" validated="true"><head>Table 2 : Pseudonym assignment example</head><label>2</label><figDesc></figDesc><table>States 
p 
q 
Transition on 
0 

Transition on 
1 
s 1 
1 or 2 
3 

s 2 
4 
5 or 6 

s 3 
7 or 8 
9 

</table></figure>
		</body>
		<back>
			<div type="references">

				<listBibl>

<biblStruct xml:id="b0">
	<monogr>
		<title/>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Epc</forename><surname>Global</surname></persName>
		</author>
		<ptr target="http://www.epcglobalinc.org/home/" />
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b1">
	<analytic>
		<title level="a" type="main">The Practicality of Multi-Tag RFID Systems</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Bolotnyy</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">L</forename><surname>Krize</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>And Robins</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">G</forename></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. International Workshop on RFID Technology -Concepts, Applications, Challenges (IWRT)</title>
		<meeting>International Workshop on RFID Technology -Concepts, Applications, Challenges (IWRT)</meeting>
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b2">
	<analytic>
		<title level="a" type="main">The Use of Maximum Likelihood Estimates in X2 Tests for Goodness-of-Fit</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Chernoff</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">L</forename></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">The Annals of Mathematical Statistics</title>
		<imprint>
			<biblScope unit="volume">25</biblScope>
			<biblScope unit="page" from="579" to="586" />
			<date type="published" when="1954" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b3">
	<monogr>
		<title/>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Crossbow</forename><forename type="middle">Mica2</forename><surname>Datasheet</surname></persName>
		</author>
		<ptr target="http://www.xbow.com/" />
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b4">
	<monogr>
		<title level="m" type="main">Finite-State Models For Logical Machines</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Hennie</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">F</forename></persName>
		</author>
		<imprint>
			<date type="published" when="1968" />
			<publisher>John Wiley &amp; Sons</publisher>
			<pubPlace>New York, USA</pubPlace>
		</imprint>
	</monogr>
	<note>4th edition ed</note>
</biblStruct>

<biblStruct xml:id="b5">
	<monogr>
		<title/>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Huang</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><surname>And</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Chien</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">H</forename><surname>Security Of Ultra</surname></persName>
		</author>
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b6">
	<analytic>
		<title level="a" type="main">Lightweight RFID Authentication Protocols and Its Improvements</title>
	</analytic>
	<monogr>
		<title level="j">ACM SIGOPS Operating Systems Review</title>
		<imprint>
			<biblScope unit="page" from="83" to="86" />
			<publisher>ACM</publisher>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b7">
	<analytic>
		<title level="a" type="main">High Security FeRAM-Based EPC C1G2 UHF (860 MHz-960 MHz) Passive RFID Tag Chip</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Kang</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">H</forename><surname>Hong</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Song</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Y</forename><surname>Sung</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Choi</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">B</forename><surname>Chung</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>And</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Lee</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">ETRI Journal</title>
		<imprint>
			<biblScope unit="volume">30</biblScope>
			<biblScope unit="page" from="826" to="832" />
			<date type="published" when="2008" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b8">
	<analytic>
		<title level="a" type="main">TinySec: A Link Layer Security Architecture for Sensor Networks</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Karlof</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><surname>Sastry</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">N</forename><surname>And</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Wagner</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the Second ACM Conference on Embedded Networked Sensor Systems (SenSys)</title>
		<meeting>the Second ACM Conference on Embedded Networked Sensor Systems (SenSys)</meeting>
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b9">
	<monogr>
		<title/>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Needham</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>And</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Wheeler</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Extensions</surname></persName>
		</author>
		<imprint>
			<date type="published" when="1997" />
			<pubPlace>Cambridge University</pubPlace>
		</imprint>
	</monogr>
<note type="report_type">Tech. rep.</note>
</biblStruct>

<biblStruct xml:id="b10">
	<analytic>
		<title level="a" type="main">SPINS: Security Protocols For Sensor Networks</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Perrig</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Szewczyk</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Wen</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">V</forename><surname>Culler</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>And</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Tygar</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of Seventh Annual International Conference on Mobile Computing and Networkings</title>
		<meeting>Seventh Annual International Conference on Mobile Computing and Networkings</meeting>
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b11">
	<monogr>
		<title level="m" type="main">The Algorithm Design Manual</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Skiena</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename></persName>
		</author>
		<imprint>
			<date type="published" when="1998" />
			<publisher>SpringerVerlag</publisher>
			<pubPlace>New York</pubPlace>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b12">
	<analytic>
		<title level="a" type="main">The Size of Power Automata</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Sutner</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">K</forename></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Theoretical Computer Science</title>
		<imprint>
			<biblScope unit="volume">295</biblScope>
			<biblScope unit="page" from="371" to="386" />
			<date type="published" when="2003" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b13">
	<monogr>
				<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Wang</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C.-H</forename><surname>And</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Huang</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C.-W</forename><surname>Collaborative</surname></persName>
		</author>
		<title level="m">Network Security Platform in P2P Networks. NISS &apos;09. International Conference on</title>
		<imprint>
			<biblScope unit="page" from="1251" to="1256" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b14">
	<monogr>
		<title level="m" type="main">R&amp;D of Gen2 Tag with Enhanced Security Mechanism</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Wang</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename></persName>
		</author>
		<imprint>
			<date type="published" when="2009" />
		</imprint>
		<respStmt>
			<orgName>ID Lab</orgName>
		</respStmt>
	</monogr>
<note type="report_type">Tech. rep</note>
</biblStruct>

<biblStruct xml:id="b15">
	<analytic>
		<title level="a" type="main">TEA, a Tiny Encryption Algorithm</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Wheeler</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>And</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Needham</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Fast Software Encryption: Second International Workshop</title>
		<imprint>
			<biblScope unit="page">363366</biblScope>
		</imprint>
	</monogr>
</biblStruct>

				</listBibl>
			</div>
		</back>
	</text>
</TEI>
