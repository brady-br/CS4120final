<?xml version="1.0" encoding="UTF-8"?>
<TEI xmlns="http://www.tei-c.org/ns/1.0" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
xsi:schemaLocation="http://www.tei-c.org/ns/1.0 /Users/atharsefid/Desktop/grobid-0.5.3/grobid-home/schemas/xsd/Grobid.xsd"
 xmlns:xlink="http://www.w3.org/1999/xlink">
	<teiHeader xml:lang="en">
		<encodingDesc>
			<appInfo>
				<application version="0.5.3" ident="GROBID" when="2020-09-29T04:08+0000">
					<ref target="https://github.com/kermitt2/grobid">GROBID - A machine learning software for extracting information from scholarly documents</ref>
				</application>
			</appInfo>
		</encodingDesc>
		<fileDesc>
			<titleStmt>
				<title level="a" type="main">Certified Side Channels Certified Side Channels</title>
			</titleStmt>
			<publicationStmt>
				<publisher/>
				<availability status="unknown"><licence/></availability>
				<date>August 12-14, 2020</date>
			</publicationStmt>
			<sourceDesc>
				<biblStruct>
					<analytic>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Cesar</forename><forename type="middle">Pereida</forename><surname>García</surname></persName>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Ul</forename><surname>Sohaib</surname></persName>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Nicola</forename><surname>Hassan</surname></persName>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Iaroslav</forename><surname>Tuveri</surname></persName>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Gridin</surname></persName>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Cesar</forename><forename type="middle">Pereida</forename><surname>García</surname></persName>
							<affiliation key="aff3">
								<orgName type="institution">Tampere University</orgName>
								<address>
									<settlement>Tampere</settlement>
									<country key="FI">Finland</country>
								</address>
							</affiliation>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Sohaib Ul Hassan</surname></persName>
							<email>n.sohaibulhassan@tuni.fi</email>
							<affiliation key="aff3">
								<orgName type="institution">Tampere University</orgName>
								<address>
									<settlement>Tampere</settlement>
									<country key="FI">Finland</country>
								</address>
							</affiliation>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Nicola</forename><surname>Tuveri</surname></persName>
							<email>nicola.tuveri@tuni.fi</email>
							<affiliation key="aff3">
								<orgName type="institution">Tampere University</orgName>
								<address>
									<settlement>Tampere</settlement>
									<country key="FI">Finland</country>
								</address>
							</affiliation>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Iaroslav</forename><surname>Gridin</surname></persName>
							<email>iaroslav.gridin@tuni.fi</email>
							<affiliation key="aff3">
								<orgName type="institution">Tampere University</orgName>
								<address>
									<settlement>Tampere</settlement>
									<country key="FI">Finland</country>
								</address>
							</affiliation>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Alejandro</forename><surname>Cabrera Aldaya</surname></persName>
							<affiliation key="aff3">
								<orgName type="institution">Tampere University</orgName>
								<address>
									<settlement>Tampere</settlement>
									<country key="FI">Finland</country>
								</address>
							</affiliation>
							<affiliation key="aff4">
								<orgName type="institution">Universidad Tecnológica de la Habana (CUJAE)</orgName>
								<address>
									<settlement>Habana</settlement>
									<country key="CU">Cuba</country>
								</address>
							</affiliation>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Billy</forename><forename type="middle">Bob</forename><surname>Brumley</surname></persName>
							<email>billy.brumley@tuni.fi</email>
							<affiliation key="aff3">
								<orgName type="institution">Tampere University</orgName>
								<address>
									<settlement>Tampere</settlement>
									<country key="FI">Finland</country>
								</address>
							</affiliation>
						</author>
						<author>
							<affiliation key="aff0">
								<orgName type="institution">Tampere University</orgName>
								<address>
									<addrLine>Alejandro Cabrera Aldaya</addrLine>
								</address>
							</affiliation>
						</author>
						<author>
							<affiliation key="aff1">
								<orgName type="institution" key="instit1">Tampere University</orgName>
								<orgName type="institution" key="instit2">Universidad Tecnológica de la Habana</orgName>
								<address>
									<addrLine>Billy Bob Brumley</addrLine>
								</address>
							</affiliation>
						</author>
						<author>
							<affiliation key="aff2">
								<orgName type="institution">Tampere University</orgName>
							</affiliation>
						</author>
						<title level="a" type="main">Certified Side Channels Certified Side Channels</title>
					</analytic>
					<monogr>
						<title level="m">Proceedings of the 29th USENIX Security Symposium</title>
						<meeting>the 29th USENIX Security Symposium						</meeting>
						<imprint>
							<date type="published">August 12-14, 2020</date>
						</imprint>
					</monogr>
					<note>This paper is included in the Open access to the Proceedings of the 29th USENIX Security Symposium is sponsored by USENIX.</note>
				</biblStruct>
			</sourceDesc>
		</fileDesc>
		<profileDesc>
			<abstract>
				<p>We demonstrate that the format in which private keys are persisted impacts Side Channel Analysis (SCA) security. Surveying several widely deployed software libraries, we investigate the formats they support, how they parse these keys, and what runtime decisions they make. We uncover a combination of weaknesses and vulnerabilities, in extreme cases inducing completely disjoint multi-precision arithmetic stacks deep within the cryptosystem level for keys that otherwise seem logically equivalent. Exploiting these vulnerabilities, we design and implement key recovery attacks utilizing signals ranging from electromagnetic (EM) emanations, to granular microarchitecture cache timings, to coarse traditional wall clock timings.</p>
			</abstract>
		</profileDesc>
	</teiHeader>
	<text xml:lang="en">
		<body>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="1">Introduction</head><p>Academic SCA tends to focus on implementations of cryptographic primitives in isolation. With this view, the assumption is that any higher level protocol or system built upon implementations of these primitives will naturally benefit from SCA mitigations in place at lower levels.</p><p>Our work questions this assumption, and invalidates it with several concrete vulnerabilities and attacks against modern software libraries: we dub these Certified Side Channels, since the novel attack vector is deeply rooted in cryptography standards. For this vector, "certified" is in the certificate sense (e.g. X.509), not in the Common Criteria sense. Counter-intuitively, we demonstrate that the format in which keys are stored plays a significant role in real world SCA security. Detailed security recommendations for key persistence are scarce; e.g. FIPS 140-2 vaguely states "Cryptographic keys stored within a cryptographic module shall be stored either in plaintext form or encrypted form [. .] Documentation shall specify the key storage methods employed by a cryptographic module" <ref type="bibr">[1, 4.7.5]</ref>.</p><p>There are (at least) two high level dimensions at play regarding key formats as an SCA attack vector: (i) Among the multitude of standardized cryptographic key formats to choose from when persisting keys: which one to choose, and does the choice matter? Surprisingly, it does-we demonstrate different key formats trigger different behavior within software libraries, permeating all the way down to the low level arithmetic for the corresponding cryptographic primitive.</p><p>(ii) At the specification level, alongside required parameters, standardized key formats often contain optional parameters: does including or excluding optional parameters impact security? Surprisingly, it does. We demonstrate that omitting optional parameters can cause extremely different execution flows deep within a software library, and also that two keys seemingly mathematically identical at the specification level can be treated by a software library as inequivalent, again reaching very different arithmetic code deep within the library.</p><p>Furthermore, we demonstrate that key parsing in general is a lucrative SCA attack vector. This is due mostly to software engineering constraints. Complex libraries inevitably stray to convoluted data structures containing generous nesting levels to meet the demands of broad standardized cryptography. This is exacerbated by the natural urge to handle keys generically when faced with extremely diverse cryptographic standards spanning RSA, DSA, ECDSA, Ed25519, Ed448, GOST, SM2, etc. primitives. The motivation behind this generalization is to abstract away underlying cryptographic details from application developers linking against a library-more often than not, these developers are not cryptography experts. Nevertheless, we observe that when loading keys modern security libraries make varying design choices that ultimately impact SCA security. From the functionality perspective, these design choices are sensible; from the security perspective, we demonstrate they are often questionable.</p><p>Outline. Section 2 gives an overview of the related background and previous work. Section 3 discusses the vulnerabilities discovered as a result of our analysis, with microarchitecture SCA evaluations on OpenSSL RSA, DSA, and mbedTLS RSA. We also demonstrate end-to-end attacks on OpenSSL ECDSA using timing and EM side channels in Section 4. We</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>USENIX Association 29th USENIX Security Symposium 2021</head><p>conclude in Section 5.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2">Background</head></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.1">Public Key Cryptography</head><p>ECDSA. Denote an order-n generator G ∈ E of an elliptic curve group E with cardinality f n and n a large prime and f the small cofactor. The user's private key α is an integer uniformly chosen from {1 . . n − 1} and the corresponding public key is D = [α]G. With approved hash function Hash(), the ECDSA digital signature (r, s) on message m (denoting with h &lt; n the representation of Hash(m) as an integer) is</p><formula xml:id="formula_0">r = ([k]G) x mod n, s = k −1 (h + αr) mod n (1)</formula><p>where k is a nonce chosen uniformly from {1 . . n − 1}. RSA. According to the PKCS #1 v2.2 standard (RFC 8017 <ref type="bibr" target="#b56">[55]</ref>), an RSA private key consists of the eight parameters {N, e, p, q, d, d p , d q , i q } where all but the first two are secret, and N = pq for primes p, q. Public exponent e is usually small and the following holds:</p><formula xml:id="formula_1">d = e −1 mod lcm(p − 1, q − 1)<label>(2)</label></formula><p>In addition, Chinese Remainder Theorem (CRT) parameters are stored for speeding up RSA computations: </p><formula xml:id="formula_2">d</formula></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.2">Key Formats</head><p>Interoperability among different software and hardware platforms in handling keys and other cryptographic objects requires common standards to serialize and deserialize such objects. ASN.1 or Abstract Syntax Notation One is an interface description language to define data structures and their (de/)serialization, standardized <ref type="bibr" target="#b70">[69]</ref> jointly by ITU-T and ISO/IEC since 1984 and widely adopted. It supports several encoding rules, among which the Distinguished Encoding Rules (DER), a binary format ensuring uniqueness and concision, has been preferred for the representation of cryptographic objects. PEM (RFC 7468 <ref type="bibr" target="#b46">[45]</ref>) is a textual file format to store and trasmit cryptographic objects, widespread despite being originally developed as part of the now obsoleted IETF standards for Privacy-Enhanced Mail after which it is named. PEM uses base64 to encode the binary DER serialization of an object, providing some degree of human readability and support for text-based protocols like e-mail and HTTP(S). Object Identifiers. The ASN.1 syntax also defines an OBJECT IDENTIFIER primitive type which represents a globally unique identifier for an object. ITU-T and ISO jointly manage a decentralized hierarchical registry of object identifiers or OID s. The registry is organized as a tree structure, where every node is authoritative for its descendants, and decentralization is obtained delegating the authority on subtrees to entities such as countries and organizations. This mechanism solves the problem of assigning globally unique identifiers to entities to facilitate global communication.</p><p>RSA private keys. PKCS #1 (RFC 8017 <ref type="bibr" target="#b56">[55]</ref>) also defines the ASN.1 DER encoding for an RSA private key, defining an item for each of its eight parameters. As further discussed in Section 3.4, the standard does not strictly require implementations to include all the eight parameters during serialization, nor to invalidate the object during deserialization if one of the parameters is not included.</p><p>EC private keys. The ANSI X9.62 standard <ref type="bibr" target="#b52">[51]</ref> is the normative reference for the definition of the ECDSA cryptosystem and the encoding of ECDSA public keys, but omits a serialization for private keys. The SEC1 standard <ref type="bibr" target="#b1">[2]</ref> follows ANSI X9.62 for the public key ASN.1 and provides a DER encoding also for EC private keys, but allows generous variation as it seems to assume different encapsulating options depending on different protocols in which the EC private key can be used. Flexibility in the format brings complexity in the deserializer implementation, that needs to be stateful w.r.t. parsing of the container of the private key encoding and flexible enough to interoperate with other implementations and interpretations of the standards: this already suggests that the parsing stage shows potential as a lucrative SCA attack vector. The SEC1 ASN.1 notation for ECPrivateKey contains the private scalar as an octet string, an optional (depending on the container) ECDomainParameters field, and an optional bit string field to include the public part of the key pair. The ECDomainParameters can be null, if the curve parameters are specified in the container encapsulating the ECPrivateKey, or contain either an OID for a "named" curve, or a SpecifiedECDomain structure. The latter, simplifying, contains a description of the field over which the EC group is defined, the definition of the curve equation in terms of the coefficients of its Short Weierstrass form, an encoding of the EC base point, and its order n. Finally it can optionally contain a component to represent a small cofactor f as defined at the beginning of this section. In Section 3.1 we will further discuss about the security consequences caused in actual implementations by the logic required to support the cofactor as an optional field.</p><p>MSBLOB key format. MSBLOB is the OpenSSL implementation of Microsoft's private key BLOB format 1 supporting different cryptosystems, using custom defined structures and fields. DSS key BLOB uses an arbitrary structure, while RSA key BLOBs follows PKCS #1 with minor differences. To identify each cryptosystem, a "magic member" is used in the key BLOB structure-the member is the hexadecimal representation of the ASCII encoding of the cryptosystem name, e.g. "RSA1", "RSA2", "DSS1", "DSS2", etc., where the integer dictates if it is a public or a private key. Public and private key BLOBs are stored as binary files in little-endian order and by default the private key BLOBs are not encrypted-it is up to the developers to choose whether to encrypt the key. Microsoft created the public and private key BLOBs in order to support cryptographic service providers (CSP), i.e. third party cryptographic software modules. It is worth noting that both private and public BLOBs are independent from each other, thus allowing a CSP to only support and implement the desired format according to the cryptosystem in use, meaning that public keys can be computed on-demand using the private key BLOB information.</p><p>PVK key format. The PriVate Key (PVK) format is a Microsoft proprietary key format used in Windows supporting signature generation using both DSA and RSA private keys. Little information is available about this format but a key is typically composed of a header containing metadata, and a body containing a private key BLOB structure as per the previous description. Following the same idea as in the private key BLOB, the PVK header metadata contains the "magic" value 0xb0b5f11e 2 to uniquely identify this key format. Additionally, PVK's header contains metadata information for key password protection, preventing the storage of private key information in plain text. Unfortunately, PVK is an outdated format and it only supports RC4 encryption, moreover, in some cases PVK keys use a weakened encryption key to comply with the US export restrictions imposed during the 90's 3 .</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.3">Side-Channel Analysis</head><p>SCA is a cryptanalysis technique used to target software and hardware implementations of cryptographic primitives. The main goal of SCA is to expose hidden algorithm state by measuring variations in time, power consumption, electromagnetic radiation, temperature, and sound. These variations might leak data or metadata that allows the retrieval of confidential information such as private keys and passwords. The history of SCA is long and rich-from the military program called TEMPEST <ref type="bibr" target="#b31">[31]</ref> to current commodity PCs, SCA has deeply impacted security-critical systems and it has reached the most popular and widely used cryptosystems over the years such as AES, DSA, RSA, and ECC, implemented in the most widely used cryptographic libraries including OpenSSL, BoringSSL, LibreSSL, and mbedTLS. SCA can be broadly categorized (w.r.t. signal procurement techniques) in two specific research fields: hardware and software. Both fields have evolved and developed their own techniques, and the line separating them has blurred as research improves, and attacks become more complex. Nevertheless, the ultimate goal is still the same: extract confidential informa-tion from a device executing vulnerable cryptographic code. A brief overview follows.</p><p>Hardware. Ever since their inception, System-on-Chip (SoC) embedded devices have become passively ubiquitous in the form of mobile devices and IoT, performing security critical tasks over the Internet. Their basic building blocks-in terms of performing computations-are the CMOS transistors, drawing current during the switching activity to depict the behavior of logic gates. Power analysis attacks introduced by <ref type="bibr">Kocher et al. [49]</ref> rely on the fact that accumulated switching activity of these transistors influence the overall power fluctuations while secret data dependent computations take place on the processor and memory subsystems.</p><p>While power analysis is one way to perform SCA, devices may also leak sensitive information through other means such as EM <ref type="bibr" target="#b4">[5]</ref>, acoustic <ref type="bibr" target="#b34">[34]</ref>, and electric potential <ref type="bibr" target="#b36">[36]</ref>. In contrast to the power side channels which require physically tapping onto the power lines, EM and acoustic based SCA add a spatial dimension. There may be slight differences when it comes to acquiring and processing these signals, but in essence the concept is similar to traditional power analysis, hence the hardware based SCA techniques generally apply to all.</p><p>Over the years more powerful SCA techniques have emerged such as differential power analysis <ref type="bibr" target="#b50">[49]</ref>, correlation power analysis <ref type="bibr" target="#b18">[19]</ref>, template attacks <ref type="bibr" target="#b25">[25]</ref>, and horizontal attacks <ref type="bibr" target="#b11">[12]</ref>. Most of these techniques rely on statistical methods to find small secret data dependent leakages.</p><p>Traditionally, hardware SCA research mainly focuses on architecturally simpler devices such as smart cards and microcontrollers <ref type="bibr" target="#b53">[52,</ref><ref type="bibr" target="#b66">65,</ref><ref type="bibr" target="#b67">66]</ref>. Being simple here does not imply that developing and deploying such cryptosystems is simpler, rather in terms of their functionality and hardware architecture. Modern consumer electronics (e.g. smart phones) are more feature rich, containing SoC components, memory subsystems and multi-core processors with clock speeds in gigahertz. These devices are often running a full operating system (several in fact) making it possible to deploy software libraries such as OpenSSL. More recently, a new class of hardware side channel attacks on embedded, mobile devices and even PCs has emerged, targeting crypto software libraries such as OpenSSL <ref type="bibr" target="#b38">[38,</ref><ref type="bibr" target="#b51">50]</ref>, GnuPG <ref type="bibr" target="#b34">[34,</ref><ref type="bibr" target="#b35">35,</ref><ref type="bibr" target="#b36">36,</ref><ref type="bibr" target="#b37">37]</ref>, PolarSSL <ref type="bibr" target="#b29">[29]</ref>, Android's Bouncy Castle <ref type="bibr" target="#b12">[13]</ref>, and WolfSSL <ref type="bibr" target="#b69">[68]</ref>. They employ various signal processing tools to counter the noise induced by complex systems and microarchitectures. For further details, Tunstall <ref type="bibr" target="#b72">[71]</ref> present an elaborate discussion on hardware based SCA techniques, while Danger et al. <ref type="bibr" target="#b27">[27]</ref> and Abarzúa et al. <ref type="bibr" target="#b2">[3]</ref> sum up various SCA attacks and their countermeasures. Software. The widespread use of e-commerce and the need for security on the Internet sparked the development of cryptographic libraries such as OpenSSL. Researchers quickly began analyzing these libraries and it took a short time to find security flaws in these libraries. Impulsed by Kocher's work <ref type="bibr" target="#b49">[48]</ref>, SCA timing attacks quickly gained traction. By measuring the amount of time required to perform private key operations, the author demonstrated that it was feasible to find Diffie-Hellman exponents, factor RSA keys, and recover DSA keys. Later Brumley and Boneh <ref type="bibr" target="#b23">[23]</ref> demonstrated that it was possible to do the same but remotely, by measuring the response time from an OpenSSL-powered web server. Other TLS-level timing attacks include <ref type="bibr" target="#b48">[47]</ref> with a software target and <ref type="bibr" target="#b54">[53]</ref> with a hardware target.</p><p>As software SCA became more complex and sophisticated, a new subclass of attacks denominated "microarchitecture attacks" emerged. Typically, a modern CPU executes multiple programs either concurrently or via time-sharing, increasing the need to optimize resource utilization to obtain high performance. To achieve this goal, microarchitecture components try to predict future behavior and future resource usage based on past program states. Based on these observations, researchers <ref type="bibr" target="#b14">[15,</ref><ref type="bibr" target="#b61">60]</ref> discovered that some microarchitecture components-such as the memory subsystem-work wonderfully as communication channels. Due to their shared nature between programs, some of the microarchitecture components can be used to violate access control and achieve inter-process communication. Among these components, researchers noticed that the memory subsystem is arguably the easiest to exploit: by observing the memory footprint an attacker can leak algorithm state from an executing cryptographic library in order to obtain secret keys. Since the initial discovery, several SCA techniques have been developed to extract confidential data from different memory levels and under different threat models. Some of these techniques include FLUSH+ RELOAD <ref type="bibr" target="#b80">[78]</ref>, PRIME+PROBE <ref type="bibr" target="#b60">[59]</ref>, EVICT+TIME <ref type="bibr" target="#b60">[59]</ref>, and FLUSH+FLUSH <ref type="bibr" target="#b42">[42]</ref>. Moreover, recent research <ref type="bibr" target="#b8">[9,</ref><ref type="bibr" target="#b24">24,</ref><ref type="bibr" target="#b76">74]</ref> shows that most (if not all) microarchitecture components shared among programs are a security hazard since they can potentially be used as side-channels. Ge et al. <ref type="bibr" target="#b33">[33]</ref> provide a great overview on software SCA, including the types of channels, microarchitecture components, side-channel attacks, and mitigations.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.4">Lattice Attacks</head><p>In Section 4 we present two attacks against ECDSA signing that differ in SCA technique, but share a common pattern: (i) gathering several (r, s, m) tuples in a collection phase, using SCA to infer partial knowledge about the nonce used during signature generation; (ii) a recovery phase combines the collected tuples and the associated partial knowledge to retrieve the long-term secret key.</p><p>To achieve the latter, we recur to the common strategy of constructing hidden number problem (HNP) <ref type="bibr" target="#b17">[18]</ref> instances from the collected information, and then use lattice techniques to find the secret key. In this section we discuss the lattice technique used to recover the private keys.</p><p>We follow the formalization used in <ref type="bibr" target="#b62">[61]</ref>, which itself builds on the work by Nguyen and Shparlinski <ref type="bibr" target="#b58">[57,</ref><ref type="bibr" target="#b59">58]</ref>, that assumed a fixed amount of known bits (denoted ) for each nonce used in the lattice, but also includes the improvements by Benger et al. <ref type="bibr" target="#b13">[14]</ref>, using i and a i to represent, respectively, the amount of known bits and their value on a per-equation basis.</p><p>The collection phase of <ref type="bibr" target="#b62">[61]</ref> as well as our Section 4.2 attack recovers information regarding the LSBs of each nonce, hence it annotates the nonce associated with i-th equation as k i = W i b i + a i , with W i = 2 i , where i and a i are known, and since 0 &lt; k i &lt; n it follows that 0 ≤ b i ≤ n/W i . Denote x n modular reduction of x to the interval {0 . . n − 1} and |x| n to the interval {−(n − 1)/2 . .</p><formula xml:id="formula_3">(n − 1)/2}. Combin- ing (1), define (attacker-known) values t i = r i /(W i s i ) n andû andˆandû i = (a i − h i /s i )/W i n , then 0 ≤ αt i − ˆ u i n &lt; n/W i holds. Setting u i = ˆ u i + n/2W i we obtain v i = |αt i − u i | n ≤ n/2W i , i.e. integers λ i exist such that abs(αt i − u i − λ i n) ≤ n/2W i</formula><p>holds. Thus u i approximate αt i since they are closer than a uniformly random value from {1 . . n − 1}, leading to an instance of the HNP <ref type="bibr" target="#b17">[18]</ref>: recover α given many (t i , u i ) pairs.</p><p>Consider the rational d + 1-dimension lattice generated by the rows of the following matrix.</p><formula xml:id="formula_4">B =         2W 1 n 0 . . . . . . 0 0 2W 2 n . . . . . . . . . . . . . . . . . . 0 . . . 0 . . . 0 2W d n 0 2W 1 t 1 . . . . . . 2W d t d 1         Denoting x = (λ 1 , . . . , λ d , α), y = (2W 1 v 1 , . . . , 2W d v d , α), and u = (2W 1 u 1 , . . . , 2W d u d , 0)</formula><p>, then xB− u = y holds. Solving the Closest Vector Problem (CVP) with inputs B and u yields x, and hence the private key α. Finally, as in <ref type="bibr" target="#b62">[61]</ref>, we embed the CVP into a Shortest Vector Problem (SVP) using the classical strategy <ref type="bibr">[39, Sec. 3.4]</ref>, and employ an extended search space heuristic <ref type="bibr">[32, Sec. 5]</ref>.</p><p>The presence of outliers among the results of the collection phase usually has a detrimental effect on the chances of success of the lattice attack. The traditional solution is to oversample, filtering t &gt; d traces from the collection phase if d traces are required to embed enough leaked information in the lattice instance to solve the HNP. Indicating with e the amount of traces with errors in the filtered set of size t, picking a subset of size d uniformly at random, the probability for any such subset to be error-free isˆpisˆ isˆp</p><formula xml:id="formula_5">= t−e d t d .</formula><p>For typical values of {t, e, d}, ˆ p will be small. Viewing the process of randomly picking a subset and attempting to solve the resulting lattice instance as a Bernoulli trial, the number of expected trials before first success is 1/ ˆ p. So an attacker can compensate for smalî p by running j = 1/ ˆ p jobs in parallel.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.5">Triggerflow</head><p>Triggerflow <ref type="bibr" target="#b40">[40]</ref> is a tool for tracking execution paths, previously used to facilitate SCA of OpenSSL. After users mark up source code with annotations of Points Of Interest (POI) and filtering rules for false positive considerations, Triggerflow runs the binary executable under a debugger and records the execution paths that led up to POIs. The user supplies binary invocation lines called "triggers". These techniques are useful in SCA of software, where areas that do not execute in constant time are known and the user needs to find code that leads up to them. The authors designed Triggerflow with continuous integration (CI) in mind, and maintain an automatic testing setup which continuously monitors all non-EOL branches of OpenSSL for new vulnerabilities by watching execution flows that enter known problematic areas. Triggerflow is intended for automated regression testing and has no support for automatic POI detection. Thus offensive leakage detection methodologies including (but certainly not limited to) CacheAudit <ref type="bibr" target="#b28">[28]</ref>, templating <ref type="bibr" target="#b21">[21,</ref><ref type="bibr" target="#b41">41]</ref>, CacheD <ref type="bibr" target="#b77">[75]</ref>, and DATA <ref type="bibr" target="#b79">[77]</ref> complement Triggerflow to establish POIs. One approach is to apply these leakage detection methodologies, filter out false positives, limit to functions deemed security-critical and worth tracking, then use the result to add Triggerflow source code annotations for CI. See <ref type="bibr">[40, Sec. 7]</ref> for a more extensive discussion.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3">Vulnerabilities</head><p>We used Triggerflow to analyze several code paths on multiple cryptographic libraries, discovering SCA vulnerabilities across OpenSSL and mbedTLS. In this section, we discuss these vulnerabilities, including the unit tests we developed for Triggerflow that detected each of them, then identify the root cause in each case. Following <ref type="figure" target="#fig_2">Figure 1</ref>, Triggerflow executes each line of the unit tests given in a text file. Triggerflow will trace the execution of lines beginning with debug to detect break points getting hit at SCA-critical points in the code. Each such line is security critical-in these examples, generating a key pair or using the private key to e.g. digitally sign a message. Hence if Triggerflow encounters said break points during execution, it represents a potential SCA vulnerability. We compiled the target executables (and shared libraries) with debug symbols, and source code annotated using Triggerflow's syntax to mark previously known SCA-vulnerable functions. Lines that do not begin with debug are not traced by Triggerflow, merely executed as preparation steps for subsequent triggers (e.g. setting up public fixed parameters).</p><p>Vulnerability-wise, the main results of this section are as follows: (i) bypassing SCA countermeasures using ECC explicit parameters (Section 3.1, OpenSSL); (ii) bypassing SCA countermeasures for DSA using PVK and MSBLOB key formats (Section 3.2, OpenSSL); (iii) bypassing SCA countermeasures for RSA by invoking key validation (Section 3.3,</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>1</head><p># ECDSA with explicit curve parameters, zero cofactor 2 debug openssl genpkey -algorithm EC -pkeyopt ec_paramgen_curve:P-256 -pkeyopt ec_param_enc:explicit -outform DER -out p256.der  </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.1">ECC: Bypass via Explicit Parameters</head><p>From a standardization perspective, curve data for ECC key material gets persisted in one of two ways: either including the specific OID that points to a named curve with fixed parameters, or explicitly specifying the curve with ASN.1 syntax. Mathematically, they seem equivalent. To explore the potential difference in security implications between these options, we constructed three keys: (i) a NIST P-256 private key as a named curve, using the ec_param_enc:named_curve argument to the OpenSSL genpkey utility; (ii) a NIST P-256 private key with explicit curve parameters, using the ec_param_enc:explicit argument; (iii) a copy of the previous key, but post-modified with the OpenSSL asn1parse utility to remove the optional cofactor. The first two keys additionally used the ec_paramgen_curve:P-256 argument to specify the target curve. We highlight that, from a standards perspective, all three of these keys are valid. We then integrated the commands to produce these keys into the Triggerflow framework as unit tests. Finally, we added an OpenSSL dgst utility unit test for each of these keys in Triggerflow, to induce ECDSA signing. What follows is a discussion on the three distinct control flow cases for each key, regarding the security-critical scalar multiplication operation.</p><p>Named curve. Triggerflow indicated ecp_nistz256_-points_mul handled the operation. The reason for this is OpenSSL uses an EC_METHOD structure for legacy ECC; the assignment of structure instances to specific curves happens at library compile time, allowing different curves to have different (optimized) implementations depending on archi-tecture and compiler features. This particular function is part of the EC_GFp_nistz256_method, an EC_METHOD optimized for AVX2 architectures <ref type="bibr" target="#b44">[43]</ref>. The implementation is constant time, hence this is the best case scenario.</p><p>Explicit parameters. Triggerflow indicated ec_scalar_-mul_ladder handled the operation, through the default EC_GFp_simple_method, the generic implementation for curves over prime fields. In fact this is the oldest EC_METHOD in the codebase, present since ECC support appeared in 2001.</p><p>The implementation of this particular function was mainlined in 2018 <ref type="bibr" target="#b73">[72]</ref> as a result of CVE-2018-5407 <ref type="bibr" target="#b8">[9]</ref>, SCAhardening generic curves with the standard Montgomery ladder. Interpreting this Triggerflow result, we conclude OpenSSL has no runtime mechanism to match explicit parameters to named curves present in the library. Ideally, it would match the explicit parameters to EC_GFp_nistz256_method for improved performance and SCA resistance. Failure to do so bypasses one layer of SCA mitigations, but in this particular case the default method still features sufficient SCA hardening.</p><p>Explicit parameters, no cofactor. Triggerflow indicated ec_wNAF_mul handled the operation through the same EC_METHOD as the previous case. This is a known SCAvulnerable function since 2009 <ref type="bibr" target="#b21">[21]</ref>, and is a POI maintained in the Triggerflow patchset to annotate OpenSSL for automated CI. Root causing the failed Triggerflow unit test, the function only early exits to the SCA-hardened ladder if both the curve generator order and the curve cardinality cofactor are non-zero. Since the optional cofactor is not present in the key, the library assigns zero as the default, indicating either the provided cofactor was zero or not provided at all. The OpenSSL ladder implementation utilizes the cofactor as part of SCA hardening, hence the code unfortunately falls through to the SCA-insecure version in this case, bypassing the last layer of SCA defenses for scalar multiplication. This is the path we will exploit in Section 4.</p><p>Keys in the wild. While we reached a vulnerable code path through a standards-compliant, valid, non-malicious key, the fact is the OpenSSL CLI will not organically emit a key in this form. One can argue that OpenSSL is far from the only security tool that produces keys conforming to the specification, that it must subsequently parse since they are valid. Nevertheless, this leaves us with the question: do keys like this existdoes this vulnerability matter? Investigating, we at least found two deployment classes this vulnerability affects: (i) The GOST engine 4 for OpenSSL, dynamically adding support for Russian cryptographic primitives in RFC 4357 <ref type="bibr" target="#b65">[64]</ref>. Since the curves from the standard are not built-in to OpenSSL, the engine programatically constructs the curve based on fixed parameters inside the engine. However, since the cofactor parameter to the OpenSSL EC_GROUP_set_generator API is optional, the engine developers omit it in earlier versions, <ref type="bibr" target="#b3">4</ref> https://github.com/gost-engine/engine passing NULL. When GOST keys are persisted, they have their own OID distinct from legacy ECC standards and only support named curves; however, the usage of these curves within the engine hits the same exact code path. (ii) GOSTCoin 5 is the official software stack for a cryptocurrency. It links against OpenSSL for cryptographic functionality, but does not support the GOST engine. Examining the digital wallet, we manually extracted several DER-encoded legacy (OIDwise) ECC private keys from the binary. Parsing these keys revealed they are private keys with explicit parameters from RFC 4357 <ref type="bibr" target="#b65">[64]</ref>, "Parameter Set A". Upon closer inspection, the cofactor is present in the ASN.1 encoding, yet explicitly set to zero. Similar to the previous case, this is due to failure to supply the correct cofactor to the OpenSSL EC API when constructing the curve.</p><p>From this brief study, we can conclude that failure to provide the valid cofactor to the OpenSSL EC API when constructing curves programmatically (the only choice for curves not built-in to the library), or importing a (persisted) ECC private key with explicit parameters containing a zero or omitted (spec-optional) cofactor are characteristics of applications affected by this vulnerability.</p><p>Related work. Concurrent to our work, Takahashi and Tibouchi <ref type="bibr" target="#b71">[70]</ref> utilize explicit parameters in OpenSSL to mount a fault injection attack. They invasively induce a fault during key parsing to change OpenSSL's representation of a curve coefficient. This causes decompression of the explicit generator point to emit a point on a weaker curve, subsequently mounting a degenerate curve attack <ref type="bibr" target="#b57">[56]</ref>. At a high level, the biggest differences from our work are the invasive attack model and limited set of applicable curves.</p><p>Subsequent to our work, CVE-2020-0601 tracks the "Curveball" vulnerability. It affects the Windows CryptoAPI and uses ECC explicit parameters to match a named curve in all but the custom generator point, allowing to spoof codesigning certificates.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.2">DSA: Bypass via Key Formatting</head><p>As the Swiss knife of cryptography, OpenSSL provides support for PVK and MSBLOB key formats to perform digital signatures using DSA. In fact, OpenSSL has supported these formats since version 1.0.0, hence the library has a dedicated file in crypto/pem/pvkfmt.c for parsing these keys. The file contains all the logic to parse Microsoft's DSA and RSA private key BLOBs, common to both PVK and MSBLOB key formats. Unfortunately, the bulk of code for parsing the keys has seen few changes throughout the years, and more importantly it has missed important SCA countermeasures that other parts of the code base have received <ref type="bibr" target="#b63">[62]</ref>, allowing this vulnerability to go unnoticed in all OpenSSL branches until now.</p><p>As mentioned previously, PVK and MSBLOB key files contain only private key material but OpenSSL expects the public key to be readily available. Thus every time it loads any of these key formats, the library computes the corresponding public key. More specifically, the upper level function b2i_dss reads the private key material and subsequently calls the BN_mod_exp function to compute the public key using the default modular exponentiation function, without first setting the constant-time flag BN_FLG_CONSTTIME. Note that this vulnerability does not depend on whether the PVK key is encrypted or not, because when the code reaches the b2i_dss function, the key has been already decrypted, and the modular exponentiation function is already leaking private key material. This default SCA-vulnerable modular exponentiation algorithm follows a square-and-multiply approach-first precomputes a table of multipliers, and then accesses the table during the square-and-multiply step. <ref type="bibr">Already in 2005 Percival [60]</ref> demonstrated an L1 data cache-timing attack against this function during RSA decryption. We found that the original flaw is still present, but this time in the context of DSA. <ref type="figure" target="#fig_3">Figure 2</ref> demonstrates the side-channel leakage obtained by our L1 data-cache malicious spy process running in parallel with OpenSSL during a modular exponentiation operation while computing the DSA public key using PVK and MS-BLOB key formats. Using the PRIME+PROBE technique, our spy process is able to measure the latency of accessing a specific cache set (y-axis) over time (x-axis) to obtain a sequence of pre-computed multipliers accessed during computation. In OpenSSL a multiplier is represented as a BIGNUM structure spanning approximately across three different cache sets. Reading from top-to-bottom and left-to-right, and after a brief period of noise, the figure shows that every block of approximately three continuous high latency cache sets corresponds to a multiplier access. An attacker can not only trace the multipliers accessed, but also the order in which they were accessed during the exponentiation, leaking more than half of the exponent bits. This information greatly reduces the effort to perform full key recovery. Moreover, the public key is computed every time the private key is loaded, thus an attacker has several attempts at tracing the sequence of operations performed during the exponentiation. Our experiments reveal that cache sets stay constant across multiple invocations of modular exponentiation, reducing the attacker's effort and permitting the use of statistical techniques to improve the leakage quality. Keys in the wild. PVK and MSBLOB are based on MS proprietary private key formats-nevertheless they are widely found in use in open source software. MSBLOB keys are supported by MS Smart Card CSP and OpenSC <ref type="bibr" target="#b5">6</ref> , an open source software library for smart cards linking to OpenSSL. In fact, OpenSC has a function 7 that creates a key container-by call- ing the OpenSSL vulnerable function-whenever "the card either does not support internal key generation or the caller requests that the key be archived in the card", facilitating the attack in a smart card setting. On the other hand, MS Visual Studio 2019 provides tools 8 to generate, convert, and sign Windows drivers, libraries, and catalog files using the PVK format. In a typical workflow, MakeCert generates certificates and the corresponding private key, then Pvk2Pfx encapsulates private keys and certificates in a PKCS #12 container, and finally SignTool signs the driver. Interestingly, MakeCert and SignTool successfully generate keys and signatures using RSA and DSA, but Pvk2Pfx fails to accept any key that is not RSA-a gap filled by the vulnerable OpenSSL, creating compliant PKCS #12 keys. Other libraries such as jsign 9 , osslsigncode 10 , and the Mono Project 11 exist to provide signing capabilities using MS proprietary private key formats outside of Windows. We can expect this vulnerability to be exploitable by an attacker targeting Windows developers.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.3">RSA: Bypass via Key Validation</head><p>RSA key validation is a common operation required in a cryptography library supporting RSA to verify that an input key is indeed a valid RSA key. We found that OpenSSL function RSA_check_key_ex located at crypto/rsa/rsa_chk.c contains several SCA vulnerabilities. In fact, we found that the affected function RSA_check_key_ex can be accessed by two public entry points: a direct call to RSA_check_key, and through the public EVP interface calling EVP_PKEY_check on an RSA key. <ref type="figure" target="#fig_2">Figure 1</ref> shows the commands in OpenSSL leading to the affected code path through the two different public functions. Note that any external, OpenSSL-linking application calling any of these two public functions is also affected.</p><p>The check function takes as input an RSA key, parses the key, and reads all of the private and public components, checking the correctness of all the components. In general, the function validates the primality of p and q, then it recomputes the rest of the values {N, d, d p , d q , i q } to compare against the parsed values and check their validity. Unfortunately, we found that in several cases OpenSSL uses by default SCAvulnerable functions to recompute these secret values. Primality testing vulnerabilities. The prime values p and q are the first components verified during the process. The verification is done using the Miller-Rabin primality test <ref type="bibr" target="#b68">[67]</ref> as implemented in the function BN_is_prime_fasttest_ex. This function calls a lower level witness function named bn_miller_rabin_is_prime 12 where a b base value is chosen randomly to compute b m mod p, in which p is the candidate prime and the relation 2 a m = p − 1 holds. The witness exponentiation is performed using the BN_mod_exp_mont function, where unfortunately the BN_FLG_CONSTTIME is not set beforehand. Thus a variable-time sliding window exponentiation is used, allowing a malicious process to potentially perform a data cache-timing attack to recover half of the bits from the exponent <ref type="bibr" target="#b61">[60]</ref>. This is enough information to recover both prime values p and q. Moreover, the exponentiation function gets called several time by the witness function with different b values in order to obtain confidence about the prime values, providing multiple attempts for an attacker to capture the leakage and perform error correction during its key recovery attack. In addition to the previous vulnerability, as part of the witness function, a Montgomery setup phase occurs in BN_MONT_CTX_set, where the inverse of 2 w mod p for wbit architectures is computed. The modular inverse function BN_mod_inverse is called without setting the constant-time flag. The inverse operation uses a variation of the greatest common divisor (GCD) algorithm, which is dependent on its inputs {2 w , p mod 2 w }, thus leaking algorithm state equivalent to the least significant word of both p and q. Secret value vulnerabilities. Once the prime values p and q are deemed correct, the key validation continues by computing the rest of the secret components where more vulnerabilities are found. To compute the private exponent d during the verification code path, OpenSSL uses the least common multiple (LCM) of p − 1 and q − 1. Nevertheless, this operation is computed as</p><formula xml:id="formula_6">lcm(p − 1, q − 1) = (p − 1) · (q − 1) gcd(p − 1, q − 1)<label>(4)</label></formula><p>performing the GCD computation using the BN_gcd function. This function does not have an early exit to a constant-time function, instead it completely ignores the flag existence, so even if it was set it would not have any effect on the code path taken. Finally, the last vulnerability is observed during CRT i q computation. OpenSSL computes this parameter using the <ref type="bibr" target="#b11">12</ref> In OpenSSL 1.0.2 the function is called witness.</p><p>BN_mod_inverse function, which yet again fails to properly set the constant-time flag, leaving the computation q −1 mod p unprotected. It is worth noting that variable-time GCD functions, and variants, potentially leak all the algorithm state. Depending on the attacker capabilities <ref type="bibr" target="#b5">[6]</ref>, an attacker is fully capable of recovering the input values, i.e. p and q.</p><p>As can be observed, all of the vulnerabilities leak on p and q at different degrees, but by combining all the leaks, an attacker can use the redundancy and number-theoretic constraints to correct errors and obtain certainty on the bits leaked. Keys in the wild. Surprisingly, the vulnerabilities presented in this section do not depend on a special key format. In fact, the vulnerabilities are triggered whenever an RSA key is checked for validity using the OpenSSL library, thus a potential attacker could simply wait for the right moment to exploit these vulnerabilities. The potential impact of these vulnerabilities is large, but it is minimized by two important factors: the user must trigger an RSA key validation; and the attacker must be collocated in the same CPU as the user. Nevertheless, this is not a rare scenario, and thus exploitation is very much possible.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.4">RSA: Bypass via Missing Parameters</head><p>Recalling Section 2, an RSA private key is composed by some redundant parameters while at the same time not all of them are mandatory per RFC 8017 <ref type="bibr" target="#b56">[55]</ref>: "An RSA private key should be represented". This implies that cryptography implementations must deal with RSA private keys that do not contain all parameters, requiring potentially computing them on demand. Natural questions arise: (i) How do software libraries handle this uncertainty? (ii) Does this uncertainty mask SCA threats? Shifting focus from OpenSSL, the remainder of this section analyzes the open source mbedTLS library in this regard. Fuzzing RSA private key loading. Following the Triggerflow methodology, we developed unit tests for the mbedTLS library, specifically for targeting RSA key loading code paths. To this end, we analyzed the mbedTLS v2.18.1 bignum implementation and set three POIs for Triggerflow: (i) GCD computation, mbedtls_mpi_gcd; (ii) Modular multiplicative inverse, mbedtls_mpi_inv_mod; (iii) Modular exponentiation, mbedtls_mpi_exp_mod. We arrived at these POIs from state-of-the-art SCA applied to cryptography libraries where these operations are commonly exploited. The first two functions are based on the binary GCD algorithm, previously shown weak to SCA <ref type="bibr" target="#b3">[4,</ref><ref type="bibr" target="#b6">7,</ref><ref type="bibr" target="#b9">10,</ref><ref type="bibr" target="#b62">61,</ref><ref type="bibr" target="#b78">76]</ref>, while exponentiation is a classical SCA target <ref type="bibr" target="#b16">[17,</ref><ref type="bibr" target="#b26">26,</ref><ref type="bibr" target="#b35">35,</ref><ref type="bibr" target="#b50">49,</ref><ref type="bibr" target="#b63">62]</ref>.</p><p>With these POIs, we fuzz the RSA mbedTLS private key loading code path to identify possible vulnerabilities. The fuzzing consists of testing the loading of an RSA private key when some parameters are equal to zero (i.e. empty PKCS #1 parameter).</p><p>After configuring the potential leaking functions as Triggerflow POIs, we created an RSA private key fuzzing utility that generates all possible combinations of PKCS #1-compliant private keys. This ranges from a private key that includes all PKCS #1 parameters to none. While the latter is clearly invalid as it carries no information, other missing combinations could be interesting regarding SCA. As PKCS #1 defines eight parameters, the number of private key combinations compliant with this standard is 256.</p><p>Triggerflow provides a powerful framework for testing all these combinations smoothly. Using Triggerflow for each of these private keys, we tested the generic function of mbedTLS for loading public keys: mbedtls_pk_parse_keyfile. The advantage of using Triggerflow for this task is that we can automate the whole process of testing each code corner of this execution path, searching for SCA threats. <ref type="figure" target="#fig_2">Figure 1</ref> (bottom) shows a Triggerflow unit test of one of these parameter combinations, with a private key missing d. Unit tests for the other combinations are similar. Results. For each combination, we obtained a report that indicates if and where POIs were hit or not, also recording the program return code. A quick analysis of the generated reports indicates the 256 combinations group in four classes (i.e. only four unique reports were generated for all 256 private key parameter combinations). <ref type="table" target="#tab_0">Table 1</ref> shows the number of keys for each group. The majority of private key combinations yield an "Invalid" return code without hitting a POI before returning.</p><p>The group "Public" contains those remaining valid private keys for which {d, p, q} is not a subset of included parameters. In this case, mbedTLS recognized the key as a public key even if the CRT secret parameters are present. Nevertheless, identified as "Public" by mbedTLS, we ignore them, since no secret data processing takes place. The last two groups in <ref type="table" target="#tab_0">Table 1</ref> contain those private keys (32 in total) that indeed hit at least one POI. Analyzing both reports on these groups, we identified two potential leakage points. One is related to processing of the CRT parameters, and the other to computation of the private exponent d. We now investigate if these hits represent an SCA threat. Appendix A details the complete list of parameter combinations that hit a POI. Leakage analysis: CRT. The last two report groups have at least one hit at a Triggerflow POI in a CRT related computation. In both groups, the report regarding this code path is identical, hence the following analysis applies to both.</p><p>The Triggerflow report reveals hitting the modular inverse POI; the parent function is mbedtls_rsa_deduce_crt, computing the CRT parameters in (3) as i q = q −1 mod p using mbedtls_mpi_inv_mod. It is a variant of the binary extended Euclidean algorithm (BEEA) with an execution flow highly dependent on its inputs, therefore an SCA vulnerability. This is similar to OpenSSL's Section 3.3 vulnerability. Yet in contrast to OpenSSL, this code path in mbedTLS executes every time this library loads a private key: the vulnerability exists regardless of missing parameters in the private key.</p><p>Leakage analysis: private exponent. The last group in <ref type="table" target="#tab_0">Table 1</ref> contains the CRT leakage previously described in addition to one related to private exponent d processing. The targeted POIs hit by all private key parameter combinations in this group are mbedtls_mpi_gcd and mbedtls_mpi_inv_mod. Both are called by the parent function mbedtls_rsa_deduce_private_exponent, that aims at computing the private exponent if it is missing in the private key using (2), involving a modular inversion. However, for computing lcm(p − 1, q − 1) using (4), the value gcd(p − 1, q − 1) needs to be computed first. Therefore, the report indicates a call first to mbedtls_mpi_gcd with inputs p − 1 and q − 1. This call represents an SCA vulnerability as the binary GCD algorithm is vulnerable in these instances <ref type="bibr" target="#b3">[4,</ref><ref type="bibr" target="#b7">8,</ref><ref type="bibr" target="#b9">10]</ref>. Note, this leakage is also present in OpenSSL (Section 3.3), however the contexts differ. We observed OpenSSL leakage when verifying d correctness, whereas mbedTLS computes d because it is missing. This difference is crucial regarding SCA, because OpenSSL verifies by checking if de = 1 mod lcm(p − 1, q − 1) holds; yet mbedTLS indeed computes d, executing a modular inversion <ref type="bibr" target="#b1">(2)</ref>. Therefore this vulnerability is present in mbedTLS, and absent in OpenSSL.</p><p>After obtaining lcm(p − 1, q − 1), it computes d using (2) through a call to mbedtls_mpi_inv_mod. <ref type="bibr" target="#b62">[61,</ref><ref type="bibr" target="#b78">76]</ref> exploit OpenSSL's BEEA using microarchitecture attacks, so at a high level it represents a serious security threat. A deeper analysis follows for this mbedTLS case.</p><p>Summarizing, the private exponent computation in mbedTLS contains two vulnerable code paths: (i) GCD computation of p − 1 and q − 1; and (ii) modular inverse computation of e modulo lcm(p − 1, q − 1). Next, we investigate which of these represents the most critical threat.</p><p>The inputs of the first code path (GCD computation) are roughly the same size. This characteristic implies that, for some SCA signals, the number of bits that can be recovered is small and not sufficient to break RSA. <ref type="bibr" target="#b6">[7,</ref><ref type="bibr" target="#b62">61]</ref> practically demonstrated this limitation using different SCA techniques: the former power consumption, the latter microarchitecture timings.</p><p>However, note the inputs of the second code path (modular inversion) differ considerably in size. The public exponent e is typically small, e.g. 65537. Following <ref type="formula" target="#formula_6">(4)</ref> more than 1024 because gcd(p − 1, q − 1) is small with high probability <ref type="bibr" target="#b45">[44]</ref>. This significant bit length difference between mbedtls_mpi_inv_mod inputs makes this algorithm extremely vulnerable to SCA <ref type="bibr" target="#b7">[8]</ref>. This difference implies the attacker knows part of the algorithm execution flow beforehand, and it is exactly this part that is usually difficult to obtain and considerably limits the number of bits that can be recovered employing some SCA techniques as demonstrated in <ref type="bibr" target="#b6">[7,</ref><ref type="bibr" target="#b62">61]</ref>. This characteristic means the attacker only needs to distinguish the main two arithmetic operations present in this algorithm (i.e. right-shift and subtraction) to fully recover the input lcm(p − 1, q − 1) that yields d.</p><p>Regarding microarchitecture attacks, this distinction lends itself to a FLUSH+RELOAD attack. As part of our validation, we attacked this implementation using a FLUSH+RELOAD attack paired with a performance degradation technique <ref type="bibr" target="#b10">[11]</ref>. We probed two cache lines: one detecting right-shift executions, the other subtractions. <ref type="figure">Figure 3</ref> shows the start of a trace, demonstrating the sequence extraction of right-shifts and subtraction is straightforward.</p><p>In addition, the key loading application threat model allows capturing several traces corresponding to the processing of the same secret data. Therefore, the attacker can correct errors that may appear in captured traces (e.g. fix errors produced by preemptions) by combining the information as they are redundant.</p><p>Recap. After the analysis of both leaking code paths we detected, we conclude the private exponent leakage is easier to exploit than that of CRT due to the large bitlength difference between the modular inversion algorithm inputs in the former <ref type="bibr" target="#b7">[8,</ref><ref type="bibr" target="#b9">10,</ref><ref type="bibr" target="#b78">76]</ref>. On the other hand, the private exponent leakage is only present when the private key does not include d; whereas the CRT-related leakage always represents a threat regardless of missing parameters <ref type="bibr" target="#b5">[6]</ref>. The number of bits that can be recovered exploiting these leaking code paths depends on the side-channel signal employed. However, these code paths potentially leak all the bits of the processed secrets, as demonstrated in <ref type="bibr" target="#b5">[6,</ref><ref type="bibr" target="#b7">8,</ref><ref type="bibr" target="#b9">10,</ref><ref type="bibr" target="#b78">76]</ref>.</p><p>Keys in the wild. As such, in the context of mbedTLS the simplest example of a vulnerable RSA key is the default key typically generated by libraries, including all parameters. We verified this default behavior on e.g. mbedTLS, OpenSSL, and BoringSSL. Hence such keys are ubiquitous in nature. For example, Let's Encrypt's certbot tool for automated certificate renewal only supports RSA keys. We conclude that any application linking to mbedTLS for RSA functionality including key parsing is potentially vulnerable, including (but certainly not limited to) ACME-backed web servers relying on mbedTLS for TLS functionality.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4">Two End-to-End Attacks</head><p>As highlighted in Section 3, the format used to encode a private key can lead to the bypass of side-channel countermeasures in cryptographic libraries: these are Certified Side Channels. In this section we concretely instantiate the threat in Section 3.1 with two SCA attacks against ECDSA signature generation over the popular NIST P-256 curve against OpenSSL 1.1.1a: a remote timing attack and an EM attack.</p><p>Target application. For computing the ECDSA signatures from the protocol stack application layer we chose RFC 3161 <ref type="bibr" target="#b81">[79]</ref> Time Stamp Protocol. The protocol ensures the means of establishing a time stamping service: a time stamp request message from a client and the corresponding time stamp response from the Trusted Timestamp Authority (TSA). In short, the TSA acts as a trusted third party that binds the Time Stamp Token (TST) to a valid client request messageone way hash of some information-and digitally signs it with the private key. Anyone with a valid TSA certificate can thus verify the existence of the information with the particular time stamp, ensuring timeliness and non-repudiation.</p><p>In principle, the client generates a time stamp request message containing the version information, OID of the one way hash algorithm, and a valid hash of the data. Optionally, the client may also send TSA policy OID to be used for creating the time stamp instead of TSA default policy, a random nonce for verifying the response time of the server, and additionally request the signing public key certificate in the TSA response message. The server timestamp response contains a status value and a TST with the OID for the content type and the content itself composed of DER-encoded TST information (TSTinfo). The TSTinfo field incorporates the version number info, the TSA policy used to generate the time stamp response, the message imprint (same as the hashed data in the client request), a unique serial number for the TST, and the UTC based TST generation time along with the accuracy in terms of the time granularity. Depending on the client request, the server response may additionally contain the signing certificate and the client provided nonce value. For further details on TSP, the reader may refer to RFC 3161 <ref type="bibr" target="#b81">[79]</ref>.</p><p>Our attack exploits point multiplication in the ECDSA signature generation during the TSA response phase to recover the long term private key of the server. As a protocol-level target, we compiled and deployed unmodified uts-server 13 v0.2.0 without debug symbols, an open source TSA server linking against an unmodified debug build of OpenSSL 1.1.1a.</p><p>We configured the server with a NIST P-256 X.509 digital certificate, using the private key containing explicit parameters with a zero cofactor, i.e. the preconditions for our Section 3.1 vulnerability. We used the OpenSSL time stamp utility ts to create time stamp requests with SHA256 as the hash function, along with a request for the server's public key certificate for verification. We used the provided HTTP configuration for uts-server, hence the TSP messages between the (victim) server and our (attacker) client were transported via standard HTTP.</p><p>Target device. We selected a Linux-based PINE A64-LTS board with an Allwinner A64 Quad Core SoC based on Cortex-A53 which supports a 64-bit instruction set with a maximum clock frequency of 1.15 GHz. The board runs Ubuntu 16.04.1 LTS without any modifications to the stock image. We set the board's frequency governor to "performance".</p><p>Threat model. As discussed (Section 3.1), when handling such a key in OpenSSL 1.1.1a, the underlying implementation for the EC scalar multiplication is based on a wNAF algorithm, which has been repeatedly targeted in SCA works over the last decade, usually focusing on the recovery of the LSBs of the secret scalar. Contributions from Google <ref type="bibr" target="#b47">[46]</ref> partially mitigated the attack vector for select named curves with new EC_METHOD implementations, then fully even for generic curves due to the results and contributions from <ref type="bibr" target="#b73">[72]</ref>. With the attack vector now open again, this section presents two end-to-end attacks with different signal procurement methods: (i) a novel remote timing attack (Section 4.1), where it is assumed the attacker can measure the overall wall clock time it takes for the TSA server to respond to a request-note this attacker is indistinguishable from a legitimate user of the service; (ii) an EM attack (Section 4.2), similar in spirit to <ref type="bibr" target="#b38">[38,</ref><ref type="bibr" target="#b73">72]</ref>, which has the same aforementioned threat model but additionally assumes physical proximity to non-invasively measure EM emanations. The motivation for the two different threat models is due to both practicality and the number of required samples, which will become evident by the end of this section.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.1">ECDSA: Remote Timing Attack</head><p>In contrast to previous work on this code path and to widen potential real-world application, we performed a remote timing attack on the TSA server application via TCP. Instead of taking measurements on this code path server side like e.g. PRI-ME+PROBE <ref type="bibr" target="#b19">[20,</ref><ref type="bibr" target="#b21">21]</ref> and FLUSH+RELOAD <ref type="bibr" target="#b10">[11,</ref><ref type="bibr" target="#b13">14,</ref><ref type="bibr" target="#b30">30,</ref><ref type="bibr" target="#b75">73]</ref>, we (as a non-priviliged, normal user of the service), make network requests and measure the wall clock response time.</p><p>Experiment setup. We connected the PINE A64-LTS board directly by Ethernet cable to a workstation equipped with an Intel i5-4570 CPU and an onboard I217-LM (rev 04) Ethernet controller. To measure the remote wall clock latency and reduce noise, we created a custom HTTP client for time stamp requests. Its algorithm is as follows: (i) establish a TCP connection to the server; (ii) write the HTTP request and the body, sans a single byte; (iii) start the timer; (iv) write the last body byte-now the server can begin computing the digital signature; (v) read the HTTP response headers-the server might write at least part of them before computing the digital signature; (vi) read one byte of HTTP response body-the digital signature is received by the server directly from linked OpenSSL in an octet string, so reading one byte guarantees it has been generated; (vii) stop the timer; (viii) finish reading the HTTP response; (ix) record the timing information and digital signature in a database; (x) close the TCP connection; (xi) repeat until the requested number of samples has been gathered. We implemented the measurement software in C to achieve maximum performance and control over operations. For the client timer, we used the x86 rtdtsc instruction that is freely accessible from user space. In recent Intel processors the constant_tsc feature is available-a frequency-independent and easily accessible precision timer.</p><p>Performing a traditional timing analysis under the above assumptions, we discovered a direct correlation between the wall clock execution time of ECDSA signature generation and the bitlength of the nonce used to compute the signature, as shown in <ref type="figure" target="#fig_5">Figure 4</ref>. This happens because given a scalar k and its recoded NAF representationˆkrepresentationˆ representationˆk, the algorithm execution time is a function of both the NAF length ofˆkofˆ ofˆk and its Hamming weight. While the NAF length is a good approximation for the bitlength of k (in fact at most one digit longer), its Hamming weight masks the NAF length linearly so it is not obvious how to correlate these two factors with the precise bitlength of k. Nevertheless, the empirical results (by sampling) shown in <ref type="figure" target="#fig_5">Figure 4</ref> clearly demonstrate the latter is directly proportional to the overall algorithm execution time.</p><p>This result shares similarity to the one exploited in CVE-2011-1945 <ref type="bibr" target="#b22">[22]</ref> (that built the foundation for the recent Minerva <ref type="bibr" target="#b13">14</ref> and TPM-FAIL <ref type="bibr" target="#b55">[54]</ref> attacks), and in fact suggests that CVE applied to not only binary curves using the Montgomery ladder, but prime curves as well. Following their attack methodology, we devise an attack in two phases: (i) The collection phase exploits the timing dependency between the execution time and the bitlength of the nonce used to generate a signature, thus selecting (r, s, m) tuples associated with shorter-than-average nonces; (ii) The recovery phase then combines the partial knowledge inferred from the collection phase to instantiate an HNP instance and solve it through a lattice technique (Section 2.4).</p><p>Collection phase. Using our custom TCP time stamp client, across Ethernet we collect 500K traces for a single attack, sorting by the measured latency, and filter the first t = 128 items: empirically this is closely related to the selection by a fixed threshold suggested by <ref type="figure" target="#fig_5">Figure 4</ref>. We prefer the for- mulation where we set the dimension t of the filtered set and the total number of collected signatures, as these numbers are more significant for comparison with other works or directly used in the formalization of the subsequent lattice phase. Lattice phase. As noted above, the collection phase in this attack selects shorter-than-average nonces, i.e. looking at the nonce k i as a string of bits with the same bitlength of the generator order n, 0 &lt; k i &lt; 2 (lg (n)− i ) &lt; 2 (lg (n)−) &lt; n/2 ≡ n/W &lt; n for some W = 2 bound, representing that at least consecutive MSBs are equal to 0. This is in contrast with the Section 2.4 formalization, which instead implies knowledge of nonce LSBs, so we need to slightly revise some definitions to frame the lattice problem using the same notation. Therefore, we can define W i = W = 2 and, similarly to the formalization in Section 2.4, rearrange (1) as k i = α(r i /s i )−(−h i /s i ) mod n and then redefine t i = r i /s i n , ˆ u i = −h i /s i n which leads once again to 0 ≤ αt i − ˆ u i n &lt; n/W i , from which the rest of the previous formalization follows unchanged.</p><p>Although it used a different lattice description, <ref type="bibr" target="#b22">[22]</ref> also dealt with a leak based on nonce MSBs, which led to an interesting property that is valid also for the formalization used in this particular lattice attack. Comparing the definitions of t i , ˆ u i , and u i above with the ones from Section 2.4, we note that in this particular attack no analogue of the a i term features in the equations composing the lattice problem, from which follows that even if some k i does not strictly satisfy the bound k i &lt; n/W there is still a chance that the attack will succeed, leading to a better resilience to errors (i.e., entries in the lattice that do not strictly satisfy the bound above) in this lattice formulation. From the attacker perspective, higher W is desirable but requires more leakage from the victim. Since in this formulation the attacker does not use a perequation W i as the distributions are partially overlapping, the question remains how to set W . Underestimating W is technically accurate for approximating zero-MSBs for most of the filtered traces, but forces higher lattice dimensions and slower computation for each job. Using a larger set of training samples, analyzing the ground truth w.r.t. the actual nonce of each sample, we empirically determined that the distribution of nonce bitlengths on the average set filtered by our collection phase is a Gaussian distribution with mean lg (k i ) = 247.80 and s.d. 3.81, which suggests W = 2 8 (8 = 256 − 248) is a better approximation of the bound on most nonces. Given the s.d. magnitude, by trial-and-error we set W = 2 7 as a good trade-off for lattice attack execution time vs. success rate.</p><p>Combining the better resilience to errors of this particular lattice formulation and the higher amount of information carried by each trace included in the lattice instance by pushing W , we fixed the lattice attack parameters to d = 60 and j = 55K and limit the maximum number of attempted lattice reductions per job to 100 (in practice on our cluster, less than a single minute), as we observed the overwhelming majority of instances returned success within this time frame or not at all.</p><p>Attack results. With these parameters, and repeating the attack 100 times, we observed a 91% success rate in our remote timing attack over Ethernet. The median number of jobs needed over all attack instances was 1377 (i.e. j = 1377 was sufficient for key recovery in the majority of cases). Those reductions that led to successful key recovery (i.e. 91 in number) had lg (k i ) = 246.85 and s.d. 3.13, while the j = 55K reductions per each of the 9 failed overall attack instances had lg (k i ) = 247.96 and s.d. 3.87. This difference suggests: (i) the better resilience to errors in this lattice formulation is empirically valid, as given the stated s.d. not all k i satisfied the bound W ; (ii) in our environment, even the failed instances would likely succeed by tweaking lattice parameters (i.e. decreasing W and increasing d) and providing more parallel computation power (i.e. increasing j).</p><p>In case of success, the attacker obtains the long-term secret key. On failure she can repeat the collection phase (accumulating more traces and improving the filtering output and the probability of success of another lattice phase) or iteratively tune the lattice parameters (decreasing W and increasing d) to adapt to the features of the specific output of the collection phase, thus improving the lattice attack's success probability. </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.2">ECDSA: EM Attack</head><p>In a much stronger (yet still SCA-classical) attack model assuming physical proximity, we now perform an EM attack on OpenSSL ECDSA. As far as we are aware, we are the first to exploit this code path in the context of OpenSSL and NIST P-256: <ref type="bibr" target="#b38">[38]</ref> target the 256-bit Bitcoin curve, and <ref type="bibr" target="#b73">[72]</ref> the 256-bit SM2 curve. The reason for this is our Section 3.1 vulnerability allows us to bypass the dedicated EC_METHOD instance on this architecture, EC_GFp_nistz256_method which is constant time and optimized for AVX and ARMv8 architectures. The wNAF Double and Add operations have a different set of underlying finite field operations-square, multiply, add, sub, inversion-resulting in distinguishable EM signatures.</p><p>Experiment setup. To capture the EM traces, we positioned the Langer LF-U 2.5 near field probe head on the SoC where it resulted in the highest signal quality. For digitizing the EM emanations, we used Picoscope 6404C USB digital oscilloscope with a bandwidth of 500 MHz and maximum sampling rate of 5 GSps. However, we used a lower sampling rate of 125 MSps as the best compromise between the trace quality and processing overhead. To acquire the traces while ensuring that the entire ECDSA trace was captured, we synchronized the oscilloscope capture with the time stamp request message: initiate the oscilloscope to start acquiring traces, query a time stamp request over HTTP to the server and wait for the server response, and finally stop the trace acquisition. We stored the EM traces along with the DER-encoded server response messages. We parsed the messages to retrieve the hash from the client request and the DER-encoded ECDSA signatures, used to generate metadata for the key recovery phase. <ref type="figure" target="#fig_6">Figure 5</ref> shows the setup we used for our attack.</p><p>Signal analysis. After capturing the traces, we moved to offline post processing of the EM traces for recovering the partial nonce information. This essentially means identifying the position of the last Add operation. The problem is twofold: finding the end of the point multiplication (end trigger), then identifying the last Add operation therein. We divided the complete signal processing phase mainly into four steps: (i) Remove traces with errors due to acquisition process; (ii) Find the end of the ECDSA point multiplication; (iii) Remove traces encountering interrupts; (iv) Identifying the position of the last Add operation. We started by selecting only those traces which had peak magnitude to the root mean square ratio within an emphatically selected confidence interval, evidently removing traces where the point multiplication operation was not captured or trace was too noisy to start with.</p><p>In the next step, we used a specific pattern at the end of ECDSA point multiplication as our soft end trigger. To isolate this trigger pattern from the rest of the signal, we first applied a low pass FIR filter followed by a phase demodulation using the digital Hilbert transform. We further enhanced this pattern while suppressing the rest of the operations by applying root mean square envelope with a window size roughly half its sample size. We created a template by extracting this pattern from 20 random traces and taking their average. We used the Euclidean distance between the trace and template to find the end of point multiplication. We dropped all traces where the Euclidean distance was above an experimental threshold value, i.e. no soft trigger found. The traces also encountered random interrupts due to OS scheduling clearly identifiable as high amplitude peaks. Any traces with an interrupt at the end of point multiplication were also discarded to avoid corrupting the detection of the Add operation.</p><p>To recover the position of the last Add operation, we applied a different set of filters on the raw trace, keeping the end of point multiplication as our starting reference. Since the frequency analysis revealed most of the Add operations energy is between 40 MHz and 50 MHz, we applied a band pass FIR filter around this band. Performing a digital Hilbert transform, additional signal smoothing and peak envelope detection, the Add operations were clearly identifiable ( <ref type="figure" target="#fig_7">Figure 6</ref>).</p><p>To automatically extract the Add operation, we first used peak extraction. However it was not as reliable since the signals occasionally encountered noisy peaks or in some instances the Add peaks were distorted. We again resorted to the template matching method used in the previous step, i.e. create an Add template and use Euclidean distance for pattern matching. For each peak identified, we also applied the template matching and measured the resulting Euclidean distance against a threshold value. Anything greater than the threshold was considered a false positive peak.</p><p>These steps ensured that the error rate stays low, consequently increasing the success rate of the key recovery lattice attack. We estimated the number of Double operations using the total sample length from the middle of the last Add operation to the end of trace as illustrated in <ref type="figure" target="#fig_7">Figure 6</ref>. To effectively reduce the overlap between the sample length metric of different Double and Add sequences, we applied K-means clustering to keep sequences which were close to the cluster mean. Attack results. We acquired a total of 500 signatures, and after performing the signal processing steps we were left with 422 traces. Additionally, after filtering out signatures categorized as "A" and hence not useful lattice-wise, we were left with t = 172 signatures suitable for building lattice problem instances. We chose d = 120 as the number of signatures to populate the lattice basis. We then constructed j = 48 instances of the lattice attack, randomly selecting d-size subsets from the t signatures for each instance. We then ran these instances in parallel on a 2.10 GHz dual CPU Intel Xeon Silver 4116 (24 cores, 48 threads across 2 CPUs). The first instance to succeed in recovering the private key did so in just over three minutes. Checking the ground truth afterwards, e = 4 out of the t signatures were categorized incorrectly, for a suitably small error rate of about 2.3%.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5">Conclusion</head><p>In this work, we evaluated how different choices of private key formats and various optional parameters supported by them can influence SCA security. We employed the automated tool Triggerflow to analyze vulnerable code paths in well known cryptographic libraries for various combinations of key formats and optional parameters. The results uncovered several Certified Side Channels, circumventing SCA hardened code paths in OpenSSL (ECC with explicit parameters, DSA with MSBLOB and PVK formats, RSA during key validation) and mbedTLS (RSA with missing parameters). To demonstrate the severity of these vulnerabilities, we performed microarchitecture leakage analysis on RSA and DSA and also presented end-to-end key recovery attacks on OpenSSL ECDSA using traditional timing and EM side channels. We publish our data set for the remote timing attack to support Open Science <ref type="bibr" target="#b64">[63]</ref>.</p><p>In the OpenSSL case, Pereida García et al. <ref type="bibr" target="#b63">[62]</ref> conclude the fundamental design issue around BN_FLG_CONSTTIME is due to its insecure default nature, hypothesizing inverted logic with secure-by-default behavior provides superior assurances. While that would indeed have prevented CVE-2016-2178, our work shows that runtime secure-by-default is still not enough: simply the presence of known SCA-vulnerable code alongside SCA-hardened code poses a security threat. For example, in this light, in our Section 3.1 vulnerability the zero cofactor masquerades as a virtual BN_FLG_CONSTTIME, since the exploited code path is oblivious to the flag's value by design.</p><p>Mitigations. As part of the responsible disclosure process, we notified OpenSSL and mbedTLS of our findings. At the same time, we made several FOSS contributions to help mitigate these issues in OpenSSL, who assigned CVE-2019-1547 based on our work. For the Section 3.1 vulnerability, we implemented a fix that manually computes the cofactor from the field cardinality and generator order using the Hasse Bound. This works for all standards-compliant curves-named or with explicit parameters. To mitigate the vulnerabilities in Section 3.2 and Section 3.3, we submitted simple patches that set the BN_FLG_CONSTTIME correctly, steering the computations to existing SCA-hardened code. Moreover, we replaced the variable-time GCD function in OpenSSL by a constanttime implementation 15 based on the work by Bernstein and Yang <ref type="bibr" target="#b15">[16]</ref>. To further reduce the SCA attack surface, we implemented changes <ref type="bibr" target="#b15">16</ref> in the way OpenSSL creates EC key abstractions when the associated curve is defined by explicit parameters. The explicit parameters are matched against the internal table of known curves, switching to an internal named curve representation for matches, ultimately enabling the use of specialized implementations where available. Finally, we integrated the new Triggerflow unit tests <ref type="figure" target="#fig_2">(Figure 1</ref>). Applying all these fixes across non-EOL OpenSSL branches as well as the development branch, no Triggerflow POIs are subsequently triggered, indicated the patches are effective.</p><p>Astute readers may notice the above fixes do not remove the vulnerable functions in question. In general, indeed this is one option, but such a strategy requires analysis on a case-bycase basis. These are real-world products that come with realworld performance constraints. For example, an SCA-secure modular exponentiation function that protects both the length and values of the exponent can likely meet the performance requirements for e.g. DSA signing, but not RSA verification with a short, low-weight, and public exponent. This is the main reason why libraries often feature multiple versions of the same functionality with different security characteristics.</p><p>Future work. In Section 4.1, discussing the lattice formulation for our attack, we highlight an increased resilience to lattic errors compared to similar previous works. We note here that an analysis of error resilience of different lattice constructions and of strategies to increase the overall success rate of lattice attacks in the presence of errors in collected traces would constitute a valuable future contribution to this area of research.</p><p>Our vulnerabilities in Section 3 cover only a very small subset of possible inputs, combinations, architectures, and settings. Another interesting research question is how to extend test coverage in a reasonable way, even considering other libraries.</p></div><figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_0"><head></head><label></label><figDesc>p = d mod p, d q = d mod q, i q = q −1 mod p (3)</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_1"><head></head><label></label><figDesc>→ 3 sed -i 's/\x25\x51\x02\x01\x01/\x25\x51\x02\x01\x00/' p256.der 4 debug openssl dgst -sha256 -sign p256.der -keyform DER -out /dev/null /etc/lsb-release → 1 # DSA with PVK key format 2 openssl genpkey -genparam -algorithm DSA -out dsa.params -pkeyopt dsa_paramgen_bits:1024 -pkeyopt dsa_paramgen_q_bits:160 → 3 debug openssl genpkey -paramfile dsa.params -out dsa.pkey 4 debug openssl dsa -in dsa.pkey -outform PVK -pvk-none -out dsa.pvk 5 debug openssl dgst -sha1 -sign dsa.pvk -keyform PVK -out /dev/null /etc/lsb-release → 1 # DSA with MSBLOB key format 2 openssl genpkey -genparam -algorithm DSA -out dsa.params -pkeyopt dsa_paramgen_bits:1024 -pkeyopt dsa_paramgen_q_bits:160 → 3 debug openssl genpkey -paramfile dsa.params -out dsa.pkey 4 debug openssl dsa -in dsa.pkey -outform MS\ PRIVATEKEYBLOB -out dsa.blob 5 debug openssl dgst -sha1 -sign dsa.blob -keyform MS\ PRIVATEKEYBLOB -out /dev/null /etc/lsb-release → 1 # RSA key validation in OpenSSL 2 openssl genrsa -out rsa.pem 2048 3 debug openssl rsa -in rsa.pem -check 4 debug openssl pkey -in rsa.pem -check 1 # RSA key loading in mbedTLS 2 create_rsa_pem.sh without_d &gt; custom.pem 3 debug mbedtls_pk_sign custom.pem</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_2"><head>Figure 1 :</head><label>1</label><figDesc>Figure 1: New Triggerflow unit tests.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_3"><head>6Figure 2 :</head><label>2</label><figDesc>Figure 2: L1 dcache trace showing distinctive access patterns to pre-computed multipliers in cache sets 6-8, 9-11, 13-16, 15-17, 22-24, 25-27, 28-30 during DSA public key computation.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_4"><head></head><label></label><figDesc>Figure 3: Sequence of right-shifts and subtractions from a FLUSH+RELOAD attack targeting mbedTLS modular inversion.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_5"><head>Figure 4 :</head><label>4</label><figDesc>Figure 4: Direct correlation between wall-clock execution time of ECDSA signature generation and the bitlength of the nonce. Plots from left to right correspond to legend keys from top to bottom. Measured on NIST P-256 in OpenSSL on a Pine64-LTS, bypassing all SCA hardening countermeasures via a private key parsing trigger.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_6"><head>Figure 5 :</head><label>5</label><figDesc>Figure 5: Experiment setup capturing EM traces using Picoscope USB oscilloscope with the Langer EM probe positioned on the Pine64-LTS SoC: a TSP server connected via Ethernet serving requests over HTTP.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_7"><head>Figure 6 :</head><label>6</label><figDesc>Figure 6: Four different EM traces showing the last Add (A) operations relative to the soft end trigger. The distance in terms of samples between the last Add and trigger gives the number of Double (D) operations. Top to Bottom: Trace ends with an A, AD, ADD, ADDD.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_0" validated="false"><head>Table 1 :</head><label>1</label><figDesc></figDesc><table>Report groups for the 256 private keys. 
Group 
Number of keys 
Invalid 
216 
Public 
8 
POI-hit (CRT) 
16 
POI-hit (CRT &amp; d) 
16 

</table></figure>

			<note place="foot" n="1"> https://docs.microsoft.com/en-us/windows/win32/ seccrypto/base-provider-key-blobs</note>

			<note place="foot" n="2"> Leetspeak for &quot;bobsfile&quot;! 3 http://justsolve.archiveteam.org/wiki/PVK</note>

			<note place="foot" n="5"> https://github.com/GOSTSec/gostcoin 2026 29th USENIX Security Symposium USENIX Association</note>

			<note place="foot" n="8"> https://docs.microsoft.com/en-us/windows-hardware/ drivers/devtest/tools-for-signing-drivers 9 https://ebourg.github.io/jsign/ 10 https://sourceforge.net/projects/osslsigncode/files/ osslsigncode/ 11 https://www.mono-project.com/</note>

			<note place="foot" n="13"> https://github.com/kakwa/uts-server</note>

			<note place="foot" n="14"> https://minerva.crocs.fi.muni.cz/</note>

			<note place="foot" n="15"> https://github.com/openssl/openssl/pull/10122 16 https://github.com/openssl/openssl/pull/9808</note>
		</body>
		<back>

			<div type="acknowledgement">
			</div>

			<div type="references">

				<listBibl>

<biblStruct xml:id="b0">
	<monogr>
		<title level="m" type="main">Security requirements for cryptographic modules. FIPS PUB 140-2, National Institute of Standards and Technology</title>
		<idno type="doi">10.6028/NIST.FIPS</idno>
		<ptr target="https://doi.org/10.6028/NIST.FIPS" />
		<imprint>
			<date type="published" when="2001-05" />
			<biblScope unit="page" from="140" to="142" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b1">
	<monogr>
				<ptr target="http://www.secg.org/sec1-v2.pdf" />
		<title level="m">SEC 1: Elliptic Curve Cryptography. SEC 1, Standards for Efficient Cryptography Group</title>
		<imprint>
			<date type="published" when="2009-05" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b2">
	<analytic>
		<title level="a" type="main">Survey for performance &amp; security problems of passive side-channel attacks countermeasures in ECC</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Rodrigo</forename><surname>Abarzúa</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Claudio</forename><forename type="middle">Valencia</forename><surname>Cordero</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Julio</forename><forename type="middle">López</forename><surname>Hernandez</surname></persName>
		</author>
		<ptr target="https://eprint.iacr.org/2019/010" />
	</analytic>
	<monogr>
		<title level="j">IACR Cryptology ePrint Archive</title>
		<imprint>
			<biblScope unit="issue">10</biblScope>
			<date type="published" when="2019" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b3">
	<analytic>
		<title level="a" type="main">New branch prediction vulnerabilities in OpenSSL and necessary software countermeasures</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Onur</forename><surname>Acıiçmez</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Shay</forename><surname>Gueron</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Jean-Pierre</forename><surname>Seifert</surname></persName>
		</author>
		<idno>1007/978-3-540-77272-9_12</idno>
		<ptr target="https://doi.org/10" />
	</analytic>
	<monogr>
		<title level="m">IMACC</title>
		<imprint>
			<publisher>Springer</publisher>
			<date type="published" when="2007" />
			<biblScope unit="volume">4887</biblScope>
			<biblScope unit="page" from="185" to="203" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b4">
	<analytic>
		<title level="a" type="main">The EM side-channel(s)</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Dakshi</forename><surname>Agrawal</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Bruce</forename><surname>Archambeault</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Josyula</forename><forename type="middle">R</forename><surname>Rao</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Pankaj</forename><surname>Rohatgi</surname></persName>
		</author>
		<idno type="doi">10.1007/3-540-36400-5_4</idno>
		<ptr target="https://doi.org/10.1007/3-540-36400-5_4" />
	</analytic>
	<monogr>
		<title level="m">CHES, volume 2523 of LNCS</title>
		<imprint>
			<publisher>Springer</publisher>
			<date type="published" when="2002" />
			<biblScope unit="page" from="29" to="45" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b5">
	<analytic>
		<title level="a" type="main">When one vulnerable primitive turns viral: Novel single-trace attacks on ECDSA and RSA</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Alejandro</forename><surname>Cabrera Aldaya</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Billy</forename><forename type="middle">Bob</forename><surname>Brumley</surname></persName>
		</author>
		<idno type="doi">10.13154/tches.v2020.i2</idno>
		<ptr target="https://doi.org/10.13154/tches.v2020.i2" />
	</analytic>
	<monogr>
		<title level="j">IACR Trans. Cryptogr. Hardw. Embed. Syst</title>
		<imprint>
			<biblScope unit="volume">2020</biblScope>
			<biblScope unit="issue">2</biblScope>
			<biblScope unit="page" from="196" to="221" />
			<date type="published" when="2020" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b6">
	<analytic>
		<title level="a" type="main">SPA vulnerabilities of the binary extended Euclidean algorithm</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Alejandro</forename><surname>Cabrera Aldaya</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Alejandro</forename><forename type="middle">J</forename><surname>Cabrera Sarmiento</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Santiago</forename><surname>Sánchez-Solano</surname></persName>
		</author>
		<idno type="doi">10.1007/s13389-016-0135-4</idno>
		<ptr target="https://doi.org/10.1007/s13389-016-0135-4" />
	</analytic>
	<monogr>
		<title level="j">J. Cryptographic Engineering</title>
		<imprint>
			<biblScope unit="volume">7</biblScope>
			<biblScope unit="issue">4</biblScope>
			<biblScope unit="page" from="273" to="285" />
			<date type="published" when="2017" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b7">
	<analytic>
		<title level="a" type="main">Sidechannel analysis of the modular inversion step in the RSA key generation algorithm</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Alejandro</forename><surname>Cabrera Aldaya</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Cuiman</forename><surname>Márquez</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Alejandro</forename><forename type="middle">J</forename><surname>Cabrera Sarmiento</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Santiago</forename><surname>Sánchez-Solano</surname></persName>
		</author>
		<idno type="doi">10.1002/cta.2283</idno>
		<ptr target="https://doi.org/10.1002/cta.2283" />
	</analytic>
	<monogr>
		<title level="j">I. J. Circuit Theory and Applications</title>
		<imprint>
			<biblScope unit="volume">45</biblScope>
			<biblScope unit="issue">2</biblScope>
			<biblScope unit="page" from="199" to="213" />
			<date type="published" when="2017" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b8">
	<analytic>
		<title level="a" type="main">Sohaib ul Hassan, Cesar Pereida García, and Nicola Tuveri</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Alejandro</forename><surname>Cabrera</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Aldaya</forename></persName>
		</author>
		<idno type="doi">10.1109/SP.2019.00066</idno>
		<ptr target="https://doi.org/10.1109/SP.2019.00066" />
	</analytic>
	<monogr>
		<title level="m">IEEE S&amp;P</title>
		<meeting><address><addrLine>Billy Bob Brumley</addrLine></address></meeting>
		<imprint>
			<publisher>IEEE</publisher>
			<date type="published" when="2019" />
			<biblScope unit="page" from="870" to="887" />
		</imprint>
	</monogr>
	<note>Port contention for fun and profit</note>
</biblStruct>

<biblStruct xml:id="b9">
	<analytic>
		<title level="a" type="main">Cache-timing attacks on RSA key generation</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Alejandro</forename><surname>Cabrera Aldaya</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Cesar</forename><forename type="middle">Pereida</forename><surname>García</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Luis Manuel Alvarez</forename><surname>Tapia</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Billy</forename><forename type="middle">Bob</forename><surname>Brumley</surname></persName>
		</author>
		<idno type="doi">10.13154/tches.v2019.i4</idno>
		<ptr target="https://doi.org/10.13154/tches.v2019.i4" />
	</analytic>
	<monogr>
		<title level="j">IACR Trans. Cryptogr. Hardw. Embed. Syst</title>
		<imprint>
			<biblScope unit="volume">2019</biblScope>
			<biblScope unit="issue">4</biblScope>
			<biblScope unit="page" from="213" to="242" />
			<date type="published" when="2019" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b10">
	<analytic>
		<title level="a" type="main">Amplifying side channels through performance degradation</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Thomas</forename><surname>Allan</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Billy</forename><forename type="middle">Bob</forename><surname>Brumley</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Katrina</forename><forename type="middle">E</forename><surname>Falkner</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Joop</forename><surname>Van De Pol</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Yuval</forename><surname>Yarom</surname></persName>
		</author>
		<idno type="doi">10.1145/2991079.2991084</idno>
		<ptr target="http://doi.acm.org/10.1145/2991079.2991084" />
	</analytic>
	<monogr>
		<title level="m">ACSAC</title>
		<imprint>
			<publisher>ACM</publisher>
			<date type="published" when="2016" />
			<biblScope unit="page" from="422" to="435" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b11">
	<analytic>
		<title level="a" type="main">Horizontal collision correlation attack on elliptic curves -extended version</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Aurélie</forename><surname>Bauer</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Éliane</forename><surname>Jaulmes</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Emmanuel</forename><surname>Prouff</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Jean-René</forename><surname>Reinhard</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Justine</forename><surname>Wild</surname></persName>
		</author>
		<idno type="doi">10.1007/s12095-014-0111-8</idno>
		<ptr target="https://doi.org/10.1007/s12095-014-0111-8" />
	</analytic>
	<monogr>
		<title level="j">Cryptography and Communications</title>
		<imprint>
			<biblScope unit="volume">7</biblScope>
			<biblScope unit="issue">1</biblScope>
			<biblScope unit="page" from="91" to="119" />
			<date type="published" when="2015" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b12">
	<analytic>
		<title level="a" type="main">Side-channel analysis of Weierstrass and Koblitz curve ECDSA on Android smartphones</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Pierre</forename><surname>Belgarric</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Pierre-Alain</forename><surname>Fouque</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Gilles</forename><surname>Macario-Rat</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Mehdi</forename><surname>Tibouchi</surname></persName>
		</author>
		<idno type="doi">10.1007/978-3-319-29485-8_14</idno>
		<ptr target="https://doi.org/10.1007/978-3-319-29485-8_14" />
	</analytic>
	<monogr>
		<title level="m">CT-RSA, volume 9610 of LNCS</title>
		<imprint>
			<publisher>Springer</publisher>
			<date type="published" when="2016" />
			<biblScope unit="page" from="236" to="252" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b13">
	<analytic>
		<title level="a" type="main">Just a Little Bit&quot;: A small amount of side channel can go a long way</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Naomi</forename><surname>Benger</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Joop</forename><surname>Van De Pol</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Nigel</forename><forename type="middle">P</forename><surname>Smart</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Yuval</forename><surname>Yarom</surname></persName>
		</author>
		<idno type="doi">10.1007/978-3-662-44709-3_5</idno>
		<ptr target="https://doi.org/10.1007/978-3-662-44709-3_5" />
	</analytic>
	<monogr>
		<title level="m">CHES</title>
		<imprint>
			<publisher>Springer</publisher>
			<date type="published" when="2014" />
			<biblScope unit="volume">8731</biblScope>
			<biblScope unit="page" from="75" to="92" />
		</imprint>
	</monogr>
	<note>Ooh Aah</note>
</biblStruct>

<biblStruct xml:id="b14">
	<monogr>
		<title level="m" type="main">Cache-timing attacks on AES</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Daniel</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Bernstein</surname></persName>
		</author>
		<ptr target="http://cr.yp.to/papers.html#cachetiming" />
		<imprint>
			<date type="published" when="2005" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b15">
	<analytic>
		<title level="a" type="main">Fast constant-time gcd computation and modular inversion</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Daniel</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Bo-Yin</forename><surname>Bernstein</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Yang</surname></persName>
		</author>
		<idno type="doi">10.13154/tches.v2019.i3.340-398</idno>
		<ptr target="https://doi.org/10.13154/tches.v2019.i3.340-398" />
	</analytic>
	<monogr>
		<title level="j">IACR Trans. Cryptogr. Hardw. Embed. Syst</title>
		<imprint>
			<biblScope unit="volume">2019</biblScope>
			<biblScope unit="issue">3</biblScope>
			<biblScope unit="page" from="340" to="398" />
			<date type="published" when="2019" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b16">
	<analytic>
		<title level="a" type="main">Sliding right into disaster: Left-to-right sliding windows leak</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Daniel</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Joachim</forename><surname>Bernstein</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Daniel</forename><surname>Breitner</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Leon</forename><forename type="middle">Groot</forename><surname>Genkin</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Nadia</forename><surname>Bruinderink</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Tanja</forename><surname>Heninger</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Christine</forename><surname>Lange</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Yuval</forename><surname>Van Vredendaal</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Yarom</surname></persName>
		</author>
		<idno type="doi">10.1007/978-3-319-66787-4_27</idno>
		<ptr target="https://doi.org/10.1007/978-3-319-66787-4_27" />
	</analytic>
	<monogr>
		<title level="m">CHES</title>
		<imprint>
			<publisher>Springer</publisher>
			<date type="published" when="2017" />
			<biblScope unit="page" from="555" to="576" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b17">
	<analytic>
		<title level="a" type="main">Hardness of computing the most significant bits of secret keys in Diffie-Hellman and related schemes</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Dan</forename><surname>Boneh</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Ramarathnam</forename><surname>Venkatesan</surname></persName>
		</author>
		<idno type="doi">10.1007/3-540-68697-5_11</idno>
		<ptr target="https://doi.org/10.1007/3-540-68697-5_11" />
	</analytic>
	<monogr>
		<title level="m">CRYPTO, volume 1109 of LNCS</title>
		<imprint>
			<publisher>Springer</publisher>
			<date type="published" when="1996" />
			<biblScope unit="page" from="129" to="142" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b18">
	<analytic>
		<title level="a" type="main">Correlation power analysis with a leakage model</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Eric</forename><surname>Brier</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Christophe</forename><surname>Clavier</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Francis</forename><surname>Olivier</surname></persName>
		</author>
		<idno type="doi">10.1007/978-3-540-28632-5_2</idno>
		<ptr target="https://doi.org/10.1007/978-3-540-28632-5_2" />
	</analytic>
	<monogr>
		<title level="m">CHES</title>
		<imprint>
			<publisher>Springer</publisher>
			<date type="published" when="2004" />
			<biblScope unit="volume">3156</biblScope>
			<biblScope unit="page" from="16" to="29" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b19">
	<analytic>
		<title level="a" type="main">Faster software for fast endomorphisms</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Billy</forename><forename type="middle">Bob</forename><surname>Brumley</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">COSADE</title>
		<imprint>
			<biblScope unit="volume">9064</biblScope>
			<biblScope unit="page">127</biblScope>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b20">
	<monogr>
		<title/>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Springer</surname></persName>
		</author>
		<ptr target="https://doi.org/10.1007/" />
		<imprint>
			<date type="published" when="2015" />
			<biblScope unit="page" from="978" to="981" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b21">
	<analytic>
		<title level="a" type="main">Cache-timing template attacks</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Billy</forename><forename type="middle">Bob</forename><surname>Brumley</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Risto</forename><forename type="middle">M</forename><surname>Hakala</surname></persName>
		</author>
		<idno type="doi">10.1007/978-3-642-10366-7_39</idno>
		<ptr target="https://doi.org/10.1007/978-3-642-10366-7_39" />
	</analytic>
	<monogr>
		<title level="m">ASIACRYPT</title>
		<imprint>
			<publisher>Springer</publisher>
			<date type="published" when="2009" />
			<biblScope unit="volume">5912</biblScope>
			<biblScope unit="page" from="667" to="684" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b22">
	<analytic>
		<title level="a" type="main">Remote timing attacks are still practical</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Billy</forename><forename type="middle">Bob</forename><surname>Brumley</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Nicola</forename><surname>Tuveri</surname></persName>
		</author>
		<idno type="doi">10.1007/978-3-642-23822-2_20</idno>
		<ptr target="https://doi.org/10.1007/978-3-642-23822-2_20" />
	</analytic>
	<monogr>
		<title level="m">ESORICS</title>
		<imprint>
			<publisher>Springer</publisher>
			<date type="published" when="2011" />
			<biblScope unit="volume">6879</biblScope>
			<biblScope unit="page" from="355" to="371" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b23">
	<analytic>
		<title level="a" type="main">Remote timing attacks are practical</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">David</forename><surname>Brumley</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Dan</forename><surname>Boneh</surname></persName>
		</author>
		<ptr target="https://www.usenix.org/conference/12th-usenix-security-symposium/remote-timing-attacks-are-practical" />
	</analytic>
	<monogr>
		<title level="m">USENIX Sec. USENIX Association</title>
		<imprint>
			<date type="published" when="2003" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b24">
	<analytic>
		<title level="a" type="main">Fallout: Leaking data on meltdown-resistant CPUs</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Claudio</forename><surname>Canella</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Daniel</forename><surname>Genkin</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Lukas</forename><surname>Giner</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Daniel</forename><surname>Gruss</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Moritz</forename><surname>Lipp</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Marina</forename><surname>Minkin</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Daniel</forename><surname>Moghimi</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Frank</forename><surname>Piessens</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Michael</forename><surname>Schwarz</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Berk</forename><surname>Sunar</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Jo</forename><surname>Van Bulck</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Yuval</forename><surname>Yarom</surname></persName>
		</author>
		<idno type="doi">10.1145/3319535.3363219</idno>
		<ptr target="https://doi.org/10.1145/3319535.3363219" />
	</analytic>
	<monogr>
		<title level="m">ACM CCS</title>
		<imprint>
			<publisher>ACM</publisher>
			<date type="published" when="2019" />
			<biblScope unit="page" from="769" to="784" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b25">
	<analytic>
		<title level="a" type="main">Template attacks</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Suresh</forename><surname>Chari</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Josyula</forename><forename type="middle">R</forename><surname>Rao</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Pankaj</forename><surname>Rohatgi</surname></persName>
		</author>
		<idno type="doi">10.1007/3-540-36400-5_3</idno>
		<ptr target="https://doi.org/10.1007/3-540-36400-5_3" />
	</analytic>
	<monogr>
		<title level="m">CHES, volume 2523 of LNCS</title>
		<imprint>
			<publisher>Springer</publisher>
			<date type="published" when="2002" />
			<biblScope unit="page" from="13" to="28" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b26">
	<analytic>
		<title level="a" type="main">Horizontal correlation analysis on exponentiation</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Christophe</forename><surname>Clavier</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Benoit</forename><surname>Feix</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Georges</forename><surname>Gagnerot</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Mylène</forename><surname>Roussellet</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Vincent</forename><surname>Verneuil</surname></persName>
		</author>
		<idno type="doi">10.1007/978-3-642-17650-0_5</idno>
		<ptr target="https://doi.org/10.1007/978-3-642-17650-0_5" />
	</analytic>
	<monogr>
		<title level="m">ICICS</title>
		<imprint>
			<publisher>Springer</publisher>
			<date type="published" when="2010" />
			<biblScope unit="volume">6476</biblScope>
			<biblScope unit="page" from="46" to="61" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b27">
	<analytic>
		<title level="a" type="main">A synthesis of sidechannel attacks on elliptic curve cryptography in smart-cards</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Jean-Luc</forename><surname>Danger</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Sylvain</forename><surname>Guilley</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Philippe</forename><surname>Hoogvorst</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Cé-Dric</forename><surname>Murdica</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">David</forename><surname>Naccache</surname></persName>
		</author>
		<idno type="doi">10.1007/s13389-013-0062-6</idno>
		<ptr target="https://doi.org/10.1007/s13389-013-0062-6" />
	</analytic>
	<monogr>
		<title level="j">J. Cryptographic Engineering</title>
		<imprint>
			<biblScope unit="volume">3</biblScope>
			<biblScope unit="issue">4</biblScope>
			<biblScope unit="page" from="241" to="265" />
			<date type="published" when="2013" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b28">
	<analytic>
		<title level="a" type="main">CacheAudit: A tool for the static analysis of cache side channels</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Goran</forename><surname>Doychev</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Boris</forename><surname>Köpf</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Laurent</forename><surname>Mauborgne</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Jan</forename><surname>Reineke</surname></persName>
		</author>
		<idno type="doi">10.1145/2756550</idno>
		<idno>4:1-4:32</idno>
		<ptr target="https://doi.org/10.1145/2756550" />
	</analytic>
	<monogr>
		<title level="j">ACM Trans. Inf. Syst. Secur</title>
		<imprint>
			<biblScope unit="volume">18</biblScope>
			<biblScope unit="issue">1</biblScope>
			<date type="published" when="2015" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b29">
	<analytic>
		<title level="a" type="main">Dismantling real-world ECC with horizontal and vertical template attacks</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Margaux</forename><surname>Dugardin</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Louiza</forename><surname>Papachristodoulou</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Zakaria</forename><surname>Najm</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Lejla</forename><surname>Batina</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Jean-Luc</forename><surname>Danger</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Sylvain</forename><surname>Guilley</surname></persName>
		</author>
		<idno type="doi">10.1007/978-3-319-43283-0_6</idno>
		<ptr target="https://doi.org/10.1007/978-3-319-43283-0_6" />
	</analytic>
	<monogr>
		<title level="m">COSADE, volume 9689 of LNCS</title>
		<imprint>
			<publisher>Springer</publisher>
			<date type="published" when="2016" />
			<biblScope unit="page" from="88" to="108" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b30">
	<analytic>
		<title level="a" type="main">Attacking OpenSSL implementation of ECDSA with a few signatures</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Wenbo</forename><surname>Shuqin Fan</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Qingfeng</forename><surname>Wang</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Cheng</surname></persName>
		</author>
		<idno type="doi">10.1145/2976749.2978400</idno>
		<ptr target="https://doi.org/10.1145/2976749.2978400" />
	</analytic>
	<monogr>
		<title level="m">ACM CCS</title>
		<imprint>
			<publisher>ACM</publisher>
			<date type="published" when="2016" />
			<biblScope unit="page" from="1505" to="1515" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b31">
	<analytic>
		<title level="a" type="main">Tempest: A signal problem</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Jeffrey</forename><surname>Friedman</surname></persName>
		</author>
		<ptr target="https://www.nsa.gov/Portals/70/documents/news-features/declassified-documents/cryptologic-spectrum/tempest.pdf" />
	</analytic>
	<monogr>
		<title level="j">NSA Cryptologic Spectrum</title>
		<imprint>
			<biblScope unit="volume">2</biblScope>
			<biblScope unit="issue">3</biblScope>
			<biblScope unit="page" from="26" to="30" />
			<date type="published" when="1972" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b32">
	<analytic>
		<title level="a" type="main">Lattice enumeration using extreme pruning</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Nicolas</forename><surname>Gama</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Q</forename><surname>Phong</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Oded</forename><surname>Nguyen</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Regev</surname></persName>
		</author>
		<idno type="doi">10.1007/978-3-642-13190-5_13</idno>
		<ptr target="https://doi.org/10.1007/978-3-642-13190-5_13" />
	</analytic>
	<monogr>
		<title level="m">EUROCRYPT</title>
		<imprint>
			<publisher>Springer</publisher>
			<date type="published" when="2010" />
			<biblScope unit="volume">6110</biblScope>
			<biblScope unit="page" from="257" to="278" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b33">
	<analytic>
		<title level="a" type="main">A survey of microarchitectural timing attacks and countermeasures on contemporary hardware</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Qian</forename><surname>Ge</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Yuval</forename><surname>Yarom</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">David</forename><surname>Cock</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Gernot</forename><surname>Heiser</surname></persName>
		</author>
		<idno type="doi">10.1007/s13389-016-0141-6</idno>
		<ptr target="https://doi.org/10.1007/s13389-016-0141-6" />
	</analytic>
	<monogr>
		<title level="j">J. Cryptographic Engineering</title>
		<imprint>
			<biblScope unit="volume">8</biblScope>
			<biblScope unit="issue">1</biblScope>
			<biblScope unit="page" from="1" to="27" />
			<date type="published" when="2018" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b34">
	<analytic>
		<title level="a" type="main">RSA key extraction via low-bandwidth acoustic cryptanalysis</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Daniel</forename><surname>Genkin</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Adi</forename><surname>Shamir</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Eran</forename><surname>Tromer</surname></persName>
		</author>
		<idno type="doi">10.1007/978-3-662-44371-2_25</idno>
		<ptr target="https://doi.org/10.1007/978-3-662-44371-2_25" />
	</analytic>
	<monogr>
		<title level="m">CRYPTO</title>
		<imprint>
			<publisher>Springer</publisher>
			<date type="published" when="2014" />
			<biblScope unit="volume">8616</biblScope>
			<biblScope unit="page" from="444" to="461" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b35">
	<analytic>
		<title level="a" type="main">Stealing keys from PCs using a radio: Cheap electromagnetic attacks on windowed exponentiation</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Daniel</forename><surname>Genkin</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Lev</forename><surname>Pachmanov</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Itamar</forename><surname>Pipman</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Eran</forename><surname>Tromer</surname></persName>
		</author>
		<idno type="doi">10.1007/978-3-662-48324-4_11</idno>
		<ptr target="https://doi.org/10.1007/978-3-662-48324-4_11" />
	</analytic>
	<monogr>
		<title level="m">CHES</title>
		<imprint>
			<publisher>Springer</publisher>
			<date type="published" when="2015" />
			<biblScope unit="volume">9293</biblScope>
			<biblScope unit="page" from="207" to="228" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b36">
	<analytic>
		<title level="a" type="main">Get your hands off my laptop: physical side-channel key-extraction attacks on PCs -extended version</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Daniel</forename><surname>Genkin</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Itamar</forename><surname>Pipman</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Eran</forename><surname>Tromer</surname></persName>
		</author>
		<idno type="doi">10.1007/s13389-015-0100-7</idno>
		<ptr target="https://doi.org/10.1007/s13389-015-0100-7" />
	</analytic>
	<monogr>
		<title level="j">J. Cryptographic Engineering</title>
		<imprint>
			<biblScope unit="volume">5</biblScope>
			<biblScope unit="issue">2</biblScope>
			<biblScope unit="page" from="95" to="112" />
			<date type="published" when="2015" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b37">
	<analytic>
		<title level="a" type="main">ECDH key-extraction via low-bandwidth electromagnetic attacks on PCs</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Daniel</forename><surname>Genkin</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Lev</forename><surname>Pachmanov</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Itamar</forename><surname>Pipman</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Eran</forename><surname>Tromer</surname></persName>
		</author>
		<idno type="doi">10.1007/978-3-319-29485-8_13</idno>
		<ptr target="https://doi.org/10.1007/978-3-319-29485-8_13" />
	</analytic>
	<monogr>
		<title level="m">CT-RSA, volume 9610 of LNCS</title>
		<imprint>
			<publisher>Springer</publisher>
			<date type="published" when="2016" />
			<biblScope unit="page" from="219" to="235" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b38">
	<analytic>
		<title level="a" type="main">ECDSA key extraction from mobile devices via nonintrusive physical side channels</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Daniel</forename><surname>Genkin</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Lev</forename><surname>Pachmanov</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Itamar</forename><surname>Pipman</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Eran</forename><surname>Tromer</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Yuval</forename><surname>Yarom</surname></persName>
		</author>
		<idno type="doi">10.1145/2976749.2978353</idno>
		<ptr target="http://doi.acm.org/10.1145/2976749.2978353" />
	</analytic>
	<monogr>
		<title level="m">ACM CCS</title>
		<imprint>
			<publisher>ACM</publisher>
			<date type="published" when="2016" />
			<biblScope unit="page" from="1626" to="1638" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b39">
	<analytic>
		<title level="a" type="main">Publickey cryptosystems from lattice reduction problems</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Oded</forename><surname>Goldreich</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Shafi</forename><surname>Goldwasser</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Shai</forename><surname>Halevi</surname></persName>
		</author>
		<idno type="doi">10.1007/BFb0052231</idno>
		<ptr target="https://doi.org/10.1007/BFb0052231" />
	</analytic>
	<monogr>
		<title level="m">CRYPTO</title>
		<imprint>
			<publisher>Springer</publisher>
			<date type="published" when="1997" />
			<biblScope unit="volume">1294</biblScope>
			<biblScope unit="page" from="112" to="131" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b40">
	<analytic>
		<title level="a" type="main">Triggerflow: Regression testing by advanced execution path inspection</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Cesar</forename><forename type="middle">Pereida</forename><surname>Iaroslav Gridin</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Nicola</forename><surname>García</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Billy</forename><forename type="middle">Bob</forename><surname>Tuveri</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Brumley</surname></persName>
		</author>
		<idno type="doi">10.1007/978-3-030-22038-9_16</idno>
		<ptr target="https://doi.org/10.1007/978-3-030-22038-9_16" />
	</analytic>
	<monogr>
		<title level="m">DIMVA, volume 11543 of LNCS</title>
		<imprint>
			<publisher>Springer</publisher>
			<date type="published" when="2019" />
			<biblScope unit="page" from="330" to="350" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b41">
	<analytic>
		<title level="a" type="main">Cache template attacks: Automating attacks on inclusive last-level caches</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Daniel</forename><surname>Gruss</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Raphael</forename><surname>Spreitzer</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Stefan</forename><surname>Mangard</surname></persName>
		</author>
		<ptr target="https" />
	</analytic>
	<monogr>
		<title level="m">USENIX Sec</title>
		<imprint>
			<publisher>USENIX Association</publisher>
			<date type="published" when="2015" />
			<biblScope unit="page" from="897" to="912" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b42">
	<analytic>
		<title level="a" type="main">Flush+flush: A fast and stealthy cache attack</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Daniel</forename><surname>Gruss</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Clémentine</forename><surname>Maurice</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Klaus</forename><surname>Wagner</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Stefan</forename><surname>Mangard</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">DIMVA, volume 9721 of LNCS</title>
		<imprint>
			<biblScope unit="page">279</biblScope>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b43">
	<monogr>
		<title/>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Springer</surname></persName>
		</author>
		<idno type="doi">10.1007/978-3-319-40667-1_14</idno>
		<ptr target="https://doi.org/10.1007/978-3-319-40667-1_14" />
		<imprint>
			<date type="published" when="2016" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b44">
	<analytic>
		<title level="a" type="main">Fast prime field ellipticcurve cryptography with 256-bit primes</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Shay</forename><surname>Gueron</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Vlad</forename><surname>Krasnov</surname></persName>
		</author>
		<idno type="doi">10.1007/s13389-014-0090-x</idno>
		<ptr target="https://doi.org/10.1007/s13389-014-0090-x" />
	</analytic>
	<monogr>
		<title level="j">J. Cryptographic Engineering</title>
		<imprint>
			<biblScope unit="volume">5</biblScope>
			<biblScope unit="issue">2</biblScope>
			<biblScope unit="page" from="141" to="151" />
			<date type="published" when="2015" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b45">
	<monogr>
		<title level="m" type="main">Cryptanalysis of RSA and its variants. Chapman &amp; Hall/CRC Cryptography and Network Security</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Jason</forename><surname>Hinek</surname></persName>
		</author>
		<idno type="doi">10.1201/9781420075199</idno>
		<idno>978-1-4200-7518-2</idno>
		<ptr target="https://doi.org/10.1201/9781420075199" />
		<imprint>
			<date type="published" when="2010" />
			<publisher>CRC Press</publisher>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b46">
	<monogr>
		<title level="m" type="main">Textual encodings of PKIX, PKCS, and CMS structures</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Simon</forename><surname>Josefsson</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Sean</forename><surname>Leonard</surname></persName>
		</author>
		<ptr target="https://datatracker.ietf.org/doc/rfc7468/" />
		<editor>RFC 7468, RFC Editor</editor>
		<imprint>
			<date type="published" when="2015-04" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b47">
	<analytic>
		<title level="a" type="main">Fast elliptic curve cryptography in OpenSSL</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Emilia</forename><surname>Käsper</surname></persName>
		</author>
		<idno type="doi">10.1007/978-3-642-29889-9_4</idno>
		<ptr target="https://doi.org/10.1007/978-3-642-29889-9_4" />
	</analytic>
	<monogr>
		<title level="m">Financial Cryptography Workshops</title>
		<imprint>
			<publisher>Springer</publisher>
			<date type="published" when="2011" />
			<biblScope unit="volume">7126</biblScope>
			<biblScope unit="page" from="27" to="39" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b48">
	<analytic>
		<title level="a" type="main">Attacking RSA-based sessions in SSL/TLS</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Vlastimil</forename><surname>Klíma</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Ondrej</forename><surname>Pokorný</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Tomás</forename><surname>Rosa</surname></persName>
		</author>
		<idno type="doi">10.1007/978-3-540-45238-6_33</idno>
		<ptr target="https://doi.org/10.1007/978-3-540-45238-6_33" />
	</analytic>
	<monogr>
		<title level="m">CHES, volume 2779 of LNCS</title>
		<imprint>
			<publisher>Springer</publisher>
			<date type="published" when="2003" />
			<biblScope unit="page" from="426" to="440" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b49">
	<analytic>
		<title level="a" type="main">Timing attacks on implementations of DiffieHellman, RSA, DSS, and other systems</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><surname>Paul</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Kocher</surname></persName>
		</author>
		<idno type="doi">10.1007/3-540-68697-5_9</idno>
		<ptr target="https://doi.org/10.1007/3-540-68697-5_9" />
	</analytic>
	<monogr>
		<title level="m">CRYPTO, volume 1109 of LNCS</title>
		<imprint>
			<publisher>Springer</publisher>
			<date type="published" when="1996" />
			<biblScope unit="page" from="104" to="113" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b50">
	<analytic>
		<title level="a" type="main">Differential power analysis</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><surname>Paul</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Joshua</forename><surname>Kocher</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Benjamin</forename><surname>Jaffe</surname></persName>
		</author>
		<idno type="doi">10.1007/3-540-48405-1_25</idno>
		<ptr target="https://doi.org/10.1007/3-540-48405-1_25" />
	</analytic>
	<monogr>
		<title level="m">CRYPTO, volume 1666 of LNCS</title>
		<imprint>
			<publisher>Springer</publisher>
			<date type="published" when="1999-06" />
			<biblScope unit="page" from="388" to="397" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b51">
	<analytic>
		<title level="a" type="main">SoC it to EM: ElectroMagnetic side-channel attacks on a complex System-on-Chip</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Jake</forename><surname>Longo</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Elke</forename><forename type="middle">De</forename><surname>Mulder</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Dan</forename><surname>Page</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Michael</forename><surname>Tunstall</surname></persName>
		</author>
		<idno type="doi">10.1007/978-3-662-48324-4_31</idno>
		<ptr target="https://doi.org/10.1007/978-3-662-48324-4_31" />
	</analytic>
	<monogr>
		<title level="m">CHES</title>
		<imprint>
			<publisher>Springer</publisher>
			<date type="published" when="2015" />
			<biblScope unit="volume">9293</biblScope>
			<biblScope unit="page" from="620" to="640" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b52">
	<monogr>
				<title level="m">ANSI X9.62-2005: Public Key Cryptography For The Financial Services Industry: The Elliptic Curve Digital Signature Algorithm (ECDSA). ANSI American National Standards Institute</title>
		<editor>Accredited Standards Committee X9</editor>
		<imprint>
			<date type="published" when="2005" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b53">
	<analytic>
		<title level="a" type="main">Examining smart-card security under the threat of power analysis attacks</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Thomas</forename><forename type="middle">S</forename><surname>Messerges</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Ezzy</forename><forename type="middle">A</forename><surname>Dabbish</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Robert</forename><forename type="middle">H</forename><surname>Sloan</surname></persName>
		</author>
		<idno type="doi">10.1109/TC.2002.1004593</idno>
		<ptr target="https://doi.org/10.1109/TC.2002.1004593" />
	</analytic>
	<monogr>
		<title level="j">IEEE Trans. Computers</title>
		<imprint>
			<biblScope unit="volume">51</biblScope>
			<biblScope unit="issue">5</biblScope>
			<biblScope unit="page" from="541" to="552" />
			<date type="published" when="2002" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b54">
	<analytic>
		<title level="a" type="main">Revisiting SSL/TLS implementations: New Bleichenbacher side channels and attacks</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Christopher</forename><surname>Meyer</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Juraj</forename><surname>Somorovsky</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Eugen</forename><surname>Weiss</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Jörg</forename><surname>Schwenk</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Sebastian</forename><surname>Schinzel</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Erik</forename><surname>Tews</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">USENIX Sec</title>
		<imprint>
			<publisher>USENIX Association</publisher>
			<date type="published" when="2014" />
			<biblScope unit="page" from="733" to="748" />
		</imprint>
	</monogr>
	<note>URL https</note>
</biblStruct>

<biblStruct xml:id="b55">
	<analytic>
		<title level="a" type="main">TPM-FAIL: TPM meets timing and lattice attacks</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Daniel</forename><surname>Moghimi</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Berk</forename><surname>Sunar</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Thomas</forename><surname>Eisenbarth</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Nadia</forename><surname>Heninger</surname></persName>
		</author>
		<ptr target="https://www.usenix.org/conference/usenixsecurity20/presentation/moghimi" />
	</analytic>
	<monogr>
		<title level="m">USENIX Sec. USENIX Association</title>
		<imprint>
			<date type="published" when="2020" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b56">
	<monogr>
		<title level="m" type="main">PKCS #1: RSA cryptography specifications version 2.2. RFC 8017, RFC Editor</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Kathleen</forename><surname>Moriarty</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Burt</forename><surname>Kaliski</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Jakob</forename><surname>Jonsson</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Andreas</forename><surname>Rusch</surname></persName>
		</author>
		<ptr target="https://datatracker.ietf.org/doc/rfc8017/" />
		<imprint>
			<date type="published" when="2016-11" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b57">
	<analytic>
		<title level="a" type="main">Degenerate curve attacks: extending invalid curve attacks to Edwards curves and other models</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Samuel</forename><surname>Neves</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Mehdi</forename><surname>Tibouchi</surname></persName>
		</author>
		<idno type="doi">10.1049/iet-ifs.2017.0075</idno>
		<ptr target="https://doi.org/10.1049/iet-ifs.2017.0075" />
	</analytic>
	<monogr>
		<title level="j">IET Information Security</title>
		<imprint>
			<biblScope unit="volume">12</biblScope>
			<biblScope unit="issue">3</biblScope>
			<biblScope unit="page" from="217" to="225" />
			<date type="published" when="2018" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b58">
	<analytic>
		<title level="a" type="main">The insecurity of the Digital Signature Algorithm with partially known nonces</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Q</forename><surname>Phong</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Igor</forename><forename type="middle">E</forename><surname>Nguyen</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Shparlinski</surname></persName>
		</author>
		<idno type="doi">10.1007/s00145-002-0021-3</idno>
		<ptr target="https://doi.org/10.1007/s00145-002-0021-3" />
	</analytic>
	<monogr>
		<title level="j">J. Cryptology</title>
		<imprint>
			<biblScope unit="volume">15</biblScope>
			<biblScope unit="issue">3</biblScope>
			<biblScope unit="page" from="151" to="176" />
			<date type="published" when="2002" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b59">
	<analytic>
		<title level="a" type="main">The insecurity of the Elliptic Curve Digital Signature Algorithm with partially known nonces</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Q</forename><surname>Phong</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Igor</forename><forename type="middle">E</forename><surname>Nguyen</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Shparlinski</surname></persName>
		</author>
		<idno type="doi">10.1023/A:1025436905711</idno>
		<ptr target="https://doi.org/10.1023/A:1025436905711" />
	</analytic>
	<monogr>
		<title level="j">Des. Codes Cryptogr</title>
		<imprint>
			<biblScope unit="volume">30</biblScope>
			<biblScope unit="issue">2</biblScope>
			<biblScope unit="page" from="201" to="217" />
			<date type="published" when="2003" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b60">
	<analytic>
		<title level="a" type="main">Cache attacks and countermeasures: The case of AES</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Arne</forename><surname>Dag</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Adi</forename><surname>Osvik</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Eran</forename><surname>Shamir</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Tromer</surname></persName>
		</author>
		<idno type="doi">10.1007/11605805_1</idno>
		<ptr target="https://doi.org/10.1007/11605805_1" />
	</analytic>
	<monogr>
		<title level="j">LNCS</title>
		<editor>CT-RSA</editor>
		<imprint>
			<biblScope unit="volume">3860</biblScope>
			<biblScope unit="page" from="1" to="20" />
			<date type="published" when="2006" />
			<publisher>Springer</publisher>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b61">
	<analytic>
		<title level="a" type="main">Cache missing for fun and profit</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Colin</forename><surname>Percival</surname></persName>
		</author>
		<ptr target="http://www.daemonology.net/papers/cachemissing.pdf" />
	</analytic>
	<monogr>
		<title level="m">BSDCan</title>
		<imprint>
			<date type="published" when="2005" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b62">
	<analytic>
		<title level="a" type="main">Constanttime callees with variable-time callers</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Cesar</forename><forename type="middle">Pereida</forename><surname>García</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Billy</forename><forename type="middle">Bob</forename><surname>Brumley</surname></persName>
		</author>
		<idno>978-1-931971-40-9</idno>
		<ptr target="https://www.usenix.org/conference/usenixsecurity17/technical-sessions/presentation/garcia" />
	</analytic>
	<monogr>
		<title level="m">USENIX Sec</title>
		<imprint>
			<date type="published" when="2017" />
			<biblScope unit="page" from="83" to="98" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b63">
	<analytic>
		<title level="a" type="main">Make sure DSA signing exponentiations really are constanttime</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Cesar</forename><forename type="middle">Pereida</forename><surname>García</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Billy</forename><forename type="middle">Bob</forename><surname>Brumley</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Yuval</forename><surname>Yarom</surname></persName>
		</author>
		<idno type="doi">10.1145/2976749.2978420</idno>
		<ptr target="http://doi.acm.org/10.1145/2976749.2978420" />
	</analytic>
	<monogr>
		<title level="m">ACM CCS</title>
		<imprint>
			<publisher>ACM</publisher>
			<date type="published" when="2016" />
			<biblScope unit="page" from="1639" to="1650" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b64">
	<monogr>
				<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Cesar</forename><forename type="middle">Pereida</forename><surname>García</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Nicola</forename><surname>Sohaib Ul Hassan</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Iaroslav</forename><surname>Tuveri</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Alejandro</forename><surname>Gridin</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Billy</forename><forename type="middle">Bob</forename><surname>Cabrera Aldaya</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Brumley</surname></persName>
		</author>
		<idno type="doi">10.5281/zenodo.3736311</idno>
		<ptr target="https://doi.org/10.5281/zenodo.3736311" />
		<title level="m">CVE-2019-1547: research data and tooling. Zenodo</title>
		<imprint>
			<date type="published" when="2020-04" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b65">
	<monogr>
		<title level="m" type="main">Additional cryptographic algorithms for use with GOST 28147-89, GOST R 34.10-94, GOST R 34.10-2001, and GOST R 34.11-94 algorithms</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Vladimir</forename><surname>Popov</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Serguei</forename><surname>Leontiev</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Igor</forename><surname>Kurepkin</surname></persName>
		</author>
		<ptr target="https://datatracker.ietf.org/doc/rfc4357/" />
		<editor>RFC 4357, RFC Editor</editor>
		<imprint>
			<date type="published" when="2006-01" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b66">
	<analytic>
		<title level="a" type="main">Power analysis attacks and countermeasures</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Thomas</forename><surname>Popp</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Stefan</forename><surname>Mangard</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Elisabeth</forename><surname>Oswald</surname></persName>
		</author>
		<idno type="doi">10.1109/MDT.2007.200</idno>
		<ptr target="https://doi.org/10.1109/MDT.2007.200" />
	</analytic>
	<monogr>
		<title level="j">IEEE Design &amp; Test of Computers</title>
		<imprint>
			<biblScope unit="volume">24</biblScope>
			<biblScope unit="issue">6</biblScope>
			<biblScope unit="page" from="535" to="543" />
			<date type="published" when="2007" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b67">
	<analytic>
		<title level="a" type="main">Electromagnetic analysis (EMA): measures and counter-measures for smart cards</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Jean-</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Jacques</forename><surname>Quisquater</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">David</forename><surname>Samyde</surname></persName>
		</author>
		<idno type="doi">10.1007/3-540-45418-7_17</idno>
		<ptr target="https://doi.org/10.1007/3-540-45418-7_17" />
	</analytic>
	<monogr>
		<title level="j">LNCS</title>
		<editor>E-smart</editor>
		<imprint>
			<biblScope unit="volume">2140</biblScope>
			<biblScope unit="page" from="200" to="210" />
			<date type="published" when="2001" />
			<publisher>Springer</publisher>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b68">
	<analytic>
		<title level="a" type="main">Probabilistic algorithm for testing primality</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">O</forename><surname>Michael</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Rabin</surname></persName>
		</author>
		<idno type="doi">10.1016/0022-314x(80</idno>
		<idno>0022- 314X</idno>
		<ptr target="https://doi.org/10.1016/0022-314x(80" />
	</analytic>
	<monogr>
		<title level="j">J. Number Theory</title>
		<imprint>
			<biblScope unit="volume">12</biblScope>
			<biblScope unit="issue">1</biblScope>
			<biblScope unit="page" from="90084" to="90084" />
			<date type="published" when="1980" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b69">
	<analytic>
		<title level="a" type="main">Breaking Ed25519 in WolfSSL</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Niels</forename><surname>Samwel</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Lejla</forename><surname>Batina</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Guido</forename><surname>Bertoni</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Joan</forename><surname>Daemen</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Ruggero</forename><surname>Susella</surname></persName>
		</author>
		<idno type="doi">10.1007/978-3-319-76953-0_1</idno>
		<ptr target="https://doi.org/10.1007/978-3-319-76953-0_1" />
	</analytic>
	<monogr>
		<title level="m">CT-RSA, volume 10808 of LNCS</title>
		<imprint>
			<publisher>Springer</publisher>
			<date type="published" when="2018" />
			<biblScope unit="page" from="1" to="20" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b70">
	<analytic>
		<title level="a" type="main">Canonical Encoding Rules (CER) and Distinguished Encoding Rules (DER). ITU International Telecommunication Union</title>
		<ptr target="http://handle.itu.int/11.1002/1000/12483" />
	</analytic>
	<monogr>
		<title level="m">ITU-T X.690 Information technology -ASN.1 encoding rules: Specification of Basic Encoding Rules (BER)</title>
		<imprint>
			<date type="published" when="2015" />
		</imprint>
	</monogr>
	<note>ITU-T Telecommunication standardization sector of ITU</note>
</biblStruct>

<biblStruct xml:id="b71">
	<analytic>
		<title level="a" type="main">Degenerate fault attacks on elliptic curve parameters in OpenSSL</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Akira</forename><surname>Takahashi</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Mehdi</forename><surname>Tibouchi</surname></persName>
		</author>
		<idno type="doi">10.1109/EuroSP.2019.00035</idno>
		<ptr target="https://doi.org/10.1109/EuroSP.2019.00035" />
	</analytic>
	<monogr>
		<title level="m">EuroS&amp;P</title>
		<imprint>
			<publisher>IEEE</publisher>
			<date type="published" when="2019" />
			<biblScope unit="page" from="371" to="386" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b72">
	<analytic>
		<title level="a" type="main">Smart card security</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Michael</forename><surname>Tunstall</surname></persName>
		</author>
		<idno type="doi">10.1007/978-3-319-50500-8_9</idno>
		<ptr target="https://doi.org/10.1007/978-3-319-50500-8_9" />
	</analytic>
	<monogr>
		<title level="m">Smart Cards, Tokens, Security and Applications</title>
		<imprint>
			<publisher>Springer</publisher>
			<biblScope unit="page" from="217" to="251" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b73">
	<analytic>
		<title level="a" type="main">Side-channel analysis of SM2: A latestage featurization case study</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Nicola</forename><surname>Tuveri</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Cesar</forename><forename type="middle">Pereida</forename><surname>Sohaib Ul Hassan</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Billy</forename><forename type="middle">Bob</forename><surname>García</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Brumley</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">ACSAC</title>
		<imprint>
			<biblScope unit="page" from="147" to="160" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b74">
	<monogr>
		<title/>
		<idno type="doi">10.1145/3274694.3274725</idno>
		<ptr target="https://doi.org/10.1145/3274694.3274725" />
		<imprint>
			<date type="published" when="2018" />
			<publisher>ACM</publisher>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b75">
	<analytic>
		<title level="a" type="main">Just a little bit more</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Nigel</forename><forename type="middle">P</forename><surname>Joop Van De Pol</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Yuval</forename><surname>Smart</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Yarom</surname></persName>
		</author>
		<idno type="doi">10.1007/978-3-319-16715-2_1</idno>
		<ptr target="https://doi.org/10.1007/978-3-319-16715-2_1" />
	</analytic>
	<monogr>
		<title level="m">CT-RSA</title>
		<imprint>
			<publisher>Springer</publisher>
			<date type="published" when="2015" />
			<biblScope unit="volume">9048</biblScope>
			<biblScope unit="page" from="3" to="21" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b76">
	<analytic>
		<title level="a" type="main">RIDL: rogue in-flight data load</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Alyssa</forename><surname>Stephan Van Schaik</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Sebastian</forename><surname>Milburn</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Pietro</forename><surname>Österlund</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Giorgi</forename><surname>Frigo</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Kaveh</forename><surname>Maisuradze</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Herbert</forename><surname>Razavi</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Cristiano</forename><surname>Bos</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Giuffrida</surname></persName>
		</author>
		<idno type="doi">10.1109/SP.2019.00087</idno>
		<ptr target="https://doi.org/10.1109/SP.2019.00087" />
	</analytic>
	<monogr>
		<title level="m">IEEE S&amp;P</title>
		<imprint>
			<publisher>IEEE</publisher>
			<date type="published" when="2019" />
			<biblScope unit="page" from="88" to="105" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b77">
	<analytic>
		<title level="a" type="main">CacheD: Identifying cache-based timing channels in production software</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Shuai</forename><surname>Wang</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Pei</forename><surname>Wang</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Xiao</forename><surname>Liu</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Danfeng</forename><surname>Zhang</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Dinghao</forename><surname>Wu</surname></persName>
		</author>
		<ptr target="https" />
	</analytic>
	<monogr>
		<title level="m">USENIX Sec</title>
		<imprint>
			<publisher>USENIX Association</publisher>
			<date type="published" when="2017" />
			<biblScope unit="page" from="235" to="252" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b78">
	<analytic>
		<title level="a" type="main">Single trace attack against RSA key generation in Intel SGX SSL</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Samuel</forename><surname>Weiser</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Raphael</forename><surname>Spreitzer</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Lukas</forename><surname>Bodner</surname></persName>
		</author>
		<idno type="doi">10.1145/3196494.3196524</idno>
		<ptr target="http://doi.acm.org/10.1145/3196494.3196524" />
	</analytic>
	<monogr>
		<title level="m">AsiaCCS</title>
		<imprint>
			<publisher>ACM</publisher>
			<date type="published" when="2018" />
			<biblScope unit="page" from="575" to="586" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b79">
	<analytic>
		<title level="a" type="main">DATA -differential address trace analysis: Finding address-based side-channels in binaries</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Samuel</forename><surname>Weiser</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Andreas</forename><surname>Zankl</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Raphael</forename><surname>Spreitzer</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Katja</forename><surname>Miller</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Stefan</forename><surname>Mangard</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Georg</forename><surname>Sigl</surname></persName>
		</author>
		<ptr target="https://www.usenix.org/conference/usenixsecurity18/presentation/weiser" />
	</analytic>
	<monogr>
		<title level="m">USENIX Sec</title>
		<imprint>
			<date type="published" when="2018" />
			<biblScope unit="page" from="603" to="620" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b80">
	<analytic>
		<title level="a" type="main">FLUSH+RELOAD: A high resolution, low noise, L3 cache side-channel attack</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Yuval</forename><surname>Yarom</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Katrina</forename><surname>Falkner</surname></persName>
		</author>
		<idno>978-1-931971-15-7</idno>
		<ptr target="https://www.usenix.org/conference/usenixsecurity14/technical-sessions/presentation/yarom" />
	</analytic>
	<monogr>
		<title level="m">USENIX Sec</title>
		<imprint>
			<date type="published" when="2014" />
			<biblScope unit="page" from="719" to="732" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b81">
	<monogr>
		<title level="m" type="main">Internet X.509 public key infrastructure time-stamp protocol (TSP). RFC 3161, RFC Editor</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Robert</forename><surname>Zuccherato</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Patrick</forename><surname>Cain</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Carlisle</forename><surname>Adams</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Denis</forename><surname>Pinkas</surname></persName>
		</author>
		<ptr target="https://datatracker.ietf.org/doc/rfc3161/" />
		<imprint>
			<date type="published" when="2001-08" />
		</imprint>
	</monogr>
</biblStruct>

				</listBibl>
			</div>
		</back>
	</text>
</TEI>
