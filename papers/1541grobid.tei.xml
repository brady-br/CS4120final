<?xml version="1.0" encoding="UTF-8"?>
<TEI xmlns="http://www.tei-c.org/ns/1.0" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
xsi:schemaLocation="http://www.tei-c.org/ns/1.0 /Users/atharsefid/Desktop/grobid-0.5.3/grobid-home/schemas/xsd/Grobid.xsd"
 xmlns:xlink="http://www.w3.org/1999/xlink">
	<teiHeader xml:lang="en">
		<encodingDesc>
			<appInfo>
				<application version="0.5.3" ident="GROBID" when="2020-09-29T02:02+0000">
					<ref target="https://github.com/kermitt2/grobid">GROBID - A machine learning software for extracting information from scholarly documents</ref>
				</application>
			</appInfo>
		</encodingDesc>
		<fileDesc>
			<titleStmt>
				<title level="a" type="main">Autonomous storage management for personal devices with PodBase</title>
			</titleStmt>
			<publicationStmt>
				<publisher/>
				<availability status="unknown"><licence/></availability>
			</publicationStmt>
			<sourceDesc>
				<biblStruct>
					<analytic>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Ansley</forename><surname>Post</surname></persName>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Juan</forename><surname>Navarro</surname></persName>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Petr</forename><surname>Kuznetsov</surname></persName>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Peter</forename><surname>Druschel</surname></persName>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">†</forename><surname>Mpi-Sws</surname></persName>
						</author>
						<author>
							<affiliation key="aff0">
								<orgName type="institution">§ TU</orgName>
								<address>
									<settlement>Berlin</settlement>
									<country>Deutsche</country>
								</address>
							</affiliation>
						</author>
						<author>
							<affiliation key="aff1">
								<orgName type="institution">Telekom Laboratories ¶ TU Munich</orgName>
							</affiliation>
						</author>
						<title level="a" type="main">Autonomous storage management for personal devices with PodBase</title>
					</analytic>
					<monogr>
						<imprint>
							<date/>
						</imprint>
					</monogr>
				</biblStruct>
			</sourceDesc>
		</fileDesc>
		<profileDesc>
			<abstract>
				<p>People use an increasing number of personal electronic devices like notebook computers, MP3 players and smart phones in their daily lives. Making sure that data on these devices is available where needed and backed up regularly is a time-consuming and error-prone burden on users. In this paper, we describe and evaluate PodBase, a system that automates storage management on personal devices. The system takes advantage of unused storage and incidental connectivity to propagate the system state and replicate files. PodBase ensures the durability of data despite device loss or failure; at the same time, it aims to make data available on devices where it is useful. PodBase seeks to exploit available storage and pair-wise device connections with little or no user attention. Towards this goal, it relies on a declarative specification of its replication goals and uses linear optimization to compute a replication plan that considers the current distribution of files, availability of storage, and history of device connections. Results from a user study in ten real households show that, under a wide range of conditions, PodBase transparently manages the durability and availability of data on personal devices.</p>
			</abstract>
		</profileDesc>
	</teiHeader>
	<text xml:lang="en">
		<body>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="1">Introduction</head><p>Modern households have multiple personal electronic devices, such as digital cameras, MP3 players, gaming devices and smart phones, in addition to desktop and notebook computers. As users increasingly depend on such devices, it is important to ensure the durability of data in the event of loss or failure of a device, and the availability of the latest data on all appropriate devices.</p><p>Ensuring that data is durable is an onerous task even for a single home computer, and the situation is getting worse as the number and diversity of devices increase. Users must keep track of all devices that need to be backed up and perform the appropriate actions on a regular basis. Anecdotal evidence suggests that many users fail to ensure the durability of their data <ref type="bibr" target="#b10">[14,</ref><ref type="bibr" target="#b13">17]</ref>. Thus, users face the risk of data loss, just as they are becoming increasingly dependent on digital information.</p><p>Making sure that a given data object is available on all the devices that need it is equally burdensome. A user must regularly connect and synchronize devices to ensure, for instance, that changes to her address book are propagated to all communication devices, and that additions to her music library are present on all devices capable of playing music.</p><p>In this paper we present PodBase, a system that manages data on personal devices in an autonomous, decentralized, device-and operating system-independent manner. The system is transparent to the user, takes advantage of unused storage space and exploits incidental pairwise connectivity that naturally occurs among the devices, (e.g., via Wi-fi, Bluetooth or USB).</p><p>With PodBase, each device stores metadata that describes a household's devices and data. During pairwise connections, devices reconcile their metadata and exchange data. Over time, metadata and data propagate among a household's devices. PodBase progresses toward a state where, subject to available storage and in order of decreasing priority, (i) the contents of any failed device are restored to a replacement device, (ii) each object has a certain minimal number of replicas, and (iii) each object is available on devices that can potentially use it.</p><p>Results from our user study show that many households have sufficient storage and connectivity to permit full replication. However, there is typically not one hub device with plenty of storage to which all other devices are regularly connected with sufficient bandwidth. To ensure full and timely replication, PodBase must therefore be able to use free space on all devices, replicate data between any pair of devices, and possibly even move data via sequential pairwise connections.</p><p>Given the vast space of possible configurations, device connection sequences and replication plans, design-ing an appropriate replication algorithm for PodBase is not straightforward. Simple, greedy algorithms are stable and robust but tend to get stuck in local minima. PodBase instead uses linear optimization to compute an adaptive replication plan from a declarative specification of the goal state, and a local view of the current replication, available storage and history of device connections. As a result, PodBase is highly adaptive and provably stable. Moreover, it finds sophisticated solutions in unexpected scenarios. For instance, without being programmed for this case, the system takes advantage of "sneakernets", i.e. mobile devices, to transport data between home and office, thus avoiding slow broadband connections.</p><p>The rest of this paper is structured as follows. Section 2 states the requirements. We discuss related work in Section 3. Section 4 presents the design of PodBase and Section 5 describes its replication algorithm. Section 6 presents our evaluation and Section 7 concludes.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2">Requirements</head><p>PodBase is intended for a household with one or more users and a set of shared personal devices. Based on the results of a feasibility study <ref type="bibr" target="#b16">[20]</ref>, we can characterize this environment as follows:</p><p>• Devices are periodically connected, such that any pair of devices can eventually communicate via a series of sequential pairwise connections.</p><p>• A device may fail or be lost at any time. However, the failure or loss of many devices during a short period of time is unlikely.</p><p>• Devices may be turned off when not in use; it cannot be assumed that any one device is always online.</p><p>• The system must be able to handle a wide range of usage patterns and device configurations, without attention from an expert system administrator.</p><p>An important aspect of the target environment is that most users don't have the expertise, interest or time to manage data and storage on their devices. They expect the system to do something reasonable automatically. Unlike a system designed for expert users (like the authors and readers of this paper), PodBase must be able to achieve its goals with little user expertise and attention.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.1">Desired system behavior</head><p>In this section, we describe the desired system behavior intuitively and by example. A more detailed description of PodBase's properties, design and implementation follows in subsequent sections.</p><p>PodBase aims to relieve users from having to worry about the durability and availability of their data. Durability requires that the failure or loss of a device not result in the loss of user data. Availability requires that each device store the latest collection of data relevant to that device. For example, each communication device should store the latest version of the address book and, subject to available storage space, a shared music collection should be available on all devices capable of playing music.</p><p>As an example, Alice and Bob share a household. Alice has a notebook, an MP3 player and an external USB hard drive. Bob has a notebook and a desktop computer at his office. Their home has a wireless network connected to the Internet via a broadband connection. On workdays Alice and Bob bring their notebooks to their offices and perform their daily work, such as writing documents and using email.</p><p>At night both return home with their notebooks and use them to surf the web, play games, or listen to music. Although they have important data stored on their notebooks, they rarely back up their data.</p><p>PodBase should automatically perform the following tasks without any explicit action by Alice or Bob:</p><p>• Every night, new or modified files are replicated, in cryptographically sealed form, between Alice and Bob's notebooks via the wireless network. (This works even when they are on vacation, e.g., when the pictures Alice uploads from her camera are replicated on Bob's notebook.)</p><p>• When Bob purchases a new CD and rips it to his hard drive, a replica of the mp3 file is later moved to Alice's notebook. When Alice connects her MP3 player to charge, it also receives the new music.</p><p>• Whenever Alice or Bob edit their personal address books, the changes are automatically propagated to their other communication devices.</p><p>• Whenever Alice's USB hard drive is connected to her laptop, additional replicas of the files and replicas on her laptop are made.</p><p>• Bob's office desktop is connected to his home via a broadband connection. Rather than transfer data using the slow connection, the system uses Bob's notebook disk to rapidly replicate data between home and work.</p><p>• When Bob's notebook is running low on disk space (after removing any replicas), the system asks Bob if it should move not recently accessed movie files to Alice's USB drive, which has plenty of space.</p><p>PodBase can recover from otherwise costly incidents. For example, imagine Alice's laptop is stolen. With PodBase, she is able to restore the data on the lost device's hard drive to her replacement notebook. When she connects over the wireless network to Bob's notebook, some files from her stolen notebook are restored on the new device. When she later connects her new notebook to the USB drive, the remaining files are restored. Thanks to the replication between home and Bob's office, they could recover all data even after a total loss of the home or office devices.</p><p>An important goal we set ourselves for PodBase is transparency: the system's background activity should not affect users' experience during normal operation. By default, the system does not remove user files, automatically propagate changes to user files or attempt to reconcile conflicting versions of concurrently modified files. Instead, PodBase maintains all versions of a file along with their modification history. Optional plug-ins can define file type-, device-, or application-specific consistency semantics.</p><p>PodBase's transparency is consistent with the principle of least surprise: by default, the installation of the system should not change a device's user-visible behavior during normal operation. Advanced behavior (e.g., automatic propagation of changes to the address book) can be enabled explicitly by enabling appropriate plugins.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3">Related work</head><p>PodBase is in the spirit of Weiser's Ubiquitous Computing vision <ref type="bibr" target="#b34">[39]</ref>, as it transparently manages storage on personal devices. To the best of our knowledge, no prior system provides automatic durability and availability of data on personal devices, without relying on central storage, a fast Internet connection or explicit user attention.</p><p>With Personal Server <ref type="bibr" target="#b32">[37]</ref>, users carry a personal storage device and use input/output devices found in the environment. In Omnistore <ref type="bibr" target="#b7">[10]</ref>, data is maintained on a central store, while other devices interact to cache data or relay data to the store. The Roma system <ref type="bibr" target="#b28">[32]</ref> provides a shared, centralized metadata service that can be used to build higher-level services for synchronization, consistency and availability. Apple TimeMachine <ref type="bibr" target="#b30">[34]</ref> and Windows Home Server <ref type="bibr" target="#b35">[40]</ref> provide automatic backup to a dedicated storage node. Unlike PodBase, the above systems rely on a dedicated storage device, are vulnerable to the failure or loss of that device, and cannot exploit unused storage on other devices.</p><p>Availability of data on a set of devices can be provided by a distributed file system that supports disconnected operation, like <ref type="bibr">Bayou [33]</ref>, Ficus <ref type="bibr" target="#b15">[19]</ref>, and Coda <ref type="bibr" target="#b9">[12]</ref>. Some systems additionally support partial replication to meet the needs of mobile devices, e.g. PRACTI <ref type="bibr" target="#b0">[1]</ref>, WinFS <ref type="bibr" target="#b37">[42]</ref>, Roam <ref type="bibr" target="#b20">[24]</ref>, Ensemblue <ref type="bibr" target="#b14">[18]</ref>, the Few File system <ref type="bibr" target="#b18">[22]</ref> and Segank <ref type="bibr" target="#b25">[29]</ref>. Oasis <ref type="bibr" target="#b21">[25]</ref> is an SQLbased data management system for pervasive computing applications. PodBase differs from these systems in that it replicates data for availability and durability, is fully automatic, takes advantage of pairwise connections and unused storage efficiently, requires no centralized server, and is device, vendor and OS-independent.</p><p>Cimbiosys <ref type="bibr" target="#b19">[23]</ref> is a platform for content-based partial replication. Like PodBase, Cimbiosys carefully manages the amount of information that has to be exchanged during pair-wise connections. The goal of Cimbiosys is to facilitate replication by propagating updates between peer devices. Applications or users are expected to specify filters for what each device should store. Unlike PodBase, Cimbiosys does not specify a replication policy for either availability or durability, and instead provides a replication platform for higher level applications. For replication to eventually reach the desired state, Cimbiosys assumes that all devices that replicate a given collection of objects form a tree, such that a parent stores a superset of the objects stored by its children and children regularly connect to their ancestors. PodBase, on the other hand, achieves eventual consistency as long as any two devices are repeatedly connected via a sequence of pairwise connections.</p><p>Like PodBase, Perspective <ref type="bibr" target="#b23">[27]</ref> supports automatic partial replication among mobile devices, without relying on a centralized server. However, Perspective assumes that a view is defined for each device, which specifies the set of files that should be present on the device. Files are then replicated along sequences of pairwise connections, where a file must be contained in the view of each device that appears on the path. PodBase, on the other hand, uses multi-step replication plans, where files can be placed on intermediate devices solely for the purpose of transporting them to another device. PodBase computes a replication plan automatically and dynamically to maximize durability and availability given the available free space on devices, without requiring the specification of per-device views.</p><p>One could try to simulate the effect of PodBase's replication policy in Perspective by specifying that each device's view include all files. Perspective would then replicate all files greedily as device connections occur, until each device either replicates all files or its space is exhausted. Unless most devices have enough space to store most files, however, this would likely lead to uneven replication levels and poor availability. Finally, PodBase was evaluated using an actual user deployment.</p><p>Device Transparency <ref type="bibr" target="#b26">[30]</ref> is a storage model for mobile devices, where each device maintains global metadata. PodBase uses a similar capability as a building block to support transparent data replication for availability and durability. Moreover, PodBase can also support devices too small to store metadata for all objects in the system.</p><p>Synchronization tools like Unison <ref type="bibr">[36]</ref> synchronize data among devices, and attempt to reconcile replicas that have diverged due to concurrent edits. Windows Live Sync <ref type="bibr" target="#b36">[41]</ref> and Live Mesh <ref type="bibr">[13]</ref> allow users to sync folders on their machines. File synchronization tools like these can be used as a plug-in for PodBase. Groove <ref type="bibr">[9]</ref> provides a collaborative workspace that propagates file edits automatically among a group of users. PodBase is also concerned with durability and focuses on intermittently connected devices in the home.</p><p>Pastiche <ref type="bibr" target="#b2">[4]</ref> and FriendStore <ref type="bibr" target="#b31">[35]</ref> implement cooperative backup on users' machines in a peer-to-peer network. PodBase replicates data for availability and durability, within a household, on intermittently connected devices, and without relying on third-party storage.</p><p>Cloud storage services (e.g. <ref type="bibr" target="#b3">[5,</ref><ref type="bibr" target="#b11">15,</ref><ref type="bibr" target="#b24">28,</ref><ref type="bibr" target="#b27">31]</ref>) provide automatic backup or synchronization for mobile devices at a charge. PodBase is free, can replicate much faster because it is not limited by the upstream bandwidth of a broadband connection, exploits unused storage on existing devices, replicates among devices that are away from home (e.g. on vacation), and avoids the dependence on a single provider for data protection. Nevertheless, PodBase can take advantage of a Cloud storage service to maintain additional off-site replicas for added safelty.</p><p>Keeton et al. <ref type="bibr" target="#b8">[11]</ref> advocate the use of operations research techniques in the design and implementation of systems. PodBase is an example of a system that uses linear optimization to adapt to its environment. Other examples include Rhizoma <ref type="bibr" target="#b38">[43]</ref> and Sophia <ref type="bibr" target="#b33">[38]</ref>, which use logic programming to optimize cloud computing and network testbed environments, respectively. Pandora <ref type="bibr" target="#b1">[2]</ref> uses linear optimization to optimize bulk data transfers for cost and timeliness, using a combination of Internet data transfers and the shipping of storage devices.</p><p>Since PodBase shares data among a set of intermittently connected devices, it implements a form of delay tolerant network (DTN) <ref type="bibr" target="#b4">[6]</ref>. PodBase can be viewed as a data management application on top of a specialized DTN. The Unmanaged Internet Architecture <ref type="bibr" target="#b6">[8]</ref> (UIA) provides zero-configuration naming and routing for personal devices. PodBase addresses the complementary problem of data management for personal devices.</p><p>A prior workshop paper <ref type="bibr" target="#b16">[20]</ref> sketches a preliminary design of PodBase and presents results from a tracebased feasibility study. This paper contributes a revised design, a full implementation, a new replication algorithm, support for space-constrained devices, a plug-in architecture to add file type and device specific behavior, an extensive evaluation and a user study.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4">PodBase design</head><p>We start with an overview of PodBase, its user interface, operation, plug-in architecture and security aspects.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.1">Overview</head><p>PodBase is implemented as a user level program. It keeps track of user data at the granularity of files. PodBase is oblivious to file and device types. However, PodBase supports a plug-in architecture, by which file type and device specific data management policies can be added.</p><p>PodBase distinguishes between active devices and storage devices. Storage devices include hard drives, media players and simple mobile phones. Active devices run the PodBase software and provide a user interface. An active device contains at least one storage device; additional storage devices can be connected internally or via Bluetooth or USB. The set of devices in a household form a PodBase pool. In each pool, there must be at least one active device, which runs the PodBase software.</p><p>Active devices communicate via the network and handle the exchange of data. Whenever two active devices communicate, a storage device is attached to an active device, or two storage devices are attached to the same active device, we say that these devices are connected. Data propagates during these pair-wise connections.</p><p>There are three different types of data on each storage device: (1) regular user data, (2) PodBase file replicas, and (3) PodBase metadata. Although logically separate, all of these data are stored in the device's existing file system. The PodBase replicas and metadata are cryptographically sealed and stored under a single directory.</p><p>Metadata describes a device's most recent view of the pool's state. Included in the metadata is the set of known devices and their capacities, a logical clock for each storage device and a list of all user files that PodBase manages, along with their replication state. Capacity constrained devices may store only a subset of the system's metadata, as described in Section 4.3.2.</p><p>Some of the space on a device not occupied by user data or metadata is used to replicate files for durability and availability. User data has priority over replicas. PodBase continuously monitors its storage use and seeks to keep a proportion f min of the device's capacity free at all times.</p><p>When a file is modified by an application or the user, PodBase creates a new version of the file and replicates both the old and new version independently. Plug-ins (see Section 4.4) can be used to automatically apply consistent file updates, reconcile conflicting versions or purge obsolete versions in a file type-specific manner. Users can manually retrieve copies of old versions or even deleted files.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.2">User interaction</head><p>Next, we describe how users typically interact with PodBase. Though PodBase is designed to minimize user involvement, some interaction is required. Moreover, interested, tech-savvy users have the option to change its policies.</p><p>Device Registration. When a new device is connected for the first time, PodBase asks the user if the device should be added to the storage pool.</p><p>Device Deregistration. A storage device may permanently disappear due to loss, permanent failure or replacement. If a device has not been connected for an extended period (e.g., a month), PodBase prompts the user to connect the device or else deregister it.</p><p>Data Recovery. When a storage device fails, PodBase can recover the files it stored. The user informs PodBase that she wishes to recover the data from a particular lost device onto a replacement device or onto an existing device. The PodBase software on the recovery device then obtains copies of the appropriate files during each connection.</p><p>Externalization. By default, users and applications cannot directly access replicas stored on a device. However, users with the appropriate credentials can externalize replicas, that is decrypt and move the cleartext of a replica into the user file portion of the device. Alternatively, externalization can be automated using a plug-in.</p><p>Warnings. PodBase warns the user when it is unable to replicate files because there is insufficient storage space or connectivity, with specific instructions to buy an additional disk or connect certain devices.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.3">Device interaction</head><p>When two devices are connected, they reconcile their view of the system and exchange data. First, the devices reconcile their metadata. Then, PodBase determines if any of the replicas on either device should be moved, copied or deleted. Next, we detail these steps.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.3.1">Metadata contents</head><p>The metadata consists of the following items (their purpose will become clear in the subsequent discussion):</p><p>1. Vector Clock: A vector clock, consisting of the most recent known logical clock values for each device in the pool. A device's logical clock is incremented upon each metadata change. When a device is removed from the system, its logical clock is set to a special tombstone value. Also, the metadata includes the most recently observed vector clock of each device in the storage pool.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.">Connection History:</head><p>A list of the past 100 connections that have been observed between each pair of devices, their time, duration, their average and maximum throughput, as well as the network addresses used by the devices.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.">Policies:</head><p>The current policy settings. Policies can be modified by sophisticated users. Installed plug-ins (Section 4.4) can also modify the policies.</p><p>Items 1-3 are included in the metadata of all devices.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.">Set of user files:</head><p>Keeps track of the user files stored on each device in the pool. The content hash value, size and last modification time are recorded for each unique file. In addition, the content hashes of the last v (v = 10 by default) versions of each file are included (modification history).</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5.">Set of replicas:</head><p>Keeps track of the replicas stored on each device in the pool. For each replica, its size, content hash value, and replica id are recorded.</p><p>6. Reverse map of unique files in the pool: Maps a content hash value to the set of files whose content matches the value. This mapping is used to determine the current replication level for each unique data file, considering that different files may have identical content. (PodBase de-duplicates files prior to replication.) Each record in items 4-6 contains a version number, which corresponds to the device's logical clock at the time when the record was last modified. A small device may include only a subset of the records in items 4-6.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.3.2">Metadata reconciliation</head><p>Metadata reconciliation is straightforward in the common case when two devices that carry the full metadata are connected. They compare their vector clocks to determine which has the more recent metadata for each device in the pool. For each such device, the more recent metadata is then merged into the reconciled metadata.</p><p>PodBase also supports devices too small to hold the full metadata. (In practice, devices smaller than about 100 MB are excluded. This is a mild limitation, since smaller storage devices are already rare at the time of this writing.) Such devices hold the full metadata for the files and replicas they store, plus some amount of partial metadata about other devices.</p><p>PodBase ensures progress and eventual consistency of metadata, even if some devices are only ever sequentially connected via small devices. To this end, PodBase seeks to place on small devices metadata that are needed to update other devices. For this purpose, it checks the last known vector clocks of all devices. PodBase selects partial metadata subject to the available space on the small A second preimage resistant hash function is used device, while ensuring that (i) metadata needed by more devices are more likely to be chosen, and (ii) a roughly equal number of metadata items are included for each device that the small device may encounter. This policy seeks to maximize the spread of useful information and ensure convergence of device metadata even in extreme situations where different sets of devices are connected only via a small device.</p><p>When reconciling any device L with a small device S, PodBase checks if the metadata on S can be used to update L. For a given device d whose partial metadata appears in a small device, all metadata are included that have changed within some range of versions i &lt; j of d's metadata. This metadata can be used to update L if L's current metadata version for d is at least i and less than j. If so, PodBase merges the metadata about d from S into L's metadata.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.3.3">Replication</head><p>Once the metadata is reconciled, PodBase determines the actions, if any, that should be performed on the data. PodBase may copy a replica of a file, in which case the file is stored on the target device with a new random replica id (used to distinguish between replicas), while the original replica remains on the source device. A device may also move a replica, in which case the replica is stored on the target device with the same replica id and then deleted from the source device. Finally, a device may delete a replica, to make room for another replica that it believes is more important. During replication, data is transmitted in a cryptographically sealed form, and a hash of each replica's content is attached to ensure data integrity. How PodBase determines the actions that should be performed is described in Section 5.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.3.4">Data recovery</head><p>After a device loss or failure, data can be recovered onto a replacement device at users' request. During each connection to another device, the replacement device restores as many files as possible, guided by the reconciled metadata. The most recent available version of each file is restored. Users can speed up the recovery process by connecting appropriate devices under the guidance of PodBase. The restoration is complete when the replacement device has received, directly or indirectly, from each device in the pool a metadata update no older than the time at which the lost device went out of service, and the reconciled metadata indicates that all files were restored.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.3.5">Replica deletion</head><p>PodBase removes replicas when the free space on a device falls below f min , the minimal proportion of a device's storage that PodBase keeps available at all times (by default, f min = .15). When PodBase frees space, it considers the most replicated files first. Among files with the same replication level, PodBase first deletes replicas that have the lowest (randomly assigned) replica id among the replicas of a file, then the second lowest id, and so on. This policy ensures that different devices delete replicas of the same file only when a shortage of space dictates it, but never as a result of inconsistent metadata in partioned sets of devices. (PodBase never deletes the original or any externalized replica.)</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.4">Plug-ins</head><p>Plug-ins can be used to implement policies and mechanisms that are specific to particular file types, collections of files, device types or specific devices. Following are some example plug-ins.</p><p>Consistency: PodBase replicates each version of a file independently. A plug-in can be used to automatically propagate changes or reconcile concurrent modifications under a given consistency policy. There is a large body of work on consistency, and powerful tools exist for reconciling specific file types, e.g. <ref type="bibr" target="#b5">[7,</ref><ref type="bibr" target="#b12">16,</ref><ref type="bibr" target="#b22">26]</ref>. Such tools can be integrated as plug-ins in PodBase.</p><p>Unified Namespace: By default, PodBase does not automatically externalize replicas. A plug-in could export files as part of a global uniform namespace on all devices. This would allow users to browse the contents of all devices, and access files available locally (subject to user access control restrictions). In combination with a plug-in that provides consistency, this would provide a simple distributed file system. Digital Rights Management (DRM): Media files stored on a user's devices may be protected by copyright. Usually, copyright regulations allows users to maintain copies on several of their personal devices. However, if restrictions apply, then the policies appropriate for a given media type can be implemented as a plug-in.</p><p>Archiving: A plug-in can automatically watch for large, rarely accessed user files (e.g. movies). If such files occupy space on a device that is nearing capacity, the plugin suggests moving the collection to a different device with sufficient space. If the user approves, PodBase automatically moves the files. Content-specific policy: A content-specific plug-in can, for example, replicate and automatically externalize mp3 files on devices capable of playing music. Moreover, the plug-in can select a subset of the music collection for placement on small devices. For instance, when replicating music on a device with limited space, a plug-in may select the most recently added music, the most frequently played music, and a random sample of other music.</p><p>As a proof of concept, we developed a plug-in that automatically externalizes replicas of mp3 files and imports them into iTunes. The plugin required around 100 lines of Java code, and two simple OS specific AppleScript scripts to interact with iTunes.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.5">Security</head><p>PodBase uses authenticated and secure channels for all communication among devices within a pool. When a device is introduced to a PodBase pool, it receives appropriate key material to enable it to participate. Users have to present a password when they wish to interact with PodBase. Metadata and replicas are stored in cryptographically sealed form when stored on devices, in order to minimize the risk of exposing confidential data when a device is stolen. PodBase respects the file access permissions of user files -encrypted replicas can be externalized only by a user with the appropriate permissions on the file. By default, PodBase manages all of a device's contents; it can be configured to manage only specific subtrees in the namespace of a device.</p><p>The strength of PodBase's access control within a household is designed to be at least as strong as the access control between different users on the same computer. If stronger security isolation is required between devices or users, then they should not join the same pool. For instance, if a user's office computer contains confidential material that must not leave company premises, then it must not join the user's home PodBase pool.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5">Replication</head><p>We considered a number of replication algorithms. Greedy algorithms place under-replicated files on the first connected device that has space. These algorithms are simple, stable, and replicate files at the first opportunity, which is good. Unfortunately, the initial placement of a file is often sub-optimal and cannot be changed. (By definition, greedy algorithms never reconsider an earlier choice and cannot move replicas if a better placement turns out to be possible in the future.) A more sophisticated class of algorithm seeks to equalize the storage utilization of connected devices, thereby moving replicas toward devices that have space. Unfortunately, these algorithms cannot take advantage of a "shuttle device" to transport data between clusters of devices, e.g., home and office.</p><p>Extending the algorithms to cover these and other important cases while avoiding degenerate performance in unexpected cases seemed daunting. Instead, we decided to pose optimal replication declaratively as a linear optimization problem. This approach minimizes design time assumptions about system configurations and usage patterns, computes optimal solutions to unexpected cases at runtime, and has provable stability properties.</p><p>Whenever two devices connect, PodBase uses an LP solver to compute a multi-step replication plan that moves the system toward the goal state. The plan considers the current system state and likely future device connections, and specifies which replicas should be deleted, copied or moved during each connection accordingly.</p><p>In general, only the first step of the replication plan is relevant, as it concerns the currently connected devices. The subsequent steps are speculative, since they depend on which future device connections actually occur. If the actual device connected next differs from the current plan, a new plan is computed. The following subsections describe the approach in more detail. Additional detail about the LP problem formulation can be found in a technical report <ref type="bibr" target="#b17">[21]</ref>.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5.1">Replication objective</head><p>First, we wish to guarantee that files are evenly replicated on as many devices as the available space allows. As a secondary goal, we want to maximize availability by placing copies of each file on devices where it is potentially useful. In the rest of this section we define these two properties more formally.</p><p>Let D be the set of participating devices and let F be the set of files that are managed by the system. For each device d ∈ D, let space d denote its capacity, i.e., the amount of space available at d for storage of both user and replica files. For a set of files S ⊆ F, size(S) denotes the amount of storage required to keep a copy of S. For each device d, the set of user files stored in that device is denoted by user-files(d). In particular, for each device d, size(user-files(d)) ≤ space d .</p><p>The goal of a storage management system is to determine and maintain, for each device d, a suitable selection of files, store-files(d) ⊆ F, to be stored on it. Files are replicated when they are selected for storage at several different devices. Moreover, at any time, such a selection must satisfy</p><p>• user-files(d) ⊆ store-files(d), user files are never moved or deleted from devices;</p><p>• size(store-files(d)) ≤ space d , the files stored on a device may not exceed its capacity.</p><p>Given a particular store-files selection, we say that its replication factor is the number of copies k of the least replicated file in the system. More formally,</p><formula xml:id="formula_0">k = min f ∈F |{d ∈ D : f ∈ store-files(d)}| .</formula><p>Moreover, we say that the replication factor is optimal if there is no other file selection store-files ′ with a higher replication factor. In order to model availability, plug-ins have the option to provide an availability selection that assigns to each device d ∈ D a set of files like-files(d) that it should preferably store. The availability score, or av-score, of a file selection store-files is then defined as the number of file copies that match the preference expressed by like-files, i.e.,</p><formula xml:id="formula_1">av-score = ∑ d∈D |like-files(d) ∩ store-files(d)| .</formula><p>In a desired goal state, PodBase places at each device d ∈ D, a set store-files(d) of replicas such that the following properties are satisfied:</p><p>Durability. The replication factor is optimal, i.e., files are maximally replicated on the existing devices.</p><p>Availability. Among the file selections with optimal replication factor, store-files has a maximal av-score; i.e., files are replicated in devices where they are useful.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5.2">Problem formulation</head><p>The system state, the effects of the actions, as well as the objectives are modeled as a set of linear arithmetic constraints. Care must be taken to ensure the problem formulation scales. To make the optimization problem tractable, we group files into equivalence classes called categories. All files that are stored on the same set of devices are in the same category. The system state is then encoded by specifying, for each category, the total amount of space occupied by all files in that category. This significantly reduces the number of variables in the problem formulation, which no longer depends on the number of files but on the number of devices in a pool, without any loss of accuracy.</p><p>To model the connectivity among devices, a graph is constructed with a link between each pair of devices that can potentially be connected. The link weight specifies the estimated cost of data transfer among the devices. This cost is calculated based on the maximum connection speed and the probability that the devices will be connected on a given day, based on the history of past connections. In this calculation, more recent connections are weighted more heavily; individual measurements are filtered appropriately to reduce noise <ref type="bibr" target="#b17">[21]</ref>.</p><p>Finally, we model the actions (copy, move, delete) PodBase can perform, and their effects on the system state. In general, a sequence of connections may be required in order to affect a certain state change (e.g., copy some files from A to B, and then from B to C). The formulation then encodes how the possible sequences of actions modify the number of bytes in each category.</p><p>Encoding the problem this way enables us to symbolically describe all the possible plans that PodBase could execute in order to manipulate the distribution of files. Given this formalization, the goal is to find a plan that optimizes the desired goals.</p><p>The optimization involves multiple stages, narrowing the set of candidate replication plans in each. First, the maximal replication factor k is computed based on the available space in the system. Then, we optimize for durability by computing replication plans that can achieve a k-replication for all files. Next, we optimize for cost by narrowing the set of plans to those that minimize the sum of the link weights. In the next stage, we select among the remaining plans those that maximize availability. In the final stage, we select a plan that minimizes the number of necessary replication steps. PodBase then executes the first step of the resulting replication plan, by copying, moving or deleting replicas on the currently connected devices. For efficiency, we do not consider plans with more than three replication steps. (Few interesting plans with more steps occur in practice.)</p><p>The optimization favors cost over availability, because high cost plans are highly undesirable: they may rely on links with low bandwidth or rare connectivity. Notably, this choice still permits good availability, because the cost optimization generally leaves many candidate plans from which the availability optimization can select. The reason is that all plans involving the same set of connections have the same cost, and there is a combinatorially large number of such plans, corresponding to the different placements of replicas that can occur as a result of these connections.</p><p>The cost optimization does, however, eliminate plans that create more than k replicas, even if availability calls for more. To enable additional replication for availability, PodBase changes the order of optimizations once the durability goal has been achieved. In this case, availability is optimized before cost.</p><p>In a final step, the categories are mapped back onto individual files. In cases where the solution would require a file to be split by an action, file integrity can be fed back into the optimizer as an additional constraint. The replication process is guaranteed to converge in a bounded number of steps after the set of primary data files stabilizes.</p><p>Additional parameters could be added to the optimization by the system designer. For example, if device reliability data is available, this information can be considered by modeling a replica stored on a less reliable device as contributing less to the durability of the associated file than a replica stored on a more reliable device. In general, such extensions are straightforward to implement. However, they do require some expertise with linear optimization to make sure the additional inputs or constraints do not cause an blow-up in the complexity and runtime of the optimization.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="6">Experimental evaluation</head><p>Next, we present experimental results obtained with a prototype implementation of PodBase. We sketch the implementation, report on its overheads and verify that the system behaves as expected. Then we present measured results from a user study. Additional results, including a comparison with a simple greedy replication algorithm, are presented in the technical report <ref type="bibr" target="#b17">[21]</ref>.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="6.1">Implementation</head><p>PodBase is implemented as a user-level program written in Java. Most of the code (48,512 lines) is platformindependent, with the exception of a small amount (about 1000 lines) of custom code for each supported platform (Windows 2000 and higher, Mac OS X). The platformspecific code deals with mounting disks and naming files. The implementation currently requires that storage devices export a file system interface, and that active devices are able to run Java 1.5 bytecode.</p><p>Running PodBase on platforms like cell phones or game consoles is feasible, but requires additional engineering effort. We feel that our prototype strikes a reasonable trade-off between engineering effort and research goals, because it can use the majority of devices in our study.</p><p>In our deployment, active devices contact a server (2.6Ghz AMD Opteron) running CPLEX 11.2.1 (a commercial LP solver) to compute replication plans. Using the server simplifies the installation of PodBase and is not fundamental to the system. With an additional installation step, PodBase can be configured with a local solver, like the free LP solver package clp <ref type="bibr">[3]</ref>.</p><p>PodBase rate-limits network and disk I/O, marks I/O as non-cacheable and runs single-threaded to avoid competing with other applications for resources. To the extent possible, we tried to ensure that users did not notice that PodBase was running in the background.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="6.2">Computation and storage overhead</head><p>PodBase periodically crawls file systems to monitor the state of files. Each time a new file is discovered or an existing file is modified, the file is hashed and added to the pool's metadata. We measured the amount of time the first crawl took when a new drive was added to the system. The measurements were taken on a 2.4 GHz Apple MacBook Pro, running OS X, one author's primary computing device. The internal notebook disk contained 165,105 files with a total size of 87.4GB. The initial crawl took approximately 5 hours to complete. Subsequent crawls, which only re-compute hashes for new or modified files, took on the order of 10 minutes. (Both OS X and Windows support APIs that notify applications of any folder or file modifications. Using these APIs can dramatically reduce the need for crawling, but our implementation did not use them.)</p><p>The size of the system's metadata grows proportionally with the number of files and replicas managed by a PodBase pool. In our user study, the uncompressed metadata size ranged from 270MB to 2.5GB. This amounts to only a small fraction of the capacity of most modern storage devices. For the devices in our user study, storing the full metadata was possible in all cases. However, smaller storage devices (e.g. older USB sticks or cameras) are supported via the partial metadata mechanism.</p><p>Using the LP solver to compute a replication plan takes between one and thirty seconds for most households, and 180 seconds for the largest household in the user study. When two devices connect, replication starts immediately on a speculative basis, while the optimization runs in the background. For instance, PodBase starts to replicate greedily those files that appear the most underreplicated or that should reside on one of the devices for availability, according to the reconciled metadata. This replication can later be (partly) undone, in the case that some of it is inconsistent with the computed plan.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="6.3">Data restoration</head><p>Next, we test PodBase's ability to successfully restore the contents of a lost device. We simulated the loss of a notebook after the replication phase was completed. PodBase successfully restored to a USB hard drive all 211206 files (75GB) that were present at the time of the last crawl of the "lost" notebook. The restoration took 5 hours 27 minutes to complete, which includes decrypting the replicas.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="6.4">Partial metadata reconciliation</head><p>Next, we experiment with small devices that carry partial metadata. In our example, there are three devices: two full metadata devices, which never directly connect to each other; and a small device, which is connected to each of the other devices once per day. The small device is able to carry 100MB of metadata about other devices, and unable to carry actual data. The total metadata size is 2GB.</p><p>Initially, the large devices were completely unaware of each other. No new data was added after the experiment began. It took ten days or 21 connections for the metadata on the two large devices to converge, which is expected based on the relative size of the metadata and the small device. This example shows that metadata converges even in extremely constrained cases. In our experience, most devices are larger and connectivity tends to be much richer in practice, leading to much faster convergence.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="6.5">User study</head><p>To study how PodBase performs in a real deployment, we asked ten members of our institute to deploy the system in their households and collected trace data over a period of approximately one month. We asked the users to, as much as possible, ignore the presence of PodBase and use their devices the way they would normally use them. Three users were given an external one terabyte USB disk, because they had insufficient free space to allow their files to be replicated.</p><p>For practical reasons, the number of households and users in our study is limited and covers a relatively short period of time. Moreover, at least one member of each household was a computer science researcher. Therefore, there is a likely bias towards users who have an interest in technology. As a result, our results may not be representative of a larger and more diverse user community, or a long-term deployment. Nevertheless, we feel that the study was tremendously valuable in identifying the difficult issues, in building our confidence that the system is feasible and addresses a real need, and in understanding the system's performance in practice.</p><p>The system was deployed and actively used over the course of two years. The data collected for the results presented in this paper were collected between July and September 2009. During this period, we collected anonymized data about file creation, modification and deletion on each device, when and where replicas were created, and which devices were connected at what times. We use these logs to generate the graphs used in the rest of this section.</p><p>First, we provide a brief overview of the households used in our deployment and the characteristics of the devices used in each. <ref type="figure">Figure 1</ref> shows the number of storage and active devices in each household. The number of active devices ranged from one to seven. Some households had no additional storage devices, while others had up to three. Households 1, 4 and 5 received an additional one terabyte USB disk, which is reflected in the data. Household 4 has a virtual device that is backed by 10GB .Mac cloud storage. PodBase uses this device like any other, considering its capacity and connection bandwidth. <ref type="figure">Figure 2</ref> depicts, for each household, the total size of the household's storage pool, divided into used storage and available storage at the beginning of the deployment and before PodBase was activated. The additional storage given to households 1, 4 and 5 is shown as "additional space". After this addition, seven of the households had at least half of their total storage capacity available. This does not imply that the remaining three households cannot replicate their data; whether they can depends on how much duplication there is among their existing user files.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="6.5.1">Replication results</head><p>In this section, we evaluate the performance of PodBase by looking at the replication state at the beginning and the end of the (one month long) trace collection.</p><p>Let us look at the replication state of the system before the households ran PodBase. As shown in <ref type="figure" target="#fig_1">Figure 3</ref> (left bars), many households had files that existed on only one device, leaving these files vulnerable to data loss if the device were to fail. Also, many households had a significant number of files already replicated, either as copies of the same file or different files with identical content.</p><p>The right bar in <ref type="figure" target="#fig_1">Figure 3</ref> shows the replication state at the end of the trace collection. 3, 8-9) had most (more than 97%) of their files replicated. With the exception of household 9, which had not quite finished replicating its original files, the remaining households' unreplicated files were recently created or modified and had not yet been replicated at the end of the trace. Households 4, 5, and 7 were not able to replicate as much, as these households had only intermittent connectivity between a pair of their devices. These households each had two well-connected devices and one device that was either mostly offline or connected via a slow DSL connection. In these cases, all of the data was replicated between the well connected devices, but the data on the poorly connected device was not replicated fully. Households 6 and 10 did not have enough space to replicate the remaining 19% and 10% of their files, respectively. In order to improve upon these results, the users would have had to purchase inexpensive additional storage. As a sanity check we had users from households 4 and 10 bring in their notebooks in order to confirm the diagnosis described above. Simply having household 4 bring its notebook into the office, where there was good connectivity between devices, allowed its data to be fully replicated. For household 10, we attached a one terabyte external drive to an active device that had data to be replicated. After doing this, less than 0.5% percent of files remained to be replicated.</p><p>Several households (1-5, 7 and 9) were able to achieve a replication factor greater than two for some of their files, enabling these files to survive multiple device failures. In Household 2, 80% of the user files were replicated 4 times or more.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="6.5.2">Availability results</head><p>A secondary goal of PodBase is to place replicas on devices where they are likely to be useful. Specifically, our mp3 plug-in causes music files to be preferentially placed on devices that are capable of playing music.</p><p>In analyzing the trace, we found that one household had no mp3s and three households had already replicated because a bug was discovered during the user study that had influenced the final state of this household all of their music files on the relevant devices. Thus, PodBase did not have an opportunity to improve availability. However, it did provide a significant gain in availability for several other households. Household 3 had its entire music library of 415 music files made available on all three of its devices. Households 7 and 8 had 851 and 1318 music files made available by PodBase, respectively. Household 9 had 1500 music files from a music library, which was otherwise loosely synchronized between its devices, made available on two additional devices. An additional two households originally had a significant number of mp3 files on their laptops but not on their desktops. PodBase replicated these files onto the desktops, and the mp3 plug-in described in section 4.4 had externalized the music files. This happened during an earlier run of PodBase, therefore it did not show up in our trace. The users gained access to 426 songs and 2611 songs, respectively, on their desktop computers. (The songs were previously stored only on their notebooks.)</p><p>As described in Section 5.2, the replication first optimizes for durability, then cost (time to complete), and finally availability. A concern might be that this choice limits the availability the system can provide. We looked at the impact of this optimization process on household 9, for which the final replication plan had not achieved full replication for availability. In this household the final replication plan yields 95% of the optimal availability. The remaining 5% were not achieved because the replication had not yet finished at the end of the trace, and not because of a limitation in the algorithm. </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="6.5.3">Replication latency and throughput</head><p>We next look at the maximal replication throughput in each of the households. Since all households had many files to replicate at the beginning of the trace collection, the rate at which data was replicated early in the trace is a lower bound for the total replication throughput of a pool. This value in turn provides a lower bound for the rate of new or modified data that a household could generate, such that PodBase would still be able to keep up with replicating. <ref type="figure" target="#fig_2">Figure 4</ref> shows that the peak throughput ranges from 1.4 to 110 GB per day. This result shows that PodBase can keep up with a high to very high rate of data generation, using only existing pair-wise connectivity.</p><p>We now examine the replication latency, i.e., the elapsed time until a new or modified file becomes replicated. If a file is not yet replicated at the end of the trace, we include it in the CDF as having an infinite latency. We first examine those households with relatively short latencies. <ref type="figure" target="#fig_4">Figure 5</ref>(a) shows a CDF of how long it took to replicate a file. For households 2 and 4, over 50% of files were replicated within approximately one day. Households 1 and 7 took longer because there were extended periods with no connectivity. Household 9 replicated gradually over the course of the trace, as connectivity allowed. Second, we show the latency of the households that took significantly longer to replicate their files in <ref type="figure" target="#fig_4">Figure 5</ref>(b). In these households, device connectivity is the dominant factor in the replication latency. When there is connectivity, there are sharps jumps as files get replicated, followed by periods of disconnection, where no replication happens.</p><p>We note that our measured replication latencies are conservative, because in most households, PodBase was busy replicating the user files found initially on the devices during a large part of the trace collection. In steady state, PodBase would have to replicate only newly created or modified files, reducing the latencies considerably. Nevertheless, PodBase was able to replicate data in a timely fashion, subject to available storage and device connectivity.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="6.5.4">Rate of new or modified data</head><p>Next, we look at the rate of new or modified data that is being generated. Each of the households in the user study had on average 528,187 files taking up 332GB. After the initial crawl, an average of 21GB per day was generated by the addition of new and modifications of existing files. These numbers are skewed by a household that stored the disk image of an active virtual machine in the file system; without this household, the value was 381MB per day. (Of course, PodBase could be optimized to handle this case more efficiently.) Our normal households generate new or modified data at a minimal/average/maximal rate of 4.5/36.1/316 Kb/s, while the "heavy" household generates 2.3 Mb/s. Let us consider how well a backup system based on cloud storage alone would perform in our households. At an assumed broadband upload bandwidth of 1 Mb/s, transferring the initial data to the cloud while keeping up with updates would require between 3.7 and 121.6 (median 31.82) days for the normal households. For the heavy household, cloud storage would be infeasible, because the rate of new data exceeds the network bandwidth.</p><p>These results show that for timely replication of data, PodBase's use of peer connections and local storage devices is important. For the normal households, a broadband connection would suffice to replicate new data, but the heavy household would require a faster Internet connection. Even for the normal households, relying solely on a broadband connection to the cloud would require a long period of full network utilization to replicate the initial data, and increase the replication latency in steady state (and therefore the window of vulnerability for new and modified files that have not yet been replicated).</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="6.6">Discussion</head><p>PodBase has been developed by the first author over a period of two years, with three user deployments at different stages. Significant engineering effort was required to make sure our users (most of whom where not affiliated with the project) and their families felt comfortable running it on their personal devices. Users demanded not to have to notice the presence of the system in their daily activity or be surprised by it actions, yet expected the system to do "the right thing" without requiring their attention. Moreover, different households used their devices in very different ways, some of which we could not have imagined (see the discussion of results for different households in Section 6.5). This forced us to emphasize non-intrusiveness (not interfering with user's activities), autonomy (making reasonable choices without user's input) and adaptivity to unexpected scenarios far more than efficiency. Apart from the quantitative results reported in this section, the most important indicator of the project's success may be the fact that ten households (which included members who had little interest and patience for our project) agreed to use the system for the duration of the study and beyond.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="7">Conclusion</head><p>PodBase transparently manages the data stored on personal devices for durability and availability. The system takes advantage of existing free storage space and incidental connectivity among devices. Thus, it reduces the  need for dedicated backup storage or an external storage provider and avoids the bottleneck of a home broadband uplink. PodBase relies on optimization techniques to achieve highly adaptive replication. The system is fully decentralized and does not depend on the health of any one device. Experimental results from a user deployment in ten real households indicate that the system is effective in replicating data without any user attention, and in many cases without requiring additional storage.</p></div><figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_0"><head>Figure 1 :Figure 2 :</head><label>12</label><figDesc>Figure 1: Number and type of devices, by household.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_1"><head>Figure 3 :</head><label>3</label><figDesc>Figure 3: The initial (left bar) and final (right bar) replication status of each household.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_2"><head>Figure 4 :</head><label>4</label><figDesc>Figure 4: Peak daily throughput for each household</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_4"><head>Figure 5 :</head><label>5</label><figDesc>Figure 5: Replication latency for all households</figDesc></figure>
		</body>
		<back>

			<div type="acknowledgement">
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Acknowledgements</head><p>We are hugely indebted to the volunteers who participated in our user study, who patiently stuck with us through multiple deployments. Also, we wish to thank the anonymous reviewers of this and previous versions of this paper, as well as our shepherd Ed Nightingale, for their helpful comments and suggestions.</p></div>
			</div>

			<div type="references">

				<listBibl>

<biblStruct xml:id="b0">
	<analytic>
		<title level="a" type="main">PRACTI replication</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">N</forename><surname>Belaramani</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Dahlin</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">L</forename><surname>Gao</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Nayate</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Venkataramani</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><surname>Yalagandula</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Zheng</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. NSDI &apos;06</title>
		<meeting>NSDI &apos;06</meeting>
		<imprint>
			<date type="published" when="2006" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b1">
	<analytic>
		<title level="a" type="main">New algorithms for planning bulk transfer via internet and shipping networks</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">B</forename><surname>Cho</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">I</forename><surname>Gupta</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. ICDCS &apos;10, ICDCS &apos;10</title>
		<meeting>ICDCS &apos;10, ICDCS &apos;10</meeting>
		<imprint>
			<date type="published" when="2010" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b2">
	<analytic>
		<title level="a" type="main">Pastiche: Making backup cheap and easy</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">L</forename><forename type="middle">P</forename><surname>Cox</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><forename type="middle">D</forename><surname>Murray</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">B</forename><forename type="middle">D</forename><surname>Noble</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">SIGOPS Operating Systems Review</title>
		<imprint>
			<biblScope unit="volume">36</biblScope>
			<biblScope unit="issue">SI</biblScope>
			<biblScope unit="page" from="285" to="298" />
			<date type="published" when="2002" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b3">
	<monogr>
		<title/>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Dropbox</surname></persName>
		</author>
		<ptr target="https://www.dropbox.com/" />
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b4">
	<analytic>
		<title level="a" type="main">A delay-tolerant network architecture for challenged internets</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">K</forename></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. SIGCOMM &apos;03</title>
		<meeting>SIGCOMM &apos;03</meeting>
		<imprint>
			<date type="published" when="2003-08" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b5">
	<analytic>
				<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><forename type="middle">D</forename><surname>Fekete</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">K</forename><surname>Ramamritham</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Replication</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">chapter Consistency Models for Replicated Data</title>
		<meeting><address><addrLine>Berlin / Heidelberg</addrLine></address></meeting>
		<imprint>
			<publisher>Springer</publisher>
			<date type="published" when="2010" />
			<biblScope unit="volume">5959</biblScope>
			<biblScope unit="page" from="1" to="17" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b6">
	<analytic>
		<title level="a" type="main">Persistent personal names for globally connected mobile devices</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">B</forename><surname>Ford</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Strauss</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><surname>Lesniewski-Laas</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Rhea</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">F</forename><surname>Kaashoek</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Morris</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. OSDI &apos;06</title>
		<meeting>OSDI &apos;06</meeting>
		<imprint>
			<date type="published" when="2006-11" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b7">
	<analytic>
		<title level="a" type="main">Omnistore: A system for ubiquitous personal storage management</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Karypidis</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Lalis</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. PerCom &apos;06</title>
		<meeting>PerCom &apos;06</meeting>
		<imprint>
			<date type="published" when="2006-03" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b8">
	<analytic>
		<title level="a" type="main">Don&apos;t settle for less than the best: Use optimization to make decisions</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">K</forename><surname>Keeton</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><surname>Kelly</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Merchant</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><surname>Santos</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Wiener</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">X</forename><surname>Zhu</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Beyer</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. HotOS &apos;07</title>
		<meeting>HotOS &apos;07</meeting>
		<imprint>
			<date type="published" when="2007-05" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b9">
	<analytic>
		<title level="a" type="main">Disconnected operation in the Coda file system</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><forename type="middle">J</forename><surname>Kistler</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Satyanarayanan</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">ACM Trans. Comput. Syst</title>
		<imprint>
			<biblScope unit="volume">10</biblScope>
			<biblScope unit="issue">1</biblScope>
			<biblScope unit="page" from="3" to="25" />
			<date type="published" when="1992" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b10">
	<monogr>
		<title/>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><forename type="middle">C</forename><surname>Many</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Users</surname></persName>
		</author>
		<ptr target="http://money.cnn.com/2006/06/07/technology/dataloss/index.htm" />
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b11">
	<monogr>
		<title/>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Mozy</surname></persName>
		</author>
		<ptr target="https://www.mozy.com/" />
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b12">
	<analytic>
		<title level="a" type="main">A flexible object merging framework</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><forename type="middle">P</forename><surname>Munson</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><surname>Dewan</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. CSCW &apos;94</title>
		<meeting>CSCW &apos;94<address><addrLine>New York, NY, USA</addrLine></address></meeting>
		<imprint>
			<publisher>ACM</publisher>
			<date type="published" when="1994" />
			<biblScope unit="page" from="231" to="242" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b13">
	<monogr>
		<title/>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Pc Pitstop Research</surname></persName>
		</author>
		<ptr target="http://pcpitstop.com/research/storagesurvey.asp" />
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b14">
	<analytic>
		<title level="a" type="main">EnsemBlue: Integrating distributed storage and consumer electronics</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Peek</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Flinn</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. OSDI &apos;06</title>
		<meeting>OSDI &apos;06</meeting>
		<imprint>
			<date type="published" when="2006-11" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b15">
	<analytic>
		<title level="a" type="main">Replication in Ficus distributed file systems</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">G</forename><forename type="middle">J</forename><surname>Popek</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><forename type="middle">G</forename><surname>Guy</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><forename type="middle">W</forename><surname>Page</surname><genName>Jr</genName></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><forename type="middle">S</forename><surname>Heidemann</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. WMRD</title>
		<meeting>WMRD</meeting>
		<imprint>
			<date type="published" when="1990-11" />
			<biblScope unit="page" from="20" to="25" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b16">
	<analytic>
		<title level="a" type="main">PodBase: Transparent storage management for personal devices</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Post</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><surname>Kuznetsov</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><surname>Druschel</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. IPTPS &apos;08</title>
		<meeting>IPTPS &apos;08</meeting>
		<imprint>
			<date type="published" when="2008-02" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b17">
	<monogr>
		<title level="m" type="main">Automomous storage management for personal devices with Podbase</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Post</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Navarro</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><surname>Kuznetsov</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><surname>Druschel</surname></persName>
		</author>
		<idno>001</idno>
		<ptr target="http://www.mpi-sws.org/tr/2011-001.pdf" />
		<imprint>
			<date type="published" when="2011" />
			<publisher>MPI-SWS</publisher>
		</imprint>
	</monogr>
<note type="report_type">Technical Report</note>
</biblStruct>

<biblStruct xml:id="b18">
	<analytic>
		<title level="a" type="main">Few: File management for portable devices</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">N</forename><surname>Preguiça</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><surname>Baquero</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><forename type="middle">L</forename><surname>Martins</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Shapiro</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><forename type="middle">S</forename><surname>Almeida</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">H</forename><surname>Domingos</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">V</forename><surname>Fonte</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Duarte</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. IWSSPS 2005</title>
		<meeting>IWSSPS 2005</meeting>
		<imprint>
			<date type="published" when="2005-03" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b19">
	<analytic>
		<title level="a" type="main">Cimbiosys: a platform for content-based partial replication</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">V</forename><surname>Ramasubramanian</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><forename type="middle">L</forename><surname>Rodeheffer</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><forename type="middle">B</forename><surname>Terry</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Walraed-Sullivan</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><surname>Wobber</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><forename type="middle">C</forename><surname>Marshall</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Vahdat</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. NSDI&apos;09</title>
		<meeting>NSDI&apos;09</meeting>
		<imprint>
			<date type="published" when="2009" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b20">
	<analytic>
		<title level="a" type="main">Roam: A scalable replication system for mobility</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Ratner</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><surname>Reiher</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">G</forename><forename type="middle">J</forename><surname>Popeky</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Mobile Networks and Applications</title>
		<imprint>
			<biblScope unit="volume">9</biblScope>
			<biblScope unit="issue">5</biblScope>
			<biblScope unit="page" from="537" to="544" />
			<date type="published" when="2004" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b21">
	<monogr>
		<title level="m" type="main">Oasis: an architecture for simplified data management and disconnected operation. Personal and Ubiquitous Computing</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Rodrig</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Lamarca</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2005" />
			<biblScope unit="volume">9</biblScope>
			<biblScope unit="page" from="108" to="121" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b22">
	<monogr>
				<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Y</forename><surname>Saito</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Shapiro</surname></persName>
		</author>
		<title level="m">Optimistic replication. Computing Surveys</title>
		<imprint>
			<date type="published" when="2005-03" />
			<biblScope unit="volume">37</biblScope>
			<biblScope unit="page" from="42" to="81" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b23">
	<monogr>
		<title level="m" type="main">Putting home storage management into perspective</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">B</forename><surname>Salmon</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><forename type="middle">W</forename><surname>Schlosser</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">L</forename><forename type="middle">B</forename><surname>Mummert</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">G</forename><forename type="middle">R</forename><surname>Ganger</surname></persName>
		</author>
		<idno>CMU-PDL- 06-110</idno>
		<imprint>
			<date type="published" when="2006" />
		</imprint>
		<respStmt>
			<orgName>Parallel Data Laboratory, Carnegie Mellon University</orgName>
		</respStmt>
	</monogr>
<note type="report_type">Technical Report</note>
</biblStruct>

<biblStruct xml:id="b24">
	<monogr>
		<title/>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Skydrive</surname></persName>
		</author>
		<ptr target="http://skydrive.live.com/" />
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b25">
	<analytic>
		<title level="a" type="main">Segank: A distributed mobile storage system</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Sobti</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">N</forename><surname>Garg</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">F</forename><surname>Zheng</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Lai</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Y</forename><surname>Shao</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><surname>Zhang</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">E</forename><surname>Ziskind</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Krishnamurthy</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><forename type="middle">Y</forename><surname>Wang</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. FAST &apos;04</title>
		<meeting>FAST &apos;04</meeting>
		<imprint>
			<date type="published" when="2004-03" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b26">
	<analytic>
		<title level="a" type="main">Device transparency: a new model for mobile storage</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Strauss</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><surname>Lesniewski-Laas</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><forename type="middle">M</forename><surname>Paluska</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">B</forename><surname>Ford</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Morris</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">F</forename><surname>Kaashoek</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">SIGOPS Oper. Syst. Rev</title>
		<imprint>
			<biblScope unit="volume">44</biblScope>
			<biblScope unit="issue">1</biblScope>
			<biblScope unit="page" from="5" to="9" />
			<date type="published" when="2010" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b27">
	<monogr>
		<title/>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Sugarsync</surname></persName>
		</author>
		<ptr target="http://www.sugarsync.com/" />
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b28">
	<analytic>
		<title level="a" type="main">The Roma Personal Metadata Service</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">E</forename><surname>Swierk</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">E</forename><surname>Kıcıman</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">N</forename><forename type="middle">C</forename><surname>Williams</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><surname>Fukushima</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">H</forename><surname>Yoshida</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">V</forename><surname>Laviano</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Baker</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. WMCSA</title>
		<meeting>WMCSA</meeting>
		<imprint>
			<date type="published" when="2000" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b29">
	<analytic>
		<title level="a" type="main">Managing update conflicts in Bayou, a weakly connected replicated storage system</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><forename type="middle">B</forename><surname>Terry</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><forename type="middle">M</forename><surname>Theimer</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">K</forename><surname>Petersen</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><forename type="middle">J</forename><surname>Demers</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><forename type="middle">J</forename><surname>Spreitzer</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><forename type="middle">H</forename><surname>Hauser</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. SOSP&apos;95</title>
		<meeting>SOSP&apos;95</meeting>
		<imprint>
			<date type="published" when="1995" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b30">
	<monogr>
		<title/>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Time</forename><surname>Machine</surname></persName>
		</author>
		<ptr target="http://www.apple.com/macosx/features/timemachine.html" />
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b31">
	<analytic>
		<title level="a" type="main">Friendstore: Cooperative online backup using trusted nodes</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><forename type="middle">N</forename><surname>Tran</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">F</forename><surname>Chiang</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Li</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">SocialNet&apos;08: First International Workshop on Social Network Systems</title>
		<meeting><address><addrLine>Glasgow, Scotland</addrLine></address></meeting>
		<imprint>
			<date type="published" when="2008" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b32">
	<analytic>
		<title level="a" type="main">The Personal Server: Changing the way we think about ubiquitous computing</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Want</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><surname>Pering</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">G</forename><surname>Danneels</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Kumar</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Sundar</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Light</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. of Ubicomp&apos;02</title>
		<meeting>of Ubicomp&apos;02</meeting>
		<imprint>
			<date type="published" when="2002" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b33">
	<analytic>
		<title level="a" type="main">Sophia: an information plane for networked systems</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Wawrzoniak</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">L</forename><surname>Peterson</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><surname>Roscoe</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. HotNets-II</title>
		<meeting>HotNets-II</meeting>
		<imprint>
			<date type="published" when="2003" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b34">
	<analytic>
		<title level="a" type="main">The Computer for the Twenty-First Century</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Weiser</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Scientific American</title>
		<imprint>
			<date type="published" when="1991-09" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b35">
	<monogr>
		<title/>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Windows Home Server</surname></persName>
		</author>
		<ptr target="http://www.microsoft.com/windows/products/winfamily/windowshomeserver/default.mspx" />
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b36">
	<monogr>
				<ptr target="http://sync.live.com/" />
		<title level="m">Windows live sync</title>
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b37">
	<monogr>
				<ptr target="http://blogs.msdn.com/winfs/" />
		<title level="m">Winfs team blog</title>
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b38">
	<analytic>
		<title level="a" type="main">Dependable self-hosting distributed systems using constraints</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Q</forename><surname>Yin</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Cappos</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Baumann</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><surname>Roscoe</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. HotDep &apos;08</title>
		<meeting>HotDep &apos;08</meeting>
		<imprint>
			<date type="published" when="2008-12" />
		</imprint>
	</monogr>
</biblStruct>

				</listBibl>
			</div>
		</back>
	</text>
</TEI>
