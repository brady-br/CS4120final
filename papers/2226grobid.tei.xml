<?xml version="1.0" encoding="UTF-8"?>
<TEI xmlns="http://www.tei-c.org/ns/1.0" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
xsi:schemaLocation="http://www.tei-c.org/ns/1.0 /Users/atharsefid/Desktop/grobid-0.5.3/grobid-home/schemas/xsd/Grobid.xsd"
 xmlns:xlink="http://www.w3.org/1999/xlink">
	<teiHeader xml:lang="en">
		<encodingDesc>
			<appInfo>
				<application version="0.5.3" ident="GROBID" when="2020-09-29T02:32+0000">
					<ref target="https://github.com/kermitt2/grobid">GROBID - A machine learning software for extracting information from scholarly documents</ref>
				</application>
			</appInfo>
		</encodingDesc>
		<fileDesc>
			<titleStmt>
				<title level="a" type="main">Safe and Automated Live Malware Experimentation on Public Testbeds *</title>
			</titleStmt>
			<publicationStmt>
				<publisher/>
				<availability status="unknown"><licence/></availability>
			</publicationStmt>
			<sourceDesc>
				<biblStruct>
					<analytic>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Abdulla</forename><surname>Alwabel</surname></persName>
							<affiliation key="aff0">
								<orgName type="department" key="dep1">USC/ISI</orgName>
								<orgName type="department" key="dep2">USC/ISI</orgName>
								<orgName type="department" key="dep3">USC/ISI</orgName>
								<orgName type="institution">USC/ISI</orgName>
							</affiliation>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Hao</forename><surname>Shi</surname></persName>
							<affiliation key="aff0">
								<orgName type="department" key="dep1">USC/ISI</orgName>
								<orgName type="department" key="dep2">USC/ISI</orgName>
								<orgName type="department" key="dep3">USC/ISI</orgName>
								<orgName type="institution">USC/ISI</orgName>
							</affiliation>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Genevieve</forename><surname>Bartlett</surname></persName>
							<affiliation key="aff0">
								<orgName type="department" key="dep1">USC/ISI</orgName>
								<orgName type="department" key="dep2">USC/ISI</orgName>
								<orgName type="department" key="dep3">USC/ISI</orgName>
								<orgName type="institution">USC/ISI</orgName>
							</affiliation>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Jelena</forename><surname>Mirkovic</surname></persName>
							<affiliation key="aff0">
								<orgName type="department" key="dep1">USC/ISI</orgName>
								<orgName type="department" key="dep2">USC/ISI</orgName>
								<orgName type="department" key="dep3">USC/ISI</orgName>
								<orgName type="institution">USC/ISI</orgName>
							</affiliation>
						</author>
						<title level="a" type="main">Safe and Automated Live Malware Experimentation on Public Testbeds *</title>
					</analytic>
					<monogr>
						<imprint>
							<date/>
						</imprint>
					</monogr>
				</biblStruct>
			</sourceDesc>
		</fileDesc>
		<profileDesc>
			<abstract>
				<p>In this paper, we advocate for publicly accessible live malware experimentation testbeds. We introduce new advancements for high-fidelity transparent emulation and fine-grain automatic containment that make such experimentation safe and useful to researchers, and we propose a complete, extensible live-malware experimentation framework. Our framework, aided by our new technologies , facilitates a qualitative leap from current experimentation practices. It enables specific, detailed and quantitative understanding of risk, and safe, fully automated experimentation by novice users, with maximum utility to the researcher. We present preliminary results that demonstrate effectiveness of our technologies and map the path forward for public live-malware experimentation .</p>
			</abstract>
		</profileDesc>
	</teiHeader>
	<text xml:lang="en">
		<body>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="1">Introduction</head><p>Today's malware is very versatile, quickly evolving and professionally developed for a large set of thriving underground markets. Malware analysis thus attracts many researchers, especially live analysis, where malware is allowed to interact with the Internet. Such analysis is inherently risky, as traffic that malware sends to the Internet may cause harm-it may create denial-of-service attack on some remote target, scan it, send spam to it, or attempt to exploit it. But such analysis is also extremely useful to researchers, as malware may communicate with a bot-master, or other bots in the same botnet, which enables analysis of such communication and botnet infiltration. Moreover, this sort of communication might serve as a trigger to malicious behavior of interest to researchers.</p><p>Tools that manage a malware's outside communication must balance risk and research utility and are still in their infancy. Presently, state-of-the-art malware experimentation is an elite undertaking. It is conducted by a few expert research groups in specialized environments de- * This work is in part supported by the DHS grant #N66001-10-C-2018. Any opinions, findings, and conclusions or recommendations expressed in this material are those of the author(s) and do not necessarily reflect the views of the Department of Homeland Security.</p><p>veloped by them, and closed to outsiders. These specialized environments often require expert human intervention to identify malware communication or set policies <ref type="bibr" target="#b14">[16,</ref><ref type="bibr" target="#b11">13,</ref><ref type="bibr" target="#b3">5,</ref><ref type="bibr" target="#b12">14]</ref>. Such solutions do not scale and cannot guarantee safety.</p><p>Case for public live-malware experimentation. We argue that today's malware research is held back by the manual expert effort required and the exclusivity of experimentation environments. We take the position that we can and should work towards publicly accessible live malware experimentation with automated mechanisms for managing risk, which scale to the sheer volume of new and sophisticated malware, and offer low-barrier to entry to experts in other domains who wish to foray into malware research. Requiring very specific expertise and specialized customization not only limits the researcher pool, but also stifles advancement of live malware experimentation and tools. By pooling together resources and offering a publicly accessible environment for malware experimentation we can gain better cross-domain efforts which have the potential to be transformative to malware research.</p><p>While live malware experimentation on public testbeds may be considered controversial, malware analysis is a growing field that attracts many novices. The community needs a safe and accessible path for these researchers to experiment with malware and build their expertise. Without such a path, novices may resort to naive and unsafe experimentation that jeopardizes their institutions and increases the risk to the Internet.</p><p>Missing pieces. We identify two missing pieces required to support public live malware experimentation. First, and most important, automated and flexible containment mechanisms are needed. Such mechanisms must have a way to provide real or seemingly-real malware communication with external world, sufficient to elicit all useful malware behaviors. These mechanisms must allow real malware communication with botmasters and other bots, and they must not require a human expert in the loop to make decisions-i.e. which malware communication should be allowed on to the Internet-these decisions must be done in automated fashion to provide scalability and non-expert access. Finally, the risk of allowed malware communication must be precisely quantified, measured and managed.</p><p>We propose an automated approach to generating finegrained containment policies, that are customized for each connectivity check, and that can automatically evolve as more observations are gathered from malware analysis. In addition to this policy generation, we also develop a smart mimicking engine that learns a profile for each public server contacted by malware and replicates the server locally, so future communication can be contained while creating an illusion of full connectivity for malware.</p><p>We further propose a risk measurement and management engine that monitors outgoing malware traffic and how this communication is consumed by the Internet. Our management engine uses these observations to quickly detect policies that lead to potential harm to external hosts and modifies these policies to increase containment level.</p><p>The second missing piece needed for public live malware experimentation is hi-fidelity emulation of physical machines. Several malware analysis tools develop by experts are released publicly, such as <ref type="bibr" target="#b7">[9,</ref><ref type="bibr" target="#b21">23,</ref><ref type="bibr" target="#b4">6]</ref>. Such tools are invaluable to support malware analysis in public testbeds by novice users. But many of these tools use CPU or system emulators to facilitate fine-grained dissection of malware functionalities (e.g., Anubis <ref type="bibr" target="#b4">[6]</ref>, TEMU <ref type="bibr" target="#b21">[23]</ref>, and Bochs <ref type="bibr" target="#b15">[17]</ref>). Such analysis also protects the host, by isolating it from potentially harmful malware actions. But there are subtle differences between operation of emulated environments and virtual machines and those of bare-metal physical machines. Malware routinely checks for these differences to detect that it is being run in a virtual machine, and modifies its behavior to thwart analysis.</p><p>We propose new ways to comprehensively identify cases where virtual and emulated environments execute CPU instructions differently from bare-metal machines, and how to compensate for these differences to hide them from malware. Our approach is test-driven, fine-grained and automated. It can enumerate differences between a hardware and a virtual machine effectively and efficiently. Compared to the state-of-the-art Red Pill <ref type="bibr" target="#b17">[19]</ref>, we found five times more pills running fifteen times fewer tests.</p><p>While currently manual virtual machine modifications are needed to hide detected differences from malware, this process requires minimal code writing by a human and is done only once per each virtual machine.</p><p>In the following sections we present the architecture of our framework for live malware experimentation on public testbeds, the design and implementation details of each component and some preliminary results and experiences. While our framework and its pieces are still under development, we provide in this paper sufficient preliminary results to demonstrate its effectiveness and usefulness to researchers. Over time, our solutions will increase in automation and eventually be used safely without a human expert. This will both advance the experimentation technologies and tools, and will foster wider innovation in malware defenses. <ref type="figure" target="#fig_0">Figure 1</ref> shows our proposed architecture for live malware experimentation on a public testbed. While the layout is similar to other frameworks (see Section 3), the functionalities of the highlighted components (shown in blue in the <ref type="figure">Figure)</ref> are novel and provide a qualitative advancement.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2">Experimentation Framework</head><p>In our framework, all malware communication with the Internet is examined and contained by a dedicated Warden machine. The Warden sits between the Inmate Network-where malware executes on testbed machinesand the outside world. Using a fine-grained firewall and policy engine (Section 2.2), the Warden chooses one of the following actions to take with malware traffic: (1) drop, (2) rewrite, (3) rate-limit, (4) forward on to the Internet and (5) redirect to Smart Impersonators-services which mimic public Internet servers (Section 2.2.3).</p><p>In addition to the firewall and policy engine, the Warden supports monitoring and data persistence functionalities. These functionalities are supported through continuous collection and storing of network traces to capture all communication exchanged between the framework and the Internet. The Warden also keeps experimental history for each experiment-information such as the testbed user, the malware studied, the experimental environment, etc.</p><p>The Inmate Network consists of a mix of machines, some of which run VM software (e.g., QEMU <ref type="bibr" target="#b5">[7]</ref>, VMWare <ref type="bibr" target="#b6">[8]</ref>, OpenVZ <ref type="bibr" target="#b0">[1]</ref> and Xen <ref type="bibr" target="#b19">[21]</ref>), while others are bare metal machines. Since malware limits its behavior if it detects virtualization, machines that run VM images would also run our Hi-Fidelity Emulator (HFE) to defeat virtualization checks.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.1">Hi-Fidelity Emulation</head><p>The challenges for hi-fidelity emulation are (1): create a comprehensive list of differences between a VM and a bare metal machine, and (2): create "lies" to hide these differences.</p><p>We draw on Martignoni et al.'s work on Red Pill Testing <ref type="bibr" target="#b17">[19,</ref><ref type="bibr" target="#b16">18]</ref> for enumerating differences between VMs and physical machines. Their approach is to define a state of a machine (the contents of memory, values of registers and the program counter), start with the same initial state on both a VM and a physical machine, ex- ecute an instruction, and compare the states. A pill is found if two states differ. This process is repeated for IA-32 instructions and test cases are generated by randomly generating operands for each op code.</p><p>While these works are seminal in pill detection they have several deficiencies: (1) Random test case generation cannot guarantee that all pills will be detected. We improve on this by using instruction semantics to carefully craft test cases that explore all code paths. (2) Martignoni et al. use QEMU with Intel VT-x (hardwareassisted QEMU) as an Oracle, while we use physical machines with no virtualization. This improves fidelity of testing and ensures detection of more pills.</p><p>In our test generation, we use the semantics of each instruction to identify ranges of instruction operands that cause different execution behaviors, as reflected in different values in output registers and memory, and different exception behavior. For each range, we select both boundary and random values such that all different execution branches are examined, and all exceptions are raised.</p><p>IA-32 CPU architecture contains 906 instruction codes and a human must reason about each instruction to identify its inputs and outputs and how to populate them to test all execution behaviors. To reduce the scale of this human-centric operation we first group the instructions into five categories: arithmetic, data movement, logical, flow control and miscellaneous. Arithmetic and logical category are further subdivided into general-purpose and FPU categories based on the type of their operands. We then define parameter ranges to test per category.</p><p>Arithmetic Group. Instructions in this group first fetch arguments and then perform arithmetic operations. The arguments include actual data bits they operate on and certain flag bits that decide execution branches. We classify instructions in this group into two subgroups, depending on whether they work only on integer registers (general-purpose group), or also on floating point registers (FPU group). The instructions in FPU group include instructions with x87 FPU, MMX, SSE, and other extensions.</p><p>Based on the argument types and sizes, branch conditions, and the number of arguments, we divide both subgroups into finer partitions. For example, aaa, aas, daa, and das in the general-purpose group all compare al register (holding one packed BCD argument 8-bit long) with 0fh and check the adjustment flag af in efl register. This decides the output of the instruction. To test instructions in this set we initialize al register to minimal (00h), maximal (0ffh), boundary (0fh), and random values in different ranges (01h ∼ 0eh, 10h ∼ 0feh). We also flip af between clear and set for different al values.</p><p>Data Movement. Data movement instructions copy data between registers, main memory, and peripheral devices and usually do not modify flag bits. There are several execution branches that we explore in tests. The source and destination operands may be located outside segment limits, which may be code, data, FS, or stack segment. If the effective address is valid but paged out, a page-fault exception will be thrown. If alignment checking is enabled and an unaligned memory reference is made while the current privilege level is 3, the system will raise an alignment exception. Some instructions also check direction and conditional flags, and a few others validate the format of floating point values. All these input parameters and their states that influence an instruction's execution outcome must be tested.</p><p>Logic Group. Logic instructions test relationship and properties of operands and set flag registers correspondingly. We divide these instructions into general-purpose and FPU depending on whether they use efl register only (general-purpose) or they use both efl and mxcsr registers (FPU). We further partition logic instructions based on the flag bits they read and argument types and sizes. When designing test cases, in addition to testing minimal, maximal, and boundary values for each parameter, for instructions that compare two parameters we also generate test cases where these parameters satisfy larger than, equal, and less than conditions.</p><p>In the FPU subgroup, we apply similar rules to generate floating point operands. We further generate test cases to populate mxcsr register, which has control, mask, and status flags. The control bits specify how to control underflow conditions and how to round the results of SIMD floating-point instructions. The mask bits control the generation of exceptions such as denormal operation and invalid operation. We use ldmxcsr to load different values into mxcsr and test instruction behaviors under these scenarios.</p><p>Flow Control. Flow control instructions also test condition code, alike logic instructions. Upon satisfying jump conditions, test cases start execution from another place. For short or near jumps, test cases do not need to switch the program context; but for far jumps, they must switch stacks, segments, and check privilege requirements.</p><p>Miscellaneous. Instructions in this group provide unique functionalities and we manually devise test cases for each of them that evaluate all valid and invalid use, and raise all exceptions.</p><p>We use two physical machines in our tests as Oracles: (O1) an Intel Xeon E3-1245 V2 3.40GHz CPU, 2 GB memory, with Windows 7 Pro x86, and (O2) Xeon W3520 2.6GHz, 512MB memory, with Windows XP x86 SP3. The VM host has the same hardware and guest system as the first Oracle, but it has 16 GB memory, and runs Ubuntu 12.04 x64. We test QEMU (VT-x), QEMU (TCG), and Bochs, deploying different virtualization technologies: hardware-assisted, dynamic translation, and interpretation respectively. We allocate to them the same size memory as in the Oracle. We test QEMU versions 0.14.0-rc2 (Q1), 1.3.1 (Q2), 1.6.2 (Q3), and 1.7.0 (Q4), and Bochs version 2.6.2 (B). The master has an Intel Core i7 CPU and installs WinDbg 6.12 to interact with the slaves. For test case compilation, we use Microsoft Assembler 10 and turn off all optimizations.</p><p>Out of 1,653 instructions present in IA-32 Intel manuals <ref type="bibr" target="#b10">[12]</ref>, with different addressing modes, there are 906 unique mnemonics. We generate total of 19,412 test cases for these instructions. <ref type="table" target="#tab_0">Table 1</ref> shows the breakdown of pills we found per instruction.</p><p>For each of these pills we were able to devise a method that hides its presence from malware, by modifying QEMU's translation of guest code to overwrite affected registers and memory with appropriate values that a physical machine would place there. Our future work lies in implementing these modifications in QEMU and in evaluating the completeness of our pill-finding. For comparison, we use 15 times fewer tests and discover 5 times more pills than Red Pill Testing <ref type="bibr" target="#b17">[19]</ref>. Our testing is also more efficient, 47.6% of our test cases yield a pill, compared to only 0.6% of EmuFuzzer's tests.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.2">Managing Malware's External Communication</head><p>Malware's external communication must be tightly managed to balance the utility of experimentation to the researcher with the risk external communication poses to the Internet. To support a range of testbed users, with differing experimental needs, traffic from each experiment needs to be subject to its own set of policies affecting external communication. But knowledge about malware behavior learned in one experiment, is shared between experiments. This allows for evolution of policies from more restrictive to permissive as testbed learns what to expect from each malware's communication.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.2.1">Malware Management Cycle</head><p>We observe that once we allow traffic out of our framework it is impossible to guarantee that there will be no risk to the Internet. Even the most benign looking traffic, such as a single HTTP GET message, can be malicious if generated by a multitude of machines, simultaneously, to overwhelm a victim destination. We manage this risk by using the following four-step containment approach to hand each malware communication attempt: </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.2.3">Smart Impersonators</head><p>A Smart Impersonator is a server that plays the roles of Internet hosts, such as public Web, DNS and mail servers, desktops with unpatched vulnerabilities, bot masters that communicate with our "malware inmates" interactively, etc. A Smart Impersonator can be a Random Impersonator or a Custom Impersonator. A Random Impersonator provides valid but not specific replies to malware's communication attempts. A Random HTTP server responds with 200 OK messages with random content. A random DNS server responds to any query with its own IP address. A random SMTP server accepts messages from any user with any password. A random IRC server is a standard, out of box IRC server without any modification. Some malware may do just a communication check to see if it can reach a public server, without examining any of the content in server reply. Such malware will be tricked by a Random Impersonator to proceed with execution. Other malware may expect specific content from the server. For such communications we develop a Custom Impersonator.</p><p>This development occurs in several steps. First, we have built an Impersonation Helper that runs malware in DECAF <ref type="bibr" target="#b9">[11]</ref>, a system emulator based on QEMU <ref type="bibr" target="#b5">[7]</ref>, with a plugin we developed to collect binary traces, containing CPU instructions executed by malware and mark instructions that process data received from the network. We then translate these traces into VINE Intermediate Language <ref type="bibr" target="#b21">[23]</ref>. We leverage VINE back-end to apply symbolic execution on the collected traces. The basic principle of symbolic execution is to replace certain values with symbols, in our case we replace network input with symbolic variables. As these values are used in computations, they produce symbolic expressions. For example, if the trace contains sub al,bl and al contains 0x5 and bl is marked with t1, then al=5-t1. We collect   <ref type="bibr">[2]</ref> to find values that satisfies or dissatisfies those expressions. These constraints tell us which checks malware performed on the network input and what changes to the network input required to execute other branches. An experimenter can then vary these parts of network input to elicit different malware behavior. Each variation that results in successful execution of malware code produces information needed to build a Custom Impersonator's profile. Such profile consists of malware requests and server replies and can be later reused by other experimenters that use the same malware binary. Using our Impersonation Helper we have analyzed 600 samples to evaluate how frequently does malware consider communication necessary, and to investigate the trends in malware communication. Since building Smart Impersonators is currently a highly manual process such analysis helps us direct our efforts in most fruitful directions. We let each sample run for 20 minutes, first in isolation and then with a Random Impersonator. 65% or 390 of these attempt to reach a remote host. <ref type="table" target="#tab_2">Table 2</ref> shows the number of flows generated for TCP vs UDP, and Tables 3 and 4 show the number of flows per a given service port. HTTP and DNS account for majority of these flows. We then look deeper into HTTP flows, using our Symbolic Execution Engine to find out the purpose of each flow. The results are shown in <ref type="table">Table 5</ref>. Majority of these flows serve C &amp; C purpose or attempt to download a binary. These preliminary results demonstrate that there is a limited number of malware communication patterns that should be amenable to semi-manual or automated analysis needed to build Custom Impersonators for each pattern.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.2.4">Fine-grained Firewall</head><p>Our four-step approach is realized by a Fine-grained Firewall. Similar to prior work <ref type="bibr" target="#b14">[16]</ref> there are five possible actions for each malware communication: drop, allow, rate-limit, redirect or rewrite <ref type="bibr" target="#b14">[16]</ref>. In our frame-   work we introduce two innovations into the containment mechanism: (1) We perform redirection not to a generic server, but to a Smart Impersonator. <ref type="formula">(2)</ref> We do not choose a single containment action for an entire connection. Instead, we can apply multiple containment actions at different points in a connection's history. For example, we may allow the initial handshake on a connection, then rate-limit the next few packets and then drop the rest. This flexible response is needed because it is impossible to tell the malware's intent at the very beginning of each connection. Through observations and interactions with the malware during a connection we can better understand the purpose of the communication and revise our decisions to better manage the risk. For enforcement of policy decisions, we use a FineGrained Firewall, able to police malware traffic at a semantic level. This means that the Firewall can understand application-level headers and content in malware messages, as well as the header-level information found in individual packets, and to apply drop, rewrite, ratelimit, forward or redirect-to-Impersonator actions on the packets, flows and parts of flows. Two functionalities are needed for the Fine-Grained Firewall: (1) an expressive policy language at a high semantic level, and (2) a Deep Packet Inspection (DPI) firewall that efficiently examines entire packets. While we have not yet built the FineGrained Firewall, components to satisfy each of these functionalities already exist. in the open-source community We plan to modify and combine them to achieve the full functionality we require. Specifically, the Bro IDS language <ref type="bibr" target="#b18">[20]</ref> is expressive enough to define signatures that relate to packet headers and contents, as well as to reassemble packet streams and perform state full signature matching, but it does not itself sit inline, and thus cannot act as a firewall. IP tables/Netfilter <ref type="bibr" target="#b13">[15]</ref>   <ref type="table">Table 5</ref>: HTTP breakdown IDS's packet reassembly and matching, to create a novel firewall that can reason about packets, connections, applications and content and can take versatile actions on each of these targets inline.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.2.5">Risk Management</head><p>The fourth step in our malware management is letting out communications that we could not successfully mimic inside the testbed and that were necessary for malware execution. For such communications we could not build the Custom Impersonator, because the STP solver could not solve the constraints we gave it. This will occur when the network input goes through non-linear transformations in the code, e.g., because it is a decryption key expected from the bot-master. Another possibility may be that we build the Custom Impersonator but the malware still does not execute. In these cases, for useful experimentation malware communication must be allowed to leave the testbed. Since we cannot establish with high certainty the purpose of this communication we must resort to close monitoring of it and its effects on the remote host, so these rare communication channels cannot be misused to do harm.</p><p>We perform this monitoring in the following way. We detect TCP scans by monitoring the number of half-open TCP connections from the malware sample over time. Similarly UDP scans are detected by monitoring the ratio of successful (reply received from server) vs unsuccessful (ICMP unreachable, ICMP service unavailable or timeout) communication attempts. Very low thresholds can be used to detect and stop these scan campaigns as most communication attempts will be handled by an Impersonator and will not be affected by these thresholds. DoS attacks can be detected by observing persistent communication attempts from the malware with a destination that fails to generate sufficient replies (e.g. as done by D-WARD <ref type="bibr">[30]</ref>). Spam campaigns can also be detected by setting a low threshold to the number of allowed e-mail messages. Known exploits should never be allowed to leave the testbed. We detect them by forcing all communication out to the Internet to pass through one or more IDS engines, such as Snort <ref type="bibr" target="#b20">[22]</ref> to detect known exploits, and Bro <ref type="bibr" target="#b18">[20]</ref>, to detect protocol violations and malformed headers. These IDS engines are regularly updated with new malware signatures. While this cannot completely prevent our framework from spreading exploits, these checks ensure that only zero-day or   <ref type="bibr" target="#b8">[10]</ref>), and thus the probability of us sourcing those is minimal.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3">Related Work</head><p>While there has been extensive work and advancements in malware analysis, there has been little done on automatic frameworks-frameworks which can enable safe malware experimentation without extensive input from specialized experts. Related work falls into one of the following categories: (1) full framework for experimentation, and (2) single target solutions, e.g un-packing, multi-path exploration etc. We only discuss solutions that propose full frameworks for malware experimentation as they are most closely related to our work. <ref type="table" target="#tab_8">Table 6</ref> summarizes related frameworks <ref type="bibr" target="#b3">[5,</ref><ref type="bibr" target="#b14">16,</ref><ref type="bibr" target="#b11">13,</ref><ref type="bibr" target="#b22">24,</ref><ref type="bibr" target="#b4">6,</ref><ref type="bibr" target="#b1">3]</ref> and the challenges these frameworks address. HiFidelity Emulation: column denotes if the framework provides solutions for anti-VM malware checks. Handlecommunication column denotes if the framework allows any communication between malware and the Internet. Strict Containment: column denotes if strict containment measures are taken so that environment can guarantee no (or limited) risk to the Internet. Automaticity: denotes if human expert involvement is required for strict containment.</p><p>Mesocosms <ref type="bibr" target="#b3">[5]</ref> authors implement a completely contained testbed, integrating a set of services required by botnets, such as IRC and DynDNS. While some of their work may be useful for developing our Smart Impersonators, their services offer one generic profile per service, while we plan to accommodate many profiles, each specific to one public server. Mesocosms does not require a human expert in the loop but it also does not allow any malware communication with the outside, which limits research utility. GQ <ref type="bibr" target="#b14">[16]</ref> and Botlab <ref type="bibr" target="#b11">[13]</ref> allow limited communication with the outside world. GQ work proposes a malware execution farm that introduces containment as a first-order component in support of malware analysis. Similarly, Botlab-a real-time spam botnet monitoring systemalso allows controlled communication with the Internet. But both GQ and Botlab require a human expert in the loop for strict containment while we do not.</p><p>The DeterLab testbed <ref type="bibr" target="#b2">[4]</ref> has tried in the past to support live malware experimentation in a limited manner, through the T1/T2 framework <ref type="bibr" target="#b22">[24]</ref>. The framework enables DeterLab users to allow traffic to certain outside destination IPs and ports. Only researchers that were vetted by the DeterLab's executive team had access to the framework, since this crude containment relied heavily on researcher expertise. This greatly differs from our proposed work where policies are mostly set automatically and risk to the Internet can be quantified. Anubis <ref type="bibr" target="#b4">[6]</ref> is a public service for analyzing malware. Samples are run in a sand-boxed environment for a certain amount of time after which a report is generated. No communication is allowed with the Internet.</p><p>Malwarelab <ref type="bibr" target="#b1">[3]</ref>, is an isolated environment built to test exploit kits' resiliency against software updates over time. It does not allow any communication with the Internet.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4">Conclusions and discussion</head><p>In this paper we advocated for better accessibility in live malware experimentation. We proposed a framework for automated, safe and public live-malware experimentation with two new advancements for high-fidelity transparent emulation and fine-grained automatic containment. We argue that a public framework benefits inexperienced and experienced users alike. These advancements take the burden off expert manual intervention and allow for easier setup, access and scaling in live malware analysis.</p><p>Opening up live malware experimentation using a shared environment will evolve malware research efforts and best practices at a much quicker pace, since sharing results and best practices does not require the effort of translating between differing experimental environments. Additionally, a publicly accessible environment provides easier access for new users who may bring expertise from other domains.</p><p>Through our fine-grained and automated policies, we expect that our proposed framework will be flexible and scalable enough to address a range of research needs and users. While we are at the early stages of development and exploration, we expect that feedback from the community will play a vital roll on the path to public and automated malware testbeds. We encourage discussion on enabling easier access to live malware experimentation and the ethical and technical challenges involved in doing so. With feedback from the community, and thorough investigation, we hope to reach our goal of providing publicly accessible, safe and automated live malware experimentation.</p></div><figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_0"><head>Figure 1 :</head><label>1</label><figDesc>Figure 1: Framework for live malware experimentation on a public testbed.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_0" validated="false"><head>1 .</head><label>1</label><figDesc></figDesc><table>Contain it and evaluate if it is a necessary commu-
nication for malware 

2. If necessary, redirect it to a Smart Impersonator. Try 
Random Impersonator at first. If that does not ex-
pose sufficient malware behaviors switch to a Cus-
tom Impersonator if available. 

3. If Custom Impersonator is not available, run Sym-
bolic Execution Engine to build the Custom Imper-
sonator. 

4. If Custom Impersonator cannot be built (i.e., mal-
ware communication is unforgeable) let the com-
munication out to the Internet and observe. We 
define different signs of this communication being 
harmful to the Internet in Section 2.2.4. If any of 
these signs is detected communication is halted. 

2.2.2 Evaluation of Communication Patterns 

To evaluate if a communication is necessary for mal-
ware we collect several measures of malware activity: Category 

Q1 (TCG) Q2 (TCG) Q2 (VT-x) Bochs 
Total tests 

arith 
gen 
877 
872 
626 
920 
2,702 
FPU 
4,525 
4,486 
3,603 
4,245 
6,743 
data mov 
1,788 
1,780 
1,524 
1,804 
4,394 

logic 
gen 
371 
365 
346 
363 
2,185 
FPU 
1,446 
1,447 
1,127 
1,362 
2,192 
flow ctrl 
164 
166 
169 
171 
1,017 
misc 
84 
85 
83 
93 
179 

Table 1: Pills Per Instruction Category 

(1) number of system calls, (2) number of unique sys-
tem calls and (3) entropy of system calls. We also note 
if malware continues running after the communication 
has been denied or if it halts. If a malware sample has 
lower activity in isolation than when a communication is 
allowed or if it halts we say that this communication is 
necessary for live experimentation. 

</table></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_2" validated="false"><head>Table 2 :</head><label>2</label><figDesc></figDesc><table>Number of Flows Generated by 390 malware 
samples 

all symbolic expressions used in a control-flow instruc-
tions and fed them STP solver</table></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_4" validated="false"><head>Table 3 :</head><label>3</label><figDesc></figDesc><table>TCP flows, breakdown per port, showing ports 
with more than 100 requests 

Port 
# Flows 
Purpose 
53 
18098 
UDP 
16471 
42 
Reach Master 
P2P PORTS 
660 

</table></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_5" validated="false"><head>Table 4 : UDP flows, breakdown per port</head><label>4</label><figDesc></figDesc><table></table></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_6" validated="false"><head></head><label></label><figDesc>can manipulate packets and flows efficiently but its policy language is not sufficiently expressive for our needs. In our work we plan to combine Netfilter's packet capture with Bro</figDesc><table>Purpose 
# requests 
Downloading binary 
236 
Machine Registration 
7 
Contacting masters 
2513 
Non-standard HTTP 
30 
Connectivity Test 
5 

</table></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_8" validated="false"><head>Table 6 :</head><label>6</label><figDesc></figDesc><table>Comparison with Previous Work 

polymorphic exploits escape. Zero-day exploits are ex-
tremely rare (only 18 were identified between 2008 and 
2011 </table></figure>
		</body>
		<back>
			<div type="references">

				<listBibl>

<biblStruct xml:id="b0">
	<monogr>
		<title/>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Openvz</surname></persName>
		</author>
		<ptr target="http://openvz.org/" />
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b1">
	<analytic>
		<title level="a" type="main">Experimentation with cybercrime attack tools</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Allodi</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">L</forename><surname>Kotov</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">V</forename><surname>And</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Massacci</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">F</forename><surname>Malwarelab</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Presented as part of the 6th Workshop on Cyber Security Experimentation and Test</title>
		<meeting><address><addrLine>Berkeley, CA</addrLine></address></meeting>
		<imprint>
			<publisher>USENIX</publisher>
			<date type="published" when="2013" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b2">
	<analytic>
		<title level="a" type="main">Cyber Defense Technology Networking and Evaluation</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Bajcsy</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Benzel</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><surname>Bishop</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">E</forename><forename type="middle">T</forename><surname>Al</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Commun. ACM</title>
		<imprint>
			<biblScope unit="volume">47</biblScope>
			<biblScope unit="page">3</biblScope>
			<date type="published" when="2004" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b3">
	<monogr>
				<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Barford</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><surname>And Blodgett</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><forename type="middle">Toward</forename><surname>Botnet Mesocosms</surname></persName>
		</author>
		<title level="m">Proceedings of the First Conference on First Workshop on Hot Topics in Understanding Botnets</title>
		<meeting>the First Conference on First Workshop on Hot Topics in Understanding Botnets</meeting>
		<imprint>
			<date type="published" when="2007" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b4">
	<analytic>
		<title level="a" type="main">A view on current malware behaviors</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Bayer</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">U</forename><surname>Habibi</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">I</forename><surname>Balzarotti</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Kirda</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">E</forename><surname>And</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Kruegel</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">USENIX workshop on large-scale exploits and emergent threats (LEET</title>
		<imprint>
			<date type="published" when="2009" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b5">
	<analytic>
		<title level="a" type="main">Fast and Portable Dynamic Translator</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Bellard</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">F</forename><surname>Qemu</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the Annual Conference on USENIX Annual Technical Conference</title>
		<meeting>the Annual Conference on USENIX Annual Technical Conference</meeting>
		<imprint>
			<date type="published" when="2005" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b6">
	<analytic>
		<title level="a" type="main">Virtualization System including a Virtual Machine Monitor for a Computer with a Segmented Achitecture</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Devine</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><forename type="middle">W</forename><surname>Bugnion</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">E</forename><surname>And</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Rosenblum</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">US Patent</title>
		<imprint>
			<biblScope unit="volume">6397242</biblScope>
			<date type="published" when="1998" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b7">
	<analytic>
		<title level="a" type="main">Ether: Malware Analysis via Hardware virtualization Extensions</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Dinaburg</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Royal</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><surname>Sharif</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>And</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Lee</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">W</forename></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 15th ACM Conference on Computer and Communications Security</title>
		<meeting>the 15th ACM Conference on Computer and Communications Security</meeting>
		<imprint>
			<date type="published" when="2008" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b8">
	<monogr>
		<title level="m" type="main">Zero-day attacks are meaner, more rampant than we ever thought</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Goodin</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename></persName>
		</author>
		<ptr target="http://arstechnica.com/security/2012/10/zero-day-attacks-are-meaner-and-more-plentiful-than-thought/" />
		<imprint>
			<date type="published" when="2012-10" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b9">
	<analytic>
		<title level="a" type="main">make it work, make it right, make it fast&quot;, building a platform-neutral whole-system dynamic binary analysis platform</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Henderson</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Prakash</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Yan</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">L</forename><forename type="middle">K</forename><surname>Hu</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">X</forename><surname>Wang</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">X</forename><surname>Zhou</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>And</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Yin</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">H</forename></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">the International Symposium on Software Testing and Analysis</title>
		<meeting><address><addrLine>San Jose, CA</addrLine></address></meeting>
		<imprint>
			<date type="published" when="2014" />
		</imprint>
	</monogr>
	<note>ISSTA&apos;14, ISSTA</note>
</biblStruct>

<biblStruct xml:id="b10">
	<monogr>
				<ptr target="http://www.intel.com/content/www/us/en/processors/architectures-software-d\eveloper-manuals.html" />
		<title level="m">INTEL. Intel 64 and IA-32 Architectures Software Developers Manuals</title>
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b11">
	<analytic>
		<title level="a" type="main">Studying Spamming Botnets Using Botlab</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">John</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><forename type="middle">P</forename><surname>Moshchuk</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Gribble</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><forename type="middle">D</forename><surname>And</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Krish-Namurthy</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 6th USENIX Symposium on Networked Systems Design and Implementation</title>
		<meeting>the 6th USENIX Symposium on Networked Systems Design and Implementation</meeting>
		<imprint>
			<date type="published" when="2009" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b12">
	<analytic>
		<title level="a" type="main">Emulating Emulation-resistant Malware</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Kang</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><forename type="middle">G</forename><surname>Yin</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">H</forename><surname>Hanna</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Mccamant</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>And</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Song</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 1st ACM Workshop on Virtual Machine Security</title>
		<meeting>the 1st ACM Workshop on Virtual Machine Security</meeting>
		<imprint>
			<date type="published" when="2009" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b13">
	<analytic>
		<title level="a" type="main">A Development of Intrusion Detection and Protection System using Netfilter Framework</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Kil</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><forename type="middle">W</forename><surname>Kim</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><forename type="middle">K</forename><surname>Lee</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">G</forename><surname>And</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Kwon</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Y</forename></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 10th International Conference on Rough Sets, Fuzzy Sets, Data Mining, and Granular Computing</title>
		<meeting>the 10th International Conference on Rough Sets, Fuzzy Sets, Data Mining, and Granular Computing</meeting>
		<imprint>
			<date type="published" when="2005" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b14">
	<analytic>
		<title level="a" type="main">GQ: Practical Containment for Measuring Modern Malware Systems</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Kreibich</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><surname>Weaver</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">N</forename><surname>Kanich</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><surname>Cui</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">W</forename><surname>And</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Pax-Son</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">V</forename></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 2011 ACM SIGCOMM Conference on Internet Measurement Conference</title>
		<meeting>the 2011 ACM SIGCOMM Conference on Internet Measurement Conference</meeting>
		<imprint>
			<date type="published" when="2011" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b15">
	<analytic>
		<title level="a" type="main">Bochs: A Portable PC Emulator for Unix/X</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Lawton</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">K</forename><forename type="middle">P</forename></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Linux Journal</title>
		<imprint>
			<biblScope unit="page">29</biblScope>
			<date type="published" when="1996" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b16">
	<analytic>
		<title level="a" type="main">Testing System Virtual Machines</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Martignoni</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">L</forename><surname>Paleari</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Fresi Roglia</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">G</forename><surname>And Br-Uschi</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">ISSTA</title>
		<imprint>
			<date type="published" when="2010" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b17">
	<monogr>
				<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Martignoni</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">L</forename><surname>Paleari</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Roglia</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">G</forename><forename type="middle">F</forename><surname>And Br-Uschi</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Testing</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Cpu</forename><surname>Emulators</surname></persName>
		</author>
		<title level="m">ISSTA</title>
		<imprint>
			<date type="published" when="2009" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b18">
	<analytic>
		<title level="a" type="main">A System for Detecting Network Intruders in Real-Time</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Paxson</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">V</forename><surname>Bro</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 7th Conference on USENIX Security Symposium</title>
		<meeting>the 7th Conference on USENIX Security Symposium</meeting>
		<imprint>
			<date type="published" when="1998" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b19">
	<analytic>
		<title level="a" type="main">Xen 3.0 and the Art of Virtualization</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Pratt</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">I</forename><surname>Fraser</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">K</forename><surname>Hand</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Limpach</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><surname>Warfield</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Magenheimer</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Nakajima</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>And</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Mallick</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Linux Symposium</title>
		<imprint>
			<date type="published" when="2005" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b20">
	<analytic>
		<title level="a" type="main">Snort -Lightweight Intrusion Detection for Networks</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Roesch</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 13th USENIX conference on System administration</title>
		<meeting>the 13th USENIX conference on System administration</meeting>
		<imprint>
			<date type="published" when="1999" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b21">
	<analytic>
		<title level="a" type="main">Bitblaze: A new approach to computer security via binary analysis</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Song</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Brumley</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Yin</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">H</forename><surname>Caballero</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Jager</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">I</forename><surname>Kang</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><forename type="middle">G</forename><surname>Liang</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Z</forename><surname>Newsome</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Poosankam</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><surname>And</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Saxena</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 4th International Conference on Information Systems Security</title>
		<meeting>the 4th International Conference on Information Systems Security</meeting>
		<imprint>
			<date type="published" when="2008" />
			<biblScope unit="page" from="1" to="25" />
		</imprint>
	</monogr>
	<note>ICISS &apos;08</note>
</biblStruct>

<biblStruct xml:id="b22">
	<monogr>
		<title level="m" type="main">A Two-constraint Approach to Risky Cybersecurity Experiment Management</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Wroclawski</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Mirkovic</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Faber</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><surname>And</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Schwab</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename></persName>
		</author>
		<imprint>
			<date type="published" when="2008" />
		</imprint>
	</monogr>
	<note>Invited paper at the Sarnoff Symposium</note>
</biblStruct>

				</listBibl>
			</div>
		</back>
	</text>
</TEI>
