<?xml version="1.0" encoding="UTF-8"?>
<TEI xmlns="http://www.tei-c.org/ns/1.0" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
xsi:schemaLocation="http://www.tei-c.org/ns/1.0 /Users/atharsefid/Desktop/grobid-0.5.3/grobid-home/schemas/xsd/Grobid.xsd"
 xmlns:xlink="http://www.w3.org/1999/xlink">
	<teiHeader xml:lang="en">
		<encodingDesc>
			<appInfo>
				<application version="0.5.3" ident="GROBID" when="2020-09-29T02:57+0000">
					<ref target="https://github.com/kermitt2/grobid">GROBID - A machine learning software for extracting information from scholarly documents</ref>
				</application>
			</appInfo>
		</encodingDesc>
		<fileDesc>
			<titleStmt>
				<title level="a" type="main">Fair-EDF: A Latency Fairness Framework for Shared Storage Systems</title>
			</titleStmt>
			<publicationStmt>
				<publisher/>
				<availability status="unknown"><licence/></availability>
			</publicationStmt>
			<sourceDesc>
				<biblStruct>
					<analytic>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Yuhan</forename><surname>Peng</surname></persName>
							<affiliation key="aff0">
								<orgName type="institution" key="instit1">Rice University</orgName>
								<orgName type="institution" key="instit2">Rice University</orgName>
							</affiliation>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Peter</forename><surname>Varman</surname></persName>
							<affiliation key="aff0">
								<orgName type="institution" key="instit1">Rice University</orgName>
								<orgName type="institution" key="instit2">Rice University</orgName>
							</affiliation>
						</author>
						<title level="a" type="main">Fair-EDF: A Latency Fairness Framework for Shared Storage Systems</title>
					</analytic>
					<monogr>
						<imprint>
							<date/>
						</imprint>
					</monogr>
				</biblStruct>
			</sourceDesc>
		</fileDesc>
		<profileDesc>
			<abstract>
				<p>We present Fair-EDF, a framework for latency guarantees in shared storage servers. It provides fairness control while supporting latency guarantees. Fair-EDF extends the pure earliest deadline first (EDF) scheduler by adding a controller to shape the workloads. Under overload it selects a minimal number of requests to drop and to choose the dropped requests in a fair manner. The evaluation results show Fair-EDF provides steady fairness control among a set of clients with different runtime behaviors.</p>
			</abstract>
		</profileDesc>
	</teiHeader>
	<text xml:lang="en">
		<body>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="1">Introduction</head><p>Modern clustered storage systems such as Ceph <ref type="bibr" target="#b0">[1]</ref>, GlusterFS <ref type="bibr" target="#b1">[2]</ref>, Amazon's Cloud Storage <ref type="bibr" target="#b2">[3]</ref>, FAB <ref type="bibr" target="#b3">[4]</ref>, <ref type="bibr">Kudu [5]</ref>, <ref type="bibr">Dynamo [6]</ref>, Cassandra <ref type="bibr" target="#b6">[7]</ref>, HDFS <ref type="bibr" target="#b7">[8]</ref> and vSAN <ref type="bibr" target="#b8">[9]</ref> provide high-throughput storage for huge data sets. When deployed in a datacenter these systems are shared among multiple clients, each representing tens to hundreds of users. Clients require predictable performance typically codified in SLOs such as guaranteed throughput over a specified duration or a maximum response time for a specified fraction of its requests.</p><p>In order to make response time QoS guarantees, two-sided SLOs are employed; the client receives the agreed-upon service provided its input meets specified constraints on its arrival rates and the sizes and frequency of its bursts. Admission control is used to limit the clients in the system to a sustainable set, regulators police client traffic for compliance with input SLOs, and schedulers order the requests in a globally expedient manner to meet guarantees. Moreover, in clustered storage, requests belonging to a client are directed to different storage servers based on the placement and replication policies of the system. Clients are typically unaware of the data distribution, making it hard to predict the dynamic runtime demands on any server. Hence, the traffic seen by an individual server is highly dynamic and difficult to control. While SLO policing may be used to regulate the aggregate client traffic characteristics, it is unreasonable (and impractical) to require these at the individual server level.</p><p>This motivates the problem addressed in this paper: how to provide reasonable differential response time guarantees for clients sharing a server when the traffic cannot be predicted or controlled at ingress to the server? The problem of guaranteeing latencies in storage systems has been extensively studied over the years. Many solutions like <ref type="bibr" target="#b9">[10]</ref><ref type="bibr" target="#b10">[11]</ref><ref type="bibr" target="#b11">[12]</ref><ref type="bibr" target="#b12">[13]</ref><ref type="bibr" target="#b13">[14]</ref><ref type="bibr" target="#b14">[15]</ref><ref type="bibr" target="#b15">[16]</ref><ref type="bibr" target="#b16">[17]</ref><ref type="bibr" target="#b17">[18]</ref><ref type="bibr" target="#b18">[19]</ref><ref type="bibr" target="#b19">[20]</ref> present techniques to meet explicitly-specified QoS latency bounds, using a combination of workload shaping and scheduling algorithms. Others <ref type="bibr" target="#b20">[21]</ref><ref type="bibr" target="#b21">[22]</ref><ref type="bibr" target="#b22">[23]</ref><ref type="bibr" target="#b23">[24]</ref><ref type="bibr" target="#b24">[25]</ref><ref type="bibr" target="#b25">[26]</ref><ref type="bibr" target="#b26">[27]</ref> present different system techniques to reduce average or tail latencies. More discussion is presented in Section 2.1.</p><p>A recent paper, MittOS <ref type="bibr" target="#b27">[28]</ref>, describes a novel driver-level model and implementation that predicts whether an arriving request can meet its deadline, and drops (or redirects) the arriving request if it cannot. In our work, we propose an orthogonal dimension to this solution: we describe an optimal algorithm for deciding when to discard a request and which request to drop based on the QoS requirements. We introduce Fair-EDF, a framework providing fairness between the clients in a shared storage server when guaranteeing their latencies. Fair-EDF extends the earliest deadline first (EDF) <ref type="bibr" target="#b28">[29]</ref> scheduling policy by adding a controller that selects and drops requests in the scheduling queue when it detects that latency violations will occur. Fair-EDF assumes an OS such as MittOS is already in place, which provides system support for dropped requests. <ref type="figure" target="#fig_0">Figure 1</ref> shows an overview of the system. The controller is optimal in the sense that the total number of requests it drops is the minimum possible, and provides fairness control among the clients such that the proportion of requests being dropped for each client are equalized. Different fairness criteria can be substituted in the controller without changing the framework. A standard EDF scheduler is used to dispatch requests in deadline order. In Fair-EDF, all requests dispatched by the scheduler will meet their deadlines. Fair-EDF extends the idea of the offline RT-OPT <ref type="bibr" target="#b29">[30]</ref> framework to work in an online situation and add fairness. In practice, Fair-EDF would be especially useful in streaming applications, such as streaming video from object storage.</p><p>The remainder of the paper is organized as follows. Sec-  tion 2 gives additional background on latency QoS and discusses related works. In Section 3 we propose a framework for guaranteeing latencies in a distributed cluster. Section 4 shows the preliminary evaluation results of our proposed algorithm. Finally, Section 5 discusses the related issues and challenges of our design.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2">Overview</head><p>The storage server is shared by a number of clients that send I/O requests to the server. All client requests are assumed to be chunked into fixed-size I/O requests that have a fixed service time σ. A request that arrives at time t r is assigned a deadline d r equal to the sum of its arrival time and latency bound. A request is successful if it completes before its deadline, and is wasted if it is dropped (not scheduled) or completes after its deadline. Each request can have its own latency bound based on some classification. We assume that t r + σ ≤ d r is always true, i.e. a request will meet its deadline if there are no queueing delays and it is scheduled immediately upon arrival.</p><p>Example 1: We motivate the latency fairness framework with the following example. Suppose a server of 100 IOPS capacity is shared by two clients A and B, which send uniform-sized I/O requests with a service time of 10ms each. At time 0, A sends a burst of 100 requests with deadlines all at 1s. Client B sends I/O requests at a uniform rate every 10ms apart and all request have a latency bound of 40ms, i.e. B sends requests at times 0, 10, 20, ..., with deadlines of 40, 50, 60, ... respectively.</p><p>There are a total of 200 combined I/O requests in one second of operation, which is double the server IOPS capacity. An EDF <ref type="bibr" target="#b28">[29]</ref> scheduler, which is commonly used for supporting latency requirements, will do almost all of B's requests first, followed by those of A. Most requests of B will meet their deadlines and almost no requests of A will do so, resulting in poor fairness. Furthermore, all new requests arriving in the next second will also miss their deadlines.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.1">Related Work</head><p>For latency guarantees, most of the existing QoS frameworks, such as <ref type="bibr" target="#b10">[11,</ref><ref type="bibr" target="#b12">13,</ref><ref type="bibr" target="#b13">14,</ref><ref type="bibr" target="#b19">20,</ref><ref type="bibr" target="#b23">24,</ref><ref type="bibr" target="#b25">26]</ref>, compute scheduling metadata (usually referred as tags) for each request. The tags are used for the request scheduler to determine the order of scheduling. Usually, a sophisticated scheduling algorithm is required in these frameworks, which can affect their scalability. Another set of approaches, such as <ref type="bibr" target="#b9">[10,</ref><ref type="bibr" target="#b15">16,</ref><ref type="bibr" target="#b16">17]</ref>, use dynamic token buckets which guarantee the latency by controlling the rate at which requests are dispatched to the schedulers. Some frameworks <ref type="bibr" target="#b12">[13,</ref><ref type="bibr" target="#b14">15,</ref><ref type="bibr" target="#b19">20]</ref> also supports the bandwidth allocation or proportional sharing at the same time. Existing works use a combination of input SLOs, admission control, and traffic policing, either explicitly or implicitly, to guarantee response times if the load exceeds server capacity. The controller either drops the overflow requests or degrades their priorities. An offline algorithm, RT-OPT <ref type="bibr" target="#b29">[30]</ref>, was developed to guarantee timely playback of VBR video with the minimum number of dropped frames. Fair-EDF extends the idea of RT-OPT to an online algorithm, and also provides fairness guarantees.</p><p>Existing solutions do a good job of meeting latency guarantees when the client traffic can be predicted or regulated to meet server capacity limits. Some solutions <ref type="bibr" target="#b10">[11]</ref> delay requests from clients that violate their SLO in order to keep the aggregate request rate below system capacity; this isolates well-behaved workloads from misbehaving ones, but can lead to a large increase of the average response time for even small violations. Other solutions use a token-bucket regulator and drop requests that violate their SLO <ref type="bibr" target="#b9">[10]</ref>, while others <ref type="bibr" target="#b15">[16]</ref> reschedule overflowing requests in secondary queues with relaxed deadlines, or dispatch them to replica servers <ref type="bibr" target="#b5">[6,</ref><ref type="bibr" target="#b21">22,</ref><ref type="bibr" target="#b26">27]</ref>. In contrast to these frameworks that require per-client arrivalrate parameters to avoid server overload, we dynamically detect overload and shape the workloads accordingly.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3">Fair-EDF Framework</head><p>Each incoming request is tagged with its deadline indicating the time by which it must complete service. When it arrives at the server, the request may be immediately rejected or tentatively accepted for scheduling. A rejected request may be discarded, re-directed to an alternate server, or moved to a secondary queue for best-effort scheduling. An accepted request will be enqueued and wait for its turn to be dispatched; during its wait, the request may still be rejected as new requests arrive. The client success ratio, f i , is the fraction of client i's requests that succeed, and (1 − f i ) is called the client miss ratio. The system success ratio F is the fraction of the total number of requests that succeed. The goal of our framework is to shape the f i subject to maximizing F. In this paper we choose a min-max criterion: that is, among all schedules that maximize F we choose one that simultaneously minimizes the highest client miss ratio. Other QoS criteria can be  implemented within our framework as discussed in Section 5.</p><p>We now discuss the idea behind the algorithm followed by the details of the implementation. Let d i denoted the deadline of request i and σ its service time. The current set of accepted requests are conceptually placed on a timeline called an occupancy chart. Request i occupies the interval [t i , t i + σ] on the timeline where t i is the latest time it can begin execution while ensuring that it and all requests with deadlines later than d i are successful. The occupancy chart is naturally partitioned into alternating busy and idle segments as discussed below. As long as no interval crosses the current time T now , all requests will meet their deadline when scheduled in EDF order.</p><p>Example 2: Consider two clients A and B. Each request has a service time of 10ms. Client A has 4 requests a 1 , a 2 , a 3 , a 4 with deadlines 30, 100, 100, and 140ms respectively, and Client B has 3 requests b 1 , b 2 , b 3 with deadlines 50, 145 and 150ms. Suppose the current time is 10ms. <ref type="figure" target="#fig_2">Figure 2a</ref> shows the occupancy chart. Request b 3 occupies the interval <ref type="bibr">[140,</ref><ref type="bibr">150]</ref>; b 2 cannot be scheduled at 135 as it would conflict with b 3 , and occupies the interval <ref type="bibr">[130,</ref><ref type="bibr">140]</ref>. Similarly a 4 must occupy the interval <ref type="bibr">[120,</ref><ref type="bibr">130]</ref>, resulting in the busy segment <ref type="bibr">[120,</ref><ref type="bibr">150]</ref> comprising requests {a 4 , b 2 , b 3 }. In the same way {a 2 , a 3 } comprises busy segment <ref type="bibr">[80,</ref><ref type="bibr">100]</ref>, {a 1 } forms segment <ref type="bibr" target="#b19">[20,</ref><ref type="bibr" target="#b29">30]</ref>, and {b 1 } forms segment <ref type="bibr">[40,</ref><ref type="bibr">50]</ref>.</p><p>Example 3: Continuing Example 2, suppose there is a new request a 5 with deadline 70ms. The request can be assigned the interval <ref type="bibr">[60,</ref><ref type="bibr">70]</ref>, since it will not conflict with existing requests (see <ref type="figure" target="#fig_2">Figure 2b)</ref>. Next a new request b 4 with deadline 45ms arrives. It will be assigned the interval <ref type="bibr" target="#b29">[30,</ref><ref type="bibr">40]</ref> to avoid conflicting with b 1 . The two adjacent segments <ref type="bibr" target="#b19">[20,</ref><ref type="bibr" target="#b29">30]</ref> and <ref type="bibr">[40,</ref><ref type="bibr">50]</ref> will now merge into a single segment <ref type="bibr" target="#b19">[20,</ref><ref type="bibr">50]</ref>, as shown in <ref type="figure" target="#fig_2">Figure 2c</ref>.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.1">Algorithm</head><p>Let S 1 , S 2 , · · · S n denote the current set of busy segments and let S i span the time range [L i , R i ] (L i and R i are the left and right time boundaries). When a new request r arrives, we must identify the segment its interval will occupy, followed by updating its boundaries. This may cause some segments to now overlap, leading to a cascade of boundary changes and segment merges. If the start time of the earliest (leftmost) segment becomes less than the current time, then the current set of requests cannot all meet their deadlines, and one or more will need to be dropped so that the remaining requests can be successful.</p><p>Let</p><note type="other">d r denote the deadline of new request r. Case 1: d r lies between two consecutive segments S k and S k+1 i.e. R k &lt; d r &lt; L k+1 . Request r is assigned the interval [d r − σ, d r ]. If d r − σ &gt; R k then create a new segment [d r − σ, d r ] that lies between S k and S k+1 . Otherwise, merge the interval [d r − σ, d r ]</note><p>with the segment S k : L k is reduced by σ − (d r − R k ) (the amount of overlap) and R k is changed to d r .</p><p>Note that changing L k may cause S k to overlap segment S k−1 , potentially causing a cascade of merges of adjacent segments.</p><formula xml:id="formula_0">Case 2: d r lies within a segment S k i.e. L k ≤ d r ≤ R k .</formula><p>In this case, L k is reduced by σ. Once again, reducing L k may cause Segments S k and S k−1 to overlap, potentially triggering a cascade of merges of adjacent segments.</p><p>In general, when a request arrives it is placed on the timeline using case 1 or 2 above. If the first segment now begins at a time less than the current time (this means the left boundary of the first segment S 1 is changed) then a request needs to be dropped. Any request in the first segment, including the new request that caused the potential deadline violation, are candidates for dropping. For our min-max fairness criterion we must choose a request from the candidate set that belongs to a client with the smallest miss ratio. Finally, the request scheduler simply dispatches requests in EDF order, which will guarantee that the current set of requests will meet their deadlines.</p><p>Example 4: In <ref type="figure" target="#fig_2">Figure 2c</ref>, suppose two new requests c 1 and c 2 from client C, with deadlines 25 and 40, arrive at time 10. From case 2 above, c 1 will be assigned the interval <ref type="bibr" target="#b9">[10,</ref><ref type="bibr" target="#b19">20]</ref>. Since the current time is 10 this is a feasible schedule in which all requests will meet their deadlines if they are executed in deadline order (their order in the occupancy chart). Next c 2 will be assigned the interval <ref type="bibr" target="#b29">[30,</ref><ref type="bibr">40]</ref>, moving the requests b 4 , a 1 and c 1 one slot to the left to <ref type="bibr" target="#b19">[20,</ref><ref type="bibr" target="#b29">30]</ref>, <ref type="bibr" target="#b9">[10,</ref><ref type="bibr" target="#b19">20]</ref> and <ref type="bibr">[0,</ref><ref type="bibr" target="#b9">10]</ref> respectively (see <ref type="figure" target="#fig_2">Figure 2d</ref>). After placing c 2 , segment 1 starts at time 0, which is smaller than the current time 10, which means that at least one of the four requests c 1 , a 1 , b 4 or c 2 must miss its deadline. We can choose to reject any one of these requests, and move the other requests on its left to the right to the vacant slot. The choice of which of the requests to drop is governed by the QoS policy.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4">Preliminary Evaluation</head></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.1">Experimental Setup</head><p>In the evaluation, we compare Fair-EDF with a standard EDF scheduler, as well as a variant of EDF we call Prudent-EDF. The problem with standard EDF is that a capacity overload will cause the deadlines of future requests, those following the overloaded period, to be missed as well. By contrast, Prudent-EDF drops requests that it recognizes will miss their deadline, thereby preventing them from affecting future request deadlines. Prudent EDF drops a request at the latest possible time and consequently, like the immediate-drop policy, cannot shape the QoS profile by selecting an appropriate victim request to discard. However, like Fair-EDF, it will also drop the minimal number of requests.</p><p>We implemented a prototype of the Fair-EDF framework in OpenMP. We use different threads to handle the request controller and request scheduler and keep them pinned on different cores. The arrival pattern and deadlines of the clients are explicitly specified using external input files. The controller generates requests at desired times. For each request, if using Fair-EDF, it uses the algorithm described in Section 3 to place it in the EDF request queue, and if a deadline violation is predicted drops an allowed request based on the QoS policy. With Prudent-EDF, the controller will drop the request whose deadline has already been missed. The scheduler simply dispatches the next request with the earliest deadline.</p><p>The workload in our evaluation consists of random 4KB direct reads from a 1GB file. We run our experiments on a standard Linux server. The server node is equipped with an Intel R SSD DC S3700 hard disk <ref type="bibr" target="#b30">[31]</ref> and an Intel R Xeon R E5-2697 CPU <ref type="bibr" target="#b31">[32]</ref>. We profiled the service time using the standard EDF scheduler and a closed loop client which keeps the server always busy. The average profiled service time for each request is 137µs, i.e. the server has an average throughput of around 7300 IOPS.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.2">Evaluation Results</head><p>Experiment 1: In this evaluation, we have 2 clients. Client 1 sends one request every 0.15ms, with a latency bound of 0.5ms. Client 2 sends a burst of 15 requests every 10ms, with a latency bound of 25ms for each request. Client 1 has a request rate of 6667 IOPS, and Client 2 a rate of 1500 IOPS. The load on the server is 8167 IOPS which exceeds its capacity of 7300 IOPS.</p><p>We run the system for a second and show the first 200ms of execution in <ref type="figure" target="#fig_6">Figure 3a.</ref> It shows the success ratio of both clients using the three policies. <ref type="figure" target="#fig_6">Figure 3b and 3c</ref> show the average response time for both clients. We can see that EDF gradually misses deadlines of both clients, and the response times start to increase. Due to the chain effect of missed deadlines for standard EDF scheduling under overload, it  <ref type="formula">2   0 10 20 30 40 50 60 70 80 90 100 110 120 130 140 150 160 170 180</ref>    results in a poor success ratio for both clients. For Prudent-EDF, technically no deadlines will be missed (since they are proactively dropped). However, for this workload it keeps doing requests of client 1 and drops most of the requests of bursty client 2, resulting in poor fairness between clients. Finally, Fair-EDF also guarantees that no deadlines will be missed and will drop the same (minimal) number of requests as Prudent-EDF. However, it tries to fairly distribute the pain of dropped requests and obtains success ratios of around 0.9 for both clients. Experiment 2: In this experiment, we have 10 clients sharing the server. The arrival patterns and deadline specifications are shown in <ref type="table">Table 1</ref>. Clients 1 to 8 send requests at different fixed rates, and clients 9, 10 are very bursty. The total load is 8000 IOPS exceeding the server capacity of 7300 IOPS.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Client</head><p>Inter We run the three schedulers for a second, and the success ratio for all clients as well as the system is shown in <ref type="figure" target="#fig_7">Figure 4</ref>. From the figure, we can see that EDF has poor success ratio for all clients since it gradually misses all deadlines if the capacity is not enough. Both Prudent-EDF and Fair-EDF have a good system success ratio. However, in Prudent-EDF, most requests of bursty clients 9 and 10 are dropped, making their success ratios below the other clients and the system's ratio. In contrast, by using Fair-EDF, the success ratios of clients 9 and 10 go up to roughly equal to the system success ratio, while the success ratios of other clients do not decrease significantly, resulting in better fairness. Moreover, Fair-EDF achieves a similar system throughput as Prudent-EDF. This indicates Fair-EDF does not introduce much runtime overhead comparing with Prudent-EDF. Experiment 3: Finally, we show the performance of Fair-EDF with a different QoS policy. The specifications of the storage system and the clients remain the same as Experiment 2. However, instead of using the min-max criterion, we group the clients into different groups with different priorities. In this experiment, we have two groups gold and silver. The gold group has a desired success ratio of 0.9 and the silver group has a desired success ratio of 0.8. The QoS policy for all clients becomes equalizing the relative success ratio divided by the desired success ratio of the group.</p><p>We show the result of two grouping policies. Policy 1 groups clients 1 to 8 as gold and the rest as silver, and policy 2 does the opposite, i.e. grouping clients 1 to 8 as silver and the rest as gold. <ref type="figure" target="#fig_8">Figure 5</ref> shows the evaluation results of both policies, where the desired success ratios of the gold and silver groups are marked as dotted and solid lines respectively, respectively. From the figure, we can see Fair-EDF provides reasonable QoS for clients with different grouping policies. The framework can be easily modified to support different QoS policies by only changing the controller, and the details are being studied in our ongoing work. </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5">Discussion</head><p>In this section, we discuss some issues and challenges for Fair-EDF.</p><p>QoS policy: Currently, we are mainly using a min-max QoS policy for fairness so all clients have the same miss ratio. In our ongoing work, we are studying supporting other policies that can differentiate between clients. For instance, each client can specify its own SLO as a bound on drop percentage, or the drop rate can be simply weighted to reflect client priorities. We also plan to guarantee the fairness in coarse-grained QoS periods where we reset the counters at the beginning of each period as in our previous work <ref type="bibr" target="#b32">[33]</ref>.</p><p>Request cost estimation: An orthogonal issue to our framework is estimating the cost of the requests. MittOS <ref type="bibr" target="#b27">[28]</ref> studies predicting the requests costs for better handling requests latencies. In our future work, we will incorporate this framework or other related request cost estimations with Fair-EDF. Variable request service times: Even with known service times, in practice, the service times may vary among different requests. The current algorithm will need to be generalized to handle this situation. For instance, in the substitution, one big request may cause several small requests to be dropped, and one substitution may involve multiple clients. Thus, there are more choices in the substitution, which potentially introduces extra runtime overhead. Furthermore, with variable cost requests, we may need a different policy for fairness. For instance, we may want to give different weights to requests of different costs, otherwise requests of higher costs are more likely to be dropped. In the ongoing work, we are extending Fair-EDF to efficiently support requests with a known upper bound of the service times. We are also introducing a work stealing mechanism for the dropped request as best-effort scheduling. The difference between the actual service time and the upper bound provides opportunities to do the dropped requests. Scalability: We need to worry about scheduler execution time as the number of clients and requests increase and the storage system processes requests faster. We need better data structures as well as implementations that use more efficient synchronization and timer management. In ongoing work, we will examine implementations using better data structures such as priority queues or balanced binary search trees (e.g. AVL tree and RB tree) which handle insertion, modification and deletion in worst case logarithm time. In addition, efficient data structures for QoS selection on subsets of the requests need to be designed. Distributed fairness: The original motivation for the work was the difficulty of shaping the workload at individual servers of a clustered storage system. In ongoing work, we want to combine the individual server schedulers with a global QoS policy where the performance of a client in aggregate across all servers is optimized. Our previous work <ref type="bibr" target="#b32">[33]</ref> studies handling skewed demand distributions and runtime demand changes in QoS. We are planning to extend the idea to Fair-EDF in distributed scenarios.</p></div><figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_0"><head>Figure 1 :</head><label>1</label><figDesc>Figure 1: An overview of the Fair-EDF framework.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_1"><head>(</head><label></label><figDesc>d) The occupancy chart in Example 4 after accepting c 1 and c 2 .</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_2"><head>Figure 2 :</head><label>2</label><figDesc>Figure 2: An example of the occupancy chart in Fair-EDF.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_4"><head>(</head><label></label><figDesc>Fair-EDF) (a) The success ratio of both clients using three policies.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_5"><head></head><label></label><figDesc>Client 2 (EDF) Client 2 (Prudent-EDF) Client 2 (Fair-EDF) (c) The average response time for Client 2 using three policies.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_6"><head>Figure 3 :</head><label>3</label><figDesc>Figure 3: Evaluation result for Experiment 1.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_7"><head>Figure 4 :</head><label>4</label><figDesc>Figure 4: Evaluation result for Experiment 2.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_8"><head>Figure 5 :</head><label>5</label><figDesc>Figure 5: Evaluation result for Experiment 3.</figDesc></figure>
		</body>
		<back>
			<div type="references">

				<listBibl>

<biblStruct xml:id="b0">
	<analytic>
		<title level="a" type="main">Ceph: A scalable, highperformance distributed file system</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Sage</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Weil</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Scott</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Ethan</forename><forename type="middle">L</forename><surname>Brandt</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Miller</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><forename type="middle">E</forename><surname>Darrell</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Carlos</forename><surname>Long</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Maltzahn</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 7th symposium on Operating systems design and implementation</title>
		<meeting>the 7th symposium on Operating systems design and implementation</meeting>
		<imprint>
			<publisher>USENIX Association</publisher>
			<date type="published" when="2006" />
			<biblScope unit="page" from="307" to="320" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b1">
	<monogr>
				<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Bansal</forename><surname>Sakshi</surname></persName>
		</author>
		<ptr target="http://opensourceforu.com/2017/01/glusterfs-a-dependable-distributed-file-system" />
		<title level="m">GlusterFS : A dependable distributed file system</title>
		<imprint>
			<date type="published" when="2017" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b2">
	<analytic>
		<title level="a" type="main">Amazon S3 for science grids: a viable solution</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Adriana</forename><surname>Mayur R Palankar</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Matei</forename><surname>Iamnitchi</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Simson</forename><surname>Ripeanu</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Garfinkel</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 2008 international workshop on Data-aware distributed computing</title>
		<meeting>the 2008 international workshop on Data-aware distributed computing</meeting>
		<imprint>
			<publisher>ACM</publisher>
			<date type="published" when="2008" />
			<biblScope unit="page" from="55" to="64" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b3">
	<analytic>
		<title level="a" type="main">FAB: building distributed enterprise disk arrays from commodity components</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Yasushi</forename><surname>Saito</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Svend</forename><surname>Frølund</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Alistair</forename><surname>Veitch</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Arif</forename><surname>Merchant</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Susan</forename><surname>Spence</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">In ACM SIGARCH Computer Architecture News</title>
		<imprint>
			<biblScope unit="volume">32</biblScope>
			<biblScope unit="page" from="48" to="58" />
			<date type="published" when="2004" />
			<publisher>ACM</publisher>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b4">
	<monogr>
		<title level="m" type="main">Kudu: storage for fast analytics on fast data</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Todd</forename><surname>Lipcon</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">David</forename><surname>Alves</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Dan</forename><surname>Burkert</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Jean-Daniel</forename><surname>Cryans</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Adar</forename><surname>Dembo</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Mike</forename><surname>Percy</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Silvius</forename><surname>Rus</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Dave</forename><surname>Wang</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Matteo</forename><surname>Bertozzi</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Colin</forename><forename type="middle">Patrick</forename><surname>Mccabe</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2015" />
		</imprint>
	</monogr>
	<note>Retrieved June from http://getkudu. io/kudu. pdf. Pages&quot; and</note>
</biblStruct>

<biblStruct xml:id="b5">
	<analytic>
		<title level="a" type="main">Dynamo: amazon&apos;s highly available key-value store</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Giuseppe</forename><surname>Decandia</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Deniz</forename><surname>Hastorun</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Madan</forename><surname>Jampani</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Gunavardhan</forename><surname>Kakulapati</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Avinash</forename><surname>Lakshman</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Alex</forename><surname>Pilchin</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Swaminathan</forename><surname>Sivasubramanian</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Peter</forename><surname>Vosshall</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Werner</forename><surname>Vogels</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">ACM SIGOPS operating systems review</title>
		<imprint>
			<publisher>ACM</publisher>
			<date type="published" when="2007" />
			<biblScope unit="volume">41</biblScope>
			<biblScope unit="page" from="205" to="220" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b6">
	<analytic>
		<title level="a" type="main">Cassandra: a decentralized structured storage system</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Avinash</forename><surname>Lakshman</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Prashant</forename><surname>Malik</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">ACM SIGOPS Operating Systems Review</title>
		<imprint>
			<biblScope unit="volume">44</biblScope>
			<biblScope unit="issue">2</biblScope>
			<biblScope unit="page" from="35" to="40" />
			<date type="published" when="2010" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b7">
	<analytic>
		<title level="a" type="main">The hadoop distributed file system</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Konstantin</forename><surname>Shvachko</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Hairong</forename><surname>Kuang</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Sanjay</forename><surname>Radia</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Robert</forename><surname>Chansler</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">2010 IEEE 26th symposium on mass storage systems and technologies (MSST)</title>
		<imprint>
			<publisher>Ieee</publisher>
			<date type="published" when="2010" />
			<biblScope unit="page" from="1" to="10" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b8">
	<monogr>
				<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Vmware</surname></persName>
		</author>
		<ptr target="https://www.vmware.com/products/vsan.html" />
		<title level="m">Hyper-Converged Infrastructure Software</title>
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b9">
	<analytic>
		<title level="a" type="main">Storage performance virtualization via throughput and latency control</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Jianyong</forename><surname>Zhang</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Anand</forename><surname>Sivasubramaniam</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Qian</forename><surname>Wang</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Alma</forename><surname>Riska</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Erik</forename><surname>Riedel</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">ACM Transactions on Storage (TOS)</title>
		<imprint>
			<biblScope unit="volume">2</biblScope>
			<biblScope unit="issue">3</biblScope>
			<biblScope unit="page" from="283" to="308" />
			<date type="published" when="2006" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b10">
	<analytic>
		<title level="a" type="main">pClock: an arrival curve based approach for QoS guarantees in shared storage systems</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Ajay</forename><surname>Gulati</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Arif</forename><surname>Merchant</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Peter J</forename><surname>Varman</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">In ACM SIGMETRICS Performance Evaluation Review</title>
		<imprint>
			<biblScope unit="volume">35</biblScope>
			<biblScope unit="page" from="13" to="24" />
			<date type="published" when="2007" />
			<publisher>ACM</publisher>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b11">
	<analytic>
		<title level="a" type="main">Maestro: qualityof-service in large disk arrays</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Arif</forename><surname>Merchant</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Mustafa</forename><surname>Uysal</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Pradeep</forename><surname>Padala</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Xiaoyun</forename><surname>Zhu</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Sharad</forename><surname>Singhal</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Kang</forename><surname>Shin</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 8th ACM international conference on Autonomic computing</title>
		<meeting>the 8th ACM international conference on Autonomic computing</meeting>
		<imprint>
			<publisher>ACM</publisher>
			<date type="published" when="2011" />
			<biblScope unit="page" from="245" to="254" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b12">
	<analytic>
		<title level="a" type="main">Efficient disk I/O scheduling with qos guarantee for xen-based hosting platforms</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Xiao</forename><surname>Ling</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Hai</forename><surname>Jin</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Shadi</forename><surname>Ibrahim</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Wenzhi</forename><surname>Cao</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Song</forename><surname>Wu</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 2012 12th IEEE/ACM International Symposium on Cluster, Cloud and Grid Computing</title>
		<meeting>the 2012 12th IEEE/ACM International Symposium on Cluster, Cloud and Grid Computing</meeting>
		<imprint>
			<publisher>IEEE Computer Society</publisher>
			<date type="published" when="2012" />
			<biblScope unit="page" from="81" to="89" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b13">
	<analytic>
		<title level="a" type="main">A QoS aware non-work-conserving disk scheduler</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Pedro</forename><forename type="middle">Eugênio</forename><surname>Rocha</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><forename type="middle">E</forename><surname>Luis</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Bona</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">012 IEEE 28th Symposium on Mass Storage Systems and Technologies (MSST)</title>
		<imprint>
			<publisher>IEEE</publisher>
			<date type="published" when="2012" />
			<biblScope unit="page" from="1" to="5" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b14">
	<analytic>
		<title level="a" type="main">Cake: enabling high-level SLOs on shared storage systems</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Andrew</forename><surname>Wang</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Shivaram</forename><surname>Venkataraman</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Sara</forename><surname>Alspaugh</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Randy</forename><surname>Katz</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Ion</forename><surname>Stoica</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the Third ACM Symposium on Cloud Computing</title>
		<meeting>the Third ACM Symposium on Cloud Computing</meeting>
		<imprint>
			<publisher>ACM</publisher>
			<date type="published" when="2012" />
			<biblScope unit="page">14</biblScope>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b15">
	<analytic>
		<title level="a" type="main">Nested qos: Adaptive burst decomposition for slo guarantees in virtualized servers</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Hui</forename><surname>Wang</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Kshitij</forename><surname>Doshi</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Peter</forename><surname>Varman</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Intel Technology Journal</title>
		<imprint>
			<biblScope unit="volume">16</biblScope>
			<biblScope unit="issue">2</biblScope>
			<date type="published" when="2012" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b16">
	<analytic>
		<title level="a" type="main">Prioritymeister: Tail latency qos for shared networked storage</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Timothy</forename><surname>Zhu</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Alexey</forename><surname>Tumanov</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Michael</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Mor</forename><surname>Kozuch</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Gregory R</forename><surname>Harchol-Balter</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Ganger</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the ACM Symposium on Cloud Computing</title>
		<meeting>the ACM Symposium on Cloud Computing</meeting>
		<imprint>
			<publisher>ACM</publisher>
			<date type="published" when="2014" />
			<biblScope unit="page" from="1" to="14" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b17">
	<analytic>
		<title level="a" type="main">PriDyn: enabling differentiated I/O services in cloud using dynamic priorities</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Nitisha</forename><surname>Jain</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Lakshmi</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE Transactions on Services Computing</title>
		<imprint>
			<biblScope unit="volume">8</biblScope>
			<biblScope unit="issue">2</biblScope>
			<biblScope unit="page" from="212" to="224" />
			<date type="published" when="2015" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b18">
	<analytic>
		<title level="a" type="main">vFair: latency-aware fair storage scheduling via per-IO cost-based differentiation</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Hui</forename><surname>Lu</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Brendan</forename><surname>Saltaformaggio</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Ramana</forename><surname>Kompella</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Dongyan</forename><surname>Xu</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the Sixth ACM Symposium on Cloud Computing</title>
		<meeting>the Sixth ACM Symposium on Cloud Computing</meeting>
		<imprint>
			<publisher>ACM</publisher>
			<date type="published" when="2015" />
			<biblScope unit="page" from="125" to="138" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b19">
	<analytic>
		<title level="a" type="main">PSLO: enforcing the X th percentile latency and throughput SLOs for consolidated VM storage</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Ning</forename><surname>Li</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Hong</forename><surname>Jiang</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Dan</forename><surname>Feng</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Zhan</forename><surname>Shi</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the Eleventh European Conference on Computer Systems</title>
		<meeting>the Eleventh European Conference on Computer Systems</meeting>
		<imprint>
			<publisher>ACM</publisher>
			<date type="published" when="2016" />
			<biblScope unit="page">28</biblScope>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b20">
	<monogr>
		<title level="m" type="main">CSched: Real-time disk scheduling with concurrent I/O requests</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Carl</forename><surname>Staelin</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Gidi</forename><surname>Amir</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">David</forename><surname>Ben-Ovadia</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Ram</forename><surname>Dagan</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Michael</forename><surname>Melamed</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Dave</forename><surname>Staas</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2011" />
			<publisher>Citeseer</publisher>
		</imprint>
	</monogr>
<note type="report_type">Technical report</note>
</biblStruct>

<biblStruct xml:id="b21">
	<analytic>
		<title level="a" type="main">C3: Cutting tail latency in cloud data stores via adaptive replica selection</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Lalith</forename><surname>Suresh</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Marco</forename><surname>Canini</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Stefan</forename><surname>Schmid</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Anja</forename><surname>Feldmann</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">12th USENIX Symposium on Networked Systems Design and Implementation (NSDI 15)</title>
		<imprint>
			<date type="published" when="2015" />
			<biblScope unit="page" from="513" to="527" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b22">
	<analytic>
		<title level="a" type="main">TailCutter: Wisely cutting tail latency in cloud CDN under cost constraints</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Zeqi</forename><surname>Lai</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Yong</forename><surname>Cui</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Minming</forename><surname>Li</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Zhenhua</forename><surname>Li</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Ningwei</forename><surname>Dai</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Yuchi</forename><surname>Chen</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">IEEE INFOCOM 2016-The 35th Annual IEEE International Conference on Computer Communications</title>
		<imprint>
			<publisher>IEEE</publisher>
			<date type="published" when="2016" />
			<biblScope unit="page" from="1" to="9" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b23">
	<analytic>
		<title level="a" type="main">Twodimensional fair queuing for multi-tenant cloud services</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Jonathan</forename><surname>Mace</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Peter</forename><surname>Bodik</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Madanlal</forename><surname>Musuvathi</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Rodrigo</forename><surname>Fonseca</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Krishnan</forename><surname>Varadarajan</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 2016 ACM SIGCOMM Conference</title>
		<meeting>the 2016 ACM SIGCOMM Conference</meeting>
		<imprint>
			<publisher>ACM</publisher>
			<date type="published" when="2016" />
			<biblScope unit="volume">2</biblScope>
			<biblScope unit="page" from="144" to="159" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b24">
	<analytic>
		<title level="a" type="main">Dirigent: Enforcing QoS for latency-critical tasks on shared multicore systems</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Haishan</forename><surname>Zhu</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Mattan</forename><surname>Erez</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">ACM SIGARCH Computer Architecture News</title>
		<imprint>
			<biblScope unit="volume">44</biblScope>
			<biblScope unit="issue">2</biblScope>
			<biblScope unit="page" from="33" to="47" />
			<date type="published" when="2016" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b25">
	<analytic>
		<title level="a" type="main">Rein: Taming tail latency in key-value stores via multiget scheduling</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Waleed</forename><surname>Reda</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Marco</forename><surname>Canini</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Lalith</forename><surname>Suresh</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Dejan</forename><surname>Kosti´ckosti´c</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Sean</forename><surname>Braithwaite</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the Twelfth European Conference on Computer Systems</title>
		<meeting>the Twelfth European Conference on Computer Systems</meeting>
		<imprint>
			<publisher>ACM</publisher>
			<date type="published" when="2017" />
			<biblScope unit="page" from="95" to="110" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b26">
	<analytic>
		<title level="a" type="main">Héron: Taming Tail Latencies in Key-Value Stores under Heterogeneous Workloads</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Sonia</forename><forename type="middle">Ben</forename><surname>Vikas Jaiman</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Vivien</forename><surname>Mokhtar</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Quéma</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Y</forename><surname>Lydia</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Etienne</forename><surname>Chen</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Rivìere</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">2018 IEEE 37th Symposium on Reliable Distributed Systems (SRDS)</title>
		<imprint>
			<publisher>IEEE</publisher>
			<date type="published" when="2018" />
			<biblScope unit="page" from="191" to="200" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b27">
	<analytic>
		<title level="a" type="main">MittOS: Supporting millisecond tail tolerance with fast rejecting SLOaware OS interface</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Mingzhe</forename><surname>Hao</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Huaicheng</forename><surname>Li</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Michael</forename><forename type="middle">Hao</forename><surname>Tong</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Chrisma</forename><surname>Pakha</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">O</forename><surname>Riza</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Cesar</forename><forename type="middle">A</forename><surname>Suminto</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Stuardo</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Andrew A Chien</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Gunawi</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 26th Symposium on Operating Systems Principles</title>
		<meeting>the 26th Symposium on Operating Systems Principles</meeting>
		<imprint>
			<publisher>ACM</publisher>
			<date type="published" when="2017" />
			<biblScope unit="page" from="168" to="183" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b28">
	<analytic>
		<title level="a" type="main">Gang Tao, and Sang Hyuk Son. Design and evaluation of a feedback control EDF scheduling algorithm</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Chenyang</forename><surname>Lu</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">John</forename><forename type="middle">A</forename><surname>Stankovic</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings 20th IEEE Real-Time Systems Symposium (Cat. No. 99CB37054)</title>
		<meeting>20th IEEE Real-Time Systems Symposium (Cat. No. 99CB37054)</meeting>
		<imprint>
			<publisher>IEEE</publisher>
			<date type="published" when="1999" />
			<biblScope unit="page" from="56" to="67" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b29">
	<analytic>
		<title level="a" type="main">Real-Time Parallel I/O Stream Scheduling</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Mahesh</forename><surname>Ozg Ur Ertug</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Peter J</forename><surname>Kallahalla</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Varman</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings 2nd Intl. Workshop. on Compiler and Architecture Support for Embedded Systems</title>
		<meeting>2nd Intl. Workshop. on Compiler and Architecture Support for Embedded Systems</meeting>
		<imprint>
			<date type="published" when="1999" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b30">
	<monogr>
		<title/>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Intel</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Intel</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Ssd Dc S3700</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Series</surname></persName>
		</author>
		<ptr target="https://ark.intel.com/content/www/us/en/ark/products/71915/intel-ssd-dc-s3700-series-400gb-2-5in-sata-6gb-s-25nm-mlc.html" />
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b31">
	<analytic>
		<title/>
	</analytic>
	<monogr>
		<title level="j">Intel. Intel R Xeon R Processor</title>
		<imprint>
			<biblScope unit="page" from="5" to="2697" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b32">
	<monogr>
		<title level="m" type="main">bQueue: A CoarseGrained Bucket QoS Scheduler</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Yuhan</forename><surname>Peng</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Peter</forename><surname>Varman</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2018" />
			<biblScope unit="page">18</biblScope>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b33">
	<monogr>
				<title level="m">IEEE/ACM International Symposium on Cluster, Cloud and Grid Computing (CCGRID)</title>
		<imprint>
			<publisher>IEEE</publisher>
			<date type="published" when="2018" />
			<biblScope unit="page" from="93" to="102" />
		</imprint>
	</monogr>
</biblStruct>

				</listBibl>
			</div>
		</back>
	</text>
</TEI>
