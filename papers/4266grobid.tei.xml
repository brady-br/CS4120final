<?xml version="1.0" encoding="UTF-8"?>
<TEI xmlns="http://www.tei-c.org/ns/1.0" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
xsi:schemaLocation="http://www.tei-c.org/ns/1.0 /Users/atharsefid/Desktop/grobid-0.5.3/grobid-home/schemas/xsd/Grobid.xsd"
 xmlns:xlink="http://www.w3.org/1999/xlink">
	<teiHeader xml:lang="en">
		<encodingDesc>
			<appInfo>
				<application version="0.5.3" ident="GROBID" when="2020-09-29T04:08+0000">
					<ref target="https://github.com/kermitt2/grobid">GROBID - A machine learning software for extracting information from scholarly documents</ref>
				</application>
			</appInfo>
		</encodingDesc>
		<fileDesc>
			<titleStmt>
				<title level="a" type="main">Analysis of DTLS Implementations Using Protocol State Fuzzing Analysis of DTLS Implementations Using Protocol State Fuzzing</title>
			</titleStmt>
			<publicationStmt>
				<publisher/>
				<availability status="unknown"><licence/></availability>
				<date>August 12-14, 2020</date>
			</publicationStmt>
			<sourceDesc>
				<biblStruct>
					<analytic>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Paul</forename><surname>Fiterau-Brostean</surname></persName>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Bengt</forename><surname>Jonsson</surname></persName>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Paul</forename><surname>Fiter˘ Au-Bro¸steanbro¸stean</surname></persName>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Bengt</forename><surname>Jonsson</surname></persName>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Robert</forename><surname>Merget</surname></persName>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Joeri</forename><surname>De Ruiter</surname></persName>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Konstantinos</forename><surname>Sagonas</surname></persName>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Juraj</forename><surname>Somorovsky</surname></persName>
						</author>
						<author>
							<affiliation key="aff0">
								<orgName type="institution">Uppsala University</orgName>
								<address>
									<addrLine>Robert Merget</addrLine>
								</address>
							</affiliation>
						</author>
						<author>
							<affiliation key="aff1">
								<orgName type="department">Joeri de Ruiter</orgName>
								<orgName type="institution" key="instit1">Ruhr-University Bochum</orgName>
								<orgName type="institution" key="instit2">SIDN Labs</orgName>
								<address>
									<addrLine>Konstantinos Sagonas</addrLine>
								</address>
							</affiliation>
						</author>
						<author>
							<affiliation key="aff2">
								<orgName type="department">Juraj Somorovsky</orgName>
								<orgName type="laboratory">SIDN Labs</orgName>
								<orgName type="institution" key="instit1">Uppsala University</orgName>
								<orgName type="institution" key="instit2">Paderborn University</orgName>
								<orgName type="institution" key="instit3">Uppsala University</orgName>
								<orgName type="institution" key="instit4">Uppsala University</orgName>
								<orgName type="institution" key="instit5">Ruhr University Bochum</orgName>
								<orgName type="institution" key="instit6">Uppsala University</orgName>
								<orgName type="institution" key="instit7">Paderborn University</orgName>
							</affiliation>
						</author>
						<title level="a" type="main">Analysis of DTLS Implementations Using Protocol State Fuzzing Analysis of DTLS Implementations Using Protocol State Fuzzing</title>
					</analytic>
					<monogr>
						<title level="m">Proceedings of the 29th USENIX Security Symposium</title>
						<meeting>the 29th USENIX Security Symposium						</meeting>
						<imprint>
							<date type="published">August 12-14, 2020</date>
						</imprint>
					</monogr>
					<note>This paper is included in the Open access to the Proceedings of the 29th USENIX Security Symposium is sponsored by USENIX.</note>
				</biblStruct>
			</sourceDesc>
		</fileDesc>
		<profileDesc>
			<abstract>
				<p>Recent years have witnessed an increasing number of protocols relying on UDP. Compared to TCP, UDP offers performance advantages such as simplicity and lower latency. This has motivated its adoption in Voice over IP, tunneling technologies , IoT, and novel Web protocols. To protect sensitive data exchange in these scenarios, the DTLS protocol has been developed as a cryptographic variation of TLS. DTLS&apos;s main challenge is to support the stateless and unreliable transport of UDP. This has forced protocol designers to make choices that affect the complexity of DTLS, and to incorporate features that need not be addressed in the numerous TLS analyses. We present the first comprehensive analysis of DTLS implementations using protocol state fuzzing. To that end, we extend TLS-Attacker, an open source framework for analyzing TLS implementations, with support for DTLS tailored to the stateless and unreliable nature of the underlying UDP layer. We build a framework for applying protocol state fuzzing on DTLS servers, and use it to learn state machine models for thirteen DTLS implementations. Analysis of the learned state models reveals four serious security vulnerabilities, including a full client authentication bypass in the latest JSSE version, as well as several functional bugs and non-conformance issues. It also uncovers considerable differences between the models, confirming the complexity of DTLS state machines.</p>
			</abstract>
		</profileDesc>
	</teiHeader>
	<text xml:lang="en">
		<body>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="1">Introduction</head><p>UDP is widely used as an unreliable transfer protocol for Voice over IP, tunneling technologies, and new Web protocols, and is one of the commonly used protocols in the Internet of Things (IoT). As UDP does not offer any security by itself, Datagram Transport Layer Security (DTLS) <ref type="bibr" target="#b29">[29,</ref><ref type="bibr" target="#b36">36]</ref> was introduced. DTLS is a variation on TLS, a widely used security protocol responsible for securing communication over a reliable data transfer protocol.</p><p>DTLS is one of the primary protocols for securing IoT applications <ref type="bibr" target="#b38">[38]</ref>. The number of IoT devices is projected to reach 11.6 billion by 2021 <ref type="bibr" target="#b26">[26]</ref>. This will constitute half of all devices connected to the Internet, with the percentage set to grow in subsequent years. Such trends also increase the need to ensure that software designed for these devices is properly scrutinized, particularly with regards to its security.</p><p>DTLS is also used as one of the two security protocols in WebRTC, a framework enabling real-time communication. WebRTC can be used, for example, to implement video conferencing in browsers without the need for a plugin. It is supported by all major browsers, including Mozilla Firefox, Google Chrome, Microsoft Edge, and Apple's Safari.</p><p>Whereas significant effort has been invested into ensuring security of TLS implementations, those based on DTLS have so far received considerably less scrutiny. Our work fills this gap by providing an extensible platform for testing and analyzing systems based on DTLS. We describe this framework, and use it to analyze a number of existing DTLS implementations, including the most commonly used ones. Our specific focus is on finding logical flaws, which can be exposed by non-standard or unexpected sequences of messages, using a technique known as protocol state fuzzing (or simply state fuzzing).</p><p>As in TLS, each DTLS client and server effectively implements a state machine which keeps track of how far protocol operation has progressed: which types of messages have been exchanged, whether the cryptographic materials have been agreed upon and/or computed, etc. Each DTLS implementation must correctly manage such a state machine for a number of configurations and key exchange mechanisms. Corresponding implementation flaws, so-called state machine bugs, may be exploitable, e.g., to bypass authentication steps or establish insecure connections <ref type="bibr" target="#b5">[5]</ref>. To find such flaws, state fuzzing has proven particularly effective not only for TLS <ref type="bibr" target="#b13">[13]</ref>, but also for SSH <ref type="bibr" target="#b19">[19]</ref>, TCP <ref type="bibr" target="#b18">[18]</ref>, MQTT <ref type="bibr" target="#b40">[40]</ref>, <ref type="bibr">OpenVPN [12]</ref>, QUIC <ref type="bibr" target="#b33">[33]</ref>, and the 802.11 4-Way Handshake <ref type="bibr" target="#b28">[28]</ref>, leading to the discovery of several security vulnerabilities and nonconformance issues in their implementations.</p><p>State fuzzing automatically infers state machine descriptions of protocol implementations using model learning <ref type="bibr" target="#b32">[32,</ref><ref type="bibr" target="#b41">41]</ref>. This is an automated black-box technique which sends selected sequences of messages to the implementation, observes the corresponding outputs, and produces a Mealy machine that abstractly describes how the implementation responds to message flows. The Mealy machine can then be analyzed to spot flaws in the implementation's control logic or check compliance with its specification. State fuzzing works without any a priori knowledge of the protocol state machine, but relies on a manually constructed protocol-specific test harness, a.k.a. a MAPPER, which translates symbols in the Mealy machine to protocol packets exchanged with the implementation.</p><p>Challenges resulting from the DTLS design. DTLS is more complex than other security protocols that have so far been subject to state fuzzing. Most of these <ref type="bibr" target="#b12">[12,</ref><ref type="bibr" target="#b18">18,</ref><ref type="bibr" target="#b19">19]</ref> run over TCP, relying on its support for reliable connections. In contrast, DTLS runs over UDP, which is connectionless. This implies that DTLS has to implement its own retransmission mechanism and provide support for message loss, reordering, and fragmentation. Moreover, an ongoing DTLS interaction cannot be terminated by simply closing the connection, as is the case with TLS. As a result, most DTLS implementations allow interaction to continue even after reception of unexpected messages -after all, these messages might have just arrived out of order-and may subsequently allow a handshake to "restart in the middle" and finish successfully. Finally, compared to TLS, DTLS includes an additional message exchange used to prevent Denial-of-Service attacks. All this added complexity makes protocol state fuzzing more difficult to apply for DTLS than for TLS.</p><p>Supporting mapper construction. DTLS' support for message loss, reordering, and fragmentation requires additional packet parameters compared to TLS, such as message sequence numbers. DTLS parameters have to be correctly managed by the MAPPER. This requires special care when deviating from an expected handshake sequence (a.k.a. a happy flow), since each particular parameter management strategy may allow or prohibit a "restarting" handshake to be eventually completed. In order to facilitate MAPPER construction and parameter management, we have developed a test framework for DTLS, which allows easy definitions of arbitrary protocol packets and efficient experimentation with parameter management strategies. This test framework is realized by extending TLS-Attacker <ref type="bibr" target="#b39">[39]</ref>, an existing open source framework for testing TLS implementations, with support for DTLS. The framework forms the basis for our MAPPER used for DTLS state fuzzing. The test framework can also be used in its own right to support other fuzzing techniques.</p><p>Handling the complexity of DTLS state machines. The above properties of DTLS imply that state machine models of DTLS implementations are significantly more complex than corresponding state machines for TLS and other protocols. Their complexity is further increased when analyzing the four main key exchange mechanisms together rather than separately, and when exploring settings involving client certificate authentication. Such complexity in the models creates problems both for the model learning algorithm and for the interpretation of resulting models. We ameliorate and avoid some of the complexity in two ways: 1) Our test harness does not employ reordering and fragmentation, and hence this is not part of our learned models. 2) We adapt the MAPPER so as to enable handshakes to "restart", which has the additional side-effect of decreasing the size of the learned models, since successful restarts typically show up as back-transitions to regular handshake states. Obtaining models for a wide range of implementations and configurations. We have applied our platform to thirteen implementations of ten distinct vendors (Section 6). Besides covering a wide spectrum of DTLS implementations, ranging from mature, general-purpose libraries to implementations designed for IoT or WebRTC, we mention that some of them are DTLS libraries without a TLS component, on which state fuzzing has never been applied before.</p><p>For each implementation we examine many, often all, combinations of supported key exchange and client certificate authentication configurations. This ensures that state fuzzing does not miss bugs that are only present in certain configurations. In fact, this proved important: several of the Java Secure Socket Extension (JSSE) bugs reported in Section 7.4 could only have been discovered with a configuration requiring client certificate authentication. From models to bugs. Once models are obtained we proceed to analyze them, looking for unexpected or superfluous states and transitions. Some of the main findings of our analysis are: (i) A complete client authentication bypass in JSSE, which is the default TLS/DTLS library of the Java Standard Edition Platform. The bug allows attackers to authenticate themselves to a JSSE server by sending special out-of-order DTLS messages without ever proving to the server that they know the private key for the certificate they transmit. The bug is especially devastating, since it also affects JSSE's TLS library. This greatly increases its impact, as JSSE's TLS library is often used to authenticate users with smart cards at web sites or web services. (ii) A state machine bug in the Scandium framework allowed us to finish a DTLS handshake without sending a ChangeCipherSpec message. This resulted in the server accepting plaintext messages even if indicated otherwise by the negotiated cryptographic mechanisms. Note that this bug is similar to the EarlyFinished bug found in the TLS JSSE implementation <ref type="bibr" target="#b13">[13]</ref>. (iii) A similar bug was also present in PionDTLS, a Go implementation for WebRTC. Investigation of this bug led to discovery of a graver issue whereby the PionDTLS server freely processes unencrypted application data once a handshake has been completed. (iv) Finally, three confirmed functional bugs in TinyDTLS, a lightweight DTLS implementation for IoT devices. Contributions. In summary, this work:</p><p>• Extends TLS-Attacker with DTLS functionality and uses it to implement a protocol state fuzzing platform for DTLS servers.</p><p>• Provides Mealy machine models for thirteen DTLS server implementations, including the most commonly used ones, with models exploring most key exchange algorithms and client certificate authentication settings.</p><p>• Analyzes the learned models and reports several nonconformance bugs and a number of security vulnerabilities in DTLS implementations. Some of these vulnerabilities affect also the TLS part of these libraries.</p><p>Responsible disclosure. We have reported all issues to the respective projects complying with their security procedures. The reported security issues were all confirmed by the responsible developers, who implemented proper countermeasures.</p><p>We provide more details in Section 7.</p><p>Outline. We start by briefly reviewing DTLS, model learning, and the TLS-Attacker framework in Sections 2 to 4. Subsequently, we present the learning setup we employ (Section 5), the DTLS server implementations we tested and the effort spent on learning state machines for them (Section 6), followed by a detailed analysis of the issues that were found in the various DTLS implementations (Section 7). Therein, we present state machines for three of these implementations, whilst making the rest available online. Section 8 reviews related work, and Section 9 ends this paper with some conclusions and directions for further work.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2">Datagram Transport Layer Security</head><p>DTLS is an adaptation of TLS <ref type="bibr" target="#b15">[15]</ref> for datagram transport layer protocols. It is currently available in two versions: DTLS 1.0 <ref type="bibr" target="#b35">[35]</ref>, based on TLS 1.1 <ref type="bibr" target="#b14">[14]</ref>, and DTLS 1.2, based on TLS 1.2 <ref type="bibr" target="#b15">[15]</ref>. Version 1.3 is currently under development. This work focuses on TLS/DTLS version 1.2. At a high level, both TLS and DTLS consist of two major building blocks: (1) The Handshake is responsible for negotiating session keys and cryptographic algorithms, and key agreement is either based on public key cryptography (the standard case), or on pre-shared keys. The set of algorithms to be used is specified in a cipher suite. (2) The Record Layer splits the received cleartext data stream into DTLS Records. Handshake messages are also sent as records (typically unencrypted), and after the ChangeCipherSpec message is sent in the handshake, the content of all subsequent records is encrypted using the negotiated session keys-where different keys are used for the two communication directions.</p><p>The stateless and inherently unreliable datagram transport layer has prompted the designers of DTLS to introduce several changes to the original TLS protocol. Below, we describe the handshake protocol and Record Layer, and discuss the changes introduced which are relevant to our paper. However, we remark that more differences exist <ref type="bibr" target="#b29">[29,</ref><ref type="bibr" target="#b36">36]</ref>. ChangeCipherSpec {Finished} Handshake protocol. <ref type="figure" target="#fig_0">Figure 1</ref> illustrates the DTLS handshake. The client initiates communication by sending ClientHello, which includes the highest supported DTLS version number, a random nonce, the cipher suites supported by the client, and optional extensions. In DTLS, the server responds with a HelloVerifyRequest message, which contains a stateless cookie. This message prompts the client to resend the ClientHello message, which then includes the stateless cookie, and attempts to prevent Denial-of-Service attacks <ref type="bibr" target="#b36">[36]</ref>. The server responds with the following messages: ServerHello contains the server's DTLS version, the cipher suite chosen by the server, a second random nonce, and optional extensions. Certificate carries the server's certificate, which contains the server's public key. In ServerKeyExchange the server sends an ephemeral public key which is signed with the private key for the server's certificate. This signature also covers both nonces. CertificateRequest asks the client to authenticate to the server. This message is optional, and only used when the server is configured to authenticate clients via certificates. ServerHelloDone marks that no other messages are forthcoming.</p><p>The client responds with a list of messages: Certificate, ClientKeyExchange, CertificateVerify, ChangeCipherSpec, and Finished. The Certificate and CertificateVerify messages are optional and only transmitted when the server requests client authentication. They contain, respectively, a client certificate and a signature computed over all previous messages with the client's long term private key. The client sends its public key share in the ClientKeyExchange message. Both parties then use the exchanged information to derive symmetric keys that are used in the rest of the protocol. The client sends ChangeCipherSpec to indicate that it will use the negotiated keys from now in the Record Layer. Finally, it sends Finished encrypted with the new keys, which contains an HMAC over the previous handshake messages. The server responds with its own ChangeCipherSpec and Finished messages. Thereafter, both client and server can exchange authenticated and encrypted application data.</p><p>Several DTLS handshakes can be performed within one DTLS connection. Performing a subsequent handshake allows the client and server to renew the cryptographic key material. This process is also called renegotiation.</p><p>UDP datagrams are often limited to 1500 bytes <ref type="bibr" target="#b36">[36]</ref>. Since handshake messages can become longer than the datagram size, a fragmentation concept has been introduced in DTLS. This allows the implementation to split a handshake message into several fragments and send it over the wire in distinct records so that every record respects the maximum datagram size. To support this, new fields have been introduced in the handshake messages: message sequence, fragment offset, and fragment length. Message sequence indicates the position of the message within the handshake and is also used in a retransmission mechanism.</p><p>Record Layer. All messages in DTLS are wrapped in socalled records. During the first DTLS handshake, the Record Layer operates in epoch 0. This epoch number is included in the header of the DTLS record. If cryptographic keys have been negotiated and activated by sending a ChangeCipherSpec, the Record Layer increases the epoch number to 1 which indicates that the contents of the actual record are encrypted. Since the handshake may be repeated several times (renegotiation), the epoch number may also be increased further.</p><p>While TLS has implicit sequence numbers, DTLS has explicit sequence numbers. This is required since the protocol does not guarantee message arrival and therefore cannot guarantee that the implicit counters are synchronized. At the start of each epoch, sequence numbers are reset to 0, and for each new record the sequence number is increased. Note that re-sending a record due to the loss of a UDP packet still increases the sequence number.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3">Background on Model Learning</head><p>Our state fuzzing framework infers a model of a protocol implementation in the form of a Mealy machine, which describes how the implementation responds to sequences of well-formed messages. Mealy machines are finite state automata with finite alphabets of input and output symbols. They are widely used to model the behavior of protocol entities (e.g., <ref type="bibr" target="#b10">[10,</ref><ref type="bibr" target="#b25">25]</ref>). Starting from an initial state, they process one input symbol at a time. Each input symbol triggers the generation of an output symbol and brings the machine to a new state.</p><p>To infer a Mealy machine model of an implementation, we use model learning. An analyzed implementation is referred to as the system under test <ref type="bibr">(SUT)</ref>. Model learning is an automated black-box technique which a priori needs to know only the input and output alphabets of the SUT. The most well-known model learning algorithm is Angluin's L * algorithm <ref type="bibr" target="#b3">[3]</ref>, which has been refined into more efficient versions, such as the TTT algorithm <ref type="bibr" target="#b22">[22]</ref> which is the one we use. These algorithms assume that the SUT exhibits deterministic behavior, and produce a deterministic Mealy machine.</p><p>Model learning algorithms operate in two alternating phases: hypothesis construction and hypothesis validation. During hypothesis construction, selected sequences of input symbols are sent to the SUT, observing which sequences of output symbols are generated in response. The selection of input sequences depends on the observed responses to previous sequences. When certain convergence criteria are satisfied, the learning algorithm constructs a hypothesis, which is a minimal deterministic Mealy machine that is consistent with the observations recorded so far. This means that for input sequences that have been sent to the SUT, the hypothesis produces the same output as the one observed from the SUT. For other input sequences, the hypothesis predicts an output by extrapolating from the recorded observations. To validate that these predictions agree with the behavior of the SUT, learning then moves to the validation phase, in which the SUT is subject to a conformance testing algorithm which aims to validate that the behavior of the SUT agrees with the hypothesis. If conformance testing finds a counterexample, i.e., an input sequence on which the SUT and the hypothesis disagree, the hypothesis construction phase is reentered in order to build a more refined hypothesis which also takes the discovered counterexample into account. If no counterexample is found, learning terminates and returns the current hypothesis. This is not an absolute guarantee that the SUT conforms to the hypothesis, although many conformance testing algorithms provide such guarantees under some technical assumptions. If the cycle of hypothesis construction and validation does not terminate, this indicates that the behavior of the SUT cannot be captured by a finite Mealy machine whose size and complexity is within reach of the employed learning algorithm.</p><p>Model learning algorithms work in practice with finite input alphabets of modest sizes. In order to learn realistic SUTs, the learning setup is extended with a so-called MAPPER, which acts as a test harness that transforms input symbols from the finite alphabet known to the learning algorithm to actual protocol messages sent to the SUT, as illustrated in <ref type="figure" target="#fig_1">Fig. 2</ref>. Typically, the input alphabet consists of different types of messages, often refined to represent interesting variations, e.g., concerning the key exchange algorithm. The MAPPER transforms each such message to an SUT message by supplying message parameters, performing cryptographic operations, etc. Conversely, the MAPPER translates output from the SUT into the alphabet of output symbols known to the learning algorithm. The MAPPER also maintains state that is hidden from the learning algorithm but needed for supplying message parameters; this can include sequence numbers, agreed encryption keys, etc. The choice of input alphabet and the design of the MAPPER require domain specific knowledge about the tested protocol. Once the mapper has been implemented, model learning proceeds fully automatically.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4">DTLS Framework Implementation</head><p>The Transport Layer Security (TLS) protocol is one of the most important cryptographic protocols used on the Internet. Due to its importance and widespread deployment, TLS and its various attacks <ref type="bibr" target="#b1">[2,</ref><ref type="bibr" target="#b4">4,</ref><ref type="bibr" target="#b5">5,</ref><ref type="bibr" target="#b7">7,</ref><ref type="bibr" target="#b13">13,</ref><ref type="bibr" target="#b30">30,</ref><ref type="bibr" target="#b43">43]</ref> have been under scrutiny by security researchers. As a result, by now, there exist several frameworks <ref type="bibr" target="#b6">[6,</ref><ref type="bibr" target="#b24">24,</ref><ref type="bibr" target="#b31">31,</ref><ref type="bibr" target="#b39">39]</ref> for the evaluation of TLS libraries. In contrast, DTLS has been largely overlooked in these frameworks or considered out of scope. Instead of starting from scratch, we have decided to create a framework for testing DTLS based on the newest version of TLS-Attacker <ref type="bibr" target="#b39">[39]</ref>.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.1">TLS-Attacker</head><p>TLS-Attacker is an open-source, flexible Java-based TLS analysis framework that allows its users to create and modify TLS protocol flows as well as the structure of the included TLS messages. The user is then able to test and analyze the behavior of an implementation, and create attacks and tools with the custom TLS stack of TLS-Attacker as a software library. TLS-Attacker has been integrated in the build process of several TLS libraries <ref type="bibr" target="#b8">[8,</ref><ref type="bibr" target="#b27">27]</ref> to increase their test coverage.</p><p>TLS-Attacker employs solely the low-level cryptography provided by Java, and implements the TLS protocol itself. Its main functionality relies on the concept of workflow traces which allow to define arbitrary protocol flows. Every TLS protocol flow can be represented by a sequence of Send and Receive actions. The developer can construct a workflow trace in Java or in XML. Once TLS-Attacker receives a workflow trace, it attempts to execute the predefined TLS messages, and records the behavior of the tested TLS peer. A Java example with an ECDHE-RSA key exchange is shown below:</p><formula xml:id="formula_0">WorkflowTrace flow = new WorkflowTrace(); trace.addTlsActions(new TlsAction[]{ new SendAction(conn, new ClientHelloMessage()), new ReceiveAction(conn, new ServerHelloMessage()), new ReceiveAction(conn, new CertificateMessage()), new ReceiveAction(conn, new ECDHEServerKeyExchangeMessage()), new ReceiveAction(conn, new ServerHelloDoneMessage()), new SendAction(conn, new ECDHClientKeyExchangeMessage()), new SendAction(conn, new ChangeCipherSpecMessage()), new SendAction(conn, new Finished()), new ReceiveAction(conn, new ChangeCipherSpecMessage()), new ReceiveAction(conn, new Finished()) });</formula><p>Notice how messages in the above flow are described at a high level. To execute flows, TLS-Attacker generates valid packets for messages, and parses messages from packet responses. It does this by maintaining a context, which it updates as new messages are sent and received. The context encompasses stateful information relevant to a TLS connection such as stored random nonces, agreed upon algorithms, and supported cipher suites. Using this information, TLS-Attacker can generate valid or semi-valid messages, encrypt them using the negotiated cipher suite, and send them to a peer.</p><p>All the above properties make TLS-Attacker ideal for generating valid packets from message names, which in our case are the symbols of the input alphabet.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.2">Our DTLS Testing Framework</head><p>Our DTLS testing framework extends TLS-Attacker with support for DTLS 1.0 and DTLS 1.2. This extension allows TLSAttacker to generate, send and receive DTLS packets and, more broadly, to execute valid and invalid DTLS flows. Our implementation involved several changes, among which we mention: i) added support for DTLS handshake message fragmentation; ii) a new field to the ClientHello message for storing a server cookie; iii) new fields to the TLS context, one for storing the cookie received, others for keeping track of the record epoch and message sequence number (how these fields are updated is explained in Section 5.2); and iv) new options for retransmission and fragmentation handling.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5">Learning Setup</head><p>The learning setup 1 comprises three components: the LEARNER, the MAPPER and the SUT; cf. <ref type="figure" target="#fig_1">Fig. 2</ref>. The SUT is a DTLS server implementation, though our setup can be easily adapted to support clients. The LEARNER generates inputs from a finite alphabet of input symbols. The MAPPER transforms these inputs into full DTLS records and sends them over a datagram connection to the SUT. The MAPPER then captures the SUT's reply, translates it to symbols in the alphabet of output symbols, and delivers them back to the LEARNER. The LEARNER finally uses the information obtained from the exchanged sequences of input and output symbols to generate a Mealy machine, as described in Section 3.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5.1">Learner</head><p>The LEARNER is implemented using LearnLib <ref type="bibr" target="#b23">[23]</ref>, a Java library implementing algorithms for learning automata and Mealy machines. The library also provides state-of-the art <ref type="table" target="#tab_3">Table 1</ref>: Symbols used in learning and their shorthands. We list only the output symbols which are mentioned in the paper.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Symbol</head><p>Shorthand</p><formula xml:id="formula_1">ClientHello(T) CH(T) T ∈ {DH, ECDH, RSA, PSK} CertificateRequest CertReq ClientKeyExchange(T) CKE(T) T ∈ {DH, ECDH, RSA, PSK} CertificateVerify CertVer EmptyCertificate Cert(empty) Certificate(T) Cert(t) T ∈ {RSA, ECDSA} t ∈ {RSA, EC} ChangeCipherSpec CCS Application App Alert(CloseNotify) A(CN) Alert(UnexpectedMessage) A(UM) Alert(BadCertificate) A(BC) Alert(DecodeError) A(DE) Alert(DecryptError) A(DYE) Alert(InternalError) A(IE) HelloVerifyRequest HVR ServerHello SH ServerHelloDone SHD ServerKeyExchange(T) SKE(T) T ∈ {DH, ECDH, PSK} Finished F NoResp - Disabled Disabled Unknown Message UM input alphabet output alphabet</formula><p>conformance testing algorithms, which are used by the learning algorithm for hypothesis validation. The learning algorithm chosen is TTT <ref type="bibr" target="#b22">[22]</ref>, a state-of-the-art algorithm that requires fewer test inputs compared to other algorithms <ref type="bibr" target="#b21">[21]</ref>.</p><p>For conformance testing, we use Wp <ref type="bibr" target="#b11">[11]</ref> and a variation of it, Wp-Random <ref type="bibr" target="#b20">[20]</ref>. <ref type="table" target="#tab_3">Table 1</ref> displays the alphabets of input and output symbols, as well as the shorthands that we use to make their representation more compact. The input alphabet includes in abstract form all client messages introduced in Section 2. Additionally, it includes Application for sending a simple application message, and two common alert messages, Alert(CloseNotify) and Alert(UnexpectedMessage). (Interpretations for the alerts can be found in the TLS 1.2 specification <ref type="bibr">[15, p. 31]</ref>.) Finally, Certificate, EmptyCertificate, and CertificateVerify are included for sending certificate-related messages. Certificate contains a single valid certificate, and is parameterized by the public key signing algorithm. EmptyCertificate denotes sending a certificate message with an empty list of certificates.</p><p>The output alphabet includes abstractions for each different message the SUT responds with, similarly to the input alphabet. It also includes three special outputs: NoResp, when the SUT does not respond; Disabled, when the SUT process is no longer running; and Unknown, when the SUT responds with a message which cannot be decrypted by the MAPPER. This happens, for example, if the MAPPER has replaced the keys necessary to decrypt the output by a new set of keys.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5.2">Mapper</head><p>The MAPPER uses our DTLS testing framework to translate between LEARNER inputs/outputs and actual DTLS messages. Behaviorally, the MAPPER operates like a DTLS client, with control flow deferred to the LEARNER. In order to reduce the learning effort, we do not subject the SUT to message reordering or fragmentation. Hence, the MAPPER is configured to send each handshake message in one single DTLS fragment.</p><p>To correctly supply and check DTLS-specific fields in messages, the MAPPER maintains the state of the interaction in a context, which it uses to generate and parse messages. Our DTLS testing framework already maintains such a context for executing protocol flows. Hence, we let our MAPPER use this context, with a few adaptations to support efficient learning. Key components of this context are cookie, cipherState and digest, as well as nextSendMsgSeq and nextRecvMsgSeq, for the next message sequence number to be sent and received, respectively. Each message sent is equipped with the value of nextMsgSeqSent, which is then incremented. nextRecvMsgSeq is assigned the sequence number of each message received, provided it is the next expected one. The MAPPER also maintains analogous state variables for record sequence numbers, as well as numbers of epochs that are incremented whenever a ChangeCipherSpec is sent. These variables are also used to assemble fragments into messages and detect retransmissions. Retransmissions here refer to messages whose message sequence number or epoch are smaller than those expected.</p><p>The variable cookie, initially set to empty, retains the value of the cookie field in the most recent HelloVerifyRequest message received from the server, and is used when sending subsequent ClientHello messages. The variable cipherState stores the next symmetric keys to be used for decrypting/encrypting messages. To be put in use, a cipherState first has to be deployed. The cipherState deployed initially is set to null (no encryption/decryption). On each ClientKeyExchange sent, cipherState is updated using information from an earlier ClientHello-ServerHello exchange. On each ChangeCipherSpec sent, cipherState is deployed. This implies that the MAPPER will only start encrypting/decrypting once ClientHello and ServerHello are exchanged, and a ClientKeyExchange and a ChangeCipherSpec have been issued. Prior to these actions, messages are sent in plaintext.</p><p>The variable digest stores a buffer of all handshake messages sent so far, i.e., each handshake message that is sent or received is also appended to digest. A hash over this variable is included in every Finished message sent, to be verified by the server. The variable digest is cleared after each Finished, and also before sending ClientHello. This strategy for resetting digest enables handshakes to "restart in the middle", by ensuring that hashes are computed over exactly the messages in the most recent current handshake. After experimenting with different strategies for resetting digest, we found that this strategy allows handshakes that restart to complete, whereas other strategies do not. It also produces smaller learned models, since successful restarts typically show up as backtransitions to regular handshake states. As an example, for TinyDTLS using a PSK configuration, the number of states in the learned model was reduced from 36 if digest was not reset, to 22 if it was.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5.3">Making the SUT Behavior Deterministic</head><p>As mentioned in Section 3, the learning algorithm employed works under the assumption that the SUT exhibits deterministic behavior, i.e., the output generated depends uniquely on the supplied input sequence. During learning experiments, however, timing effects occasionally manifest as non-determinism to the time-agnostic LEARNER. Below, we describe our strategies to remedy this problem.</p><p>One cause for timing-induced non-determinism is the LEARNER sending the first input too early, before the SUT has fully started, or the MAPPER determining prematurely that the SUT does not respond. We address this by tailoring, for each SUT, the start and response timeouts. These are, respectively, the delay before the first input is sent (allowing the SUT to initialize), and the time the MAPPER waits for each response before concluding a timeout. In order to reduce learning time, we adjust the response timeout for certain messages, particularly ClientHello and Finished, to which the SUT could take longer to respond. Finally, in order to optimize the start timeout for the slower JSSE and Scandium implementations, we wrap around the SUT a program which preloads key material, among other things. This key material is then reused rather than reloaded for each new sequence of inputs. Once the server is ready to receive packets, the wrapper program notifies the LEARNER of the port number at which the server is listening. The LEARNER can then immediately start sending inputs, rather than having to wait for a predefined period.</p><p>Another cause for non-determinism is timeout-triggered retransmissions by the SUT. To address this, we set the retransmission timeout of the SUT to a high value. For some SUTs, this is a configurable parameter; for others we had to alter the source code. Corresponding patches are provided on the learning setup's website for reproducibility.</p><p>Even with the above strategies, an SUT would sometimes produce alternative outputs due to spurious timing effects. In order to detect such cases, we store SUT's responses to queries in a cache during the hypothesis construction phase, and confirm each counterexample produced by hypothesis validation before delivering it to the LEARNER. When detecting a case of differing responses to the same input, we rerun the sequence until at least 80% of the responses are the same; this always happened within a small number of retrials.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="6">Experimental Setup and Experiments</head><p>An experiment configuration comprises the implementation, the key exchange algorithms and client authentication setting based on which we form the input alphabet, and whether messages with retransmissions were discarded.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="6.1">Implementations Tested and Analyzed</head><p>In total, we analyzed thirteen different implementations. This includes well-known TLS implementations like OpenSSL, GnuTLS, MbedTLS, JSSE, WolfSSL, and NSS, which also support DTLS. For JSSE we analyzed the Sun JSSE provider of Java 9 and 12. Furthermore, we analyzed PionDTLS, a Go implementation of DTLS 1.2 for WebRTC. The remaining implementations are IoT-specific and support only DTLS. Scandium is the DTLS implementation which is part of Eclipse's Java CoAP implementation. The two TinyDTLS variants are lightweight implementations specifically designed for IoT devices. TinyDTLS for Contiki-NG branched out from that in Eclipse's IoT suite, and has been developed independently ever since. We refer to Eclipse's variant as TinyDTLS E , and to Contiki-NG's as TinyDTLS C . When referring to both, we simply use TinyDTLS. For GnuTLS and Scandium, we analyzed two versions; the later version contains bug fixes uncovered in the earlier one. As with TinyDTLS, we omit versions when referring to both.</p><p>To avoid having to write our own DTLS servers, we use utilities to configure and launch DTLS servers that are provided by the developers where possible. For example, for OpenSSL, we use the openssl s _ server utility, for GnuTLS we use gnutls-serv, etc. There are three exceptions (PionDTLS, Scandium, and JSSE) for which we wrote our own DTLS applications 2 as either there were no standard utilities available or the available ones did not provide the desired functionality. For every implementation, <ref type="table" target="#tab_1">Table 2</ref> displays the name, version, utility, supported key exchange algorithms and client certificate authentication configurations, and a URL. We use commit identifiers as versions for both TinyDTLS variants, PionDTLS, and Scandium. The two commits for Scandium belong to the development version 2.0.0 and shall, more suggestively be referred to as Scandium old and Scandium new . Note that client certificate authentication is relevant for DH, ECDH and RSA, but not for PSK whose handshake does not incorporate certificate messages <ref type="bibr">[17, p. 4]</ref>.</p><p>The input alphabet, described in <ref type="table" target="#tab_3">Table 1</ref>, includes inputs necessary to perform handshakes using every key exchange algorithm supported, two alerts, and one application message. Whenever certificates can be part of the key exchange algorithm, they are also included in the alphabet. The SUT is configured to use client certificates whenever these are supported. Therein we explore three configurations: (i) required: In some experiments, we had to remove inputs from the input alphabet and/or limit the set of explored configurations. For PionDTLS, NSS and WolfSSL, the reason was that the server program or library does not support certain combinations of key exchange algorithms and certificate configurations. Similarly, PionDTLS's library does not allow PSK and ECDH cipher suites to be used together, NSS's utility does not support certificate authentication, whilst WolfSSL's utility could not be configured to simultaneously support all key exchange algorithms. In cases where learned models were large (for TinyDTLS, Scandium, and JSSE) or when response time was slow (for Scandium and JSSE), we generated models separately for each key exchange algorithm, in order to keep the learning time reasonable.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="6.2">Learning Effort</head><p>In our experiments, model learning converged on all analyzed implementations, except for JSSE (all configurations), WolfSSL with disabled client authentication, and Scandium using ECDH alphabets. For these configurations, the last hypothesis models produced by learning are not complete, but still very informative as bases for analysis.</p><p>Statistics from the learning experiments for which model learning converged are shown in <ref type="table">Table 3</ref>. These include the number of states, number of tests, and learning time. Our analysis focuses on these three quantities. Number of states. First, note that the number of states in all models is a two-digit number. This means that the models we learn for these DTLS implementations are non-trivial. In particular, we remark that the number of states is considerably larger than those reported for TLS implementations, with our DTLS models averaging 25 states while the TLS models are averaging 9 states <ref type="bibr" target="#b13">[13]</ref>. This confirms our expectations about the increased complexity of DTLS, and the complexity that learning with several cipher suites adds to most models.</p><p>Second, the number of states is, unsurprisingly, affected by the alphabet configuration. PSK configurations generally lead to smaller models than ECDH ones. (This is expected, since the handshake sequence is longer unless client certificate authentication is disabled.) However, combining multiple cipher suites in one alphabet does not necessarily result in much larger models. For example, OpenSSL or MbedTLS generate relatively small models (19 and 17 states respectively, when authentication is required) even with four cipher suites. This can be explained by the fact that in mature implementations handshakes for different key exchange algorithms/authentication configurations tend to share states. (For example, in <ref type="figure" target="#fig_2">Fig. 3</ref> note how all handshakes finish in states 5 and 6.) Third, as we will soon see, there appears to be a strong correlation between the number of states and bugs. The most consequential bugs were found in implementations generating the largest models (JSSE, PionDTLS, Scandium old , TinyDTLS). Hence, reducing state machine size is a viable strategy for improving software correctness. Number of tests. The number of tests was between 21 000 and 50 000 for most implementations, with only PionDTLS and GnuTLS 3.6.7 requiring considerably more. Implementations which resulted in the largest models also required the most tests. PionDTLS leads in terms of model size (66 states) and number of tests (113 508). The one exception to <ref type="table">Table 3</ref>: Results of learning experiments. The "Timeout" column refers to the response timeout, to which * is appended in case the timeout was adjusted based on the input. The "Alphabet Used" column describes the type of cipher suites used, if certificate inputs were included (CERT), if authentication was disabled (NONE), optional (OPT) or required (REQ), and if retransmissions were discarded (DISC).</p><p>Implementation GnuTLS is designed to provide minimally informative output to inputs that deviate from the happy flow: in most cases, the implementation simply discards such inputs and stays silent (this can be seen in e.g., <ref type="figure" target="#fig_2">Fig. 3</ref>). As a consequence, the input sequence which uniquely identifies a state can be very hard to find, and can even be too long to be discovered during learning or conformance testing.</p><p>Learning time. Model learning experiments completed within one day on average, except for four implementations. Among these, PionDTLS and Scandium take considerably longer due to large models (66 states for PionDTLS). Scandium and GnuTLS take longer due to high response timeout values, motivated by very long processing times for messages such as ClientHello (400 and 200 msecs respectively). This highlights the importance of message-specific timeouts, as suggested in Section 5.3. </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="7">Analysis of the Resulting State Machines</head><p>This section provides an analysis of the models against the specification. We first give an overview of a DTLS state machine, using the model learned for GnuTLS as an example. We explain the strategies employed to identify non-compliant behaviors using the learned models. We then outline the noncompliant behaviors observed in the tested libraries. Finally, we present library-specific findings and vulnerabilities, including the client authentication bypass in JSSE.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="7.1">Description of a GnuTLS State Machine</head><p>Displaying models is challenging due to the large number of inputs and states. We therefore prune the models via the following strategies. We first use the Other input as replacement for inputs not captured in a visible transition which lead to the same state and output. Inputs and outputs are then replaced by their corresponding shorthands shown in  <ref type="figure" target="#fig_2">Figure 3</ref> shows a model generated for the GnuTLS 3.6.7 library and can be interpreted as follows. The server starts from the initial state, which is always state 0 on the state machine. On receiving ClientHello(PSK) it generates HelloVerifyRequest and transitions to state 2. In response to a second ClientHello(PSK), it generates the messages ServerHello and ServerHelloDone and transitions to state 3. Continuing the PSK handshake flow, on receiving ClientKeyExchange(PSK), ChangeCipherSpec and Finished, the server generates NoResp (i.e., nothing) for the first two messages, and ChangeCipherSpec and Finished for the third. In this interaction, the server traverses the states 4 and 5, ending in 6.</p><p>The GnuTLS server was configured to use PSK-and RSAbased cipher suites. This is reflected in the model's input alphabet, which includes ClientHello and ClientKeyExchange for both PSK and RSA. Client certificate authentication was set to optional. In this situation, the server makes a client certificate request, as indicated by the CertReq label on the edge from state 2 to state 7 in <ref type="figure" target="#fig_2">Fig. 3</ref>. The server does not require client certificates, hence handshakes can be completed even if the client chooses to send an EmptyCertificate by following states 0, 2, 7, 11, 4, 5 and 6; or no certificate at all by following states 0, 2, 7, 4, 5 and 6. Finally, if the client authenticates with a Certificate message, the handshake traverses states 0, 2, 7, 9, 10, 4, 5 and 6. Note that client certificate authentication is implicitly disabled for cipher suites which do not support it, such as PSK-based ones.</p><p>Besides states traversed by handshake flows, the model contains three other states: states 1, 8 and 12. State 1 is a sink state, which is a state the model cannot transition out of. States 8 and 12 are superfluous states, since they are not necessary for implementation correctness. They are a byproduct of the implementation allowing handshake restarts, which are possible from these states by transitions to state 2.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="7.2">Identifying Irregular Behaviors</head><p>To identify potentially vulnerable behaviors using learned models, we employ the following strategies.</p><p>First, we inspect models for irregular handshake flows (irregular handshakes for short). These are flows that lead to handshake completion, indicated by a successfully transmitted Finished from the server, but may omit, repeat or change the order of handshake messages, relative to regular flows permitted by the specification. To aid analysis of larger models (such as those of JSSE or PionDTLS) we developed a script to automatically remove states from which a handshake cannot be completed (i.e., it is no longer possible to receive a Finished from the server). On the reduced models, handshake-completing flows can be identified much more easily; this is showcased by <ref type="figure" target="#fig_4">Figs. 4 and 5</ref>. Using this approach, we uncovered bugs like early Finished, wherein a handshake is completed by omitting the ChangeCipherSpec message. We refer to Sections 7.4 to 7.6 for descriptions of such bugs for JSSE, Scandium and PionDTLS. Note that the script used to reduce models comes packaged with our learning setup.</p><p>Second, we look for outputs from the server which do not conform to the specification. Of particular interest are irregular ServerHello responses, which are not part of irregular handshakes (otherwise the flows would have been detected and analyzed by our first strategy). We investigate whether a handshake may be completed using these responses. To that end, we probe the SUT's reaction after such responses to manually-crafted messages (typically ClientKeyExchange, ChangeCipherSpec and Finished), whose message sequence/epoch numbers differ from what our MAPPER generates. Doing so, we were able to complete handshakes in TinyDTLS using invalid epoch numbers; see Section 7.8. Also of interest are Alert outputs, as they shed light on how the system processes unexpected inputs. For example, Alert(DecryptError) suggests the SUT is not able to decrypt a message. Hence, Alert(DecryptError) is only expected as a response to an encrypted message, and not to an unencrypted message, as was Finally, we inspect the code exercised by irregular behaviors identified by the first two strategies in order to assess whether they can result in further flaws. Such flaws can be more severe than the initial irregularity suggests. As an example, the non-conforming Alert(DecryptError) in TinyDTLS led us to discover loss of reliability in the face of reordering. Investigation can also reveal bugs not directly related to the behavior inspected, which, however, exercise roughly the same portion of code. Such was the case for PionDTLS, where investigating an early Finished bug led to the discovery of premature processing of application data; see Section 7.6.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="7.3">General Behavior Patterns</head><p>Several conforming and non-conforming behavior patterns emerged while analyzing the learned models. <ref type="table" target="#tab_4">Table 4</ref> summarizes the irregular behaviors and the affected implementations. Handshake with invalid message_seq numbers. Many DTLS server implementations allow for creating new associations even when having an already established connection <ref type="bibr">[36, Section 4.2.8]</ref>. This process involves performing a new ClientHello-ServerHello exchange in the middle of an already started or finished handshake, and results in agreeing on a new cipher suite and key material. The motivation behind this behavior is to support clients that want to re-establish a new connection after loosing one (e.g., after a reboot).  message_seq number by one. <ref type="bibr" target="#b3">3</ref> In five of the tested implementations, it was possible to start a DTLS handshake with a higher message_seq number. It was also possible to identify these implementations from the learned models. For example, in the GnuTLS model <ref type="figure" target="#fig_2">(Fig. 3)</ref>, we were able to detect such an invalid behavior by following the transitions looping back to state 2. Non-conforming cookie computation. Upon receiving a ClientHello message, the server computes a stateless cookie and sends it via HelloVerifyRequest. The server expects the cookie to be replayed in the subsequent ClientHello message. According to the specification, the replayed ClientHello message must contain the same parameters as the first one (e.g., supported cipher suites) [36, Section 4.2.1]. For this purpose, the server should use the initial ClientHello parameters to compute the cookie value.</p><p>In our evaluation, we could observe four implementations incorrectly computing the cookie value, resulting in incorrect validation of replayed ClientHello messages. Such a handshake is also captured in <ref type="figure" target="#fig_2">Fig. 3</ref>, where an RSA handshake can be completed even if the first message was ClientHello(PSK). An exceptional case is NSS, which omits the cookie exchange step altogether, in discord with the specification's recommendation.</p><p>Handshake with invalid order of messages. The most con-sequential divergent behaviors are handshakes where invalid message sequences lead to handshake completion. These behaviors may have severe security implications. We found that JSSE, PionDTLS, and Scandium old do not correctly verify the DTLS handshake message sequence in their internal state machines. Below we discuss these bugs and their implications. <ref type="figure" target="#fig_4">Figure 4</ref> depicts the hypothesis model generated for JSSE 12.0.2 using one RSA-based cipher suite after two days of learning. The model was obtained by erasing all states from which a handshake could no longer be completed. The JSSE server was configured to require client authentication.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="7.4">Bypassing Client Authentication in JSSE</head><p>The model depicts a correctly completed handshake, which is marked with blue edges and follows states 0, 2, 4, 11, 12, 3, 9, and 10. This flow includes Certificate and CertificateVerify messages correctly sent by the client to authenticate to the server. However, even though the server required client authentication, we were able to complete DTLS handshakes without sending Certificate or CertificateVerify messages. The invalid handshakes are captured in red and allow a client to bypass client authentication. Our analysis revealed that versions 11, 12 and 13 of Oracle and OpenJDK Java are affected for all key exchange algorithms. Previous versions are not affected by this issue. Unauthenticated ClientKeyExchange. We start the description of JSSE vulnerabilities with a slightly modified happy flow, which follows states 0, 2, 4, 11, 5, 3, 9 and 10, and traver-ses dotted red edges on the model. In this flow, the client sends a CertificateVerify message before the ClientKeyExchange. This implies that the ClientKeyExchange message is not authenticated with the client certificate.</p><p>Being able to finalize such a DTLS handshake does not directly result in a critical vulnerability. If the client behaves correctly and sends messages in the correct order, an attacker cannot modify the ClientKeyExchange message or the message order because all the handshake messages are protected by the Finished message. Still, this bug shows a first invalid behavior, and scratches on the surface of other invalid ones. Certificate-less client authentication. The second vulnerability is marked with dashed-dotted red edges in <ref type="figure" target="#fig_4">Fig. 4</ref>. The DTLS handshake starts with four ordinary flights of messages. In the fourth flight, the server requests client authentication by sending a CertificateRequest message. However, the client ignores this message and continues the handshake with ClientKeyExchange, ChangeCipherSpec, and Finished messages, without sending Certificate and CertificateVerify. The server responds to the last message with ChangeCipherSpec and Finished, thus completing handshake. This allows the client to completely bypass client authentication and proceed with sending application data.</p><p>Note that the handshake process remains completely transparent to the server, as long as the server does not try to manually inspect the certificate of the peer after completing the handshake. Since the client does not send any certificate, the certificate in the internal JSSE context is null. If the server attempts to evaluate the certificate data (e.g., to access the subject name or certificate issuer fields), this will result in an SSLPeerUnverifiedException and most likely interrupt the authentication process. The next finding bypasses this constraint as well. CertificateVerify-less client authentications. The third vulnerability follows red dashed edges in <ref type="figure" target="#fig_4">Fig. 4</ref> and partially relies on the behavior described above. It allows an attacker to authenticate as an arbitrary user without the possession of the private key. The only prerequisite is that the attacker is in possession of a valid client certificate. This requirement is in most cases trivially achieved as certificates are usually not considered private and can be found in public repositories or provided in frameworks like Certificate Transparency.</p><p>As already visualized on the model, after receiving the second server message flight, the attacker can send a ClientKeyExchange message, thus transitioning from 4 to 7. Instead of directly sending a ChangeCipherSpec message, we continue with an out-of-order Certificate message. Finally, we send ChangeCipherSpec and Finished. The server then responds with ChangeCipherSpec and Finished, after which it can accept an Application message encrypted under the established keys. Thus, the attacker is able to finalize the DTLS handshake without CertificateVerify, and thus without being in possession of the certificate's private key. The crucial difference in comparison to the previous vulnerability is that the server accepts the certificate, and is able to correctly process its contents. Therefore, no SSLPeerUnverifiedException is thrown, and the application has no possibility to detect the invalid client behavior. Attack rationale and state machine analysis. To understand the above described behaviors, we analyzed the JSSE state machine implementation. The reason behind the vulnerabilities is not intuitive. In general, it can be summarized in the following processing properties. First, the server does not validate a proper message order. From the first bug, we can conclude that specific handshake messages can be sent in a different order (e.g., ClientKeyExchange and CertificateVerify). Second, the server only partially validates the correctness of received messages. For example, it validates whether the handshake contains a ClientKeyExchange message, or it does not accept further ClientHello messages after a ServerHelloDone message has been sent. Third, and most importantly, the server does not verify the presence of critical messages after the handshake has been finalized. In particular, it does not check whether Certificate and CertificateVerify messages were received after a CertificateRequest has been sent.</p><p>Our code analysis revealed that the JSSE implementation always waits for at least ClientKeyExchange, ChangeCipherSpec, and Finished messages. Messages arriving outof-order can be cached. This explains why we could observe so many different paths leading to handshake completion in the learned model. Interestingly, the bugs affect the TLS implementation in a similar way as well. Omitting the Certificate and CertificateVerify messages also authenticates the client. Additionally, just removing the CertificateVerify message (while leaving the Certificate message) also authenticates the client. We were able to reproduce the issues with Apache Tomcat 9.0.22, which was configured with JSSE and required client authentication. <ref type="bibr" target="#b4">4</ref> We reported the vulnerabilities to the Oracle security team. They were assigned CVE-2020-2655 and patched with the Oracle critical patch update in January 2020.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="7.5">State Machine Bugs in Scandium</head><p>Scandium old produced some of the largest models. This is reflective of the fact that the implementation did not use an internal state machine to validate the sequence of handshake messages. Consequently, its model captures handshakes with invalid sequences of messages. Reporting our findings prompted Scandium developers to update the implementation with state machine validation (Scandium new ). This update fixed all the Scandium bugs reported in this paper. The update not only helped to simplify the learned model (for a PSK configuration reducing the size from 16 to 13), but also enabled convergence for ECDH configurations resulting in similarly small models. Models for the original and updated versions are available online. Below, we present findings for the original version. Early Finished. Scandium allows a handshake to be completed without the client sending a ChangeCipherSpec message. The server then interprets all the upcoming messages as sent in plaintext. It still expects a valid Finished message with correct verify_data from the client to complete the handshake. Therefore, a man-in-the-middle attacker is not able to simply drop ChangeCipherSpec and use a fabricated Finished message to decrypt the traffic. A valid verify_data would still be required to complete the handshake. This is not possible to compute without possessing the master secret or exploiting further bugs. However, this behavior shows fragility of the Scandium state machine.</p><p>The early Finished message bug is remarkably similar to the bug reported for JSSE 1.8.0_25 <ref type="bibr" target="#b13">[13]</ref>, and is related to the attack described by <ref type="bibr">Wagner and Schneier [44]</ref>. An attacker could exploit this behavior by injecting a backdoor into a library which would force a DTLS client to skip ChangeCipherSpec messages. The attacker could then observe plaintext connections established with any Scandium server. Multiple ChangeCipherSpec in a handshake. Scandium can complete handshakes wherein ChangeCipherSpec is followed by one or more ChangeCipherSpec messages and then Finished. On each ChangeCipherSpec sent, the MAPPER increments the epoch used in follow-up messages. Thus, the sent Finished carries an epoch number for which a cipher has not been negotiated. The fact that Scandium completes handshakes in such a situation further showcases the looseness of its implementation. Measurable improvements. After we reported the vulnerabilities to the Scandium developers, they were able to simplify Scandium's state machine significantly. Scandium new generates at most 17 states, whereas Scandium old generates up to 45 in a more restricted setting.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="7.6">Severe Bugs in PionDTLS</head><p>Early Finished revisited. PionDTLS exhibits an early Finished message bug which is similar to the one found in Scandium. Obtained for a server requiring certificate authentication, PionDTLS's model <ref type="figure" target="#fig_5">(Fig. 5)</ref> captures three handshakes instead of the one expected. The two additional handshakes are an early Finished handshake and a handshake with a ChangeCipherSpec message preceding CertificateVerify (where the CertificateVerify is sent encrypted). This latter bug clearly shows that PionDTLS does not correctly validate the ordering of messages. Processing of unencrypted application data. During the analysis of the previous bug, we noticed that PionDTLS freely processed unencrypted application data delivered with epoch 0. This bug has severe consequences by allowing an attacker to inject arbitrary application data at any point once a handshake has been completed. The bug was promptly fixed once we reported our findings to the developers. HelloVerifyRequest retransmissions. PionDTLS occasionally responds to the first ClientHello message with multiple HelloVerifyRequest messages. This response is marked with HVR+ in <ref type="figure" target="#fig_5">Fig. 5</ref>. When investigating this behavior we found that PionDTLS will retransmit HelloVerifyRequest messages until a timeout elapses or it receives the second ClientHello. RFC 6347 advises against retransmitting HelloVerifyRequest <ref type="bibr">[36, p. 6]</ref>, as doing so requires the server to keep state, making it susceptible to Denial-of-Service attacks. The retransmission also enables amplification attacks, wherein an attacker sends ClientHello messages to the server with the IP address of a victim as the source address. As a result, the server will then send its replies to the spoofed source address, thus flooding the victim with HelloVerifyRequest messages.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="7.7">Invalid Handshake Start in GnuTLS</head><p>In GnuTLS 3.5.19, we detected a bug in the initial state; the implementation treated most messages as if they were ClientHello. In doing so, the server responded to them with HelloVerifyRequest and it transitioned to the next handshake state. We reported the bug to the GnuTLS developers who were able to reproduce and fix the issue.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="7.8">Security Violations &amp; Bugs in TinyDTLS</head><p>Insecure renegotiation. After performing a DTLS handshake with a TinyDTLS server, we were able to use the established encrypted connection to perform the next handshake. This process is also called renegotiation and allows the client to establish new keys for the given connection. However, it can only be safely used if the ClientHello message contains a renegotiation indication extension and the server can process it <ref type="bibr" target="#b34">[34]</ref>. Otherwise, the server may be vulnerable to an insecure renegotiation attack <ref type="bibr" target="#b34">[34]</ref>; see also CVE-2009-3555.</p><p>The ClientHello messages we used did not contain any renegotiation indication extension. Therefore, every renegotiation attempt should have been rejected by the processing server. However, this was not the case. TinyDTLS violated RFC 5746 <ref type="bibr">[34, Sect. 3.2]</ref> and was vulnerable to the insecure renegotiation attack. The real exploitability of this behavior depends on the application using the TinyDTLS library. Crashes on ChangeCipherSpec. In addition, we found that in certain states TinyDTLS E crashes on receiving ChangeCipherSpec. For example, it crashed on receiving this message in the initial state. The crashing behavior resulted in a reduction of states compared to TinyDTLS C since crashing inputs predictably lead to a single sink state. The crash was a result of a segmentation fault resulting from a null address read. This bug is a rediscovery of CVE-2017-7243, which is still unfixed in the master branch of the TinyDTLS E . From inconsistent alert to unreliable handshake protocol. By analyzing the learned model, we could observe frequent usage of Alert(DecryptError) messages. This alert is sent by TinyDTLS whenever it tries to decrypt a record (whether it is actually encrypted or not), and fails to find key material for the epoch in its internal state. This behavior is in itself rather unproblematic, but TinyDTLS also invalidates the whole connection in such a case. This can result in connections breaking unnecessarily when the ChangeCipherSpec and Finished messages are received out of order in a regular handshake. Handshake with invalid epoch numbers. The model for TinyDTLS C revealed that the server can perform the first two steps of a handshake using ClientHello messages with epoch 1 when no cipher for epoch 0 has yet been negotiated. Upon further investigation, we were able to complete the handshake by sending ClientKeyExchange, ChangeCipherSpec and Finished having the same epochs as in a normal handshake (which are 0, 0 and 1, respectively). The handshake is clearly invalid and should not have been possible to complete.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="7.9">Bugs in OpenSSL</head><p>Finished treated as retransmission. After a successful handshake completion, the OpenSSL server treats retransmitted Finished messages incorrectly. OpenSSL responds to a newly computed and transmitted Finished message by resending the last flight (ChangeCipherSpec, Finished). The Finished message received from the server has a different message sequence number and verify_data content. An adequate response would have been either to discard this message, or to send an alert and possibly terminate the connection. InternalError alerts. Alert(InternalError) is sent by OpenSSL in response to unexpected Finished messages. Internally, OpenSSL is processing the message and trying to compute the verify_data for the Finished message. However, due to defensive programming, missing parameters in the session context are discovered, the processing of the message is stopped, and an Alert(InternalError) is returned. An appropriate response should have been an alert indicating the receipt of an out-of-order message. Alert(UnexpectedMessage) has been designed for such purposes.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="7.10">Observed Code Patterns</head><p>We can conclude that in our analysis we observed several repeating code patterns, which led to the bugs and vulnerabilities. Most importantly, most of the analyzed implementations do not use proper state machines. While they attempt to verify the handshake protocol flow with simple checks in switch statements, a complete message flow validation is missing. This was, for example, observed by the analysis of the Scandium implementation, which was too liberal when it comes to the message sequence verification; only other additional checks in the code prevented further security vulnerabilities. One reason for missing state machines could be the fact the DTLS specification <ref type="bibr" target="#b36">[36]</ref> does not give a design for one. We believe that protocol standards should contain such designs and demand that implementations use them.</p><p>In the libraries implementing TLS and DTLS, we could observe that the code is re-used in both protocols. This means that similar vulnerabilities in one protocol implementation can influence the other. For example, we found the authentication bypass in JSSE by analyzing the DTLS server implementation. However, our subsequent analysis revealed that the bug is also applicable to TLS. We expect that similar behaviors will be found in the future.</p><p>Interestingly, both Scandium and PionDTLS include the same early Finished message bug that was found in JSSE TLS in 2015 <ref type="bibr" target="#b13">[13]</ref>. While this again may be attributed to missing state machine implementation, we believe that this bug is closely related to an ambiguity, which is mentioned in <ref type="bibr" target="#b36">[36]</ref>.</p><p>As with TLS, the ChangeCipherSpec message is not technically a handshake message <ref type="bibr">[...]</ref>. This creates a potential ambiguity because the order of the ChangeCipherSpec cannot be established unambiguously with respect to the handshake messages in case of message loss.</p><p>In DTLS up to version 1.2, this ambiguity has to be resolved by hard-coding the expected ChangeCipherSpec message. In the recent DTLS 1.3 drafts <ref type="bibr" target="#b16">[16]</ref>, the problem has been resolved by removing ChangeCipherSpec messages entirely.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="8">Related Work</head><p>In this section, we give a brief summary of previous work on analyses of DTLS and on state fuzzing of security protocols.</p><p>Due to the similarity with TLS, most of the attacks applicable to TLS are potentially applicable to DTLS protocol implementations as well. This includes attacks like Heartbleed <ref type="bibr" target="#b37">[37]</ref>, Bleichenbacher's attack <ref type="bibr" target="#b7">[7]</ref>, or CBC padding oracle attacks <ref type="bibr" target="#b43">[43]</ref>. One exception is the attack presented by AlFardan and Paterson in 2012, who adapted padding oracle attacks to DTLS by using novel DTLS side channels <ref type="bibr" target="#b0">[1]</ref>. The adaptation exploits subtle timing differences between processing packets with valid and invalid padding, amplified by the processing of subsequent Heartbeat messages. The attack was applicable to <ref type="bibr">OpenSSL and GnuTLS. In 2013</ref>, the same authors extended their work to a powerful attack breaking both TLS and DTLS -Lucky13 <ref type="bibr" target="#b1">[2]</ref>.</p><p>Van Drueten obtained some preliminary results on analyzing DTLS implementations using protocol state fuzzing, from which this work branched off. His thesis <ref type="bibr" target="#b42">[42]</ref> analyzed OpenSSL and mbedTLS with a limited input alphabet and did not reveal any security vulnerabilities. De Ruiter and Poll <ref type="bibr" target="#b13">[13]</ref> used protocol state fuzzing to analyze TLS implementations and found several security bugs. In comparison, the models we learn are significantly larger, due to complexity in DTLS introduced by UDP, and our inclusion of several key exchange algorithms and certificate settings. Also, as stated before, some of the bugs we found are only possible under particular configurations or are specific to DTLS.</p><p>McMahon Stone et al. <ref type="bibr" target="#b28">[28]</ref> extend state learning such that it also captures time behavior and can operate also over an unreliable communication medium. They then use the extension to analyze implementations of the 802.11 4-Way Handshake in seven Wi-Fi routers. In dealing with non-determinism, our work employs some of the same strategies, such as checking counterexamples against a cache, or using majority voting. However, it can use a more efficient learning setup, as it does not have to deal with a lossy medium and resulting timeouts. Chalupar et al. <ref type="bibr" target="#b9">[9]</ref> also had to address non-determinism of the system, though this time it was not introduced by the medium but by the system itself. In their work, a simple majority voting system was sufficient to address these issues.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="9">Conclusions and Future Work</head><p>We have presented the first protocol state fuzzing framework for DTLS. As a basis, in particular for constructing a MAPPER, we have developed a test framework for DTLS, based on TLS-Attacker. The MAPPER and test framework implement DTLS specifics including explicit sequence number, support for cookie management, and epoch numbers. In this paper, we focused on discovering state machine bugs, triggered by sequences of valid handshake messages. We did not exercise reordering and fragmentation. Nevertheless, we used our platform to generate models of thirteen widely used DTLS server implementations, and were able to find critical security vulnerabilities and implementation flaws in them.</p><p>There are several directions for future work: (i) The analysis can also explore Record Layer functionality such as fragmentation and reordering, by adding a strategy for sending reordered and fragmented records. Since these functionalities should be handled transparently by the Record Layer, we can directly use our already learned models as specifications.</p><p>(ii) Our learned models can be used to support systematic testing with invalid input messages, as is done in protocol fuzzers. (iii) Our analysis of learned models was performed manually; automation using model checking techniques should be investigated, for example, by following the methodology presented in work for TCP <ref type="bibr" target="#b18">[18]</ref> or SSH <ref type="bibr" target="#b19">[19]</ref>.</p></div><figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_0"><head>Figure 1 :</head><label>1</label><figDesc>Figure 1: DTLS handshake. Encrypted messages are inside braces. Optional messages are inside square brackets. Messages specific to DTLS are in blue.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_1"><head>Figure 2 :</head><label>2</label><figDesc>Figure 2: DTLS Learning Setup.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_2"><head>Figure 3 :</head><label>3</label><figDesc>Figure 3: Model of a GnuTLS 3.6.7 server with client certificate authentication optional. Blue edges capture the flows of regular handshakes: dashed and dashed-dotted edges indicate the handshake expected when client certificate authentication is required, respectively when it is disabled. A dotted brown edge indicates a transition leading to a handshake restart.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_3"><head></head><label></label><figDesc>According to the DTLS specification [36, Section 4.2.2], every Client- Hello starting a new handshake must have message_seq = 0. Every following handshake message has to increase the</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_4"><head>Figure 4 :</head><label>4</label><figDesc>Figure 4: Model of a JSSE 12.0.2 server with client certificate authentication required. Blue edges capture the happy flow, dotted red a handshake with an unauthenticated ClientKeyExchange message, dashed-dotted red a handshake without certificate messages, dashed red a handshake without CertificateVerify.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_5"><head>Figure 5 :</head><label>5</label><figDesc>Figure 5: Model of a PionDTLS server with client certificate authentication required. The model was reduced from 66 states to 11 by retaining only states from which a handshake can be finalized. Dotted red indicates an early Finished handshake, dashed red a handshake with a delayed CertificateVerify message.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_1" validated="true"><head>Table 2 : DTLS implementations tested. "-" means a custom program was provided. Client certificate authentication can be disabled (NONE), required (REQ) and optional (OPT). Grayed out or slanted are configurations supported by the library but not made available by the utility. For slanted configurations this support was added, which enabled testing them. Braces gather configurations explored via single learning experiments.</head><label>2</label><figDesc></figDesc><table>Name 
Version Utility 
Algorithms 
Client Cert Auth URL 

GnuTLS 
3.5.19 

gnutls-serv 

DH,ECDH,RSA,PSK 


NONE,REQ,OPT 


https://www.gnutls.org 

3.6.7 

DH,ECDH,RSA,PSK 




NONE 
,REQ 


,OPT 


JSSE 
9.0.4 
-

DH,ECDH,RSA 


NONE,REQ 


,OPT 

https://www.oracle.com/java/ 

12.0.2 

DH 
,ECDH 
,RSA 


NONE 
,REQ 


,OPT 


MbedTLS 
2.16.1 

ssl-server2 

DH,ECDH,RSA,PSK 




NONE 
,REQ 


,OPT 


https://tls.mbed.org 

NSS 
3.46 

tstclnt 

DH,ECDH,RSA 




NONE 
,REQ,OPT 

https://nss-crypto.org 

OpenSSL 
1.1.1b 

openssl s _ server DH,ECDH,RSA,PSK 





NONE 
,REQ 


,OPT 


https://www.openssl.org 

PionDTLS 
e4481fc -

ECDH 
,PSK 


NONE 
,REQ 


,OPT 


https://github.com/pion/dtls 

Scandium old c7895c6 -

ECDH 
,PSK 


NONE 
,REQ 


,OPT 


https://www.eclipse.org/californium/ 

Scandium new 6979a09 

ECDH 
,PSK 


NONE 
,REQ 


,OPT 


TinyDTLS C 
53a0d97 dtls-server 

ECDH 
,PSK 


NONE 
,REQ 


https://github.com/contiki-ng/tinydtls 

TinyDTLS E 
8414f8a dtls-server 

ECDH 
,PSK 


NONE 
,REQ 


https://github.com/eclipse/tinydtls 

WolfSSL 
4.0.0 

server 

DH,ECDH,RSA 




,PSK 


NONE 
,REQ 


,OPT 

https://www.wolfssl.com 

a valid certificate is requested (via CertificateRequest mes-
sage) and required to complete a handshake; (ii) optional: 
a valid certificate is requested but not required; and (iii) di-
sabled: a valid certificate is neither requested nor required. 
These configurations are further detailed in Section 7.1. 
</table></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_3" validated="false"><head>Table 1 .</head><label>1</label><figDesc></figDesc><table>Finally, we 
</table></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_4" validated="true"><head>Table 4 : Summary of irregular behaviors detected in the tested libraries. The message_seq column summarizes the correct usage of these numbers. indicates that the implementation finished the handshake with an invalid message_seq. The third column summarizes the cookie computation correctness.</head><label>4</label><figDesc></figDesc><table>The last column depicts whether implementations correctly 
validate the handshake message sequence. 

Library 

Validation of Cookie 
Message 
message_seq comp. 
order 
numbers 
verification 

GnuTLS 



JSSE 9.0.4 



JSSE 12.0.2 



MbedTLS 



NSS 



OpenSSL 



PionDTLS 



Scandium old 



Scandium new 



TinyDTLS 



WolfSSL 




the case for TinyDTLS; see Section 7.8. 
</table></figure>

			<note place="foot" n="1"> Available at https://github.com/assist-project/dtls-fuzzer/</note>

			<note place="foot" n="2"> These implementations are accessible via the learning setup&apos;s website.</note>

			<note place="foot" n="3"> As mentioned in Section 2, DTLS also defines explicit sequence numbers in DTLS records. In contrast to message_seq numbers located in handshake messages, an implementation can accept a DTLS record with a sequence number that was increased by more than one. This allows for accepting DTLS records after losing previous UDP packets.</note>

			<note place="foot" n="4"> It is also possible to configure Apache Tomcat with an OpenSSL engine (https://tomcat.apache.org/tomcat-9.0-doc/ssl-howto.html). This version was not affected.</note>
		</body>
		<back>

			<div type="acknowledgement">
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Acknowledgements</head><p>We would like to thank Jörg Schwenk, our shepherd Kenneth Paterson, and the anonymous reviewers for many insightful comments. We also thank Niels van Drueten for his contribution to an initial version of the test framework.</p><p>The research was established at the Lorentz Center workshop on Systematic Analysis of Security Protocol Implementations. It was partially funded by the Swedish Foundation for Strategic Research (SSF) through the aSSIsT project, the Swedish Research Council, and the Deutsche Forschungsgemeinschaft (DFG, German Research Foundation) under Germany's Excellence Strategy -EXC 2092 CASA -390781972.</p></div>
			</div>

			<div type="references">

				<listBibl>

<biblStruct xml:id="b0">
	<analytic>
		<title level="a" type="main">Plaintextrecovery attacks against Datagram TLS</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Nadhem</forename><surname>Alfardan</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Kenneth</forename><forename type="middle">G</forename><surname>Paterson</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Network and Distributed System Security Symposium, NDSS 2012</title>
		<imprint>
			<date type="published" when="2012" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b1">
	<monogr>
		<title level="m" type="main">Lucky thirteen: Breaking the TLS and DTLS record protocols</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Nadhem</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Kenneth</forename><forename type="middle">G</forename><surname>Alfardan</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Paterson</surname></persName>
		</author>
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b2">
	<monogr>
				<idno>pa- ges 526-540. IEEE</idno>
		<title level="m">2013 IEEE Symposium on Security and Privacy</title>
		<imprint>
			<date type="published" when="2013" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b3">
	<monogr>
		<title level="m" type="main">Learning regular sets from queries and counterexamples. Information and Computation</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Dana</forename><surname>Angluin</surname></persName>
		</author>
		<imprint>
			<date type="published" when="1987" />
			<biblScope unit="volume">75</biblScope>
			<biblScope unit="page" from="87" to="106" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b4">
	<analytic>
		<title level="a" type="main">DROWN: Breaking TLS using SSLv2</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Nimrod</forename><surname>Aviram</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Sebastian</forename><surname>Schinzel</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Juraj</forename><surname>Somorovsky</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Nadia</forename><surname>Heninger</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Maik</forename><surname>Dankel</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Jens</forename><surname>Steube</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Luke</forename><surname>Valenta</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">David</forename><surname>Adrian</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><forename type="middle">Alex</forename><surname>Halderman</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Viktor</forename><surname>Dukhovni</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Emilia</forename><surname>Käsper</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Shaanan</forename><surname>Cohney</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Susanne</forename><surname>Engels</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Christof</forename><surname>Paar</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Yuval</forename><surname>Shavitt</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">25th USENIX Security Symposium, USENIX Security 16</title>
		<imprint>
			<date type="published" when="2016-08" />
			<biblScope unit="page" from="689" to="706" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b5">
	<analytic>
		<title level="a" type="main">A messy state of the union: Taming the composite state machines of TLS</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Benjamin</forename><surname>Beurdouche</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Karthikeyan</forename><surname>Bhargavan</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Antoine</forename><surname>Delignat-Lavaud</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Cédric</forename><surname>Fournet</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Markulf</forename><surname>Kohlweiss</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Alfredo</forename><surname>Pironti</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Pierre-Yves</forename><surname>Strub</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Jean</forename><forename type="middle">Karim</forename><surname>Zinzindohoue</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Commun. ACM</title>
		<imprint>
			<biblScope unit="volume">60</biblScope>
			<biblScope unit="issue">2</biblScope>
			<biblScope unit="page" from="99" to="107" />
			<date type="published" when="2017-02" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b6">
	<analytic>
		<title level="a" type="main">FlexTLS: A tool for testing TLS implementations</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Benjamin</forename><surname>Beurdouche</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Antoine</forename><surname>Delignat-Lavaud</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Nadim</forename><surname>Kobeissi</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Alfredo</forename><surname>Pironti</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Karthikeyan</forename><surname>Bhargavan</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">9th USENIX Workshop on Offensive Technologies, WOOT 15. USENIX Association</title>
		<imprint>
			<date type="published" when="2015-08" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b7">
	<analytic>
		<title level="a" type="main">Chosen ciphertext attacks against protocols based on the RSA encryption standard PKCS #1</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Daniel</forename><surname>Bleichenbacher</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Advances in Cryptology -CRYPTO &apos;98</title>
		<meeting><address><addrLine>Berlin / Heidelberg</addrLine></address></meeting>
		<imprint>
			<date type="published" when="1998" />
			<biblScope unit="volume">1462</biblScope>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b8">
	<monogr>
		<title level="m" type="main">Botan: Crypto and TLS for C++11</title>
		<imprint>
			<date type="published" when="2019" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b9">
	<analytic>
		<title level="a" type="main">Automated reverse engineering using Lego R</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Georg</forename><surname>Chalupar</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Stefan</forename><surname>Peherstorfer</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Erik</forename><surname>Poll</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Joeri</forename><surname>De Ruiter</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">8th USENIX Workshop on Offensive Technologies, WOOT 14. USENIX Association</title>
		<imprint>
			<date type="published" when="2014-08" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b10">
	<analytic>
		<title level="a" type="main">Inference and analysis of formal models of botnet command and control protocols</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Domagoj</forename><surname>Chia Yuan Cho</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Babic</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 17th ACM Conference on Computer and Communications Security, CCS 2010</title>
		<meeting>the 17th ACM Conference on Computer and Communications Security, CCS 2010</meeting>
		<imprint>
			<publisher>ACM</publisher>
			<date type="published" when="2010-10" />
			<biblScope unit="page" from="426" to="439" />
		</imprint>
	</monogr>
	<note>Eui Chul Richard Shin, and Dawn Song</note>
</biblStruct>

<biblStruct xml:id="b11">
	<analytic>
		<title level="a" type="main">Testing software design modeled by finite-state machines</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Tsun</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Chow</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE Trans. Soft. Eng</title>
		<imprint>
			<biblScope unit="volume">4</biblScope>
			<biblScope unit="issue">3</biblScope>
			<biblScope unit="page" from="178" to="187" />
			<date type="published" when="1978-05" />
		</imprint>
	</monogr>
	<note>Special collection based on COMPSAC</note>
</biblStruct>

<biblStruct xml:id="b12">
	<analytic>
		<title level="a" type="main">Inferring OpenVPN state machines using protocol state fuzzing</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Lesly-Ann</forename><surname>Daniel</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Erik</forename><surname>Poll</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Joeri</forename><surname>De Ruiter</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">IEEE European Symposium on Security and Privacy</title>
		<imprint>
			<publisher>IEEE</publisher>
			<date type="published" when="2018-04" />
			<biblScope unit="page" from="11" to="19" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b13">
	<analytic>
		<title level="a" type="main">Protocol state fuzzing of TLS implementations</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Erik</forename><surname>Joeri De Ruiter</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Poll</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">24th USENIX Security Symposium</title>
		<imprint>
			<date type="published" when="2015-08" />
			<biblScope unit="page" from="193" to="206" />
		</imprint>
	</monogr>
	<note>USENIX Association</note>
</biblStruct>

<biblStruct xml:id="b14">
	<monogr>
		<title level="m" type="main">The transport layer security (TLS) protocol version 1.1. RFC 4346</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><surname>Dierks</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Eric</forename><surname>Rescorla</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2006-04" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b15">
	<monogr>
		<title level="m" type="main">The transport layer security TLS protocol version 1.2. RFC 5246</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><surname>Dierks</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Eric</forename><surname>Rescorla</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2008-08" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b16">
	<monogr>
		<title level="m" type="main">The datagram transport layer security (DTLS) protocol version 1.3 -draft-34</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">N</forename><forename type="middle">E</forename><surname>Modadugu</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">H</forename><surname>Rescorla</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Tschofenig</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2018-07" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b17">
	<monogr>
		<title level="m" type="main">Pre-shared key ciphersuites for transport layer security (TLS). RFC 4279</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><surname>Eronen</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">H</forename><surname>Tschofenig</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2005-12" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b18">
	<analytic>
		<title level="a" type="main">Combining model learning and model checking to analyze TCP implementations</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Paul</forename><surname>Fiter˘ Au-Bro¸steanbro¸stean</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Ramon</forename><surname>Janssen</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Frits</forename><forename type="middle">W</forename><surname>Vaandrager</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Computer Aided Verification -28th International Conference, CAV 2016, Proceedings, Part II</title>
		<imprint>
			<publisher>Springer</publisher>
			<date type="published" when="2016" />
			<biblScope unit="volume">9780</biblScope>
			<biblScope unit="page" from="454" to="471" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b19">
	<analytic>
		<title level="a" type="main">Model learning and model checking of SSH implementations</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Paul</forename><surname>Fiter˘ Au-Bro¸steanbro¸stean</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Toon</forename><surname>Lenaerts</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Joeri</forename><surname>De Ruiter</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Erik</forename><surname>Poll</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">W</forename><surname>Frits</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Patrick</forename><surname>Vaandrager</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Verleg</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 24th ACM SIGSOFT International SPIN Symposium on Model Checking of Software</title>
		<meeting>the 24th ACM SIGSOFT International SPIN Symposium on Model Checking of Software</meeting>
		<imprint>
			<publisher>ACM</publisher>
			<date type="published" when="2017" />
			<biblScope unit="page" from="142" to="151" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b20">
	<analytic>
		<title level="a" type="main">Test selection based on finite state models</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Susumu</forename><surname>Fujiwara</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Ferhat</forename><surname>Gregor Von Bochmann</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Mokhtar</forename><surname>Khendek</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Abderrazak</forename><surname>Amalou</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Ghedamsi</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE Trans. Soft. Eng</title>
		<imprint>
			<biblScope unit="volume">17</biblScope>
			<biblScope unit="issue">6</biblScope>
			<biblScope unit="page" from="591" to="603" />
			<date type="published" when="1991-06" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b21">
	<monogr>
		<title level="m" type="main">Foundations of Active Automata Learning: An Algorithmic Perspective</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Malte</forename><surname>Isberner</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2015" />
			<pubPlace>Germany</pubPlace>
		</imprint>
		<respStmt>
			<orgName>Technical University Dortmund</orgName>
		</respStmt>
	</monogr>
<note type="report_type">PhD thesis</note>
</biblStruct>

<biblStruct xml:id="b22">
	<analytic>
		<title level="a" type="main">The TTT algorithm: A redundancy-free approach to active automata learning</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Malte</forename><surname>Isberner</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Falk</forename><surname>Howar</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Bernhard</forename><surname>Steffen</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Runtime Verification: 5th International Conference</title>
		<imprint>
			<publisher>Springer</publisher>
			<date type="published" when="2014-09" />
			<biblScope unit="volume">8734</biblScope>
			<biblScope unit="page" from="307" to="322" />
		</imprint>
	</monogr>
	<note>RV 2014, Proceedings</note>
</biblStruct>

<biblStruct xml:id="b23">
	<analytic>
		<title level="a" type="main">The open-source LearnLib -A framework for active automata learning</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Malte</forename><surname>Isberner</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Falk</forename><surname>Howar</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Bernhard</forename><surname>Steffen</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Computer Aided Verification -27th International Conference, CAV</title>
		<imprint>
			<publisher>Springer</publisher>
			<date type="published" when="2015" />
			<biblScope unit="volume">9206</biblScope>
			<biblScope unit="page" from="487" to="495" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b24">
	<monogr>
		<title/>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Hubert</forename><surname>Kario</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Tlsfuzzer</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2018" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b25">
	<monogr>
		<title level="m" type="main">Principles and methods of testing finite state machines-a survey. Proceedings of the IEEE</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">David</forename><surname>Lee</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Mihalis</forename><surname>Yannakakis</surname></persName>
		</author>
		<imprint>
			<date type="published" when="1996" />
			<biblScope unit="volume">84</biblScope>
			<biblScope unit="page" from="1090" to="1123" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b26">
	<monogr>
		<title level="m" type="main">State of the IoT 2018: Number of IoT devices now at 7B -market accelerating</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Lueth</forename><surname>Knud Lasse</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2018-08" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b27">
	<monogr>
		<title level="m" type="main">Compact Embedded SSL/TLS stack</title>
		<imprint>
			<date type="published" when="2019" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b28">
	<analytic>
		<title level="a" type="main">Extending automated protocol state learning for the 802.11 4-way handshake</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Chris</forename><forename type="middle">Mcmahon</forename><surname>Stone</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Tom</forename><surname>Chothia</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Joeri</forename><surname>De Ruiter</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Computer Security</title>
		<meeting><address><addrLine>Cham</addrLine></address></meeting>
		<imprint>
			<publisher>Springer International Publishing</publisher>
			<date type="published" when="2018-08" />
			<biblScope unit="volume">11098</biblScope>
			<biblScope unit="page" from="325" to="345" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b29">
	<analytic>
		<title level="a" type="main">The design and implementation of Datagram TLS</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Nagendra</forename><surname>Modadugu</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Eric</forename><surname>Rescorla</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the Network and Distributed System Security Symposium</title>
		<meeting>the Network and Distributed System Security Symposium</meeting>
		<imprint>
			<date type="published" when="2004" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b30">
	<monogr>
		<title level="m" type="main">This POODLE bites: exploiting the SSL 3.0 fallback</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Bodo</forename><surname>Möller</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Thai</forename><surname>Duong</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Krzysztof</forename><surname>Kotowicz</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2014" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b31">
	<monogr>
		<title/>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Thomas</forename><surname>Pornin</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Boarssl</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2017" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b32">
	<analytic>
		<title level="a" type="main">Dynamic testing via automata learning</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Harald</forename><surname>Raffelt</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Maik</forename><surname>Merten</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Bernhard</forename><surname>Steffen</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Tiziana</forename><surname>Margaria</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">STTT</title>
		<imprint>
			<biblScope unit="volume">11</biblScope>
			<biblScope unit="issue">4</biblScope>
			<biblScope unit="page" from="307" to="324" />
			<date type="published" when="2009" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b33">
	<monogr>
				<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Abdullah</forename><surname>Rasool</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Greg</forename><surname>Alpár</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Joeri</forename><surname>De Ruiter</surname></persName>
		</author>
		<idno type="arXiv">arXiv:1903.04384</idno>
		<title level="m">State machine inference of QUIC</title>
		<imprint>
			<date type="published" when="2019" />
		</imprint>
	</monogr>
<note type="report_type">arXiv preprint</note>
</biblStruct>

<biblStruct xml:id="b34">
	<analytic>
		<title level="a" type="main">Transport layer security (TLS) renegotiation indication extension</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">E</forename><surname>Rescorla</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Ray</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Dispensa</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">N</forename><surname>Oskov</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">RFC</title>
		<imprint>
			<biblScope unit="volume">5746</biblScope>
			<date type="published" when="2010-02" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b35">
	<analytic>
		<title level="a" type="main">Datagram transport layer security</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Eric</forename><surname>Rescorla</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Nagendra</forename><surname>Modadugu</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">RFC</title>
		<imprint>
			<biblScope unit="volume">4347</biblScope>
			<date type="published" when="2006-04" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b36">
	<monogr>
		<title level="m" type="main">Datagram transport layer security version 1.2. RFC 6347</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Eric</forename><surname>Rescorla</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Nagendra</forename><surname>Modadugu</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2012-01" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b37">
	<monogr>
		<title/>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Antti</forename><surname>Riku</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Matti</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Neel</forename><surname>Mehta</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Cve</forename><surname>Heartbleed</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2014" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b38">
	<monogr>
		<title level="m" type="main">The constrained application protocol (CoAP). RFC 7252</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Zach</forename><surname>Shelby</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Klaus</forename><surname>Hartke</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Carsten</forename><surname>Bormann</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2014-06" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b39">
	<analytic>
		<title level="a" type="main">Systematic fuzzing and testing of TLS libraries</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Juraj</forename><surname>Somorovsky</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 2016 ACM SIGSAC Conference on Computer and Communications Security, CCS &apos;16</title>
		<meeting>the 2016 ACM SIGSAC Conference on Computer and Communications Security, CCS &apos;16<address><addrLine>New York, NY, USA</addrLine></address></meeting>
		<imprint>
			<publisher>ACM</publisher>
			<date type="published" when="2016" />
			<biblScope unit="page" from="1492" to="1504" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b40">
	<analytic>
		<title level="a" type="main">Model-based testing IoT communication via active automata learning</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Martin</forename><surname>Tappler</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Bernhard</forename><forename type="middle">K</forename><surname>Aichernig</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Roderick</forename><surname>Bloem</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Software Testing, Verification and Validation</title>
		<imprint>
			<publisher>IEEE Computer Society</publisher>
			<date type="published" when="2017-03" />
			<biblScope unit="page" from="276" to="287" />
		</imprint>
	</monogr>
	<note>IEEE International Conference on</note>
</biblStruct>

<biblStruct xml:id="b41">
	<analytic>
		<title level="a" type="main">Model learning</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">W</forename><surname>Frits</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Vaandrager</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Commun. ACM</title>
		<imprint>
			<biblScope unit="volume">60</biblScope>
			<biblScope unit="issue">2</biblScope>
			<biblScope unit="page" from="86" to="95" />
			<date type="published" when="2017" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b42">
	<monogr>
		<title level="m" type="main">Security analysis of DTLS 1.2 implementations</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Niels</forename><surname>Van Drueten</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2019" />
			<pubPlace>Nijmegen, The Netherlands</pubPlace>
		</imprint>
		<respStmt>
			<orgName>Radboud University</orgName>
		</respStmt>
	</monogr>
<note type="report_type">Bachelor thesis</note>
</biblStruct>

<biblStruct xml:id="b43">
	<analytic>
		<title level="a" type="main">Security flaws induced by CBC padding -applications to SSL</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Serge</forename><surname>Vaudenay</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">;</forename><surname>Ipsec</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Wtls</forename></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Advances in Cryptology -EUROCRYPT 2002</title>
		<meeting><address><addrLine>Berlin / Heidelberg</addrLine></address></meeting>
		<imprint>
			<date type="published" when="2002-04" />
			<biblScope unit="volume">2332</biblScope>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b44">
	<analytic>
		<title level="a" type="main">Analysis of the SSL 3.0 protocol</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">David</forename><surname>Wagner</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Bruce</forename><surname>Schneier</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 2nd USENIX Workshop on Electronic Commerce</title>
		<meeting>the 2nd USENIX Workshop on Electronic Commerce<address><addrLine>Berkeley, CA, USA</addrLine></address></meeting>
		<imprint>
			<publisher>USENIX Association</publisher>
			<date type="published" when="1996" />
			<biblScope unit="page" from="29" to="40" />
		</imprint>
	</monogr>
</biblStruct>

				</listBibl>
			</div>
		</back>
	</text>
</TEI>
