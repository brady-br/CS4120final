<?xml version="1.0" encoding="UTF-8"?>
<TEI xmlns="http://www.tei-c.org/ns/1.0" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
xsi:schemaLocation="http://www.tei-c.org/ns/1.0 /Users/atharsefid/Desktop/grobid-0.5.3/grobid-home/schemas/xsd/Grobid.xsd"
 xmlns:xlink="http://www.w3.org/1999/xlink">
	<teiHeader xml:lang="en">
		<encodingDesc>
			<appInfo>
				<application version="0.5.3" ident="GROBID" when="2020-09-29T02:54+0000">
					<ref target="https://github.com/kermitt2/grobid">GROBID - A machine learning software for extracting information from scholarly documents</ref>
				</application>
			</appInfo>
		</encodingDesc>
		<fileDesc>
			<titleStmt>
				<title level="a" type="main">Durability Semantics for Lock-based Multithreaded Programs</title>
			</titleStmt>
			<publicationStmt>
				<publisher/>
				<availability status="unknown"><licence/></availability>
			</publicationStmt>
			<sourceDesc>
				<biblStruct>
					<analytic>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Dhruva</forename><forename type="middle">R</forename><surname>Chakrabarti</surname></persName>
							<email>dhruva.chakrabarti@hp.com</email>
							<affiliation key="aff0">
								<orgName type="laboratory">Hewlett-Packard Laboratories</orgName>
								<orgName type="institution">Hewlett-Packard Laboratories</orgName>
								<address>
									<country>USA, USA</country>
								</address>
							</affiliation>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Hans-J</forename><surname>Boehm</surname></persName>
							<email>hans.boehm@hp.com</email>
							<affiliation key="aff0">
								<orgName type="laboratory">Hewlett-Packard Laboratories</orgName>
								<orgName type="institution">Hewlett-Packard Laboratories</orgName>
								<address>
									<country>USA, USA</country>
								</address>
							</affiliation>
						</author>
						<title level="a" type="main">Durability Semantics for Lock-based Multithreaded Programs</title>
					</analytic>
					<monogr>
						<imprint>
							<date/>
						</imprint>
					</monogr>
				</biblStruct>
			</sourceDesc>
		</fileDesc>
		<profileDesc>
			<abstract>
				<p>Non-volatile storage connected as memory (NVRAM) offers promising opportunities for simplifying and accelerating manipulation of persistent data. Load and store latency is potentially comparable to that of ordinary memory. The challenge is to ensure that the persisted data remains consistent if a failure occurs during execution , especially in a multithreaded programming environment. In this paper, we provide semantics for identifying a globally consistent state for a lock-based multi-threaded program. We show how to conveniently ensure that programs are returned to such a globally consistent state after a crash. We discuss challenges and opportunities along the way, and explain why adding durability to transactional programs may be less expensive.</p>
			</abstract>
		</profileDesc>
	</teiHeader>
	<text xml:lang="en">
		<body>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="1">Introduction</head><p>Applications that need to take advantage of the parallelism available on modern multicore computers are most commonly written using threads and locks. This programming model, though low-level and often errorprone, is well-established, and quite general.</p><p>Transactional memory (TM) <ref type="bibr" target="#b7">[9,</ref><ref type="bibr" target="#b14">16]</ref> attempts to raise the abstraction level by borrowing the idea of transactions from databases and incorporating them into parallel programs. A program transaction is a block of code that appears to execute indivisibly. A programmer is only required to specify the code that should be part of the block thus transferring the onus of synchronizing shared memory references to the implementation. This simplifies the construction of modular parallel programs.</p><p>New non-volatile memory (NVRAM) technologies such as memristors <ref type="bibr" target="#b13">[15]</ref> and phase change memory (PCM) <ref type="bibr" target="#b8">[10]</ref> provide an interesting twist to programming since they allow CPU stores to persist data directly at DRAM-like speed. Data in NVRAM lives beyond the lifetime of the creating process. The programmer is able to persist data reliably through CPU store instructions and retrieve them using CPU load instructions. This model removes the frequent need to maintain both an in-memory object format and a separate persistent file format, together with the substantial amounts of code needed to keep them consistent. Data structures persist in NVRAM as they are created and modified and the evolved state can be reused when an application is restarted. But since hardware and software failures cannot be ignored, this model requires that it be possible to identify and persist program states that are consistent and this is no easy task for multithreaded programs.</p><p>Transactional memory (TM), as the name suggests, differs from database transactions in that it stores data in (volatile) memory as opposed to a durable medium such as a hard disk. Consequently, TM provides Atomicity, Consistency, and Isolation (ACI) but no durability. However, recent work explored adding durability to TM in the context of <ref type="bibr">NVRAM and Flash [8, 18, 13]</ref>.</p><p>Durable TM is clearly a very attractive model for NVRAM. But TM, even in its original form, has at this point not been widely adopted. Aside from performance issues, there is a non-trivial effort required to convert lockbased programs to ones based on TM <ref type="bibr" target="#b4">[6]</ref>. Additionally, some constructs, such as condition wait, arguably do not lend themselves well to the TM paradigm. Consequently, lock-based multithreaded programs will continue to be popular even when TM is adopted. As a confirmation of this trend, the draft specification of TM constructs for C++ <ref type="bibr" target="#b14">[16]</ref> requires the co-existence of locks with transactions.</p><p>So, to take advantage of NVRAM-based data reuse in general multithreaded programs, durability semantics should be added to lock-based programs. But durable data has to be consistent as well, otherwise it is not reusable. Data structures mutated by lock-based programs are trivially consistent at normal program termination. However, this is not adequate in the presence of NVRAM once failures are taken into consideration. We need some guarantee that data structures are consistent, even if a failure occurs at an inopportune moment of execution. Currently there is no well-established notion of what this means or how to achieve it. In the absence of NVRAM, it does not matter. But the emergence of NVRAM changes the fundamental assumptions and opens up new opportunities if we can capture intermediate consistent states.</p><p>This paper explores appropriate semantics that would be required for lock-based programs in the context of NVRAM and sketches an implementation route. Section 2 presents our programming model and elaborates on the properties we want. Section 3 presents results obtained while persisting data structures in a PARSEC <ref type="bibr" target="#b3">[5]</ref> kernel and a widely used caching system. The goal is to understand the overheads and any effects on scalability. We then present some related work and conclude.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2">System Assumptions and Programming Model</head><p>NVRAM devices are expected to be connected as memory and accessed using regular CPU loads and stores. The result is fast persistence of program objects. Potentially in-memory data structures that are already maintained by the application can be reused directly. But even in the presence of NVRAM, there will be volatile buffers and caches in the memory hierarchy, simply because of the performance advantages they provide. This implies that during program execution, some of the state may reside in volatile structures and the rest in NVRAM. Low-level interfaces such as memory fences and cache-line flushes can be used to ensure that certain data is forced out of volatile structures and into NVRAM at appropriate program points. In our programming model, programmers use containers called persistent regions (PR) <ref type="bibr" target="#b1">[3,</ref><ref type="bibr" target="#b16">18,</ref><ref type="bibr" target="#b6">8]</ref> for identifying persistent data. A PR consists of an identifier and a list of contiguous virtual address ranges. Every PR has at least one entry point called a root. A root stores the start address of a set of connected persistent objects. A root of a PR lives within that PR and is hence persistent; it provides a way to traverse the set of connected objects reachable from it <ref type="bibr" target="#b0">1</ref> . In a quiescent state (such as the one reached at successful program termination or immediately after a failure), any data within a PR that is not reachable from any of its roots is assumed to be garbage and reclaimed. Data not in a PR is considered logically transient.</p><p>We assume a fail-stop or crash-recovery model. Program state in persistent regions survives a tolerated fail-1 A program traversing a PR needs to know the layout of objects within it, e.g. by including a header file that describes the objects.  <ref type="bibr">2</ref> other program state does not. After a failure, persistent regions should contain a consistent program state, which can be used to recover the data when the application is restarted. This state must be consistent in spite of the fact that contents of machine registers, caches, and DRAM memory regions have disappeared.</p><p>Applications will normally be structured as in <ref type="figure" target="#fig_0">Fig- ure 1</ref>. Data within a PR is allocated by using a special malloc-like interface that maps NVRAM physical pages directly onto the address space of a process. The programmer adds restart code that runs when an application starts and detects whether a prior data structure version is already available in NVRAM. Proper use of consistency mechanisms ensures that if a data structure exists, then it is consistent; this property enables restart from an evolved state, leading to saved computation, and potentially avoiding loss of data, such as user input, read by the application.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.1">Treating unlocked program points as consistent</head><p>Program data structures must satisfy invariants that hold in consistent states. Programs that are written using atomic sections (or transactions) <ref type="bibr" target="#b7">[9]</ref>, as opposed to locks, typically mutate these data structures and temporarily violate invariants only within those sections -so the invariants hold at the start and end of every (outermost) atomic section as well.</p><p>Existing lock-based applications generally satisfy a similar property. They also already indicate when important data structures are in a consistent state. In order to ensure thread-safety, they acquire locks to form critical sections (CS) in which data structures are modified and thus temporarily inconsistent. This is typically required to ensure the absence of data races. <ref type="bibr" target="#b1">3</ref> As in the transactional case, we assume that data structures are inconsistent only in critical sections, and hence treat lock operations as indicators of consistent program points. We will call program points at which the executing thread holds no locks thread-consistent. If no locks are held by any thread, all data structures should be in a consistent state. This assumption doesn't hold, for example, if the client implements its own mutexes on top of the system-provided ones. At that point we no longer recognize critical sections, and thus no longer guarantee consistency in spite of the absence of data races. Programmer-inserted annotations, indicating the appropriate synchronization operations, may be helpful in that context.</p><p>Our assumption above is mildly restrictive, and it may take some programmer effort to ensure that it holds. For example, data accessed by only a single thread will typically not be protected by a lock, and thus may be inconsistent outside of a critical section. This can be addressed by introducing a "dummy" critical section around such updates, or by introducing an additional language construct for such dummy critical sections.</p><p>The durability semantics of critical sections differ from the transactional case for two primary reasons: Locks do not necessarily nest perfectly, and the semantics of nested critical sections are very different from simply ignoring the inner critical section. We will see in the next sections that neither inhibits the approach, though the latter does add significant implementation expense over the transactional case.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.2">Outermost critical sections are failureatomic</head><p>What is the unit of durability of a lock-based program? Consider a dynamic execution trace A 1 A 2 ...A n of a single thread t, where A i refers to an instruction executed. A section of this trace comprising A i ...A j forms an outermost critical section (OCS) if the following hold:</p><p>• The point just before A i is thread-consistent, i.e. t holds no locks there.</p><p>• A i acquires a lock.</p><p>• A j releases a lock, not necessarily the one acquired in A i .</p><p>• The point after A j is again thread-consistent.</p><p>Thus, in the above trace, two dynamically occurring thread-consistent program points are separated by (and adjacent to) an OCS. Locks do not have to nest perfectly for an OCS to be identified. For example, hand-over-hand existing concurrent execution hazards caused by data races.</p><p>x, y are persistent and initially x=y=0 T1 locking poses no problem. We ensure that each OCS is failure atomic: If any updates performed within an OCS are visible after a failure, then all of them will be. We do not treat the point after a non-OCS critical section as thread-consistent, since updates of invariants may be in progress in an outer one. It may often be the case that invariants that matter are indeed maintained at boundaries or even within arbitrary critical sections, but there is no way to automatically verify that -we believe that identifying an OCS as the unit of failure-atomicity provides a conservative abstraction that allows persisting consistent data without any additional effort on the part of the programmer. Providing failure-atomicity for critical sections at a finer granularity appears to be intractable since the association between a shared datum and the corresponding protecting lock cannot be automatically inferred in the general case.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.3">Persistence of one outermost critical section may depend on another</head><p>Semantics of nested critical sections are different from those of nested atomic sections. While isolation is implicit at the granularity of individual critical sections, we are providing durability or failure-atomicity at the OCS-granularity (Section 2.2), an apparent mismatch. It follows that even if updates within an inner CS (say C) within a given OCS are exposed to another thread, those updates within the inner CS may have to be rolled back if for some reason the corresponding OCS fails to complete or has to be rolled back. If that happens, any update of a persistent location, dependent on a change made by C and executed by another thread, must also be rolled back.</p><p>These cross-thread constraints should be identified by the underlying implementation. Note that our model preserves the pessimistic nature of lock-based programs, so any roll-back happens only during recovery after abnormal program termination, unlike the transactional model. Consider the program in <ref type="figure" target="#fig_1">figure 2</ref> with 2 threads, T1 and T2. There are 2 OCSes: o 1 in lines 1-3 in T1 and o 2 in lines 4-10 in T2. Consider the indicated dynamic interleaving where o 1 executes in full between the statements in lines 7 and 9. However, if the program crashes after o 1 has completed but before T2 can finish executing line 9, some of the updates in T2 may be incomplete. By the reasoning in Section 2.2, T2 has to be failure-atomic and hence the update in line 6 must not be visible in persistent memory. In order to preserve a globally consistent state in persistent memory, the effects of updates made to persistent locations in o 1 must not be visible eitherotherwise, after recovery, the persistent state will have values (x=0, y=1) that cannot be obtained in a failurefree execution. This constraint arises because there is a happens-before (hb) dependency, in the sense of e.g. <ref type="bibr" target="#b9">[11]</ref> or <ref type="bibr" target="#b5">[7]</ref>, between o 2 and o 1 .</p><p>An OCS o 1 dynamically happens before another OCS o 2 if there is a release operation in o 1 that happens before an acquire operation in o 2 . It follows that, if one OCS dynamically happens before another, the effects of the latter are visible in persistent memory only if the effects of the former are. Two concurrently executing OCSes may each depend on the results of inner critical sections in the other, resulting in a cyclic hb-relation among OCSes -in such a case, the effects of all of the constituent OCSes must be visible in NVRAM if the effects of any one of them are. We believe that these are the right properties to maintain after crash recovery since they are the ones a newly created thread, playing by the proper synchronization rules, usually relies on.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.4">Relationship to ACID semantics</head><p>Comparison of our proposed semantics to transactional ACID semantics is unavoidable. We do not change any of the ACI semantics of a CS or an OCS in any way. Updates to shared locations are exposed to threads exactly as before. Isolation is provided by holding locks and it remains the responsibility of the programmer to follow proper synchronization disciplines. Consistency tends to be a function of the application and we do not change that. However, the data visible in NVRAM after a restart may be a conservative approximation of what the programmer intended, but should preserve consistency.</p><p>The only semantics we add is failure-atomicity or durability, but only at the level of an OCS and only for memory locations that are persistent, i.e. those within a PR. There is no change in privatization and publication semantics as far as thread visibility is concerned. We add publication safety for durability: If the effects of an OCS are visible in NVRAM after a failure, then the effects of all updates to persistent data appearing before that OCS (including those at thread-consistent points) must also appear to be visible in NVRAM. Since OCSes become persistent atomically, a similar guarantee implicitly holds for all critical sections. Publication safety has its costs that are discussed in more detail in Section 2.7.2.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.5">What about I/O operations?</head><p>In order to support our durability model for lock-based programs, it should be possible to buffer an I/O operation in case it needs to be rolled back. This may be achieved by reflecting the semantics of I/O operations in NVRAM and playing them in the current order at an appropriate time. I/O in a transactional setting is a sticky issue <ref type="bibr" target="#b15">[17]</ref> and our situation is no different.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.6">Sketch of an implementation</head><p>We log writes to persistent memory locations as well as happens-before relations between synchronization operations. Capturing happens-before relations between lock releases and acquires is sufficient to maintain the necessary dependences between OCSes. The logs are kept in NVRAM so that in the event of a crash, the recovery phase has enough information to reconstruct a consistent state of the persistent data according to the properties outlined in Sections 2.2 and 2.3. Memory fences and cache line flushes at appropriate program points are added automatically to ensure that the log is failure-resilient and can be relied on after a crash. Depending on the dynamic program state and its consistency properties, unnecessary log entries are removed.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.7">Pitfalls, optimizations</head><p>2.7.1 hb-relationships of all synchronization operations must be captured</p><p>In our model, all lock acquires and releases must be analyzed for dynamic happens-before relations, including those for critical sections not containing any updates to persistent memory. <ref type="figure" target="#fig_2">Figure 3</ref> illustrates such a scenario. We have numbered the lines and labeled the 4 OCSes with the letters a through d. Since a hb-relation (induced by synchronizing on l1) must exist from the write to x in line 14 (T1) to any read from x in line 5 (T0), there are no data races in the program. For the purpose of this example, assume that ready is a transient flag, so OCS a and OCS c do not update any persistent data. We assert that, in spite of that, the appropriate hb-relation between such OCSes needs to be captured. Consider the interleaved execution: lines 21-24 (T2), lines 11-17 (T1), lines 1-5 (T0), followed by a program crash. If all hb-relations are captured, OCS d hb OCS b hb OCS c hb OCS a. On recovery, OCS d will be rolled back and since OCSes a-c transitively depend on OCS d, all persistent updates in <ref type="figure" target="#fig_2">Figure 3</ref> will be rolled back and the resulting snapshot in NVRAM will be rendered consistent. But if only hbrelations among OCSes containing updates to persistent locations were captured (i.e. OCS d hb OCS b) for failureatomicity purposes, OCS a will not be rolled back. This implies that the update to y on line 5 will not be rolled back either leading to an inconsistent state (y = 1, with other persistent variables zero) in NVRAM, something that cannot be obtained in a failure-free execution. As <ref type="figure" target="#fig_2">figure 3</ref> shows, hb-relations between references to persistent locations is often imposed by synchronizing through critical sections that contain references to only transient data. This requires that all synchronization operations be tracked for hb-relations. Note that the situation is different for transactional programs, potentially leading to performance tradeoffs. The effects of updates within an atomic section can be made durable atomically along with the commit. Consequently, the effects of a committed atomic section never need rolling back. In contrast, the effects of a completed OCS may be rolled back during recovery if, for example, the program crashes during execution of another OCS that happens before it (see Section 2.3). To ensure precise identification of such OCSes that need rolling back, explicit happensbefore relations must be maintained in lock-based programs, unlike transactional ones.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.7.2">Optimizations for thread-consistent updates</head><p>Unlike atomic sections that provide ACID transactional guarantees, a cross-thread hb-relation may stem from a lock release operation that is dynamically within an OCS. The OCS may expose effects of updates to other threads by releasing a lock before the OCS is finished. Consequently, as we saw in earlier sections, the effects of a completed OCS may have to be rolled back if another OCS executed by another thread, that it depends on, can be rolled back. Consider <ref type="figure" target="#fig_2">Figure 3</ref> again with the same interleaving discussed earlier. If OCS d can be rolled back, all the other OCSes have to be rolled back as well. This requires that the effects of updates in lines 5 and 14 be rolled back as well.</p><p>Further analysis can be used to determine whether logging can be elided for an update to a persistent location outside an OCS such as those in lines 5 and 14: <ref type="bibr" target="#b2">4</ref> If an OCS o 1 in thread T1 dynamically happens before another another OCS o 2 in thread T2, then any write to a persistent location, executed by T2 outside an OCS and executed after o 2 in program order, will have to be logged unless it can be proved that o 1 cannot be rolled back. Generally speaking, an OCS cannot be rolled back if it has completed and every OCS that happens before it has completed successfully. As an example, the above condition would determine that, for the interleaving considered earlier in <ref type="figure" target="#fig_2">Figure 3</ref>, the updates in lines 5 and 14 will have to be logged. But for another interleaving such as lines 21-25, 11-13, line 26, lines 14-17, lines 1-5, the updates in lines 5 and 14 do not have to be logged. We believe that this optimization may be very effective in drastically reducing the overhead of logging in many applications where many updates to persistent locations happen outside OCSes. This is another scenario where the performance tradeoffs are different for lock-based and transactional programs. Since a committed transaction never needs rolling back, any non-transactional update to a persistent location does not need to be logged 5 . However, that may not be the case for lock-based programs and even when such logging can be elided, it is based on dynamic checking (as outlined above) which has its own cost.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3">Initial experimental results</head></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.1">Methodology</head><p>We developed a prototype implementation of a persistent memory manager, a logging infrastructure, a consistency and recovery manager, and compiler support for inserting calls to the relevant runtime libraries. In order to take advantage of NVRAM durability, a program needs to create a PR and use a special allocator to add data to a PR. The rest is programmer-oblivious with the compiler automatically inserting instrumentation for synchronization operations and updates to persistent locations and the runtime creating and manipulating logs to ensure consistency.</p><p>DRAM was used for simulating NVRAM since their access latencies are expected to be comparable. Linux tmpfs <ref type="bibr" target="#b12">[14]</ref> was used for "persisting" data and logs. Although data on tmpfs does not persist past a system shutdown, it otherwise provides a directly mapped, byteaddressable persistent (across process shutdowns) memory. We successfully performed crash-recovery testing of these programs but a more extensive testbed is required for full correctness testing. All experiments were performed on a Red Hat Linux Intel(R) quad-core Xeon(R) E7330 machine with 4 sockets running at 2.4GHz. Results are averages over 3 runs.</p><p>In general, we found that NVRAM-based programs using our consistency model are 2 to 3 orders of magnitude faster than programs persisting data on disks through mmap. However, this depends on the workload and the amount of data persisted. Keeping the above number as context, our goal is to understand the cost of adding durability to a program that starts off with transient data structures. To this end, we report results for 2 programs. For both, we show that our model is useful by enabling transitions from one consistent state to another. In addition, we present runtimes for 4 configurationsorig: the original program that uses transient data structures, nvram: the persistent version, nvram noflush: the persistent version without cache line flushes, and nvram noflush opt: same as the previous but with the optimization from Section 2.7.2 applied. The 3 rd and 4 th configurations primarily indicate the cost of logging and consistency maintenance for enforcing failure-atomicity of lock-based code; more elaborate description of the cost of flushing processor caches is outside the scope of this paper and is discussed elsewhere <ref type="bibr" target="#b2">[4]</ref>. In addition, note that optimizations that reduce the cost of logging and cache flushing are likely as our implementation and NVRAM hardware evolve.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.2">Persisting the hash table of a deduplication benchmark</head><p>We added durability support to dedup, a deduplication kernel that is part of PARSEC 1.0 <ref type="bibr" target="#b3">[5]</ref>. This program removes duplicate chunks of repeating data, mimicking compression techniques used in backup storage systems. The program breaks the input stream into chunks that are processed in parallel in a pipelined fashion. A number of stages are employed where each stage fetches items from its queue, processes the items, and puts them in the queue for the next stage. We focus on the stage that computes a hash value for a unique chunk and builds a global database of chunks indexed with the hash values.</p><p>We take the central hashtable data structure in dedup and make it durable in NVRAM. It is useful to have a persistent version of the hashtable since it acts as a cache of the unique key-value pairs and would enable a quick restart in the event of a server crash. We examined a number of synchronized regions to ensure that they conformed to the model we described in this paper. All of them did. For example, the routine ChunkProcess computes the hash of a chunk, acquires a lock for the corresponding hashtable bucket, and performs one of the following while holding the above lock. If it is a cache miss, the unique key is inserted into the hashtable and a corresponding item is inserted into the queue for the compress thread. If it is a cache hit, the existing hashtable metadata is updated and a corresponding item is inserted into the queue for the write thread. Since the queues are multithreaded as well, the enqueue operation acquires a queue-specific lock leading to an outer critical section (OCS) with an inner critical section. Using OCS boundaries for globally consistent states ensures that both the hashtable and the relevant queue are properly updated. Running dedup using the input simlarge, we found (at a thread count of 4) 260K OCSes and 4K inner critical sections dynamically. 900K stores to persistent locations were tracked out of which 857K were inside OCSes. 1.4M log entries were created. <ref type="figure" target="#fig_3">Figure 4</ref> shows the runtimes for different thread counts for the above input. Persisting data structures in a consistent, reusable manner is useful but does not come for free. At a thread count of 4, the NVRAM version is 63% slower than the transient version. If we ignore cache flushing 6 , this number drops to 46%. As stores outside OCSes need not be tracked for this workload, the overhead drops further to 33%. In spite of the overheads, dedup continues to scale.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.3">A persistent version of memcached</head><p>Memcached <ref type="bibr" target="#b0">[1]</ref> is a main memory key-value cache used in cloud and web workloads. It is typically used by frontend services to cache key-value pairs so that expensive trips to the back-end databases are minimized. In the current incarnation, the cache is transient; so all of the cached information is lost in the event of a failure. But it would be nice to have the cache available across system restarts. Though the current architecture of memcached would have to change to accommodate a persistent cache <ref type="bibr" target="#b5">7</ref> , we explored the adequacy of our model for the existing codebase.</p><p>Memcached has a few key data structures. There is a hashtable for the key-value pairs. There are least recently used (LRU) lists (heads and tails) to determine eviction order from the cache when it is full. A slab-allocation based memory manager is used for efficiency purposes. We persist all of the above data structures. In addition to the cache, persisting the LRU lists and the slab allocator information allow maintenance of eviction order and memory management information across server crashes.</p><p>While manipulating the hash table entries or the LRU lists, memcached always holds a global cache lock. At the boundaries of the resulting critical sections, the program state is always consistent. During some operations in slab management, the global cache lock and a global slab lock are held leading to an OCS with an inner CS. Like before, data structures are kept consistent at OCS boundaries.</p><p>We collected results by starting memcached with 4 threads and performing a series of sets and gets. Statistics showed that 4M OCSes and 600K inner critical sections were executed dynamically. 22M stores to persistent locations were tracked and 3M of them were inside OCSes. 30M log entries were created. The transient original version finished in 17 seconds. The nvram version took 55 seconds, i.e. 3.2x time as the original. Ignoring the cache flushes, the time dropped to 38 seconds, or 2.2x. Optimizing logging for persistent stores outside OCSes brings down the time to 28 seconds, or 1.6x. We expect that further tuning of our code will reduce logging overhead further.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.4">Summary of results</head><p>We showed that providing failure-atomicity for lockbased programs helps persist a consistent snapshot that is reusable. This property does not come for free but the overheads need not be prohibitive either. There are some fundamental challenges such as tracking changes and getting the updates out of volatile buffers and caches; our initial results provide an idea of the costs but we believe substantial optimizations are possible. If logging can be eliminated outside critical sections, data can be made durable more efficiently. But this can only be done <ref type="bibr" target="#b5">7</ref> Depending on the use case, an old cache may cause problems. But a persistent cache does have benefits. See the section titled Persistent Storage in <ref type="bibr">[2]</ref>. based on dynamic analysis for general lock-based programs. <ref type="bibr" target="#b6">8</ref> The situation is different for atomic sections where committed updates need not be undone, indicating that atomic-section-based programs may provide durability more efficiently than their lock-based counterparts.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4">Related work</head><p>Transparent user-level checkpointing of the entire process state has been explored <ref type="bibr" target="#b10">[12]</ref>. The model is different from ours; it does allow a more transparent application restart, at the expense of what appear to be substantial open implementation challenges, and probably tolerance for a reduced set of failures. For example, we expect that our approach will tolerate a significant set of software failures, though clearly not all of them.</p><p>Systems such as Mnemosyne <ref type="bibr" target="#b16">[18]</ref> and NV-heaps <ref type="bibr" target="#b6">[8]</ref> built consistency mechanisms on top of persistent regions and durable transactions. Our work aims to provide similar semantic guarantees for lock-based programs. The problem of providing meaningful semantics for safe re-execution of multithreaded programs has been looked at earlier <ref type="bibr" target="#b17">[19]</ref>. A checkpointing mechanism was developed for Concurrent ML using a language abstraction called stabilizers. In contrast, our technique provides failure-atomic semantics that lead to a globally consistent state and all of this is done without any annotations from the programmer. In general, it appears to us that using constructs like stabilizers can be error-prone without global knowledge of the dynamic nature of the program.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5">Conclusions</head><p>We explored failure-atomic semantics for lock-based programs. We showed how that can be used to reason about a globally consistent snapshot that can in turn be used for persisting consistent states. This has a significant impact on programming with non-volatile memory. We implemented a prototype and presented initial results that show the viability of our approach in addition to pointing out overheads in the system.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="6">Acknowledgments</head><p>This work benefited from discussions with many people including Pramod Joisha and Prith Banerjee. Comments from the anonymous reviewers on an earlier version helped improve the paper.</p></div><figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_0"><head>Figure 1 :</head><label>1</label><figDesc>Figure 1: Structure of an NVRAM Program</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_1"><head>Figure 2 :</head><label>2</label><figDesc>Figure 2: An example program: Outermost critical sections are failure-atomic and can have happens-before relations among them.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_2"><head>Figure 3 :</head><label>3</label><figDesc>Figure 3: Example showing why all hb-relations must be tracked: Happens-before relations between references to persistent locations are often imposed by synchronizing through critical sections that contain references to only transient data.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_3"><head>Figure 4 :</head><label>4</label><figDesc>Figure 4: Cost of adding durability to dedup</figDesc></figure>

			<note place="foot" n="2"> We assume that the hardware defines the notion of &quot;tolerated failure&quot;, and that it includes at least power failures. Clearly some failures, e.g. a direct hit by a large meteorite, are not tolerated. 3 Our technique, like the underlying programming language, expects the input program to be free of data races. In the presence of data races, the program state identified as consistent may not be what the programmer intended. We expect the consequences to be similar to the</note>

			<note place="foot" n="4"> All updates to persistent locations within OCSes have to be invariably logged, identical to updates within ACID transactions. 5 A non-transactional update may still have to be flushed out of cache.</note>

			<note place="foot" n="6"> Cost of cache flushing cannot be ignored but will likely be lower in NVRAM-enabled architectures.</note>
		</body>
		<back>

			<div type="acknowledgement">
			</div>

			<div type="references">

				<listBibl>

<biblStruct xml:id="b0">
	<monogr>
		<title level="m" type="main">Memcached: a distributed memory object caching system</title>
		<ptr target="http://memcached.org" />
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b1">
	<analytic>
		<title level="a" type="main">An Orthogonally Persistent Java</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Atkinson</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><forename type="middle">P</forename><surname>Daynes</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">L</forename><surname>Jordan</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><forename type="middle">J</forename><surname>Printezis</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><surname>And</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Spence</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">ACM SIGMOD Record</title>
		<imprint>
			<biblScope unit="volume">25</biblScope>
			<biblScope unit="issue">4</biblScope>
			<biblScope unit="page" from="68" to="75" />
			<date type="published" when="1996-12" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b2">
	<monogr>
		<title level="m" type="main">Implications of CPU Caching on Byte-addressable Non-Volatile Memory Programming</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Bhandari</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">K</forename><surname>Chakrabarti</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><forename type="middle">R</forename><surname>And</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Boehm</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">H.-J</forename></persName>
		</author>
		<idno>HPL-2012-236</idno>
		<imprint>
			<date type="published" when="2012" />
		</imprint>
		<respStmt>
			<orgName>HP Labs</orgName>
		</respStmt>
	</monogr>
<note type="report_type">Technical Report</note>
</biblStruct>

<biblStruct xml:id="b3">
	<monogr>
		<title level="m" type="main">The PAR-SEC Benchmark Suite: Characterization and Architectural Implications</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Bienia</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><surname>Kumar</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Singh</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><forename type="middle">P</forename><surname>And</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">L</forename><forename type="middle">I</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">K</forename></persName>
		</author>
		<idno>TR-811-08</idno>
		<imprint>
			<date type="published" when="2008-01" />
			<pubPlace>Princeton University</pubPlace>
		</imprint>
	</monogr>
<note type="report_type">Technical Report</note>
</biblStruct>

<biblStruct xml:id="b4">
	<analytic>
		<title level="a" type="main">Deconstructing transactional semantics: The subtleties of atomicity</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Blundell</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><surname>Lewis</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">E</forename><forename type="middle">C</forename><surname>And</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Martin</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><forename type="middle">M</forename></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Workshop on Duplicating, Deconstructing, and Debunking (WDDD)</title>
		<imprint>
			<date type="published" when="2005" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b5">
	<analytic>
		<title level="a" type="main">Foundations of the C++ Concurrency Memory Model</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Boehm</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">H.-J</forename><surname>And</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Adve</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the ACM SIGPLAN Conference on Programming Language Design and Implementation</title>
		<meeting>the ACM SIGPLAN Conference on Programming Language Design and Implementation</meeting>
		<imprint>
			<date type="published" when="2008" />
			<biblScope unit="page" from="68" to="78" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b6">
	<analytic>
		<title level="a" type="main">Making persistent objects fast and safe with next-generation, nonvolatile memories</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Coburn</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Caulfield</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><forename type="middle">M</forename><surname>Akel</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Grupp</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">L</forename><forename type="middle">M</forename><surname>Gupta</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><forename type="middle">K</forename><surname>Jhala</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>And</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Swanson</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Nv-Heaps</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">ASPLOS &apos;11: Proc. of the 16th International Conference on Architectural Support for Programming Languages and Operating Systems</title>
		<imprint>
			<date type="published" when="2011-03" />
			<biblScope unit="page" from="105" to="117" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b7">
	<monogr>
		<title/>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Larus</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>And Rajwar</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Memory</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2007" />
			<publisher>Morgan and Claypool Publishers</publisher>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b8">
	<analytic>
		<title level="a" type="main">Architecting phase change memory as a scalable dram alternative</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Lee</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">B</forename><forename type="middle">C</forename><surname>Ipek</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">E</forename><surname>Mutlu</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">O</forename><surname>And</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Burger</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">ISCA &apos;09: Proc. of the 36th International Symposium on Computer Architecture</title>
		<imprint>
			<date type="published" when="2009-06" />
			<biblScope unit="page" from="2" to="13" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b9">
	<analytic>
		<title level="a" type="main">The Java Memory Model</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Manson</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Pugh</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">W</forename><surname>And</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Adve</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 32nd ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages</title>
		<meeting>the 32nd ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages</meeting>
		<imprint>
			<date type="published" when="2005" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b10">
	<analytic>
		<title level="a" type="main">Transparent user-level checkpointing for the native posix thread library for linux</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Rieker</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Ansel</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>And</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Cooperman</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">G</forename></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">PDPTA &apos;06: Proc. of the International Conference on Parallel and Distributed Processing Techniques and Applications</title>
		<imprint>
			<date type="published" when="2006-06" />
			<biblScope unit="page" from="492" to="498" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b11">
	<analytic>
		<title level="a" type="main">Durable transactions for memory using flash</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Saxena</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Shah</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Harizopoulos</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Swift</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>And Merchant</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Hathi</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">DaMoN: Proceedings of 8th ACM/SIGMOD International Workshop on Data Management on New Hardware</title>
		<imprint>
			<date type="published" when="2012" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b12">
	<analytic>
		<title level="a" type="main">tmpfs: A virtual memory file system</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Snyder</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Autumn European Unix Users&apos; Group Conference</title>
		<imprint>
			<date type="published" when="1990" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b13">
	<analytic>
		<title level="a" type="main">The missing memristor found</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Strukov</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><forename type="middle">B</forename><surname>Snider</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">G</forename><forename type="middle">S</forename><surname>Stewart</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><forename type="middle">R</forename><surname>And</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Williams</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><forename type="middle">S</forename></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Nature</title>
		<imprint>
			<biblScope unit="volume">453</biblScope>
			<biblScope unit="page" from="80" to="83" />
			<date type="published" when="2008" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b14">
	<monogr>
		<title level="m" type="main">Draft specification of transactional language constructs for C++</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Transactional Memory Specification Draft-Ing</forename><surname>Group</surname></persName>
		</author>
		<ptr target="https://sites.google.com/site/tmforcplusplus" />
		<imprint>
			<date type="published" when="2012-02" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b15">
	<analytic>
		<title level="a" type="main">xcalls: safe i/o in memory transactions</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Volos</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">H</forename><surname>Tack</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><forename type="middle">J</forename><surname>Goyal</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">N</forename><surname>Swift</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><forename type="middle">M</forename><surname>And</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Welc</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">EuroSys</title>
		<imprint>
			<date type="published" when="2009" />
			<biblScope unit="page" from="247" to="260" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b16">
	<analytic>
		<title level="a" type="main">Lightweight persistent memory</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Volos</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">H</forename><surname>Tack</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><forename type="middle">J</forename><surname>And</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><forename type="middle">M</forename><surname>Swift</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Mnemosyne</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">ASPLOS &apos;11: Proc. of the 16th International Conference on Architectural Support for Programming Languages and Operating Systems</title>
		<imprint>
			<date type="published" when="2011-03" />
			<biblScope unit="page" from="91" to="103" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b17">
	<analytic>
		<title/>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Ziarek</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">L</forename><surname>Schatz</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><surname>And</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Jagannathan</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Modular Checkpointing for Atomicity. Electr. Notes Theor. Comput. Sci</title>
		<imprint>
			<biblScope unit="volume">174</biblScope>
			<biblScope unit="page" from="85" to="115" />
			<date type="published" when="2007" />
		</imprint>
	</monogr>
</biblStruct>

				</listBibl>
			</div>
		</back>
	</text>
</TEI>
