<?xml version="1.0" encoding="UTF-8"?>
<TEI xmlns="http://www.tei-c.org/ns/1.0" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
xsi:schemaLocation="http://www.tei-c.org/ns/1.0 /Users/atharsefid/Desktop/grobid-0.5.3/grobid-home/schemas/xsd/Grobid.xsd"
 xmlns:xlink="http://www.w3.org/1999/xlink">
	<teiHeader xml:lang="en">
		<encodingDesc>
			<appInfo>
				<application version="0.5.3" ident="GROBID" when="2020-09-29T02:56+0000">
					<ref target="https://github.com/kermitt2/grobid">GROBID - A machine learning software for extracting information from scholarly documents</ref>
				</application>
			</appInfo>
		</encodingDesc>
		<fileDesc>
			<titleStmt>
				<title level="a" type="main">mLSM: Making Authenticated Storage Faster in Ethereum</title>
			</titleStmt>
			<publicationStmt>
				<publisher/>
				<availability status="unknown"><licence/></availability>
			</publicationStmt>
			<sourceDesc>
				<biblStruct>
					<analytic>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Pandian</forename><surname>Raju</surname></persName>
							<affiliation key="aff0">
								<orgName type="institution">University of Texas at Austin</orgName>
							</affiliation>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Soujanya</forename><surname>Ponnapalli</surname></persName>
							<affiliation key="aff0">
								<orgName type="institution">University of Texas at Austin</orgName>
							</affiliation>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Evan</forename><surname>Kaminsky</surname></persName>
							<affiliation key="aff0">
								<orgName type="institution">University of Texas at Austin</orgName>
							</affiliation>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Gilad</forename><surname>Oved</surname></persName>
							<affiliation key="aff0">
								<orgName type="institution">University of Texas at Austin</orgName>
							</affiliation>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Zachary</forename><surname>Keener</surname></persName>
							<affiliation key="aff0">
								<orgName type="institution">University of Texas at Austin</orgName>
							</affiliation>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Vijay</forename><surname>Chidambaram</surname></persName>
							<affiliation key="aff0">
								<orgName type="institution">University of Texas at Austin</orgName>
							</affiliation>
							<affiliation key="aff1">
								<orgName type="department">VMware Research</orgName>
							</affiliation>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Ittai</forename><surname>Abraham</surname></persName>
							<affiliation key="aff1">
								<orgName type="department">VMware Research</orgName>
							</affiliation>
						</author>
						<title level="a" type="main">mLSM: Making Authenticated Storage Faster in Ethereum</title>
					</analytic>
					<monogr>
						<imprint>
							<date/>
						</imprint>
					</monogr>
				</biblStruct>
			</sourceDesc>
		</fileDesc>
		<profileDesc>
			<abstract>
				<p>Ethereum provides authenticated storage: each read returns a value and a proof that allows the client to verify the value returned is correct. We experimentally show that such authentication leads to high read and write amplification (64ร in the worst case). We present a novel data structure, Merkelized LSM (mLSM), that significantly reduces the read and write amplification while still allowing client verification of reads. mLSM significantly increases the performance of the storage subsystem in Ethereum, thereby increasing the performance of a wide range of Ethereum applications.</p>
			</abstract>
		</profileDesc>
	</teiHeader>
	<text xml:lang="en">
		<body>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="1">Introduction</head><p>Modern crypto-currencies such as Bitcoin <ref type="bibr" target="#b20">[21]</ref> and Ethereum <ref type="bibr" target="#b26">[26]</ref> seek to provide a decentralized, cryptographically-secure currency built upon the blockchain <ref type="bibr" target="#b25">[25]</ref>.</p><p>Ethereum provides a distributed platform on which decentralized applications can be built. While ethereum's cryptocurrency ether is widely used and adopted, having the notion of a platform opens the opportunities for a wide range of decentralized applications apart from just crypto-currencies. Ethereum has a market cap of 64 billion dollars at the time of writing this paper, with over 1.5 billion dollars being traded over the last 24 hours. Thus, improving the performance of Ethereum will have significant impact.</p><p>In this work, we view Ethereum as a distributed storage system, and seek to improve the performance of its reads and writes. Ethereum is especially interesting because it provides authenticated storage. Reads in Ethereum return both the value and a Merkle proof that the value is indeed the correct value. Each key being read is part of a Merkle tree <ref type="bibr" target="#b18">[19]</ref>; the inner nodes of the tree are simply hashes of their children. The proof consists of the hashes of each node along the path from the root to the leaf containing the key. The root is globally published, and thus any client receiving a value for a key can independently determine that the value it received is correct. Each write changes the hashes of all nodes along the path from the root to the leaf. Thus, reads and writes are expensive operations in Ethereum.</p><p>We examine the overhead of Ethereum reads using carefully designed experiments based on real-world public Ethereum blockchain data. Ethereum stores its data in the LevelDB <ref type="bibr" target="#b14">[15]</ref> key-value store. We show that reading a single key (e.g., the amount of ether in a given account) can result in 64 LevelDB reads, while writing a single key can lead to a similar number of LevelDB writes. Internally, LevelDB induces extra write amplification <ref type="bibr" target="#b22">[23]</ref>, further increasing overall amplification. Such write and read amplification reduces throughput (storage bandwidth is wasted by the amplification), and write amplification in particular significantly reduces the lifetime of devices such as Solid State Drives (SSDs) which wear out after a limited number of write cycles <ref type="bibr" target="#b0">[1,</ref><ref type="bibr" target="#b15">16,</ref><ref type="bibr" target="#b19">20]</ref>. Thus, reducing the read and write amplification can both increase Ethereum throughput and reduce hardware replacement costs.</p><p>We trace the read and write amplification in Ethereum to the fact that it provides authenticated storage. The challenge then becomes: is it possible to design an authenticated storage system which minimizes read and write amplification?</p><p>To overcome this challenge, we design a novel data structure called Merkelized LSM (mLSM) which combines merkle trees and log-structured merge trees <ref type="bibr" target="#b21">[22]</ref>, resulting in a writeoptimized data structure for authenticated reads and writes. The key insights behind mLSM are maintaining multiple independent tries and decoupling the two current uses of tries in Ethereum: lookup and authentication. Similar to a log-structured merge tree, mLSM has multiple levels. Each level contains a number of immutable merkle trees, with merkle trees becoming bigger with higher-numbered levels. Updates to mLSM are batched in memory, and written to Level 0 as a new merkle tree. When each level has a threshold number of merkle trees, they are compacted into a single merkle tree in the next level. mLSM introduces several challenges unique to authenticated storage, such as the need for deterministic compaction.</p><p>Log-structured merge trees have been widely used in key-value stores <ref type="bibr">[2, 3, 7, 13-15, 18, 23, 24, 27]</ref>; mLSM demonstrates a novel application of the ideas behind this data structure in a new domain. By adopting such ideas into Ethereum, we hope to increase the performance of reads and writes, and therefore increase the performance of multiple Ethereum applications. The ideas behind mLSM are not limited to Ethereum, and are broadly applicable to any authenticated storage.</p><p>This section provides some background on blockchain and Ethereum. It first provides a high level overview of the blockchain technology on which Ethereum is built ( ยง2.1). Then, it describes the Merkle patricia tree ( ยง2.2) and how it is used as an authenticated data structure in blockchain. Finally, it provides an overview of how Ethereum works ( ยง2.3).</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.1">Blockchain</head><p>A blockchain is a continuously growing list of blocks which are chained together. Each block consists of a set of transactions which happened during some particular time interval. A blockchain is also cryptographically secured using authenticated data structures such that the data cannot be silently altered. Each block is linked to the previous block by a cryptographic hash. We arrive at the current state of the system by processing transactions in order from the first block to the latest block.</p><p>The blockchain data (list of blocks and transactions) is distributed across thousands of nodes across the world. This is a powerful property because the data is no longer controlled by any single authority. There are consensus protocols for different nodes to agree upon the blocks that should be added to the chain. To keep the data cryptographically secure, hashes are extensively used in the blockchain to store values. For example, every block, every transaction, every account etc. is identified by a unique hash.</p><p>The process of adding a new block to the blockchain is called mining. Mining requires solving a cryptographically complex puzzle, commonly called the proof of work algorithm <ref type="bibr" target="#b20">[21]</ref>. Other nodes on the network will validate the block that gets added. Typically multiple miners compete to mine a block at any point in time and the miner who succeeds is awarded some amount of cryptocurrency (as a reward for adding data to the blockchain). Some crypto-currencies also use a proofof-stake algorithm <ref type="bibr" target="#b16">[17]</ref> to verify the blocks.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.2">Merkle tree</head><p>The data in a blockchain is securely stored using a Merkle tree <ref type="bibr" target="#b18">[19]</ref>. A merkle tree is a tree where every parent stores the combined hash of all of its children; the values are stored in the leaves. Each node contains a list of the hashes of its children. This also means that if the value of any node N in the tree changes, the hash of every node in the path from that node N to the root of the tree will change. This allows us to detect if any piece of data in the tree has been modified in which case the root hash will not match. The root of the tree is publicly available to clients, and clients can use this to verify reads. , store the hash of their children. When a value 3 in the merkle tree is updated to 2, the hash of its parent node changes from H b to H b ' and so the hash of the root node from H a to H a '. Any update to a node changes the hashes of all nodes in the path from that node to the root.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.3">Ethereum protocol</head><p>The Ethereum nodes connect to each other through remote procedure calls (RPC) to exchange block information. Each block header consists of a monotonously increasing unique block number and a cryptographic hash of the previous block in the chain (this chains the blocks together). Ethereum uses Keccak-256 <ref type="bibr" target="#b3">[4]</ref> for generating cryptographic hashes. It uses a Merkle Patricia tree ( ยง3.1) to store the data. There are two local tries (data from each block) and a global state trie. The global state trie tracks the state of each account, and stores details such as account id and balance.</p><p>ETH and LES protocols. There are different types of nodes in an ethereum network -fullNode, fastNode and lightNode. A fullNode downloads the entire history of blockchain from the beginning while a lightNode downloads only the block headers and gets the block bodies on demand from a fullNode through RPC calls. Ethereum runs ETH protocol between two fullNode in the cluster, and LES protocol <ref type="bibr" target="#b8">[9]</ref> to manage the interaction between a lightNode and a fullNode in the cluster. A fullNode returns a merkle proof along with the requested data to a lightNode. A merkle proof is simply the list of hash values in the tree on the path from the requested value node to the root node. A lightNode can verify if the data is cryptographically correct or not using the merkle proof.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3">Storage in Ethereum</head><p>LSM-based key-value stores like LevelDB <ref type="bibr" target="#b14">[15]</ref>, RocksDB <ref type="bibr" target="#b12">[13]</ref>, and PebblesDB <ref type="bibr" target="#b22">[23]</ref> provide high write throughput and reasonable read throughput. They excel at random reads and writes. Ethereum uses cryptographic hashes as identifiers for its data; hence it uses LevelDB as its data store, storing the hash as the key, and the data as the value. Ethereum uses Recursive Length Prefix encoding <ref type="bibr" target="#b11">[12]</ref> to encode its data.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.1">Merkle Patricia Trie</head><p>Ethereum uses a Merkle Patricia trie <ref type="bibr" target="#b10">[11]</ref> to store the data, where the keys are stored in hexadecimal format. A merkle patricia trie in Ethereum consists of four types of nodes; fullNode, which branches out into 17 child nodes (16 children one each for each character of hex and 1 child if there's a value terminating at that node); shortNode, an optimization which uses a prefix as the key if there's no branching at that prefix; hashNode, which is used to convert a hash to a node doing a LevelDB lookup; valueNode, which is the leaf node which contains the value stored for that key. Ethereum trie maintains both in-memory trie and on-disk trie. On doing a commit, the in-memory trie is committed to the disk by writing keyvalue pairs to LevelDB, by introducing hash nodes.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.2">LevelDB</head><p>Ethereum uses LevelDB extensively to store all of its data. For example, a key would be the hash of a block header, and the value would be the encoded value of the block header. Transaction data is also stored as keyvalue pairs with the transaction ID as the key. Ethereum uses a number of merkle patricia tries to store state; each node of the trie is also stored in LevelDB. As a result, Ethereum does a significant number of reads and writes to LevelDB during normal operation.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.3">State trie</head><p>The State trie is a global trie which contains the state of all the accounts in the public network. Each account id in Ethereum is a randomly generated 20 bytes address. Ethereum uses the 256-bit hash of the account ID to store its data: the hash becomes the path through the patricia trie, with the data at the end of the path. Each node in the patricia trie is 4 bits; thus, resolving 256 bits requires traversing 64 nodes (each of which requires reading a LevelDB key) to get to the data. To improve performance, Ethereum uses a shortNode in the patricia trie to compact many nodes along a path into a single node. Even with this optimization, reading a single value in Ethereum requires tens of LevelDB reads.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4">The Ethereum Storage Bottleneck</head><p>Ethereum's authenticated storage has an IO amplification problem: every Ethereum read requires a large number of LevelDB reads, and every Ethereum write requires multiple LevelDB writes. Attackers have capitalized on this storage bottleneck to mount a DOS attack on the public network <ref type="bibr" target="#b7">[8]</ref>.</p><p>The root cause of the storage bottleneck is the design of the authenticated storage. Just building a patricia trie on top of LevelDB leads to significant amplification. In the worst case, an Ethereum read can lead to 64 LevelDB get() requests, which internally can each lead to multi-  <ref type="figure" target="#fig_1">, 0x2f)</ref>, the lookup on the account translates to 2 LevelDB lookups, one at each FullNode (FN) before reaching the ValueNode (VN). Thus, for accounts encoded using keccak 256 hash (32 bytes), a lookup on the value of the account translates to 64 LevelDB lookups.</p><p>ple storage reads.</p><p>Experimental setup. We started a private ethereum network in which we imported the initial 1.6M blocks of the real-world public Ethereum blockchain <ref type="bibr" target="#b5">[6]</ref>. We used the go Ethereum client (geth) <ref type="bibr" target="#b9">[10]</ref> to start a fullNode that imports the blockchain data. We ran this setup on a machine with 16 GB of RAM and the block chain data was stored on a 2TB Intel 750 series SSD (using a software raid0). The following section provides some preliminary results on the number of storage reads.</p><p>Results. Our experiment processes all 1.6M blocks, parsing the transactions in each block, extracting the unique account IDs and obtaining the balance for each account. We augmented internal metrics provided by geth with our own to obtain the following results:</p><p>getBlock: getBlock(blockNum) returns the block body of the block with the number blockNum. We found that it resulted in roughly 8M LevelDB get calls for 1.6M blocks (around 5 LevelDB gets per block). getBalance: getBalance(addr) returns the amount of ether balance present in the account addr. The experiment resulted in around 1.4M LevelDB gets for 0.22M account addresses. The observed amplification is 7ร instead of the worst-case 64ร as the total amount of data is small, leading to a depth of only seven in the patricia trie. As the amount of data in the blockchain increases, the depth of the patricia trie will also increase, leading to higher amplification. forms the IO to retrieve the data, and sends it back to the lightNode along with the merkle proof. A fullNode that is responding to many lightNode requests will be under significant IO pressure.</p><p>Latency metrics. To gauge the influence of storage layer in the overall latency of normal operations, we measure the overall time taken to read 1.6M block details, and count the number of transactions and accounts within those blocks, and the corresponding amount of time spent in the storage layer. <ref type="table">Table 1</ref> shows the numbers. For this experiment, we by-passed the javascript console provided by ethereum in order to eliminate the overhead of RPC calls, and we directly interact with the geth client (with the golang layer). We see that around 93.8% of the time is spent in the storage layer (to read from LevelDB).</p><p>Note that we have analyzed the worst case where sustained reads are being serviced by a single node, and networking and RPC overhead are eliminated. In a realworld deployment, a node could experience similar stress on its storage if it is serving hundreds or thousands of light nodes which are each requesting blocks. This is possible for workloads such as analytics or auditing.</p><p>Thus from <ref type="table">Table 1</ref>, we can see that Ethereum's authenticated storage design significantly amplifies (by 7ร) the number of high-level reads and writes to LevelDB, reducing throughput and increasing latency. The problem will only get worse over time, as more and more data is added to the Ethereum blockchain.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5">Proposed solution: Merkelized LSM</head><p>The challenge is to design an authenticated storage system that reduces the IO amplification, yet allows reads to be authenticated. To address this challenge, we present a novel data structure called Merkelized LSM (mLSM). mLSM combines techniques from merkle trees and log-structured merge trees. We will first describe a trivial solution to optimize the reads and then explain the shortcomings of the trivial approach. We will then explain the intuition behind mLSM and then discuss its design.</p><p>We will then analyze mLSM and show that it improves storage performance.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5.1">Caching merkle proofs</head><p>The main problem is that each Ethereum read results in multiple LevelDB reads. A straightforward solution is to just cache the value and the merkle proof for each Ethereum read in LevelDB, and just use the cache to serve Ethereum reads. For a read-only workload, this works great; the problem arises with writes. Each write updates several nodes in the Patricia Trie, including the root. As a result, all the cached merkle proofs are invalidated. The entire cache being invalidated on every write makes this an impractical approach, and demonstrates the unique challenges of authenticated storage.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5.2">Merkelized LSM</head><p>Insight. The key insight behind mLSM follows directly from the shortcoming of the trivial solution. The trivial solution did not work because there was tight coupling between any two nodes in the tree (since all the nodes formed a single tree under a single root). So, mLSM strikes at that invariant to maintain multiple independent tries such that a change of value in one tree doesn't affect other trees. When a write happens, only the cached values of the affected tree have to be invalidated. Another key insight derived from the trivial solution is to decouple lookup of value from the trie itself. The main purpose of the trie is to provide authentication, but it is not necessarily the only source for lookups. Decoupling lookup and authentication can reduce the number of LevelDB gets during a lookup.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Design.</head><p>We combine the Merkle Tree and LogStructured Merge Trees data structures in Merkelized LSM (mLSM). The shortest way to describe mLSM is to take LSM and replace immutable sstables with immutable patricia trees. In mLSM, we envision multiple levels similar to log-structured merge trees. Each level will have multiple immutable patricia tries. mLSM also contains a lookup cache per level; looking up a key would return its value and its merkle proof. To connect all the patricia tries together (so that reads can be verified), mLSM introduces a master root node. The merkle proofs in each level do not contain the master root hash; this way, we make sure that the tries are independent of each other. mLSM replaces merkle patricia tries with static binary merkle trees (fan out of 2 instead of 16) since the binary trees balance data better.</p><p>mLSM Writes. Similar to log-structured merge trees, writes and updates are buffered in memory and then written to storage as a large batch. mLSM does not update the binary merkle trees in place; instead, it writes new binary merkle trees to Level 0. When the number of binary merkle trees in Level 0 reaches a certain threshold, they <ref type="figure">Figure 3</ref>: Merklized LSM Design. mLSM has many binary merkle trees in every level (L0, L1, ..., Ln) and a LevelDB Cache, that maps a key in each level (key, level) to its value and the associated MerkleProof (value, proof). Insertions are performed to Level0 (L0) and the data in every level is periodically compacted to the higher indexed levels.</p><p>are compacted (merged to form a larger binary merkle tree), and written as large batched I/O to the next level. Note that a write only affects the new merkle binary trees and the master root node; nothing else in the storage system is affected, avoiding one of the big problems in the trivial solution. The key to our solution is having multiple patricia trees that are independent of each other, except for the root node.</p><p>mLSM Reads. Similar to an LSM read, an mLSM read might require inspecting data in multiple levels. In Level 0, there might be multiple tries containing the key we are searching for; in all other levels, mLSM maintains the invariant that there is a single trie containing the required key. Once the right merkle binary tree is identified, it is queried to get the value and the merkle proof. The merkle proof is then extended to include the master node, and the value and the merkle proof are returned to the user.</p><p>Caching. mLSM caches both the values and authentication for each key. mLSM uses LevelDB for caching, with the key being the original key, and the value being a combination of the data and the merkle proof. mLSM reads inspect the different levels one by one starting with the lowest level and returning once the key is found in a level. There is a cache for each level in mLSM and reads which hit the cache do not need to traverse through the merkle tree to read the value and merkle proof. The Level 0 cache needs to handle multiple copies of the same key using something like a version number.</p><p>Challenges. Note that mLSM introduces read and write amplification of its own, due to the multiple levels. We propose to handle the read amplification with Bloom Filters <ref type="bibr" target="#b4">[5]</ref>. Bloom filters can be used to optimize the lookups efficiently such that we only read the trie which can possibly contain the key. With such optimizations, on an average, we will read only one trie for a Get request and the value and merkle proof can be retrieved with a single LevelDB get from the corresponding cache.</p><p>The write amplification introduced by the mLSM structure is another challenge. We could potentially borrow ideas from our previous work, Fragmented LogStructured Merge Trees <ref type="bibr" target="#b22">[23]</ref>, to reduce the write amplification while maintaining read performance.</p><p>Another subtle challenge is that since the mLSM structure is used to verify reads, different nodes should reflect the same mLSM state at any point in time. This means that the compaction of tries should be deterministic and should have the same behavior in all the nodes -this is not the case with LSM-based key-value stores today, where compaction is triggered in the background in a non-deterministic way. Deterministic compaction could possibly be enforced by using an opcode for compaction which forces compaction of the state rather than triggers from the thresholds. Other challenges include efficiently storing bloom filters in memory and limiting the number of level-0 tries.</p><p>Cost Analysis. When bloom filters are added to each trie in mLSM, each mLSM read will only need to read one trie with high probability. Thus, on a cache miss, the cost of the mLSM read will be O(D) where D is the depth of the merkle binary tree where the key is located. We believe this will be significantly smaller than the depth of the merkle patricia trie used in Ethereum today. For all consecutive reads of a key (during a cache hit), the cost of the read is O(1) since it can be served with just one LevelDB lookup.</p><p>Each mLSM write will be buffered in memory, and written as an immutable merkle binary tree to Level 0. Each key will be written only once to each level, so the write cost will be O(H) where H is the height of mLSM. We believe this will also be significantly lower than the write cost in Ethereum today, which has to update all nodes on the path from the leaf to the root. Additionally, since the writes are buffered in memory and written as a batch, the write cost is amortized among all the keys.</p></div><figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_0"><head>Figure 1 :</head><label>1</label><figDesc>Figure 1: Update in Merkle tree. This figure shows an update in a merkle tree where leaf nodes are represented by numbers. The non-leaf nodes H a , H b , H a ' and H b ', store the hash of their children. When a value 3 in the merkle tree is updated to 2, the hash of its parent node changes from H b to H b ' and so the hash of the root node from H a to H a '. Any update to a node changes the hashes of all nodes in the path from that node to the root.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_1"><head>Figure 2 :</head><label>2</label><figDesc>Figure 2: Extensive use of LevelDB. This figure shows a single account value lookup. The account is encoded as a byte (here, 0x2f), the lookup on the account translates to 2 LevelDB lookups, one at each FullNode (FN) before reaching the ValueNode (VN). Thus, for accounts encoded using keccak 256 hash (32 bytes), a lookup on the value of the account translates to 64 LevelDB lookups.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_2"><head></head><label></label><figDesc>getTransaction: getTx(txHash) returns the details of the transaction with the hash txHash. Retrieving 5.2M transactions resulted in 10.4M LevelDB gets (2 LevelDB gets per transaction). The number of LevelDB gets per transaction is low because the transactions are retrieved from local transaction tries rather than global state trie.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_0" validated="false"><head></head><label></label><figDesc>Interaction with light nodes. An Ethereum lightNode sends data request to a fullNode and the fullNode per-</figDesc><table>Metric 

Value 
Metric 
Value 

# blocks 
1.6M 
# account lookups 0.22M 
# transactions 5.2M 
# leveldb gets 
1.4M (7ร) 
# accounts 
0.22M depth of state trie 7 
Total time 
562 s 
Time in storage 
527 s 

Table 1: Preliminary metrics. The table shows some 
metrics from the Ethereum public main network for the 
first 1.6M blocks. Looking up ether balance for 0.22M 
accounts results in 1.4M leveldb gets, with a read ampli-
fication of 7ร. 93.8% of the overall time taken is spent 
in the storage layer. 

</table></figure>
		</body>
		<back>

			<div type="acknowledgement">
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="6">Conclusion</head><p>We show that Ethereum suffers from read and write amplification due to its authenticated storage system. We present a novel data structure, Merkelized LSM (mLSM), that lowers read and write amplification while still providing authenticated reads. mLSM is applicable to any authenticated storage. We plan to modify Ethereum to introduce the mLSM structure and evaluate the potential increase in storage performance.</p></div>
			</div>

			<div type="references">

				<listBibl>

<biblStruct xml:id="b0">
	<analytic>
		<title level="a" type="main">Design Tradeoffs for SSD Performance</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Agrawal</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">N</forename><surname>Prabhakaran</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">V</forename><surname>Wobber</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><surname>Davis</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><forename type="middle">D</forename><surname>Manasse</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><forename type="middle">S</forename><surname>And</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Panigrahy</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 2008 USENIX Annual Technical Conference</title>
		<meeting>the 2008 USENIX Annual Technical Conference</meeting>
		<imprint>
			<date type="published" when="2008" />
			<biblScope unit="page" from="57" to="70" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b1">
	<analytic>
		<title level="a" type="main">A Fast Key-Value Storage System for Variable-Length String Keys</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Ahn</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J.-S</forename><surname>Seo</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><surname>Mayuram</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Yaseen</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Kim</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J.-S</forename><surname>And</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Maeng</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Forestdb</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE Transactions on Computers</title>
		<imprint>
			<biblScope unit="volume">65</biblScope>
			<biblScope unit="page" from="902" to="915" />
			<date type="published" when="2016" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b2">
	<analytic>
		<title level="a" type="main">Creating synergies between memory, disk and log in log structured key-value stores</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Balmau</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">O</forename><surname>Didona</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Guerraoui</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Zwaenepoel</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">W</forename><surname>Yuan</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">H</forename><surname>Arora</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Gupta</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">K</forename><surname>And</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Konka</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><surname>Triad</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 2017 USENIX Annual Technical Conference (USENIX ATC 17)</title>
		<meeting>the 2017 USENIX Annual Technical Conference (USENIX ATC 17)<address><addrLine>Santa Clara, CA</addrLine></address></meeting>
		<imprint>
			<date type="published" when="2017" />
			<biblScope unit="page" from="363" to="375" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b3">
	<analytic>
		<title level="a" type="main">The Road from Panama to Keccak via RadioGatรบn</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Bertoni</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">G</forename><surname>Daemen</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Peeters</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>And</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Assche</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">G</forename><forename type="middle">V</forename></persName>
		</author>
		<idno>11.01. -16.01.2009</idno>
	</analytic>
	<monogr>
		<title level="m">Dagstuhl Seminar Proceedings, Schloss Dagstuhl -LeibnizZentrum fรผr Informatik</title>
		<editor>H. Handschuh, S. Lucks, B. Preneel, and P. Rogaway</editor>
		<meeting><address><addrLine>Germany</addrLine></address></meeting>
		<imprint>
			<date type="published" when="2009" />
			<biblScope unit="volume">09031</biblScope>
		</imprint>
	</monogr>
	<note>Symmetric Cryptography</note>
</biblStruct>

<biblStruct xml:id="b4">
	<analytic>
		<title level="a" type="main">Space/time trade-offs in hash coding with allowable errors</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">B</forename><forename type="middle">H</forename><surname>Bloom</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Communications of the ACM</title>
		<imprint>
			<biblScope unit="volume">13</biblScope>
			<biblScope unit="page" from="422" to="426" />
			<date type="published" when="1970" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b5">
	<analytic>
		<title/>
		<ptr target="http://bloopish.com/tools/ethereum/" />
	</analytic>
	<monogr>
		<title level="j">BLOOPISH. Ethereum blockchain download</title>
		<imprint>
			<date type="published" when="2016" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b6">
	<analytic>
		<title level="a" type="main">Monkey: Optimal navigable key-value store</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Dayan</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">N</forename><surname>Athanassoulis</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>And Idreos</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 2017 ACM International Conference on Management of Data, SIGMOD Conference</title>
		<editor>S. Salihoglu, W. Zhou, R. Chirkova, J. Yang, and D. Suciu</editor>
		<meeting>the 2017 ACM International Conference on Management of Data, SIGMOD Conference<address><addrLine>Chicago, IL, USA</addrLine></address></meeting>
		<imprint>
			<publisher>ACM</publisher>
			<date type="published" when="2017-05-14" />
			<biblScope unit="page" from="79" to="94" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b7">
	<monogr>
		<title level="m" type="main">The Ethereum network is currently undergoing a DoS attack</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Ethereum</surname></persName>
		</author>
		<ptr target="https://blog.ethereum.org/2016/09/22/ethereum-network-currently-undergoing-dos-attack/" />
		<imprint>
			<date type="published" when="2016" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b8">
	<analytic>
		<title/>
	</analytic>
	<monogr>
		<title level="j">ETHEREUM. Ethereum Light Client Protocol</title>
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b9">
	<analytic>
		<title/>
		<ptr target="https://github.com/ethereum/go-ethereum" />
	</analytic>
	<monogr>
		<title level="j">ETHEREUM. Ethereum Golang client</title>
		<imprint>
			<date type="published" when="2018" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b10">
	<monogr>
		<title/>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Ethereum. Merkle Patricia</forename><surname>Trie</surname></persName>
		</author>
		<ptr target="https://github.com/ethereum/wiki/wiki/Patricia-Tree" />
		<imprint>
			<date type="published" when="2018" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b11">
	<monogr>
		<title level="m" type="main">Length Prefix in Ethereum</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Ethereum</forename><surname>Recursive</surname></persName>
		</author>
		<ptr target="https://github.com/ethereum/wiki/wiki/RLP" />
		<imprint>
			<date type="published" when="2018" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b12">
	<monogr>
		<title level="m" type="main">RocksDB -A persistent key-value store</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Facebook</surname></persName>
		</author>
		<ptr target="http://rocksdb.org" />
		<imprint>
			<date type="published" when="2017" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b13">
	<analytic>
		<title level="a" type="main">Scaling concurrent log-structured data stores</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Golan-Gueta</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">G</forename><surname>Bortnikov</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">E</forename><surname>Hillel</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">E</forename><surname>And</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Kei-Dar</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">I</forename></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the Tenth European Conference on Computer Systems, EuroSys</title>
		<editor>L.Rรฉveilรฌ ere, T. Harris, and M. Herlihy</editor>
		<meeting>the Tenth European Conference on Computer Systems, EuroSys<address><addrLine>Bordeaux, France</addrLine></address></meeting>
		<imprint>
			<publisher>ACM</publisher>
			<date type="published" when="2015-04-21" />
			<biblScope unit="volume">32</biblScope>
			<biblScope unit="page">14</biblScope>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b14">
	<monogr>
		<title/>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Google</forename><surname>Leveldb</surname></persName>
		</author>
		<ptr target="https://github.com/google/leveldb" />
		<imprint>
			<date type="published" when="2018" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b15">
	<analytic>
		<title level="a" type="main">Characterizing Flash Memory: Anomalies, Observations, and Applications</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Grupp</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">L</forename><forename type="middle">M</forename><surname>Caulfield</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><forename type="middle">M</forename><surname>Coburn</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Swanson</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Yaakobi</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">E</forename><surname>Siegel</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><forename type="middle">H</forename><surname>And</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Wolf</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><forename type="middle">K</forename></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of 42nd Annual IEEE/ACM International Symposium on Microarchitecture</title>
		<meeting>42nd Annual IEEE/ACM International Symposium on Microarchitecture</meeting>
		<imprint>
			<publisher>IEEE</publisher>
			<date type="published" when="2009" />
			<biblScope unit="page" from="24" to="33" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b16">
	<monogr>
		<title level="m" type="main">Ppcoin: Peer-to-peer crypto-currency with proof-of-stake. self-published paper</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">King</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>And</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Nadal</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename></persName>
		</author>
		<imprint>
			<date type="published" when="2012-08-19" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b17">
	<analytic>
		<title level="a" type="main">Separating Keys from Values in SSD-conscious Storage</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">L</forename><forename type="middle">U</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">L</forename><surname>Pillai</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><forename type="middle">S</forename><surname>Arpaci-Dusseau</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><forename type="middle">C</forename><surname>And</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Arpaci-Dusseau</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><forename type="middle">H</forename><surname>Wisckey</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 14th USENIX Conference on File and Storage Technologies</title>
		<meeting>the 14th USENIX Conference on File and Storage Technologies</meeting>
		<imprint>
			<date type="published" when="2016" />
			<biblScope unit="page" from="133" to="148" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b18">
	<analytic>
		<title level="a" type="main">A Digital Signature Based on a Conventional Encryption Function</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Merkle</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><forename type="middle">C</forename></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">A Conference on the Theory and Applications of Cryptographic Techniques on Advances in Cryptology</title>
		<meeting><address><addrLine>London, UK, UK</addrLine></address></meeting>
		<imprint>
			<publisher>Springer-Verlag</publisher>
			<date type="published" when="1988" />
			<biblScope unit="volume">87</biblScope>
			<biblScope unit="page" from="369" to="378" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b19">
	<analytic>
		<title level="a" type="main">Bit Error Rate in NAND Flash Memories</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Mielke</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">N</forename><surname>Marquart</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><surname>Wu</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">N</forename><surname>Kessenich</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Bel-Gal</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">H</forename><surname>Schares</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">E</forename><surname>Trivedi</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">F</forename><surname>Goodness</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">E</forename><surname>And</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Nevill</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">L</forename><forename type="middle">R</forename></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the IEEE International Reliability Physics Symposium</title>
		<meeting>the IEEE International Reliability Physics Symposium</meeting>
		<imprint>
			<publisher>IEEE</publisher>
			<date type="published" when="2008" />
			<biblScope unit="page" from="9" to="19" />
		</imprint>
	</monogr>
	<note>IRPS 08</note>
</biblStruct>

<biblStruct xml:id="b20">
	<monogr>
		<title level="m" type="main">Bitcoin: A peer-to-peer electronic cash system</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Nakamoto</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename></persName>
		</author>
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b21">
	<analytic>
		<title level="a" type="main">The log-structured merge-tree (LSM-tree)</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">O&amp;apos;neil</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><surname>Cheng</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">E</forename><surname>Gawlick</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>And O&amp;apos;neil</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">E</forename></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Acta Informatica</title>
		<imprint>
			<biblScope unit="volume">33</biblScope>
			<biblScope unit="page" from="351" to="385" />
			<date type="published" when="1996" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b22">
	<analytic>
		<title level="a" type="main">Building Key-Value Stores Using Fragmented Log-Structured Merge Trees</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Raju</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><surname>Kadekodi</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Chidambaram</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">V</forename><surname>And</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Abra-Ham</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">I</forename><surname>Pebblesdb</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 26th Symposium on Operating Systems Principles</title>
		<meeting>the 26th Symposium on Operating Systems Principles<address><addrLine>New York, NY, USA</addrLine></address></meeting>
		<imprint>
			<date type="published" when="2017" />
			<biblScope unit="page" from="497" to="514" />
		</imprint>
	</monogr>
	<note>SOSP &apos;17, ACM</note>
</biblStruct>

<biblStruct xml:id="b23">
	<analytic>
		<title level="a" type="main">bLSM: a General Purpose Log Structured Merge Tree</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Sears</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Ramakrishnan</forename><surname>And</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 2012</title>
		<meeting>the 2012</meeting>
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b24">
	<monogr>
				<title level="m">ACM SIGMOD International Conference on Management of Data</title>
		<imprint>
			<publisher>ACM</publisher>
			<date type="published" when="2012" />
			<biblScope unit="page" from="217" to="228" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b25">
	<monogr>
		<title/>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Wikipedia</forename><surname>Blockchain</surname></persName>
		</author>
		<ptr target="https://en.wikipedia.org/wiki/Blockchain" />
		<imprint>
			<date type="published" when="2018" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b26">
	<analytic>
		<title level="a" type="main">Ethereum: A secure decentralised generalised transaction ledger</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Wood</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">G</forename></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Ethereum Project Yellow Paper</title>
		<imprint>
			<biblScope unit="volume">151</biblScope>
			<biblScope unit="page" from="1" to="32" />
			<date type="published" when="2014" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b27">
	<analytic>
		<title level="a" type="main">LSM-trie: An LSMTree-Based Ultra-Large Key-Value Store for Small Data Items</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">W</forename><forename type="middle">U</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">X</forename><surname>Xu</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Y</forename><surname>Shao</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Z</forename><surname>And</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Jiang</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 2015 USENIX Annual Technical Conference (USENIX ATC 15</title>
		<meeting>the 2015 USENIX Annual Technical Conference (USENIX ATC 15</meeting>
		<imprint>
			<date type="published" when="2015" />
			<biblScope unit="page" from="71" to="82" />
		</imprint>
	</monogr>
</biblStruct>

				</listBibl>
			</div>
		</back>
	</text>
</TEI>
