<?xml version="1.0" encoding="UTF-8"?>
<TEI xmlns="http://www.tei-c.org/ns/1.0" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
xsi:schemaLocation="http://www.tei-c.org/ns/1.0 /Users/atharsefid/Desktop/grobid-0.5.3/grobid-home/schemas/xsd/Grobid.xsd"
 xmlns:xlink="http://www.w3.org/1999/xlink">
	<teiHeader xml:lang="en">
		<encodingDesc>
			<appInfo>
				<application version="0.5.3" ident="GROBID" when="2020-09-29T02:43+0000">
					<ref target="https://github.com/kermitt2/grobid">GROBID - A machine learning software for extracting information from scholarly documents</ref>
				</application>
			</appInfo>
		</encodingDesc>
		<fileDesc>
			<titleStmt>
				<title level="a" type="main">This paper is included in the Proceedings of the 18th USENIX Conference on File and Storage Technologies (FAST &apos;20) Open access to the Proceedings of the 18th USENIX Conference on File and Storage Technologies (FAST &apos;20) is sponsored by CRaft: An Erasure-coding-supported Version of Raft for Reducing Storage Cost and Network Cost CRaft: An Erasure-coding-supported Version of Raft for Reducing Storage Cost and Network Cost</title>
			</titleStmt>
			<publicationStmt>
				<publisher/>
				<availability status="unknown"><licence/></availability>
				<date>February 25-27,</date>
			</publicationStmt>
			<sourceDesc>
				<biblStruct>
					<analytic>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Zizhong</forename><surname>Wang</surname></persName>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Tongliang</forename><surname>Li</surname></persName>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Haixia</forename><surname>Wang</surname></persName>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Airan</forename><surname>Shao</surname></persName>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Yunren</forename><surname>Bai</surname></persName>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Shangming</forename><surname>Cai</surname></persName>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Zihan</forename><surname>Xu</surname></persName>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Dongsheng</forename><surname>Wang</surname></persName>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Zizhong</forename><surname>Wang</surname></persName>
							<affiliation key="aff2">
								<orgName type="department">Beijing National Research Center for Information Science and Technology</orgName>
								<orgName type="institution">Tsinghua University</orgName>
							</affiliation>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Tongliang</forename><surname>Li</surname></persName>
							<affiliation key="aff2">
								<orgName type="department">Beijing National Research Center for Information Science and Technology</orgName>
								<orgName type="institution">Tsinghua University</orgName>
							</affiliation>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">†</forename></persName>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Haixia</forename><surname>Wang</surname></persName>
							<affiliation key="aff2">
								<orgName type="department">Beijing National Research Center for Information Science and Technology</orgName>
								<orgName type="institution">Tsinghua University</orgName>
							</affiliation>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Airan</forename><surname>Shao</surname></persName>
							<affiliation key="aff2">
								<orgName type="department">Beijing National Research Center for Information Science and Technology</orgName>
								<orgName type="institution">Tsinghua University</orgName>
							</affiliation>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Yunren</forename><surname>Bai</surname></persName>
							<affiliation key="aff2">
								<orgName type="department">Beijing National Research Center for Information Science and Technology</orgName>
								<orgName type="institution">Tsinghua University</orgName>
							</affiliation>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Shangming</forename><surname>Cai</surname></persName>
							<affiliation key="aff2">
								<orgName type="department">Beijing National Research Center for Information Science and Technology</orgName>
								<orgName type="institution">Tsinghua University</orgName>
							</affiliation>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Zihan</forename><surname>Xu</surname></persName>
							<affiliation key="aff2">
								<orgName type="department">Beijing National Research Center for Information Science and Technology</orgName>
								<orgName type="institution">Tsinghua University</orgName>
							</affiliation>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Dongsheng</forename><surname>Wang</surname></persName>
							<affiliation key="aff2">
								<orgName type="department">Beijing National Research Center for Information Science and Technology</orgName>
								<orgName type="institution">Tsinghua University</orgName>
							</affiliation>
						</author>
						<author>
							<affiliation key="aff0">
								<orgName type="department">Department of Computer Science and Technology</orgName>
								<orgName type="institution">Tsinghua University</orgName>
								<address>
									<postCode>2020 •</postCode>
									<settlement>Santa Clara</settlement>
									<region>CA</region>
									<country key="US">USA</country>
								</address>
							</affiliation>
						</author>
						<author>
							<affiliation key="aff1">
								<orgName type="institution">Tsinghua University</orgName>
							</affiliation>
						</author>
						<title level="a" type="main">This paper is included in the Proceedings of the 18th USENIX Conference on File and Storage Technologies (FAST &apos;20) Open access to the Proceedings of the 18th USENIX Conference on File and Storage Technologies (FAST &apos;20) is sponsored by CRaft: An Erasure-coding-supported Version of Raft for Reducing Storage Cost and Network Cost CRaft: An Erasure-coding-supported Version of Raft for Reducing Storage Cost and Network Cost</title>
					</analytic>
					<monogr>
						<imprint>
							<date type="published">February 25-27,</date>
						</imprint>
					</monogr>
					<note>978-1-939133-12-0 https://www.usenix.org/conference/fast20/presentation/wang-zizhong</note>
				</biblStruct>
			</sourceDesc>
		</fileDesc>
		<profileDesc>
			<abstract>
				<p>Consensus protocols can provide highly reliable and available distributed services. In these protocols, log entries are completely replicated to all servers. This complete-entry repli-cation causes high storage and network costs, which harms performance. Erasure coding is a common technique to reduce storage and network costs while keeping the same fault tolerance ability. If the complete-entry replication in consensus protocols can be replaced with an erasure coding replication, storage and network costs can be greatly reduced. RS-Paxos is the first consensus protocol to support erasure-coded data, but it has much poorer availability compared to commonly used consensus protocols, like Paxos and Raft. We point out RS-Paxos&apos;s liveness problem and try to solve it. Based on Raft, we present a new protocol, CRaft. Providing two different replication methods, CRaft can use erasure coding to save storage and network costs like RS-Paxos, while it also keeps the same liveness as Raft. To demonstrate the benefits of our protocols, we built a key-value store based on CRaft, and evaluated it. In our experiments , CRaft could save 66% of storage, reach a 250% improvement on write throughput and reduce 60.8% of write latency compared to original Raft.</p>
			</abstract>
		</profileDesc>
	</teiHeader>
	<text xml:lang="en">
		<body>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="1">Introduction</head><p>Consensus protocols, such as Paxos <ref type="bibr" target="#b11">[12]</ref> and Raft <ref type="bibr" target="#b13">[14]</ref>, can tolerate temporary failures in distributed services. They allow a collection of servers to work as a coherent group by keeping the commands in each server's log in a consistent sequence. These protocols typically guarantee safety and liveness, which means they always return correct results and can fully functional if no majority of the servers fail. Using these consensus protocols, commands can be properly replicated into each server in the same order, even if machine failures * These authors contributed equally to this work. § Dongsheng Wang (wds@tsinghua.edu.cn) is the corresponding author. may happen. Google's Chubby <ref type="bibr" target="#b2">[3]</ref> is one of the earliest systems using consensus protocols. In Chubby, metadata, like locks, are replicated through different nodes by Paxos. Since Gaios <ref type="bibr" target="#b1">[2]</ref>, consensus protocols have been used to replicate all user data (typically much larger than metadata) rather than only metadata. Recently, Raft and Paxos have been applied in real large-scale systems like etcd <ref type="bibr" target="#b7">[8]</ref>, TiKV <ref type="bibr" target="#b0">[1]</ref> and FSS <ref type="bibr" target="#b10">[11]</ref>, to replicate terabytes of user data with better availability.</p><p>In such systems, data operations will be translated into log commands and then replicated into all servers by consensus protocols. Thus, data will be transferred to all servers, and then flushed to disks. In consensus problems, to tolerate any F failures, at least N = (2F +1) servers are needed. Otherwise, a network partition may cause split groups to agree on different contents which is against the concept of consensus. Therefore, using consensus protocols to tolerate failures may cause high network and storage costs which can be around N times of the original amount of data. Since these protocols are now applied in large-scale systems and the data volume is growing larger, these costs become real challenges and they can prevent systems from achieving low latency and high throughput.</p><p>Erasure coding <ref type="bibr" target="#b15">[16]</ref> is an effective technique to reduce storage and network costs compared to full-copy replication. It divides data into fragments, and encodes the original data fragments to generate parity fragments. The original data can be recovered from any large-enough subset of fragments, so erasure coding can tolerate faults. If each server only needs to store a fragment (can be either an original data fragment or a parity one), not the complete copy of the data, storage and network costs can be greatly reduced. Based on the above properties, erasure coding may be a good solution to the challenges of storage and network costs in consensus protocols. Erasure coding is deployed in FSS <ref type="bibr" target="#b10">[11]</ref> for reducing storage cost. However, FSS uses a pipelined Paxos to replicate complete user data and metadata 5-ways before encoding. Therefore, extra network cost of FSS is still four times of the amount of data, which harms performance. RS-Paxos <ref type="bibr" target="#b12">[13]</ref> is the first consensus protocol to support erasure-coded data. Combining Paxos and erasure coding, RS-Paxos reduces storage and network costs. However, RS-Paxos has poorer availability compared to Paxos. RS-Paxos trades liveness to use erasure coding for better performance. In other words, a RS-Paxos-applied system of N = (2F + 1) servers cannot tolerate F failures any longer. This may be a serious problem since the system should tolerate enough failures. At the theoretical level, we tend to design a consensus protocol with the same level of liveness as Paxos and Raft. We examine this liveness problem and point out that this problem exists because the requirement of committing becomes stricter in RS-Paxos.</p><p>We present an erasure-coding-supported version of Raft, CRaft (Coded Raft). In CRaft, a leader has two methods to replicate log entries to its followers. If the leader can communicate with enough followers, it will replicate log entries by coded-fragments for better performance. Otherwise, it will replicate complete log entries for liveness. Like RS-Paxos, CRaft can handle erasure-coded data, so it can save storage and network costs. However, one major difference between CRaft and RS-Paxos is that CRaft has the same level of liveness as Paxos and Raft while RS-Paxos does not.</p><p>To verify the benefits of CRaft, we designed and built keyvalue stores based on different protocols, and evaluated them on Amazon EC2. In our experiments, CRaft could greatly save network traffic, leading to a 250% improvement on write throughput and a 60.8% reduction of write latency compared to original Raft. In addition, we proved that CRaft has the same availability as Raft.</p><p>In the remainder, first we briefly go through the background knowledge of Raft, erasure coding and RS-Paxos in Section 2. Next, we explain the details of our CRaft protocol in Section 3 and prove the safety property of CRaft in Section 4. Section 5 describes our implementation, experiments and evaluation. Finally, we discuss related work in Section 6 and conclude in Section 7.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2">Background</head><p>We begin by briefly describing Raft, erasure coding, RS-Paxos and then discuss RS-Paxos's liveness problem.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.1">Raft</head><p>Raft <ref type="bibr" target="#b13">[14]</ref> is one of the consensus protocols and it provides a good foundation for building practical systems. There are three server states in Raft, as shown in <ref type="figure" target="#fig_0">Figure 1</ref>. A leader is elected when a candidate receives votes from a majority of servers. A server can vote for a candidate only if the candidate's log is at least as up-to-date as the server's. Each server can vote at most once in each term, so Raft guarantees that there is at most one leader in one term.</p><p>The leader accepts log entries from clients and tries to replicate them to other servers, forcing the others' logs to agree with its own. When the leader finds out that one log  <ref type="figure" target="#fig_0">Figure 1</ref>: Three server states in Raft <ref type="bibr" target="#b13">[14]</ref> entry accepted in its term has been replicated to a majority of servers, this entry and its previous ones can be safely applied to its state machine. The leader will commit and apply these entries, and then inform followers to apply them. Consensus protocols for practical systems typically have the following properties:</p><p>• Safety. They never return incorrect results under all nonByzantine conditions.</p><p>• Liveness. They are fully functional as long as any majority of the servers are alive and can communicate with each other and with clients. We call this group of servers healthy.</p><p>The safety property in Raft is guaranteed by the Leader Completeness Property <ref type="bibr" target="#b13">[14]</ref>: if a log entry is committed in a given term, then that entry will be present in the logs of the leaders for all higher-numbered terms.</p><p>Liveness is guaranteed by Raft's rules. Typically, the number of servers in systems using consensus protocols, N, is odd. Assume that N = 2F + 1, then Raft can tolerate any F failures. We define a consensus protocol's liveness level as the number of failures that it can tolerate, so Raft has an F liveness level. Higher liveness level means better liveness. No protocol can reach an (F + 1) liveness level. If there exists a protocol with an (F + 1) liveness level, there can be two split groups of F healthy servers and these two groups can agree on different contents respectively, which is against the safety property.</p><p>Safety and liveness are the most important properties of consensus protocols. Raft can guarantee that the safety property always holds and it also reaches the highest possible liveness level F. Furthermore, Raft has been proved to be a good foundation for system building. According to these properties, we choose Raft as the basis to design our new protocol CRaft.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.2">Erasure Coding</head><p>Erasure coding is a common technique to tolerate faults in storage systems and network transmissions. A large number of codes have been put forward, but Reed-Solomon (RS) codes <ref type="bibr" target="#b15">[16]</ref> are the most commonly used ones. There are two configurable positive integer parameters in RS codes, k and m.</p><p>In this technique, data are divided into k fragments with equal sizes. Then, using these k original data fragments, m parity fragments can be computed by an encoding procedure. So there will be (k + m) fragments generated from the original data. The magic of a (k, m)-RS code is that any k out of total (k + m) fragments are enough to recover the original data, and that is how RS codes tolerate faults.</p><p>When a consensus protocol is applied, the number of the servers, N, is usually fixed. If each server only stores one fragment produced by a (k, m)-RS code whose parameters k and m are subject to k + m = N, storage and network costs can be reduced to 1/k compared to full-copy replication. However, how to guarantee the safety property and keep liveness as good as possible cannot be ignored.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.3">RS-Paxos</head><p>Combining erasure coding and Paxos, RS-Paxos is a reform version of Paxos which can save storage and network costs. In Paxos, commands are transferred completely. However, commands are transferred by coded-fragments in RS-Paxos. According to this change, servers can store and transfer only fragments in RS-Paxos, so storage and network costs can be reduced. The complete description of RS-Paxos can be found in the RS-Paxos paper <ref type="bibr" target="#b12">[13]</ref>.</p><p>To guarantee safety and liveness, Paxos and Raft are based on the inclusion-exclusion principle as follows.</p><formula xml:id="formula_0">|A ∪ B| = |A| + |B| − |A ∩ B| (1)</formula><p>The inclusion-exclusion principle guarantees that there is at least one server in two different majorities of servers, 1 and then the safety property can be guaranteed. The insight of RS-Paxos is to increase the size of the intersection set. Specifically, after choosing a (k, m)-RS code, the read quorum Q R , the write quorum Q W , and the number of the servers N, should fit the following formula.</p><formula xml:id="formula_1">Q R + Q W − N ≥ k<label>(2)</label></formula><p>Then if a command is chosen (like committed in Raft), at least Q W servers have accepted it. If a server wants to propose its own command, it will contact at least Q R servers in Prepare phase. Because of (2) and (1), at least k among this Q R servers have a fragment of the chosen command. So the proposer can recover the original command by using the k fragments and then it proposes the chosen value rather than its own. With the benefits of erasure coding, using RS-Paxos can greatly reduce storage and network costs when k &gt; 1. However, RS-Paxos decreases the fault tolerance number of failed servers. As Theorem 1 shows, RS-Paxos's liveness cannot be as good as Paxos or Raft. Proof. RS-Paxos works only if at least max{Q R , Q W } servers are alive, so</p><formula xml:id="formula_2">L RSP ≤ N − max{Q R , Q W }.</formula><p>According to (2), we have</p><formula xml:id="formula_3">max{Q R , Q W } ≥ (Q R + Q W )/2 ≥ (N + k)/2. Therefore, L RSP ≤ N − (N + k)/2 = F − (k − 1)/2 &lt; F.</formula><p>RS-Paxos roughly solves the consensus problem with erasure coding, but it cannot reach an F liveness level any longer as Theorem 1 shows. RS-Paxos requires more healthy servers than Paxos or Raft to function. It is important to present a consensus protocol that not only supports erasure coding but also possesses the same liveness level as Paxos and Raft.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3">CRaft, a Reform Version of Raft that Supports Erasure Coding</head><p>Liveness is one of the most important properties of consensus protocols. However, the previous erasure-coding-supporting protocol, RS-Paxos, fails to reach an F liveness level. Thus, our goal is to design a new erasure-coding-supporting protocol (so it can save storage and network costs) that possesses an F liveness level. This new protocol is based on Raft, so it inherits the basic concepts in Raft.</p><p>To reduce network cost, leaders in the new protocol should be able to replicate their log entries to followers by using coded-fragments, like RS-Paxos. However, as Theorem 1 shows, a protocol with only coded-fragment replication method cannot reach an F liveness level. In fact, Theorem 2 shows that the complete-entry replication method in Raft is necessary for an F liveness level protocol.</p><p>Theorem 2. When there are only (F + 1) healthy servers in an F liveness level protocol, an entry e can be committed only after the complete entry has been stored in all (F + 1) healthy servers' logs.</p><p>Proof. If a healthy server S did not store complete entry e when e was committed, the protocol could not guarantee that it could work fully functionally in any (F + 1) healthy servers. Suppose only S and the previous unhealthy servers were healthy at the next moment, these (F + 1) currently healthy servers could not recover complete e, then the protocol had to wait for other servers. So when e was committed, all (F + 1) healthy servers had this complete entry.</p><p>Both coded-fragment replication and complete-entry replication are required in our new protocol. Using codedfragment replication can save storage and network costs, while complete-entry replication can keep liveness.</p><p>Next we will discuss the details of these two replication methods, and then we try to integrate them into a complete protocol, CRaft. To explain the details of CRaft, we first define some parameters. We assume that there are N = <ref type="figure">(</ref>  </p><formula xml:id="formula_4">Performance Different Protocols Indicators CRaft Raft RS-Paxos storage cost 2 2 2F F F/ / /k k k + + + 1 1 1 2F + 1 2 2 2F F F/ / /k k k + + + 1 1 1 network cost 2 2 2F F F/ / /k k k 2F 2 2 2F F F/ / /k k k disk I/O 2 2 2F F F/ / /k k k + + + 1 1 1 2F + 1 2 2 2F F F/ / /k k k + + + 1 1 1 liveness level F F F F F F F − (k − 1)/2</formula><p>servers in the protocol. Since CRaft should have the same availability as Raft, its liveness level should be F, which means that CRaft can still work when at least (F + 1) servers are healthy. We choose a (k, m)-RS code for CRaft. k and m should satisfy k + m = N, so each server in the protocol can correspond to one coded-fragment for each log entry. As <ref type="table" target="#tab_1">Table 1</ref> shows, CRaft supports erasure coding so it can save storage and network costs, while it possesses an F liveness level at the same time.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.1">Coded-fragment Replication</head><p>When a leader in CRaft tries to replicate an entry by codedfragment replication method, it first encodes the entry. In Raft, each log entry should contain its original content from clients and also its term and index in the protocol. When a CRaft leader tries to encode an entry, the content can be encoded into N = (k + m) fragments by the (k, m)-RS code that the protocol chooses. Term and index should not be encoded, since they play important roles in the protocol. <ref type="figure" target="#fig_1">Figure 2</ref> shows the encoding procedure. After encoding, the leader will have N coded-fragments of the entry. Then it will send the corresponding coded-fragment to each follower. After receiving its corresponding codedfragment, each follower will reply to the leader. When the leader confirms that at least (F + k) servers store a codedfragment, the entry and its previous ones can be safely applied. The leader will commit and apply these entries, and then inform followers to apply them. The commitment condition of coded-fragment replication is stricter than Raft's. This commitment condition also implies that a leader cannot use coded-fragment replication to replicate an entry and then commit it when there are not (F + k) healthy servers.</p><p>When a leader is down, a new leader will be elected. If an entry is already committed, the election rule of Raft guarantees that the new leader at least has a fragment of the entry, which means the safety property can be guaranteed. Since at least (F + k) servers store a fragment of a committed entry, there should be at least k coded-fragments in any (F + 1) servers. <ref type="bibr" target="#b1">2</ref> So the new leader can collect k coded-fragments and then recover the complete entry when there are at least (F +1) healthy servers, which means liveness can be guaranteed. <ref type="figure" target="#fig_2">Figure 3</ref> shows an example of coded-fragment replication and explains why the commitment condition becomes stricter in this replication method. If a leader can commit an entry when it only confirms that F + 1 = 4 servers store the entry, new leaders may be unable to recover committed entries. Like the Index 3 entry in <ref type="figure" target="#fig_2">Figure 3</ref>, it should not be committed because only five servers stored it. <ref type="bibr" target="#b2">3</ref> If it was committed, consider the situation that first three servers could not connect to other servers while other four servers were all healthy. CRaft should still be able to work because its liveness level is F = 3. However, there were at most two fragments of the Index 3 entry in the healthy servers, so new leaders were not able to recover the complete entry. The protocol had to wait for the first three servers, which means liveness cannot be guaranteed.</p><p>In coded-fragment replication, followers can receive and store coded-fragments of entries. However, in Raft, followers must receive and store complete entries. According to the encoding procedure, the size of coded-fragments are about 1/k of the size of complete entries. So storage and network costs can be greatly reduced when using coded-fragment replication.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.2">Complete-entry Replication</head><p>To reduce storage and network costs, leaders are encouraged to use coded-fragment replication. However, coded-fragment replication will not work when there are not (F + k) healthy servers. When the number of healthy servers is greater than F and less than (F + k), the leader should use complete-entry replication method to replicate entries. In complete-entry replication, the leader has to replicate the complete entry to at least (F + 1) servers before committing the entry, just like Raft. Since the committing rule is the same as Raft, safety and liveness are not problems. However, since CRaft supports coded-fragments, the leader can replicate an entry by coded-fragments rather than the complete entry to remaining followers after committing the entry.</p><p>In practical implementations, there are many strategies to replicate an entry via complete-entry replication. Define an integer parameter 0 ≤ p ≤ F. The leader can first send complete copies of an entry to (F + p) followers and then send coded-fragments to remaining (F − p) followers. A smaller p means less storage and network costs, but it also means a higher probability to have longer committing latency (if no F out of (F + p) answers return in time, more rounds of communications may be required before commitment). When p = F, the strategy becomes the same as Raft's replication method. <ref type="figure">Figure 4</ref> shows different strategies when p = 0, 1, F. In our implementation for experiments, we choose p = 0.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.3">Prediction</head><p>Using coded-fragment replication rather than complete-entry replication can achieve better performance, if both methods can replicate successfully. A greedy strategy is that the leader always tries to replicate entries by coded-fragment replication. If it finds out that there are not (F + k) healthy servers, it turns to replicate the entry by complete-entry replication. However, if the leader already knows that the number of healthy servers is less than (F + k), the first replication attempt via codedfragments is meaningless.</p><p>Choosing the replication method accurately can reach the best performance. However, the leader cannot be sure about the status of other servers. So it can only predict how many healthy servers it could communicate with when it tries to replicate an entry. The leader can use the most recent heartbeat answers to estimate the number of healthy servers. This prediction should be accurate enough.</p><p>When a leader tries to replicate an entry, it should use this prediction method to determine how to replicate. If the number of most recent heartbeat answers are not less than (F + k), the leader should use coded-fragment replication first, and then it tries complete-entry replication if coded-fragment replication does not work. Otherwise, the leader directly uses complete-entry replication. <ref type="figure">Figure 5</ref> concludes this process.</p><p>It is worth noting that this prediction is independent of the method that the leader chose to replicate last entry. It only relies on the most recent heartbeat answers. So it is quite possible that a leader used complete-entry replication to replicate the last entry and then it automatically chose coded-fragment replication to replicate a new entry.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.4">Newly-elected Leader</head><p>Both replication methods can guarantee safety and liveness when leaders have all complete entries. However, when a leader is newly elected, it is likely that the newly-elected leader's log does not have complete copies but only codedfragments of some entries. These incomplete entries are not guaranteed recoverable when there are only (F + 1) healthy servers. If some of these unrecoverable entries have not been applied by the newly-elected leader, the leader has no way to deal with these entries. The leader cannot send AppendEntries RPCs containing any one of these entries to the followers who need them, 4 so these unrecoverable entries will retain unapplied. According to the rules of Raft, the leader's new entries received from clients cannot be replicated to the followers as well. So the protocol fails to function fully and the protocol's liveness property cannot be guaranteed. Therefore, some extra operations are required to guarantee liveness. The coded-fragments in the newly-elected leader's log can be applied or unapplied by the leader. If a coded-fragment is applied, the entry must have been committed by a previous leader. According to the commitment condition of two replication methods, at least k coded-fragments or one complete copy of the entry are stored in any (F + 1) servers. So the leader can always recover this entry when there are (F + 1) healthy servers. However, if a coded-fragment is unapplied, no rules can guarantee that this entry can be recovered when there are (F + 1) healthy servers.</p><p>To deal with unapplied coded-fragments, newly-elected leaders in CRaft should do the LeaderPre operation, before they can become fully-functioned leaders.</p><p>When a leader is newly-elected, it first checks its own log, finds out its unapplied coded-fragments. Then it asks followers for their own logs, focusing on the indexes of the unapplied coded-fragments. At least (F + 1) answers (including the new leader itself) should be collected or the new leader should keep waiting. The new leader should try to recover its unapplied coded-fragments in sequence. For each entry, if there are at least k coded-fragments or one complete copy in (F + 1) answers, it can be recovered, but not allowed to be committed or applied immediately. Otherwise, the new leader should delete this entry and all the following ones (including complete entries) in its log. After recovering or deleting all the unapplied entries, the whole LeaderPre operation can be done. During LeaderPre, the newly-elected leader should keep sending heartbeats to other servers, preventing them from timing out and starting new elections. <ref type="figure" target="#fig_4">Figure 6</ref> shows examples of LeaderPre. In <ref type="figure" target="#fig_4">Figure 6</ref>, N = 5 and k = 3. S1 committed the first two entries and then crashed, and other servers had only applied the first entry. S2 was elected as a new leader, and it would do LeaderPre. It first asked followers about the entries in Index 2 and Index 3. In <ref type="figure" target="#fig_4">Figure 6</ref>(a), after receiving answers from itself, S3 and S4, it tried to recover the two entries. There were three fragments of the Index 2 entry and two fragments of the Index 3 entry. So S2 should recover the Index 2 entry and delete the Index 3 entry. While in <ref type="figure" target="#fig_4">Figure 6</ref>(b), S3, S5 and S2 itself all had the Index 2 entry and the Index 3 entry. So S2 could recover both of them. Though the uncommitted Index 3 entry would be handled differently if S2 collected answers from different groups of servers, the committed Index 2 entry would be guaranteed to be recovered by LeaderPre.</p><p>After adding LeaderPre, the Leader Append-Only Property in Raft has an exception: deletion in LeaderPre. In original Raft, the original Leader Append-Only Property is the key to prove safety, so it is necessary to prove that LeaderPre will not harm safety. The proof can be found in Section 4.</p><p>There are two major reasons that leaders in original Raft do not delete entries. First, leaders have no way to find out whether an unapplied entry was committed by old leaders or not. Second, even though an entry is unapplied, leaders can still replicate it to followers since it has the entry's complete copy, so there is no need to delete it. In CRaft, if there are enough fragments of an unapplied entry, the new leader can recover it and be able to replicate it. Otherwise, the new leader can conclude that this entry is uncommitted. Unrecoverable entries may harm CRaft's liveness, but unrecoverable also means uncommitted, so it is reasonable to delete them. Based on Raft, CRaft provides two different replication methods for supporting erasure coding while keeping liveness. A prediction based on the most recent heartbeat answers helps the leader to choose replication method. In addition, to guarantee liveness, LeaderPre can help newly-elected leaders deal with unapplied coded-fragments.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.5">Performance</head><p>The advantages of CRaft are shown in <ref type="table" target="#tab_1">Table 1</ref>. Using a (k, m)-RS code, CRaft has advantages in reducing storage and network costs. In CRaft, ideally, only coded-fragments are needed to be transferred between the leader and followers, which indicates that the network cost can be saved to 1/k. With this huge saving, CRaft can reach a much shorter latency and a higher throughput compared to original Raft.</p><p>The major difference between CRaft and RS-Paxos is liveness. To tolerate F failures, CRaft only needs to deploy (2F + 1) servers. However, RS-Paxos needs to deploy at least (2F + 3) servers. With the same parameter k in erasure coding, less servers required means that CRaft can save more storage and network costs compared to RS-Paxos.</p><p>One of the major concerns is the extra consumption when a leader is newly-elected. The new leader has to collect entry fragments if there are some behind followers. However, storage and network costs of CRaft in the worst situations are basically the same as Raft in any situations. Also, in most cases, the first new leader can replicate the old entries to all behind followers, so each entry only needs to be collected once extra. This harms the performance a little, but network cost is still greatly reduced generally, compared to Raft.</p><p>LeaderPre latency may affect election time, so it may affect the protocol's availability. This kind of latency is possibly affected by the number of the new leader's unapplied entries. However, a new leader can get brief information of its unapplied entries first and then collect them later. The time consumption of communicating brief information is quite short so that LeaderPre latency will not harm the protocol's availability seriously.</p><p>It is optional that a newly-elected leader first collect the whole state machine by communicating with its healthy followers. This operation is helpful to reduce read latency in the future, while it may significantly increase election time so that it may harm the protocol's availability. So there is a trade-off between using it or not.</p><p>If there are far behind followers, we recommend that the followers should catch up with the leader entry by entry when they become healthy again. Snapshots can be used to compact logs in CRaft. However, the deployment of snapshots can be much more complex than original Raft, since different servers store different fragments in CRaft.</p><p>Encoding time can be a problem too. However, many studies showed that encoding time is short enough compared to transfer time in practical systems <ref type="bibr" target="#b5">[6]</ref>. It is worth having a slightly longer encoding time to reduce network cost.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4">Safety Argument</head><p>The key of safety in Raft is the Leader Completeness Property. Since we add a new operation LeaderPre in CRaft, we have to prove that the property still holds. First we give the proofs of the Log Matching Property and its two related lemmas, then we use them to prove the Leader Completeness Property. Lemma 1. A server S has a log entry e, and e was first added into the protocol in Term T, then e and its previous entries in S's log now are the same as the entries in leader T 's log when e was first added into the protocol.</p><p>Proof. Guaranteed by contents in AppendEntries RPC <ref type="bibr" target="#b13">[14]</ref>. Noticing deletions in LeaderPre always delete the newest part in a log, this Lemma can be proved by the same induction technique in the Raft paper <ref type="bibr" target="#b13">[14]</ref>.</p><p>Theorem 3. Log Matching Property: if two logs contain an entry with the same index and term, then the logs are the same in all entries up through the given index.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>USENIX Association 18th USENIX Conference on File and Storage Technologies 303</head><p>Proof. As Lemma 1 holds, these two logs are the same as the leader's log when the entry was first added into the protocol.</p><p>Lemma 2. A server S has a log entry e, then entries with the same term and smaller index are in S's log.</p><p>Proof. A leader cannot add entries to its log until LeaderPre is done. When e was accepted, entries with the same term and smaller index must be in the leader's log. According to Lemma 1, Lemma 2 holds.</p><p>Theorem 4. Leader Completeness Property: if a log entry e is committed in a given term (Term T), then e will be present in the logs of the leaders for all higher-numbered terms, and e will not be deleted in any higher-numbered term's LeaderPre.</p><p>Proof. We assume that the Leader Completeness Property does not hold, then we prove a contradiction. Since indexes are positive integers, there is a log entry e with a smallest index that breaks the property. Consider two kinds of events: one, Leader U (U &gt; T ) does not have e at the time of its election; and two, e is deleted in LeaderPre by Leader U (U &gt; T ).</p><p>Assume that event one first appears. According to assumption, leaders between Term T and Term U had e at the time of their own elections, and e was never deleted in LeaderPre. So e was never deleted from anyone's log since Term T . Leader T replicated e on at least (F + 1) servers (no matter which replication method Leader T used), and Leader U received votes from at least (F + 1) servers. Since (F + 1) + (F + 1) = N + 1 &gt; N, at least one server both accepted e from Leader T and voted for Leader U . This server must have accepted e from Leader T before voting for Leader U , otherwise it would reject Leader T 's AppendEntries request. Since e was never deleted since Term T , this voter had e and voted for Leader U at the same time. So Leader U 's log must have been as up-to-date as the voter's. If the voter and Leader U shared the same last log term, then Leader U 's log must have been at least as long as the voter's. According to Lemma 2, Leader U 's log must have e and this is a contradiction. Otherwise, Leader U 's last log term must have been larger than the voter's. Since e was in the voter's log, Leader U 's last log term, P, was larger than T . According to assumption, in Term P, Leader P 's log had e. According to Lemma 1, Leader U 's log must have e and this is a contradiction.</p><p>So event two must appear earlier than event one. According to assumption, leaders after Term T had e at the time of their own elections, and e was never deleted in LeaderPre before. So e was never deleted from anyone's log since Term T . Since e was deleted in LeaderPre, there was an unrecoverable entry e 1 . If e 1 was not e, since e was deleted, the index of e 1 must be smaller than e's. Because e was committed by Leader T , and e 1 had a smaller index than e, so e 1 had been committed. Then e 1 broke the Leader Completeness Property and had a smaller index than e, this is a contradiction. So e was deleted because it was unrecoverable. In Term T , Leader T replicated e to at least (F + 1) servers by complete copies, or at least (F + k) servers by coded-fragments. Since e was never deleted from anyone's log since Term T , According to (1), there were at least one complete copy or k coded-fragments in any (F + 1) answers. Then e was recoverable and this is a contradiction.</p><p>Then the contradiction is completely proved. The Log Matching Property guarantees that future leaders will also contain entries that are committed indirectly (not by its term's leader). So, the Leader Completeness Property holds.</p><p>After proving the Leader Completeness Property, we can conclude the State Machine Safety Property effortlessly.</p><p>Theorem 5. State Machine Safety Property: if a server has applied a log entry at a given index to its state machine, no other server will ever apply a different log entry for the same index.</p><p>Proof. Suppose T is the lowest term in which any server applies an entry at the given index i. If a server applied an entry at Index i in Term U, the entry's term must be the same as the term of the Index i entry in Leader U 's log. According to the Leader Completeness Property, the term of the Index i entry in Leader U 's log should be identical to the term of the Index i entry in Leader T 's log. Since T is constant when i is given, the State Machine Safety Property holds.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5">Experiments and Evaluation</head><p>To evaluate our protocol, we first designed a key-value store based on Raft. Then we modified it to adapt CRaft. Since RSPaxos is based on Paxos but not Raft, it is difficult to compare RS-Paxos with CRaft or Raft directly. We took the insight of RS-Paxos and implemented an equivalent protocol named RS-Raft onto our key-value store. The parameters in RS-Raft have the same meanings as the ones in RS-Paxos, which are described in Section 2.3. We ran experiments on the key-value store with different protocols to present an evaluation.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="1">4 16 64 128 256 512 10242048</head><p>Value Size (kB) </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5.1">Key-value Store Implementation</head><p>The key-value store we design supports three kinds of operations: Set, Append and Get. Set and Append operations must be logged, while Get operations are not. The keys were accessed uniformly in our experimental workloads. Followers can just store fragments of their entries to reduce storage cost. However, the leader should keep complete copies of entries to ensure performance of Get. After a new leader is elected, if there is a Get operation and the new leader only has a fragment of the data, it should first force at least (k − 1) followers' log to catch up with its own, then collect enough data fragments from them and decode the data. If the leader can directly respond to client's Get, we call this operation a fast read. Otherwise, if the leader should collect fragments from followers first, we call this operation a recovery read.</p><p>We used C++ to implement our key-value store. The structure of each server in our key-value store is shown in <ref type="figure" target="#fig_5">Figure 7</ref>. The consensus protocol can be Raft, CRaft and RS-Raft. We used RCF 3.0 <ref type="bibr" target="#b17">[18]</ref> to implement RPC, and we chose TCP as transmission protocol. Jerasure 2.0 <ref type="bibr" target="#b14">[15]</ref> is the library that we used for erasure coding.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5.2">Setup</head><p>We ran experiments on the configurations of N = 5 and N = 7, which are reasonable choices when using consensus protocols supporting erasure coding. k was set to 3, so the erasure code we used is a (3, 2)-RS code (when N = 5) or a (3, 4)-RS code (when N = 7).</p><p>In N = 5 configuration, F = 2, so Raft and CRaft can tolerate any two failures. We chose Q R = Q W = 4 for RS-Raft, so it can tolerate one failure. In N = 7 configuration, F = 3, so Raft and CRaft can tolerate any three failures. We chose Q R = Q W = 5 for RS-Raft, so it can tolerate two failures.</p><p>Our experiments were run on Amazon EC2 platform. We used six (when N = 5) or eight (when N = 7) instances, one of them played the role of clients and the other instances were servers. Each instance has two virtual CPU cores and 8 GiB memory. The network bandwidth of each instance is about 550 Mbps. The storage devices we used are Amazon EBS General Purpose SSDs, each with 80000 IOPS and 1750 MB/s throughput.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5.3">Evaluation</head><p>We evaluated the protocols by measuring write latency, write throughput, network cost, liveness level and recovery read latency. Each experiment is repeated at least 100 times.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5.3.1">Latency</head><p>Figure 8 and <ref type="figure" target="#fig_7">Figure 9</ref> show commitment latency of various value-sized write requests with error bars. Operations with a value size that larger than 2 MB can be solved by splitting it into multiple Append operations. Each latency consists of two parts. The part at the bottom with shadow in <ref type="figure" target="#fig_6">Figure 8</ref> and <ref type="figure" target="#fig_7">Figure 9</ref> is communication time from clients to the leader. This part of time is only influenced by value size. The other part is latency from the moment that the leader starts the entry to the moment that the leader commits it, and it is the part that we focus. When value size is lower than 128 kB, three protocols perform evenly. In these situations, latency is mainly dominated by disk I/O. Since data amount is too small, even though CRaft and RS-Raft can save the amount of data flushed to disks, the I/O time usage remains almost the same, so there is not much difference between these protocols on latency.</p><p>When value size becomes larger, the advantage of CRaft and RS-Raft can be revealed. Network traffic and disk I/O both affect latency. Since CRaft and RS-Raft save network cost and disk I/O greatly, they reduce 20%-45% of latency compared to Raft when N = 5, and 20%-60.8% when N = 7.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5.3.2">Throughput</head><p>Since CRaft and RS-Raft can save the amount of data transferred and flushed to disks, they are expected to have bet- ter throughput than Raft. We simulate the situation that 100 clients raise write request, and evaluate throughput of the leader. <ref type="figure" target="#fig_0">Figure 10</ref> and <ref type="figure" target="#fig_0">Figure 11</ref> show the experiment results.</p><p>The results show that CRaft and RS-Raft can improve throughput compared to Raft. They can reach about 150%-200% improvements when value size is relatively large.</p><p>With value size grows larger, throughput first increases and reaches a peak, then it will fall. Throughput will fall because of network congestion. How to prevent this network congestion problem is interesting, but it is not our concern in this paper. We compare the peak throughput of these three protocols. CRaft and RS-Raft can have a 180% improvement on write throughput when N = 5 and 250% when N = 7. Also, the throughput peaks of CRaft and RS-Raft both appear much later than Raft's. This is another advantage of CRaft and RS-Raft because of their reductions on network cost. RS-Raft's throughput can be slightly better than CRaft's when the numbers of servers are equal, because more AppendEntries replies are needed before commitment in CRaft. However, it is unfair to compare these two protocols' throughput in such way, since RS-Raft's liveness is worse than CRaft's. To tolerate two failures, seven servers are required when using RS-Raft, while only five servers are required when using CRaft. So it is fairer to compare RS-Raft's throughput when N = 7 with CRaft's throughput when N = 5. According to <ref type="figure" target="#fig_0">Figure 10</ref> and <ref type="figure" target="#fig_0">Figure 11</ref>, in this comparison, CRaft has an advantage.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5.3.3">Network Cost</head><p>We monitored the amount of data transferred from the leader to directly prove that our protocol can save network cost. In this experiment, clients raised a write request every 70 ms. <ref type="figure" target="#fig_0">Figure 12</ref> shows the monitoring results when N = 7. The leader in Raft transfers about 250% of data amount compared to the leader in CRaft. This result directly proves that CRaft can greatly reduce network cost. However, ideally, when k = 3, the ratio between the amount of data transferred from a Raft leader and a CRaft leader should be close to 300%. The gap between 250% and 300% may be caused by costs that are not generated by the consensus protocols.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5.3.4">Liveness</head><p>The major difference between CRaft and RS-Raft is liveness. CRaft can tolerate any two failures when N = 5, and it can tolerate any three failures when N = 7. Though we choose the parameters for RS-Raft to reach its highest possible liveness level, RS-Raft can only tolerate one failure when N = 5, and it can only tolerate two failures when N = 7. <ref type="figure" target="#fig_0">Figure 13</ref> shows the throughput of different protocols when the number of healthy servers changes in N = 7 experiments with error bars. RS-Raft performs very well when the number of healthy servers is no less than 5, but it cannot work when the number is 4. CRaft performs just like RS-Raft when the number of healthy servers is 6 or 7, while it performs worse than RS-Raft when the number is 5. This is because CRaft can only use complete-entry replication when the number of healthy servers is 5, so its throughput is degraded. However, CRaft can still work when the number of healthy servers is 4, just like Raft. And this proves CRaft's liveness advantage to RS-Raft.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5.3.5">Recovery Read</head><p>One of our concerns is that recovery read will take too much time compared to fast read. The leader in Raft always does fast read, but sometimes new leaders in CRaft may have to do recovery read. Noticing that a new leader only needs to do at most one recovery read to a specific key. If a leader needs to handle several Get operations of one key in its term, only the first time it has to do recovery read. So the existence of recovery read may not harm performance too much when servers do not crash too often. We made a new leader handle a Get operation in different protocols, and then we repeated this Get operation nine more times and calculated average latency. The results are shown in <ref type="figure" target="#fig_0">Figure 14</ref>. CRaft takes at most 140% more time compared to Raft handling the first Get operation. However, time usages of ten operations between different protocols become close enough. So we can conclude that extra time usage of recovery read is acceptable.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="6">Related Work</head><p>Many systems use consensus protocols to provide highly reliable and available distributed services. In early years, most of them use Paxos to achieve consistency, like Chubby <ref type="bibr" target="#b2">[3]</ref> and Spanner <ref type="bibr" target="#b4">[5]</ref>. After the presence of Raft, many systems are using it for understandability, such as etcd <ref type="bibr" target="#b7">[8]</ref> and TiKV <ref type="bibr" target="#b0">[1]</ref>. Recent years, consensus protocols are not only used to replicate small size database records, but also files and data objects. Using Paxos, Gaios <ref type="bibr" target="#b1">[2]</ref> builds a high performance data store. To prevent the service from compromising availability, FSS <ref type="bibr" target="#b10">[11]</ref> uses a pipelined Paxos to replicate both user data and metadata. Also, etcd and TiKV use Raft to consistently distribute user data to different servers. This kind of systems are target systems of CRaft.</p><p>Erasure coding is first developed in network transmission area and now it is applied in many distributed storage systems, such as Ceph <ref type="bibr" target="#b18">[19]</ref>, HDFS <ref type="bibr" target="#b16">[17]</ref> and Microsoft Azure <ref type="bibr" target="#b9">[10]</ref>. The most focus problem about erasure coding now is that its recovery cost is too high compared to simple replication, and there are many works trying to solve this problem <ref type="bibr" target="#b6">[7,</ref><ref type="bibr" target="#b9">10]</ref>. Our work does not focus on this area, but we have another contribution on erasure coding. The methods that most systems replicate erasure-coded fragments are similar to using the two-phase commit protocol <ref type="bibr" target="#b8">[9]</ref>. This kind of methods have a high probability to fail in an asynchronous network, while CRaft can still work well in this situation.</p><p>RS-Paxos <ref type="bibr" target="#b12">[13]</ref> is the first consensus protocol supporting erasure coding. However, it cannot reach the best liveness level and it misses important details to build a practical system. Our new protocol CRaft solves the above problems. Giza <ref type="bibr" target="#b3">[4]</ref> uses metadata versioning to provide consistency for erasure coding objects. However, its method mainly focuses on safety and ignores liveness when transferring user data. Liveness can be optimized by using CRaft.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="7">Conclusions</head><p>We presented CRaft, an erasure-coded version of Raft. CRaft is based on Raft while it extents Raft to support erasure coding. With the help of erasure coding, storage and network costs can be greatly reduced.</p><p>The previous erasure-coding-supporting protocol, RSPaxos, fails to retain an F liveness level like Paxos or Raft. CRaft solves this problem. In other words, to tolerate F faults, CRaft only needs (2F + 1) servers while RS-Paxos needs more. So CRaft can save more storage and network costs.</p><p>We analyzed the performance of different protocols and we concluded that CRaft can reduce storage and network costs most while it has the best liveness. We designed a keyvalue store and ran experiments on it. The results show that CRaft can reduce 60.8% of latency and improve throughput by 250% compared to Raft. In the future, we will attempt to implement CRaft onto practical systems.</p></div><figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_0"><head>Theorem 1 .</head><label>1</label><figDesc>Liveness level of RS-Paxos, L RSP , is always less than F when k &gt; 1. 1 If |A| &gt; |A ∪ B|/2 and |B| &gt; |A ∪ B|/2, |A ∩ B| = |A| + |B| − |A ∪ B| &gt; 0.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_1"><head>Figure 2 :</head><label>2</label><figDesc>Figure 2: The encoding procedure in CRaft.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_2"><head>Figure 3 :</head><label>3</label><figDesc>Figure 3: An example of coded-fragment replication. A square represents a complete entry, while a triangle represents a fragment of an entry. Yellow shadow means that the corresponding servers of the entries were not healthy. At T = 0, the leader got three entries and it tried to replicate them. At T = 1, followers received entry fragments with varying degrees of success. At T = 2, three servers, including the leader, failed.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_3"><head>Figure 4 :Figure 5 :</head><label>45</label><figDesc>Figure 4: Examples of complete-entry replication with parameter p = 0, 1, F when N = 7. A square represents a complete entry, while a triangle represents a fragment of an entry.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_4"><head>Figure 6 :</head><label>6</label><figDesc>Figure 6: Examples of LeaderPre. A square represents a complete entry, while a triangle represents a fragment of an entry.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_5"><head>Figure 7 :</head><label>7</label><figDesc>Figure 7: The structure of each server in our key-value store.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_6"><head>Figure 8 :</head><label>8</label><figDesc>Figure 8: Latency in different value sizes when N = 5.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_7"><head>Figure 9 :</head><label>9</label><figDesc>Figure 9: Latency in different value sizes when N = 7.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_8"><head>Figure 10 :</head><label>10</label><figDesc>Figure 10: Throughput in different value sizes when N = 5.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_9"><head>Figure 11 :</head><label>11</label><figDesc>Figure 11: Throughput in different value sizes when N = 7.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_10"><head>Figure 14 :</head><label>14</label><figDesc>Figure 12: The leader's network consumption in Raft and CRaft when N = 7.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_1" validated="false"><head>Table 1 : Comparisons among Different Protocols</head><label>1</label><figDesc></figDesc><table></table></figure>

			<note place="foot" n="2"> According to (1), the number of the servers storing a fragment of a committed entry is at least (F + k) + (F + 1) − N = 2F + 1 − N + k = k. 3 The entry can be committed only if at least (F + k) servers store it. Since F + k = 3 + 3 &gt; 5, the Index 3 entry should not be committed.</note>

			<note place="foot" n="4"> CRaft inherits Raft&apos;s RPCs [14], the only difference between their RPCs is that entries can be encoded in CRaft&apos;s AppendEntries RPC.</note>

			<note place="foot" n="302"> 18th USENIX Conference on File and Storage Technologies USENIX Association</note>

			<note place="foot" n="304"> 18th USENIX Conference on File and Storage Technologies USENIX Association</note>

			<note place="foot" n="306"> 18th USENIX Conference on File and Storage Technologies USENIX Association</note>
		</body>
		<back>

			<div type="acknowledgement">
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Acknowledgments</head><p>We thank all reviewers for their insightful comments, and especially our shepherd Darrell D. E. Long for his guidance during our camera-ready preparation. We also thank Yinxing Hou, Hongmin Lou and Rui Mao for helpful discussions. </p></div>
			</div>

			<div type="references">

				<listBibl>

<biblStruct xml:id="b0">
	<monogr>
		<title level="m" type="main">TiKV: A distributed transactional keyvalue database</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Tikv</forename><surname>Authors</surname></persName>
		</author>
		<ptr target="https://tikv.org/" />
		<imprint>
			<date type="published" when="2019" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b1">
	<analytic>
		<title level="a" type="main">Paxos replicated state machines as the basis of a high-performance data store</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">William</forename><forename type="middle">J</forename><surname>Bolosky</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Dexter</forename><surname>Bradshaw</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Randolph</forename><forename type="middle">B</forename><surname>Haagens</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Norbert</forename><forename type="middle">P</forename><surname>Kusters</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Peng</forename><surname>Li</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 8th USENIX Symposium on Networked Systems Design and Implementation (NSDI &apos;11)</title>
		<meeting>the 8th USENIX Symposium on Networked Systems Design and Implementation (NSDI &apos;11)</meeting>
		<imprint>
			<date type="published" when="2011" />
			<biblScope unit="page" from="141" to="154" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b2">
	<analytic>
		<title level="a" type="main">The Chubby lock service for looselycoupled distributed systems</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Michael</forename><surname>Burrows</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 7th Symposium on Operating Systems Design and Implementation (OSDI &apos;06)</title>
		<meeting>the 7th Symposium on Operating Systems Design and Implementation (OSDI &apos;06)</meeting>
		<imprint>
			<date type="published" when="2006" />
			<biblScope unit="page" from="335" to="350" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b3">
	<analytic>
		<title level="a" type="main">Giza: Erasure coding objects across global data centers</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Shuai</forename><surname>Yu Lin Chen</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Jinyang</forename><surname>Mu</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Cheng</forename><surname>Li</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Jin</forename><surname>Huang</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Aaron</forename><surname>Li</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Douglas</forename><surname>Ogus</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Phillips</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 2017 USENIX Annual Technical Conference (USENIX ATC &apos;17)</title>
		<meeting>the 2017 USENIX Annual Technical Conference (USENIX ATC &apos;17)</meeting>
		<imprint>
			<date type="published" when="2017" />
			<biblScope unit="page" from="539" to="551" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b4">
	<analytic>
		<title level="a" type="main">Spanner: Google&apos;s globally distributed database</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">James</forename><forename type="middle">C</forename><surname>Corbett</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Jeffrey</forename><surname>Dean</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Michael</forename><surname>Epstein</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Andrew</forename><surname>Fikes</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Christopher</forename><surname>Frost</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><forename type="middle">J</forename><surname>Furman</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Sanjay</forename><surname>Ghemawat</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Andrey</forename><surname>Gubarev</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Christopher</forename><surname>Heiser</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Peter</forename><surname>Hochschild</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Wilson</forename><forename type="middle">C</forename><surname>Hsieh</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Sebastian</forename><surname>Kanthak</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Eugene</forename><surname>Kogan</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Hongyi</forename><surname>Li</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Alexander</forename><surname>Lloyd</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Sergey</forename><surname>Melnik</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">David</forename><surname>Mwaura</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">David</forename><surname>Nagle</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Sean</forename><surname>Quinlan</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Rajesh</forename><surname>Rao</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Lindsay</forename><surname>Rolig</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Yasushi</forename><surname>Saito</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Michal</forename><surname>Szymaniak</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Christopher</forename><surname>Taylor</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Ruth</forename><surname>Wang</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Dale</forename><surname>Woodford</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">ACM Transactions on Computer Systems (TOCS)</title>
		<imprint>
			<biblScope unit="volume">31</biblScope>
			<biblScope unit="issue">3</biblScope>
			<biblScope unit="page" from="1" to="8" />
			<date type="published" when="2013" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b5">
	<monogr>
		<title level="m" type="main">Ceph Jerasure and ISA plugins benchmarks</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Loic</forename><surname>Dachary</surname></persName>
		</author>
		<ptr target="https://blog.dachary.org/2015/05/12/ceph-jerasure-and-isa-plugins-benchmarks/" />
		<imprint>
			<date type="published" when="2015" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b6">
	<analytic>
		<title level="a" type="main">Network coding for distributed storage systems</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Alexandros</forename><forename type="middle">G</forename><surname>Dimakis</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Brighten</forename><surname>Godfrey</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Yunnan</forename><surname>Wu</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Martin</forename><forename type="middle">J</forename><surname>Wainwright</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Kannan</forename><surname>Ramchandran</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE Transactions on Information Theory</title>
		<imprint>
			<biblScope unit="volume">56</biblScope>
			<biblScope unit="issue">9</biblScope>
			<biblScope unit="page" from="4539" to="4551" />
			<date type="published" when="2010" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b7">
	<monogr>
		<title level="m" type="main">The etcd authors. etcd: A distributed, reliable key-value store for the most critical data of a distributed system</title>
		<ptr target="https://etcd.io/" />
		<imprint>
			<date type="published" when="2019" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b8">
	<analytic>
		<title level="a" type="main">Notes on database operating systems: operating systems: an advanced course</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Jim</forename><surname>Gray</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Lecture Notes in Computer Science</title>
		<imprint>
			<date type="published" when="1979" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b9">
	<analytic>
		<title level="a" type="main">Erasure coding in Windows Azure Storage</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Cheng</forename><surname>Huang</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Huseyin</forename><surname>Simitci</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Yikang</forename><surname>Xu</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Aaron</forename><surname>Ogus</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Brad</forename><surname>Calder</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Parikshit</forename><surname>Gopalan</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Jin</forename><surname>Li</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Sergey</forename><surname>Yekhanin</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 2012 USENIX Annual Technical Conference (USENIX ATC &apos;12)</title>
		<meeting>the 2012 USENIX Annual Technical Conference (USENIX ATC &apos;12)</meeting>
		<imprint>
			<date type="published" when="2012" />
			<biblScope unit="page" from="15" to="26" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b10">
	<analytic>
		<title level="a" type="main">Justin Mazzola Paluska, and Alexander (Sasha) Sandler. Everyone loves file: File Storage Service (FSS) in Oracle Cloud Infrastructure</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><surname>Bradley</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Matteo</forename><surname>Kuszmaul</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Frigo</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 2019 USENIX Annual Technical Conference (USENIX ATC &apos;19)</title>
		<meeting>the 2019 USENIX Annual Technical Conference (USENIX ATC &apos;19)</meeting>
		<imprint>
			<date type="published" when="2019" />
			<biblScope unit="page" from="15" to="32" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b11">
	<analytic>
		<title level="a" type="main">The part-time parliament</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Leslie</forename><surname>Lamport</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">ACM Transactions on Computer Systems (TOCS)</title>
		<imprint>
			<biblScope unit="volume">16</biblScope>
			<biblScope unit="issue">2</biblScope>
			<biblScope unit="page" from="133" to="169" />
			<date type="published" when="1998" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b12">
	<analytic>
		<title level="a" type="main">When Paxos meets erasure code: Reduce network and storage cost in state machine replication</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Shuai</forename><surname>Mu</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Kang</forename><surname>Chen</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Yongwei</forename><surname>Wu</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Weimin</forename><surname>Zheng</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 23rd International ACM Symposium on High-Performance Parallel and Distributed Computing (HPDC&apos;14)</title>
		<meeting>the 23rd International ACM Symposium on High-Performance Parallel and Distributed Computing (HPDC&apos;14)</meeting>
		<imprint>
			<date type="published" when="2014" />
			<biblScope unit="page" from="61" to="72" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b13">
	<analytic>
		<title level="a" type="main">In search of an understandable consensus algorithm</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Diego</forename><surname>Ongaro</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">John</forename><forename type="middle">K</forename><surname>Ousterhout</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 2014 USENIX Annual Technical Conference, (USENIX ATC &apos;14)</title>
		<meeting>the 2014 USENIX Annual Technical Conference, (USENIX ATC &apos;14)</meeting>
		<imprint>
			<date type="published" when="2014" />
			<biblScope unit="page" from="305" to="319" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b14">
	<monogr>
		<title level="m" type="main">Jerasure: A library in C facilitating erasure coding for storage applications version 2.0</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">James</forename><forename type="middle">S</forename><surname>Plank</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Kevin</forename><forename type="middle">M</forename><surname>Greenan</surname></persName>
		</author>
		<ptr target="http://jerasure.org/jerasure-2.0/" />
		<imprint>
			<date type="published" when="2014" />
		</imprint>
		<respStmt>
			<orgName>Department of Electrical Engineering and Computer Science, University of Tennessee</orgName>
		</respStmt>
	</monogr>
<note type="report_type">Technical report</note>
</biblStruct>

<biblStruct xml:id="b15">
	<analytic>
		<title level="a" type="main">Polynomial codes over certain finite fields</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">I</forename><forename type="middle">S</forename><surname>Reed</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">G</forename><surname>Solomon</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Journal of The Society for Industrial and Applied Mathematics</title>
		<imprint>
			<biblScope unit="volume">8</biblScope>
			<biblScope unit="issue">2</biblScope>
			<biblScope unit="page" from="300" to="304" />
			<date type="published" when="1960" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b16">
	<analytic>
		<title level="a" type="main">The Hadoop distributed file system</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Konstantin</forename><surname>Shvachko</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Hairong</forename><surname>Kuang</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Sanjay</forename><surname>Radia</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Robert</forename><surname>Chansler</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 26th IEEE Symposium on Massive Storage Systems and Technologies (MSST2010)</title>
		<meeting>the 26th IEEE Symposium on Massive Storage Systems and Technologies (MSST2010)</meeting>
		<imprint>
			<date type="published" when="2010" />
			<biblScope unit="page" from="1" to="10" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b17">
	<monogr>
		<title level="m" type="main">Remote call framework</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Delta V Software</surname></persName>
		</author>
		<ptr target="http://www.deltavsoft.com/index.html/" />
		<imprint>
			<date type="published" when="2019" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b18">
	<analytic>
		<title level="a" type="main">Ceph: A scalable, high-performance distributed file system</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Sage</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Scott</forename><forename type="middle">A</forename><surname>Weil</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Ethan</forename><forename type="middle">L</forename><surname>Brandt</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Darrell</forename><forename type="middle">D E</forename><surname>Miller</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Carlos</forename><surname>Long</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Maltzahn</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 7th Symposium on Operating Systems Design and Implementation (OSDI &apos;06)</title>
		<meeting>the 7th Symposium on Operating Systems Design and Implementation (OSDI &apos;06)</meeting>
		<imprint>
			<date type="published" when="2006" />
			<biblScope unit="page" from="307" to="320" />
		</imprint>
	</monogr>
</biblStruct>

				</listBibl>
			</div>
		</back>
	</text>
</TEI>
