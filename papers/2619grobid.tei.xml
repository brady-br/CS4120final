<?xml version="1.0" encoding="UTF-8"?>
<TEI xmlns="http://www.tei-c.org/ns/1.0" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
xsi:schemaLocation="http://www.tei-c.org/ns/1.0 /Users/atharsefid/Desktop/grobid-0.5.3/grobid-home/schemas/xsd/Grobid.xsd"
 xmlns:xlink="http://www.w3.org/1999/xlink">
	<teiHeader xml:lang="en">
		<encodingDesc>
			<appInfo>
				<application version="0.5.3" ident="GROBID" when="2020-09-29T02:48+0000">
					<ref target="https://github.com/kermitt2/grobid">GROBID - A machine learning software for extracting information from scholarly documents</ref>
				</application>
			</appInfo>
		</encodingDesc>
		<fileDesc>
			<titleStmt>
				<title level="a" type="main">RAMCube: Exploiting Network Proximity for RAM-Based Key-Value Store</title>
			</titleStmt>
			<publicationStmt>
				<publisher/>
				<availability status="unknown"><licence/></availability>
			</publicationStmt>
			<sourceDesc>
				<biblStruct>
					<analytic>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Yiming</forename><surname>Zhang</surname></persName>
							<affiliation key="aff0">
								<orgName type="institution">National University of Defense Technology ‡ Microsoft Research Asia</orgName>
							</affiliation>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Chuanxiong</forename><surname>Guo</surname></persName>
							<affiliation key="aff0">
								<orgName type="institution">National University of Defense Technology ‡ Microsoft Research Asia</orgName>
							</affiliation>
						</author>
						<author role="corresp">
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Rui</forename><surname>Chu</surname></persName>
							<email>rchu@nudt.edu.cn</email>
							<affiliation key="aff0">
								<orgName type="institution">National University of Defense Technology ‡ Microsoft Research Asia</orgName>
							</affiliation>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Guohan</forename><surname>Lu</surname></persName>
							<affiliation key="aff0">
								<orgName type="institution">National University of Defense Technology ‡ Microsoft Research Asia</orgName>
							</affiliation>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Yongqiang</forename><surname>Xiong</surname></persName>
							<affiliation key="aff0">
								<orgName type="institution">National University of Defense Technology ‡ Microsoft Research Asia</orgName>
							</affiliation>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Haitao</forename><surname>Wu</surname></persName>
							<affiliation key="aff0">
								<orgName type="institution">National University of Defense Technology ‡ Microsoft Research Asia</orgName>
							</affiliation>
						</author>
						<title level="a" type="main">RAMCube: Exploiting Network Proximity for RAM-Based Key-Value Store</title>
					</analytic>
					<monogr>
						<imprint>
							<date/>
						</imprint>
					</monogr>
				</biblStruct>
			</sourceDesc>
		</fileDesc>
		<profileDesc>
			<abstract>
				<p>Disk-based storage is becoming increasingly problematic in meeting the needs of large-scale cloud applications. Recently RAM-based storage is proposed by ag-gregating the RAM of thousands of commodity servers in data center networks (DCN). These studies focus on improving performance with low latency RPC and fast failure recovery. RAM-based storage brings great DCN-related challenges, e.g., false server failure detection due to network problems, traffic congestion during failure recovery , and ToR switch failure handling. This paper presents RAMCube, a DCN-oriented design for RAM-based key-value store based on the BCube network [9]. RAMCube exploits the properties of BCube to restrict all failure detection and recovery traffic within one-hop neighborhood, and leverages BCube&apos;s multiple paths to handle switch failures. Prototype implementation demonstrates that RAMCube is promising to achieve high performance I/O and fast failure recovery in large-scale DCNs.</p>
			</abstract>
		</profileDesc>
	</teiHeader>
	<text xml:lang="en">
		<body>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="1">Introduction</head><p>Disk-based storage is becoming more and more problematic in meeting the needs of large-scale cloud systems in terms of I/O latency and bandwidth. As a result, in recent years we see an increasing trend of migration of data from disks to random access memory (RAM) in storage systems. For example, memcached <ref type="bibr">[1]</ref> is an in-memory key-value store that has been widely used by a number of Web service providers, including Facebook, Twitter, and Youtube, to offload their storage servers. PIBUS <ref type="bibr" target="#b11">[13]</ref> aggregates the RAM of huge number of nodes on the Internet to act as a remote disk cache of desktop I/O-intensive applications. Google and Microsoft keep entire search indexes in RAM <ref type="bibr" target="#b9">[11]</ref>, and Google's Bigtable keeps certain columns (or even entire column family) in RAM <ref type="bibr" target="#b2">[4]</ref>.</p><p>Keeping data in RAM brings great challenges to reliable data access. Cache-based approaches (like memcached) cause difficulties for applications to effectively utilize RAM. For example, it is the responsibility of applications to manage consistency between caches and disk-based storage, making it vulnerable to consistency problems. Most recently, RAMCloud <ref type="bibr" target="#b9">[11]</ref> is proposed as a RAM-based key-value store where data is kept entirely in the RAM of thousands of servers. It achieves fast server failure recovery by scattering backup data across a large number of disks and reconstructing lost data in parallel across expensive InfiniBand networks <ref type="bibr" target="#b2">[4,</ref><ref type="bibr" target="#b6">8]</ref>. RAM-based storage (like RAMCloud) has a number of benefits such as low latency and high bandwidth/throughput. Moreover, the applications need no longer manage the consistency between RAM and a separate backing store. To achieve reliable RAM-based storage in data centers, however, many realistic DCN-related issues need to be addressed. (i) It is difficult to quickly (e.g., in 100 ms) distinguish temporary network problems (e.g., temporary network partition or packet loss at some congested switches) from server failures across a large-scale network, which may consequently cause inconsistency after failure recovery. (ii) The large number (up to thousands) of parallel unarranged recovery flows is likely to bring traffic congestion, resulting in unexpected recovery delay. (iii) Top-of-rack (ToR) switch failures (with all servers in the rack still being alive) brings great difficulty to fast failure recovery.</p><p>This work describes RAMCube, a DCN-oriented design for RAM-based key-value store that supports thousands or tens of thousands of servers to offer up to hundreds of terabytes of RAM storage. In this paper, we follow the technical trend that large data centers are constructed using commodity Ethernet switches, and use Ethernet-based BCube <ref type="bibr" target="#b7">[9]</ref>, which is a servercentric network, as the underlying network of our RAMCube. RAMCube exploits the proximity of BCube network to construct a symmetric MultiRing structure, restricting all failure detection and recovery traffic within one-hop neighborhood, which addresses the aforementioned problems including false failure detection and recovery traffic congestion. In addition, RAMCube leverages BCube's multiple paths between any pairs of servers to handle switch failures.</p><p>The rest of the paper is organized as follows. Section 2 discusses background and related work. Section 3 presents RAMCube design. Section 4 introduces prototype implementation and experiments. Finally, Section 5 concludes the paper.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2">Background and Related Work</head></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.1">RAM-Based Storage</head><p>The idea of permanently storing data in RAM is not new. For example, main-memory databases <ref type="bibr" target="#b5">[7]</ref> keep entire databases in the RAM of one or more servers and support full RDBMS semantics. However, these systems cannot survive coordinated server failures and do not provide enough durability for large-scale systems.</p><p>Most recently, RAMCloud <ref type="bibr" target="#b9">[11]</ref> is proposed as a RAM-based key-value store in data centers, where data (key-value pair) is kept entirely in RAM and large-scale systems are created by aggregating the RAM of thousands of commodity servers. RAMCloud realizes lowlatency RPC by using expensive InfiniBand networks and supporting user-level applications to send/receive data directly through the NICs (bypassing the kernel).</p><p>RAMCloud keeps only one single copy of each object in a master server's RAM, with redundant copies in backup servers' disks. RAMCloud realizes fast server failure recovery by using aggressive data partitioning, a distributed approach similar to Google's Bigtable <ref type="bibr" target="#b2">[4]</ref> and GFS <ref type="bibr" target="#b6">[8]</ref>. They scatter backup data across hundreds or thousands of disks on backup servers, and reconstruct lost data in the RAM of hundreds of servers in a short period of time. RAMCloud employs randomized techniques, mainly including random replica placement (with refinement) for load balance and random ping for server failure detection, to manage the system in a decentralized and scalable fashion.</p><p>In this paper, we improve RAMCloud by addressing several critical issues including false failure detection of servers due to temporary network problems, traffic congestion during failure recovery, and ToR switch failure handling, by leveraging the properties of BCube.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.2">BCube</head><p>BCube <ref type="bibr" target="#b7">[9]</ref> is a server-centric network architecture designed for modular data centers. In BCube, servers with multiple network ports connect to multiple layers of COTS (commodity of the-shelf) mini-switches. Servers act as not only end hosts, but also relay nodes for each other. BCube supports various bandwidth-intensive applications by speeding-up one-to-one, one-to-several, and one-to-all traffic patterns, and exhibits graceful performance degradation as the server and/or switch fail. This property is of special importance for fast failure recovery in RAM-based storage systems, since once a routing component fails it is very difficult to recover all of its connected servers in a short period of time.</p><p>BCube is a recursively defined structure. A BCube(n, 0) is simply n servers connecting to an nport switch. A BCube(n, 1) is constructed from n BCube(n, 0) and n n-port switches. More generically, a BCube(n, k) (k ≥ 1) is constructed from n BCube(n, k − 1) and n k n-port switches. Each server in a BCube(n, k) has k+1 ports, which are numbered from level-0 to levelk. BCube(n, k) has N = n k+1 servers and k + 1 levels of switches, with each level having n k n-port switches. <ref type="figure" target="#fig_0">Fig. 1</ref> shows an example of BCube(4, 1), which is constructed from four BCube(4, 0) and four 4-port switches.</p><p>BCube's software-based routing approach suffers from high CPU overhead and processing latency. To address this problem, most recently Lu et al. design and implement ServerSwitch <ref type="bibr" target="#b8">[10]</ref>, a programmable commodity switching chip that supports high-performance BCube routing and achieves very low CPU overhead, high throughput and low processing latency.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3">RAMCube Design</head></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.1">Basics</head><p>We first briefly discuss some basic choices of RAMCube in network hardware, data model, and structure.</p><p>Network hardware. Network hardware is an important factor that decides the performance a RAM-based storage system can achieve. Infiniband is featured by its high bandwidth, low latency, as well as high price. For example, in a small-scale (60-server) InfiniBand testbed, RAMCloud claims 400∼800 MB/s recovery bandwidth per NIC and an RPC latency of 5∼10 µs <ref type="bibr" target="#b9">[11]</ref>. However, our view is that high-performance Ethernet is more promising and cost-effective than InfiniBand for large data centers. Recent technology trends show that Ethernet switches with 40 Gbit/s bandwidth and sub-µs latency are practical in the near future. We therefore design RAMCube based on Ethernet hardwares (BCube <ref type="bibr" target="#b7">[9]</ref> with ServerSwitch <ref type="bibr" target="#b8">[10]</ref> support).</p><p>Data model. The current data model in RAMCube is a simple key-value store that supports arbitrary number of tables containing key-value pairs. A key-value pair consists of a variable-length (up to 1 KB) key and a variable-length (up to 1 MB) value. RAMCube provides a simple set of operations ("set key value", "get key") and "delete key" for writing/updating, reading and deleting data. In the future RAMCube will extend the data model with support of more powerful features such as indexes and super columns <ref type="bibr" target="#b2">[4]</ref>.</p><p>Primary-recovery-backup. RAMCube stores multiple copies for each key-value pair for durability. There are two choices, namely symmetric replication <ref type="bibr" target="#b3">[5]</ref> and primary-backup <ref type="bibr" target="#b1">[3]</ref>, for RAMCube to maintain consistency in normal read/write operations. In symmetric replication all copies of a key-value pair have to be kept in the RAM of different servers and a quorum-like technique <ref type="bibr" target="#b4">[6]</ref> is used for conflict resolution. In contrast, in primary-backup only one primary copy is needed to be stored in RAM with redundant backup copies in disks. All read/write operations are through the primary copy. Clearly, for RAMCube primary-backup is preferred since it saves much of the RAM compared to symmetric replication.</p><p>We refer to the servers storing the primary copies in RAM as primary servers, and the servers storing the backup copies in the disks as backup servers. Considering the typical bandwidth of disks (100∼200 MB/s), if we want to recover a primary server failure in a short period of time (1∼2 seconds), one primary server with 64 GB RAM needs at least several hundred backup disks. Once having been read from disks of backup servers, the backup data should be recovered to as few as possible healthy servers since fragmentation changes the locality of original data and might degrade application performance after recovery. The healthy servers that accommodate the recovered data are called recovery servers. Considering the typical NIC bandwidth (10 Gbps), at least tens of recovery servers are needed for recovering a failed primary server with 64 GB RAM in 1∼2 seconds. This "primary-recovery-backup" structure <ref type="bibr" target="#b2">[4,</ref><ref type="bibr" target="#b9">11]</ref> is depicted in <ref type="figure">Fig. 2(a)</ref>. Note that each server symmetrically acts as all the three roles at the same time.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.2">RAMCube Structure</head><p>Fast failure recovery is crucial for RAMCube to improve availability. The problem is that primary-backup is not tolerant of false server failure recovery that may result in two primary servers for the same key, while various temporary network problems (e.g., timeout due to network congestion) are difficult to be quickly distinguished from real server failures in large-scale networks.</p><p>The basic idea of RAMCube for addressing this problem is to utilize the global topology information of BCube and leverage network proximity to restrict all failure detection and recovery traffic within onehop neighborhood. We improve the primary-recoverybackup structure (shown in <ref type="figure">Fig. 2(a)</ref>) with a directly connected tree (shown in <ref type="figure">Fig. 2(b)</ref>), where a primary server has multiple directly connected recovery servers, each of which corresponding to multiple directly connected backup servers. Clearly, <ref type="figure">Fig. 2(b)</ref> can be viewed as a special case of <ref type="figure">Fig. 2(a)</ref>.</p><p>The primary server periodically sends heartbeat messages to all its recovery servers, and once the recovery servers detect (with certain mechanisms described in the next subsection) the primary server fails, they will start a recovery procedure reading backup data from their directly connected backup servers. In <ref type="figure">Fig. 2(b)</ref>, since the recovery servers directly connect to the primary server, they can eliminate much of the possibility of false failure detection. In addition, since the recovery servers directly connect to the backup servers, the recovery traffic is guaranteed to have little overlap or congestion.</p><p>The directly connected tree provides great benefit for accurate failure detection and fast failure recovery. In order to apply it to RAMCube, we need symmetrically map the tree onto the entire network, that is, each server equally plays all the three roles of primary server, recovery server and backup server. Our insight is that for BCube if we replace each switch and its n links with an n × (n − 1) full mesh that directly connects the servers, we will get a generalized Hypercube <ref type="bibr" target="#b0">[2]</ref>. Then, we can construct multi-layer logical rings (MultiRing for short) for symmetric mapping as depicted in <ref type="figure">Fig. 3</ref>.</p><p>(1) The first layer ring is called primary ring, which is composed of all servers in BCube. The whole key space is mapped onto the primary ring and each primary server is responsible for a subset of the key space.</p><p>(2) Each primary server, say server P, has a second layer ring called recovery ring that is composed of all one-hop neighbors of P. When P fails, its data should be recovered to the RAM of the recovery servers on its recovery ring. <ref type="figure">Fig. 3</ref> shows an example of the recovery ring of the primary server 00.</p><p>(3) Each recovery server, say server R, corresponds to a third layer ring called backup ring that is composed of the servers that are one-hop to R and two-hop to P. The backup copies of the objects of P are stored in the disks of backup servers on the backup rings. <ref type="figure">Fig. 3</ref> shows an example of six backup rings.</p><p>In <ref type="figure">Fig. 3</ref>  <ref type="figure">Figure 2</ref>: (a) Primary-recovery-backup structure <ref type="bibr" target="#b9">[11]</ref>. (b) Directly connected tree in RAMCube. Figure 3: The primary ring of BCube(4, 1), and the recovery ring and backup rings of server 00.</p><p>primary-recovery-backup structure with server 00. In the symmetric MultiRing structure, if a server A is a primary/recovery/backup server of another server B, then B is also a primary/recovery/backup server of A. Consider a RAMCube constructed based on BCube(n, k). From the construction of primary/recovery/backup rings, and from the property of generalized Hypercube, we can see that there are n k+1 , (n − 1)(k + 1), and (n − 1)k servers on the primary/recovery/backup ring, respectively. And a primary server has totally (n−1) 2 k(k+1) 2 backup servers. For BCube <ref type="bibr">(16,</ref><ref type="bibr" target="#b0">2)</ref>, for example, there are 4096 primary servers, each of which has 45 recovery servers and 675 backup servers. Note that it is not mandatory for a primary server to employ all its recovery/backup servers. For example, a primary server in BCube(16, 2) may employ 30 (instead of 45) recovery servers on its recovery ring to reduce fragmentation, at the cost of longer recovery time and lower throughput.</p><p>For durability each object has multiple backup copies distributed in the backup servers' disks. Several factors should be considered for the placement of the backup copies. E.g., the copies should reside in different racks in case of rack power failure, and different disk I/O bandwidths should also be considered for balancing the load. In current RAMCube, the data of a primary server is partitioned and each partition is assigned to a recovery server, and the partition of a recovery server is divided into b sub-partitions each being assigned to its f backup servers, where b and f are respectively the number of servers on the backup ring and the replication factor.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.3">Failure Detection and Recovery</head><p>Server failure. A primary server periodically sends heartbeats to each of its recovery servers. If a recovery server (say R) does not receive heartbeats from its primary server (say P) for a certain period, then R would confirm the failure of P by using BCube source routing (BSR) <ref type="bibr" target="#b7">[9]</ref> to issue additional pings through k switches directly connected to P other than the one between R and P. E.g., in the network depicted in <ref type="figure" target="#fig_0">Fig. 1</ref>, if server 01 suspects server 00 fails since it cannot receive heartbeats from 00, it would send a ping message to 00 through switch 1, 0 with a specified path 01 → 11 → 10 → 00.</p><p>If the additional pings also fail then R would independently start the recovery. In case of false failure detection due to rare conditions, e.g., all k + 1 paths between P and R are simultaneously temporarily congested, relevant backup servers directly connected to R would reject any further backup requests from P and indicate P to stop servicing the corresponding sub key space. Therefore, in RAMCube false failure detection is NOT fatal but "expensive". Our local detection mechanism eliminates much of the possibility of false positive induced by network problems and thus reduces unnecessary recoveries.</p><p>During the recovery of a server failure, three cases have to be considered corresponding to the three roles of the failed server. For simplicity here we assume a primary server employs all its recovery servers.</p><p>(1) Primary server failure: Among multiple backup copies of each object, we assign one copy as the dominant copy. During recovery, the relevant recovery servers fetch dominant copies to their RAM from directly connected backup servers. Since the backup servers have exactly two digits different from their primary servers, each backup server services two recovery servers. E.g., if a primary server (say 00) fails in the network depicted in <ref type="figure" target="#fig_0">Fig. 1</ref>, a backup server (11) services two recovery servers (01 and 10). Given the normal configuration with 24∼64 GB data per primary server, 10 Gbps network bandwidth and 100 MB/s disk bandwidth, a RAMCube constructed based on BCube(16, 2) can easily recover a primary server failure in 1∼2 seconds.</p><formula xml:id="formula_0">S e t ( ) B a c k u p ( ) B a c k u p _ a c k ( ) S e t _ a c k ( ) P</formula><p>(2) Recovery server failure: For each involved primary server, the affected backup servers first register to the other heathy recovery server . Then, RAMCube moves backup data to other backup servers connecting to the registered healthy recovery servers. For example, in the network depicted in <ref type="figure" target="#fig_0">Fig. 1</ref>, if the recovery server (01) of a primary server (00) fails, RAMCube first registers a new recovery server for each affected backup server (10 for 11, 20 for 21, and 30 for 31); and then moves backup data to the newly chosen backup servers on the same backup rings (11→(12,13), 21→ <ref type="bibr">(22,</ref><ref type="bibr">23)</ref>, and 31→(32,33)).</p><p>(3) Backup server failure: RAMCube simply copies affected data to healthy servers on the same backup ring.</p><p>Switch failure. RAMCube can easily handle switch failures. For example, in the network depicted in <ref type="figure" target="#fig_0">Fig. 1</ref>, if servers 01, 02, 03 all find server 00 is unreachable through switch 0, 0 but they can receive ping acknowledgements through switch 1, 0, then RAMCube considers switch 0, 0 failed. Since a switch failure in BCube results in only graceful performance degradation <ref type="bibr" target="#b7">[9]</ref> but no data loss or unavailability, it is not critical and we can replace the failed switch in a relatively longer period of time (compared to server failures).</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4">Prototype Implementation &amp; Evaluation</head><p>We have prototyped RAMCube by implementing a userlevel service in Windows Server 2008 R2, which contains a connection manager and a memory manager. The connection manager maintains the status of directly connected neighbors and handles network events including receiving data from clients and sending/receiving backup/recovery data. The memory manager uses a slabbased mechanism and handles set/get/delete requests inside a server. It also uses a simple log-structured approach similar to previous logging file systems <ref type="bibr" target="#b10">[12,</ref><ref type="bibr" target="#b9">11]</ref> for asynchronously writing backup data (divided into 8 MB segments) into the disks of backup servers.</p><p>When the primary server receives a key-value pair, it stores the data in its RAM (handled by the memory man- ager) and sends a copy to each of the relevant backup servers simultaneously. The backup servers return an acknowledgement after the copies are written to the RAM (not disks), and then the primary server acknowledges to its client that the write operation is successful. This approach provides efficiency as well as simplicity both in normal read/write operations and in failure recovery. This procedure is depicted in <ref type="figure" target="#fig_2">Fig. 4</ref>. We have built a RAMCube testbed with 16 Dell R610 servers and 8 8-port DLink Gigabit Ethernet switches constructing a BCube(4, 1) network. Each server has one Intel Xeon 2.27 GHz quad core CPU and 16 GB RAM, and installs one Seagate ST9500430SS 7200 RPM, 1 TB disk. Since the ServerSwitch 10 Gbps NIC is still under development, we install one ServerSwitch 1 Gbps NIC <ref type="bibr" target="#b8">[10]</ref> on each server.</p><p>For simplicity, the RAMCube benchmark is a singlethreaded busy loop (running on a client machine) where many clients asynchronously communicate with the RAMCube server, which is also single-threaded.</p><p>Our first experiment evaluates the throughput of RAMCube, measured by the number of requests handled by a primary server per secend. The client performs write operations with the form of "set key value" and the primary server indicates the success of each write with an acknowledgement. The object size is 100 bytes. We measure the number of set requests finished per second as a function of the number of clients in the busy loop. The result (depicted in <ref type="figure" target="#fig_3">Fig. 5)</ref> shows the maximum throughput of RAMCube on one core is about 26,000 writes/sec. Currently the throughput of RAMCube is affected by a series of factors such as the overhead of memory manager and connection manager at primary servers and the logging performance at backup servers. We can improve this by using more cores at primary servers and installing more disks at backup servers. We also measures the throughput of memcached. Its maximum throughput is about 40,000 writes/sec.</p><p>In our second experiment we first fill a primary server with 2 GB data (each object having 100 bytes), and then cause a failure of that server and measure the aggregate recovered data size (of all six recovery servers) over time. The heartbeat timeout is set to 300 ms. The result is depicted in <ref type="figure">Fig. 6</ref>. The minimum and maximum recovery time of six recovery servers are respectively 3.5 and 8.3 seconds. This difference shows that although RAMCube removes the congestion of multi-hop traffic in recovery, we still have a lot of work to do for scheduling the one-hop burst recovery traffic. The maximum aggregate recovery bandwidth is about 456 MB/sec, which is limited by the NIC bandwidth and the number of recovery servers. We can expect a much faster recovery speed by using ServerSwitch 10G NIC and more recovery/backup servers in a larger RAMCube with more levels (NIC ports).</p><p>Previous designs, e.g., RAMCloud <ref type="bibr" target="#b9">[11]</ref>, cannot handle switch failures well due to overwhelming recovery traffic congestion. This is a critical problem that prevents RAM-based storage systems from being practical. We evaluate the throughput of RAMCube with a single switch failure. Results (depicted in <ref type="figure" target="#fig_4">Fig. 7)</ref> show RAMCube has a graceful performance degradation during single switch failures.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5">Conclusion</head><p>We have presented the design of RAMCube as a novel RAM-based key-value store for high-performance I/O in data center networks. By exploiting the proximity of BCube network, RAMCube restricts all failure detection and recovery traffic within one-hop neighborhood.</p></div><figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_0"><head>Figure 1 :</head><label>1</label><figDesc>Figure 1: An example of BCube(4, 1) [9].</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_2"><head>Figure 4 :</head><label>4</label><figDesc>Figure 4: Processing a write request in RAMCube.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_3"><head>Figure 5 :</head><label>5</label><figDesc>Figure 5: RAMCube server throughput.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_4"><head>Figure 7 :</head><label>7</label><figDesc>Figure 6: RAMCube recovery time.</figDesc></figure>
		</body>
		<back>

			<div type="acknowledgement">
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Acknowledgement</head><p>This work was supported in part by the National Basic Research Program of China <ref type="formula">(973)</ref>  </p></div>
			</div>

			<div type="references">

				<listBibl>

<biblStruct xml:id="b0">
	<analytic>
		<title level="a" type="main">Generalized hypercube and hyperbus structures for a computer network</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Bhuyan</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">L</forename><forename type="middle">N</forename><surname>And</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Agrawal</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><forename type="middle">P</forename></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE Trans. Computers</title>
		<imprint>
			<biblScope unit="volume">33</biblScope>
			<biblScope unit="page" from="323" to="333" />
			<date type="published" when="1984" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b1">
	<monogr>
				<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Budhiraja</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">N</forename><surname>Marzullo</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">K</forename><surname>Schneider</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">F</forename><forename type="middle">B</forename><surname>And</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Toueg</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename></persName>
		</author>
		<title level="m">The primary-backup approach</title>
		<imprint>
			<date type="published" when="1993" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b2">
	<analytic>
		<title level="a" type="main">Bigtable: A distributed storage system for structured data</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Chang</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">F</forename><surname>Dean</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Ghemawat</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Hsieh</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">W</forename><forename type="middle">C</forename><surname>Wal-Lach</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><forename type="middle">A</forename><surname>Burrows</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Chandra</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><surname>Fikes</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>And</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Gruber</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">OSDI</title>
		<imprint>
			<date type="published" when="2006" />
			<biblScope unit="page" from="205" to="218" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b3">
	<analytic>
		<title level="a" type="main">Oracle&apos;s symmetric replication technology and implications for application design</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Daniels</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Doo</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">L</forename><forename type="middle">B</forename><surname>Downing</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Elsbernd</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><surname>Hallmark</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">G</forename><surname>Jain</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Jenkins</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">B</forename><surname>Lim</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><surname>Smith</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">G</forename><surname>Souder</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">B</forename><surname>And</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Stamos</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">SIGMOD</title>
		<imprint>
			<publisher>ACM Press</publisher>
			<date type="published" when="1994" />
			<biblScope unit="page">467</biblScope>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b4">
	<analytic>
		<title level="a" type="main">Dynamo: amazon&apos;s highly available key-value store</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Decandia</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">G</forename><surname>Hastorun</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Jampani</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Kakulapati</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">G</forename><surname>Lakshman</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Pilchin</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Sivasubramanian</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Vosshall</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><surname>And</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Vogels</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">W</forename></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">SOSP</title>
		<imprint>
			<date type="published" when="2007" />
			<biblScope unit="page" from="205" to="220" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b5">
	<analytic>
		<title level="a" type="main">Main memory database systems: An overview</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Garcia-Molina</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">H</forename><surname>And</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Salem</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">K</forename></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE Trans. Knowl. Data Eng</title>
		<imprint>
			<biblScope unit="volume">4</biblScope>
			<biblScope unit="page" from="509" to="516" />
			<date type="published" when="1992" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b6">
	<analytic>
		<title level="a" type="main">The google file system</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Ghemawat</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Gobioff</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">H</forename><surname>And</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Leung</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S.-T</forename></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">SOSP</title>
		<imprint>
			<date type="published" when="2003" />
			<biblScope unit="page" from="29" to="43" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b7">
	<monogr>
		<title level="m" type="main">Bcube: a high performance, servercentric network architecture for modular data centers</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Guo</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><surname>Lu</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">G</forename><surname>Li</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Wu</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">H</forename><surname>Zhang</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">X</forename><surname>Shi</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Y</forename><surname>Tian</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><surname>Zhang</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Y</forename><surname>And</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">L</forename><forename type="middle">U</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename></persName>
		</author>
		<editor>SIG-COMM</editor>
		<imprint>
			<date type="published" when="2009" />
			<biblScope unit="page" from="63" to="74" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b8">
	<analytic>
		<title level="a" type="main">Serverswitch: A programmable and high performance platform for data center networks</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">L</forename><forename type="middle">U</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">G</forename><surname>Guo</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><surname>Li</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Y</forename><surname>Zhou</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Z</forename><surname>Yuan</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><surname>Wu</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">H</forename><surname>Xiong</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Y</forename><surname>Gao</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>And</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Zhang</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Y</forename></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">NSDI</title>
		<imprint>
			<date type="published" when="2011" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b9">
	<analytic>
		<title level="a" type="main">Fast crash recovery in ramcloud</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Ongaro</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Rumble</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><forename type="middle">M</forename><surname>Stutsman</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Ouster-Hout</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><forename type="middle">K</forename><surname>And</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Rosenblum</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">SOSP</title>
		<imprint>
			<date type="published" when="2011" />
			<biblScope unit="page" from="29" to="41" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b10">
	<analytic>
		<title level="a" type="main">The design and implementation of a log-structured file system</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Rosenblum</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>And</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Ousterhout</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><forename type="middle">K</forename></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">SOSP</title>
		<imprint>
			<date type="published" when="1991" />
			<biblScope unit="page" from="1" to="15" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b11">
	<analytic>
		<title level="a" type="main">Pibus: A network memory-based peer-to-peer io buffering service</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Zhang</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Y</forename><surname>Li</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Chu</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Xiao</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">N</forename><surname>And</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">L</forename><forename type="middle">U</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">X</forename></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Networking</title>
		<imprint>
			<date type="published" when="2007" />
			<biblScope unit="page" from="1237" to="1240" />
		</imprint>
	</monogr>
</biblStruct>

				</listBibl>
			</div>
		</back>
	</text>
</TEI>
