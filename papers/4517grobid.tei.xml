<?xml version="1.0" encoding="UTF-8"?>
<TEI xmlns="http://www.tei-c.org/ns/1.0" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
xsi:schemaLocation="http://www.tei-c.org/ns/1.0 /Users/atharsefid/Desktop/grobid-0.5.3/grobid-home/schemas/xsd/Grobid.xsd"
 xmlns:xlink="http://www.w3.org/1999/xlink">
	<teiHeader xml:lang="en">
		<encodingDesc>
			<appInfo>
				<application version="0.5.3" ident="GROBID" when="2020-09-29T04:23+0000">
					<ref target="https://github.com/kermitt2/grobid">GROBID - A machine learning software for extracting information from scholarly documents</ref>
				</application>
			</appInfo>
		</encodingDesc>
		<fileDesc>
			<titleStmt>
				<title level="a" type="main">ReproZip: Using Provenance to Support Computational Reproducibility</title>
			</titleStmt>
			<publicationStmt>
				<publisher/>
				<availability status="unknown"><licence/></availability>
			</publicationStmt>
			<sourceDesc>
				<biblStruct>
					<analytic>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Fernando</forename><surname>Chirigati</surname></persName>
							<email>fchirigati@nyu.edu</email>
							<affiliation key="aff0">
								<orgName type="institution" key="instit1">Polytechnic Institute of NYU</orgName>
								<orgName type="institution" key="instit2">New York University</orgName>
								<orgName type="institution" key="instit3">Polytechnic Institute of NYU</orgName>
							</affiliation>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Dennis</forename><surname>Shasha</surname></persName>
							<email>shasha@courant.nyu.edu</email>
							<affiliation key="aff0">
								<orgName type="institution" key="instit1">Polytechnic Institute of NYU</orgName>
								<orgName type="institution" key="instit2">New York University</orgName>
								<orgName type="institution" key="instit3">Polytechnic Institute of NYU</orgName>
							</affiliation>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Juliana</forename><surname>Freire</surname></persName>
							<email>juliana.freire@nyu.edu</email>
							<affiliation key="aff0">
								<orgName type="institution" key="instit1">Polytechnic Institute of NYU</orgName>
								<orgName type="institution" key="instit2">New York University</orgName>
								<orgName type="institution" key="instit3">Polytechnic Institute of NYU</orgName>
							</affiliation>
						</author>
						<title level="a" type="main">ReproZip: Using Provenance to Support Computational Reproducibility</title>
					</analytic>
					<monogr>
						<imprint>
							<date/>
						</imprint>
					</monogr>
				</biblStruct>
			</sourceDesc>
		</fileDesc>
		<profileDesc>
			<abstract>
				<p>We describe ReproZip, a tool that makes it easier for authors to publish reproducible results and for reviewers to validate these results. By tracking operating system calls, ReproZip systematically captures detailed prove-nance of existing experiments, including data dependencies , libraries used, and configuration parameters. This information is combined into a package that can be installed and run on a different environment. An important goal that we have for ReproZip is usability. Besides simplifying the creation of reproducible results, the system also helps reviewers. Because the package is self-contained, reviewers need not install any additional software to run the experiments. In addition, ReproZip generates a workflow specification for the experiment. This not only enables reviewers to execute this specification within a workflow system to explore the experiment and try different configurations, but also the provenance kept by the workflow system can facilitate communication between reviewers and authors.</p>
			</abstract>
		</profileDesc>
	</teiHeader>
	<text xml:lang="en">
		<body>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="1">Introduction</head><p>Good science requires reproducibility, not only to discover fraud but also to support the reuse of experimental techniques and software. Computational reproducibility means that a program P running on computational environment E at time T should yield the same answer on environment E at time T . Reproducing computational results should be easier than laboratory results because all the factors influencing a computational experiment consist of software and data. Unfortunately, few computational experiments are reproducible. Results are often described loosely through tables, plots and figure captions included in publications. Because no details of the computational steps are given, it is difficult to verify and reproduce many of the published results, and this has led to a credibility crisis in computational science <ref type="bibr" target="#b1">[2]</ref>.</p><p>The main difficulty is that authors must generate a compendium that encompasses all the inputs needed to correctly reproduce their experiments. In order to reproduce an experiment, we need detailed provenance which includes <ref type="bibr" target="#b4">[5,</ref><ref type="bibr" target="#b2">3]</ref>: (i) a description of the data; (ii) a complete specification of the experiment and its steps, preferably as a workflow in which parameters and computational tasks are explicitly defined; and (iii) information about the originating computational environment E (e.g., OS, hardware architecture, and library dependencies) that may be needed if the experiment is to be reexecuted in a new environment E . These different pieces of information need to be connected so that a complete and executable description can be generated.</p><p>Keeping track of this information manually is rarely feasible -it is both time-consuming and error-prone. First, computational environments are complex, consisting of many layers of hardware and software, and the configuration of the OS is often hidden. Second, tracking library dependencies is challenging, especially for large experiments. ReproZip aims to address these issues by systematically and automatically capturing the required information. The system does so by tracking operating system calls that originate from an experiment run. The information in these calls is then stitched together into a self-contained reproducible package, which include all the binaries, data and dependencies required to run a given command on the author's computational environment E. ReproZip also generates a workflow specification for the experiment, which can then be used to help reviewers explore and vary it. A reviewer can extract the files and workflow in another environment E (e.g., the reviewer's desktop), without interfering with any program or dependency already installed on E . The experiments and their deterministic processes can then be correctly reproduced and even modified in E . By using the derived workflow to perform this exploration, provenance of the review process is automatically captured, and can serve not only to document the process but also as a means to support communication between authors and reviewers.</p><p>Reproducibility Tools. A number of tools have been proposed to support the creation of reproducible experiments. Some are aimed at a particular domain, for example: GenePattern (http://www.broadinstitute. org/cancer/software/genepattern) is a genomic analysis platform; Madagascar (http://www.ahay.org) is used to analyze seismic data and supports multidimensional data analysis; and Sumatra <ref type="bibr" target="#b0">[1]</ref> is used for numerical computations. Scientific workflow systems <ref type="bibr" target="#b3">[4,</ref><ref type="bibr" target="#b8">9,</ref><ref type="bibr" target="#b12">13]</ref>, on the other hand, are general and support the specification of arbitrary computational experiments. Because they have full control over the workflow execution, they can capture detailed provenance of the data derivation process. However, they do not capture the provenance of the computational environment. Thus, even though they support reproducibility, they do not support portability to new environments <ref type="bibr" target="#b2">[3]</ref>. Another drawback comes from the fact that users must integrate the software they need into the workflow system. This task can be time consuming and there is not much incentive to do so after an experiment is complete, just for publication purposes.</p><p>Tools such as Chef (http://wiki.opscode.com/ display/chef) and Puppet (http://puppetlabs.com) help users automate system configuration by creating recipes that can be re-used every time a new machine needs to be configured. Although these can help with reproducibility by reconstructing the required configuration, they can interfere with the reviewer's computational environment, creating a gratuitous disincentive to review. Virtual machines serve a similar purpose with the additional advantage of portability across operating systems, but the overheads of creating, storing and transferring the derived images can be high. CDE <ref type="bibr" target="#b6">[7]</ref> offers a lighter-weight alternative to virtual machines. It relies on the ptrace call on Linux to identify the files required for running a particular command, and creates a package containing these files. This package can then be copied to different Linux installations where it can be run within the CDE environment: CDE dynamically changes the system calls to point to the correct files included in the package. Although both ReproZip and CDE trace operating system calls, they differ in significant ways: (i) with ReproZip, users have a greater control over the collected trace and can customize the reproducible package; (ii) ReproZip captures and stores the provenance in a database, which allows users to query the information, and if the same experiment and configuration need to be packed again, users need not re-run it; (iii) ReproZip focuses on usability for authors and reviewers -besides simplifying the creation of a reproducible experiment, the system generates a workflow specification for the experiment, which both facilitates the review tasks and makes it possible to capture the provenance of the review process; and (iv) CDE adds run-time overheads for executing a packaged experiment because it dynamically changes system calls during the executionwith ReproZip, once the package is extracted, there is no interference in its execution, and therefore no run-time overhead, thus supporting the validation of performancesensitive experiments. System-level Provenance Tools. Tools have been proposed that collect system-level provenance to provide a description of how data products were derived. ReproZip also captures system-level provenance, but it has a different goal: to attain reproducibility and portability, it uses this provenance to generate a compendium that includes the necessary components required to run a given experiment. Burrito <ref type="bibr" target="#b7">[8]</ref> is a Linux-based system that captures OS-level provenance for derived data products and presents this information to users, who may add annotations and generate an HTML report that summarizes the computational activities.</p><p>ES3 <ref type="bibr" target="#b5">[6]</ref> uses strace to monitor operating system calls and constructs provenance graphs that resemble workflow specifications. These graphs describe the derivation of data products, but they are not executable. PASS <ref type="bibr" target="#b10">[11]</ref> produces audit trails that are stored in a database and that can be queried. The system also generates a script to reproduce a particular object. However, this script can be executed only in the original environment.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3">Creating and Running Experiments</head><p>Packing. As illustrated in <ref type="figure" target="#fig_0">Figure 1</ref>, to create a reproducible experiment in environment E that is invoked by a program P (along with command line arguments), the author simply prepends the command with ReproZip. ReproZip makes use of two open-source tools to capture the necessary provenance: SystemTap <ref type="bibr" target="#b11">[12]</ref> and MongoDB <ref type="bibr" target="#b9">[10]</ref>. While the experiment is executed, SystemTap traces system calls (execve, open, read, write, close and pipe, to name a few). Through these system calls, it is possible to capture information such as command-line arguments, environment variables, files read and files written. This information is then stored in MongoDB, a NoSQL database, where it can be easily accessed and queried. Our choice of SystemTap and MongoDB was inspired by the Burrito System <ref type="bibr" target="#b7">[8]</ref>, which successfully used these tools to gather and store provenance for programs run on Linux.</p><p>Using the trace data, ReproZip creates a provenance tree of the experiment, where each node corresponds to an OS process. The tree is built incrementally. The root of the tree represents the main process of the experiment which is specified by the user when ReproZip is invoked. When a process corresponding to a node n spawns a process n a new node is created for n and an edge is inserted between n and n . Each node in the tree stores provenance data for the corresponding process, such as command-line arguments, working directory, files read, and files written. When the experiment terminates, ReproZip traverses the provenance tree to identify all the components involved in the execution and that should be included in the reproducible package. It collects the description of the data (input files and output files), the description of the experiment (executable programs), and the description of the computational environment (environment variables, library dependencies and information about the system/hardware).</p><p>Note that SystemTap captures all dependencies, some of which may not be necessary. Thus, before copying the files to the reproducible package, ReproZip offers the option to output a configuration file that lists all the identified programs, input files and dependencies. Authors may customize the configuration to exclude a specific file or a set of files (e.g., using Unix-shell style wildcards). This step is particularly useful to control the size of the package, for example, by discarding temporary files and omitting large files that can be obtained elsewhere.</p><p>The provenance tree, together with the identified input and output files, is also used to derive a workflow specification for the experiment. The main program of the experiment is wrapped in a workflow module that automatically takes the command-line arguments as inputs. By making these arguments explicit in the workflow specification, reviewers can immediately see which parameters can be changed and should be considered for validating the experiment.</p><p>ReproZip then creates the reproducible package that contains the workflow as well as all the required components from the author's environment E, using the same directory structure. The command-line arguments and the environment variables in the workflow are configured to reference the files that are inside the reproducible package. A mapping between symbolic links and target files is also added to the package, so that these links can be correctly created in the unpacking step. <ref type="figure" target="#fig_1">Figure 2a</ref> shows how the packing step derives a provenance tree and a workflow specification for a real experiment that verifies the topological correctness of marching cubes algorithms, generating a reproducible package 1 . As shown in the tree, the main program, mc33verification, calls three other programs: analyzeGrid, subdivideGrid and modifiedMC33. The provenance information captured for each node is also used to derive the workflow, in particular the input and output files that connect the different programs. Unpacking. Given an experiment created in environment E, a reviewer can unpack and run it in a new environment E . All the extracted files are placed in a userspecified directory, i.e., no changes are made to other directories in E . The workflow is pre-configured by ReproZip so that paths to programs, input files, and paths defined in environment variables are adjusted to use the experiment directory in E . Environment variables are configured only for the workflow executionthe original variables remain unchanged to avoid interfering with the normal operating environment of E . Verification and Exploration. After unpacking, users can run the experiment and examine the results. In the packing step, ReproZip captures what happens on a run, and therefore, the experiment will be reproducible if the process is deterministic -in case there is a nondeterministic step (e.g., race conditions on the code that may produce different outputs depending on processor speed and system overhead), it is not possible to guarantee that the original results will be reproduced.</p><p>The experiment can be executed from the command line, and users may also run the derived workflow, which can be run by the VisTrails system <ref type="bibr" target="#b3">[4]</ref>. By using VisTrails, users can leverage a host of features that simplify validation and exploration. Because VisTrails provides a visual representation of the experiment, where input and output files are explicitly described, the reviewer can visually understand structure of the experiment. VisTrails also provides an interface to perform parameter sweeps and compare results side-by-side in a visual spreadsheet. Reviewers can extend the original workflow to explore different techniques or perform analyses (e.g., generate plots and other types of visualization) different from the ones produced by the authors. Finally, because VisTrails captures provenance of the verification process, this provenance can serve as a means of communication between reviewers and authors; for example, if reviewers find an issue with a given parameter combination, they can send the exact configuration back to the authors. <ref type="figure" target="#fig_1">Fig- ure 2b</ref> illustrates the verification and exploration process performed in the marching cubes experiment. The workflow is extended to derive a visualization, and the parameter sweep feature of VisTrails is also used to compare results for multiple values for the isosurface. Examining the different isosurfaces enables the reviewer to verify the robustness of the marching cubes algorithm being evaluated.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4">Conclusion</head><p>Good computational science requires reproducibility, but the effort to achieve this has heretofore been significant. Our system ReproZip simplifies this task. By combining features of scientific workflows and tools that transparently and systematically capture the provenance of the execution of the experiments, ReproZip not only simplifies the process required to create reproducible experiments, but it also helps reviewers to verify the results and communicate their findings to the authors.</p><p>Although our initial evaluation has shown that ReproZip is effective for a wide range of experiments in different domains, there are some known limitations. For instance, execution will fail in environment E if binaries are incompatible with the Linux kernel or hardware architecture or when a given executable uses a hard-coded absolute path. For such situations, our current approach is to ReproZip together with virtual machines.</p><p>We look forward to the day when reproducibility becomes routine and researchers mix and match the workflows of automatically packed software environments to create entirely new applications. ReproZip is a step in that direction.</p></div><figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_0"><head>Figure 1 :</head><label>1</label><figDesc>Figure 1: Creating reproducible experiments with ReproZip.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_1"><head>Figure 2 :</head><label>2</label><figDesc>Figure 2: Making an experiment reproducible. In the packing step, a provenance tree and a workflow specification are derived (a). After unpacking, reviewers can extend the workflow to vary the experiment and view the results (b).</figDesc></figure>

			<note place="foot" n="1"> The resulting reproducible package had a size of around 40 MB, which is significantly smaller than, for instance, a virtual machine snapshot containing the same experiment (about 3 GB running Ubuntu).</note>
		</body>
		<back>

			<div type="acknowledgement">
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Acknowledgments. We thank Jesse Lingeman, Lis</head><p>Custódio and Tiago Etiene for providing their experiments that we have used to test ReproZip. This work has been partially funded by the National Science Foundation grants CNS-1229185, IIS-1139832, IIS-1142013, IIS-1050388.</p></div>
			</div>

			<div type="references">

				<listBibl>

<biblStruct xml:id="b0">
	<analytic>
		<title level="a" type="main">Automated capture of experiment context for easier reproducibility in computational research</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Davison</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">CISE</title>
		<imprint>
			<biblScope unit="volume">14</biblScope>
			<biblScope unit="issue">4</biblScope>
			<biblScope unit="page" from="48" to="56" />
			<date type="published" when="2012" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b1">
	<analytic>
		<title level="a" type="main">Reproducible researh</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Fomel</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Claerbout</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">CISE</title>
		<imprint>
			<biblScope unit="volume">11</biblScope>
			<biblScope unit="issue">1</biblScope>
			<date type="published" when="2009" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b2">
	<analytic>
		<title level="a" type="main">Computational reproducibility: state-of-the-art, challenges, and database research opportunities</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Freire</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><surname>Bonnet</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Shasha</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">SIGMOD</title>
		<imprint>
			<date type="published" when="2012" />
			<biblScope unit="page" from="593" to="596" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b3">
	<monogr>
		<title level="m" type="main">The Architecture of Open Source Applications</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Freire</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Koop</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">E</forename><surname>Santos</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><surname>Scheidegger</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><surname>Silva</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">H</forename><forename type="middle">T</forename><surname>Vo</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2011" />
		</imprint>
	</monogr>
	<note>chapter VisTrails. Lulu.com</note>
</biblStruct>

<biblStruct xml:id="b4">
	<analytic>
		<title level="a" type="main">Making computations and publications reproducible with vistrails</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Freire</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><forename type="middle">T</forename><surname>Silva</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">CISE</title>
		<imprint>
			<biblScope unit="volume">14</biblScope>
			<biblScope unit="issue">4</biblScope>
			<biblScope unit="page" from="18" to="25" />
			<date type="published" when="2012" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b5">
	<analytic>
		<title level="a" type="main">Automatic capture and reconstruction of computational provenance</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Frew</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Metzger</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><surname>Slaughter</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">CCPE</title>
		<imprint>
			<biblScope unit="volume">20</biblScope>
			<biblScope unit="issue">5</biblScope>
			<biblScope unit="page" from="485" to="496" />
			<date type="published" when="2008" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b6">
	<analytic>
		<title level="a" type="main">CDE: A Tool for Creating Portable Experimental Software Packages</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><surname>Guo</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">CISE</title>
		<imprint>
			<biblScope unit="volume">14</biblScope>
			<biblScope unit="issue">4</biblScope>
			<biblScope unit="page" from="32" to="35" />
			<date type="published" when="2012" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b7">
	<analytic>
		<title level="a" type="main">Burrito: wrapping your lab notebook in computational infrastructure</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><forename type="middle">J</forename><surname>Guo</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Seltzer</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">TAPP</title>
		<imprint>
			<date type="published" when="2012" />
			<biblScope unit="page" from="7" to="7" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b8">
	<monogr>
		<title level="m" type="main">Scientific Workflow Management and the Kepler System</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">B</forename><surname>Ludäscher</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2005" />
			<publisher>CCP&amp;E</publisher>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b9">
	<monogr>
		<title/>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Mongodb</surname></persName>
		</author>
		<ptr target="http://www.mongodb.org/" />
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b10">
	<analytic>
		<title level="a" type="main">Provenance-aware storage systems</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">K.-K</forename><surname>Muniswamy-Reddy</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><forename type="middle">A</forename><surname>Holland</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">U</forename><surname>Braun</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Seltzer</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">USENIX</title>
		<imprint>
			<date type="published" when="2006" />
			<biblScope unit="page" from="4" to="4" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b11">
	<monogr>
		<title/>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Systemtap</surname></persName>
		</author>
		<ptr target="http://sourceware.org/systemtap/" />
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b12">
	<monogr>
		<title/>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Taverna</surname></persName>
		</author>
		<ptr target="http://www.taverna.org.uk" />
		<imprint/>
	</monogr>
</biblStruct>

				</listBibl>
			</div>
		</back>
	</text>
</TEI>
