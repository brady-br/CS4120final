<?xml version="1.0" encoding="UTF-8"?>
<TEI xmlns="http://www.tei-c.org/ns/1.0" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
xsi:schemaLocation="http://www.tei-c.org/ns/1.0 /Users/atharsefid/Desktop/grobid-0.5.3/grobid-home/schemas/xsd/Grobid.xsd"
 xmlns:xlink="http://www.w3.org/1999/xlink">
	<teiHeader xml:lang="en">
		<encodingDesc>
			<appInfo>
				<application version="0.5.3" ident="GROBID" when="2020-09-29T02:49+0000">
					<ref target="https://github.com/kermitt2/grobid">GROBID - A machine learning software for extracting information from scholarly documents</ref>
				</application>
			</appInfo>
		</encodingDesc>
		<fileDesc>
			<titleStmt>
				<title level="a" type="main">Accelerating Complex Data Transfer for Cluster Computing</title>
			</titleStmt>
			<publicationStmt>
				<publisher/>
				<availability status="unknown"><licence/></availability>
			</publicationStmt>
			<sourceDesc>
				<biblStruct>
					<analytic>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Alexey</forename><surname>Khrabrov</surname></persName>
							<affiliation key="aff0">
								<orgName type="institution" key="instit1">University of Toronto</orgName>
								<orgName type="institution" key="instit2">University of Toronto</orgName>
							</affiliation>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Eyal</forename><surname>De Lara</surname></persName>
							<affiliation key="aff0">
								<orgName type="institution" key="instit1">University of Toronto</orgName>
								<orgName type="institution" key="instit2">University of Toronto</orgName>
							</affiliation>
						</author>
						<title level="a" type="main">Accelerating Complex Data Transfer for Cluster Computing</title>
					</analytic>
					<monogr>
						<imprint>
							<date/>
						</imprint>
					</monogr>
				</biblStruct>
			</sourceDesc>
		</fileDesc>
		<profileDesc>
			<abstract>
				<p>The ability to move data quickly between the nodes of a distributed system is important for the performance of cluster computing frameworks, such as Hadoop and Spark. We show that in a cluster with modern networking technology data serialization is the main bottleneck and source of overhead in the transfer of rich data in systems based on high-level programming languages such as Java. We propose a new data transfer mechanism that avoids serialization altogether by using a shared cluster-wide address space to store data. The design and a prototype implementation of this approach are described. We show that our mechanism is significantly faster than serialized data transfer, and propose a number of possible applications for it.</p>
			</abstract>
		</profileDesc>
	</teiHeader>
	<text xml:lang="en">
		<body>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="1">Introduction</head><p>Modern distributed computational systems are becoming more and more CPU-bound <ref type="bibr" target="#b10">[12]</ref>. In contrast with the common belief that I/O (network and disk) operations are usually the main bottleneck, new network technologies, such as InfiniBand, allow bandwidths of up to 100 Gbit/s, and the advent of RDMA (remote direct memory access) has drastically shrunk the latency gap between remote and local memory accesses.</p><p>In this paper, we show that for distributed applications running modern clusters the main bottleneck for data transfer is data serialization, which is a CPU-bound operation. This is especially the case for complex data structures used by high-level programming languages.</p><p>Data serialization is the process of translating objects into an intermediate format such that the object can be reconstructed from it on another machine. Many of the reasons for serialization, such as the ability to transfer data between machines with different word size or endianness, are becoming irrelevant. We can assume that a modern cluster consists of nodes with the same hardware architecture. The only real reason for serialization is that pointer-based data structures become invalid when copied directly to another address space.</p><p>This paper introduces a novel fast data transfer mechanism that avoids data serialization altogether by using a shared cluster-wide address space to store objects that can be transferred between nodes. This approach preserves the validity of object pointers even as they get copied to another node. The objects are allocated in a special "compact" manner. They occupy contiguous regions of address space (similar to the serialized representation), which makes them amenable for fast network transfer, especially with RDMA.</p><p>The idea of a shared cluster-wide address space has been around for many years. An extreme version even uses the same address space for disk storage <ref type="bibr" target="#b11">[13]</ref>. Distributed shared memory (DSM) systems reduce programming complexity by providing a consistent single-image view of the system. Effectively, these approaches trade performance for transparency. In contrast, we forego transparency in favour of performance. We require programmers to manage objects explicitly, and only leverage shared memory to increase performance by allowing direct copy of pointer-based data structures between nodes.</p><p>Many of the modern cluster computing systems (such as Hadoop <ref type="bibr" target="#b0">[1]</ref> and Spark <ref type="bibr" target="#b1">[2]</ref>) are based on Java Virtual Machine (JVM) languages such as Java and Scala. That is why our implementation targets the JVM, although the idea of our direct object transfer mechanism is not specific to any programming language or platform. The implementation involves modifying the JVM, the memory management subsystem in particular.</p><p>We have implemented this novel object transfer mechanism for the JVM and evaluated its performance. It can speedup object transfer up to 5× compared to optimized serialization using Kryo <ref type="bibr" target="#b3">[4]</ref> and up to 10× compared to standard Java serialization, on a 5.5 Gbit/s network.</p><p>The rest of the paper is organized as follows. In Section 2, we discuss the motivation behind the paper and present an analysis of Java serialization performance compared to potential performance of direct transfer. Section 3 describes design and implementation of the proposed mechanism. Section 4 contains performance evaluation of our implementation. In Section 5 we propose a few potential applications of this mechanism. Section 6 compares this paper to related work. Section 7 concludes the paper and describes future work directions.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2">Motivation</head><p>Modern cluster computing systems such as Spark and their workloads tend to be CPU-bound <ref type="bibr" target="#b10">[12]</ref>. For instance, improving network I/O performance can only affect overall performance by less than 2% for typical workloads. Based on these observations, we conclude that optimizing CPU-bound operations such as data serialization is a reasonable way to improve performance of cluster computing systems.</p><p>Before moving on to experimental data, let us briefly discuss some general aspects of data serialization performance. Serialization is almost always sequential, so it does not scale with increasing number of CPUs. Serialization of complex data structures such as binary trees is also not cache-friendly. Serialization of even the simplest objects requires an extra in-memory copy of the whole object on both the source and the destination nodes: to network buffers on the source, and from network buffers on the destination. In contrast, when data is transferred directly (without serialization) and via RDMA, there are no extra copies, and CPU is not involved. Java serialization performance measurements were performed using OpenJDK 8 as the Java class library and HotSpot (in server mode) as the JVM. We used Kryo <ref type="bibr" target="#b3">[4]</ref> -a popular (e.g. used by Apache Spark) custom fast serialization library. Experiments were run on two identical machines (the sender and the receiver) with the following hardware configuration: 8-core Intel Xeon L5420 CPU @2.5Hz with 16 GB of RAM, running Linux 3.16.7 kernel, connected with 1 Gbit/s and 10 Gbit/s (the actual bandwidth was 5.5 Gbit/s) Ethernet.</p><p>We used both simple (array of integers) and complex (a TreeMap with integer keys and arrays of strings as values) data. Figures 1 and 2 represent the time breakdown of serialized transfer compared to the time taken to transfer raw object data. Results are averaged over 50 measurements; the standard deviation is within 10%.</p><p>Serialization and deserialization take a significant portion of transfer time -up to 60% for simple data and up to 90% for complex. Raw data takes more time to send over the network since the serialized representation of objects is smaller. However, total transfer time is significantly smaller for raw data. Based on these results, we expect that our proposed mechanism will be able to significantly speedup object transfer.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3">System Design and Implementation</head><p>We assume that the object transfer mechanism does not have to be completely transparent to the programmer.</p><p>Objects shared among the nodes should be managed explicitly by either the application or the framework. Shared objects are assumed to be immutable in the following sense. After an object is created on one node and copied to another node, modifications of the original object are not propagated. This requirement is not very restrictive in practice since common cluster computing frameworks operate with immutable objects.</p><p>The system should be implemented without any changes to the programming language. An example of such change is adding a new keyword to identify shared objects (as in PGAS languages <ref type="bibr">[6]</ref>). Changing the programming language requires modifications of the compiler and the class file format at great engineering cost.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.1">Programming model</head><p>Our data transfer mechanism introduces the notion of the global heap -a virtual address space region that is used to store shared objects. The global head is mapped to the same predefined range of virtual addresses in all the JVM processes that take part in the computation. The global heap architecture is illustrated in <ref type="figure" target="#fig_1">Figure 3</ref>.</p><p>We will use the term "global heap object" to denote the whole complex object or collection that can be shared between nodes. The contents of global heap objects (Java objects linked by pointers) are allocated in a compact way such that the whole global heap object occupies a contiguous memory range (illustrated in <ref type="figure">Figure 4</ref>). Each global heap object is located at a unique address, so when it is copied between nodes, no conflicts are possible. When a global heap object is created, an address range is reserved in the global heap. This range is released when all the copies of the object are destroyed. Object destruction can be performed either explicitly or implicitly (in a deferred fashion) using Java finalizers. We plan to explore the possibility of automatic garbage collection in the global heap in our future work.</p><p>In order to use our mechanism, the application has to perform some operations in a special way. In particular, it needs to let the JVM know which objects must be allocated on the global heap. Object creation is divided into three stages (described in <ref type="figure">Figure 5</ref>): (1) reserving space in the global heap; (2) populating the object with data; (3) making it available to other nodes (commit). The object becomes immutable after the commit operation.</p><p>Programming interface on the Java level is provided via special native methods implemented inside the JVM itself. They can access the JVM internal state such as memory allocator metadata. This allows us to avoid significant modifications of the bytecode interpreter.</p><p>Global classes (objects of which can be stored in the global heap) need to be registered before usage. Note that all the classes, instances of which are to be shared, must be registered, including classes of entries of vari-// Source side: // Reserve space in the global heap GObject obj = new GObject(...); // Populate the object with data obj.data = ...; // Make the object available to other nodes obj.commit <ref type="figure">("key")</ref>; ... obj.release();// no longer in use ------------------------------------------------// Destination side: // Obtain a copy of the object GObject obj = GHeap.get <ref type="figure">("key")</ref>; ... obj.release();// no longer in use <ref type="figure">Figure 5</ref>: Global heap object creation and transfer ous collections, which are usually declared private. We rely on reflection to automate registration of such auxiliary classes. Developers can also use Java annotations to declare their own classes as global instead of making registration calls in runtime.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.2">Distributed global heap coordination and accessing remote objects</head><p>The global heap is designed in a way that minimizes the amount of distributed coordination and synchronization. Our design is inspired by multithreaded memory allocators such as Hoard <ref type="bibr" target="#b6">[8]</ref>. The global heap is partitioned among the nodes: at every point in time, each node has a set of exclusive address space ranges that are used to allocate global heap objects created on this node. As a result, most of the time, allocation is performed entirely locally by each node. Furthermore, each node's exclusive heap is partitioned in the same fashion between the threads running on the node. Global heap ranges for exclusive allocation are requested from the centralized coordinator service dynamically on demand and released when they are no longer in use. Distributed coordination is limited to reserving and releasing these (large) heap ranges. Dynamic partitioning scheme allows our mechanism to be used in dynamic cluster topologies and elastic cloud deployments.</p><p>Shared object are located using the object address and the node network address. This location information can be obtained either using a separate communication mechanism or the location service (key-object mapping) provided by the system. In the latter case, our system can be viewed as a distributed key-value store. Currently, our implementation only supports TCP transport; each node runs a TCP server servicing requests for object data. We plan to implement RDMA support in the near future.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.3">JVM modifications</head><p>We have implemented our fast object transfer mechanism for JamVM <ref type="bibr" target="#b2">[3]</ref> -a lightweight open source Java virtual machine. It is significantly simpler than HotSpot <ref type="bibr" target="#b4">[5]</ref> (the reference implementation of the JVM), that is why we chose it for the initial prototype. We are currently working on the HotSpot-based implementation.</p><p>Each Java object's binary representation has a pointer to its class object containing the class metadata. These class pointers are the only type of "external" (pointing outside of the global heap) pointers that cannot be avoided. We store unique class IDs in object headers instead of pointers. The JVM maintains the class pointer table; class IDs act as indices into this table. IDs are assigned to classes on registration, so the order of registration must be the same on all the nodes.</p><p>For each global heap object created on the current node, the JVM maintains its own dedicated (small) memory heap for the address range reserved for this object. The memory allocator determines which range to allocate from using the context information (object currently being populated) stored in the Java thread. When the JVM allocates memory for objects, it dispatches the allocation to the corresponding heap range.</p><p>Since there is no need to free individual small objects or perform garbage collection within these ranges, memory is allocated using simple "bump pointer" method. The ranges are discarded as a whole when objects are released. This simplicity leads to our memory allocation mechanism being generally faster than ordinary JVM memory allocation and garbage collection.</p><p>Since we have changed the semantics of some of lowlevel JVM operations (namely dereferencing the class pointer), we had to modify a small part of the bytecode interpreter. Besides that, we had to modify the garbage collector (GC) in order to disable it for the global heap. JamVM uses a conservative GC -when discovering "live" objects, it treats all object fields that look like pointers into the Java heap as object references. Pointers into the global heap are simply ignored.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4">Evaluation</head><p>To evaluate the performance of our object transfer mechanism we designed the following benchmark. We compare time taken to transfer objects between two nodes with serialization (using both Kryo and standard Java serialization) and directly using our mechanism. The experiments were conducted on the hardware described in Section 2, with a 5.5 Gbit/s network. For direct copy measurements we used a modified version of JamVM 2.0 and GNU Classpath 0.99 as Java class library (due to compatibility issues with OpenJDK). We used the same The results are presented in <ref type="figure" target="#fig_2">Figures 6, 7</ref> and 8. All measurements are averaged over 50 runs; error bars represent the standard deviation. As we can see from the graphs, direct object transfer achieves significant speedups: up to 5× compared to Kryo and up to 10× compared to standard serialization for complex data, and up to 2.5× for simple data. We expect even more significant speedup with higher network bandwidth (e.g. 40 Gbit/s) and using RDMA as the transport. data sizes of a few hundred bytes (in case of simple objects), our mechanism performs worse than Kryo, but still better than standard serialization. Our implementation can be further optimized to minimize the fixed (independent of data size) overhead. In order to estimate the overhead of JVM modifications, we used a test program that populates a data structure (TreeMap with objects as keys and values), serializes and deserializes it in memory. We chose this test because it involves a lot of memory allocations (during deserialization) and accesses to class metadata (to determine if each object is serializable); these are the two operations that we modified in the JVM. We measured total execution time for unmodified JamVM and for our modified version. The results of this experiment showed that the overhead is negligible -within 1% for all the runs.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5">Applications</head><p>As we already mentioned, one example of a system that could benefit from our fast data transfer mechanism is the Apache Spark <ref type="bibr" target="#b13">[15]</ref> [2] cluster computing framework. One of the main bottlenecks in typical Spark workloads are shuffle operations that require data transfer between all the nodes. Optimizing data transfer with our proposed mechanism can significantly speed up shuffle operations.</p><p>Another example is distributed in-memory key-value stores. Our mechanism would significantly reduce the latency of get and set operations in the case when values are complex objects (instead of small primitives such as numbers and strings).</p><p>Our approach is not limited to data transfer between different machines. It can also be used to improve performance of local IPC (inter-process communication) between processes running on the same machine. Here we can go further than only getting rid of serialization: objects to be transferred can be stored in shared memory, which will provide a very fast zero-copy IPC mechanism for complex data transfer.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="6">Related Work</head><p>There are many existing implementations of distributed Java virtual machines that target large-scale computational clusters. Some of them are also based on the idea of a shared address space <ref type="bibr" target="#b5">[7]</ref>. However, the existing system is based on a full-featured DSM and requires hardware support in order to have good performance. Our approach is more suited for a specific problem of fast migration of complex data structures, and does not require a sophisticated underlying DSM system. PGAS (partitioned global address space) languages <ref type="bibr">[6]</ref> are based on the programming model with a global address space divided into regions shared between processes and regions local to one process. Separation into local heaps for each node and one global heap is very similar to PGAS. However, there are significant differences: (1) our mechanism doesn't involve programming language modifications; (2) PGAS model has more strict consistency properties, leading to worse performance.</p><p>As RDMA becomes a more popular and mature technology, researchers are adopting existing distributed systems to benefit from RDMA and are designing new ones. Notable examples include in-memory key-value stores <ref type="bibr" target="#b7">[9]</ref> [10] and efforts to support RDMA in cluster computing frameworks <ref type="bibr" target="#b9">[11]</ref>. Design of these systems is mostly focused on a different (from traditional TCP sockets) network communication paradigm. Our approach is not specific to RDMA, although would benefit the most from RDMA-capable hardware.</p><p>Project Tungsten <ref type="bibr" target="#b12">[14]</ref> is an effort by Apache Spark developers to improve memory management performance in Spark. The main idea is re-implementing standard Java collections using "unsafe" interfaces provided by the JVM. These new collections are allocated in native memory and are not managed by the JVM. They benefit from decreased memory footprint and improved cache locality. Our approach is similar in a way that it also involves lower-level JVM-related optimizations. However, our mechanism allows using existing Java collections. The two approaches can be combined to achieve even better performance improvements.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="7">Conclusion</head><p>In this paper we describe a novel approach for fast transfer of complex pointer-rich data structures between the nodes of a distributed system. The approach is based on avoiding serialization of data (which is the main bottleneck given modern high-speed networks) by providing a global cluster-wide virtual address space to store shared objects. This mechanism can significantly speedup transferring large datasets, although it adds programming complexity (due to explicit management of shared objects) in order to achieve performance benefits.</p><p>This fast data transfer mechanism can be applied to improve performance of various distributed applications such as cluster computing frameworks and distributed in-memory key-value stores. Another possible application is a fast IPC mechanism for transferring complex objects between different processes running on the same machine. We are planning to explore these and other applications in our future work.</p><p>One of the important aspects that we leave out of scope of this paper is fault tolerance, which we currently assume to be the responsibility of the application. Fault tolerance is among the main directions of our future work.</p></div><figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_0"><head>Figure 2 :</head><label>2</label><figDesc>Figure 1: Transfer time breakdown for simple data</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_1"><head>Figure 3 :</head><label>3</label><figDesc>Figure 3: Global heap architecture</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_2"><head>Figure 7 :</head><label>7</label><figDesc>Figure 6: Serialization vs. direct copy for simple data</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_3"><head>Figure 8 representsFigure 8 :</head><label>88</label><figDesc>Figure 8: Serialization vs. direct copy for small objects</figDesc></figure>
		</body>
		<back>
			<div type="references">

				<listBibl>

<biblStruct xml:id="b0">
	<monogr>
		<title/>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Apache</forename><surname>Hadoop</surname></persName>
		</author>
		<ptr target="https://hadoop.apache.org/" />
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b1">
	<monogr>
		<title/>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Apache</forename><surname>Spark</surname></persName>
		</author>
		<ptr target="http://spark.apache.org/" />
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b2">
	<monogr>
		<title/>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Jamvm</surname></persName>
		</author>
		<ptr target="http://jamvm.sourceforge.net/" />
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b3">
	<monogr>
		<title level="m" type="main">Kryo -Java serialization and cloning: fast, efficient</title>
		<ptr target="https://github.com/EsotericSoftware/kryo" />
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b4">
	<monogr>
		<title/>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Hotspot</forename><surname>Openjdk</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Jvm</surname></persName>
		</author>
		<ptr target="http://openjdk.java.net/" />
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b5">
	<analytic>
		<title level="a" type="main">Kaffemik -a distributed jvm featuring a single address space architecture</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Andersson</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Weber</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Cecchet</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">E</forename><surname>Jensen</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><surname>And</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Cahill</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">V</forename></persName>
		</author>
		<idno>JVM&apos;01</idno>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 2001 Symposium on JavaTM Virtual Machine Research and Technology Symposium -Volume</title>
		<meeting>the 2001 Symposium on JavaTM Virtual Machine Research and Technology Symposium -Volume<address><addrLine>Berkeley, CA, USA</addrLine></address></meeting>
		<imprint>
			<publisher>USENIX Association</publisher>
			<date type="published" when="2001" />
			<biblScope unit="volume">1</biblScope>
			<biblScope unit="page" from="9" to="9" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b6">
	<analytic>
		<title level="a" type="main">Hoard: A scalable memory allocator for multithreaded applications</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">E</forename><forename type="middle">D</forename><surname>Berger</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">K</forename><forename type="middle">S</forename><surname>Mckinley</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><forename type="middle">D</forename><surname>Blumofe</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Wilson</forename><surname>And</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><forename type="middle">R</forename></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the Ninth International Conference on Architectural Support for Programming Languages and Operating Systems</title>
		<meeting>the Ninth International Conference on Architectural Support for Programming Languages and Operating Systems<address><addrLine>New York, NY, USA</addrLine></address></meeting>
		<imprint>
			<date type="published" when="2000" />
			<biblScope unit="page" from="117" to="128" />
		</imprint>
	</monogr>
	<note>ASPLOS IX, ACM</note>
</biblStruct>

<biblStruct xml:id="b7">
	<analytic>
		<title level="a" type="main">Farm: Fast remote memory</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Dragojevi´cdragojevi´</forename><surname>Dragojevi´c</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Narayanan</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Hodson</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">O</forename><surname>And</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Cas-Tro</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 11th USENIX Conference on Networked Systems Design and Implementation</title>
		<meeting>the 11th USENIX Conference on Networked Systems Design and Implementation<address><addrLine>Berkeley, CA, USA</addrLine></address></meeting>
		<imprint>
			<date type="published" when="2014" />
			<biblScope unit="page" from="401" to="414" />
		</imprint>
	</monogr>
	<note>NSDI&apos;14, USENIX Association</note>
</biblStruct>

<biblStruct xml:id="b8">
	<analytic>
		<title level="a" type="main">Memcached design on high performance rdma capable interconnects</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Jose</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Subramoni</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">H</forename><surname>Luo</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Zhang</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Huang</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Wasi-Ur</forename><surname>Rahman</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Islam</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">N</forename><forename type="middle">S</forename><surname>Ouyang</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">X</forename><surname>Wang</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">H</forename><surname>Sur</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>And Panda</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><forename type="middle">K</forename></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 2011 International Conference on Parallel Processing</title>
		<meeting>the 2011 International Conference on Parallel Processing<address><addrLine>Washington, DC, USA</addrLine></address></meeting>
		<imprint>
			<publisher>IEEE Computer Society</publisher>
			<date type="published" when="2011" />
			<biblScope unit="page" from="743" to="752" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b9">
	<analytic>
		<title level="a" type="main">Accelerating spark with rdma for big data processing: Early experiences</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">L</forename><forename type="middle">U</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">X</forename><surname>Rahman</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><forename type="middle">W U</forename><surname>Islam</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">N</forename><surname>Shankar</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>And Panda</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><forename type="middle">K</forename></persName>
		</author>
		<idno>HOTI &apos;14</idno>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 2014 IEEE 22Nd Annual Symposium on High-Performance Interconnects</title>
		<meeting>the 2014 IEEE 22Nd Annual Symposium on High-Performance Interconnects<address><addrLine>Washington, DC, USA</addrLine></address></meeting>
		<imprint>
			<publisher>IEEE Computer Society</publisher>
			<date type="published" when="2014" />
			<biblScope unit="page" from="9" to="16" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b10">
	<analytic>
		<title level="a" type="main">Making sense of performance in data analytics frameworks</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Ousterhout</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">K</forename><surname>Rasti</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Ratnasamy</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Shenker</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>And</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Chun</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">B.-G</forename></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 12th USENIX Conference on Networked Systems Design and Implementation</title>
		<meeting>the 12th USENIX Conference on Networked Systems Design and Implementation<address><addrLine>CA, USA</addrLine></address></meeting>
		<imprint>
			<publisher>Berkeley</publisher>
			<date type="published" when="2015" />
			<biblScope unit="page" from="293" to="307" />
		</imprint>
	</monogr>
	<note>NSDI&apos;15, USENIX Association</note>
</biblStruct>

<biblStruct xml:id="b11">
	<analytic>
		<title level="a" type="main">Using a single address space operating system for distributed computing and high performance</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Skousen</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>And Miller</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the IEEE International Performance Computing and Communications Conference</title>
		<meeting>the IEEE International Performance Computing and Communications Conference<address><addrLine>Phoenix/Scottsdale, Arizona, USA</addrLine></address></meeting>
		<imprint>
			<date type="published" when="1999-02" />
			<biblScope unit="page" from="8" to="14" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b12">
	<monogr>
		<title level="m" type="main">Project Tungsten: Bringing Spark closer to bare metal</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Xin</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>And</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Rosen</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename></persName>
		</author>
		<ptr target="https://databricks.com/blog/2015/04/28/project-tungsten-bringing-spark-closer-to-bare-metal.html" />
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b13">
	<analytic>
		<title level="a" type="main">Resilient distributed datasets: A fault-tolerant abstraction for in-memory cluster computing</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Zaharia</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Chowdhury</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Das</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><surname>Dave</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Ma</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Mccauley</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Franklin</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><forename type="middle">J</forename><surname>Shenker</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>And</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Stoica</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">I</forename></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 9th USENIX Conference on Networked Systems Design and Implementation</title>
		<meeting>the 9th USENIX Conference on Networked Systems Design and Implementation<address><addrLine>Berkeley, CA, USA</addrLine></address></meeting>
		<imprint>
			<date type="published" when="2012" />
			<biblScope unit="page" from="2" to="2" />
		</imprint>
	</monogr>
	<note>NSDI&apos;12, USENIX Association</note>
</biblStruct>

				</listBibl>
			</div>
		</back>
	</text>
</TEI>
