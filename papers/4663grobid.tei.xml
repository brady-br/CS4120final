<?xml version="1.0" encoding="UTF-8"?>
<TEI xmlns="http://www.tei-c.org/ns/1.0" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
xsi:schemaLocation="http://www.tei-c.org/ns/1.0 /Users/atharsefid/Desktop/grobid-0.5.3/grobid-home/schemas/xsd/Grobid.xsd"
 xmlns:xlink="http://www.w3.org/1999/xlink">
	<teiHeader xml:lang="en">
		<encodingDesc>
			<appInfo>
				<application version="0.5.3" ident="GROBID" when="2020-09-29T04:27+0000">
					<ref target="https://github.com/kermitt2/grobid">GROBID - A machine learning software for extracting information from scholarly documents</ref>
				</application>
			</appInfo>
		</encodingDesc>
		<fileDesc>
			<titleStmt>
				<title level="a" type="main">A Security Analysis of an In Vehicle Infotainment and App Platform</title>
			</titleStmt>
			<publicationStmt>
				<publisher/>
				<availability status="unknown"><licence/></availability>
			</publicationStmt>
			<sourceDesc>
				<biblStruct>
					<analytic>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Sahar</forename><surname>Mazloom</surname></persName>
							<affiliation key="aff0">
								<orgName type="institution" key="instit1">George Mason University</orgName>
								<orgName type="institution" key="instit2">George Mason University</orgName>
								<orgName type="institution" key="instit3">George Mason University</orgName>
								<orgName type="institution" key="instit4">New York University</orgName>
							</affiliation>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Mohammad</forename><surname>Rezaeirad</surname></persName>
							<affiliation key="aff0">
								<orgName type="institution" key="instit1">George Mason University</orgName>
								<orgName type="institution" key="instit2">George Mason University</orgName>
								<orgName type="institution" key="instit3">George Mason University</orgName>
								<orgName type="institution" key="instit4">New York University</orgName>
							</affiliation>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Aaron</forename><surname>Hunter</surname></persName>
							<affiliation key="aff0">
								<orgName type="institution" key="instit1">George Mason University</orgName>
								<orgName type="institution" key="instit2">George Mason University</orgName>
								<orgName type="institution" key="instit3">George Mason University</orgName>
								<orgName type="institution" key="instit4">New York University</orgName>
							</affiliation>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Damon</forename><surname>Mccoy</surname></persName>
							<affiliation key="aff0">
								<orgName type="institution" key="instit1">George Mason University</orgName>
								<orgName type="institution" key="instit2">George Mason University</orgName>
								<orgName type="institution" key="instit3">George Mason University</orgName>
								<orgName type="institution" key="instit4">New York University</orgName>
							</affiliation>
						</author>
						<title level="a" type="main">A Security Analysis of an In Vehicle Infotainment and App Platform</title>
					</analytic>
					<monogr>
						<imprint>
							<date/>
						</imprint>
					</monogr>
					<note>â€  Lead co-authors contributed equally to this work</note>
				</biblStruct>
			</sourceDesc>
		</fileDesc>
		<profileDesc>
			<abstract>
				<p>There is an increasing trend in the automotive industry towards integrating trusted third-party apps with In-Vehicle-Infotainment systems (IVI) via smartphones. This integration is typically facilitated by a pair of apps, one that executes on the smartphone and the other executes on the IVI which is connected to the Vehicle&apos;s Controller Area Network (CAN) bus. Throughout the evolution of these IVI and App platforms, there has been little public analysis of the security of these protocols and the frameworks that implement these apps on the IVI. This raises the question: to what extent are these apps, protocols and underlining IVI implementations vulnerable to an attacker who might gain control of a driver&apos;s smart-phone? In this paper, we focus on gaining insights into this question by performing a comprehensive security analysis on an IVI system that is included in at least one 2015 model vehicle from a major automotive manufacturer. This IVI system included vestigial support for the Mir-rorLink protocol which is intentionally disabled but can be enabled by updating a single configuration value after applying a publicly available firmware update that is securely signed by the manufacturer. Based on our analysis , we document and demonstrate insecurities in the MirrorLink protocol and IVI implementation that could potentially enable an attacker with control of a driver&apos;s smartphone to send malicious messages on the vehicle&apos;s internal network.</p>
			</abstract>
		</profileDesc>
	</teiHeader>
	<text xml:lang="en">
		<body>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="1">Introduction</head><p>Modern automobiles are increasingly controlled by computerized systems that are directly or indirectly connected to the Internet. This in turn, means that automobiles are potentially vulnerable to attack from adversaries who can gain control of one of these external devices. Previous works have demonstrated cars are vulnerable to an attacker that has internal access to the Vehicle's Controller Area Network (CAN) bus or can remotely connect to automotive systems <ref type="bibr" target="#b7">[14,</ref><ref type="bibr" target="#b11">18,</ref><ref type="bibr" target="#b14">21,</ref><ref type="bibr" target="#b4">11,</ref><ref type="bibr" target="#b15">22,</ref><ref type="bibr" target="#b18">25,</ref><ref type="bibr" target="#b28">35]</ref>.</p><p>Despite these risks, the number of external devices that are connected to both an automotive system and the Internet continues to increase. In particular, there is an increasing trend towards the integration of smartphones and In-Vehicle-Infotainment systems (IVI) connected to the CAN bus. This integration between IVI and smartphone is typically facilitated by a pair of apps, one that executes on the smartphone and the other executes on the IVI. Currently these app platforms are a closed ecosystem of trusted third-party developers, but many automotive manufactures plan to open up their IVI app platforms to a larger pool of less vetted app developers <ref type="bibr" target="#b20">[27]</ref>. The initial app platforms, such as Toyota Entune <ref type="bibr" target="#b0">[5]</ref>, BMW ConnectedDrive <ref type="bibr">[4]</ref>, Cadillac CUE <ref type="bibr">[2]</ref>, Ford Sync AppLink <ref type="bibr">[3]</ref>, were largely proprietary to a single manufacturer and caused issues for developers who needed to support large numbers of protocols and legacy support. Recently a number of standardized protocols have emerged to enable seamless connectivity between smartphones and the car infotainment systems, such as Android Auto <ref type="bibr">[7]</ref>, Apple CarPlay <ref type="bibr">[8]</ref>, GENIVI <ref type="bibr" target="#b1">[6]</ref>, and MirrorLink <ref type="bibr" target="#b5">[12]</ref>.</p><p>Throughout the evolution of these IVI and app platforms, there has been little public analysis of the security of these protocols. This raises the question: to what extent are these apps, protocols and underlining IVI implementations vulnerable to an attacker who can gain control of a driver's smartphone? This paper focuses on gaining insight into this question by performing a methodical empirical analysis of the security of a single on the road IVI, along with its corresponding smartphone App, and communication protocol. Note that the MirrorLink code on this IVI is vestigial functionality that is disabled by default and there is no indication that the manufacturer intended to allow drivers to enable it. However, MirrorLink can be enabled on this IVI by changing a single configuration value in a file. We also found evidence that some drivers have likely enabled this functionality and there are instructions online which document how to do so.</p><p>Motivation: Recent studies have demonstrated that internal and remote attacks against safety critical automotive systems are possible. However, this paper presents, to the best of our knowledge, the first comprehensive empirical security analysis of a smartphone to modern IVI app protocol included in at least one 2015 model vehicle from a major automotive manufacturer. This IVI system includes vestigial support for the MirrorLink protocol. Though this protocol is disabled by default, it can be enabled by changing a single configuration value after a publicly available firmware update that is securely signed by the manufacturer. As part of our analysis, we:</p><p>1. Document and perform a security analysis of the MirrorLink protocol standard and how the protocol is implemented.</p><p>2. Perform a security analysis of critical parts of the IVI MirrorLink app implementation that parse potentially malicious input from the smartphone using static and dynamic analysis.</p><p>3. Demonstrate the vulnerabilities in the IVI MirrorLink app implementation that can potentially lead to a malicious smartphone causing the IVI to send arbitrary CAN massages.</p><p>4. Discuss how these protocols and IVI firmware can be rearchitected to improve the security of these systems against potentially malicious smartphones.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2">Background</head><p>In this section, we provide background on the MirrorLink protocol and the IVI platform integrated into several 2015 and 2016 vehicles currently on the road. The MirrorLink code on this IVI is vestigial functionality that is disabled by default, but it can be enabled by changing a single configuration value. We found evidence that some drivers have enabled this functionality and step-by-step instructions are available online documenting how to enable MirrorLink. The IVI also includes several apps, such as Pandora streaming music and BringGo navigation, that use proprietary protocols. However, given that most automotive manufacturers are moving away from proprietary protocols and towards standardized protocols for future IVI app platforms, we focus on one of these, MirrorLink, in our study.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.1">MirrorLink Protocol Specification</head><p>The MirrorLink standard 1 specifies a protocol that facilitates the integration of a smartphone to an automotive infotainment system. The main goal is to offer the user the ability to use her smartphone applications on the larger screen of the infotainment system instead of purchasing a more expensive IVI with built in Internet connectivity and applications. So in this case, for instance, she can use her smartphone navigation apps instead of paying extra for a navigation system tied to the car. Moreover, upgrading an infotainment system is not as easy as a smartphone. This paradigm is based on a client-server model in which the smartphone acts as a server and the infotainment system is its client. In this model, all of the applications will run natively on the smartphone, and the screen of the smartphone will be replicated on the infotainment screen. There are some user interaction methods implemented in the car system such as steering wheel control keys, rotating knobs, touch screen or even voiceactivated control that enable the head unit to be able to send user requests to the smartphone. The MirrorLink server (smartphone) runs the requested applications natively and then mirrors the display of the application on the infotainment screen. The MirrorLink specification defines connectivity layers as illustrated in <ref type="figure" target="#fig_0">Figure 1</ref>. Physical and data link layer: MirrorLink requires at least USB 2.0, because it meets minimum bandwidth requirement and at the same time provides a charging solution for the mobile device. Among different USB profiles, CDC/NCM was chosen for USB networking. Support for WLAN and Bluetooth is optional. Networking and Transport layer: IPv4 is specified for the networking layer with both UDP and TCP used as transport layer protocols. Both the client (IVI) and server (smartphone) must support DHCP for IPv4 addressing. Session and Application layer: The MirrorLink application layer comprises of four basic session layer components and it utilizes either TCP or UDP sockets to interact with these components: (1) UPnP: is used for service negotiation, advertisement of MirrorLink enabled server devices and client profiles, as well as control of MirrorLink server based applications. It uses UDP for broadcasting and advertisement, and TCP for remote application control. UPnP is designed to allow networked devices to seamlessly discover each other using the Simple Service Discovery Protocol (SSDP) and establish useful network service connections using a variety of other pro- <ref type="bibr">1</ref> The MirrorLink standard started out as a research project under the name of Terminal Mode, which was originally proposed by Nokia <ref type="bibr" target="#b3">[10]</ref>. The Car Connectivity Consortium (CCC) is made up of various auto and electronic manufacturers who have joined together to establish an industry standard for certifying apps and devices that are both safe and useful for drivers, called MirrorLink.  <ref type="formula">(2)</ref> VNC: provides the mirroring feature for MirrorLink protocol. It replicates the display's content of the MirrorLink server (smartphone) to the MirrorLink client (IVI). It transfers control information, such as key, pointer or touch events, as well as voice commands from client to server. TCP sockets are used in the VNC protocol. The content replication (mirroring) feature of MirrorLink is based on the VNC protocol, which is also used by many remote desktop applications. The VNC server runs on the mobile device and VNC client runs on the IVI system. When the user wants to run an application on the IVI system, a key or a pointer event is sent from the IVI (VNC client) to the mobile device as a command and control input. (3) RTP: Exchanges audio content (audio streaming) for different payload types is provided by RTP protocol. In addition to RTP, Bluetooth is also used for telephone applications (BT HFP) and media streaming (A2DP). (4) DAP: Device Attestation Protocol (DAP) <ref type="bibr" target="#b16">[23]</ref> is responsible for verifying the hardware on which the MirrorLink server software operates on. This attestation mechanism is based on standard X.509 certificates, and refers to the MirrorLink client (IVI) verifying that the MirrorLink server (smartphone) is from a compliant manufacturer and running the approved software.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.1.1">MirrorLink Security Mechanisms</head><p>Based on the MirrorLink specification, there are two main security mechanisms: (1) Device Attestation Protocol (DAP), UPnP devices consider all other devices and users to be trustworthy, which means if an attacker can gain access to the local network she could potentially inject, alter or delete UPnP messages. In MirrorLink Protocol, DAP is facilitated by the UPnP protocol in order to confirm the compliance of the MirrorLink Server hardware and software. The attestation is based on standard X.509 certificates and the attestation mechanisms that are standardized by the Trusted Computing Group (TCG). This enables the MirrorLink server device to authenticate (or attest) itself to the MirrorLink client device using a manufacturer's certificate, which is included in the DAP message exchange. The MirrorLink client should have the CA's public key (in the MirrorLink context, Car Connectivity Consortium (CCC) is the certificate authority) to validate the MirrorLink server's certificate. The server devices private key(s) must be stored securely and this can be done via Hardware-based Mobile Trust Module (MTM) implementation <ref type="bibr" target="#b6">[13]</ref> or equivalent <ref type="bibr" target="#b2">[9]</ref>, and storage on OS for which integrity has been verified with hardware-assisted secure boot process <ref type="bibr" target="#b22">[29]</ref>. The attestation process starts with the MirrorLink client sending an attestationRequest message and the server replying with anattestationResponse message, both in XML format. The main goal of this process is to enable the client device to attest that the MirrorLink server device is a genuine device from an authorized manufacturer and also that its software components such as VNC, UPnP, and RTP are certified. The usefulness of DAP is to mitigate the threat of drivers connecting insecure devices to the IVI.</p><p>(2) Content Attestation, According to the MirrorLink specification, authentication and security is handled outside the VNC protocol by the link layer and transport layer. Therefore, the VNC client does not require the VNC server to offer additional security or authentication features. For this reason, the MirrorLink protocol specifies that the security type in the VNC handshaking phase is set to None. However, there is a pair of content attestation messages that allows a MirrorLink client to verify the received content from the server. The purpose of these messages is to prevent the man-in-the-middle attack, in which the frame-buffer contents or settings can be modified maliciously. The VNC client can initiate the challenge-response protocol at any time with the VNC server. The client starts the challenge by sending the ContentAttestationRequest before sending the next FramebufferUpdateRequest. The Server should reply back with a signed ContentAttestationResponse immediately after forwarding the FramebufferResponse. The signing algorithm can be defined in the ContentAttestationRequest message. network (i.e. CAN) can override the driver's input and launch a number of attacks ranging from disabling and enabling the brakes, to turning the engine off and on. Miller and Valasek <ref type="bibr" target="#b18">[25]</ref> subsequently replicated many of these attacks in 2013 on a 2010 Toyota Prius and Ford Escape. In addition, Hope et al. <ref type="bibr" target="#b13">[20]</ref> presented an attack against a window controller. This previous work illustrates the systemic insecurity of internal automotive networks with the limitation that all these attacks require access to the vehicle's internal CAN bus.</p><p>Checkoway et al. <ref type="bibr" target="#b4">[11]</ref> first demonstrated that remote and indirect vulnerabilities in automotive ECUs would enable an attacker to gain access to the internal network of a vehicle in 2011. These efforts included exposing remotely accessible vulnerabilities in the OnStar telematics unit analog modem connected to the cellular network and at short range via Bluetooth paired devices. In addition, this study crafted a WMA file that exploited a buffer overflow in the CD player's WMA parser that allowed for indirect physical access attacks. In the same vein, Miller and Valasek <ref type="bibr" target="#b19">[26]</ref> later staged a remote attack over the cellular network by compromising a software vulnerability in the IVI. Foster et al. <ref type="bibr" target="#b7">[14]</ref> crafted SMS messages to exploit a popular aftermarket hardware dongle that connects to a vehicle via the standard OBD-II port. Finally, Kamkar previously exposed security flaws in the GM OnStar app that enabled invoking API calls of this app without authentication <ref type="bibr" target="#b11">[18]</ref>. This security flaw only enabled sending CAN messages that were predefined by the OnStar app and did not enable sending CAN messages that were not predefined by the OnStar app. Our analysis exposes weaknesses that can potentially lead to sending arbitrary CAN messages.</p><p>Previous work has either required direct access to the vehicle's internal CAN network or targeted a specific remotely accessible ECU that implements a proprietary protocol. In this paper, we perform a security assessment and expose remotely accessible security weaknesses in an IVI system that implements MirrorLink, one of several competing standardized smartphone to IVI protocols. Like similar protocols, MirrorLink in the process of being deployed by many major automotive manufacturers, and will be potentially deployed by other vehicle manufacturers and IVI suppliers 2 . These IVIs might also be the first component in vehicles that will execute apps from an open third-party developer ecosystem <ref type="bibr" target="#b24">[31]</ref>. For this reason, we feel it is critical to assess the security of these devices and protocols before they are deployed more widely.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4">Attack Model</head><p>In evaluating the security of the vestigial MirrorLink implementation on our IVI, we assume that the attacker does not have direct physical access to the specific target IVI, but does have access to an IVI with the same hardware that runs the same firmware. We also assume that the attacker can use physical reverse engineering tools and methods (i.e. JTAG debugger, chip readers, and network sniffing devices) to craft an exploit that would be able to remotely compromise the target IVI. However, these same physical reverse engineering methods cannot be used by the attacker to directly compromise the target IVI.</p><p>We assume that the attackers can also install a malicious app onto a specific MirrorLink enabled smartphone that will be connected to the target IVI. Such an installation could be done either with an exploit or by socially engineering someone into installing the app. The phone would either need to be jailbroken or the malicious app would require a privilege escalation vulnerability to gain root access. Another less targeted attack vector might be for the attacker to install their malicious app on a large set of smartphones, some of which would likely be connected to an IVI that is MirrorLink enabled and matches the hardware and firmware that is vulnerable to the attacker's IVI exploit. Finally, we assume that the IVI is connected to the automobile's internal CAN and that the exploit can trigger the IVI to send malicious CAN messages that override the driver's input to safety critical ECUs. These CAN attacks could be similar to those demonstrated by several previous studies <ref type="bibr" target="#b15">[22,</ref><ref type="bibr" target="#b18">25]</ref>.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5">Security Assessment</head><p>In this section we begin our security analysis by describing how we obtained copies of the files on the firmware and what useful debugging interfaces we discovered. We then discuss how we were able to capture traffic between the smartphone and IVI, and what was learned from our analysis of this captured traffic. Finally, we present the findings from our MirrorLink software security analysis.</p><p>In order to perform our security analysis, we bought an IVI from a 2015 vehicle on eBay. Our initial investigation showed that this IVI was not MirrorLink enabled. However, the IVI firmware is updatable by downloading and placing a validly signed update image onto a USB drive. We found a publicly available firmware update for this IVI that was cryptographically signed by the automotive manufacturer which included an initially disabled implementation of MirrorLink. We then followed step-by-step instructions that are publicly available online to change one configuration value that enabled MirrorLink. Since the update is validly signed by the auto- motive manufacturer, we assume that this is an official firmware update that included vestigial MirrorLink functionality that some drivers might be enabling.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5.1">Preparation and Data Acquisition</head><p>This section describes our methods to: (1) gain access to and extract data stored on memory chips; (2) obtain application data, kernel and configuration files from these chips; (3) discover and utilize physically accessible pins in order to discover console/debugging interfaces. These pins enabled us to perform dynamic debugging and increased control over IVI.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5.1.1">Data Extraction</head><p>We identified a NOR flash chip utilized in this IVI. We started by building a flash reader to read NOR flash, as is shown in <ref type="figure" target="#fig_1">Figure 2</ref>.</p><p>The NOR flash chip contained the BIOS, a boot-loader and two root certificates, one from the MirrorLink consortium, and the other from the automotive manufacturer (see <ref type="figure" target="#fig_2">Figure 3)</ref>. In order to install an unofficial firmware image, these certificates would need to be replaced with the ones used to sign the image. For this reason, it would not be feasible for a remote attacker to attempt to trick a driver into installing a potentially malicious image update, unless she gained access to the automotive manufacturer's private signing keys and generate a validly signed image update.</p><p>We then unpacked the update image and obtained the Windows embedded CE runtime image (NK.BIN), user application executables, kernel executables 3 , configuration files, and a complete image of NOR flash. During our reverse engineering of these executables, we discovered a subroutine in AppMain.exe that enables Development Mode (DevMode). We found that the password is included in plain-text (clear) in the executable and there is a static comparison for the password required to enable DevMode mode. After entering this password on IVI, the Development Mode was enabled and several configuration options to assist developers in debugging the IVI became available, such as offering access to Windows CE GUI (Explorer mode). In this mode, we enabled the ActiveSync protocol, a CoreCon debugging connection that is used to establish a link between the development workstation and the CE device on the IVI by running an executable left on the system to enable debugging, as is shown in Listing 1.  </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5.1.2">Interface Discovery</head><p>During our analysis we also discovered two interfaces useful for debugging purposes.</p><p>JTAG: During our hardware analysis, we detected a JTAG (Joint Test Action Group) interface via ac-tive probing with a JTAGulator <ref type="bibr" target="#b8">[15]</ref>. The target SoC (AU1340) does not support JTAG censorship/protection. We used a JTAG debugger (Lauterbach Power Debug <ref type="bibr">[1]</ref>) to access chips of IVI. This JTAG port enabled us to access all the addressable memory of the system as well as CPU registers. The Lauterbach JTAG debugger is WinCE-aware and GDB enabled, which enabled us to connect it to an IDA Pro disassembler. In turn, this configuration allowed us to perform dynamic analysis by attaching to the processes on the IVI, setting breakpoints, reading process memories, and inspecting other properties of the IVI.</p><p>UART: We discovered UART (Universal Asynchronous Receiver/Transmitter) ports via active probing (JTAGulating). With the help of the SoC data sheet, we also traced the discovered test points (RX, TX) to actual CPU pins. This was done to make sure there was no fuse or resistor in place to block the RX or TX. However, after multiple tests, we found the RX is disabled (presentation only). The immediate result of UART debugging was the discovery of boot-sequence messages. We used other debug messages in development of our demonstration malicious app.</p><p>ActiveSync: Embedded CE Platform Builder provides a collection of remote tools to help with the debugging process. With the help of these tools we accessed the OS runtime image running on IVI remotely from a workstation. We employed the Remote Heap Walker tool to examine heap layout and memory contents for selected process running on the IVI.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5.2">USB Traffic Analysis</head><p>In Section 2, we provided a brief overview of the MirrorLink protocol specification. This section describes an empirical investigation of the specific MirrorLink protocol implementation on our IVI. We want to highlight how implementation of the components and parameters can ensure proper connectivity and secure smartphone communication to the IVI system. In order to investigate the protocol behavior, we first needed to monitor and capture the USB traffic between the smartphone and the IVI. Afterwards, we conducted analysis on the captured traffic. For our investigation, we utilized a Samsung Galaxy SIII smartphone running Jelly Bean version 4.1.1. We installed DriveLink application version 1.1.027 4 on the smartphone. Finally, we used the IVI system that was salvaged from a 2015 automobile, which supports MirrorLink version 1.0.1 after updating the firmware and enabling it.</p><p>To capture USB traffic, we built the USB sniffer shown <ref type="figure">Figure 4</ref>: USB Sniffer setup using Beagleboard XM. "C" is the USB host port that is converted to a USB device port letting Beagleboard be accepted by Infotainment unit "D" (USB port on Infotainment is a USB host). "A" is a USB host that serves the Smartphone "E". "B" is a serial console port on the Beagleboard.</p><p>in <ref type="figure">Figure 4</ref> using the BeagleBoard-xM 5 and a variant of an open source USB packet capture module produced by a Google Summer of Code project <ref type="bibr" target="#b21">[28]</ref>. More information on how to build and use this USB Sniffer can be found at <ref type="bibr" target="#b17">[24]</ref>.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5.2.1">Observations</head><p>Based on our analysis of captured USB traffic between our smartphone and IVI, we can describe here our observations and understanding of the MirrorLink protocol. The initial phase of the protocol is the linklayer configuration phase in which the USB class is negotiated and accepted, resulting in both the smartphone and IVI USB interfaces being correctly configured. Next, the smartphone acts as a DHCP server and offers an IP address <ref type="bibr">(192.168.42.242</ref>) to the client (IVI). After this step, the UPnP advertisement and negotiation messages, which are XML configuration files as shown in <ref type="figure" target="#fig_5">Figure 5</ref>, are being sent. The UPnP session is started by the smartphone, advertising its services and pointing at a URL, from which the IVI can download the description.xml. This XML file includes additional URLs for tmclient.xml, tmapplicationserver.xml, that are subsequently downloaded by the IVI. In the other direction, the IVI utilizes a SOAP over HTTP protocol to communicate service controlling and eventing messages back and forth with the smartphone. These service messages are: (1) IVI sends and confirms its hardware and software configuration to the smartphone, (2) IVI retrieves a list of avail- From the captured packet traces, we found no indication of key exchange, encryption or authentication for these XMLs. None of these XMLs were signed; therefore if the security model of the MirrorLink protocol which largely relies on the security of the link-layer, is invalidated by an attacker who controls a device with access to the local link-layer segment, an attacker can control input to the IVI system. If the IVI system is vulnerable to attack from a malicious mobile device, the IVI might be used as a bridge onto the car's internal CAN network.</p><p>The DAP 6 protocol was not used by the IVI to restrict connections to only a set of trusted smartphone manufacturers. This means that any device or smartphone can connect to the IVI and potentially attempt to attack it.</p><p>After the MirrorLink application is launched, requests can be sent to the smartphone. The IVI acts as a <ref type="bibr" target="#b1">6</ref> There is no evidence in the captured traffic that DAP is used. Since the purpose of DAP is to verify that the mobile device is from a compliant manufacturer, this could be used to mitigate the threat of insecure devices connecting to the IVI. However, in the case of an attacker gaining access to a genuine device, DAP will not mitigate these threats.</p><p>VNC viewer client connecting to the VNC server (smartphone). Both the server and client negotiate and agree on RFB 3.008 as protocol version. The server sends a list of security types that it could support (Security type values can only be 0 <ref type="bibr">[failed]</ref>  <ref type="bibr">[VeNCrypt]</ref>). Client selects type 1 <ref type="bibr">[none]</ref>. This could enable an attacker to hijack the VNC session if they can gain access to the smartphone. In the captured traffic we have collected, there were no Content Attestation Request or Response messages.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5.3">Software Analysis</head><p>As we mentioned earlier in this section, we managed to extract data from a USB update image and NOR flash. Here, we describe our security analysis of selected MirrorLink and CAN controller related binaries. To examine the presence of standard security protections (e.g, stack and heap protections), and to find out potential exploitable vulnerabilities, we performed static and dynamic analyses. <ref type="table">Table 1</ref> outlines the memory protection mechanisms <ref type="bibr" target="#b29">[36,</ref><ref type="bibr" target="#b27">34]</ref>   <ref type="bibr" target="#b19">[26]</ref>.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5.3.1">Static Analysis Results</head><p>Using static binary analysis, we discovered that the Micom CAN controller firmware can be updated using one of two different methods. The first is, by executing the MgrUpg.exe binary, which subsequently calls a function within MgrUpg2.exe that does the actual updating of the Micom CAN controller firmware. This binary is executed as part of the IVI main firmware update procedure. The Micom firmware can also be directly updated. This direct update is initiated via the DevMode interface and by copying unpacked Micom update files to a USB drive in a directory name of \MicomeUpdate. This second method bypasses the authentication of the firmware performed by the main IVI firmware update procedure.</p><p>We used the second method to update the Micom firmware, but with a slightly modified version of the original firmware. Our goal was to understand if there were any authentication or verification checks that would prevent the Micom firmware from being updated. We could not find any evidence of authentication and verification functions, although we did find a debug message ''start verify certificationWait reading'' in one of the subroutines of MgrUpg2.exe as well as UART debug messages. As best as we can tell, no actual firmware verification was performed. However, our IVI became locked and displayed the message "NO VIN" on the screen. This is likely due to a combination of an anti-theft method triggered by resetting a value in the IVI, and the fact that our IVI was not connected to an actual vehicle that broadcasts its VIN. This prevented any further experiments, but as future work we plan to understand how to unlock the IVI by sending the correct VIN over the CAN bus and explore if it is possible to modify the list of CAN IDs by updating that part of the Micom firmware.</p><p>The results of our Micom firmware reverse engineering efforts suggest that an attacker can potentially update the Micom firmware using methods similar to those used in a previous study <ref type="bibr" target="#b19">[26]</ref>. After this, an attacker could potentially use these CAN functions to send arbitrary messages on the CAN bus if she is able to do one of two things: gain control flow of a process on the IVI and invoke this function with malicious inputs, or modify the input parameters to an existing call to one of these CAN functions.</p><p>In addition, during our static analysis of the OEM IVI developed MirrorLink binaries and DLLs on the IVI, we found that they were written in C++. We also found multiple instances of dangerous libc function <ref type="bibr" target="#b25">[32]</ref> calls used to process potentially malicious input from the smartphone without proper boundary checking. For instance, in the XML parser function (UPnPProcessAppList) in TMScontrolPoint.dll there are multiple unbounded memcpy calls that are copying element values from the XML provided by the smartphone.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5.3.2">Dynamic Analysis Results</head><p>From our previous observations, we knew that there is no bounds checking or other protection mechanism. Given this, we constructed a demonstration malicious app that sends crafted XMLs to the IVI in order to understand if this would generate exception errors. To setup our dynamic analysis, we reverse engineered the MirrorLink app server (smartphone) part of the MirrorLink protocol. Then, we reimplemented part of the app that enables Ethernet over USB. With this in place, we could start mimicking the rest of the MirrorLink protocol by replicating and sending the correct UPnP messages. We crafted a replacement description.xml and tmapplicationserver.xml by changing some of the values of elements (e.g, appname, appid, bluetoothaddress) to overflow the static-sized struct buffers to which they would be copied as they were parsed.</p><p>Over the course of our experiments with our specially crafted XMLs, we witnessed multiple runtime exception errors. One such example is shown in <ref type="figure" target="#fig_6">Figure 6</ref>. We identified multiple heap memory corruption vulnerabilities that could be potentially used for exploitation purposes. In order to verify our results, we ran multiple experiments where we monitored the UART debug messages, heap content in heap-walker, and process memory in IDA Pro. Based on these experiments, we were able to verify that our specially crafted XMLs were overflowing buffers and causing heap memory corruptions. In turn, these memory corruptions were overwriting pointers to data structures and function pointers that resided on the heap.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="6">Demonstration of Malicious Smartphone Application</head><p>To follow-up on our discovery of these heap overflows, and better understand if they could be used to gain execution control flow of the IVI, we developed a proof of concept malicious smartphone app. <ref type="figure" target="#fig_7">Figure 7</ref> shows the GUI of our app and the IVI displaying an app where the &lt;appName&gt; XML element value length has been increased to overflow the heap.  This app first correctly configures the USB mode and establishes network connectivity with the IVI, then correctly mimics the DHCP protocol and the initial discovery messages of the real DriveLink app between the smartphone and IVI. Once the IVI fetches the description.xml file, our app sends back a carefully crafted malicious version that includes several large values in elements of the XML scheme. These large values cause a series of heap overflows in TMScontrolPoint.dll that correctly arranges the heap memory and overwrites a function pointer on the heap. We also create and write a set of gadgets <ref type="bibr" target="#b23">[30]</ref> to the heap that enable us to gain execution control flow, and reserve space on the heap that can be used to inject malicious code.</p><p>Since Windows Embedded CE 6 separates the heap meta-data from the actual heap, we must carefully overwrite a number of data pointers between the start of the heap and the target function pointer. If these data pointers are not overwritten with valid addresses, the process will crash before calling the overwritten function pointer on the heap. For demonstration purposes, our app modifies a debug message that is outputted to the UART. However, it is highly likely that an attacker could build a set of gadgets that executes a call to one of the CAN sending functions, to send a malicious massage onto the CAN bus. The UART output that our demonstration app generates is shown in <ref type="figure" target="#fig_8">Figure 8</ref>. </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="7">Discussion</head><p>Our findings demonstrate vulnerabilities that are similar to those found in previous security studies of automotive systems <ref type="bibr" target="#b4">[11,</ref><ref type="bibr" target="#b18">25]</ref>. However, they are targeted towards what is potentially the more exposed surface area of an IVI and app platform. In this section, we will place our results into the context of the specific security challenges of IVI and app platforms, discuss some potential short and longer-term mitigation strategies, and address some of the future features on automotive manufacturer's road maps that will effect this ecosystem. Security of MirrorLink protocol. Our analysis of the MirrorLink Protocol shows that few security features are specified at the application layer and that the designers of this protocol rely on the security of the link-layer protocol to protect the MirrorLink against attacks. The main security mechanism included in the specification is the Device Attestation Protocol (DAP) which is designed to prevent unauthorized hardware from accessing the IVI. The current MirrorLink protocol does not include any secure device pairing method. However, given our threat model, neither of these defenses would impede an attacker who can compromise a driver's smartphone that is likely already paired to the IVI and authorized hardware. Thankfully, the dangers posed by an attacker that can only invoke API calls exposed by apps on the IVI are limited at this point to relatively benign attacks, such as streaming unwanted music over the IVI. The worst case might be altering navigation directions. Given that the attacks are not devastating, the lack of security in the MirrorLink protocol is not ideal, but might be acceptable at present, and can be improved in later versions before more critical APIs are added to apps. The largest current threat is if an attacker can gain more unfettered access to the IVI and CAN controller. Such an attack could permit an attacker to send arbitrary messages over the vehicle's CAN bus that could potentially effect safety critical systems. IVI app containment. Our analysis of the firmware from the IVI shows that the MirrorLink client, which can be enabled on the IVI is written in a memory unsafe language, C++, and executed with administrator privileges on the bare-metal WinCE OS. This means that an attacker who can communicate with the IVI via a compromised smartphone can likely leverage one or more of the identified heap overflow vulnerabilities to gain control flow of the MirrorLink client. Our analysis of the CAN DLL shows that it likely provides a wide API interface to the CAN controller that would allow any privileged process on the IVI to load this DLL and send arbitrary and potentially malicious messages on the vehicle's CAN bus. This all points to the possibility that an attacker able to discover one of these vulnerabilities can craft an exploit to send out CAN malicious messages.</p><p>A short-term solution to this problem might be to modify the CAN controller firmware. A narrower interface that only permits sending predefined CAN messages needed for IVI operations would reduce this risk. It would also be a good idea to run processes, such as the MirrorLink process at a lower privilege level that does not grant them access to the CAN controller. The longerterm solution is to architect a virtualization and isolation model similar to that of Android or iOS, but adapted to the automotive domains <ref type="bibr" target="#b26">[33]</ref>. If third-party app ecosystems emerge, then permission models will need to be developed for IVIs. Developer practices. Our analysis of the MirrorLink executable showed that developers did make use of default protections provided by WinCE and the Visual Studio compiler, such as stack cookies and separation of heap meta-data from dynamic heap objects. Other security mechanisms, such as ASLR were enabled on some executables, but not for all of the MirrorLink executables. In addition, we found that developers commonly used memory unsafe versions of functions, such as memcpy and strcpy, when processing external inputs. It is difficult for most automotive manufacturers to perform security audits of firmware from suppliers, since normally manufacturers are not provided access to source code. In this development model suppliers, such as the supplier of the IVI in this instance, must improve their security audits of safety critical code or move away from lowerlevel memory unsafe programming languages to higher level languages that are more memory safe. Future functionality. Currently MirrorLink is not enabled by default and requires a physical USB connection. However, the IVI hardware does include an 802.11 adapter and there are potential plans for MirrorLink to support WiFi as an alternate link-layer protocol. If this does become part of the standard, it enlarges the attack surface for remote attackers within a few 100 feet of the target vehicle, or those who can gain control of an 802.11 enabled device close to the vehicle. The other major addition to IVI system is the possibility of opening up the app developer ecosystem to less vetted thirdparty app developers. This would also enlarge the attack surface and hopefully necessitate implementation of stronger isolation of IVI apps.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="8">Disclosure</head><p>As part of releasing our findings, we have chosen a responsible disclosure plan that includes an initial private disclosure, delayed publication, and left out critical details. We disclosed our findings of heap overflow vulnerabilities (but not the execution control flow exploit, since we had not implemented it yet) to the automotive manufacturer more than seven months ago. We have chosen not to name the manufacturer or supplier of the IVI, since we feel this is a systemic problem that likely effects other manufacturers and suppliers of app enabled IVI platforms. This will also provide additional time for the supplier to patch the vulnerabilities we found in our analysis. In addition, we have chosen not to disclose the full details of the vulnerabilities we have found given the difficulty of patching automotive systems <ref type="bibr" target="#b9">[16,</ref><ref type="bibr" target="#b10">17,</ref><ref type="bibr" target="#b30">37]</ref>.</p><p>Our goal in publishing about these security issues is to bring to light the current insecurities of these IVI and app platforms before they become widely deployed. Given our goal, we want to balance the possible gains of publication, in terms of improved security for IVI and app platforms with the risk of an attacker replicating the vulnerabilities we have found during our security analysis.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="9">Conclusion</head><p>In this paper, we have presented the first security analysis of a smartphone to IVI protocol and implementation. Our security analyses show weaknesses in the MirrorLink protocol and more importantly, in the IVI installed in at least one 2015 model released by a major automotive manufacturer. The MirrorLink functionally implemented by this IVI was not enabled by default and there is no evidence that the manufacturer intended to allow drivers to enable it. However, there are publicly available instructions on how to enable it and some evidence that at least a few drivers have enabled it on their vehicles.</p><p>As a proof of concept, we have created a demonstration malicious app that exploits heap overflow vulnerabilities discovered in the implementation of MirrorLink on the IVI. This vulnerability can allow attackers to gain control flow of a privileged process executing on the IVI. It is highly likely that these same vulnerabilities can be exploited by an attacker with control of a driver's smartphone, to potentially send malicious messages on the vehicle's internal CAN bus. Given our findings, we discussed how the security of these IVI app platforms can be made more resilient to these types of attacks. Our hope is that, this analysis will help motivate and spur more secure designs and implementations of smartphone to IVI platforms.</p></div><figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_0"><head>Figure 1 :</head><label>1</label><figDesc>Figure 1: MirrorLink Connectivity Stack</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_1"><head>Figure 2 :</head><label>2</label><figDesc>Figure 2: Flash reader is built with the aid of MSP430 controller and suitable socket for the target TSOP NOR flash chip size and pin number</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_2"><head>Figure 3 :</head><label>3</label><figDesc>Figure 3: MirrorLink and automotive manufacture root cert extracted from NOR flash image</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_3"><head>Listing 1 :</head><label>1</label><figDesc>UART debug messages showing that ActiveSync is enabled.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_4"><head>[</head><label></label><figDesc>AppLink ] M g r T s k _ C h a n g e D e b u g L e v e l : 2 w i n c e _ u s b w a r e _ e x i t : USER MODE USBware :: UWD_Close : Started pContext 0 xD0B6EB88 O E M I n t e r r u p t D i s a b l e :: DDMA : maskc , inten : ff [ DRVMGR ] Set ActiveSync Mode (1) [ DRVMGR ] Open Success !!!!! [ DRVMGR ] enable USB Host &amp; OTG phy ( NEW TYPE )</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_5"><head>Figure 5 :</head><label>5</label><figDesc>Figure 5: MirrorLink Protocol Stack</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_6"><head>Figure 6 :</head><label>6</label><figDesc>Figure 6: UART debug messages showing multiple exception errors, program counter(PC), return address (RA), stack pointer (SP), binary name, and error type.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_7"><head>Figure 7 :</head><label>7</label><figDesc>Figure 7: Malicious Smartphone Application: MirrorLink icon and name sent to the IVI</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_8"><head>Figure 8 :</head><label>8</label><figDesc>Figure 8: The UART output generated by our demonstration malicious app.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_1" validated="false"><head>SG3. This is the same CAN con-troller that was reprogrammed as part of a vulnerability in the Uconnect discovered by Miller and Valasek [26]. It includes a list of CAN IDs that limits the IVI to com- municate with other devices using CAN bus. However, Miller and Valasek demonstrated a method of modifying the list of CAN IDs by updating that part of the Micom firmware</head><label></label><figDesc>used in compiling selected binaries for MirrorLink * , the CAN controller API â€¢ , which contains subroutines to interact with the Micom CAN controller, or both . Table 1: Memory protection mechanisms used in compiling selected binaries. SafeSEH and DEP are FALSE for all binaries because the used compiler does not support SafeSEH for the target architecture and also the target SoC does not support DEP.</figDesc><table>Binary Name 
ASLR 
Stack Cookies 
AppLink.exe 
TRUE 
TRUE 
AppMain.exe â€¢ 
TRUE 
TRUE 
ML CERTIFICATION.dll  *  TRUE 
TRUE 
CmnDll.dll 
TRUE 
TRUE 
MgrMcm.exe â€¢ 
TRUE 
TRUE 
MgrSys.exe â€¢ 
TRUE 
TRUE 
MgrVid.exe â€¢ 
FALSE TRUE 
AppTM.exe  *  
TRUE 
TRUE 
TMScontrolPoint.dll  *  
FALSE TRUE 

Based on our analysis, we have identified 
functions 
Send2Micom &lt;redacted&gt;Msg(union 
&lt;redacted&gt; tx msg data type const *, 
unsigned char, int) 
and 
SendMsg(union 
&lt;redacted&gt; tx msg data type const *, 
unsigned char, int) that can accept data bytes 
of a CAN message and send this message on the CAN 
bus via the Micom CAN controller of the IVI. 
The Micom CAN controller included in the IVI, is 
a Renesas V850ES/</table></figure>

			<note place="foot" n="3"> Related Work Previous research [19] identified that request messages sent on an automotive CAN can be easily eavesdropped on and injected into the CAN bus. In 2010, Koscher et al. [22] more comprehensively demonstrated that an attacker with access to a 2008 Chevy Impala&apos;s internal</note>

			<note place="foot" n="2"> http://www.mirrorlink.com/cars/</note>

			<note place="foot" n="3"> These also can be obtained by extracting the NK.BIN via Bin* tools as part of platform builder.</note>

			<note place="foot" n="4"> https://play.google.com/store/apps/details?id= app.scm</note>

			<note place="foot" n="5"> http://beagleboard.org/beagleboard-xm</note>
		</body>
		<back>

			<div type="acknowledgement">
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Acknowledgments</head><p>The authors thank Chris Everett, Houman Homayoun, Ubaidul Khan, Karl Koscher, and Parnian Najafi Borazjani for their assistance and feedback. Additionally, we thank the anonymous reviewers for their helpful feedback.</p><p>This work was supported in part by a contract from General Motors, the Department of Homeland Security under contract D15PC00239, and the National Science Foundation under contract 1205453. The opinions in this paper are those of the authors and do not necessarily reflect the opinions of any funding sponsor.</p></div>
			</div>

			<div type="references">

				<listBibl>

<biblStruct xml:id="b0">
	<monogr>
		<title/>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Toyota</surname></persName>
		</author>
		<ptr target="http://www.toyota.com/entune/" />
		<imprint>
			<date type="published" when="2011" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b1">
	<monogr>
		<title/>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Genivi</surname></persName>
		</author>
		<ptr target="http://www.genivi.org/" />
		<imprint>
			<date type="published" when="2012" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b2">
	<monogr>
		<title level="m" type="main">Security technology building a secure system using trustzone technology (white paper)</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Arm</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename></persName>
		</author>
		<imprint>
			<date type="published" when="2009" />
			<publisher>ARM Limited</publisher>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b3">
	<analytic>
		<title level="a" type="main">Terminal mode: transforming mobile devices into automotive application platforms</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Bose</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Brakensiek</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>And</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Park</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">K.-Y</forename></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 2nd International Conference on Automotive User Interfaces and Interactive Vehicular Applications</title>
		<meeting>the 2nd International Conference on Automotive User Interfaces and Interactive Vehicular Applications</meeting>
		<imprint>
			<publisher>ACM</publisher>
			<date type="published" when="2010" />
			<biblScope unit="page" from="148" to="155" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b4">
	<analytic>
		<title level="a" type="main">Comprehensive experimental analyses of automotive attack surfaces</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Checkoway</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Mccoy</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Kantor</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">B</forename><surname>Anderson</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Shacham</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">H</forename><surname>Savage</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Koscher</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">K</forename><surname>Czeskis</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Roesner</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">F</forename><surname>And</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Kohno</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">USENIX Security Symposium</title>
		<imprint>
			<date type="published" when="2011" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b5">
	<monogr>
		<title/>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Consortium</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><forename type="middle">C</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">E</forename><forename type="middle">T</forename><surname>Al</surname></persName>
		</author>
		<ptr target="http://www.mirrorlink.com/" />
		<imprint>
			<date type="published" when="2013" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b6">
	<monogr>
		<title level="m" type="main">Mobile trusted module (mtm)-an introduction</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Ekberg</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J.-E</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">E</forename><forename type="middle">T</forename><surname>Al</surname></persName>
		</author>
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b7">
	<analytic>
		<title level="a" type="main">Fast and vulnerable: a story of telematic failures</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Foster</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">I</forename><surname>Prudhomme</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Koscher</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">K</forename><surname>And</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Savage</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">9th USENIX Workshop on Offensive Technologies</title>
		<imprint>
			<date type="published" when="2015" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b8">
	<analytic>
		<title level="a" type="main">Assisted discovery of on-chip debug interfaces</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Grand</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Jtagulator</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">21st DefCon Conference</title>
		<meeting><address><addrLine>Las Vegas</addrLine></address></meeting>
		<imprint>
			<date type="published" when="2013" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b9">
	<monogr>
		<title/>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Greenberg</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename></persName>
		</author>
		<ptr target="https://www.wired.com/2015/07/patch-chrysler-vehicle-now-wireless-hacking-technique/" />
		<imprint>
			<date type="published" when="2015" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b10">
	<monogr>
		<title level="m" type="main">GM Took 5 Years to Fix a FullTakeover Hack in Millions of OnStar Cars</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Greenberg</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename></persName>
		</author>
		<ptr target="https://www.wired.com/2015/09/gm-took-5-years-fix-full-takeover-hack-millions-onstar-cars/" />
		<imprint>
			<date type="published" when="2015" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b11">
	<monogr>
		<title level="m" type="main">This Gadget Hacks GM Cars to Locate, Unlock, and Start Them</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Greenberg</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename></persName>
		</author>
		<ptr target="https://www.wired.com/2015/07/gadget-hacks-gm-cars-locate-unlock-start/" />
		<imprint>
			<date type="published" when="2016" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b12">
	<analytic>
		<title level="a" type="main">Sniffing/replay attacks on can buses: A simulated attack on the electric window lift classified using an adapted cert taxonomy</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Hoppe</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><surname>And</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Dittman</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 2nd Workshop on Embedded Systems Security (WESS)</title>
		<meeting>the 2nd Workshop on Embedded Systems Security (WESS)</meeting>
		<imprint>
			<date type="published" when="2007" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b13">
	<analytic>
		<title level="a" type="main">Security threats to automotive can networks -practical examples and selected shortterm countermeasures</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Hoppe</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><surname>Kiltz</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>And</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Dittmann</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Reliability Engineering &amp; System Safety</title>
		<imprint>
			<biblScope unit="volume">96</biblScope>
			<biblScope unit="page" from="11" to="25" />
			<date type="published" when="2011" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b14">
	<analytic>
		<title level="a" type="main">Security and privacy vulnerabilities of in-car wireless networks: A tire pressure monitoring system case study</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><forename type="middle">M</forename><surname>Ishtiaq Roufa</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">H</forename><surname>Mustafaa</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><forename type="middle">O</forename><surname>Travis Taylora</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">W</forename><surname>Xua</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Gruteserb</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">W</forename><surname>Trappeb</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Seskarb</forename><surname>And</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">I</forename></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">19th USENIX Security Symposium</title>
		<meeting><address><addrLine>Washington DC</addrLine></address></meeting>
		<imprint>
			<date type="published" when="2010" />
			<biblScope unit="page" from="11" to="13" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b15">
	<analytic>
		<title level="a" type="main">Experimental security analysis of a modern automobile</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Koscher</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">K</forename><surname>Czeskis</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Roesner</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">F</forename><surname>Patel</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Kohno</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><surname>Checkoway</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Mccoy</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Kantor</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">B</forename><surname>An-Derson</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Shacham</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">H</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">E</forename><forename type="middle">T</forename><surname>Al</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">IEEE Symposium on Security and Privacy (SP)</title>
		<imprint>
			<publisher>IEEE</publisher>
			<date type="published" when="2010" />
			<biblScope unit="page" from="447" to="462" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b16">
	<monogr>
		<title level="m" type="main">Mechanisms for certificate revocation status verification on constrained devices</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Kostiainen</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">K</forename><surname>And</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Asokan</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">N</forename></persName>
		</author>
		<idno>App. 13/910</idno>
		<imprint>
			<date type="published" when="2013" />
			<biblScope unit="page">613</biblScope>
		</imprint>
	</monogr>
<note type="report_type">US Patent</note>
</biblStruct>

<biblStruct xml:id="b17">
	<monogr>
		<title level="m" type="main">A beagleboard xm-based usb sniffer</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Laurendeau</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename></persName>
		</author>
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b18">
	<monogr>
		<title level="m" type="main">Adventures in automotive networks and control units</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Miller</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><surname>And</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Valasek</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename></persName>
		</author>
		<ptr target="http://illmatics.com/car_hacking.pdf" />
		<imprint>
			<date type="published" when="2013" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b19">
	<monogr>
		<title level="m" type="main">Remote exploitation of an unaltered passenger vehicle</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Miller</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><surname>And</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Valasek</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename></persName>
		</author>
		<imprint>
			<date type="published" when="2015" />
			<pubPlace>Black Hat USA</pubPlace>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b20">
	<monogr>
		<title level="m" type="main">gm open their dashboards to outside developers</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Newcomb</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Ford</surname></persName>
		</author>
		<ptr target="www.wired.com/2013/01/ces-2013-ford-gm-app-developers/" />
		<imprint>
			<date type="published" when="2013" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b21">
	<monogr>
		<title level="m" type="main">Google summer of code</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Nicolas</forename><surname>Boichat</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">F</forename><forename type="middle">M</forename><surname>Hunyue Yau</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2010" />
		</imprint>
	</monogr>
	<note>project</note>
</biblStruct>

<biblStruct xml:id="b22">
	<analytic>
		<title level="a" type="main">Bootstrapping trust in a&quot; trusted&quot; platform</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Parno</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">B</forename></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">HotSec</title>
		<imprint>
			<date type="published" when="2008" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b23">
	<analytic>
		<title level="a" type="main">Return-oriented programming: Systems, languages, and applications</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Roemer</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Buchanan</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">E</forename><surname>Shacham</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">H</forename><surname>And</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Savage</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">ACM Trans. Inf. Syst. Secur</title>
		<imprint>
			<biblScope unit="volume">15</biblScope>
			<biblScope unit="page">34</biblScope>
			<date type="published" when="2012-03" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b24">
	<monogr>
		<title/>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Rousseau</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename></persName>
		</author>
		<ptr target="http://www.popularmechanics.com/cars/a11735/gm-ford-to-developers-build-apps-for-our-cars-14954371/" />
		<imprint>
			<date type="published" when="2013" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b25">
	<monogr>
		<title level="m" type="main">Secure Coding in C and C++. Pearson Education</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Seacord</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><forename type="middle">C</forename></persName>
		</author>
		<imprint>
			<date type="published" when="2005" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b26">
	<analytic>
		<title level="a" type="main">Multi-criticality Hypervisor for Automotive Domain</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Serra</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Rodrigues</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Almeida</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><surname>And</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Mendes</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Inforum Conference</title>
		<imprint>
			<date type="published" when="2014" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b27">
	<analytic>
		<title level="a" type="main">Bypassing memory protections: The future of exploitation</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Sotirov</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">USENIX Security</title>
		<imprint>
			<date type="published" when="2009" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b28">
	<analytic>
		<title level="a" type="main">Dismantling megamos crypto: Wirelessly lockpicking a vehicle immobilizer</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Verdult</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Garcia</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">F</forename><forename type="middle">D</forename><surname>And</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Ege</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">B</forename></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Supplement to the 22nd USENIX Security Symposium (USENIX Security 13</title>
		<imprint>
			<date type="published" when="2015" />
			<biblScope unit="page" from="703" to="718" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b29">
	<monogr>
		<title level="m" type="main">Analysis of gs protections in windows vista</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Whitehouse</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">O</forename></persName>
		</author>
		<imprint>
			<date type="published" when="2007" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b30">
	<monogr>
		<title/>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Zhang</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">B</forename></persName>
		</author>
		<ptr target="http://www.businessinsider.com/volkswagens-cheating-engines-cant-be-easily-fixed-2015-9" />
		<imprint>
			<date type="published" when="2015" />
		</imprint>
	</monogr>
</biblStruct>

				</listBibl>
			</div>
		</back>
	</text>
</TEI>
