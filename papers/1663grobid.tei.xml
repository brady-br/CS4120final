<?xml version="1.0" encoding="UTF-8"?>
<TEI xmlns="http://www.tei-c.org/ns/1.0" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
xsi:schemaLocation="http://www.tei-c.org/ns/1.0 /Users/atharsefid/Desktop/grobid-0.5.3/grobid-home/schemas/xsd/Grobid.xsd"
 xmlns:xlink="http://www.w3.org/1999/xlink">
	<teiHeader xml:lang="en">
		<encodingDesc>
			<appInfo>
				<application version="0.5.3" ident="GROBID" when="2020-09-29T02:06+0000">
					<ref target="https://github.com/kermitt2/grobid">GROBID - A machine learning software for extracting information from scholarly documents</ref>
				</application>
			</appInfo>
		</encodingDesc>
		<fileDesc>
			<titleStmt>
				<title level="a" type="main">The Datacenter Needs an Operating System</title>
			</titleStmt>
			<publicationStmt>
				<publisher/>
				<availability status="unknown"><licence/></availability>
			</publicationStmt>
			<sourceDesc>
				<biblStruct>
					<analytic>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Matei</forename><surname>Zaharia</surname></persName>
							<affiliation key="aff0">
								<orgName type="department">Ion Stoica</orgName>
								<orgName type="institution">University of California</orgName>
								<address>
									<settlement>Berkeley</settlement>
								</address>
							</affiliation>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Benjamin</forename><surname>Hindman</surname></persName>
							<affiliation key="aff0">
								<orgName type="department">Ion Stoica</orgName>
								<orgName type="institution">University of California</orgName>
								<address>
									<settlement>Berkeley</settlement>
								</address>
							</affiliation>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Andy</forename><surname>Konwinski</surname></persName>
							<affiliation key="aff0">
								<orgName type="department">Ion Stoica</orgName>
								<orgName type="institution">University of California</orgName>
								<address>
									<settlement>Berkeley</settlement>
								</address>
							</affiliation>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Ali</forename><surname>Ghodsi</surname></persName>
							<affiliation key="aff0">
								<orgName type="department">Ion Stoica</orgName>
								<orgName type="institution">University of California</orgName>
								<address>
									<settlement>Berkeley</settlement>
								</address>
							</affiliation>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Anthony</forename><forename type="middle">D</forename><surname>Joseph</surname></persName>
							<affiliation key="aff0">
								<orgName type="department">Ion Stoica</orgName>
								<orgName type="institution">University of California</orgName>
								<address>
									<settlement>Berkeley</settlement>
								</address>
							</affiliation>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Randy</forename><surname>Katz</surname></persName>
							<affiliation key="aff0">
								<orgName type="department">Ion Stoica</orgName>
								<orgName type="institution">University of California</orgName>
								<address>
									<settlement>Berkeley</settlement>
								</address>
							</affiliation>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Scott</forename><surname>Shenker</surname></persName>
							<affiliation key="aff0">
								<orgName type="department">Ion Stoica</orgName>
								<orgName type="institution">University of California</orgName>
								<address>
									<settlement>Berkeley</settlement>
								</address>
							</affiliation>
						</author>
						<title level="a" type="main">The Datacenter Needs an Operating System</title>
					</analytic>
					<monogr>
						<imprint>
							<date/>
						</imprint>
					</monogr>
				</biblStruct>
			</sourceDesc>
		</fileDesc>
		<profileDesc>
			<abstract/>
		</profileDesc>
	</teiHeader>
	<text xml:lang="en">
		<body>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="1">Introduction</head><p>Clusters of commodity servers have become a major computing platform, powering not only some of today's most popular consumer applications-Internet services such as search and social networks-but also a growing number of scientific and enterprise workloads <ref type="bibr" target="#b1">[2]</ref>. This rise in cluster computing has even led some to declare that "the datacenter is the new computer" <ref type="bibr" target="#b15">[16,</ref><ref type="bibr" target="#b23">24]</ref>. However, the tools for managing and programming this new computer are still immature. This paper argues that, due to the growing diversity of cluster applications and users, the datacenter increasingly needs an operating system. <ref type="bibr" target="#b0">1</ref> We take a broad view of an operating system as both a software layer that manages and abstracts hardware and a package of tools, such as programming languages and debuggers, that facilitate the use of a computer. Traditional OSes for a single computer play several key roles. First, they enable resource sharing between programs and users, allowing a computer to be used for multiple tasks and to respond interactively to several users. Second, they enable data sharing between programs, through abstractions such as pipes and files, so that users can combine independently written applications to solve problems. Third, they provide programming abstractions that simplify software development. Finally, OSes include system-wide debugging and monitoring facilities. Together, these features have allowed singlecomputer operating systems to foster a rich ecosystem of interoperable applications that we now take for granted.</p><p>Much like the first computers, the first datacenters ran a small number of applications written by expert users. This situation is changing now, and we believe that datacenters need an OS-like layer for the same reason computers did: a rising diversity of applications and users.</p><p>On the application side, there is an increasing number of cluster computing frameworks (e.g., MapReduce <ref type="bibr" target="#b9">[10]</ref>, Dryad <ref type="bibr" target="#b16">[17]</ref>, Pregel <ref type="bibr" target="#b20">[21]</ref>) and storage systems <ref type="bibr" target="#b11">[12,</ref><ref type="bibr" target="#b8">9,</ref><ref type="bibr" target="#b13">14]</ref>, each suited for different use cases. Ideally, an organization should be able to dynamically share resources between these applications, and to easily exchange data between them (e.g., have a job that combines MapReduce and Pregel steps). However, this is currently difficult because applications are written independently, with no common interfaces for accessing resources and data.</p><p>In addition, clusters are serving increasing numbers of concurrent users, which require responsive time-sharing. For example, while MapReduce was initially used for a small set of batch jobs, organizations like Facebook are now using it to build data warehouses where hundreds of users run near-interactive ad-hoc queries <ref type="bibr" target="#b28">[29]</ref>.</p><p>Finally, programming and debugging cluster applications remains difficult even for experts, and is even more challenging for the growing number of non-expert users (e.g., scientists) starting to leverage cloud computing.</p><p>While cluster users are well-aware of these problems, current solutions are often ad-hoc. For example, in the Hadoop stack <ref type="bibr" target="#b2">[3]</ref>, MapReduce acts as a common execution layer on which higher-level programming interfaces like Pig and Hive <ref type="bibr" target="#b21">[22,</ref><ref type="bibr" target="#b3">4]</ref> are built. The MapReduce scheduler provides resource sharing, but this means that only jobs that compile down to MapReduce can run on the cluster. Unfortunately, MapReduce is too high level of an abstraction to support all applications efficiently. <ref type="bibr" target="#b1">2</ref> Similarly, many open source cluster storage systems provide a plugin to let their data be read by MapReduce, but this is done through a Java API specific to Hadoop.</p><p>Our goal in this paper, therefore, is to encourage researchers to attack these problems from an operating system perspective. To this end, we discuss the main challenges that need to be addressed by a datacenter OS (Section 2), and how research in this area can complement industry work (Section 3). Not only are the problems we highlight relevant today, but we believe that work on a datacenter OS can significantly impact the future cloud software stack. If successful, a datacenter OS should enable the development of a rich ecosystem of interoperable cluster applications, much like the desktop software ecosystem, and greatly benefit cluster users.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2">Datacenter OS Functionality</head><p>This section discusses four key areas of functionality that a datacenter OS needs to provide: resource sharing, data sharing, programming abstractions, and debugging. To avoid producing a laundry list of problems, we focus on cross-application concerns: issues involving interaction between applications, and useful shared abstractions. These are the core concerns that motivate a common, OS-like layer underlying all applications. We put these ideas together in Section 2.5 to sketch a set of goals that a successful datacenter OS would meet.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.1">Resource Sharing</head><p>Datacenters already host a diverse array of applications (storage systems, web applications, long-running services, and batch analytics), and as new cluster programming frameworks are developed, we expect the number of applications to grow. For example, Google has augmented its MapReduce framework with Pregel (a specialized framework for graph applications), Dremel (a low-latency system for interactive data mining), and Percolator (an incremental indexing system). At the same time, the number of cluster users is growing: for example, Facebook's Hadoop data warehouse runs nearinteractive SQL queries from hundreds of users <ref type="bibr" target="#b28">[29]</ref>. Consequently, it is crucial for datacenter operators to be able to multiplex resources efficiently both between users of an application and across applications.</p><p>Unfortunately, cluster applications are currently developed as standalone programs that get launched on some set of nodes and assume they have full control over those nodes for their duration. The only option for sharing resources between these applications is coarse-grained partitioning at the level of physical or virtual hosts. This approach becomes inefficient as the number of applications grows and their demand becomes more dynamic (i.e., the load on each application changes over time). The solution is clear: resource sharing needs to happen at a finer granularity. Indeed, systems like Hadoop and Dryad already perform fine-grained sharing between their jobs, at the level of "tasks" within a job <ref type="bibr" target="#b17">[18,</ref><ref type="bibr" target="#b28">29]</ref>. However, there is no standard interface for fine-grained sharing across different applications, making it difficult for organizations to use multiple cluster computing frameworks.</p><p>We have undertaken some initial work in this area by designing Mesos <ref type="bibr" target="#b14">[15]</ref>, a system that enables fine-grained sharing across applications. Such a system faces several serious challenges: it must be flexible enough to support the placement and fault recovery needs of many applications, scalable to clusters running millions of tasks, and highly reliable. Mesos takes a minimalist approach to the problem by employing an application-controlled scheduling model called resource offers: Mesos decides which applications have priority for resources, but applications choose which resources to use and which tasks to launch on them. We found that this approach performs surprisingly well. We are not claiming that this is necessarily how a datacenter OS should allocate resources, we merely cite it as an example of cross-application sharing.</p><p>In addition to the issue of fine-grained sharing, we note several other questions that deserve attention:</p><p>• Sharing the network: Greenberg et al. identify isolating traffic from different datacenter applications as a serious concern <ref type="bibr" target="#b12">[13]</ref>. Operators would like to be able to colocate user-facing web applications and batch analytics jobs in the same cluster, for example, but current network management mechanisms fall short.</p><p>• Interdependent services: Many web applications are composed of multiple interacting services. For example, a front-end server in a search engine might query a spell-checking service, a map service, etc. Most cluster scheduling systems assume that applications are independent and do not heed these dependencies.</p><p>• Optimal scheduling: There are hard modeling and algorithmic challenges in determining the "best" schedule for a set of cluster applications with various resource and placement requirements. There are also multiple optimization criteria, including throughput, response time, and energy efficiency. While the community has designed schedulers that improve fairness and data locality <ref type="bibr" target="#b17">[18,</ref><ref type="bibr" target="#b28">29]</ref>, we currently lack models to let us gauge how close these schedulers are to optimal.</p><p>• Role of virtualization: The largest datacenter operators, including Google, Microsoft, and Yahoo!, do not appear to use virtualization due to concerns about overhead. However, as virtualization overhead goes down, it is natural to ask whether virtualization could simplify scheduling (e.g., through VM migration).</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.2">Data Sharing</head><p>Datacenter applications need to share not only computing resources but also data. For example, it is natural to want to combine steps written in different parallel programming frameworks in a workflow (e.g., build a graph using MapReduce and compute PageRank on it using Pregel), in the same way that Unix programs can be grouped into pipelines. Enabling data sharing requires two steps: finding the right abstractions for sharing data between cluster applications, and defining standardized interfaces to those abstractions that allow their implementations and clients to evolve independently. Today, the most common abstraction used for data sharing in clusters is distributed filesystems. This approach is simple, but it is not always efficient due to the cost incurred by filesystems to achieve reliability (replicating data across nodes and checkpointing it to disk). For example, in iterative MapReduce computations, jobs often spend a significant amount of time reading and writing from the filesystem, even though each intermediate dataset is only used in the next job.</p><p>One example of a more efficient approach is to have the storage system remember how to recompute each block of data, in much the same way that a MapRe-duce system knows how to re-run a map task if it loses its output. To this end, we have designed an abstraction called resilient distributed datasets (RDDs) <ref type="bibr" target="#b29">[30]</ref>. RDDs are read-only partitioned collections of elements built by transforming data in stable storage through a limited set of operators, and they remember the transformations that went into building them to allow efficient reconstruction of lost blocks. As a result, they can be stored in memory in the common case, without requiring disk writes or replication. We believe that RDDs are powerful enough to express MapReduce, SQL and Pregel computations, and could thus be used to efficiently share data between these programming models. Again, we are not claiming that RDDs are necessarily the right solution for a datacenter OS, but are an example of how a new data abstraction can support a broad range of applications.</p><p>There are many other open questions in this area: • Standardized interfaces: An important contribution of a datacenter OS would be standard interfaces for cluster storage abstractions, much like VFS. This is not trivial even for distributed file systems, because these systems are expected to not only provide access to data but also give applications hints about where to access it from to achieve the best performance. Contour <ref type="bibr" target="#b26">[27]</ref> is an interesting step in this direction.</p><p>• Streaming data: Distributed filesystems and RDDs are best suited for "write-once" data, such as intermediate results in batch computations. It is still an open question to determine similar abstractions for streaming data. Two promising but very different approaches are distributed message queues <ref type="bibr" target="#b0">[1]</ref>, which are commonly used in enterprise systems, and Google's Percolator system <ref type="bibr" target="#b24">[25]</ref>, which is based on triggers on BigTable.</p><p>• Performance isolation: Performance guarantees are difficult to achieve in complex distributed storage systems such as key-value stores. As a result, many datacenter operators use separate storage systems for front-end web servers and back-end analytics, and copy data from the former to the latter periodically. The ability to safely run batch queries on live data would greatly improve the timeliness of analytics, but appears to require a far more careful design approach.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.3">Programming Abstractions</head><p>One of the key roles of an OS is to provide abstractions that hide the intricacies of hardware and simplify application development. In the datacenter, the hardware is more complex (nodes can fail, perform poorly, etc), and applications are harder to develop. Programming abstractions for datacenters remain an important problem. We differentiate between two classes of programmers: systems programmers that are writing low-level infrastructure such as MapReduce and BigTable, and productivity programmers that use this infrastructure to solve problems. So far, a lot of effort has been invested in productivity programming, in the form of parallel computing frameworks <ref type="bibr" target="#b9">[10,</ref><ref type="bibr" target="#b16">17,</ref><ref type="bibr" target="#b20">21,</ref><ref type="bibr" target="#b24">25]</ref>. However, now that several different computing frameworks have been built from scratch, we believe it is also time to look for common abstractions to simplify systems programming.</p><p>Systems abstractions appear to be necessary because numerous specialized cluster computing systems continue to be developed for problems where the general frameworks are not a good fit. For example, Percolator <ref type="bibr" target="#b24">[25]</ref>, Pregel <ref type="bibr" target="#b20">[21]</ref> and GraphLab <ref type="bibr" target="#b19">[20]</ref> are some recent specialized computing frameworks for web indexing, graph processing and machine learning respectively. Similarly, Facebook had to write a scalable and fault-tolerant backend from scratch for Facebook Chat <ref type="bibr" target="#b18">[19]</ref>, because a traditional three-tier web application architecture could not support this use case. Ideally, a datacenter OS should provide primitives to implement these systems significantly faster. Some useful primitives might include:</p><p>• APIs for launching and monitoring tasks: We found that even the minimal interface in Mesos, which allows an application to start tasks and get notified when they end, made it easier to prototype new programming models, because it obviated the need for each framework to implement a master and a slave daemon.</p><p>• Communication primitives: Many parallel applications have similar communication patterns. For example, the all-to-all shuffle pattern in MapReduce is also present in Pregel and in various distributed joins. In our experience, these parallel transfers often become bottlenecks. A datacenter OS is well suited to provide efficient implementations of common patterns.</p><p>• Fault-tolerant distributed data structures, such as the RDDs discussed earlier, to manage state (including control state for applications needing master failover).</p><p>• Coordination primitives such as Chubby <ref type="bibr" target="#b7">[8]</ref>.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.4">Debugging and Monitoring</head><p>Figuring out what a massively parallel application is doing remains one of the hardest challenges in cluster computing. Horror stories abound about how minor programming errors, unusual load patterns, and bit flips brought down major systems. In general, debugging tools that work on a single machine are very difficult to use at scale due to the much larger volume of events.</p><p>In addition to correctness debugging, performance debugging is also critical in the datacenter. Much of the complexity in datacenter applications resides in control plane logic and data structures, such as the task scheduler in a computing framework or the metadata node(s) in a storage system. These components need to scale up to support large jobs, many concurrent users, and large numbers of objects. Often, the load on them also shifts as the application is is picked up for new use cases.</p><p>Finally, both correctness and performance debugging are becoming harder as the datacenter software stack grows in complexity. For example, when a Pig job running over data in HBase (a BigTable-like key-value store) performs poorly or outputs the wrong result, is the problem in the user's code, in Pig, in the MapReduce framework underlying Pig, in HBase, or in the HDFS file system that HBase runs over?</p><p>We believe that debugging is an area where researchers should explore clean-slate approaches. For example, how much easier would debugging become if the entire software stack implemented a tracing interface like X-Trace <ref type="bibr" target="#b10">[11]</ref>? Alternatively, would it be possible to build a useful replay debugger for datacenters if deterministic OSes <ref type="bibr" target="#b6">[7,</ref><ref type="bibr" target="#b5">6]</ref> or languages were used throughout? While it may seem that there is too much legacy datacenter software for this approach to have impact, datacenter operators are writing new software and reimplementing old systems quite frequently due to changing workloads. At the very least, this type of work would identify the limits of debuggability in large distributed systems and let us know how far we are from them with current tools.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.5">Putting it All Together</head><p>Although we have discussed the functions of a datacenter OS in isolation so far, we emphasize that we ultimately envision a platform that combines these functions. Such a platform would greatly improve the usability and programmability of datacenters while laying the foundation for an ecosystem of interoperable cluster applications.</p><p>To make this vision concrete, a good first step towards a datacenter OS might strive to meet the following goals: 1. Support a software stack similar to today's open source MapReduce and storage systems, while gaining cross-application benefits that are difficult to achieve today, such as cross-stack replay debugging. 2. Enable the implementation of new programming frameworks within a matter of weeks. 3. Share data and resources efficiently between both the existing stack and new applications written by users. 4. Allow users to understand cluster behavior without ever having to log into a remote machine.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3">Role of the Research Community</head><p>Given that most systems researchers lack access to the largest datacenters, it will be harder for them to work on a datacenter OS than on OSes for other platforms. Nonetheless, we believe that datacenters are a sufficiently important platform for researchers to pay attention to, and that there are several ways in which researchers can complement the work going on in industry:</p><p>Focus on paradigms, not performance: While it is tempting to do research into improving the performance of cloud systems (due to ease of evaluation), the industry is already investing many resources into performance. Instead, researchers are better suited to identify the abstractions to put into a datacenter OS, which industry teams have less liberty to take a long-term view on given their need to focus on shorter-term business goals.</p><p>Explore clean-slate approaches: Some problems in datacenters, like software reliability and debugging, are nearly intractable under the current software stack. However, if researchers show that, for example, restricting the programming language makes it much easier to debug cluster applications or to make guarantees about their performance, there is a chance that practitioners will pay attention, as a lot of datacenter software is yet to be written (there is little legacy software) and these problems are very costly. Practitioners have already adopted a functional programming model (MapReduce) for its benefits.</p><p>Bring cluster computing to non-experts: One of the most exciting things about datacenter technology is that it is increasingly being applied to "big data" problems in the sciences. With cloud computing, scientists can readily acquire the hardware to run large parallel computations; the main thing missing is the right software. These non-expert cluster users have very different needs from those in large corporations: they are not backed by an operations team that will configure their systems and tune their programs. Instead, they need cluster software that configures itself correctly out of the box, rarely fails, and can be debugged without intimate knowledge of several interacting distributed systems. These are difficult but worthwhile challenges for the community to pursue.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4">Related Work</head><p>A datacenter OS can leverage many insights from distributed operating systems, high-performance computing, and grid computing. Nonetheless, several factors differentiate the modern datacenter environment from these settings. First, failures occur more regularly in commodity clusters than in most previous platforms <ref type="bibr" target="#b15">[16]</ref>. Second, there is a strong focus on data-intensive parallel applications instead of compute-intensive ones <ref type="bibr" target="#b9">[10]</ref>. Finally, datacenters host a far more heterogeneous mix of applications than many previous platforms, ranging from latency-sensitive web services to batch jobs. This makes resource sharing and isolation challenging <ref type="bibr" target="#b12">[13]</ref>. The closest research to our vision is on distributed operating systems like Amoeba <ref type="bibr" target="#b25">[26]</ref> and Sprite <ref type="bibr" target="#b22">[23]</ref>. These systems were designed unify collections of workstations by providing a single system image in which processes, files and other objects are distributed transparently across machines. However, distributed OSes were mainly designed to run timesharing workloads consisting of singleprocess tasks such as email clients and compilers, rather than data-intensive parallel applications. Although parallel applications were also supported, these OSes provided few parallel programming abstractions beyond distributed file systems, threads and RPC. In addition, because task placement and fault recovery are so important in datacenters, we believe that transparency is less needed in a datacenter OS. For example, in Mesos, we give applications control over their scheduling.</p><p>More recently, fos <ref type="bibr" target="#b27">[28]</ref> was proposed as an operating system for clouds and multicore CPUs in which OS services are inherently distributed. Like distributed OSes, fos aims to provide a single system image. The main focus in fos has been on designing scalable OS services (e.g., file systems or name servers) rather than exposing new abstractions to cluster applications. This work is complementary to the type of research we solicit. We encourage the community to go beyond scaling up existing OS services and design new programming primitives, data abstractions and resource schedulers for clusters.</p><p>Finally, software platforms such as the Hadoop stack, LAMP, Amazon Web Services, Windows Azure, and Google's GFS / BigTable / MapReduce stack <ref type="bibr" target="#b11">[12,</ref><ref type="bibr" target="#b8">9,</ref><ref type="bibr" target="#b9">10]</ref> form today's de facto datacenter OS. These platforms are gradually evolving to cope with the increased diversity of datacenter users and workloads (for example, substantial effort was put into Hadoop scheduling for multi-user clusters), but datacenter applications are still generally hard to develop and do not interoperate easily. We envision a future software stack in which new cluster storage systems, data processing frameworks and services are significantly easier to build and can plug into an ecosystem of interoperable tools using standardized interfaces.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5">Conclusion</head><p>Datacenters have become a major computing platform, powering not only popular Internet services but also a growing number of scientific and enterprise applications. We argued that, as the use of this new platform grows, datacenters increasingly need an operating system-like software stack for the same reasons that single computers did: resource sharing between applications and users, data sharing, and abstraction. This kind of software stack is already emerging in an ad-hoc manner, but now is the right time for researchers to take a long-term approach to these problems and have a lasting impact on the software infrastructure for this new computing platform.</p></div>
			<note place="foot" n="1"> By datacenter OS, we mean a software stack providing functionality for the overall datacenter that is analogous to what a traditional OS provides on one machine. We are not calling for a new host OS to be run in datacenters, though such a change may also prove beneficial.</note>

			<note place="foot" n="2"> Indeed, the recently announced &quot;next-generation Hadoop&quot; design from Yahoo! aims to support running non-MapReduce jobs as well [5].</note>
		</body>
		<back>
			<div type="references">

				<listBibl>

<biblStruct xml:id="b0">
	<monogr>
		<title/>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Activemq</surname></persName>
		</author>
		<ptr target="http://activemq.apache.org" />
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b1">
	<monogr>
		<title level="m" type="main">Amazon Web Services Case Studies</title>
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b2">
	<monogr>
		<title/>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Apache</forename><surname>Hadoop</surname></persName>
		</author>
		<ptr target="http://hadoop.apache.org" />
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b3">
	<monogr>
		<title/>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Apache</forename><surname>Hive</surname></persName>
		</author>
		<ptr target="http://hadoop.apache.org/hive" />
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b4">
	<monogr>
		<title level="m" type="main">The next generation of Apache Hadoop MapReduce</title>
		<ptr target="http://developer.yahoo.com/blogs/hadoop/posts/2011/02/mapreduce-nextgen" />
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b5">
	<analytic>
		<title level="a" type="main">Efficient systemenforced deterministic parallelism</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Aviram</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S.-C</forename><surname>Weng</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Hu</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">B</forename><surname>Ford</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">OSDI 2010</title>
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b6">
	<analytic>
		<title level="a" type="main">Deterministic process groups in dOS</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><surname>Bergan</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">N</forename><surname>Hunt</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">L</forename><surname>Ceze</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><forename type="middle">D</forename><surname>Gribble</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">OSDI 2010</title>
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b7">
	<analytic>
		<title level="a" type="main">The Chubby lock service for loosely-coupled distributed systems</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Burrows</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">OSDI</title>
		<imprint>
			<date type="published" when="2006" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b8">
	<analytic>
		<title level="a" type="main">BigTable: a distributed storage system for structured data</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">F</forename><surname>Chang</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Dean</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Ghemawat</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">W</forename><forename type="middle">C</forename><surname>Hsieh</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><forename type="middle">A</forename><surname>Wallach</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Burrows</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><surname>Chandra</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Fikes</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><forename type="middle">E</forename><surname>Gruber</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">OSDI</title>
		<imprint>
			<date type="published" when="2006" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b9">
	<analytic>
		<title level="a" type="main">MapReduce: Simplified data processing on large clusters</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Dean</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Ghemawat</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Commun. ACM</title>
		<imprint>
			<biblScope unit="volume">51</biblScope>
			<biblScope unit="issue">1</biblScope>
			<biblScope unit="page" from="107" to="113" />
			<date type="published" when="2008" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b10">
	<monogr>
		<title level="m" type="main">Xtrace: A pervasive network tracing framework</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Fonseca</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">G</forename><surname>Porter</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><forename type="middle">H</forename><surname>Katz</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Shenker</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">I</forename><surname>Stoica</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2007" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b11">
	<analytic>
		<title level="a" type="main">The Google File System</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Ghemawat</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">H</forename><surname>Gobioff</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S.-T</forename><surname>Leung</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">SOSP</title>
		<imprint>
			<date type="published" when="2003" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b12">
	<analytic>
		<title level="a" type="main">The cost of a cloud: research problems in data center networks</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Greenberg</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Hamilton</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><forename type="middle">A</forename><surname>Maltz</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><surname>Patel</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">SIGCOMM Comput. Commun. Rev</title>
		<imprint>
			<biblScope unit="volume">39</biblScope>
			<biblScope unit="issue">1</biblScope>
			<biblScope unit="page" from="68" to="73" />
			<date type="published" when="2009" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b13">
	<analytic>
		<title level="a" type="main">Dynamo: Amazon&apos;s highly available key-value store</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Hastorun</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Jampani</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">G</forename><surname>Kakulapati</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Pilchin</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Sivasubramanian</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><surname>Vosshall</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">W</forename><surname>Vogels</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">SOSP</title>
		<imprint>
			<date type="published" when="2007" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b14">
	<analytic>
		<title level="a" type="main">Mesos: A platform for finegrained resource sharing in the data center</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">B</forename><surname>Hindman</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Konwinski</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Zaharia</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Ghodsi</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><forename type="middle">D</forename><surname>Joseph</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Katz</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Shenker</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">I</forename><surname>Stoica</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">NSDI</title>
		<imprint>
			<date type="published" when="2011" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b15">
	<monogr>
		<title level="m" type="main">The Datacenter as a Computer: An Introduction to the Design of Warehouse-Scale Machines</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">U</forename><surname>Hoelzle</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">L</forename><forename type="middle">A</forename><surname>Barroso</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2009" />
			<publisher>Morgan and Claypool Publishers</publisher>
		</imprint>
	</monogr>
	<note>1st edition</note>
</biblStruct>

<biblStruct xml:id="b16">
	<monogr>
		<title level="m" type="main">Dryad: Distributed data-parallel programs from sequential building blocks</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Isard</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Budiu</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Y</forename><surname>Yu</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Birrell</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Fetterly</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2007" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b17">
	<monogr>
		<title level="m" type="main">Quincy: Fair scheduling for distributed computing clusters</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Isard</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">V</forename><surname>Prabhakaran</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Currey</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">U</forename><surname>Wieder</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">K</forename><surname>Talwar</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Goldberg</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2009" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b18">
	<monogr>
		<title level="m" type="main">Facebook Chat</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">E</forename><surname>Letuchy</surname></persName>
		</author>
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b19">
	<analytic>
		<title level="a" type="main">GraphLab: A new parallel framework for machine learning</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Y</forename><surname>Low</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Gonzalez</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Kyrola</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Bickson</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><surname>Guestrin</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><forename type="middle">M</forename><surname>Hellerstein</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">UAI</title>
		<imprint>
			<date type="published" when="2010" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b20">
	<analytic>
		<title level="a" type="main">Pregel: a system for large-scale graph processing</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">G</forename><surname>Malewicz</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><forename type="middle">H</forename><surname>Austern</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><forename type="middle">J</forename><surname>Bik</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><forename type="middle">C</forename><surname>Dehnert</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">I</forename><surname>Horn</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">N</forename><surname>Leiser</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">G</forename><surname>Czajkowski</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">SIGMOD 2010</title>
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b21">
	<monogr>
		<title level="m" type="main">Pig latin: a not-so-foreign language for data processing</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><surname>Olston</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">B</forename><surname>Reed</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">U</forename><surname>Srivastava</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Kumar</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Tomkins</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2008" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b22">
	<analytic>
		<title level="a" type="main">The Sprite network operating system</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><forename type="middle">K</forename><surname>Ousterhout</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><forename type="middle">R</forename><surname>Cherenson</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">F</forename><surname>Douglis</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><forename type="middle">N</forename><surname>Nelson</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">B</forename><forename type="middle">B</forename><surname>Welch</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Computer</title>
		<imprint>
			<biblScope unit="volume">21</biblScope>
			<biblScope unit="page" from="23" to="36" />
			<date type="published" when="1988-02" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b23">
	<analytic>
		<title level="a" type="main">Technical perspective: the data center is the computer</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><forename type="middle">A</forename><surname>Patterson</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Commun. ACM</title>
		<imprint>
			<biblScope unit="volume">51</biblScope>
			<biblScope unit="page" from="105" to="105" />
			<date type="published" when="2008-01" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b24">
	<analytic>
		<title level="a" type="main">Large-scale incremental processing using distributed transactions and notifications</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Peng</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">F</forename><surname>Dabek</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">OSDI 2010</title>
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b25">
	<analytic>
		<title level="a" type="main">Experiences with the Amoeba distributed operating system</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><forename type="middle">S</forename><surname>Tanenbaum</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Van Renesse</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">H</forename><surname>Van Staveren</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">G</forename><forename type="middle">J</forename><surname>Sharp</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><forename type="middle">J</forename><surname>Mullender</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Commun. ACM</title>
		<imprint>
			<biblScope unit="volume">33</biblScope>
			<biblScope unit="page" from="46" to="63" />
			<date type="published" when="1990-12" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b26">
	<analytic>
		<title level="a" type="main">Location, location, location!: modeling data proximity in the cloud</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">B</forename><surname>Tiwana</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Balakrishnan</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><forename type="middle">K</forename><surname>Aguilera</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">H</forename><surname>Ballani</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Z</forename><forename type="middle">M</forename><surname>Mao</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">HotNets</title>
		<imprint>
			<date type="published" when="2010" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b27">
	<analytic>
		<title level="a" type="main">An operating system for multicore and clouds: mechanisms and implementation</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Wentzlaff</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><surname>Gruenwald</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Iii</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">N</forename><surname>Beckmann</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">K</forename><surname>Modzelewski</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Belay</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">L</forename><surname>Youseff</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Miller</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Agarwal</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">SOCC 2010</title>
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b28">
	<monogr>
		<title level="m" type="main">Delay scheduling: A simple technique for achieving locality and fairness in cluster scheduling</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Zaharia</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Borthakur</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Sen</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">K</forename><surname>Sarma</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Elmeleegy</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">I</forename><surname>Shenker</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Stoica</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2010" />
		</imprint>
	</monogr>
	<note>In EuroSys</note>
</biblStruct>

<biblStruct xml:id="b29">
	<monogr>
		<title level="m" type="main">Spark: Cluster computing with working sets</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Zaharia</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Chowdhury</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><forename type="middle">J</forename><surname>Franklin</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Shenker</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">I</forename><surname>Stoica</surname></persName>
		</author>
		<editor>HotCloud</editor>
		<imprint>
			<date type="published" when="2010" />
		</imprint>
	</monogr>
</biblStruct>

				</listBibl>
			</div>
		</back>
	</text>
</TEI>
