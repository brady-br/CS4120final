<?xml version="1.0" encoding="UTF-8"?>
<TEI xmlns="http://www.tei-c.org/ns/1.0" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
xsi:schemaLocation="http://www.tei-c.org/ns/1.0 /Users/atharsefid/Desktop/grobid-0.5.3/grobid-home/schemas/xsd/Grobid.xsd"
 xmlns:xlink="http://www.w3.org/1999/xlink">
	<teiHeader xml:lang="en">
		<encodingDesc>
			<appInfo>
				<application version="0.5.3" ident="GROBID" when="2020-09-29T04:28+0000">
					<ref target="https://github.com/kermitt2/grobid">GROBID - A machine learning software for extracting information from scholarly documents</ref>
				</application>
			</appInfo>
		</encodingDesc>
		<fileDesc>
			<titleStmt>
				<title level="a" type="main">Abusing Public Third-Party Services for EDoS Attacks</title>
			</titleStmt>
			<publicationStmt>
				<publisher/>
				<availability status="unknown"><licence/></availability>
			</publicationStmt>
			<sourceDesc>
				<biblStruct>
					<analytic>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Huangxin</forename><surname>Wang</surname></persName>
							<affiliation key="aff0">
								<orgName type="department">Department of Computer Science</orgName>
								<orgName type="institution">George Mason University</orgName>
								<address>
									<postCode>22030</postCode>
									<region>VA</region>
									<country key="US">USA</country>
								</address>
							</affiliation>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Zhonghua</forename><surname>Xi</surname></persName>
							<affiliation key="aff0">
								<orgName type="department">Department of Computer Science</orgName>
								<orgName type="institution">George Mason University</orgName>
								<address>
									<postCode>22030</postCode>
									<region>VA</region>
									<country key="US">USA</country>
								</address>
							</affiliation>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Fei</forename><surname>Li</surname></persName>
							<affiliation key="aff0">
								<orgName type="department">Department of Computer Science</orgName>
								<orgName type="institution">George Mason University</orgName>
								<address>
									<postCode>22030</postCode>
									<region>VA</region>
									<country key="US">USA</country>
								</address>
							</affiliation>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Songqing</forename><surname>Chen</surname></persName>
							<affiliation key="aff0">
								<orgName type="department">Department of Computer Science</orgName>
								<orgName type="institution">George Mason University</orgName>
								<address>
									<postCode>22030</postCode>
									<region>VA</region>
									<country key="US">USA</country>
								</address>
							</affiliation>
						</author>
						<title level="a" type="main">Abusing Public Third-Party Services for EDoS Attacks</title>
					</analytic>
					<monogr>
						<imprint>
							<date/>
						</imprint>
					</monogr>
				</biblStruct>
			</sourceDesc>
		</fileDesc>
		<profileDesc>
			<abstract>
				<p>Cloud computing has been widely adopted nowadays as it provides economical, elastic and scalable services to customers. The cloud resources are offered in an on-demand manner and the consumers are charged based on their resource usage, known as &quot;pay-as-you-go&quot;. Such a cloud utility scheme opens the door to Economic Denial of Sustainability (EDoS) attacks in which the cloud consumers would suffer from financial losses. In this paper, we uncover the severity of EDoS attacks through demonstrating that EDoS attacks can be easily conducted at very low costs. In specific, we show that attackers can launch amplification attacks against the cloud consumers by abusing the free public third-party services provided by the Internet giants such as Google, Microsoft, Face-book and LinkedIn. Through studying the characteristics of 10 main public third-party services, we reveal that all of them can be abused to launch EDoS attacks and the amplification factor can reach up to 135K. To combat against the uncovered attacks, we propose several miti-gation strategies for the third-party service providers as well as the cloud consumers.</p>
			</abstract>
		</profileDesc>
	</teiHeader>
	<text xml:lang="en">
		<body>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="1">Introduction</head><p>As cloud computing offers customers convenient access to affordable, flexible and scalable computing resources, nowadays more and more small to medium enterprises have moved their IT infrastructure to the cloud. The cloud consumers are charged under a "pay-as-you-go" scheme in which they only need to pay for the resources that they have used. With this utility charging scheme, traditional Distributed Denial of Service (DDoS) attacks have evolved to a new type of attack called Economic Denial of Sustainability (EDoS) attack <ref type="bibr" target="#b4">[6,</ref><ref type="bibr" target="#b23">30]</ref>. In EDoS attacks, attackers aim to drain the financial budget of the cloud consumers by making them consume more resources for fraudulent traffic requests and thus pay more to the cloud providers. Cost-effectiveness, which is one of the main reason for consumers to adopt cloud computing, however, will diminish under EDoS attacks.</p><p>In traditional DDoS attacks, attackers aim to make the victim servers unavailable for legitimate clients by congesting the victim servers with bogus traffic. While in EDoS attacks, attackers seek to bring economic burden to the victims and thus eventually make the victims unable to afford their services. Hence, such an attack is named Economic Denial of Sustainability (EDoS) attack <ref type="bibr" target="#b4">[6]</ref>. Specifically, the EDoS attackers can fraudulently consume the computational or bandwidth resources of the victim servers, and thus incur high bills to the victims under the "pay-as-you-go" cloud utility model. Recent events and studies reveal that the EDoS attack is a severe threat to the cloud consumers <ref type="bibr">[26,</ref><ref type="bibr" target="#b32">39]</ref>. For example, GreatFire.org that hosts its services in Amazon Cloud suffered from an attack with more than 2.8 billion requests per hour at the peak in 2015. The attack makes GreatFire.org experience more than 2600 times of the traffic than its usual and pushes the bandwidth cost to as high as $30, 000 per day <ref type="bibr">[26]</ref>.</p><p>In this paper, we systematically and experimentally uncover how severe the EDoS attacks are to the cloud consumers by demonstrating that EDoS attacks can be conducted easily and at very low cost. The attack can be achieved by abusing the free public thirdparty services made available by a lot of IT companies, such as Google <ref type="bibr" target="#b8">[10]</ref>, Microsoft <ref type="bibr" target="#b12">[15]</ref>, Facebook <ref type="bibr" target="#b5">[7]</ref> and LinkedIn <ref type="bibr" target="#b11">[14]</ref>. These public services are originally intended to be used by their social networks, mail services or other web-based services to improve user experience. For example, Facebook uses its fetching services to prefetch the URLs contained in a user's post in order to preview landing pages of the URLs. Similarly, Microsoft Outlook email service prefetches the URLs contained in the emails for the purpose of previewing contents. These service APIs, however, are not well protected and thus can be abused by the attackers to fraudulently consume the resources of their attack targets. Imagine the scenario in which an attacker would like to attack Alice who hosts her public accessible website in the cloud. The attacker can use the public fetching services to make requests to Alice's website, e.g, requesting images, videos, documents etc. As a result, it will cause large bandwidth consumption and incur a high bill to Alice.</p><p>We also demonstrate that it is more beneficial for the attackers to leverage the public third-party services to conduct amplification attacks rather than directly attack the victims. The reasons are multiple folds: (1) The attackers can hide their IPs from the victims; (2) The public third-party services have numerous IPs, thus even if the attacker only has a single IP, it can appear to have multiple IPs as seen from the victim's perspective, thus makes it difficult to block the attackers by IP addresses; (3) It has large bandwidth amplification factors such that the attackers only experience light traffic volume while the victims suffer from much larger bandwidth consumption. More details will be shown in Section 4.</p><p>The rest of the paper is organized as follows. Section 2 provides some background knowledge of amplification attacks and public third-party services. The threat model is described in Section 3. Section 4 characterizes the third-party services and demonstrates how they can be abused for EDoS attacks. An EDoS attack is conducted in Section 5 to demonstrate the power of the thirdparty services when they are used for attacks. We discuss several EDoS mitigation strategies in Section 6. Section 7 reviews the related work and concluding remarks are given in Section 8.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2">Background</head><p>In this section, we introduce amplification attacks and provide a brief overview of the public third-party services that can be abused for EDoS attacks.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.1">Amplification attacks</head><p>An amplification attack is an attack in which the attackers use fewer resources to cause the victims to suffer from much higher resource stress. Smurf attacks <ref type="bibr" target="#b26">[33]</ref>, DNS amplification attacks <ref type="bibr" target="#b21">[28]</ref> are two notorious examples of amplification attacks. As an example, in DNS amplification attacks <ref type="bibr" target="#b21">[28]</ref>, an attacker sends DNS lookup messages to a public accessible DNS server with a spoofed IP address of the victim. As a result, the DNS server floods the victim with DNS response traffic. In this amplification attack, the payload of the packets that the attacker sends to the DNS server is much smaller than the payload of the packets the victim receives from the DNS server. The EDoS attack discussed in this paper often also belongs to the family of Amplification Attacks, as what will be shown in Section 4. More specifically, in an EDoS attack, the attackers experience much less traffic than what the victims have suffered.</p><p>Bandwidth Amplification Factor (BAF) is a widely used metric in measuring the amplification effects <ref type="bibr" target="#b26">[33,</ref><ref type="bibr" target="#b21">28]</ref>. It is defined as below.</p><p>Definition 1 (Bandwidth Amplification Factor (BAF)).</p><formula xml:id="formula_0">BAF = Traffic victim Traffic attacker ,<label>(1)</label></formula><p>where Traffic attacker is the traffic volume the attacker sends out per request, and Traffic victim is the traffic volume received and responsed by the victim correspondingly.</p><p>In an EDoS attack, the attackers aim to impose a financial burden on the victims. We take into account the variety of charging rates and define the economic amplification factor (EAF) as below.</p><p>Definition 2 (Economic Amplification Factor (EAF)).</p><formula xml:id="formula_1">EAF = λ victim Traffic victim λ attacker Traffic attacker ,<label>(2)</label></formula><p>where λ attacker and λ victim are the resource charging rate for the attacker and the victim, respectively.</p><p>The resource charging rate depends on the charging scheme of the service providers. For example, if a victim is hosting her services in the Amazon Cloud, the bandwidth resource charging rate will be $0.09/GB for outgoing traffic as shown in Section 3 which is relatively high. On the contrary, there are many low-cost options for the attackers besides clouds as their operations are rather simple (see Section 5). For example, Zare <ref type="bibr" target="#b20">[27]</ref> provides KVM servers with 3TB transfer limit for £5/month (i.e., $7.30/month), the bandwidth charging rate will be $0.0024/GB which further amplifies the bandwidth amplification factor by 37.5 times.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.2">Public third-party services</head><p>The world nowadays is filled with a rich set of Internet services including social networks (e.g., Facebook <ref type="bibr" target="#b5">[7]</ref>, Fotolog <ref type="bibr" target="#b6">[8]</ref>, LinkedIn <ref type="bibr" target="#b11">[14]</ref>, Pinterest <ref type="bibr" target="#b16">[19]</ref>, Tencent <ref type="bibr" target="#b17">[22]</ref>, Tagged <ref type="bibr">[20]</ref>), mail services (e.g., Microsoft Outlook <ref type="bibr" target="#b12">[15]</ref>), repository hosting services (e.g., <ref type="bibr">Github [9]</ref>), online document services (e.g., Google Docs <ref type="bibr" target="#b8">[10]</ref>) etc. We show some examples of the front-end functionalities in these third-party services in <ref type="figure" target="#fig_0">Figure 1</ref>. These front-end functionalities are supported by some back-end resource fetching services. In <ref type="figure" target="#fig_0">Figure 1(a)</ref>, when a Facebook user is composing a post which contains URLs, Facebook URL fetching service API will be called to fetch the URLs contained in the post to preview the corresponding landing pages. This function gives users a more vivid view of what is contained in a URL when they are composing a post. In <ref type="figure" target="#fig_0">Figure 1</ref>(b), the Pinterest <ref type="bibr" target="#b16">[19]</ref> URL fetching service is designed to allow users to "pin" the images contained in a given URL. In particular, the Pinterest fetching service will fetch all the images contained in a given URL and allow the users to choose which image to "pin". This greatly improves the user experience as the user no longer needs to download the images by herself and then upload them to Pinterest.</p><p>These back-end fetching service APIs are originally designed to be used by their own products only. Unfortunately, they are not well guarded and attackers can gain access to them and abuse them to conduct attacks. For example, the attackers can use these service APIs to make requests to the victims' servers and thus to consume the resources from the victims.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3">Threat Model</head><p>In this section, we describe a threat model of cloud EDoS attacks in which attackers use free public third-party services to conduct attacks. An overview of the EDoS attack scenarios is shown in <ref type="figure" target="#fig_2">Figure 2</ref>. The components include cloud service providers (CSP), victim servers hosted by cloud consumers, legitimate clients, malicious clients (i.e., attackers), and legitimate third parties to be abused for conducting attacks. We walk through each component in more details in the following.</p><p>Cloud service providers (CSP). The cloud service providers offer computing and network resources that can be leased by cloud consumers. The cloud service  providers will charge the cloud consumers based on the cloud utility model which will be explained in the following. Some widely used cloud service providers are Amazon EC2 Cloud <ref type="bibr" target="#b3">[4]</ref>, Google Cloud <ref type="bibr" target="#b9">[11]</ref>, Microsoft Azure <ref type="bibr" target="#b13">[16]</ref>, etc.</p><p>Cloud utility model. The cloud utility model refers to the charging scheme specified by the cloud service providers. The CSP meters the resource consumption of each customer and charges her a fee based on her exact resource consumption. This charging scheme is known as "pay-as-you-go".</p><p>Most of the cloud providers charge their customers based on the consumed server hours and the volume of outgoing network traffic (i.e., traffic flow from the servers to the public internet or to other servers in the same cloud). The incoming traffic, i.e., traffic sent to the cloud server instance, is free. <ref type="table">Table 1</ref> shows an example of the utility pricing of the cloud service providers including Amazon Cloud <ref type="bibr" target="#b3">[4]</ref>, Google Cloud <ref type="bibr" target="#b9">[11]</ref> and Microsoft Azure <ref type="bibr" target="#b13">[16]</ref> as of May 12, 2016. Note that for the same cloud provider, the charging rate varies based on server instance types and the cloud regions. The server prices in <ref type="table">Table 1</ref>  Note that the price of the traffic going out to the same cloud is much cheaper than to the Internet <ref type="bibr" target="#b2">[3,</ref><ref type="bibr" target="#b15">18,</ref><ref type="bibr">13]</ref>. For example, for Amazon Cloud, the traffic outgoing to the same cloud region is charged at $0.01/GB, and the traffic outgoing to a different region of the same cloud is charged at $0.02/GB <ref type="bibr" target="#b2">[3]</ref>. Both prices are much lower than the price of traffic outgoing to the Internet as shown in <ref type="table">Table 1</ref>.</p><p>Cloud consumers. The cloud consumers refer to the users who lease resources from cloud service providers. The cloud consumers will be billed by the resources they have consumed under the aforementioned "pay-as-yougo" cloud utility model.</p><p>In the EDoS attack model, we assume the cloud consumers host websites or any computing resources that are public accessible to all clients without requiring extra authentication. Note that many online shopping websites (e.g., Target <ref type="bibr">[21]</ref>, Walmart <ref type="bibr" target="#b19">[25]</ref>), news websites (e.g., The New York Times <ref type="bibr">[23]</ref>), social websites (e.g., Pinterest <ref type="bibr" target="#b16">[19]</ref>, Tumblr <ref type="bibr" target="#b18">[24]</ref>) are open to the public without requiring logging-in for browsing the websites.</p><p>Legitimate clients. The legitimate clients are the clients who make requests of the cloud consumers' resources purely for their interests, but not intended to cause financial losses (e.g., the bandwidth cost) to the cloud consumers.</p><p>Attackers. The attackers are also called malicious clients. Different from legitimate clients, the purpose for an attacker to visit a cloud consumer's website is to consume the bandwidth resource of the cloud consumer and to impose a financial burden on her. The behaviors for an attacker to fraudulently consume resources from her attack target is called attacks. In particular, there are two types of attacks, namely direct attacks and indirect attacks.</p><p>For direct attacks, the attacker requests the resource directly from the victim. This is less profitable especially when the resource charging fee is expensive for the attackers. Besides, the attackers will have risks to reveal their identity to the victims. The economic inefficiency and the security risk may prohibit the attackers to conduct direct attacks. While under indirect attacks, the attacker abuses public third-party services for consuming the victim's resource. We show in Section 4.5 that under this type of attacks, the amplification factor could be extremely high, i.e., up to 135K. The legitimate third parties that can be abused for indirect attacks are introduced in the following.</p><p>Legitimate third parties. The legitimate third parties refer to the companies or organizations who provide public available services that can be abused by the attackers to launch EDoS attacks to the cloud consumers.</p><p>Based on the cloud utility model, one of the most effective forms of EDoS attacks is to fraudulently consume a victim's bandwidth resource. Therefore, the services that can be abused to launch the EDoS attacks should exhibit the bandwidth amplification characteristics, i.e., the traffic volume between the attackers and the third parties should be much less than that between the third parties and the victims. The third-party services introduced in Section 2 have such characteristics as what will be demonstrated in Section 4.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4">Characterizing Third-party Services</head><p>In this section, we conduct experiments to study the characteristics of 10 popular third-party services. We first demonstrate how attackers can make use of these legitimate third-party services to consume resources from their attack targets. Then we go ahead to study the power of these third-party services when they are used as attack weapons.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.1">Setup</head><p>Third-party services. We choose a set of popular network services for investigation according to their popularity and types in Alexa <ref type="bibr" target="#b0">[1]</ref>. The network services chosen for investigation cover several types, including social networks, email services and other web-based services. These service providers we study are: Facebook <ref type="bibr" target="#b5">[7]</ref>, Fotolog <ref type="bibr" target="#b6">[8]</ref>, <ref type="bibr">Github [9]</ref>, Google <ref type="bibr" target="#b8">[10]</ref>, LinkedIn <ref type="bibr" target="#b11">[14]</ref>, Microsoft <ref type="bibr" target="#b12">[15]</ref>, Pinterest <ref type="bibr" target="#b16">[19]</ref>, Tagged <ref type="bibr">[20]</ref>, Tencent <ref type="bibr" target="#b17">[22]</ref> and Tumblr <ref type="bibr" target="#b18">[24]</ref>.</p><p>Website hosting. In order to study the characteristics of the third-party services when they are used for attacks, we build a victim website in the Amazon Cloud with the t2.micro instance type, which has 1 v-CPU and 1GB memory. The website hosts various recourses including images with sizes from 38KB to 40MB, videos with sizes from 2MB to 171MB and documents with size from 10KB to 10MB. Our deployed website is a typical one. The types of resources it offers and the way it offers the resources are similar to various types of websites, including online-shopping websites (e.g., Walmart <ref type="bibr" target="#b19">[25]</ref>, Target <ref type="bibr">[21]</ref> etc.), online-social websites (e.g, Facebook <ref type="bibr" target="#b5">[7]</ref>, Tumblr <ref type="bibr" target="#b18">[24]</ref>, Pinterest <ref type="bibr" target="#b16">[19]</ref> etc.), news websites (e.g., The New York Times <ref type="bibr">[23]</ref>), etc.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.2">How to abuse third-party services</head><p>Many daily used functionalities of legitimate websites, such as uploading a profile image, previewing the changes of a readme file or even pasting a URL into a post composer, can be easily abused to launch EDoS attacks. In <ref type="table" target="#tab_2">Table 2</ref> we show such vulnerable services exist in the products of the service providers. Most of these products involve image uploading or webpage previewing. We demonstrate here that even non-expert malicious users can easily abuse these services to launch EDoS attacks with the following simple steps:</p><p>• Step 1: Login into the website (optional for some services)</p><p>• Step 2: Start to record the networking logs using browser's developer tool (e.g., Chrome DevTools [5])</p><p>• Step 3: Do the operation (e.g., paste the target URL into the post composer or email draft)</p><p>• Step 4: Extract the command of the operation from the recorded networking logs ( i.e., an HTTP request with access token in cookie)</p><p>• Step 5: Replay the HTTP request got from Step 4</p><p>An example of the Pinterest's HTTP requests got from Step 4 that can be replayed to attack the victim is shown in <ref type="figure" target="#fig_3">Figure 3</ref>. <ref type="table" target="#tab_2">Table 2</ref> shows the services from the legitimate third parties that can be abused for EDoS attacks. In particular, it lists the related products and the using scenarios. We can see that the service APIs that can be   abused all have the functionality about resource fetching. Specifically, the attackers can use these service APIs to fetch resources from their target victims. When the attacker calls a service API, a response message will be sent back to the attacker. For most of the API calls, the size of the response message is small (less than 7K, see <ref type="table">Table 4</ref>) which usually contains the result of the API operation (e.g., resource fetching success or failure).</p><p>There are two exceptions: Google and Github, both of which are proxy services (the latter one is a lazy proxy service, two requests are needed to get the actual content) which will return exact the fetched content to the attackers. To achieve high bandwidth amplification factors, the attackers can specify the request as a HEAD request such that only the header of the fetched resource will be sent back to the attackers.  </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Provider</head></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.3">Identities and unique IP addresses</head><p>The identities of the third-party services and their IP addresses are critical factors in measuring the attack power as well as designing mitigation mechanisms. Thus we uncover these features in the following. We conduct an experiment in which the attacker calls the service APIs to request resources (by URLs) from the victim website that we have built. Specifically, the attacker calls the service APIs of each service provider 2000 times with an average delay of 10s between requests. Note that in our experiment the attacker only has a single IP and a single account. We log each request in the victim website. The identities and unique IPs of each third-party fetching service are summarized in <ref type="table" target="#tab_4">Table 3</ref>. We find that most of the providers have unique User-Agent fields which can be used for whitelisting or blacklisting. We also find that some providers, especially those cloud-based, e.g., Github, LinkedIn, Pinterest, tend to use multiple IPs to fetch resources even when the requests are from a single user (with a single IP). For example, Pinterest uses 728 different IPs in serving 2000 requests. It can be inferred that the third-party services have employed load balancing mechanisms to distribute the requests to be served on different machines. It is likely that requests from different users may be assigned to the same machine. This indicates that it is difficult for the victims to employ an IP-based blocking mechanism to filter out the attackers since an attacker is not bind to a single IP and legitimate users may share the same IP with the attackers.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.4">Capability of the fetching services</head><p>We are interested in the maximum content-length that a service provider would fetch in a single request as the amplification factor is proportional to the maximum fetched content-length.</p><p>We conduct an experiment to study the abortion criteria of each service API by calling it to fetch resources from the victim's website. For testing the timeout, we use mod bw to limit the bandwidth of the victim's website to 1KB/s and let service providers fetch a large resource (5MB) from the website we built and use tcpdump to record the time when the connection started and reset.</p><p>Not surprisingly, we find that most of the service providers have a certain level of protections on their APIs that they limit either the maximum content-length or the maximum fetching time as shown in <ref type="table">Table 4</ref>. When the request exceeds the limit enforced in the service APIs, it will be aborted.</p><p>We summarize the abortion criteria of the service APIs in the following:</p><p>• Content Length: a HEAD request is made before the GET request to check the content-length of the resource. If it is greater than the threshold, the fetching will be skipped. (Fotolog)</p><p>•  <ref type="table">Table 4</ref>: Sent, received size of the attacker and maximum fetching size (MFS), timeout and max amplification factors of the each fetching service. * sum of two requests. * * HEAD only request.</p><p>• Metadata: some providers peek the first several kilobytes of the resource to check its file type, file size and resolution and abort the fetching if any criteria are not met (e.g., not an image). Providers that check metadata include Facebook, Github, Fotolog and Tencent.</p><p>• Timeout: if the transmission can not be finished within the time budget, connections are reset. All providers except Microsoft's BingPreview have this limit.</p><p>One interesting case is about Pinterest whose API does not have restrictions on the maximum content-length, instead, it has a relative shorter timeout which is about 7 seconds. From tcpdump we find that Pinterest also deploys its fetching service in Amazon Cloud, the bandwidth between our victim server and Pinterest's server can be as high as 167 Mbps even in a single request, 148 MB was transferred in 7 seconds which leads to the highest amplification factor we ever measured, over 134k as shown in <ref type="table">Table 4</ref>.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.5">Bandwidth amplification factor</head><p>As introduced in Section 2, the effect of an attack can be measured by the bandwidth amplification factor which is defined as the ratio of the traffic volume suffered by the attacker and the victim, respectively. For each request of the third-party service API, the maximum traffic volume a victim would suffer corresponds the maximum fetching size limit as shown in <ref type="table">Table 4</ref>. In <ref type="table">Table 4</ref>, we also show the sent size, received size for the attacker. We compute the bandwidth amplification factor (BAF) using the following formula:</p><formula xml:id="formula_2">BAF = Fetching Size Sent attacker</formula><p>The calculated bandwidth amplification factor is shown in <ref type="table">Table 4</ref>. Note, the received size was excluded since the attacker can reset the connection after sending the request.</p><p>Among all the providers, Google has the smallest request size which is only 225 bytes since login is not required, no cookies and other tracking headers are needed. It has an amplification factor up to 63296 with a 14 MB maximum fetching size. Other providers have the request size between 1KB to 4KB and amplification factor between 3555 to 134682 which are several folds higher than that of traditional amplification attacks (around 318 to 1395) <ref type="bibr" target="#b29">[36]</ref>.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.6">Caching</head><p>Caching in the third-party services would significantly affect the bandwidth consumption of the victim websites. Hence, we check the cache capability of each service provider and the results are shown in <ref type="table" target="#tab_4">Table 3</ref>. We find that 9 out of the 10 third-party services will cache the resources except Fotolog. In particular, with the cache mechanism, when the attacker repeatedly calls the service APIs to fetch the same resource (exactly the same URL) from the victim, the third-party service will fetch only once. However, the attackers can play a trick to append different query strings in the URL to make it appear to be different to the third-party services and thus resulting in cache misses. Based on this fact, we conduct an EDoS attacks in Section 5 and propose a redirection based EDoS defense mechanism in Section 6.1.3.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.7">Registration cost and anonymity</head><p>We further demonstrate the registration requirements and cost in creating the user account in the third-party services. The results are shown in <ref type="table" target="#tab_7">Table 5</ref> from which we can see that there is no burden for the attackers to use these third-party services and they can keep fully anonymous. Thus, EDoS attacks by abusing the public services are likely to be launched in the real world.  </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Register</head></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5">An EDoS Attack</head><p>In this section, we conduct an EDoS attack by abusing the third-party services introduced above. We analyze the attack traffic the victim suffered as well as the economic amplification factor of the attack.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5.1">Setup</head><p>In order to differentiate the service providers in the logs of the victim's website, we append a naive unique query string to the URLs when calling each service providers' service APIs. Besides, in order to avoid hitting the cache of the service providers and thus push them to fetch the resources for each request, we append a different requestId for each request. In this way, the service providers will treat each URL as a different one. Above all, the requested URL looks like:</p><p>For example, the URLs the attacker asks Pinterest's service to fetch in the 2000 requests could be like:</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5.2">Traffic consumptions</head><p>The total expected network out traffic of the victim server is about 181GB (10 providers × 2000 requests × 9.26MB / request). We show the monitored network out traffic of the victim server in <ref type="figure" target="#fig_4">Figure 4</ref> which has a total volume of 166.41GB and total elapsed time about 5.5 hours. The first thing worth noting is that none of the requests hits the caches though they are actually requesting the same resource. It can be inferred that the service providers are not capable of distinguishing whether two different URLs are requesting the same resources or not.</p><p>By analyzing the access logs on the victim's server, we notice that some providers (e.g., Tagged, Facebook) will send 2 or more requests (from different IP addresses) to the victim's server for each request from the attacker probably for performance concerns. As a result, it doubles or triples the bandwidth amplification factor. From <ref type="figure" target="#fig_4">Figure 4</ref> we can see that at the very beginning, the network out traffic of the victim server grows dramatically up to 1086 MB/min (maximum). About 40 minutes later, Amazon Cloud starts to "protect" the victim website by limiting the network traffic to about 464 MB/min since the networking performance of micro instance type is defined to be "low". We can imagine that the traffic rate will be significantly higher in a more powerful instance with high networking performance.</p><p>Even with this simple attack mechanism in which the attacker only has a single IP address and a single user account in accessing the third-party services, most of the service providers did not take any actions to stop the abuse except LinkedIn <ref type="bibr" target="#b11">[14]</ref> and Microsoft <ref type="bibr" target="#b12">[15]</ref>. LinkedIn blocked all the fetch requests after finishing the 555th requests and Microsoft periodically blocks the requests for 5 minutes. </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5.3">Economic amplification factor</head><p>During the entire attack, the attacker sent out less than 30 MB while the victim sent out 166 GB traffic which turns to a $11.87 bill (bandwidth alone). If the attack lasts overtime with the same traffic rate, the monthly bandwidth bill for the victim will be $1545.07. The average bandwidth amplification factor in this attack is 9617 which is much higher than traditional amplification attacks even under the traffic limit enforced by the Amazon Cloud.</p><p>As mentioned in Section 4 that LinekdIn, Pinterest and Github are hosting their resource fetching services in the Amazon Cloud. From the logs in the victim server, we find the requests were served by their servers deployed in US Virginia region. As our victim server is deployed in Amazon Cloud Oregon region, according to the cloud utility model in Section 3, the traffic outgoing from the victim server to LinekdIn, Pinterest and Github is charged at a much lower price ($0.02/GB) compared with the rest ones ($0.09/GB). This fact is verified by the total bill $11.87 we got from the attack.</p><p>If the attack is launched inside the Amazon Cloud and lasts for one month with the same traffic rate, the average bandwidth alone economic amplification factor will be 8157.32. As the actions the attackers need to perform are rather simple (i.e., sending HTTP requests), the attackers have more flexibility in choosing low-cost services rather than the cloud. For example, if the attack is launched from a lower cost host, e.g. Zare <ref type="bibr" target="#b20">[27]</ref> with the charging rate at $0.0024/GB, the economic amplification factor will be increased to 167859.46. Note that the economic amplification factor can be further increased by carefully planning the attack, e.g. by only abusing those providers that have high economic amplification factors and low blockage rate.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="6">Mitigation Strategies</head><p>In this section, we propose several ways for cloud consumers to minimize the cost when they are facing potential EDoS attacks. We also show that with the cooperation between the cloud consumers and the public thirdparty service providers, it will rule out the possibilities for the attackers to abuse the public services in conducting EDoS attacks.</p><p>6.1 What can the cloud consumers do?</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="6.1.1">Filtering requests from special agents</head><p>As shown in <ref type="table" target="#tab_4">Table 3</ref>, most of the third-party URL fetching services use unique user-agent in the request header, thus the cloud consumers can easily setup a whitelist or blacklist to allow certain URL fetching services to access while denying others. For example, an online shopping website may want to deny the request from Github's fetching agent as Github website is mainly used for hosting code. The agent-based filtering approach has the limitations of mis-blocking some legitimate users, e.g., there are very few people who use Github for blogging rather than code hosting, thus these people may have the possibility to include the resource of the shopping websites in their blogs.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="6.1.2">Serving requests with same cloud region servers</head><p>As mentioned in Section 3, the price of the traffic outgoing to the same cloud region is only 1/9 of the price when traffic is outgoing to the Internet (leaving the cloud). If the cloud consumers host their website in multiple clouds or/and in multiple regions within the same cloud, it is beneficial for the cloud consumers to serve the requests using the servers in the same cloud region whenever possible. As a result, it can significantly reduce the cost not only when being attacked but also on a daily basis. This mitigation scheme has been verified in our experiments in Section 5. In our experiment, our victim server is hosted in the same cloud (Amazon Cloud) but a different region with the third-party services including Github, LinkedIn and Pinterest. Thus the price of the traffic outgoing to these three third-party services is $0.02/GB, while the traffic outgoing to the rest of the third-party services is charged $0.09/GB.  </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="6.1.3">A redirection-based defense mechanism</head><p>The root cause of the effective EDoS attacks is because the attackers can generate numerous different URLs even for a single resource by appending different query strings. The attackers can call the third-party services to fetch the resource with the generated URLs. Unfortunately, the third-party service cannot distinguish whether two URLs actually point to the same resource. Therefore, even though most of the third-party services do have caching mechanisms, they will not be able to hit the cache due to the differences in the URLs and thus they will re-fetch the resources from the victim's website on every request made by the attacker.</p><p>In order to illustrate the proposed mechanism, we first depict the currently deployed model adopted by most websites and third-party services in <ref type="figure" target="#fig_6">Figure 5</ref>(a). In this figure, the attacker calls the third-party service to fetch resources (step 1), the third-party service finds it does not have a valid cache for the requested URL even it actually has one in the cache but with a slightly different URL (step 2 and 3), then the third-party service fetches the resources from the victim's website and caches the resources (step 4-6), finally a response of the fetching state is sent back to the attacker (step 7).</p><p>We propose an EDoS defense mechanism which requires corporations between the cloud consumer and the third-party services (usually have much more computing resources, e.g., Google, Facebook, Microsoft, etc.) as following.</p><p>For a request to a static resource with a query string in the URL from the fetching service, the cloud consumer redirects the request by dropping all the query strings and responses to the requester with a status code 301 (moved permanently). This action aims to tell the third-party services that the requests generated from the same URL with different query strings actually point to the same resource. It is important for the cloud consumers to do so as the third-party services cannot tell whether two different URLs are pointing to the same resource or not.</p><p>Under this mechanism, when the attacker requests the same resource with a different query string, the fetching service sends a request to the victim server as usual but it will get a 301 response with a redirection address (the URL with query string being dropped). Then if the third-party service has a valid cache for the requested resources, it should not re-fetch the resource from the victim's website. If so, the attacker is no longer able to drive the third-party services to make numerous requests to the victim's website.</p><p>However, it turns out the single side action from the cloud consumers is not enough to make this defense mechanism work. Though all of the third-party services will follow the redirection except Tencent and most of them have caches (shown in <ref type="table" target="#tab_4">Table 3</ref>), only Tagged <ref type="bibr">[20]</ref> will recheck whether the resource of the redirected URL is contained in its cache. While for the rest of the thirdparty services, they will refetch the resources in the redirected link. Thus, to make this defense mechanism work, the cooperation of the third-party services to recheck the cache is needed as shown in the following.</p><p>6.2 What can the third parties do?</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="6.2.1">Cache redirected resources</head><p>As mentioned in the previous subsection, the redirectionbased defense mechanism requires the third-party fetching services to cooperate with the cloud consumers to follow the redirection, cache the fetched resources, and recheck whether the redirected resources are in the cache in order to make the defense mechanism effective.</p><p>The proposed cooperation scheme between the cloud consumers and the third-party services is shown in <ref type="figure" target="#fig_6">Fig- ure 5(b)</ref>. Different from <ref type="figure" target="#fig_6">Figure 5</ref>(a), the victim servers will drop the query strings in the requested URL and redirect the third-party services to the URLs without query strings (step 4 and 5), the third-party services will recheck whether the redirected URL has a valid cache and fetch resources from the cache when there has a cache hit (step 6 and 7). By comparing <ref type="figure" target="#fig_6">Figure 5</ref>(b) and <ref type="figure" target="#fig_6">Figure 5</ref>(a), we see that the victim website experiences much less traffic volume under our proposed scheme, so do the third-party services.</p><p>We evaluate the redirection-based EDoS defense mechanism by turning on the redirection option on the victim's server and requesting a single resource 2000 times with different query strings using the thirdparty services. We find out that one service provider (Tagged <ref type="bibr">[20]</ref>) has already employed the proposed cooperation features (i.e., caching, follow redirection, recheck cache) thus the average amplification factor can be reduced from 15464.11 to 0.43. This indicates that the attackers will have no incentive to abuse the third parties' services for launching EDoS attacks under our proposed defense mechanism.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="6.2.2">Forward the HEAD request</head><p>In our experiment, we notice that even when an attacker requests only the header of the resource, fetching services (Google, Github) still will request the full content from the victim server which is unnecessary. HEAD requests should be forwarded to reduce the amplification factor.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="6.2.3">Service limit</head><p>Note that the attacker's goal is to drain the financial budget of the victim in a long-term process rather than DDoSing the victim for a short amount of time. Thus, rate/volume limit of those public fetching services becomes an effective approach to this type of EDoS attack.</p><p>In the experiment conducted in Section 5, we observe that Microsoft has already employed a rate limiting mechanism by periodically blocking the requests for 5 minutes. We further conduct an experiment to visually illustrate how Microsoft performs the rate limit, and the result is shown in <ref type="figure">Figure 6</ref>. From this figure, we can see that service rate limit can alleviate the hurt for small cloud consumers though it can not fully prevent EDoS attacks. Figure 6: Average out traffic of the victim server when it is being attacked by abusing Microsoft Outlook service alone with a 3-second request interval, each sample point is the average value within a 5-minute window.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="7">Related Work</head><p>In this section, we first introduce the studies that have been proposed to conduct EDoS attacks to cloud consumers. Then we review the EDoS defense mechanisms in the literature and their limitations in defending the attacks proposed in this paper. Finally, we discuss the latest protection mechanism offered by the cloud service providers.</p><p>On the EDoS attack strategies, Vlajic et al. <ref type="bibr" target="#b32">[39]</ref> proposed an attack mechanism by sending spam emails which contain web bugs. A web-bug is an invisible HTML reference to a large image hosted in the victim's website <ref type="bibr" target="#b28">[35]</ref>. Thus when the email receivers open the email, the web-bug code will be activated and result in automatically downloading the images. Therefore, it would raise high bandwidth consumption of the victims. However, as the advancement of the spam email detection techniques, this attack mechanism becomes less effective <ref type="bibr" target="#b30">[37]</ref>.</p><p>Different from DDoS attacks, the objective of the attackers in EDoS attack is not to make the system completely unavailable temporarily, but to drain the budget of the victims in a long term process. Thus, existing DDoS defense mechanisms <ref type="bibr" target="#b33">[40,</ref><ref type="bibr" target="#b24">31]</ref> are not effective in defending EDoS attacks.</p><p>On the EDoS defense mechanisms, Sqalli et al. <ref type="bibr" target="#b31">[38]</ref> propose a filtering-based approach which creates a virtual firewall to filter traffic based on whitelist and blacklist. The users are added to whitelist if they pass the CAPTCHA (Graphic Turing test) verification. Masood et al. <ref type="bibr" target="#b27">[34]</ref> design an EDoS mitigation technique based on admission and congestion control. It works by limiting the number of valid users to connect to the servers to avoid burdening. It verifies whether a user is a human or a bot by sending her a challenge to solve, and a user who solves the challenge correctly is classified as a valid user. Similar to <ref type="bibr" target="#b31">[38,</ref><ref type="bibr" target="#b27">34]</ref>, <ref type="bibr">Kumar et al. [32]</ref> develop a defense mechanism based on puzzle verification in which each client accessing the website will have to solve a given puzzle. A client will be granted access only if she can solve the puzzle.</p><p>Most of the EDoS defense mechanisms <ref type="bibr" target="#b31">[38,</ref><ref type="bibr" target="#b27">34,</ref><ref type="bibr" target="#b25">32</ref>] rely on requesting a client to solve a challenge/puzzle in order to differentiate valid users and bots. These defense strategies would disturb the legitimate clients and decrease their satisfaction. Besides, these mechanisms will not allow the accessing of the web resources through third-party agents, which however is a popular approach based on the web 2.0 architecture <ref type="bibr" target="#b22">[29]</ref>. For example, for a website about traveling, it might call the APIs of a website about hotel booking <ref type="bibr" target="#b22">[29]</ref> to recommend hotels, and it might receive requests from social website agents when people mention it on social websites. Therefore, a defense mechanism that can also distinguish legitimate third-party requests is highly desired.</p><p>In regard to the EDoS defense, most of the cloud service providers offer defense mechanisms by providing monitoring services for cloud resources <ref type="bibr" target="#b10">[12,</ref><ref type="bibr" target="#b1">2,</ref><ref type="bibr" target="#b14">17]</ref>. For example, Amazon provides a service called CloudWatch <ref type="bibr" target="#b1">[2]</ref> to enable the real-time monitoring of the resource usage such as CPU utilizations, request counts and network traffic volume. It also allows cloud users to set alarms on customized metrics such that when the value exceeds the pre-defined threshold, an alarm will be sent to the users. For example, for a cloud consumer who hosts a public website in the cloud, she can set the maximum budget for using the cloud resources. When the spending exceeds the budget, she will get an alarm. However, in that case, the user can only choose either to discontinue her services and thus results in denial of services to legitimate clients; or to pay more money. Therefore, CloudWatch cannot truely save the cloud consumers from EDoS attacks.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="8">Conclusion</head><p>The "pay-as-you-go" cloud utility model makes the cloud consumers vulnerable from Economic Denial of Sustainability (EDoS) attacks. In this paper, we propose a new EDoS attack mechanism based on abusing the free public third-party services. Through studying the characteristics of various pubic third-party services, we find out that the proposed attack strategy can achieve a bandwidth amplification factor of more than 134682. If the attacker is inside a cloud, then she will be able to achieve an economic amplification factor about 8157. The third-party services allow the attackers to conduct EDoS attacks at a negligible cost while keeping their identity anonymous. Our experiments demonstrate that even for a weak attacker who only has one laptop and a single IP address, she can siphon thousands of dollars per month from a cloud consumer with a small scale attack. As a complement, we propose several mitigation strategies and highlight that a cooperation between the cloud consumers and the third-party service providers is needed to effectively defend the proposed EDoS attacks.</p></div><figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_0"><head>Figure 1 :</head><label>1</label><figDesc>Figure 1: Examples of the front-end UIs which call the back-end URL fetching service APIs.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_2"><head>Figure 2 :</head><label>2</label><figDesc>Figure 2: A Cloud EDoS attack scenario. The green and red arrows correspond to the request and the response, respectively. The line weight indicates the traffic volume.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_3"><head>Figure 3 :</head><label>3</label><figDesc>Figure 3: An example of Pinterest's HTTP request that can be replayed by attackers. The source-url can be filled with the target victim's resource address.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_4"><head>Figure 4 :</head><label>4</label><figDesc>Figure 4: Average network out traffic of the victim server under requests from 10 third-party service providers with a 10-second request interval. Each sample point is the average value within a 5-minute window.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_5"><head></head><label></label><figDesc>Victim's sever drops all the query strings on the static resource and redirects the request to its actual URL. Fetching services cache based on the actual (redirected) URLs.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_6"><head>Figure 5 :</head><label>5</label><figDesc>Figure 5: Proposed EDoS defensive mechanism.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_7"><head>Network</head><label></label><figDesc>Out (MB/min)</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_0" validated="false"><head></head><label></label><figDesc>refer to server instances with 2 vCPUs and located in the US region.</figDesc><table>CSP 
Server 
Price 

Traffic Egress to 
Internet 
Amazon Cloud 
$0.12/hr 
$0.09/GB 
Google Cloud 
$0.10/hr 
$0.12/GB 
Microsoft Azure 
$0.12/hr 
$0.087/GB 

Table 1: The charging model of different cloud service 
providers. 

</table></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_2" validated="false"><head>Table 2 :</head><label>2</label><figDesc></figDesc><table>Public services from legitimate third parties 
with potential EDoS attack capability. 

</table></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_4" validated="false"><head>Table 3 :</head><label>3</label><figDesc></figDesc><table>Characteristics of the fetching services.  *  unique number of IPs used to serve 2000 requests.  *  *  file types based 
on extensions. 

</table></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_7" validated="false"><head>Table 5 :</head><label>5</label><figDesc>Account registration requirement and cost. Google is not included as its fetching services can be called without logging in.</figDesc><table></table></figure>
		</body>
		<back>

			<div type="acknowledgement">
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Acknowledgements</head><p>We appreciate constructive comments from anonymous referees.</p><p>This work is partially supported by an ARO grant W911NF-15-1-0262 and a NSF grant CNS-1524462.</p></div>
			</div>

			<div type="references">

				<listBibl>

<biblStruct xml:id="b0">
	<monogr>
		<title/>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Alexa</forename></persName>
		</author>
		<ptr target="http://www.alexa.com/" />
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b1">
	<monogr>
		<title/>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Amazon</forename><surname>Cloudwatch</surname></persName>
		</author>
		<ptr target="https://aws.amazon.com/cloudwatch/" />
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b2">
	<monogr>
		<title/>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Amazon</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Pricing</surname></persName>
		</author>
		<ptr target="https://aws.amazon.com/ec2/pricing/" />
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b3">
	<monogr>
		<title/>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Amazon Ec2 Virtual Server</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Hosting</surname></persName>
		</author>
		<ptr target="https://aws.amazon.com/ec2/" />
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b4">
	<monogr>
		<title level="m" type="main">Cloud Computing Security: From DDoS(Distributed Denial Of Service) to EDoS (Economic Denial of Sustainability)</title>
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b5">
	<monogr>
		<title/>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Facebook</surname></persName>
		</author>
		<ptr target="https://www.facebook.com/" />
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b6">
	<monogr>
		<title/>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Fotolog</surname></persName>
		</author>
		<ptr target="http://www.fotolog.com/" />
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b7">
	<monogr>
		<title/>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Github</surname></persName>
		</author>
		<ptr target="https://github.com" />
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b8">
	<monogr>
		<title/>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Google</surname></persName>
		</author>
		<ptr target="https://www.google.com/" />
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b9">
	<monogr>
		<title/>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Google App Engine</surname></persName>
		</author>
		<ptr target="https://cloud.google.com/appengine/docs" />
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b10">
	<monogr>
		<title/>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Google</forename><surname>Cloud Monitoring</surname></persName>
		</author>
		<ptr target="https://cloud.google.com/monitoring/" />
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b11">
	<monogr>
		<title/>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Linkedin</surname></persName>
		</author>
		<ptr target="https://www.linkedin.com/" />
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b12">
	<monogr>
		<title/>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Microsoft</surname></persName>
		</author>
		<ptr target="https://www.microsoft.com/" />
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b13">
	<monogr>
		<title/>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Microsoft</forename><surname>Azure</surname></persName>
		</author>
		<ptr target="https://azure.microsoft.com/en-us/" />
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b14">
	<monogr>
		<title level="m" type="main">Microsoft Azure Application Insights</title>
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b15">
	<monogr>
		<title/>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Microsoft Azure Pricing</surname></persName>
		</author>
		<ptr target="https://azure.microsoft.com/en-us/pricing/calculator/" />
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b16">
	<monogr>
		<title/>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Pinterest</surname></persName>
		</author>
		<ptr target="https://www.pinterest.com/" />
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b17">
	<monogr>
		<title/>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Tencent</surname></persName>
		</author>
		<ptr target="http://t.qq.com/" />
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b18">
	<monogr>
		<title/>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Tumblr</surname></persName>
		</author>
		<ptr target="https://www.tumblr.com/" />
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b19">
	<monogr>
		<title/>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Walmart</surname></persName>
		</author>
		<ptr target="http://www.walmart.com/" />
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b20">
	<monogr>
		<title/>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Zear</surname></persName>
		</author>
		<ptr target="https://zare.co.uk" />
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b21">
	<monogr>
				<ptr target="https://www.us-cert.gov/ncas/alerts/TA13-088A" />
		<title level="m">DNS Amplification Attacks</title>
		<imprint>
			<date type="published" when="2013" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b22">
	<analytic>
		<title level="a" type="main">Evaluation of the impact of edos attacks against cloud computing services</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Al-Haidari</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">F</forename><surname>Sqalli</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>And</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Salah</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">K</forename></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Arabian Journal for Science and Engineering</title>
		<imprint>
			<biblScope unit="volume">40</biblScope>
			<biblScope unit="page" from="773" to="785" />
			<date type="published" when="2014" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b23">
	<analytic>
		<title level="a" type="main">Exploiting cloud utility models for profit and ruin</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Idziorek</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>And</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Tannian</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 2011 IEEE International Conference on Cloud Computing (CLOUD)</title>
		<meeting>the 2011 IEEE International Conference on Cloud Computing (CLOUD)</meeting>
		<imprint>
			<date type="published" when="2011" />
			<biblScope unit="page" from="33" to="40" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b24">
	<analytic>
		<title level="a" type="main">Catch me if you can: A cloud-enabled DDoS defense</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Jia</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Q</forename><surname>Wang</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">H</forename><surname>Fleck</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Li</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">F</forename><surname>Stavrou</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>And</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Powell</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">W</forename></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 44th Annual IEEE/IFIP International Conference on Dependable Systems and Networks (DSN</title>
		<meeting>the 44th Annual IEEE/IFIP International Conference on Dependable Systems and Networks (DSN</meeting>
		<imprint>
			<date type="published" when="2014" />
			<biblScope unit="page" from="264" to="275" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b25">
	<analytic>
		<title level="a" type="main">Mitigating economic denial of sustainability (edos) in cloud computing using in-cloud scrubber service</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Kumar</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><forename type="middle">N</forename><surname>Sujatha</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><surname>Kalva</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">V</forename><surname>Nagori</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Katukojwala</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><forename type="middle">K</forename><surname>And</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Kumar</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 4th International Conference on Computational Intelligence and Communication Networks (CICN) (2012)</title>
		<meeting>the 4th International Conference on Computational Intelligence and Communication Networks (CICN) (2012)</meeting>
		<imprint>
			<biblScope unit="page" from="535" to="539" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b26">
	<analytic>
		<title level="a" type="main">Smurf-based distributed denial of service (ddos) attack amplification in internet</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Kumar</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 2nd International Conference on Internet Monitoring and Protection</title>
		<meeting>the 2nd International Conference on Internet Monitoring and Protection</meeting>
		<imprint>
			<date type="published" when="2007" />
			<biblScope unit="page" from="25" to="25" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b27">
	<analytic>
		<title level="a" type="main">Edos armor: A cost effective economic denial of sustainability attack mitigation framework for e-commerce applications in cloud environments</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Masood</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Anwar</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Z</forename><surname>Raza</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><forename type="middle">A</forename><surname>And</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Hur</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><forename type="middle">A</forename></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 16th International Multi Topic Conference (INMIC)</title>
		<meeting>the 16th International Multi Topic Conference (INMIC)</meeting>
		<imprint>
			<date type="published" when="2013" />
			<biblScope unit="page" from="37" to="42" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b28">
	<analytic>
		<title level="a" type="main">Third-party web tracking: Policy and technology</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Mayer</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><forename type="middle">R</forename><surname>And</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Mitchell</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><forename type="middle">C</forename></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 2012 IEEE Symposium on Security and Privacy</title>
		<meeting>the 2012 IEEE Symposium on Security and Privacy</meeting>
		<imprint>
			<date type="published" when="2012" />
			<biblScope unit="page" from="413" to="427" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b29">
	<analytic>
		<title level="a" type="main">Amplification hell: Revisiting network protocols for DDoS abuse</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Rossow</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 21st Annual Network and Distributed System Security Symposium (NDSS</title>
		<meeting>the 21st Annual Network and Distributed System Security Symposium (NDSS</meeting>
		<imprint>
			<date type="published" when="2014" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b30">
	<analytic>
		<title level="a" type="main">A hybrid spam detection method based on unstructured datasets</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Y</forename><surname>Shao</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Trovati</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Q</forename><surname>Shi</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">O</forename><surname>Angelopoulou</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">E</forename><surname>Asi-Makopoulou</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Bessis</forename><surname>And</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">N</forename></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Soft Computing</title>
		<imprint>
			<biblScope unit="page" from="1" to="11" />
			<date type="published" when="2015" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b31">
	<analytic>
		<title level="a" type="main">Edos-shield -a two-steps mitigation technique against edos attacks in cloud computing</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Sqalli</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><forename type="middle">H</forename><surname>Al-Haidari</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">F</forename><surname>And</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Salah</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">K</forename></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 4th IEEE International Conference on Utility and Cloud Computing (UCC)</title>
		<meeting>the 4th IEEE International Conference on Utility and Cloud Computing (UCC)</meeting>
		<imprint>
			<date type="published" when="2011" />
			<biblScope unit="page" from="49" to="56" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b32">
	<analytic>
		<title level="a" type="main">Web bugs in the cloud: Feasibility study of a new form of edos attack</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Vlajic</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">N</forename><surname>And</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Slopek</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 2014 IEEE Globecom Workshop</title>
		<meeting>the 2014 IEEE Globecom Workshop</meeting>
		<imprint>
			<date type="published" when="2014" />
			<biblScope unit="page" from="64" to="69" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b33">
	<analytic>
		<title level="a" type="main">A moving target DDoS defense mechanism</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Wang</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">H</forename><surname>Jia</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Q</forename><surname>Fleck</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Powell</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">W</forename><surname>Li</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">F</forename><surname>And</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Stavrou</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Communications</title>
		<imprint>
			<biblScope unit="volume">46</biblScope>
			<biblScope unit="page" from="10" to="21" />
			<date type="published" when="2014" />
		</imprint>
	</monogr>
</biblStruct>

				</listBibl>
			</div>
		</back>
	</text>
</TEI>
