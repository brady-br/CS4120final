<?xml version="1.0" encoding="UTF-8"?>
<TEI xmlns="http://www.tei-c.org/ns/1.0" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
xsi:schemaLocation="http://www.tei-c.org/ns/1.0 /Users/atharsefid/Desktop/grobid-0.5.3/grobid-home/schemas/xsd/Grobid.xsd"
 xmlns:xlink="http://www.w3.org/1999/xlink">
	<teiHeader xml:lang="en">
		<encodingDesc>
			<appInfo>
				<application version="0.5.3" ident="GROBID" when="2020-10-01T14:47+0000">
					<ref target="https://github.com/kermitt2/grobid">GROBID - A machine learning software for extracting information from scholarly documents</ref>
				</application>
			</appInfo>
		</encodingDesc>
		<fileDesc>
			<titleStmt>
				<title level="a" type="main">Fast Computation of Database Operations using Graphics Processors</title>
			</titleStmt>
			<publicationStmt>
				<publisher/>
				<availability status="unknown"><licence/></availability>
			</publicationStmt>
			<sourceDesc>
				<biblStruct>
					<analytic>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Naga</forename><forename type="middle">K</forename><surname>Govindaraju</surname></persName>
							<affiliation key="aff0">
								<orgName type="institution">University of North Carolina at Chapel Hill</orgName>
							</affiliation>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Brandon</forename><surname>Lloyd</surname></persName>
							<email>blloyd@cs.unc.edu</email>
							<affiliation key="aff0">
								<orgName type="institution">University of North Carolina at Chapel Hill</orgName>
							</affiliation>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Wei</forename><surname>Wang</surname></persName>
							<email>weiwang@cs.unc.edu</email>
							<affiliation key="aff0">
								<orgName type="institution">University of North Carolina at Chapel Hill</orgName>
							</affiliation>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Ming</forename><surname>Lin</surname></persName>
							<email>lin@cs.unc.edu</email>
							<affiliation key="aff0">
								<orgName type="institution">University of North Carolina at Chapel Hill</orgName>
							</affiliation>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Dinesh</forename><surname>Manocha</surname></persName>
							<affiliation key="aff0">
								<orgName type="institution">University of North Carolina at Chapel Hill</orgName>
							</affiliation>
						</author>
						<title level="a" type="main">Fast Computation of Database Operations using Graphics Processors</title>
					</analytic>
					<monogr>
						<imprint>
							<date/>
						</imprint>
					</monogr>
				</biblStruct>
			</sourceDesc>
		</fileDesc>
		<profileDesc>
			<textClass>
				<keywords>
					<term>graphics processor</term>
					<term>query optimization</term>
					<term>selec- tion query</term>
					<term>aggregation</term>
					<term>selectivity analysis</term>
					<term>semi-linear query</term>
				</keywords>
			</textClass>
			<abstract>
				<p>We present new algorithms for performing fast computation of several common database operations on commodity graphics processors. Specifically, we consider operations such as conjunctive selections, aggregations, and semi-linear queries, which are essential computational components of typical database, data warehousing, and data mining applications. While graphics processing units (GPUs) have been designed for fast display of geometric primitives, we utilize the inherent pipelining and parallelism, single instruction and multiple data (SIMD) capabilities, and vector processing functionality of GPUs, for evaluating boolean predicate combinations and semi-linear queries on attributes and executing database operations efficiently. Our algorithms take into account some of the limitations of the programming model of current GPUs and perform no data rearrangements. Our algorithms have been implemented on a pro-grammable GPU (e.g. NVIDIA&apos;s GeForce FX 5900) and applied to databases consisting of up to a million records. We have compared their performance with an optimized implementation of CPU-based algorithms. Our experiments indicate that the graphics processor available on commodity computer systems is an effective co-processor for performing database operations.</p>
			</abstract>
		</profileDesc>
	</teiHeader>
	<text xml:lang="en">
		<body>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="1.">INTRODUCTION</head><p>As database technology becomes pervasive, Database Management Systems (DBMSs) have been deployed in a wide variety of applications. The rapid growth of data volume for the past decades has intensified the need for high-speed database management systems. Most database queries and, more recently, data warehousing and data mining applications, are very data-and computation-intensive and therefore demand high processing power. Researchers have actively sought to design and develop architectures and algo-rithms for faster query execution. Special attention has been given to increase the performance of selection, aggregation, and join operations on large databases. These operations are widely used as fundamental primitives for building complex database queries and for supporting on-line analytic processing (OLAP) and data mining procedures. The efficiency of these operations has a significant impact on the performance of a database system.</p><p>As the current trend of database architecture moves from disk-based system towards main-memory databases, applications have become increasingly computation-and memorybound. Recent work <ref type="bibr" target="#b2">[3,</ref><ref type="bibr" target="#b19">21]</ref> investigating the processor and memory behaviors of current DBMSs has demonstrated a significant increase in the query execution time due to memory stalls (on account of data and instruction misses), branch mispredictions, and resource stalls (due to instruction dependencies and hardware specific characteristics). Increased attention has been given on redesigning traditional database algorithms for fully utilizing the available architectural features and for exploiting parallel execution possibilities, minimizing memory and resource stalls, and reducing branch mispredictions <ref type="bibr" target="#b1">[2,</ref><ref type="bibr" target="#b4">5,</ref><ref type="bibr" target="#b18">20,</ref><ref type="bibr" target="#b22">24,</ref><ref type="bibr" target="#b28">31,</ref><ref type="bibr" target="#b29">32,</ref><ref type="bibr" target="#b31">34,</ref><ref type="bibr" target="#b34">37</ref>].</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="1.1">Graphics Processing Units</head><p>In this paper, we exploit the computational power of graphics processing units (GPUs) for database operations. In the last decade, high-performance 3D graphics hardware has become as ubiquitous as floating-point hardware. Graphics processors are now a part of almost every personal computer, game console, or workstation. In fact, the two major computational components of a desktop computer system are its main central processing unit (CPU) and its (GPU). While CPUs are used for general purpose computation, GPUs have been primarily designed for transforming, rendering, and texturing geometric primitives, such as triangles. The driving application of GPUs has been fast rendering for visual simulation, virtual reality, and computer gaming.</p><p>GPUs are increasingly being used as co-processors to CPUs. GPUs are extremely fast and are capable of processing tens of millions of geometric primitives per second. The peak performance of GPUs has been increasing at the rate of 2.5 âˆ’ 3.0 times a year, much faster than the Moore's law for CPUs. At this rate, the GPU's peak performance may move into the teraflop range by 2006 <ref type="bibr" target="#b17">[19]</ref>. Most of this performance arises from multiple processing units and stream processing. The GPU treats the vertices and pixels constituting graphics primitives as streams. Multiple vertex and pixel processing engines on a GPU are connected via data flows. These processing engines perform simple operations in parallel.</p><p>Recently, GPUs have become programmable, allowing a user to write fragment programs that are executed on pixel processing engines. The pixel processing engines have direct access to the texture memory and can perform vector operations with floating point arithmetic. These capabilities have been successfully exploited for many geometric and scientific applications. As graphics hardware becomes increasingly programmable and powerful, the roles of CPUs and GPUs in computing are being redefined.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="1.2">Main Contributions</head><p>In this paper, we present novel algorithms for fast computation of database operations on GPUs. The operations include predicates, boolean combinations, and aggregations. We utilize the SIMD capabilities of pixel processing engines within a GPU to perform these operations efficiently. We have used these algorithms for selection queries on one or more attributes and generic aggregation queries including selectivity analysis on large databases.</p><p>Our algorithms take into account some of the limitations of the current programming model of GPUs which make it difficult to perform data rearrangement. We present novel algorithms for performing multi-attribute comparisons, semilinear queries, range queries, computing the kth largest number, and other aggregates. These algorithms have been implemented using fragment programs and have been applied to large databases composed of up to a million records. The performance of these algorithms depends on the instruction sets available for fragment programs, the number of fragment processors, and the underlying clock rate of the GPU. We also perform a preliminary comparison between GPUbased algorithms running on a NVIDIA GeForceFX 5900 Ultra graphics processor and optimized CPU-based algorithms running on dual 2.8 GHz Intel Xeon processors.</p><p>We show that algorithms for semi-linear and selection queries map very well to GPUs and we are able to obtain significant performance improvement over CPU-based implementations. The algorithms for aggregates obtain a modest gain of 2 âˆ’ 4 times speedup over CPU-based implementations. Overall, the GPU can be used as an effective co-processor for many database operations.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="1.3">Organization</head><p>The rest of the paper is organized as follows. We briefly survey related work on database operations and use of GPUs for geometric and scientific computing in Section 2. We give an overview of the graphics architectural pipeline in Section 3. We present algorithms for database operations including predicates, boolean combinations, and aggregations in Section 4. We describe their implementation in Section 5 and compare their performance with optimized CPU-based implementations. We analyze the performance in Section 6 and outline the cases where GPU-based algorithms can offer considerable gain over CPU-based algorithms.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.">RELATED WORK</head><p>In this section, we highlight the related research in mainmemory database operations and general purpose computation using GPUs.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.1">Hardware Accelerated Database Operations</head><p>Many acceleration techniques have been proposed for database operations. Ailamaki et al. <ref type="bibr" target="#b2">[3]</ref> analyzed the execution time of commercial DBMSs and observed that almost half of the time is spent in stalls. This indicates that the performance of a DBMS can be significantly improved by reducing stalls.</p><p>Meki and Kambayashi used a vector processor for accelerating the execution of relational database operations including selection, projection, and join <ref type="bibr" target="#b22">[24]</ref>. To utilize the efficiency of pipelining and parallelism that a vector processor provides, the implementation of each operation was redesigned for increasing the vectorization rate and the vector length. The limitation of using a vector processor is that the load-store instruction can have high latency <ref type="bibr" target="#b34">[37]</ref>.</p><p>Modern CPUs have SIMD instructions that allow a single basic operation to be performed on multiple data elements in parallel. Zhu and Ross described SIMD implementation of many important database operations including sequential scans, aggregation, indexed searches, and joins <ref type="bibr" target="#b34">[37]</ref>. Considerable performance gains were achieved by exploiting the inherent parallelism of SIMD instructions and reducing branch mispredictions.</p><p>Recently, Sun et al. present the use of graphics processors for spatial selections and joins <ref type="bibr" target="#b32">[35]</ref>. They use color blending capabilities available on graphics processors to test if two polygons intersect in screen-space. Their experiments on graphics processors indicate a speedup of nearly 5 times on intersection joins and within-distance joins when compared against their software implementation. The technique focuses on pruning intersections between triangles based on their 2D overlap and is quite conservative.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.2">General-Purpose Computing Using GPUs</head><p>In theory, GPUs are capable of performing any computation that can be mapped to the stream-computing model. This model has been exploited for ray-tracing <ref type="bibr" target="#b26">[29]</ref>, global illumination <ref type="bibr" target="#b27">[30]</ref> and geometric computations <ref type="bibr" target="#b20">[22]</ref>.</p><p>The programming model of GPUs is somewhat limited, mainly due to the lack of random access writes. This limitation makes it more difficult to implement many data structures and common algorithms such as sorting. <ref type="bibr">Purcell et al. [30]</ref> present an implementation of bitonic merge sort, where the output routing from one step to another is known in advance. The algorithm is implemented as a fragment program and each stage of the sorting algorithm is performed as one rendering pass. However, the algorithm can be quite slow for database operations on large databases.</p><p>GPUs have been used for performing many discretized geometric computations <ref type="bibr" target="#b20">[22]</ref>. These include using stencil buffer hardware for interference computations <ref type="bibr" target="#b30">[33]</ref>, using depth-buffer hardware to perform distance field and proximity computations <ref type="bibr" target="#b13">[15]</ref>, and visibility queries for interactive walkthroughs and shadow generation <ref type="bibr" target="#b10">[12]</ref>.</p><p>High throughput and direct access to texture memory makes fragment processors powerful computation engines for certain numerical algorithms, including dense matrix-matrix multiplication <ref type="bibr" target="#b16">[18]</ref>, general purpose vector processing <ref type="bibr" target="#b33">[36]</ref>, visual simulation based on coupled-map lattices <ref type="bibr" target="#b11">[13]</ref>, linear algebra operations <ref type="bibr" target="#b15">[17]</ref>, sparse matrix solvers for conjugate gradient and multigrid <ref type="bibr" target="#b3">[4]</ref>, a multigrid solver for boundary value problems <ref type="bibr" target="#b9">[11]</ref>, geometric computations <ref type="bibr" target="#b0">[1,</ref><ref type="bibr" target="#b14">16]</ref>, etc.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.">OVERVIEW</head><p>In this section, we introduce the basic functionality available on GPUs and give an overview of the architectural pipeline. More details are given in <ref type="bibr" target="#b7">[9]</ref>.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.1">Graphics Pipeline</head><p>A GPU is designed to rapidly transform the geometric description of a scene into the pixels on the screen that constitute a final image. Pixels are stored on the graphics card in a frame-buffer. The frame buffer is conceptually divided into three buffers according to the different values stored at each pixel:</p><p>â€¢ Color Buffer: Stores the color components of each pixel in the frame-buffer. Color is typically divided into red, green, and blue channels with an alpha channel that is used for blending effects.</p><p>â€¢ Depth Buffer: Stores a depth value associated with each pixel. The depth is used to determine surface visibility.</p><p>â€¢ Stencil Buffer: Stores a stencil value for each pixel. It is called the stencil buffer because it is typically used for enabling/disabling writes to portions of the frame-buffer. The transformation of geometric primitives (points, lines, triangles, etc.) to pixels is performed by the graphics pipeline, consisting of several functional units, each optimized for performing a specific operation. <ref type="figure" target="#fig_0">Fig 1 shows</ref> the various stages involved in rendering a primitive.</p><p>â€¢ Vertex Processing Engine: This unit receives vertices as input and transforms them to points on the screen.</p><p>â€¢ Setup Engine: Transformed vertex data is streamed to the setup engine which generates slope and initial value information for color, depth, and other parameters associated with the primitive vertices. This information is used during rasterization for constructing fragments at each pixel location covered by the primitive.</p><p>â€¢ Pixel Processing Engines: Before the fragments are written as pixels to the frame buffer, they pass through the pixel processing engines or fragment processors. A series of tests can be used for discarding a fragment before it is written to the frame buffer. Each test performs a comparison using a user-specified relational operator and discards the fragment if the test fails.</p><p>-Alpha test: Compares a fragment's alpha value to a user-specified reference value.</p><p>-Stencil test: Compares the stencil value of a fragment's corresponding pixel with a user-specified reference value.</p><p>-Depth test: Compares the depth value of a fragment to the depth value of the corresponding pixel in the frame buffer.</p><p>The relational operator can be any of the following : =, &lt;, &gt;, â‰¤, â‰¥, and ñ®½™ =. In addition, there are two operators, never and always, that do not require a reference value. Current generations of GPUs have a pixel processing engine that is programmable. The user can supply a custom fragment program to be executed on each fragment. For example, a fragment program can compute the alpha value of a fragment as a complex function of the fragment's other color components or its depth.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.2">Visibility and Occlusion Queries</head><p>Current GPUs can perform visibility and occlusion queries <ref type="bibr" target="#b24">[27]</ref>. When a primitive is rasterized, it is converted to fragments. Some of these fragments may or may not be written to pixels in the frame buffer depending on whether they pass the alpha, stencil and depth tests. An occlusion query returns the pixel pass count, the number of fragments that pass the different tests. We use these queries for performing aggregation computations (see Section 4).</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.3">Data Representation on the GPUs</head><p>Our goal is to utilize the inherent parallelism and vector processing capabilities of the GPUs for database operations.</p><p>A key aspect is the underlying data representation.</p><p>Data is stored on the GPU as textures. Textures are 2D arrays of values. They are usually used for applying images to rendered surfaces. They may contain multiple channels. For example, an RGBA texture has four color channelsred, blue, green and alpha. A number of different data formats can be used for textures including 8-bit bytes, 16-bit integers, and floating point. We store data in textures in the floating-point format. This format can precisely represent integers up to 24 bits.</p><p>To perform computations on the values stored in a texture, we render a single quadrilateral that covers the window. The texture is applied to the quadrilateral such that the individual elements of the texture, texels, line up with the pixels in the frame-buffer. Rendering the textured quadrilateral causes a fragment to be generated for every data value in the texture. Fragment programs are used for performing computations using the data value from the texture. Then the alpha, stencil, and depth tests can be used to perform comparisons.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.4">Stencil Tests</head><p>Graphics processors use stencil tests for restricting computations to a portion of the frame-buffer based on the value in the stencil buffer. Abstractly, we can consider the stencil buffer as a mask on the screen. Each fragment that enters the pixel processing engine corresponds to a pixel in the frame-buffer. The stencil test compares the stencil value of a fragment's corresponding pixel against a reference value. Fragments that fail the comparison operation are rejected from the rasterization pipeline.</p><p>Stencil operations can modify the stencil value of a fragment's corresponding pixel. Examples of such stencil operations include</p><p>â€¢ KEEP: Keep the stencil value in stencil buffer. We use this operation if we do not want to modify the stencil value.</p><p>â€¢ INCR: Increment the stencil value by one.</p><p>â€¢ DECR: Decrement the stencil value by one.</p><p>â€¢ ZERO: Set the stencil value to zero.</p><p>â€¢ REPLACE: Set the stencil value to the reference value.</p><p>â€¢ INVERT: Bitwise invert the stencil value.</p><p>For each fragment there are three possible outcomes based on the stencil and depth tests. Based on the outcome of the tests, the corresponding stencil operation is performed:</p><p>â€¢ Op1: when a fragment fails the stencil test,</p><p>â€¢ Op2: when a fragment passes the stencil test and fails the depth test,</p><p>â€¢ Op3: when the fragment passes the stencil and depth tests.</p><p>We illustrate these operations with the following pseudocode for the StencilOp routine: </p><formula xml:id="formula_0">StencilOp( Op1, Op2, Op3) if (stencil test passed) /*</formula></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.">BASIC DATABASE OPERATIONS USING GPUS</head><p>In this section, we give a brief overview of basic database operations that are performed efficiently on a GPU. Given a relational table T of m attributes (a1, a2, ..., am), a basic SQL query is in the form of</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>SELECT A FROM T WHERE C</head><p>where A may be a list of attributes or aggregations (SUM, COUNT, AVG, MIN, MAX) defined on individual attributes, and C is a boolean combination (using AND, OR, EXIST, NOT EXIST) of predicates that have the form ai op aj or ai op constant. The operator op may be any of the following: =, ñ®½™ =, &gt;, â‰¥, &lt;, â‰¤. In essence, queries specified in this form involve three categories of basic operations: predicates, boolean combinations, and aggregations. Our goal is to design efficient algorithms for performing these operations using graphics processors.</p><p>â€¢ Predicates: Predicates in the form of ai op constant can be evaluated via the depth test and stencil test. The comparison between two attributes, ai op aj, can be transformed into a semi-linear query ai âˆ’ aj op 0, which can be executed on the GPUs.</p><p>â€¢ Boolean combinations: A boolean combination of predicates can always be rewritten in a conjunctive normal form (CNF). The stencil test can be used repeatedly for evaluating a series of logical operators with the intermediate results stored in the stencil buffer.</p><p>â€¢ Aggregations: This category includes simple operations such as COUNT, SUM, AVG, MIN, MAX, all of which can be implemented using the counting capability of the occlusion queries on GPUs.</p><p>To perform these operations on a relational table using GPUs, we store the attributes of each record in multiple channels of a single texel, or the same texel location in multiple textures.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.1">Predicate Evaluation</head><p>In this section, we present novel GPU-based algorithms for performing comparisons as well as the semi-linear queries.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.1.1">Comparison between an Attribute and a Constant</head><p>We can implement a comparison between an attribute "tex" and a constant "d" by using the depth test functionality of graphics hardware. The stencil buffer can be configured to store the result of the depth test. This is important not only for evaluating a single comparison but also for constructing more complex boolean combinations of multiple predicates.</p><p>To use the depth test for performing comparisons, attribute values need to be stored in the depth buffer. We use a simple fragment program for copying the attribute values from the texture memory to the depth buffer.</p><p>A comparison operation against a depth value d is implemented by rendering a screen filling quadrilateral with depth d. In this operation, the rasterization hardware uses the comparison function for testing each attribute value stored in the depth buffer against d. The comparison function is specified using the depth function. Routine 4.1 describes the pseudo-code for our implementation.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.1.2">Comparison between Two Attributes</head><p>The comparison between two attributes, ai op aj, can be transformed into a special semi-linear query (ai âˆ’ aj op 0), which can be performed very efficiently using the vector processors on the GPUs. Here, we propose a fast algorithm that can perform any general semi-linear query on GPUs. </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Semi-linear Queries on GPUs</head><p>Applications encountered in Geographical Information Systems (GIS), geometric modeling, and spatial databases define geometric data objects as linear inequalities of the attributes in a relational database <ref type="bibr" target="#b25">[28]</ref>. Such geometric data objects are called semi-linear sets. GPUs are capable of fast computation on semi-linear sets. A linear combination of m attributes is represented as:</p><formula xml:id="formula_1">i=m ñ®½™ i=1 si Â· ai</formula><p>where each si is a scalar multiplier and each ai is an attribute of a record in the database. The above expression can be considered as a dot product of two vectors s and a where s = (s1, s2, ..., sm) and a = (a1, a2, ..., am). Semilinear computes the semi-linear query:</p><formula xml:id="formula_2">(s Â· a) op b</formula><p>where op is a comparison operator and b is a scalar constant. The attributes ai are stored in separate channels in the texture tex. There is a limit of four channels per texture. Longer vectors can be split into multiple textures, each with four components. The fragment program SemilinearFP() performs the dot product of a texel from tex with s and compares the result to b. It discards the fragment if the comparison fails. Line 2 renders a textured quadrilateral using the fragment program. Semilinear maps very well to the parallel pixel processing as well as vector processing capabilities available on the GPUs. This algorithm can also be extended for evaluating polynomial queries. </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.2">Boolean Combination</head><p>Complex boolean combinations are often formed by combining simple predicates with the logical operators AND, OR, NOT. In these cases, the stencil operation is specified to store the result of a predicate. We use the function StencilOp (as defined in Section 3.4) to initialize the appropriate stencil operation for storing the result in stencil buffer.</p><p>Our algorithm evaluates a boolean expression represented as a CNF expression. We assume that the CNF expression has no NOT operators. If a simple predicate in this expression has a NOT operator, we can invert the comparison operation and eliminate the NOT operator. A CNF expression C k is represented as A1 âˆ§ A2 âˆ§ ... âˆ§ A k where each Ai is represented as</p><formula xml:id="formula_3">B i 1 âˆ¨ B i 2 âˆ¨ ... âˆ¨ B i m i . Each B i j , j = 1, 2, .., mi is a simple predicate.</formula><p>The CNF C k can be evaluated using the recursion C k = C kâˆ’1 âˆ§ A k . C0 is considered as T RU E. We use the pseudocode in routine 4.3 for evaluating C k . Our approach uses three stencil values 0, 1, 2 for validating data. Data values corresponding to the stencil value 0 are always invalid. Initially, the stencil values are initialized to 1. If i is the iteration value for the loop in line 2, lines 3 âˆ’ 19 evaluate Ci. The valid stencil value is 1 or 2 depending on whether i is even or odd respectively. At the end of line 19, portions on the screen with non-zero stencil value satisfy the CNF C k . We can easily modify our algorithm for handling a boolean expression represented as a DNF.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Range Queries</head><p>A range query is a common database query expressed as a boolean combination of two simple predicates. If <ref type="bibr">[low, high]</ref> is the range for which an attribute x is queried, we can evaluate the expression (x â‰¥ low) AN D (x â‰¤ high) using Eval-CNF. Recent GPUs provide a feature GL EXT Depth bounds test <ref type="bibr">[8]</ref> <ref type="bibr">[low, high]</ref>. The attribute values copied into the depth buffer and falling within the depth bounds pass the depth bounds test. Lines 4 âˆ’ 6 perform the depth bounds test. The stencil is set to 1 for the attributes passing the range query and 0 for the other.</p><note type="other">, useful in accelerating shadow algorithms. Our algorithm uses this feature for evaluating a range query efficiently. The pseudo-code for our algorithm Range is given in Routine 4.4. Although a range query requires the evaluation of two simple predicates, the computational time for our algorithm in evaluating Range is comparable to the time required in evaluating a single predicate. Range( tex, low, high ) 1 SetupStencil() 2 CopyToDepth( tex ) 3 Set depth bounds based on [low, high] 4 Enable depth bounds test 5 RenderQuad(low) 6 Disable depth bounds test ROUTINE 4.4: SetupStencil is called on line 1 to enable selection using the stencil buffer. CopyToDepth called on line 2 copies the attribute values in tex into the depth buffer. Line 3 sets the depth bounds based on</note></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.3">Aggregations</head><p>Several database operations aggregate attribute values that satisfy a condition. On GPUs, we can perform these operations using occlusion queries to return the count of records satisfying some condition.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.3.1">COUNT</head><p>Using an occlusion query for counting the number of records satisfying some condition involves three steps:</p><p>1. Initialize the occlusion query 2. Perform the boolean query 3. Read back the result of the occlusion query into COUNT</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.3.2">MIN and MAX</head><p>The query to find the minimum or maximum value of an attribute is a special case of the kth largest number. Here, we present an algorithm to generate the kth largest number.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>k-th Largest Number</head><p>Computing the k-th largest number occurs frequently in several applications. We can utilize expected linear time selection algorithms such as QuickSelect <ref type="bibr" target="#b12">[14]</ref> to compute the k-th largest number. Most of these algorithms require data rearrangement, which is extremely expensive on current GPUs because there is no functionality for data writes to arbitrary locations. Also, these algorithms require evaluation of conditionals and may lead to branch mispredictions on the CPU. We present a GPU-based algorithm that does not require data rearrangement. In addition, our algorithm exhibits SIMD characteristics that exploit the inherent parallelism available on the GPUs.</p><p>Our algorithm utilizes the binary data representation for computing the k-th largest value in time that is linear in the number of bits. The pseudocode for our algorithm KthLargest is shown in routine 4.5. KthLargest constructs in x the value of the k-th largest number one bit at a time starting with the most significant bit (MSB), b max-1. As an invariant, the value of x is maintained less than or equal to the k-th largest value. Line 4 counts the number of values that are greater than or equal to x + 2 i , the tentative value of x with the ith bit set. This count is used for deciding whether to set the bit in x according to the following lemma: Lemma 1: Let v k be the k-th largest number in a set of values. Let count be the number of values greater than or equal to a given value m.</p><formula xml:id="formula_4">â€¢ if count &gt; k âˆ’ 1 : m â‰¤ v k â€¢ if count â‰¤ (k âˆ’ 1) : m &gt; v k Proof: Trivial.</formula><p>If count &gt; k âˆ’ 1 then the tentative value of x is smaller than the k-th largest number. In this case, we set x to the tentative value on line 6. Otherwise the tentative value is too large so we leave x unchanged. At the end of line 6, if the loop iteration is i, the first i bits from MSB of x and v k are the same. After the last iteration of the loop, x has the value of the k-th largest number. The algorithm for the k-th smallest number is the same, except that the comparison in line 5 is inverted.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.3.3">SUM and AVG</head><p>An accumulator is used to sum a set of data values. One way of implementing an accumulator on current GPUs is using a mipmap of a floating point texture. Mipmaps are multi-resolution textures consisting of multiple levels. The highest level of the mipmap contains the average of all the values in the lowest level, from which it is possible to recover the sum by multiplying the average with the number of values. A fragment program must be used to create a floating-point mipmap. Computing a floating-point mipmap on current GPUs tends to be problematic for three reasons. Firstly, reading and writing floating-point textures can be slow. Secondly, if we are interested in the sum of only a subset of values, e.g. those that are greater than a given number, then introduce conditionals in the fragment program. Finally, the floating point representation may not have enough precision to give an exact sum.</p><p>Our accumulator algorithm avoids some of the problems of the mipmap method. We perform only texture reads which are more efficient than texture writes. Moreover, we calculate the precise sum to arbitrary precision and avoid conditionals in the fragment program. One limitation of the algorithm is that it works only on integer datasets, although it can easily be extended to handle fixed-point datasets. Accumulator sums the values stored in the texture tex utilizing the binary data representation. The sum of the values xj in a set X can be written as:</p><formula xml:id="formula_5">|X| ñ®½™ j=0 xj = |X| ñ®½™ j=0 k ñ®½™ i=0 aij2 i</formula><p>where aij âˆˆ {0, 1} are the binary digits of xj and k is the maximum number of bits used to represent the values in X. Currently, no efficient algorithms are known for summing the texels on current GPUs. We can, however, quickly determine the number of texels for which a particular bit i is set. If we reverse the order of the summations, we get an expression that is more amenable to GPU computation:</p><formula xml:id="formula_6">k ñ®½™ i=0 2 i ï£« ï£­ |X| ñ®½™ j=0 aij ï£¶ ï£¸</formula><p>The inner summation is simply the number of xj that have the ith bit set. This summation is the value of count calculated on lines 4-6 where we render a quad textured with tex.</p><p>The fragment program TestBit ensures that only fragments corresponding to texels with the ith bit set pass the alpha test. Determining whether a particular bit is set is trivial with bit-masking operations. Since current GPUs do not support bit-masking operations in fragment programs, we use an alternate approach. We observe that an integer x has its ith bit equal to 1 if and only if the fractional part of x/2 i+1 is at least 0.5. In TestBit, we divide each value by 2 i+1 and put the fractional part of the result into the alpha channel. We use the alpha test for rejecting fragments with alpha less than 0.5. It is possible to perform the comparison and reject fragments directly in the fragment program, but it is faster in practice to use the alpha test. Pseudocode for our algorithm is shown in the routine 4.6.</p><p>Accumulator can be used for summing only a subset of the records in tex that have been selected using the stencil buffer. Attributes that are not selected fail the stencil test and thus make no contribution to the final sum. We use the Accumulator algorithm to obtain SUM. AVG is obtained by computing SUM and COUNT, and computed as AVG = SUM/COUNT.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5.">IMPLEMENTATION &amp; PERFORMANCE</head><p>We have implemented and tested our algorithms on a high end Dell Precision Workstation with dual 2.8GHz Intel Xeon Processors and an NVIDIA GeForceFX 5900 Ultra graphics processor. The graphics processor has 256MB of video memory with a memory data rate of 950MHz and can process upto 8 pixels at processor clock rate of 450 MHz. This GPU can perform single-precision floating point operations in fragment programs.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5.1">Benchmarks</head><p>For our benchmarks, we have used a database consisting of TCP/IP data for monitoring traffic patterns in local area network and wide area network and a census database <ref type="bibr" target="#b5">[6]</ref> consisting of monthly income information. In the TCP/IP database, there are one million records in the database. In our experiments, each record has 4 attributes, (data count, data loss, f low rate, retransmissions).</p><p>Each attribute in the database is stored in as a floatingpoint number encoded in a 32 bit RGBA texture. The video memory available on the NVIDIA GeForce FX 5900 graphics processor can store more than 50 attributes, each in a texture of size 1000 Ã— 1000, amounting to a total of 50 million values in the database. We transfer textures from the CPU to the graphics processor using an AGP 8X interface.</p><p>The census database consists of 360K records. We used four attributes for each record of this database. We have benchmarked our algorithms using the TCP/IP database. Our performance results on the census data are consistent with the results obtained on the TCP/IP database.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5.2">Optimized CPU Implementation</head><p>We implemented the algorithms described in section 4 and compared them with an optimized CPU implementation. We compiled the CPU implementation using Intel compiler 7.1 with full compiler optimizations 1 . These optimizations include</p><p>â€¢ Vectorization: The compiler detects sequential data scans and generates code for SIMD execution.</p><p>â€¢ Multi-threading: We used the compiler switch -QParallel to detect loops which may benefit from multithreaded execution and generate appropriate threading calls. This option enables the CPU implementation to utilize hyper-threading technology available on Xeon processors.</p><p>â€¢ Inter-Procedural Optimization (IPO): The compiler performs function inlining when IPO is enabled. It reduces the function call branches, thus improving its efficiency.</p><p>For the timings, we ran each of our tests 100 times and computed the average running time for the test.    </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5.3">GPU Implementation</head><p>Our algorithms described in Section 4 are implemented using the OpenGL API. For generating the fragment programs, we used NVIDIA's CG compiler <ref type="bibr" target="#b21">[23]</ref>. As the code generated by the compiler is often sub-optimal, we examined the assembly code generated by the current compiler and reduced the number of assembly instructions to perform the same operation.</p><p>For the counting operations, we chose to use GL NV occlusion query for image-space occlusion queries. These queries can be performed asynchronously and often do not add any additional overhead.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5.4">Copy Operation</head><p>Various database operations, such as comparisons, selection, etc, require the data values of an attribute stored in the depth buffer. For these operations, we copy the corresponding texture into the depth buffer. A fragment program is used to perform the copy operation. Our copy fragment program implementation requires three instructions. 1. Texture Fetch: We fetch the texture value corresponding to a fragment. 2. Normalization: We normalize the texture value to the range of valid depth values <ref type="bibr">[0,</ref><ref type="bibr" target="#b0">1]</ref>. 3. Copy To Depth: The normalized value is copied into the fragment depth. <ref type="figure" target="#fig_8">Figure 2</ref> shows the time taken to copy values from textures of varying sizes into the depth buffer. The figure indicates an almost linear increase in the time taken to perform the copy operation as a function of the number of records. In the future, it may be possible to copy data values from textures directly to a depth buffer and that would reduce these timings considerably. Also, the increase in clock rates of graphics processors and improved optimizations to perform depth buffer writes <ref type="bibr" target="#b23">[26]</ref> could help in reducing these timings. <ref type="figure" target="#fig_5">Figure 3</ref> shows a plot of the time taken to compute a single predicate for an attribute such that the selectivity is 60%.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5.5">Predicate Evaluation</head><p>In our experiments, we performed the operation on the first attribute of each record in the database. The plot compares a compiler-generated SIMD optimized CPU code against a simple GPU implementation. The GPU timings include the computational time for evaluating the predicate, as well as the time taken to copy the attribute into the depth buffer. We observe that the GPU timings are nearly 3 times faster than the CPU timings. If we compare only the computational time on the GPU, we observe that the GPU implementation is nearly 20 times faster than the SIMD optimized CPU implementation.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5.6">Range Query</head><p>We tested the performance of Range by timing a range query with 60% selectivity. To ensure 60% selectivity, we set the valid range of values between the 20th percentile and 80th percentile of the data values. Again, in our tests, we used the data count as our attribute. <ref type="figure" target="#fig_6">Figure 4</ref> compares the time taken for a simple GPU implementation and a compiler-optimized SIMD implementation on CPU. In the GPU timings, we included the time taken for the copy operation. We observe that overall the GPU is nearly 5.5 times faster than the CPU implementation. If we consider only the computational time on GPU and CPU, we observe that the GPU is nearly 40 times faster than the compiler optimized CPU implementation.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5.7">Multi-Attribute Query</head><p>We have tested the performance of our hardware-based multi-attribute queries by varying the number of attributes and also the number of records in the database. We used queries with a selectivity of 60% for each attribute and applied the AND operator on the result for each attribute. In    our tests, we used up to four attributes per query. For each attribute in the query, the GPU implementation copies the data values from the attribute's texture to the frame-buffer. <ref type="figure" target="#fig_7">Figure 5</ref> shows the time taken by the GPU and CPU respectively, to perform multi-attribute queries with the varying number of attributes and records. The timings indicate that the GPU implementation is nearly 2 times faster than the CPU implementation. If we consider only the computational times on the GPU by ignoring copy times, we observe that the GPU is nearly 20 times faster than the optimized CPU implementation.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5.8">Semi-linear Query</head><p>We performed a semi-linear query on the four attributes by using a linear combination of four random floating-point values and compared it against an arbitrary value. <ref type="figure" target="#fig_12">Figure 6</ref> summarize our timings for various number of tests on GPU and CPU. In our tests, we observe that the GPU timings are 9 times faster than an optimized CPU implementation.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5.9">K-th Largest Number</head><p>We performed three different tests to evaluate our KthLargest algorithm on GPU. In each of these tests, we compared KthLargest against a CPU implementation of the algorithm QuickSelect <ref type="bibr" target="#b12">[14]</ref>. In our experiments, we used the data count attribute. This attribute requires 19 bits to represent the largest data value and has a high variance. Test 1: Vary k and compute the time taken for KthLargest and QuickSelect. The tests were performed on 250K records in the database. <ref type="figure" target="#fig_9">Figure 7</ref> shows the timings obtained using each of the implementations. This plot indicates that time taken by KthLargest is constant irrespective of the value of k and is an interesting characteristic of our algorithm. On an average, the GPU timings for our algorithm are nearly twice as fast in comparison to the CPU implementation. It should be noted that the GPU timings include the time taken to copy values into the depth buffer. Comparing the computational times, we note that the average KthLargest timings are 3 times faster than QuickSelect. Test 2: In these tests, we compared the time taken by KthLargest and QuickSelect to compute a median of a varying number of records. <ref type="figure" target="#fig_10">Figure 8</ref> illustrates the results of our experiments. We observe that the KthLargest on the GPU is nearly twice as fast as QuickSelect on the CPU. Considering only the computational times, we observe that KthLargest is nearly 2.5 times faster than QuickSelect. Test 3: We also compared the time taken by KthLargest and QuickSelect for computing a median with on data values with 80% selectivity. <ref type="figure" target="#fig_11">Figure 9</ref> indicates the time taken by KthLargest and QuickSelect in computing the median as a function of the number of records. Our timings indicate that KthLargest with 80% selectivity requires exactly the same amount of time as performing KthLargest with 100% selectivity. We conclude from this observation that the use of a conditional to test for valid data has almost no effect on the running time of KthLargest. For the CPU timings, we have copied the valid data into an array and passed it as a parameter to QuickSelect. The timings indicate that the total running time is nearly the same as that of running QuickSelect with 100% selectivity. <ref type="figure" target="#fig_0">Figure 10</ref> demonstrates the performance of Accumulator on the GPU and a compiler-optimized SIMD implementation of accumulator on the CPU. Our experiments indicate that our GPU algorithm is nearly 20 times slower than the CPU implementation, when including the copy time. Note that the CPUs have a much higher clock rate as compared to the GPU.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5.10">Accumulator</head></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5.11">Selectivity Analysis</head><p>Recently, several algorithms have been designed to implement join operations efficiently using selectivity estimation <ref type="bibr" target="#b6">[7,</ref><ref type="bibr" target="#b8">10]</ref>. We compute the selectivity of a query using the COUNT algorithm (Section 4.3). To obtain the selectivity count, image-space occlusion queries are used. We performed the experiments described in Sections 5.5, 5.6, 5.7, 5.8. We observed that there is no additional overhead in obtaining the count of selected queries. Given selected data values scattered over a 1000 Ã— 1000 frame-buffer, we </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="6.">ANALYSIS</head><p>In the previous section, we have highlighted the performance of our algorithms on different database operations and performed a preliminary comparison with some CPUbased algorithms. In this section, we analyze the performance of our algorithms and highlight the database operations for which the GPUs can offer considerable gain in performance.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="6.1">Implementing Basic Operations on GPUs</head><p>There are many issues that govern the performance of the algorithms implemented on a GPU. Some of the upcoming features in the next generation GPUs can improve the performance of these algorithms considerably. Precision: Current GPUs have depth buffers with a maximum of 24 bits. This limited precision can be an issue. With the increasing use of GPUs in performing scientific computing, graphics hardware developers may add support for higher-precision depth buffers. Copy Time: Several of our algorithms require data values to be copied from the texture memory to the depth buffer. Current GPUs do not offer a mechanism to perform this operation efficiently and this operation can take a significant fraction of the overall algorithm (e.g. algorithms for relational and range queries). In the future, we can expect support for this operation on GPUs which could improve the overall performance. Integer Arithmetic Instructions: Current GPUs do not offer integer arithmetic instructions in the pixel processing engines. In addition to database operations, several image and video compression algorithms also require the use of integer arithmetic operations. Fragment programs were introduced in just the last few years. The instruction sets for these programs are still being enhanced. The instructions for integer arithmetic would reduce the timings of our Accumulator algorithm significantly. Depth Compare Masking: Current GPUs support a boolean depth mask that enables or disables writes to a depth buffer. It is very useful to have a comparison mask specified for the depth function, similar to that specified in the stencil function. Such a mask would make it easier to test if a number has i-th bit set. Memory Management: Current high-end GPUs have up to 512MB of video memory and this limit is increasing every year. However, due to the limited video memory, we may not be able to copy very large databases (with tens of millions of records) into GPU memory. In such situations, we would use out-of-core techniques and swap textures in and out of video memory. Another related issue is the bus bandwidth. Current PCs use an AGP8Ã— bus to transfer data from the CPU to the GPU and the PCI bus from the GPU to the CPU. With the announcement of PCI-EXPRESS bus, the bus bandwidth is going to improve significantly in the near future. Asynchronous data transfers would also improve the performance of these algorithms. No Branching: Current GPUs implement branching by evaluating both portions of the conditional statement. We overcome this issue by using multi-pass algorithms and evaluating the branch operation using the alpha test or the depth test. No Random Writes: GPUs do not support random access writes, which makes it harder to develop algorithms on GPUs because they cannot use data rearrangement on GPUs.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="6.2">Relative Performance Gain</head><p>We have presented algorithms for predicates, boolean combinations and aggregations. We have also performed preliminary comparison with optimized CPU-based implementations on a workstation with dual 2.8 GHz Xeon processors. Due to different clock rates and instruction sets, it is difficult to perform explicit comparisons between CPU-based and GPU-based algorithms. However, some of our algorithms perform better than others. We classify our algorithms into three categories: high performance gain, medium performance gain and low performance gain.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="6.2.1">High Performance Gain</head><p>In these algorithms, we have observed an order of magnitude speedup over CPU-based implementations. These include algorithms for semi-linear queries and selection queries. The main reason for the improved performance are:</p><p>â€¢ Parallel Computation: GPUs have several pixel processing engines that process multiple pixels in parallel. For example, on a GeForce FX 5900 Ultra we can process 8 pixels in parallel and reduce the computational time significantly. Also, each pixel processing engine has vector processing capabilities and can perform vector operations very efficiently. The speedup in selection queries is mainly due to the parallelism available in pixel processing engines. The semi-linear queries also exploit the vector processing capabilities.</p><p>â€¢ Pipelining: GPUs are designed using a pipelined architecture. As a result, they can simultaneously process multiple primitives within the pipeline. The algorithms for handling multiple-attribute queries map well to the pipelined implementation.</p><p>â€¢ Early Depth-Culling: GPUs have specialized hardware that early in the pipeline can reject fragments that will not pass the depth test. Since the fragments do not have to pass through the pixel processing engines, this can lead to a significant performance increase.</p><p>â€¢ Eliminate branch mispredictions: One of the major advantages in performing these selection queries on GPUs is that there are no branch mispredictions.</p><p>Branch mispredictions can be extremely expensive on the modern CPUs. Modern CPUs use specialized schemes for predicting the outcome of the branch instruction. Each branch mis-prediction can cost several clock cycles on current CPUs. For example, on a Pentium IV a branch misprediction can have a penalty of 17 clock cycles <ref type="bibr">[25]</ref>.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="6.2.2">Medium Performance Gain</head><p>Several of our algorithms for database operations are only able to use a subset of the capabilities of the GPUs. In these cases, we have observed a speedup of nearly a factor of 2 to 4 times in comparison to an optimized-CPU implementation. For example, the KthLargest() routine exhibits these characteristics. The speedup in the KthLargest() is mainly due to the parallelism available in pixel processing engines. Given the GPU clock rate and the number of pixel processing engines, we can estimate the time taken to perform KthLargest() under some assumptions. We assume that there is no latency in the graphics pipeline and in transmitting the pixel pass count from the GPU to the CPU. On a GeForce FX 5900 Ultra with clock rate 450MHz and processing 8 pixels per clock cycle, we can render a single quad of size 1000Ã—1000 in 0.278 ms. In our experiments, we render 19 such quads to compute the k-th largest number. Rendering these quads should take 5.28 ms. The observed time for this computation is 6.6 ms, which indicates that we are utilizing nearly 80% of the parallelism in the pipeline. The observed timings are slightly higher due to the latencies in transmitting the data from the GPU to the CPU and viceversa. A key advantage of our algorithm KthLargest() in comparison with other parallel order statistic algorithms is that it does not require any data rearrangement. Data rearrangements can be expensive when combined with branching.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="6.2.3">Low Performance Gain</head><p>In some cases, we did not observe any gain over a CPUbased implementation. Our GPU based Accumulator algorithm is much slower than the CPU-based implementation. There are several reasons for this performance:</p><p>â€¢ Lack of Integer Arithmetic: Current GPUs do not support integer arithmetic instructions. Therefore, we used a fragment program with at least 5 instructions to test if the i-th bit of a texel is 1. There are several ways to implement such a feature in the hardware. A simplest mechanism is to copy the i-th bit of the texel into the alpha value of a fragment. This can lead to significant improvement in performance.</p><p>â€¢ Clock Rate: Not only are we comparing two architectures with different instruction sets, but they also have different clock rates. Our CPU implementation used top-of-the-line dual Xeon processors operating at 2.8GHz. Each Xeon processor has four SIMD processors that can perform four operations in parallel. On the other hand, the current GPU clock rate (450MHz) is much lower than the CPU clock rate. It is possible that the increasing parallelism in the GPUs and development of new instruction sets for fragment programs can bridge this gap in performance.</p><p>Our preliminary analysis indicates that it is advantageous to perform selection and semi-linear queries on GPUs. In addition, GPUs can also be used effectively to perform order statistics algorithms.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="7.">CONCLUSIONS AND FUTURE WORK</head><p>In this paper, we have presented novel algorithms for performing database operations on the GPUs. These include algorithms for predicates, boolean combinations, and aggregation queries. We have implemented these algorithms on a state-of-the-art GPU and highlighted its performance for following queries: relational query, range query, multiattribute query, semi-linear query, kth-largest number computation, accumulator and selectivity analysis. We have also performed preliminary comparisons with optimized implementations of CPU-based algorithms. In some cases, we observed noticeable performance gain.</p><p>We have shown that GPUs are excellent candidates for performing some of the databases operations. Some reasons for this finding include:</p><p>â€¢ Commodity Hardware: High-end GPUs are freely available on PCs, consoles and workstations. The cost of a high-end GPU is typically less than the cost of a high-end CPU (by a factor of two or more).</p><p>â€¢ Higher Growth Rate: Over the last decade the growth rate of GPU performance has been higher than that of CPUs. This trend is expected to continue for the next five years or so. The performance gap between the CPUs and GPUs will probably increase considerably and we can obtain improved performance for database queries on the GPUs.</p><p>â€¢ Multiple Fragment Processors and Improved Programmability: Current high-end GPUs already have 8 fragment processors. This number is expected to increase in the future. As the instruction sets of fragment programs improve, the running time of many of our algorithms will further decrease.</p><p>â€¢ Useful Co-Processor: Overall, the GPU can be used as an effective co-processor along with the CPUs. It is clear that GPU is an excellent candidate for some database operations, but not all. Therefore, it would be useful for database designers to utilize GPU capabilities alongside traditional CPU-based code.</p><p>There are many avenues for future work. It is possible to use new capabilities and optimizations to improve the performance of many of our algorithms. Furthermore, we would like to develop algorithms for other database operations and queries including sorting, join, and indexed search, and OLAP and data mining tasks such as data cube roll up and drill-down, classification, and clustering, which may benefit from multiple fragment processors and vector processing capabilities. We also plan to design GPU-based algorithms for queries on more complicated data types in the context of spatial and temporal databases and perform continuous queries over streams using GPUs.</p></div><figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_0"><head>Figure 1 :</head><label>1</label><figDesc>Figure 1: Graphics architectural pipeline overview: This figure shows the various units of a modern GPU. Each unit is designed for performing a specific operation efficiently.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_1"><head></head><label></label><figDesc>Compare compares the attribute values stored in texture tex against d using the comparison function op. CopyToDepth called on line 1 copies the attribute values in tex into the depth buffer. CopyToDepth uses a simple fragment program on each pixel of the screen for performing the copy oper- ation. On line 2, the depth test is configured to use the compar- ison operator op. The function RenderQuad(d) called on line 3 generates a fragment at a specified depth d for each pixel on the screen. Rasterization hardware compares the fragment depth d against the attribute values in depth buffer using the operation op.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_2"><head></head><label></label><figDesc>SemilinearFP( s, op, b) 1 a = value from tex 2 if dot( s, a) op b 3 discard fragment ROUTINE 4.2: Semilinear computes the semi-linear query by performing linear combination of attribute values in tex and scalar constants in s. Using the operator op, it compares the the scalar value due to linear combination with b. To perform this operation, we render a screen filling quad and generate fragments on which the semi-linear query is executed. For each fragment, a fragment program SemilinearFP discards fragments that fail the query.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_3"><head></head><label></label><figDesc>KthLargest computes the k-th largest at- tribute value in texture tex. It uses b max passes starting from the MSB to compute the k-th largest number. During a pass i, it determines the i-th bit of the k-th largest number. At the end of b max passes, it computes the k-th largest number in x.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_4"><head></head><label></label><figDesc>Accumulator computes the sum of attribute values in texture tex. It performs b max passes to compute the sum. Each pass computes the number of values with i-th bit set and stores it in count. This count is multiplied with 2 i and added to sum. At the end of the b max passes, the variable sum aggre- gates all the data values in the texture.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_5"><head>Figure 3 :</head><label>3</label><figDesc>Figure 3: Execution time of a predicate evaluation with 60% selectivity by a CPU-based and a GPU-based algorithm. Timings for the GPU-based algorithm include time to copy data values into the depth buffer. Considering only computation time, the GPU is nearly 20 times faster than a compiler-optimized SIMD implementation.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_6"><head>Figure 4 :</head><label>4</label><figDesc>Figure 4: Execution time of a range query with 60% selectivity using a GPUbased and a CPU-based algorithm. Timings for the GPU-based algorithm include time to copy data values into the depth buffer. Considering only computation time, the GPU is nearly 40 times faster than a compiler-optimized SIMD implementation.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_7"><head>Figure 5 :</head><label>5</label><figDesc>Figure 5: Execution time of a multiattribute query with 60% selectivity for each attribute and a combination of AND operator. Time i is the time to perform a query with i attributes. We show the timings for CPU and GPU-based implementations.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_8"><head>Figure 2 :</head><label>2</label><figDesc>Figure 2: Plot indicating the time taken for copying data values in a texture to the depth buffer.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_9"><head>Figure 7 :</head><label>7</label><figDesc>Figure 7: Time to compute k-th largest number on the data count attribute. We used a portion of the TCP/IP database with nearly 250K records.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_10"><head>Figure 8 :</head><label>8</label><figDesc>Figure 8: Time taken to compute the median using KthLargest and QuickSelect on varying number of records.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_11"><head>Figure 9 :</head><label>9</label><figDesc>Figure 9: Time taken to compute the K-th largest number by the two implementations.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_12"><head>Figure 6 :</head><label>6</label><figDesc>Figure 6: Execution time of a semi-linear query using four attributes of the TCP/IP database. The GPU-based implementation is almost one order of magnitude faster than the CPU-based implementation.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_13"><head>Figure 10 :</head><label>10</label><figDesc>Figure 10: Time required to sum the values of an attribute by the CPU and by the GPU-based Accumulator algorithm</figDesc></figure>

			<note place="foot" n="1"> http://www.intel.com/software/products/compilers/ techtopics/compiler_optimization_71.pdf</note>
		</body>
		<back>

			<div type="acknowledgement">
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Acknowledgements</head><p>This research is supported in part by ARO Contract DAAD19-99-1-0162, NSF award ACI-0118743, ONR Contracts N00014-01-1-0067 and N00014-01-1-0496, and Intel Corporation. We would like to thank NVIDIA Corporation especially Steven Molnar, Paul Keller and Stephen Ehmann for their support. We would also like to thank Jasleen Sahni for providing access to the TCP/IP database.</p></div>
			</div>

			<div type="references">

				<listBibl>

<biblStruct xml:id="b0">
	<analytic>
		<title level="a" type="main">Streaming geometric optimization using graphics hardware</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Pankaj</forename><surname>Agarwal</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Shankar</forename><surname>Krishnan</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Nabil</forename><surname>Mustafa</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Suresh</forename><surname>Venkatasubramanian</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">11th European Symposium on Algorithms</title>
		<imprint>
			<date type="published" when="2003" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b1">
	<analytic>
		<title level="a" type="main">Weaving relations for cache performance</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Ailamaki</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><forename type="middle">J</forename><surname>Dewitt</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><forename type="middle">D</forename><surname>Hill</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Skounakis</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the Twenty-seventh International Conference on Very Large Data Bases</title>
		<meeting>the Twenty-seventh International Conference on Very Large Data Bases</meeting>
		<imprint>
			<date type="published" when="2001" />
			<biblScope unit="page" from="169" to="180" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b2">
	<analytic>
		<title level="a" type="main">DBMSs on a modern processor: Where does time go?</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Ailamaki</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><forename type="middle">J</forename><surname>Dewitt</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><forename type="middle">D</forename><surname>Hill</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><forename type="middle">A</forename><surname>Wood</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. of VLDB</title>
		<meeting>of VLDB</meeting>
		<imprint>
			<date type="published" when="1999" />
			<biblScope unit="page" from="266" to="277" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b3">
	<analytic>
		<title level="a" type="main">Sparse matrix solvers on the gpu: Conjugate gradients and multigrid</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Bolz</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">I</forename><surname>Farmer</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">E</forename><surname>Grinspun</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><surname>SchrÃ¶der</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">ACM Trans. on Graphics (Proc. of ACM SIGGRAPH)</title>
		<imprint>
			<biblScope unit="volume">22</biblScope>
			<biblScope unit="issue">3</biblScope>
			<date type="published" when="2003" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b4">
	<analytic>
		<title level="a" type="main">Database architecture optimized for the new bottleneck: Memory access</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Peter</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Stefan</forename><surname>Boncz</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Martin</forename><forename type="middle">L</forename><surname>Manegold</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Kersten</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. of VLDB</title>
		<meeting>of VLDB</meeting>
		<imprint>
			<date type="published" when="1999" />
			<biblScope unit="page" from="54" to="65" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b5">
	<monogr>
				<ptr target="http://www.bls.census.gov/cps/" />
		<title level="m">Census bureau databases</title>
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b6">
	<analytic>
		<title level="a" type="main">Selectively estimation for boolean queries</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Zhiyuan</forename><surname>Chen</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Nick</forename><surname>Koudas</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Flip</forename><surname>Korn</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Muthukrishnan</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the nineteenth ACM SIGMOD-SIGACT-SIGART symposium on Principles of database systems</title>
		<meeting>the nineteenth ACM SIGMOD-SIGACT-SIGART symposium on Principles of database systems</meeting>
		<imprint>
			<date type="published" when="2000" />
			<biblScope unit="page" from="216" to="225" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b7">
	<analytic>
		<title level="a" type="main">Programmability features of graphics hardware</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Michael</forename><surname>Doggett</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">ACM SIGGRAPH Course Notes # 11</title>
		<imprint>
			<date type="published" when="2003" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b8">
	<analytic>
		<title level="a" type="main">Selectivity estimation using probabilistic models</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Lise</forename><surname>Getoor</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Benjamin</forename><surname>Taskar</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Daphne</forename><surname>Koller</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 2001 ACM SIGMOD International Conference on Management of Data</title>
		<meeting>the 2001 ACM SIGMOD International Conference on Management of Data<address><addrLine>Santa Barbara, California, United States</addrLine></address></meeting>
		<imprint>
			<publisher>ACM</publisher>
			<date type="published" when="2001-05-21" />
			<biblScope unit="page">472010</biblScope>
		</imprint>
	</monogr>
	<note>Timos Sellis and Sharad Mehrotra</note>
</biblStruct>

<biblStruct xml:id="b9">
	<analytic>
		<title level="a" type="main">A multigrid solver for boundary value problems using programmable graphics hardware</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">N</forename><surname>Goodnight</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><surname>Woolley</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">G</forename><surname>Lewin</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Luebke</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">G</forename><surname>Humphreys</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">ACM SIGGRAPH/Eurographics Conference on Graphics Hardware</title>
		<imprint>
			<date type="published" when="2003" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b10">
	<analytic>
		<title level="a" type="main">Interactive shadow generation in complex environments</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">N</forename><surname>Govindaraju</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">B</forename><surname>Lloyd</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Yoon</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Sud</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Manocha</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Proc. of ACM SIGGRAPH/ACM Trans. on Graphics</title>
		<imprint>
			<biblScope unit="volume">22</biblScope>
			<biblScope unit="issue">3</biblScope>
			<biblScope unit="page" from="501" to="510" />
			<date type="published" when="2003" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b11">
	<analytic>
		<title level="a" type="main">Physically-based visual simulation on graphics hardware</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Harris</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">G</forename><surname>Coombe</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">G</forename><surname>Scheuermann</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Lastra</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">SIGGRAPH/Eurographics Workshop on Graphics Hardware</title>
		<imprint>
			<date type="published" when="2002" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b12">
	<analytic>
		<title level="a" type="main">Algorithm 65: find</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><forename type="middle">A R</forename><surname>Hoare</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Commun. ACM</title>
		<imprint>
			<biblScope unit="volume">4</biblScope>
			<biblScope unit="issue">7</biblScope>
			<biblScope unit="page" from="321" to="322" />
			<date type="published" when="1961" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b13">
	<analytic>
		<title level="a" type="main">Fast computation of generalized voronoi diagrams using graphics hardw are</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">K</forename><surname>Hoff</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><surname>Culver</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Keyser</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Lin</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Manocha</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of ACM SIGGRAPH</title>
		<meeting>ACM SIGGRAPH</meeting>
		<imprint>
			<date type="published" when="1999" />
			<biblScope unit="page" from="277" to="286" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b14">
	<analytic>
		<title level="a" type="main">Hardware-assisted computation of depth contours</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Krishnan</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">N</forename><forename type="middle">H</forename><surname>Mustafa</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Venkatasubramanian</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">13th ACM-SIAM Symposium on Discrete Algorithms</title>
		<imprint>
			<date type="published" when="2002" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b15">
	<analytic>
		<title level="a" type="main">Linear algebra operators for gpu implementation of numerical algorithms</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Kruger</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Westermann</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">ACM Trans. on Graphics (Proc. of ACM SIGGRAPH)</title>
		<imprint>
			<biblScope unit="volume">22</biblScope>
			<biblScope unit="issue">3</biblScope>
			<date type="published" when="2003" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b16">
	<analytic>
		<title level="a" type="main">Fast matrix multiplies using graphics hardware</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">E</forename><forename type="middle">S</forename><surname>Larsen</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><forename type="middle">K</forename><surname>Mcallister</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. of IEEE Supercomputing</title>
		<meeting>of IEEE Supercomputing</meeting>
		<imprint>
			<date type="published" when="2001" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b17">
	<monogr>
		<title level="m" type="main">The gpu enters computing&apos;s mainstream. Computer</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Macedonia</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2003-10" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b18">
	<analytic>
		<title level="a" type="main">What happens during a join? Dissecting CPU and memory optimization effects</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Manegold</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><surname>Boncz</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><forename type="middle">L</forename><surname>Kersten</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of 26th International Conference on Very Large Data Bases</title>
		<meeting>26th International Conference on Very Large Data Bases<address><addrLine>Cairo, Egypt</addrLine></address></meeting>
		<imprint>
			<date type="published" when="2000-09-10" />
			<biblScope unit="page" from="339" to="350" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b19">
	<analytic>
		<title level="a" type="main">Generic database cost models for hierarchical memory systems</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Stefan</forename><surname>Manegold</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Peter</forename><forename type="middle">A</forename><surname>Boncz</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Martin</forename><forename type="middle">L</forename><surname>Kersten</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the Twenty-eighth International Conference on Very Large Data Bases</title>
		<meeting>the Twenty-eighth International Conference on Very Large Data Bases</meeting>
		<imprint>
			<date type="published" when="2002" />
			<biblScope unit="page" from="191" to="202" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b20">
	<analytic>
		<title level="a" type="main">Interactive Geometric and Scientific Computations using Graphics Hardware</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Manocha</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">SIGGRAPH Course Notes # 11</title>
		<imprint>
			<date type="published" when="2003" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b21">
	<analytic>
		<title level="a" type="main">Cg: A system for programming graphics hardware in a c-like language</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">William</forename><forename type="middle">R</forename><surname>Mark</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Steven Glanville</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Kurt</forename><surname>Akeley</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Mark</forename><forename type="middle">J</forename><surname>Kilgard</surname></persName>
		</author>
		<ptr target="http://developer.nvidia.com/page/cgmain.html" />
	</analytic>
	<monogr>
		<title level="m">Proc. of ACM SIGGRAPH</title>
		<meeting>of ACM SIGGRAPH</meeting>
		<imprint>
			<date type="published" when="2003" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b22">
	<monogr>
		<title level="m" type="main">Acceleration of relational database operations on vector processors. Systems and Computers in Japan</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Shintaro</forename><surname>Meki</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Yahiko</forename><surname>Kambayashi</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2000-08" />
			<biblScope unit="volume">31</biblScope>
			<biblScope unit="page" from="79" to="88" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b23">
	<monogr>
				<ptr target="http://www.nvidia.com/object/intellisampletb.html" />
		<title level="m">Nvidia geforce fx gpus: Intellisample technology</title>
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b24">
	<monogr>
		<title level="m" type="main">Nv occlusion query specification</title>
		<ptr target="http://www.nvidia.com/devcontent/nvopenglspecs/GLNVocclusionquery.txt" />
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b25">
	<analytic>
		<title level="a" type="main">Towards and infrastructure for temporal databases -A workship report</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Niki</forename><surname>Pissinou</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">SIGMOD Record (ACM Special Interest Group on Management of Data)</title>
		<imprint>
			<biblScope unit="volume">23</biblScope>
			<biblScope unit="issue">1</biblScope>
			<biblScope unit="page" from="35" to="51" />
			<date type="published" when="1994-03" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b26">
	<analytic>
		<title level="a" type="main">Ray tracing on programmable graphics hardware</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><surname>Purcell</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">I</forename><surname>Buck</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">W</forename><surname>Mark</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><surname>Hanrahan</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. of SIGGRAPH&apos;02)</title>
		<meeting>of SIGGRAPH&apos;02)</meeting>
		<imprint>
			<date type="published" when="2002" />
			<biblScope unit="volume">21</biblScope>
			<biblScope unit="page" from="703" to="712" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b27">
	<analytic>
		<title level="a" type="main">Photon mapping on programmable graphics hardware</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><surname>Purcell</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><surname>Donner</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Cammarano</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">H</forename><surname>Jensen</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><surname>Hanrahan</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">ACM SIGGRAPH/Eurographics Conference on Graphics Hardware</title>
		<imprint>
			<date type="published" when="2003" />
			<biblScope unit="page" from="41" to="50" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b28">
	<analytic>
		<title level="a" type="main">Cache conscious indexing for decision-support in main memory</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Jun</forename><surname>Rao</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Kenneth</forename><forename type="middle">A</forename><surname>Ross</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. of VLDB</title>
		<meeting>of VLDB</meeting>
		<imprint>
			<date type="published" when="1999" />
			<biblScope unit="page" from="78" to="89" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b29">
	<analytic>
		<title level="a" type="main">Conjunctive selection conditions in main memory</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Kenneth</forename><forename type="middle">A</forename><surname>Ross</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the Twenty-First ACM SIGMOD-SIGACT-SIGART Symposium on Principles of Database Systems: PODS 2002</title>
		<meeting>the Twenty-First ACM SIGMOD-SIGACT-SIGART Symposium on Principles of Database Systems: PODS 2002</meeting>
		<imprint>
			<date type="published" when="2002" />
			<biblScope unit="page">475021</biblScope>
		</imprint>
	</monogr>
	<note>ACM</note>
</biblStruct>

<biblStruct xml:id="b30">
	<analytic>
		<title level="a" type="main">Interactive inspection of solids: cross-sections and interferences</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Rossignac</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Megahed</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">B</forename><forename type="middle">D</forename><surname>Schneider</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of ACM Siggraph</title>
		<meeting>ACM Siggraph</meeting>
		<imprint>
			<date type="published" when="1992" />
			<biblScope unit="page" from="353" to="60" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b31">
	<analytic>
		<title level="a" type="main">Cache conscious algorithms for relational query processing</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Ambuj</forename><surname>Shatdal</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Chander</forename><surname>Kant</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Jeffrey</forename><forename type="middle">F</forename><surname>Naughton</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">20th International Conference on Very Large Data Bases</title>
		<imprint>
			<date type="published" when="1994" />
			<biblScope unit="page" from="510" to="521" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b32">
	<analytic>
		<title level="a" type="main">Hardware acceleration for spatial selections and joins</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Chengyu</forename><surname>Sun</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Divyakant</forename><surname>Agrawal</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Amr</forename><forename type="middle">El</forename><surname>Abbadi</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 2003 ACM SIGMOD International Conference on Management of Data</title>
		<meeting>the 2003 ACM SIGMOD International Conference on Management of Data</meeting>
		<imprint>
			<date type="published" when="2003" />
			<biblScope unit="page" from="455" to="466" />
		</imprint>
	</monogr>
	<note>ACM</note>
</biblStruct>

<biblStruct xml:id="b33">
	<analytic>
		<title level="a" type="main">Using modern graphics architectures for general-purpose computing: A framework and analysis</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><forename type="middle">J</forename><surname>Thompson</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Hahn</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Oskin</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. of IEEE/ACM International Symposium on Microarchitectures</title>
		<meeting>of IEEE/ACM International Symposium on Microarchitectures</meeting>
		<imprint>
			<date type="published" when="2002" />
			<biblScope unit="page" from="306" to="317" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b34">
	<analytic>
		<title level="a" type="main">Implementing database operations using simd instructions</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Jingren</forename><surname>Zhou</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Kenneth</forename><forename type="middle">A</forename><surname>Ross</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 2002 ACM SIGMOD international conference on Management of data</title>
		<meeting>the 2002 ACM SIGMOD international conference on Management of data</meeting>
		<imprint>
			<publisher>ACM Press</publisher>
			<date type="published" when="2002" />
			<biblScope unit="page" from="145" to="156" />
		</imprint>
	</monogr>
</biblStruct>

				</listBibl>
			</div>
		</back>
	</text>
</TEI>
