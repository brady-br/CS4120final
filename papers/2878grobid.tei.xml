<?xml version="1.0" encoding="UTF-8"?>
<TEI xmlns="http://www.tei-c.org/ns/1.0" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
xsi:schemaLocation="http://www.tei-c.org/ns/1.0 /Users/atharsefid/Desktop/grobid-0.5.3/grobid-home/schemas/xsd/Grobid.xsd"
 xmlns:xlink="http://www.w3.org/1999/xlink">
	<teiHeader xml:lang="en">
		<encodingDesc>
			<appInfo>
				<application version="0.5.3" ident="GROBID" when="2020-09-29T02:54+0000">
					<ref target="https://github.com/kermitt2/grobid">GROBID - A machine learning software for extracting information from scholarly documents</ref>
				</application>
			</appInfo>
		</encodingDesc>
		<fileDesc>
			<titleStmt>
				<title level="a" type="main">Parallel Synchronization-Free Approximate Data Structure Construction</title>
			</titleStmt>
			<publicationStmt>
				<publisher/>
				<availability status="unknown"><licence/></availability>
			</publicationStmt>
			<sourceDesc>
				<biblStruct>
					<analytic>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Martin</forename><surname>Rinard</surname></persName>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Mit</forename><surname>Csail</surname></persName>
						</author>
						<title level="a" type="main">Parallel Synchronization-Free Approximate Data Structure Construction</title>
					</analytic>
					<monogr>
						<imprint>
							<date/>
						</imprint>
					</monogr>
				</biblStruct>
			</sourceDesc>
		</fileDesc>
		<profileDesc>
			<abstract>
				<p>We present approximate data structures with construction algorithms that execute without synchronization. The data races present in these algorithms may cause them to drop inserted or appended elements. Nevertheless , the algorithms 1) do not crash and 2) may produce a data structure that is accurate enough for its clients to use successfully. We advocate an approach in which the approximate data structures are composed of basic tree and array building blocks with associated synchronization-free construction algorithms. This approach enables developers to reuse the construction algorithms , which have been engineered to execute successfully in parallel contexts despite the presence of data races, without having to understand the details of why they execute successfully. We evaluate the end-to-end accuracy and performance consequences of our approach by building a space-subdivision tree for the Barnes-Hut N-body simulation out of our presented tree and array building blocks. The resulting approximate data structure construction algorithm eliminates synchronization overhead and anomalies such as excessive serialization and deadlock. The algorithm exhibits good performance (running 14 times faster on 16 cores than the sequential version) and good accuracy (the accuracy loss is four orders of magnitude less than the accuracy gain associated with increasing the accuracy of the Barnes-Hut center of mass approximation by 20%).</p>
			</abstract>
		</profileDesc>
	</teiHeader>
	<text xml:lang="en">
		<body>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="1.">Introduction</head><p>Many computations (for example, many video and image processing computations, modern internet search and information retrieval, and many scientific computations) exhibit the flexibility to produce a range of acceptably accurate outputs. Researchers have exploited this flexibility to develop techniques that profitably trade off accuracy in return for increased performance, reduced power consumption, or the ability to adapt to changing conditions in the underlying computational platform <ref type="bibr">[4, 9, 13-16, 21, 22, 24, 28]</ref>.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="1.1">Approximate Data Structure Building Blocks</head><p>In this paper we shift the focus to the data structures that the computations manipulate -we present synchronization-free parallel algorithms for building approximate data structures. These algorithms work with data structures composed of tree and array building blocks. Examples of such data structures include search trees, array lists, hash tables, linked lists, and space-subdivision trees. The algorithms insert elements at the leaves of trees or append elements at the end of arrays. Because they use only primitive reads and writes, they execute without synchronization overhead or undesirable synchronization anomalies such as excessive serialization or deadlock. Moreover, unlike much early research in the field <ref type="bibr" target="#b11">[12]</ref>, the algorithms do not use reads and writes to synthesize higher-level synchronization constructs. Approximation: Now, it may not be clear how to implement correct data structure construction algorithms without sychronization. Indeed, we do not attempt to do so -the data races in our algorithms may drop inserted elements and violate some of the natural data structure consistency properties. But these algorithms 1) do not crash, 2) produce a data structure that is consistent enough for its clients to use successfully, and 3) produce a data structure that contains enough of the inserted elements so that its clients can deliver acceptably accurate outputs. In effect, we eliminate synchronization by leveraging the end-to-end ability of the client to tolerate some imprecision in the approximate data structure that the algorithm produces. Building Blocks: Our approximate data structure construction algorithms have the advantage that they are, essentially, standard sequential algorithms that have been engineered to execute successfully without synchronization in parallel contexts despite the presence of data races. The reasons for this successful execution can be quite involved. We therefore advocate the development of reusable data structure building blocks with associated approximate construction algorithms. Because these building blocks encapsulate the reasoning required to obtain successful synchronization-free construction algorithms, developers can build their data structures out of these building blocks and reuse the construction algorithms without needing to understand the details of why the algorithms operate successfully without synchronization despite the presence of data races.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="1.2">Advantages and Disadvantages</head><p>Our unsynchronized approximate data structures are standard, familiar sequential implementations that execute successfully in parallel contexts. They are completely free of the complex and potentially confusing synchronization primitives (for example, mutual exclusion locks, atomic transactions, and wait-free updates) that complicate the development of synchronized parallel code. Our unsynchronized approach can therefore offer the following advantages:</p><p>• Enhanced Correctness and Trustworthiness: There is no exposure to coding errors in complex synchronization primitives or in the complex, intellectually challenging parallel data structure implementations that use them.</p><p>• Enhanced Portability: There is no reliance on specialized synchronization primitives that may not be widely implemented across platforms.</p><p>• Simplicity and Ease of Development: There is no need to learn, use, or rely on complex synchronization primitives -our unsynchronized data structures use only standard read and write operations.</p><p>As a result, we anticipate that the simplicity, familiarity, and transparency of our approach may make synchronization-free approximate data structures easier for developers to understand, trust, and use than their complex, intimidating synchronized counterparts. A potential disadvantage is that developers have been repeatedly told that unsynchronized concurrent accesses to shared data are dangerous. If developers internalize this rigid, incomplete, but currently widespread perception, they may find unsynchronized data structures emotionally difficult to accept even when they are the superior alternative for the task at hand.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="1.3">Case Study</head><p>In general, we expect the acceptability of the approximate data structures to depend on end-to-end effects such as 1) how frequently the application's data structure construction workload elicits interactions that drop elements and 2) the effect that any dropped elements have on the accuracy of the result that the application produces. We evaluate the performance and accuracy consequences of using our building blocks for the space-subdivision tree in the Barnes-Hut N -body computation <ref type="bibr" target="#b0">[1,</ref><ref type="bibr" target="#b24">25]</ref>. This computation simulates a system of N interacting bodies (such as molecules, stars, or galaxies). At each step of the simulation, the computation computes the forces acting on each body, then uses these forces to update the positions, velocities, and accelerations of the bodies.</p><p>Instead of computing the force acting on each body with the straightforward pairwise N 2 algorithm, BarnesHut instead inserts the N bodies into a space-subdivision tree, computes the center of mass at each node of the tree, then uses the tree to compute the force acting on each body. It approximates the combined forces from multiple distant bodies as the force from the center of mass of the distant bodies as stored in the root of the subtree that includes these distant bodies. This approximation reduces the complexity of the force computation algorithm from N 2 to N log N . We implement the space-subdivision tree itself as a hybrid data structure whose leaves use an array to store multiple inserted bodies.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="1.4">Evaluation Methodology</head><p>Approximate data structures are acceptable only if they enable the client to operate acceptably. We therefore propose a methodology that evaluates approximate data structures in the context of a complete application. We evaluate their acceptability by comparing their effects with those of other approximate computing techniques (such as changing application-specific accuracy parameters) that increase the accuracy. If the accuracy decreases from the approximate data structures are negligible in comparison with the obtained accuracy increases, the approximate data structures are acceptable in the context of the application.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="1.5">Experimental Results</head><p>Because the approximate space-subdivision tree construction algorithm is unsynchronized, it may produce a tree that does not contain some of the inserted bodies. The net effect is that the force computation algorithm operates as if those bodies did not exist at that step. Our results show that, in practice, less than 0.0003% of the inserted bodies are dropped. The effect of these dropped bodies on the overall accuracy of the computation is negligible. Specifically, the effect on the computed body positions is four orders of magnitude less than the effect of increasing the accuracy of the center of mass approximation in the force calcuation phase by 20%.</p><p>The unsynchronized algorithm exhibits good parallel performance (on 16 cores, it runs over 14 times faster than the sequential tree construction algorithm) and runs over an order of magnitude faster than a version that uses standard tree locking to eliminate dropped bodies. It also runs 5% and 10% faster than sophisticated parallel implementations that use either fine-grained mutual exclusion locks or compare and swap operations, in combination with strategically placed retry operations, to eliminate dropped bodies.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="1.6">Scope</head><p>There are deep conceptual connections between approximate data structures and techniques such as task skipping <ref type="bibr" target="#b20">[21]</ref>, loop perforation <ref type="bibr" target="#b8">[9,</ref><ref type="bibr" target="#b15">16,</ref><ref type="bibr" target="#b23">24]</ref>, early phase ter-mination <ref type="bibr" target="#b21">[22]</ref>, infinite loop exit <ref type="bibr" target="#b2">[3,</ref><ref type="bibr" target="#b10">11]</ref>, reduction sampling <ref type="bibr" target="#b27">[28]</ref>, and approximate parallel compilation <ref type="bibr" target="#b12">[13,</ref><ref type="bibr" target="#b16">17]</ref>. All of these techniques remove parts of the computation to produce a perforated computation -i.e., a computation with pieces missing. In the case of approximate data structures, there is a cascade effect -removing synchronization drops inserted bodies from the tree, which, in turn, has the effect of eliminating the dropped bodies from the force computation.</p><p>Many successful perforations target computations that combine multiple items to obtain a composite result -adding up numbers to obtain a sum, inserting elements to obtain a space-subdivision tree. One potential explanation for why applications tolerate perforation is that the perforations exploit a redundancy inherent in the multiple contributions. In effect, the original computations were overengineered, perhaps because developers try to manage the cognitive complexity of developing complex software by conservatively producing computations that they can easily see will produce a (potentially overaccurate) result.</p><p>Tolerating some inaccuracy is a prerequisite for the use of approximate data structures. Computations that are already inherently approximate are therefore promising candidates for approximate data structures. Note that this is a broad and growing class -any computation that processes noisy data from real-world sensors, employs standard approximations such as discretization, or is designed to please a subjective human consumer (for example, search, entertainment, or gaming applications), falls into this class. Applications such as video or dynamic web page construction may be especially promising -the results are immediately consumed and the effect of any approximations move quickly into the past and are forgotten. Traditional computations such as relational databases or compilers, with their hard notions of correctness, may be less promising candidates.</p><p>In our experience, many developers view banking as an application domain that does not tolerate imprecision and is therefore not appropriate for approximate data structures or algorithms. In practice, the integrity of the banking system depends on periodic reconciliations, which examine transactions, balance accounts, and catch and correct any errors. Other operations can, and do, exhibit errors. Approximations that occur infrequently (as is the case for the approximate data structures in this paper) and preserve the integrity of the reconciliation process can therefore be completely appropriate in some banking operations. As this example illustrates, approximate computing may be applicable in a broader range of application domains than many researchers and developers currently envision.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.">Data Structures</head><p>Approximate Tree: Our tree construction algorithm works with trees that contain internal nodes and external (leaf) nodes. Internal nodes reference other tree nodes; external nodes reference one or more inserted elements. To insert an element, the algorithm traverses the tree from the root to find or create the external node into which to insert the element. If the external node is full, it creates a new internal node to take the place of the external node. It then divides the elements in the external node into the new internal node and links the new internal node into the tree. <ref type="figure" target="#fig_1">Figure 1</ref> presents a C++ template that implements the insertion algorithm. Our BarnesHut implementation uses instances of the internal template to represent internal tree nodes and instances of the list template to represent external nodes (each of which may reference up to M bodies).</p><p>There are many ways for parallel insertions to interfere in ways that drop elements. For example, multiple threads may encounter a NULL child, then start parallel computations to build new external nodes to hold the elements inserted in that location in the tree. As the computations finish and link the external nodes into the tree, they may overwrite references to previously linked external nodes (dropping all of the elements in those nodes).</p><p>Approximate Array List: <ref type="figure" target="#fig_2">Figure 2</ref> presents a C++ template that implements an array list append algorithm. We note that there are multiple opportunities for parallel executions of the append operation to interfere in ways that drop elements. For example, parallel executions of lines 7 and 8 in <ref type="figure" target="#fig_2">Figure 2</ref> may overwrite references to concurrently appended elements.</p><p>Final Check: We view the tree insertion and array append algorithms as composed of fine-grained updates, each of which first performs a check to determine which action to perform, next (in general) executes a sequence of instructions that construct a new part of the data structure, then executes one or more write instructions to commit the update. We call the time between the check and the commit the window of vulnerabilityduring this time, state changes may interfere with the atomicity of the check and the update.</p><p>We use a technique, final check, to shrink (but not eliminate) the window of vulnerability. Just before the commit, the final check performs part or all of the check again to determine if it should still perform the update. If not, the algorithm discards the action and retries the insert or append. Redoing the null check at line 11 of <ref type="figure" target="#fig_1">Figure 1</ref> immediately before linking in the new node at line 13 (and retrying the insert if another thread has already linked another node) can reduce the number of dropped nodes <ref type="bibr" target="#b17">[18]</ref>.   Key Concepts: A strength of our approximate data structures is that they are essentially standard sequential data structures that have been engineered to avoid pitfalls associated with closely related data structures that are correct in sequential contexts but crash when executed without synchronization in parallel contexts. Two key structuring principles underly this engineering:</p><p>• Link At End: Some data structure updates link a new leaf or subtree into the tree. Because our algorithms link the new leaf or subtree into place only after they fully initialize and construct it, parallel threads only encounter fully constructed leaves or subtrees that they can access without crashing.</p><p>• Local Read, Check, and Index: One natural way to code the append operation <ref type="figure" target="#fig_2">(Figure 2</ref>) reads next (which references the next available array element) three times: first to check if the array is full (line 6, <ref type="figure" target="#fig_2">Figure 2</ref>), next to determine where to insert the item (line 7, <ref type="figure" target="#fig_2">Figure 2</ref>), then again to increment next (line 8, <ref type="figure" target="#fig_2">Figure 2</ref>). If coded this way, the resulting data races can cause out of bounds accesses that crash the computation.</p><p>The append operation in <ref type="figure" target="#fig_2">Figure 2</ref> avoids such data races by reading next into a local variable at the start of the operation (line 5, <ref type="figure" target="#fig_2">Figure 2</ref>), then using this local variable for all checks, indexing, and update operations. This technique eliminates out of bounds accesses even in the presence of data races associated with unsynchronized parallel executions.</p><p>Applying the above structuring principles delivers acceptable parallel implementations of other standard building block data structures such as extensible arrays <ref type="bibr" target="#b17">[18]</ref>. The resulting templates are designed to work together as components of hybrid data structures (such as hash tables <ref type="bibr" target="#b17">[18]</ref> and space subdivision trees <ref type="bibr" target="#b17">[18]</ref>).</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.1">Acceptability Argument</head><p>Even though our approximate data structures may drop inserted elements, they never crash and correctly preserve key data structure consistency properties required for clients to correctly traverse and retrieve elements from the data structure. It is possible to formalize these consistency properties and show that the data structures satisfy them in all parallel executions <ref type="bibr" target="#b17">[18]</ref>. We consider each property in turn and provide an argument that each update that may affect the property preserves the property. Conceptually, the argument proceeds by induction -we assume that the tree constructed to date satisfies all the consistency properties, then argue that each tree update preserves these properties.</p><p>In addition to these hard logical consistency properties, the tree must also contain enough body objects so that the force computation produces a sufficiently accurate result. We do not attempt to establish this property by reasoning about all possible executions. Indeed, this approach would fail, because some of the possible executions violate this property.</p><p>We instead reason empirically by observing executions of the program. Specifically, we compare the results that the program produces when it uses our unsynchronized data structures with results that we know to be accurate, then use this comparison to evaluate the endto-end acceptability of the data structures in the context of the Barnes-Hut computation.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.2">Memory Consistency Models</head><p>When we reason about parallel executions, we assume the executions take place on a parallel machine that implements individual reads and writes atomically. We also assume that writes become visible to other cores in the order in which they are performed. The computational platform on which we run our experiments (Intel Xeon E7340) implements a memory consistency model that satisfies these constraints.</p><p>Under the C++11 standard, if conflicting memory accesses are not ordered by synchronization operations or explicitly identified atomic read or write instructions, the program is undefined. When using a compiler that implements this standard, we would identify the writes on lines 13 and 21, <ref type="figure" target="#fig_1">Figure 1</ref> and lines 7 and 8, <ref type="figure" target="#fig_2">Fig- ure 2</ref> as atomic writes. We would also identify the reads on line 10, <ref type="figure" target="#fig_1">Figure 1</ref> and line 5, <ref type="figure" target="#fig_2">Figure 2</ref> (as well as any reads to fields in shared objects perfomed in other methods executed during the parallel tree construction, the index method, for example) as atomic reads. When instructed to compile the program using an appropriate weak memory consistency model, an appropriately competent C++11 compiler should generate substantially the same instruction stream with substantially the same performance as our current implementation for the Intel Xeon E7340 platform.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.">Experimental Results</head><p>We present results from a parallel Barnes-Hut computation that uses the algorithms described in Section 2 to build its space-subdivision tree. We implement the computation in C++ using the pthreads threads package. At each step of the simulation each thread inserts a block of N/T bodies into the tree, where N is the number of bodies and T is the number of parallel threads.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.1">Barnes-Hut Space-Subdivision Tree</head><p>Barnes-Hut works with a hierarchical space-subdivision tree. This tree contains bodies (the N bodies in the simulation), cells (each of which corresponds to a spatial region within the space-subdivision tree), and leaves (each of which stores a set of bodies that are located within the same leaf region of the tree).</p><p>The regions are nested -each cell is divided into eight octants. Each cell therefore contains eight references to either a hierarchically nested cell or leaf, each of which corresponds to one of the octants in the parent cell's region. We have instantiated the data structures in <ref type="figure" target="#fig_1">Figures 1 and 2</ref> to obtain an approximate Barnes-Hut space-subdivision tree <ref type="bibr" target="#b17">[18]</ref>. For comparison purposes, we implemented several versions:</p><p>• TL (Tree Locking): This version locks each node in the tree before it accesses the node. As it descends the tree, it releases the lock on the parent and acquires the lock on the child. Tree locking is a standard way to synchronize tree updates.</p><p>• CAS (Compare And Swap): This version uses compare and swap (CAS) instructions to make individual data structure updates execute atomically. In <ref type="figure" target="#fig_1">Figure 1</ref>, the CAS at line 13 checks that element children <ref type="bibr">[i]</ref> is still NULL. The CAS at line 21 checks that children <ref type="bibr">[i]</ref> is still equal to t. In <ref type="figure" target="#fig_2">Figure 2</ref> the CAS at line 7 checks that elements <ref type="bibr">[i]</ref> is still NULL. If a CAS fails, the version retries the insertion.</p><p>Although this version still contains data races, it does not drop bodies and produces the same result as the TL version (the analysis required to verify that this is the case is nontrivial).</p><p>• UL (Update Locking:) This version uses finegrained locks to make updates execute atomically. The granularity and conditions checked are the same as for the CAS version. Like the CAS version, this version contains data races but produces the same result as the TL version.</p><p>• HA (Hyperaccurate): The Update Locking version running with a smaller tol parameter (the original tol parameter divided by 1.25). The tol parameter controls the center-of-mass approximation in the force computation phase -the smaller the tol parameter, the deeper the phase goes into the space-subdivision tree before it approximates the effect of multiple distant bodies with their center of mass. We use this version to evaluate the accuracy consequences of dropping bodies from the spacesubdivision tree. We run all versions on a 16 core 2.4 GHz Intel Xeon E7340 with 16 GB of RAM and Debian version 2.6.27. We compile all versions with g++ -O4. We simulate 100 steps of a system with 256K bodies. We initialize the positions and velocities of the bodies to psuedorandom numbers and the masses of the bodies uniformly to 1.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.2">Accuracy</head><p>We define the distance ∆ X Y between two versions X and Y as:</p><formula xml:id="formula_0">∆ X Y = 0≤i&lt;N d(b X i , b Y i )</formula><p>Here b X i is the final position of the ith body at the end of the simulation that uses version X of the tree construction algorithm (and similarly for b</p><formula xml:id="formula_1">Y i ), d(b X i , b Y i )</formula><p>is the Euclidean distance between the final positions of corresponding bodies in the two simulations, and N is the number of bodies.</p><p>We evaluate the accuracy of a given version X by comparing its final body positions with those computed by the Hyperaccurate (HA) version. The minimum ∆ HA X , over all versions X = HA, all executions, and all number of cores, is 3041.48.</p><p>We next use the distance metric ∆ X Y to evaluate the inaccuracy that the use of approximate data structures introduces. Specifically, we compute ∆ HA F P − ∆ HA U L and ∆ HA F C − ∆ HA U L as the additional inaccuracy metric for the First Parallel and Final Check versions, respectively. These differences quantify the additional inaccuracy introduced by the use of approximate data structure construction algorithms in these versions. We compare these differences to ∆ HA U L . <ref type="table">Table 1</ref> presents the maximum (over the eight runs) additional inaccuracy metric for the First Parallel and Final Check versions as a function of the number of cores executing the computation. These numbers show that the accuracy loss introduced by the use of approximate data structures is four orders of magnitude smaller than the accuracy gain obtained by increasing the accuracy of the center of mass approximation (0.26 in comparison with 3041.48). This fact supports the acceptability of the approximate data structure construction algorithms -in comparison with the Hyperaccurate version, all other versions (including the approximate versions) compute results with essentially identical accuracy.</p><p>Final Check: <ref type="table" target="#tab_1">Table 2</ref> reports the maximum (over all eight executions) of the sum (over all 100 simulation steps) of the number of bodies that the First Parallel and Final Check versions drop. Note that there are 256K*100 inserted bodies in total. These numbers show that the number of dropped bodies is very small -even running on 16 cores with no final check to reduce the number of dropped bodies, in our eight runs the First Parallel algorithm drops at most 730 of the bodies it inserts. Other versions drop significantly fewer bodies. These numbers also show that the final check is effective in reducing the number of dropped bodies by a factor of 3 to 6 depending on the number of cores executing the computation.   after each of the 100 steps s of the simulation. Plotting these points reveals that they form curves characterized by the following equations:</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Number of Cores</head><formula xml:id="formula_2">∆ HA U L (s) = 0.3s 2 + 1.4s ∆ U L F P (s) = 0.002s 2 + 0.04s ∆ U L F C (s) = 0.0004s 2 + 0.008s</formula><p>The difference between the Hyperaccurate and Update Locking versions grows substantially faster than the difference between the Update Locking and First Parallel/Final Check versions. The First Parallel/Final Check versions will therefore remain as acceptably accurate as the Update Locking version even for long simulations with many steps. <ref type="table" target="#tab_2">Table 3</ref> presents speedup numbers for the different versions. All of the numbers are calculated relative to the sequential version, which executes without parallelization overhead. The TL version exhibits poor parallel performance (the performance decreases as the number of cores increases), which we attribute to a combination of synchronization overhead and bottlenecks associated with locking the top cells in the tree. The remaining versions scale -the FP and FC versions run between 5% to 10% faster than the synchronized versions. We attribute the performance difference to the synchronization overhead. Because the FP and FC versions have no synchronization, their base sequential performance is essentially identical to the sequential version.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.3">Performance</head></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.">Related Work</head><p>Parallel data structures relax the order in which operations such as queue insertions and removals can complete <ref type="bibr" target="#b9">[10,</ref><ref type="bibr" target="#b22">23]</ref>. Our research differs in that it delivers approximate data structures (which may drop inserted or appended elements) as opposed to relaxed data structures (which may relax the order in which operations execute but do not drop elements).</p><p>Wait-free data structures has been an active research area for some years <ref type="bibr" target="#b6">[7]</ref>. Our research differs in that 1) our synchronization-free algorithms use only reads and writes (wait-free data structures typically rely on complex synchronization primitives such as compare and swap or, more generally, transactional memory <ref type="bibr" target="#b7">[8]</ref>); 2) we do not aspire to provide a data structure that satisfies all of the standard correctness properties; and 3) our algorithms are essentially clean, easily-understandable sequential algorithms that have been engineered to execute in parallel without crashing. Wait-free implementations are typically significantly more complex than their sequential counterparts.</p><p>The QuickStep parallelizing compiler generates approximate code with acceptable data races <ref type="bibr" target="#b12">[13,</ref><ref type="bibr" target="#b13">14]</ref>; the Dubstep compiler removes synchronization in parallelized code (creating acceptable data races) <ref type="bibr" target="#b16">[17]</ref>. <ref type="bibr" target="#b19">[20]</ref> presents a simple unsynchronized accumulator and extensible array with a final check; <ref type="bibr" target="#b18">[19]</ref> presents unsynchronized parallel space-subdivision tree algorithms for the Barnes-Hut simulation <ref type="bibr" target="#b18">[19]</ref>.</p><p>Chaotic relaxation runs iterative solvers without barrier synchronization after each solver iteration <ref type="bibr" target="#b1">[2,</ref><ref type="bibr" target="#b4">5,</ref><ref type="bibr" target="#b25">26]</ref>. Convergence theorems prove that the computation will still converge even in the presence of data races. The performance impact depends on the specific problem at hand -some converge faster with chaotic relaxation, others more slowly. Chaotic solvers typically operate on arrays instead of linked data structures. Because chaotic solvers come with a convergence test, they (in principle) impact only the performance and not the accuracy. As used in the Barnes-Hut computation, approximate data structures do not come with a convergence test or any other run-time mechanism that checks the accuracy. Approximate data structures may therefore impact both the performance and the accuracy. For this reason we introduce an evaluation metric that evaluates the accuracy impact of approximate data structures in comparison with the accuracy impact of other approximation mechanisms, in this case the center of mass approximation that is at the heart of the Barnes-Hut algorithm.</p><p>The race-and-repair project has developed an unsynchronized parallel hash table insertion algorithm <ref type="bibr" target="#b26">[27]</ref>. Like our parallel tree construction algorithm, this algorithm may drop inserted entries. An envisioned higher layer in the system recovers from any errors that the absence of inserted elements may cause.</p><p>This paper (and a previous technical report <ref type="bibr" target="#b18">[19]</ref>) presents an algorithm that works with clients that simply use the tree as produced with no higher layer to deal with dropped bodies (and no need for such a higher layer). Because we evaluate the algorithm in the context of a complete computation, we develop an end-to-end accuracy measure and use that measure to evaluate the overall end-to-end acceptability of the algorithm. This measure enables us to determine that the approximate semantics of the synchronization-free algorithm has acceptable accuracy consequences for this computation.</p><p>The Cilkchess parallel chess program uses concurrently accessed transposition tables <ref type="bibr" target="#b5">[6]</ref>. Standard semantics require synchronization to ensure that the accesses execute atomically. The developers of Cilkchess determined, however, that the probability of losing a match because of the synchronization overhead was larger than the probability of losing a match because of unsynchronized accesses corrupting the transposition table. They therefore left the parallel accesses unsynchronized (so that Cilkchess contains data races) <ref type="bibr" target="#b5">[6]</ref>. Like Cilkchess, our parallel tree insertion algorithm improves performance by purposefully eliminating synchronization and therefore contains acceptable data races.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5.">Conclusion</head><p>The basic premise of this paper is that parallel algorithms, to the extent that they need to contain any synchronization at all, need contain only enough synchronization to ensure that they execute correctly enough to generate an acceptably accurate result.</p><p>We present general approximate tree and array building blocks (with associated approximate data structure construction algorithms) that can be composed to obtain approximate data structures. We use these building blocks to obtain an approximate synchronizationfree parallel space-subdivision tree construction algorithm that 1) contains data races but 2) nevertheless produces trees that are consistent enough for the BarnesHut N -body simulation to use successfully. Our experimental results demonstrate the performance benefits and acceptable accuracy consequences of this approach.</p></div><figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_0"><head></head><label></label><figDesc>template &lt;typename E, class T, 31: class I, int N, class X, typename P&gt; 32:class external : public T { 33: public: 34: bool isInternal() { return false; } 35: virtual void divide(I *t, P p) = 0; 36: virtual bool insert(E e, P p) = 0; 37 ... 38:};</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_1"><head>Figure 1 .</head><label>1</label><figDesc>Figure 1. Internal Tree Template and Insert Algorithm 1:template &lt;typename E, int M&gt; 2:class list { 3: public: int next; E elements[M]; 4: virtual bool append(E e) { 5: int i = next; 6: if (M &lt;= i) return false; 7: elements[i] = e; 8: next = i + 1; 9: return true; 10: } 11: ... 12:};</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_2"><head>Figure 2 .</head><label>2</label><figDesc>Figure 2. Array List Template and Append Algorithm</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_3"><head>•</head><label></label><figDesc>FP (First Parallel): The synchronization-free ap- proximate versions in Figures 1 and 2. • FC (Final Check): The synchronization-free ap- proximate versions augmented to use final checks.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_1" validated="false"><head>Table 2 .</head><label>2</label><figDesc></figDesc><table>Number of dropped bodies (out of 256K * 100 
total inserted bodies) for First Parallel (FP) and Final 
Check (FC) versions. 

Number of Cores 
Version 
1 
2 
4 
8 
16 
FC 
1.00 1.88 3.41 7.32 14.15 
FP 
1.00 1.87 3.38 7.28 14.02 
CAS 
0.95 1.75 3.23 6.86 13.21 
UL 
0.90 1.67 3.02 6.51 12.58 
TL 
0.83 0.87 0.58 0.40 0.39 

</table></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_2" validated="false"><head>Table 3 .</head><label>3</label><figDesc></figDesc><table>Speedup Numbers for Barnes-Hut Tree Con-
struction 

Long Simulations: To better understand the effect of 
the First Parallel and Final Check versions on the accu-
racy of the simulation as the number of steps increases, 
we computed ∆ S 
H , ∆ F P 
S , and ∆ F C 

S 

</table></figure>
		</body>
		<back>
			<div type="references">

				<listBibl>

<biblStruct xml:id="b0">
	<analytic>
		<title level="a" type="main">A hierarchical o(n log n) forcecalculation algorithm</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Barnes</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><surname>Hut</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Nature</title>
		<imprint>
			<biblScope unit="volume">324</biblScope>
			<biblScope unit="issue">4</biblScope>
			<biblScope unit="page" from="446" to="449" />
			<date type="published" when="1986" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b1">
	<analytic>
		<title level="a" type="main">Asynchronous iterative methods for multiprocessors</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">G</forename><surname>Baudet</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Journal of the ACM</title>
		<imprint>
			<biblScope unit="volume">25</biblScope>
			<biblScope unit="page" from="225" to="244" />
			<date type="published" when="1998-04" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b2">
	<analytic>
		<title level="a" type="main">Detecting and escaping infinite loops with jolt</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Michael</forename><surname>Carbin</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Sasa</forename><surname>Misailovic</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Michael</forename><surname>Kling</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Martin</forename><forename type="middle">C</forename><surname>Rinard</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">ECOOP</title>
		<imprint>
			<date type="published" when="2011" />
			<biblScope unit="page" from="609" to="633" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b3">
	<monogr>
				<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Chaudhuri</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Gulwani</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Lublinerman</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Navidpour</surname></persName>
		</author>
		<title level="m">Proving Programs Robust. FSE</title>
		<imprint>
			<date type="published" when="2011" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b4">
	<analytic>
		<title level="a" type="main">Chaotic relaxation</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Chazan</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">W</forename><surname>Mirankar</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Linear Algebra and its Applications</title>
		<imprint>
			<biblScope unit="volume">2</biblScope>
			<biblScope unit="page" from="119" to="222" />
			<date type="published" when="1969-04" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b5">
	<monogr>
		<title level="m" type="main">Using Cilk to write multiprocessor chess programs. The Journal of the International Computer Chess Association</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Don</forename><surname>Dailey</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Charles</forename><forename type="middle">E</forename><surname>Leiserson</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2002" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b6">
	<analytic>
		<title level="a" type="main">Wait-free synchronization</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Maurice</forename><surname>Herlihy</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">ACM Trans. Program. Lang. Syst</title>
		<imprint>
			<biblScope unit="volume">13</biblScope>
			<biblScope unit="issue">1</biblScope>
			<date type="published" when="1991" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b7">
	<analytic>
		<title level="a" type="main">Transactional memory: Architectural support for lock-free data structures</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Maurice</forename><surname>Herlihy</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><forename type="middle">B</forename><surname>Eliot</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Moss</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 20th Annual International Symposium on Computer Architecture</title>
		<meeting>the 20th Annual International Symposium on Computer Architecture</meeting>
		<imprint>
			<date type="published" when="1993-05" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b8">
	<monogr>
		<title level="m" type="main">Using Code Perforation to Improve Performance, Reduce Energy Consumption, and Respond to Failures</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Henry</forename><surname>Hoffmann</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Sasa</forename><surname>Misailovic</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Stelios</forename><surname>Sidiroglou</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Anant</forename><surname>Agarwal</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Martin</forename><surname>Rinard</surname></persName>
		</author>
		<idno>MIT-CSAIL-TR-2009-042</idno>
		<imprint>
			<date type="published" when="2009-09" />
		</imprint>
		<respStmt>
			<orgName>MIT</orgName>
		</respStmt>
	</monogr>
<note type="report_type">Technical Report</note>
</biblStruct>

<biblStruct xml:id="b9">
	<analytic>
		<title level="a" type="main">Incorrect systems: it&apos;s not the problem, it&apos;s the solution</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Christoph</forename><forename type="middle">M</forename><surname>Kirsch</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Hannes</forename><surname>Payer</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">DAC</title>
		<imprint>
			<date type="published" when="2012" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b10">
	<analytic>
		<title level="a" type="main">Bolt: on-demand infinite loop escape in unmodified binaries</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Michael</forename><surname>Kling</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Sasa</forename><surname>Misailovic</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Michael</forename><surname>Carbin</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Martin</forename><forename type="middle">C</forename><surname>Rinard</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">OOPSLA</title>
		<imprint>
			<date type="published" when="2012" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b11">
	<analytic>
		<title level="a" type="main">A new solution of dijkstra&apos;s concurrent programming problem</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Leslie</forename><surname>Lamport</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Communications of the ACM</title>
		<imprint>
			<biblScope unit="volume">17</biblScope>
			<biblScope unit="issue">8</biblScope>
			<biblScope unit="page" from="453" to="455" />
			<date type="published" when="1974" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b12">
	<analytic>
		<title level="a" type="main">Parallelizing sequential programs with statistical accuracy tests</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Misailovic</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Kim</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Rinard</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">ACM Transactions on Embedded Computing Systems</title>
		<imprint/>
	</monogr>
	<note>to appear</note>
</biblStruct>

<biblStruct xml:id="b13">
	<monogr>
		<title level="m" type="main">Parallelizing sequential programs with statistical accuracy tests</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Misailovic</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Kim</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Rinard</surname></persName>
		</author>
		<idno>MIT-CSAIL-TR-2010-038</idno>
		<imprint>
			<date type="published" when="2010-08" />
		</imprint>
		<respStmt>
			<orgName>MIT</orgName>
		</respStmt>
	</monogr>
<note type="report_type">Technical Report</note>
</biblStruct>

<biblStruct xml:id="b14">
	<analytic>
		<title level="a" type="main">Probabilistically accurate program transformations</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Sasa</forename><surname>Misailovic</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Daniel</forename><forename type="middle">M</forename><surname>Roy</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Martin</forename><forename type="middle">C</forename><surname>Rinard</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">SAS</title>
		<imprint>
			<date type="published" when="2011" />
			<biblScope unit="page" from="316" to="333" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b15">
	<analytic>
		<title level="a" type="main">Quality of service profiling</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Sasa</forename><surname>Misailovic</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Stelios</forename><surname>Sidiroglou</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Henry</forename><surname>Hoffmann</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Martin</forename><forename type="middle">C</forename><surname>Rinard</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">ICSE (1)</title>
		<imprint>
			<date type="published" when="2010" />
			<biblScope unit="page" from="25" to="34" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b16">
	<monogr>
		<title level="m" type="main">Dancing with uncertainty. RACES Workshop</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Sasa</forename><surname>Misailovic</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Stelios</forename><surname>Sidiroglou</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Martin</forename><surname>Rinard</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2012" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b17">
	<monogr>
		<title level="m" type="main">Parallel synchronization-free approximate data structure construction (full version)</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Martin</forename><surname>Rinard</surname></persName>
		</author>
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b18">
	<monogr>
		<title level="m" type="main">A lossy, synchronization-free, race-full, but still acceptably accurate parallel space-subdivision tree construction algorithm</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Martin</forename><surname>Rinard</surname></persName>
		</author>
		<idno>MIT- CSAIL-TR-2012-005</idno>
		<imprint>
			<date type="published" when="2012-02" />
		</imprint>
		<respStmt>
			<orgName>MIT</orgName>
		</respStmt>
	</monogr>
<note type="report_type">Technical Report</note>
</biblStruct>

<biblStruct xml:id="b19">
	<monogr>
		<title level="m" type="main">Unsynchronized techniques for approximate parallel computing. RACES Workshop</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Martin</forename><surname>Rinard</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2012" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b20">
	<analytic>
		<title level="a" type="main">Probabilistic accuracy bounds for fault-tolerant computations that discard tasks</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><surname>Martin</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Rinard</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">ICS</title>
		<imprint>
			<date type="published" when="2006" />
			<biblScope unit="page" from="324" to="334" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b21">
	<analytic>
		<title level="a" type="main">Using early phase termination to eliminate load imbalances at barrier synchronization points</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><surname>Martin</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Rinard</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">OOPSLA</title>
		<imprint>
			<date type="published" when="2007" />
			<biblScope unit="page" from="369" to="386" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b22">
	<analytic>
		<title level="a" type="main">Data structures in the multicore age</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Nir</forename><surname>Shavit</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">CACM</title>
		<imprint>
			<biblScope unit="volume">54</biblScope>
			<biblScope unit="issue">3</biblScope>
			<date type="published" when="2011" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b23">
	<analytic>
		<title level="a" type="main">Managing performance vs. accuracy trade-offs with loop perforation</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Stelios</forename><surname>Sidiroglou-Douskos</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Sasa</forename><surname>Misailovic</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Henry</forename><surname>Hoffmann</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Martin</forename><forename type="middle">C</forename><surname>Rinard</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">SIGSOFT FSE</title>
		<imprint>
			<date type="published" when="2011" />
			<biblScope unit="page" from="124" to="134" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b24">
	<analytic>
		<title level="a" type="main">Load balancing and data locality in adaptive hierarchical n-body methods: Barneshut, fast multipole, and radiosity</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Jaswinder Pal</forename><surname>Singh</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Chris</forename><surname>Holt</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Takashi</forename><surname>Totsuka</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Anoop</forename><surname>Gupta</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">John</forename><forename type="middle">L</forename><surname>Hennessy</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Journal Of Parallel and Distributed Computing</title>
		<imprint>
			<biblScope unit="volume">27</biblScope>
			<biblScope unit="page" from="118" to="141" />
			<date type="published" when="1995" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b25">
	<monogr>
		<title level="m" type="main">A convergence theorem for chaotic asynchronous relaxation. Linear Algebra and its Applications</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Strikwerda</surname></persName>
		</author>
		<imprint>
			<date type="published" when="1997-03" />
			<biblScope unit="volume">253</biblScope>
			<biblScope unit="page" from="15" to="24" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b26">
	<monogr>
		<title level="m" type="main">Presentation at OOPSLA</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Ungar</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2011-11" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b27">
	<analytic>
		<title level="a" type="main">Randomized accuracy-aware program transformations for efficient approximate computations</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Sasa</forename><surname>Zeyuan Allen Zhu</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Jonathan</forename><forename type="middle">A</forename><surname>Misailovic</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Martin</forename><forename type="middle">C</forename><surname>Kelner</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Rinard</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">POPL</title>
		<imprint>
			<date type="published" when="2012" />
			<biblScope unit="page" from="441" to="454" />
		</imprint>
	</monogr>
</biblStruct>

				</listBibl>
			</div>
		</back>
	</text>
</TEI>
