<?xml version="1.0" encoding="UTF-8"?>
<TEI xmlns="http://www.tei-c.org/ns/1.0" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
xsi:schemaLocation="http://www.tei-c.org/ns/1.0 /Users/atharsefid/Desktop/grobid-0.5.3/grobid-home/schemas/xsd/Grobid.xsd"
 xmlns:xlink="http://www.w3.org/1999/xlink">
	<teiHeader xml:lang="en">
		<encodingDesc>
			<appInfo>
				<application version="0.5.3" ident="GROBID" when="2020-09-29T02:50+0000">
					<ref target="https://github.com/kermitt2/grobid">GROBID - A machine learning software for extracting information from scholarly documents</ref>
				</application>
			</appInfo>
		</encodingDesc>
		<fileDesc>
			<titleStmt>
				<title level="a" type="main">Cloud-Native File Systems</title>
			</titleStmt>
			<publicationStmt>
				<publisher/>
				<availability status="unknown"><licence/></availability>
			</publicationStmt>
			<sourceDesc>
				<biblStruct>
					<analytic>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Remzi</forename><forename type="middle">H</forename><surname>Arpaci-Dusseau</surname></persName>
							<affiliation key="aff0">
								<orgName type="department" key="dep1">Computer Sciences Department</orgName>
								<orgName type="department" key="dep2">Inc</orgName>
								<orgName type="institution">University of Wisconsin-Madison</orgName>
							</affiliation>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Andrea</forename><forename type="middle">C</forename><surname>Arpaci-Dusseau</surname></persName>
							<affiliation key="aff0">
								<orgName type="department" key="dep1">Computer Sciences Department</orgName>
								<orgName type="department" key="dep2">Inc</orgName>
								<orgName type="institution">University of Wisconsin-Madison</orgName>
							</affiliation>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Venkat</forename><surname>Venkataramani</surname></persName>
							<affiliation key="aff0">
								<orgName type="department" key="dep1">Computer Sciences Department</orgName>
								<orgName type="department" key="dep2">Inc</orgName>
								<orgName type="institution">University of Wisconsin-Madison</orgName>
							</affiliation>
						</author>
						<title level="a" type="main">Cloud-Native File Systems</title>
					</analytic>
					<monogr>
						<imprint>
							<date/>
						</imprint>
					</monogr>
				</biblStruct>
			</sourceDesc>
		</fileDesc>
		<profileDesc>
			<abstract>
				<p>We present the case for cloud-native system design, fo-cused on the creation of CNFS, a local file system built specifically for the cloud era. We first present numerous storage and CPU design principles that any cloud-native storage system should consider; we demonstrate the utility of these principles through the design of CNFS. CNFS is a hierarchical, copy-on-write file system that migrates data and metadata across cloud storage volumes to meet user objectives, and harnesses remote CPU workers to perform critical background work such as migration and compression.</p>
			</abstract>
		</profileDesc>
	</teiHeader>
	<text xml:lang="en">
		<body>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="1">Introduction</head><p>The landscape of computer system design and implementation is undergoing a disruptive sea-change. The advent of cloud computing <ref type="bibr" target="#b3">[4]</ref> has transformed the basic substrate for systems building: instead of a physical infrastructure of machines, developers now can implement services upon a sophisticated virtualized platform <ref type="bibr" target="#b7">[8,</ref><ref type="bibr" target="#b17">18]</ref>, utilizing well-tested and heavily used distributed services to realize their end goals.</p><p>The first generation of services and systems built in the cloud are called cloud-enabled systems. In this version of the cloud, systems from the pre-cloud world are "ported" to the cloud, but run quite similarly to their pre-cloud selves. As a result, these systems do not take advantage of the scalable and robust services provided within clouds, nor do they take advantage of the fundamental benefits of copious (rented) compute cycles and storage.</p><p>We believe the next generation of services and systems must take a critical step forward, away from simply being cloud-enabled to become cloud-native systems <ref type="bibr" target="#b36">[37]</ref>. Cloud-native systems are designed not just to take advantage of the rentable nature of computing infrastructure, but intrinsically utilize now-standard cloud services to realize their end goals. For example, scalable, reliable distributed storage (e.g, Amazon's S3 <ref type="bibr" target="#b1">[2]</ref>, Google's Cloud Storage <ref type="bibr" target="#b18">[19]</ref>, Azure's Blob Storage <ref type="bibr" target="#b26">[27]</ref>) is now ubiquitous; these services form a strong storage base upon which to build systems, instead of building upon simple collections of raw storage resources (e.g., disk drives <ref type="bibr" target="#b4">[5]</ref>). Similarly, new serverless compute platforms <ref type="bibr" target="#b19">[20,</ref><ref type="bibr" target="#b27">28]</ref> (such as Amazon's Lambdas <ref type="bibr" target="#b8">[9]</ref> and Google's Cloud Functions <ref type="bibr" target="#b28">[29]</ref>) enable users to launch small pieces of computation on demand, scaling up or down readily, all without considering issues such as server provisioning or maintenance. Cloud-native systems exploit these basic cloud services to realize new, more flexible, high-performance, reliable systems and services more readily than ever before. An excellent current example is the Snowflake data warehouse <ref type="bibr" target="#b11">[12]</ref>, which is realized entirely atop Amazon services while providing high performance, reliability, security, and elasticity to clients.</p><p>In this paper, we focus our discussion on a specific type of cloud-native system, the cloud-native local file system. Currently, when running Linux on a virtualized instance in the cloud, one normally mounts a standard file system (such as ext4 or XFS) on a virtual block storage system, such as Amazon's EBS <ref type="bibr" target="#b34">[35]</ref>. Each EBS volume can be configured, perhaps choosing high performance (e.g., a high-IOPS, costly SSD-backed replicated partition) or low cost (e.g., a low-IOPS, inexpensive disk-backed partition). The file system itself remains unchanged, unaware that is even running upon a virtual storage system.</p><p>Our goal is simple: to reconsider how such a local file system should be built, given the presence of virtualized block storage such as provided by Amazon EBS and Google Persistent Disk. We thus discuss, in Section 3, the design of CNFS, a ground-up rethinking of the local file system which takes a hard dependency on these cloud services.</p><p>The CNFS architecture currently has the following form. CNFS is a hierarchical, copy-on-write file system that uses remote cloud workers to perform background tasks such as migration and deduplication; background work on remote machines improves foreground performance (by offloading it to distant CPUs) and also can harness multiple CPUs in parallel to perform such work quickly. CNFS migration is at the heart of the cost/performance trade-off presented to users; specifically, CNFS moves data and metadata across differently configured storage volumes to meet user cost and performance goals.</p><p>The CNFS design is rooted in numerous cloud-native principles, which we discuss and present in the next section. We consider two large classes of principles (storage and CPU) and one overarching principle (the cost/performance trade-off). The storage principles, in short, summarize what is important about building systems upon modern cloud storage infrastructure, including critical aspects such as reliability, capacity, cost, performance, and hierarchy; the CPU principles focus on similarly important concerns regarding the computation needed within systems, focusing upon parallelism, capacity, scaling, remote work, and hierarchy. Finally, the overarching principle centers around the cost/performance trade-off that cloud-native systems must make. By taking all such concerns into account, CNFS can deliver local file system service that meets the performance, reliability, and cost needs of the client.</p><p>In this paper, we present the following, looking both to spark discussion in the area of cloud-native systems as well as to solicit feedback on the specifics of CNFS. We begin by presenting our cloud-native principles in Section 2. We follow this with a discussion of CNFS in Section 3. Finally, we then present related work in Section 4 and conclude in Section 5.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2">Cloud-Native Principles</head><p>We now outline a number of cloud-native principles that underly this vision, building on early thinking in this space by Venkataramani <ref type="bibr" target="#b36">[37]</ref>. The principles, when applied correctly, can highlight new points in the systems design space which are directly enabled by the modern cloud. We group these principles into three major groups: storage principles, CPU principles, and one overall principle.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.1">Storage Principles</head><p>Our first focus is on storage principles: how should developers of cloud-enabled systems view the storage services offered within the cloud?</p><p>Storage reliability principle: Highly replicated, reliable, and available storage is widely available. One obvious principle of cloud-native systems is the ubiquity of reliable (highly durable) storage (11 "9s" according to Amazon <ref type="bibr" target="#b2">[3]</ref>). Much of the work of creating and managing replicas (for durability) can be pushed down into the infrastructure; as building replicated storage is challenging <ref type="bibr" target="#b15">[16]</ref>, utilizing a stable and widely tested system instead of rolling one's own is likely a wise option.</p><p>These systems exist in many forms, and thus one choice that must be made is how best to utilize them. For example, in some cases an object-based interface, such as that provided by Amazon S3, will likely be the best choice; in other cases, using a lower-level block-based interface such as Amazon's EBS will be best. In both cases, taking advantage of the reliability characteristics provided by these replicated services is key.</p><p>Storage cost principle: Storage space is generally inexpensive. There are two important perspectives that arise from the low cost of cloud storage. The first, and perhaps most important, is that storage, for most use cases, can largely be thought of as "free". For example, if one has 1 TB of data, it will cost only $4 per month to store this in archival storage (Glacier), and only somewhat more to store it in higher performance tiers.</p><p>Nearly-free storage has strong implications for higherlevel systems. For example, if making a specific type of index over data can improve performance, the space costs of doing so are so low that paying the cost for the space the index uses is likely well worth it. More generally, one should consider all the possible places in a system's design where using more space can improve system behavior.</p><p>The second important point is that, despite nearly free storage, storage is not absolutely free. Thus, optimizations to put as much "cold" data into cheaper tiers and only "hot" data in higher-cost tiers are worth considering. One can't simply make thousands of replicas and associated indexes, put them in the highest-cost SSD tier, and expect to build a cost-effective system.</p><p>Storage capacity principle: Large amounts of storage space are available. In cloud storage, there are seemingly no limits on how much space users can use. For example, the S3 website states "The total volume of data and number of objects you can store are unlimited."</p><p>This principle has strong implications for systems design. For example, issues such as space amplification are no longer a central concern: there are plenty of bytes available. Similarly, extra space presents a performance opportunity: more indices, pre-computed answer caches, and other space-consuming optimizations, can all be used to speed execution, as stated above. Finally, there is no need for capacity planning; just use what is needed when it is needed.</p><p>Storage bandwidth/latency principle: Storage services provided by cloud providers are generally high bandwidth; however, they have varying levels of latency. The cloud substrate does not provide a perfect storage system, with effectively infinite bandwidth and incredibly low latency. However, bandwidth generally is scalable, whereas latency depends on the storage tier.</p><p>This principle also has strong implications. Because bandwidth is generally available, scaling out is relatively easy, and should be realizable wherever needed. However, realizing low-latency storage requires extensive consideration; placement of metadata/data into different performance tiers (including memory-only storage layers) may be required to achieve desired latency goals.</p><p>Storage bandwidth-cost principle: Access to data is low cost. This principle once again highlights two points. The first point is that for most use-cases, bandwidth costs should not be of primary concern; one should simply access data as need be, as the costs are low.</p><p>The second point is also important: when data is partitioned across tiers, access to "less expensive" capacity tiers is generally more expensive. This point further suggests the need for careful management across tiers.</p><p>Storage hierarchy principle: Storage is available in many forms, with noticeable differences in performance and cost across each level. When combining the above principles, one realizes this hierarchy principle: data must be managed across levels of the cloud hierarchy, with more popular data in more expensive but faster storage, and less popular in slower cheaper storage.</p><p>Hierarchy management is thus central to cloud-native storage. Without it, a system will always reside in one (non-optimal) extreme, either paying too much for consistent high performance, or saving cost while delivering consistent poor performance.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.2">CPU Principles</head><p>Our next set of principles focus upon computation. With the cloud-native mindset, systems can take advantage of the vast fleets of CPUs now available as need be to achieve their ends. How best to use them, of course, depends upon the system at hand. In current clouds, this principle is true down to a certain time scale. For example, Amazon's Lambda service charges in 100ms increments; thus, if one can partition work into N 100ms (or more) units, one will pay a similar amount as running a single, longer running Lambda. Further, as Lambda services improve, this minimum time unit will likely decrease, enabling even finer-grained parallelism to be achieved.</p><p>CPU capacity principle: Large numbers of CPUs are available. What we saw with storage, we also see with CPU: there are essentially an unbounded number of CPUs available for computational tasks. Thus, if they are needed, they should be used. There is no need for the cloud-user or cloud-developer to worry excessively about exhausting CPU resources; that is the worry of the cloud provider.</p><p>The same corollary applies here as well: while CPUs are nearly free, they are not absolutely free. Thus, a framework for considering costs versus benefits would be useful towards making each utilization decision.</p><p>CPU scale-up/scale-down principle: One should only use as many CPUs as needed for a task, and not more. The parallelism principle suggests doing work in parallel, to the greatest extent possible; the capacity principle makes this possible. However, CPUs are not free. Thus, while systems should be willing to scale up to get work done quickly, they must also scale down to avoid paying for resources that are not needed at the moment. The implication for system design is clear here as well. Systems should not take static or simplistic approaches to parallelism. Rather, careful monitoring of usage and adaptation is required to best utilize the cloud. One interesting possibility for scale up is found in "spot" instances, which are cheap virtual CPUs that can be quickly recruited, but can be reclaimed by the provider as needed, thus requiring robust systems design to best make use of their capabilities.</p><p>CPU remote-work principle: When possible, use remote CPU resources to do needed work. With shared storage, it is easy to perform work over data on remote machines, as data is available throughout the datacenter. This separation generally leaves front-end machines free to focus on serving current workload demands; background work can be done elsewhere.</p><p>CPU hierarchy principle: CPU is available in different forms, with differences in performance, cost, and reliability across each level. When renting CPU cycles, different levels of performance are available at different costs, thus creating a new knob for systems to tune; should a service use a few more powerful CPUs, or many less powerful ones?</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.3">The Overall Principle</head><p>As hinted at in both the storage and CPU principles, there is an underlying driving force behind the creation of truly native cloud systems, the cost/performance trade-off:</p><p>Overall performance/cost principle: Every decision in cloud-native systems is ultimately driven by a cost/performance trade-off. A cost/performance tradeoff exists at the heart of many decisions in cloud-native systems and thus is a first-class concern. Not considering this factor leads to systems that are either cost-oblivious or performance-oblivious. In the former, the system may use excessive resources to get a task done quickly but at an exorbitant price; in the latter, a system may save pennies but return an answer sluggishly. Ideal cloud-native systems take both into account.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3">Case Study: Linux CNFS</head><p>Current Linux file systems were developed mostly for hard drives (e.g, ext4, XFS, ZFS) and occasionally for more modern media such as flash-based SSDs (e.g., f2fs). However, there is not yet a file system designed to operate effectively upon a cloud-based virtual storage platform such as Amazon's EBS or Google Persistent Disk. We now describe the Linux Cloud-Native File System (CNFS), a first step in this new direction.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.1">Underlying Assumptions</head><p>The CNFS design presumes the following from the cloud, and tailors its design towards maximally exploiting this environment. First, it assumes the presence of block-based virtualized storage such as Amazon's EBS or Google's Persistent Disk (PD), with the option of using a local scratch SSD or hard drive as needed.</p><p>Second, CNFS assumes that not only can a single client access the virtual volume, but that other machines in the system can also access the volume (for reasons explained below). Although Amazon does not allow such access for EBS, and Google does only in limited (i.e., read-only) fashion for PD, we believe there are excellent reasons to enable remote concurrent volume access, and thus assume it for the remainder of the discussion.</p><p>Third, CNFS assumes that the block store offers a number of different performance/cost configurations. Amazon, for example, provides two different SSD volumes and two different HDD volumes, with different performance/cost trade-offs. One CNFS focus will be to understand and exploit these different configurations to optimize performance, cost, or both for a given client.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.2">Basic Design</head><p>Our basic design for CNFS derives its design from the following cloud-native principles:</p><p>• The storage hierarchy principle. CNFS inherently understands that it is built atop virtualized blockbased storage systems, with volumes that can be configured at different cost/performance levels.</p><p>• The CPU remote-work principle. CNFS wishes to reserve local CPU for foreground performance. Thus, CNFS itself is structured to push as much filesystem work as possible to the background; CNFS can then take advantage of remote resources to perform the necessary background work.</p><p>• The overall performance/cost principle. Because CNFS is built to run in the cloud, it must intrinsically understand that decisions it makes have cost and performance ramifications. Thus, CNFS must have a cost-performance framework as part of its algorithmic core, enabling sensible trade-offs based on user desires; it must also export interfaces to enable user control over these features.</p><p>While these principles are at the core of CNFS (v1.0), other principles also underly our work. For example, using many CPUs to do background work is natural within CNFS (CPU parallelism), and CNFS presumes reliable replicated storage as its substrate (Storage reliability).</p><p>We thus envision the following design for CNFS. At its core, CNFS is a copy-on-write (COW) file system <ref type="bibr" target="#b6">[7,</ref><ref type="bibr" target="#b23">24,</ref><ref type="bibr" target="#b24">25,</ref><ref type="bibr" target="#b29">30]</ref>, never over-writing data or metadata in place but rather always writing data to unused storage. COW techniques are critical within CNFS, as they fundamentally enable remote work to be done upon read-only snapshots of the file system, thus obviating the need for complex synchronization between the foreground client and background workers. CNFS is also a hierarchical file system, building upon classic <ref type="bibr" target="#b13">[14,</ref><ref type="bibr" target="#b25">26]</ref> and more recent <ref type="bibr" target="#b21">[22]</ref> work in this area. CNFS actively moves files and directories across underlying storage volumes with different cost/performance properties, seeking to optimize usage based on user cost and performance requirements.</p><p>In addition, CNFS aggressively performs compression/deduplication <ref type="bibr" target="#b38">[39]</ref> as needed, saving storage space and cost in some cases, reducing bandwidth demands in others. This work is performed by remote workers, each of which can access portions of a read-only snapshot and transform it into a smaller, compressed format.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.3">Example I/O Flow</head><p>To give a better idea of how CNFS operates, we describe an example of its possible usage. <ref type="figure" target="#fig_1">Figure 1</ref> shows its basic operation. One the left, a client VM running two applications mounts CNFS and enables access to a CNFS virtual volume. Internally, CNFS maps data from this volume onto two cloud volumes, one a high-performance SSD (left) and the other a low-cost hard drive (right). All writes are directed to a current write point (Snapshot 10), whereas reads may refer to any active snapshot.</p><p>CNFS workers run on other machines, utilizing the parallelism of the cloud to enact background tasks such as compression or migration between volumes. In the figure, Snapshot 2 is being promoted to the SSD (because, perhaps, it has been accessed frequently in the recent past) and Snapshot 5 is being compressed (perhaps because it has been inactive).</p><p>A CNFS manager orchestrates all of this behavior, communicating with the CNFS file system and remote workers to ensure proper synchronization. The manager also serves as a policy engine, utilizing access statistics and policy goals gathered from CNFS to decide how to best place data and other related decisions.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.4">Status and Research Issues</head><p>CNFS is in early design phase, and thus we share it to spark new thoughts in the creation of cloud-native systems, as well as solicit feedback on its key elements. While building the core infrastructure, we are currently focusing upon the following research issues:</p><p>• Cost/Performance APIs. CNFS needs to export new APIs to specify cost/performance goals at many different granularities. How expressive should these controls be? What granularity is needed by higher-level systems and users? How should such information be tracked within the file system, and then shared with remote workers?</p><p>• Cost and Performance Speculation. CNFS monitors workloads and must make decisions about migration, compression, and other features, all while meeting user cost/performance goals. Thus, CNFS must be able to predict how various changes will affect future performance. What data must be collected to inform such decisions? What type of internal simulation and optimization framework should be built to make the decisions?</p><p>• Client and Remote Worker Synchronization. Because CNFS assumes the presence of cloud workers as part of its normal operation, correct and efficient synchronization between a client and workers is essential. How should synchronization be realized? How are worker faults detected and acted upon?</p><p>• Scalable Access Monitoring. CNFS decisionmaking, as described above, requires data on file and directory access. CNFS must thus track such information effectively and compactly, even for large file systems. Which information should be tracked? How often should it be communicated to the external manager? How should the manager store and use such data?</p><p>• Synchronous Workload Performance. In some cases, applications require frequent synchronization to durable storage for recovery purposes <ref type="bibr" target="#b10">[11]</ref>. However, such workloads do not run well upon copy-onwrite file systems (e.g., ZFS, while utilizing COW in its basic design, relies upon an intent log <ref type="bibr" target="#b6">[7]</ref>). Does CNFS require logging for high performance? Can a replicated memory tier be used instead to provide durability and high performance for these styles of workloads?</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4">Related Work</head><p>CNFS builds upon a long line of research. For example, numerous block-based systems internally reorganize data layout to improve performance or save space <ref type="bibr" target="#b0">[1,</ref><ref type="bibr" target="#b5">6,</ref><ref type="bibr" target="#b16">17,</ref><ref type="bibr" target="#b20">21,</ref><ref type="bibr" target="#b33">34,</ref><ref type="bibr" target="#b37">38]</ref>. An alternative to CNFS would be to build a smarter block layer, and thus realize similar benefits under an unchanged Linux file system. There are two primary reasons that adding this functionality at the file-system level is the better option. First, the file system has high-level information about semantically meaningful items such as files and directories; thus, providing fine-grained controls would be challenging (though perhaps not impossible <ref type="bibr" target="#b30">[31,</ref><ref type="bibr" target="#b31">32]</ref>) at block level. Second, migration of data at block level requires another layer of the system to implement crash-consistency machinery, thus complicating the system further <ref type="bibr" target="#b12">[13]</ref>; CNFS provides a unified, simpler approach to crash consistency by handling such activity itself. File systems that manage data and metadata across hierarchies have been studied for many years. Many early works focused upon migration of files from slow tapestorage systems onto higher-performing hard drives <ref type="bibr" target="#b13">[14,</ref><ref type="bibr" target="#b22">23,</ref><ref type="bibr" target="#b32">33]</ref>. CNFS builds upon this work but on a modern substrate of SSD-and HDD-based volumes.</p><p>Most recently, <ref type="bibr">Kwon et al. introduced Strata [22]</ref>, a system that places data upon NVM, Flash-based SSD, and hard drive in a unified hierarchical storage system. CNFS differs in its focus on utilizing cloud resources (remote workers and a manager) to perform background tasks, using more extensive analysis to migrate files across tiers, and its integration with existing cloud storage offerings. It would be an interesting exercise to transform Strata into a cloud-native version of itself.</p><p>Others have noted the potential impact of the cloud on systems design. Notably, Dewitt and Lang speculate that cloud-based approaches will lead to the end of "shared nothing" architectures <ref type="bibr" target="#b14">[15]</ref>.</p><p>Finally, industry interest in cloud-native systems is on the rise. The Snowflake data warehouse <ref type="bibr" target="#b11">[12]</ref> is a fully functional cloud-native data warehouse, serving as a pioneering example of what is possible. More recent efforts include RocksDBCloud <ref type="bibr" target="#b9">[10]</ref>, which places lower tiers of the RocksDB LSM tree into Amazon S3 buckets, and Kasten, a new venture investigating data management for cloud-native applications <ref type="bibr" target="#b35">[36]</ref>.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5">Conclude</head><p>We have presented CNFS, a first generation cloud-native file system. While many facets of its design and implementation are yet to be realized, we hope that its design, and the principles upon which it is built, can help move the field forward in this exciting new direction, thus enabling a new generation of high-performance, costeffective storage systems to be realized.</p></div><figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_0"><head></head><label></label><figDesc>CPU parallelism principle (or A · B = B · A): It should cost roughly the same to execute on A CPUs for B time units as it does to execute on B CPUs for A units of time. The ramifications of this principle are clear: if one can do work in parallel, one generally should, as it will complete faster and cost roughly the same.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_1"><head>Figure 1 :</head><label>1</label><figDesc>Figure 1: CNFS I/O Flows.</figDesc></figure>
		</body>
		<back>
			<div type="references">

				<listBibl>

<biblStruct xml:id="b0">
	<analytic>
		<title level="a" type="main">Adaptive Block Rearrangement</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Akyurek</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">K</forename><surname>Salem</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">ACM Trans. Comput. Syst</title>
		<imprint>
			<biblScope unit="volume">13</biblScope>
			<biblScope unit="issue">2</biblScope>
			<biblScope unit="page" from="89" to="121" />
			<date type="published" when="1995-05" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b1">
	<analytic>
		<title/>
		<ptr target="http://aws.amazon.com/s3/" />
	</analytic>
	<monogr>
		<title level="j">Amazon. Amazon Simple Storage Service (Amazon S3</title>
		<imprint>
			<date type="published" when="2012" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b2">
	<analytic>
		<title/>
	</analytic>
	<monogr>
		<title level="j">Amazon. Durability and Data Protection</title>
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b3">
	<monogr>
				<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Armbrust</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Fox</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Griffith</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><forename type="middle">D</forename><surname>Joseph</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><forename type="middle">H</forename><surname>Katz</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Konwinski</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">G</forename><surname>Lee</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><forename type="middle">A</forename><surname>Patterson</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Rabkin</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">I</forename><surname>Stoica</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Zaharia</surname></persName>
		</author>
		<title level="m">Above the Clouds: A Berkeley View of Cloud Computing. U.C. Berkeley Technical Report</title>
		<imprint>
			<date type="published" when="2009" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b4">
	<monogr>
				<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><forename type="middle">H</forename><surname>Arpaci-Dusseau</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><forename type="middle">C</forename><surname>Arpaci-Dusseau</surname></persName>
		</author>
		<title level="m">Operating Systems: Three Easy Pieces</title>
		<imprint>
			<date type="published" when="2014" />
		</imprint>
	</monogr>
	<note>Arpaci-Dusseau Books, 0.9 edition</note>
</biblStruct>

<biblStruct xml:id="b5">
	<analytic>
		<title level="a" type="main">BORG: BlockreORGanization for Self-optimizing Storage Systems</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Bhadkamkar</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Guerra</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">L</forename><surname>Useche</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Burnett</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Liptak</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Rangaswami</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">V</forename><surname>Hristidis</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 7th USENIX Symposium on File and Storage Technologies (FAST &apos;09)</title>
		<meeting>the 7th USENIX Symposium on File and Storage Technologies (FAST &apos;09)<address><addrLine>San Francisco</addrLine></address></meeting>
		<imprint>
			<date type="published" when="2009-02" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b6">
	<monogr>
		<title level="m" type="main">ZFS: The Last Word in File Systems</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Bonwick</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">B</forename><surname>Moore</surname></persName>
		</author>
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b7">
	<analytic>
		<title level="a" type="main">Disco: Running Commodity Operating Systems on Scalable Multiprocessors</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">E</forename><surname>Bugnion</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Devine</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Rosenblum</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 16th ACM Symposium on Operating Systems Principles (SOSP &apos;97)</title>
		<meeting>the 16th ACM Symposium on Operating Systems Principles (SOSP &apos;97)<address><addrLine>Saint-Malo, France</addrLine></address></meeting>
		<imprint>
			<date type="published" when="1997-10" />
			<biblScope unit="page" from="143" to="156" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b8">
	<monogr>
		<title level="m" type="main">What Is Amazon Cloud&apos;s Lambda And Why Is It A Big Deal? Network World</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">B</forename><surname>Butler</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2016-04" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b9">
	<monogr>
		<title level="m" type="main">RocksDBCloud: A Key-Value Store for Cloud Applications</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">I</forename><surname>Canadi</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Dong</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Others</forename></persName>
		</author>
		<ptr target="https://github.com/rockset/rocksdb-cloud" />
		<imprint>
			<date type="published" when="2017" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b10">
	<analytic>
		<title level="a" type="main">Optimistic Crash Consistency</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">V</forename><surname>Chidambaram</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><forename type="middle">S</forename><surname>Pillai</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><forename type="middle">C</forename><surname>Arpaci-Dusseau</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><forename type="middle">H</forename><surname>Arpaci-Dusseau</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 24th ACM Symposium on Operating Systems Principles (SOSP &apos;13)</title>
		<meeting>the 24th ACM Symposium on Operating Systems Principles (SOSP &apos;13)<address><addrLine>Nemacolin Woodlands Resort, Farmington, Pennsylvania</addrLine></address></meeting>
		<imprint>
			<date type="published" when="2013-10" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b11">
	<analytic>
		<title level="a" type="main">The Snowflake Elastic Data Warehouse</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">B</forename><surname>Dageville</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><surname>Cruanes</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Zukowski</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">V</forename><surname>Antonov</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Avanes</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Bock</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Claybaugh</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Engovatov</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Hentschel</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Huang</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><forename type="middle">W</forename><surname>Lee</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Motivala</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><forename type="middle">Q</forename><surname>Munir</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Pelley</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><surname>Povinec</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">G</forename><surname>Rahn</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Triantafyllis</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><surname>Unterbrunner</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 2016 ACM SIGMOD International Conference on Management of Data (SIGMOD &apos;16)</title>
		<meeting>the 2016 ACM SIGMOD International Conference on Management of Data (SIGMOD &apos;16)<address><addrLine>San Francisco, California</addrLine></address></meeting>
		<imprint>
			<date type="published" when="2016-06" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b12">
	<analytic>
		<title level="a" type="main">Journal-guided Resynchronization for Software RAID</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><forename type="middle">E</forename><surname>Denehy</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><forename type="middle">C</forename><surname>Arpaci-Dusseau</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><forename type="middle">H</forename><surname>Arpacidusseau</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 4th USENIX Symposium on File and Storage Technologies (FAST &apos;05)</title>
		<meeting>the 4th USENIX Symposium on File and Storage Technologies (FAST &apos;05)<address><addrLine>San Francisco, California</addrLine></address></meeting>
		<imprint>
			<date type="published" when="2005-12" />
			<biblScope unit="page" from="87" to="100" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b13">
	<analytic>
		<title level="a" type="main">Dynamic File Management Techniques</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><forename type="middle">B</forename><surname>Deshpande</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><forename type="middle">B</forename><surname>Bunt</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 7th IEEE Phoenix Conference on Computers and Communication</title>
		<meeting>the 7th IEEE Phoenix Conference on Computers and Communication</meeting>
		<imprint>
			<date type="published" when="1988" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b14">
	<monogr>
		<title level="m" type="main">Data Warehousing in the Cloud: The End of &apos;Shared-Nothing</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><forename type="middle">J</forename><surname>Dewitt</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">W</forename><surname>Lang</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2017-01" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b15">
	<analytic>
		<title level="a" type="main">Redundancy Does Not Imply Fault Tolerance: Analysis of Distributed Storage Reactions to Single Errors and Corruptions</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Ganesan</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Alagappan</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><forename type="middle">C</forename><surname>Arpaci-Dusseau</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><forename type="middle">H</forename><surname>Arpaci-Dusseau</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 15th USENIX Conference on File and Storage Technologies (FAST &apos;17)</title>
		<meeting>the 15th USENIX Conference on File and Storage Technologies (FAST &apos;17)<address><addrLine>Santa Clara, California</addrLine></address></meeting>
		<imprint>
			<date type="published" when="2017-02" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b16">
	<monogr>
		<title level="m" type="main">Minimizing mean seek distance in mirrored disk systems by cylinder remapping. Performance Evaluation</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Geist</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Reynolds</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Suggs</surname></persName>
		</author>
		<imprint>
			<date type="published" when="1994-05" />
			<biblScope unit="volume">20</biblScope>
		</imprint>
	</monogr>
	<note>Issues 1-3</note>
</biblStruct>

<biblStruct xml:id="b17">
	<analytic>
		<title level="a" type="main">Survey of Virtual Machine Research</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Goldberg</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE Computer</title>
		<imprint>
			<biblScope unit="volume">7</biblScope>
			<biblScope unit="issue">6</biblScope>
			<biblScope unit="page" from="34" to="45" />
			<date type="published" when="1974" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b18">
	<monogr>
		<title level="m" type="main">Google Storage for Developers</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Google</surname></persName>
		</author>
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b19">
	<analytic>
		<title level="a" type="main">Serverless Computation with OpenLambda</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Hendrickson</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Sturdevant</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><surname>Harter</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">V</forename><surname>Venkataramani</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><forename type="middle">C</forename><surname>Arpaci-Dusseau</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><forename type="middle">H</forename><surname>Arpaci-Dusseau</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">The Eighth USENIX Workshop on Hot Topics in Cloud Computing (HotCloud&apos;16)</title>
		<meeting><address><addrLine>Denver, Colorado</addrLine></address></meeting>
		<imprint>
			<date type="published" when="2016-06" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b20">
	<analytic>
		<title level="a" type="main">The Automatic Improvement of Locality in Storage Systems</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">W</forename><forename type="middle">W</forename><surname>Hsu</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><forename type="middle">J</forename><surname>Smith</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">H</forename><forename type="middle">C</forename><surname>Young</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">ACM Trans. Comput. Syst</title>
		<imprint>
			<biblScope unit="volume">23</biblScope>
			<biblScope unit="issue">4</biblScope>
			<biblScope unit="page" from="424" to="473" />
			<date type="published" when="2005" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b21">
	<analytic>
		<title level="a" type="main">Strata: A Cross Media File System</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Y</forename><surname>Kwon</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">H</forename><surname>Fingler</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><surname>Hunt</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Peter</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">E</forename><surname>Witchel</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><surname>Anderson</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 26th ACM Symposium on Operating Systems Principles (SOSP &apos;17)</title>
		<meeting>the 26th ACM Symposium on Operating Systems Principles (SOSP &apos;17)<address><addrLine>Shanghai, China</addrLine></address></meeting>
		<imprint>
			<date type="published" when="2017-10" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b22">
	<analytic>
		<title level="a" type="main">Experiments with Automatic File Migration</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><forename type="middle">H</forename><surname>Lawrie</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><forename type="middle">M</forename><surname>Randal</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><forename type="middle">R</forename><surname>Barton</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Computer</title>
		<imprint>
			<biblScope unit="volume">15</biblScope>
			<biblScope unit="issue">7</biblScope>
			<date type="published" when="1982-07" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b23">
	<analytic>
		<title level="a" type="main">Physical Integrity in a Large Segmented Database</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Lorie</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">ACM Transactions on Databases</title>
		<imprint>
			<biblScope unit="volume">2</biblScope>
			<biblScope unit="issue">1</biblScope>
			<biblScope unit="page" from="91" to="104" />
			<date type="published" when="1977" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b24">
	<monogr>
		<title level="m" type="main">The Btrfs Filesystem</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><surname>Mason</surname></persName>
		</author>
		<ptr target="oss.oracle.com/projects/btrfs/dist/documentation/btrfs-ukuug.pdf" />
		<imprint>
			<date type="published" when="2007-09" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b25">
	<analytic>
		<title level="a" type="main">Background Data Movement in a Logstructured Disk Subsystem</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">B</forename><surname>Mcnurr</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IBM Journal of Research and Development</title>
		<imprint>
			<biblScope unit="volume">38</biblScope>
			<biblScope unit="issue">1</biblScope>
			<biblScope unit="page" from="47" to="58" />
			<date type="published" when="1994" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b26">
	<monogr>
		<title level="m" type="main">Azure Blob Storage. azure.microsoft.com/enus/services/storage/blobs</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Microsoft</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2017" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b27">
	<analytic>
		<title level="a" type="main">SOCK: Rapid Task Provisioning with Serverless-Optimized Containers</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">E</forename><surname>Oakes</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">L</forename><surname>Yang</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Zhou</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">K</forename><surname>Houck</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><surname>Harter</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><forename type="middle">C</forename><surname>Arpaci-Dusseau</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><forename type="middle">H</forename><surname>Arpaci-Dusseau</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the USENIX Annual Technical Conference (USENIX ATC &apos;18)</title>
		<meeting>the USENIX Annual Technical Conference (USENIX ATC &apos;18)<address><addrLine>Boston, Massachusetts</addrLine></address></meeting>
		<imprint>
			<date type="published" when="2018-07" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b28">
	<monogr>
		<title level="m" type="main">Serverless on Google with Cloud Functions and React</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Odewahn</surname></persName>
		</author>
		<ptr target="www.oreilly.com/learning/serverless-on-google-with-cloud-functions-and-react" />
		<imprint>
			<date type="published" when="2017-07" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b29">
	<analytic>
		<title level="a" type="main">The Design and Implementation of a Log-Structured File System</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Rosenblum</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Ousterhout</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">ACM Trans. Comput. Syst</title>
		<imprint>
			<biblScope unit="volume">10</biblScope>
			<biblScope unit="issue">1</biblScope>
			<biblScope unit="page" from="26" to="52" />
			<date type="published" when="1992-02" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b30">
	<analytic>
		<title level="a" type="main">Improving Storage System Availability with D-GRAID</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Sivathanu</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">V</forename><surname>Prabhakaran</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><forename type="middle">C</forename><surname>Arpaci-Dusseau</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><forename type="middle">H</forename><surname>Arpaci-Dusseau</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 3rd USENIX Symposium on File and Storage Technologies (FAST &apos;04)</title>
		<meeting>the 3rd USENIX Symposium on File and Storage Technologies (FAST &apos;04)<address><addrLine>San Francisco, California</addrLine></address></meeting>
		<imprint>
			<date type="published" when="2004-04" />
			<biblScope unit="page" from="15" to="30" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b31">
	<analytic>
		<title level="a" type="main">Semantically-Smart Disk Systems</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Sivathanu</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">V</forename><surname>Prabhakaran</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">F</forename><forename type="middle">I</forename><surname>Popovici</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><forename type="middle">E</forename><surname>Denehy</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><forename type="middle">C</forename><surname>Arpaci-Dusseau</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><forename type="middle">H</forename><surname>Arpacidusseau</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 2nd USENIX Symposium on File and Storage Technologies (FAST &apos;03)</title>
		<meeting>the 2nd USENIX Symposium on File and Storage Technologies (FAST &apos;03)<address><addrLine>San Francisco, California</addrLine></address></meeting>
		<imprint>
			<date type="published" when="2003-04" />
			<biblScope unit="page" from="73" to="88" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b32">
	<analytic>
		<title level="a" type="main">Long Term File Migration: Development and Evaluation of Algorithms</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><forename type="middle">J</forename><surname>Smith</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Commun. ACM</title>
		<imprint>
			<biblScope unit="volume">24</biblScope>
			<biblScope unit="issue">8</biblScope>
			<date type="published" when="1981-08" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b33">
	<monogr>
		<title level="m" type="main">Optimization of I/0 Systems by Cache Disks and File Migration: A Summary. Performance Evaluation</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><forename type="middle">J</forename><surname>Smith</surname></persName>
		</author>
		<imprint>
			<date type="published" when="1981" />
			<biblScope unit="volume">1</biblScope>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b34">
	<monogr>
		<title level="m" type="main">Summary of the Amazon EC2 and Amazon RDS Service Disruption in the US East Region</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Aws</forename><surname>The</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Team</surname></persName>
		</author>
		<ptr target="http://aws.amazon.com/message/65648/" />
		<imprint>
			<date type="published" when="2011-04" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b35">
	<monogr>
		<title/>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">N</forename><surname>Tolia</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">V</forename><surname>Kamra</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">G</forename><surname>Matev</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Lopez</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><surname>Manville</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Vorbau</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">I</forename><surname>Kislenko</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">I</forename><surname>Mitra</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Kasten</surname></persName>
		</author>
		<ptr target="https://kasten.io" />
		<imprint>
			<date type="published" when="2018" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b36">
	<monogr>
		<title level="m" type="main">Challenges, Economics, and Principles of Cloud Native Systems. Talk at University of Wisconsin-Madison</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">V</forename><surname>Venkataramani</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2017-10" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b37">
	<analytic>
		<title level="a" type="main">The HP AutoRAID Hierarchical Storage System</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Wilkes</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Golding</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><surname>Staelin</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><surname>Sullivan</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">ACM Trans. Comput. Syst</title>
		<imprint>
			<biblScope unit="volume">14</biblScope>
			<biblScope unit="issue">1</biblScope>
			<biblScope unit="page" from="108" to="136" />
			<date type="published" when="1996-02" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b38">
	<analytic>
		<title level="a" type="main">Avoiding the Disk Bottleneck in the Data Domain Deduplication File System</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">B</forename><surname>Zhu</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">K</forename><surname>Li</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">H</forename><surname>Patterson</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 6th USENIX Symposium on File and Storage Technologies (FAST &apos;08)</title>
		<meeting>the 6th USENIX Symposium on File and Storage Technologies (FAST &apos;08)<address><addrLine>San Jose, California</addrLine></address></meeting>
		<imprint>
			<date type="published" when="2008-02" />
		</imprint>
	</monogr>
</biblStruct>

				</listBibl>
			</div>
		</back>
	</text>
</TEI>
