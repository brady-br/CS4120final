<?xml version="1.0" encoding="UTF-8"?>
<TEI xmlns="http://www.tei-c.org/ns/1.0" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
xsi:schemaLocation="http://www.tei-c.org/ns/1.0 /Users/atharsefid/Desktop/grobid-0.5.3/grobid-home/schemas/xsd/Grobid.xsd"
 xmlns:xlink="http://www.w3.org/1999/xlink">
	<teiHeader xml:lang="en">
		<encodingDesc>
			<appInfo>
				<application version="0.5.3" ident="GROBID" when="2020-09-29T02:06+0000">
					<ref target="https://github.com/kermitt2/grobid">GROBID - A machine learning software for extracting information from scholarly documents</ref>
				</application>
			</appInfo>
		</encodingDesc>
		<fileDesc>
			<titleStmt>
				<title level="a" type="main">FastScale: Accelerate RAID Scaling by Minimizing Data Migration</title>
			</titleStmt>
			<publicationStmt>
				<publisher/>
				<availability status="unknown"><licence/></availability>
			</publicationStmt>
			<sourceDesc>
				<biblStruct>
					<analytic>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Weimin</forename><surname>Zheng</surname></persName>
							<affiliation key="aff0">
								<orgName type="institution">Tsinghua University</orgName>
							</affiliation>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Guangyan</forename><surname>Zhang</surname></persName>
							<affiliation key="aff0">
								<orgName type="institution">Tsinghua University</orgName>
							</affiliation>
						</author>
						<title level="a" type="main">FastScale: Accelerate RAID Scaling by Minimizing Data Migration</title>
					</analytic>
					<monogr>
						<imprint>
							<date/>
						</imprint>
					</monogr>
				</biblStruct>
			</sourceDesc>
		</fileDesc>
		<profileDesc>
			<abstract>
				<p>Previous approaches to RAID scaling either require a very large amount of data to be migrated, or cannot tolerate multiple disk additions without resulting in disk imbalance. In this paper, we propose a new approach to RAID-0 scaling called FastScale. First, FastScale minimizes data migration, while maintaining a uniform data distribution. With a new and elastic addressing function, it moves only enough data blocks from old disks to fill an appropriate fraction of new disks without migrating data among old disks. Second, FastScale optimizes data migration with two techniques: (1) it accesses multiple physically successive blocks via a single I/O, and (2) it records data migration lazily to minimize the number of metadata writes without compromising data consistency. Using several real system disk traces, our experiments show that compared with SLAS, one of the most efficient traditional approaches, FastScale can reduce redistribution time by up to 86.06% with smaller maximum response time of user I/Os. The experiments also illustrate that the performance of the RAID-0 scaled using FastScale is almost identical with that of the round-robin RAID-0.</p>
			</abstract>
		</profileDesc>
	</teiHeader>
	<text xml:lang="en">
		<body>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="1">Introduction</head><p>Redundant Array of Inexpensive Disks (RAID) <ref type="bibr" target="#b0">[1]</ref> was proposed to achieve high performance, large capacity and data reliability, while allowing a RAID volume to be managed as a single device. As user data increase and computing powers enhance, applications often require larger storage capacity and higher I/O performance. To supply needed capacity and/or bandwidth, one solution is to add new disks to a RAID volume. This disk addition is termed "RAID scaling".</p><p>To regain uniform data distribution in all disks including the old and the new, RAID scaling requires certain blocks to be moved onto added disks. Furthermore, in today's server environments, many applications (e.g., ebusiness, scientific computation, and web servers) access data constantly. The cost of downtime is extremely high <ref type="bibr" target="#b1">[2]</ref>, giving rise to the necessity of online and real-time scaling.</p><p>Traditional approaches <ref type="bibr" target="#b2">[3,</ref><ref type="bibr" target="#b3">4,</ref><ref type="bibr" target="#b4">5]</ref> to RAID scaling are restricted by preserving the round-robin order after adding disks. The addressing algorithm can be expressed as follows for the i th scaling operation:</p><formula xml:id="formula_0">f i (x) : d = x mod N i b = x/N i<label>(1)</label></formula><p>where block b of disk d is the location of logical block x, and N i gives the total number of disks. Generally speaking, as far as RAID scaling from m disks to m + n is concerned, only the data blocks in the first stripe are not moved. This indicates that almost 100 percent of data blocks have to be migrated no matter what the numbers of old disks and new disks are. There are some efforts <ref type="bibr" target="#b2">[3,</ref><ref type="bibr" target="#b4">5]</ref> concentrating on optimization of data migration. They improve the performance of RAID scaling by a certain degree, but do not overcome the limitation of large data migration completely. The most intuitive method to reduce data migration is the semi-RR <ref type="bibr" target="#b5">[6]</ref> algorithm. It requires a block movement only if the resulting disk number is one of new disks. The algorithm can be expressed as follows for the i th scaling operation:</p><formula xml:id="formula_1">g i (x) = g i−1 (x) if (x mod N i ) &lt; N i−1 f i (x) otherwise<label>(2)</label></formula><p>Semi-RR reduces data migration significantly. Unfortunately, it does not guarantee uniform distribution of data blocks after subsequent scaling operations (see section 2.4). This will deteriorate the initial equally distributed load.</p><p>In this paper, we propose a novel approach called FastScale to redistribute data for RAID-0 scaling. It accelerates RAID-0 scaling by minimizing data migration. As shown in <ref type="figure" target="#fig_0">Figure 1</ref>, FastScale moves only data blocks from old disks to new disks enough for preserving the uniformity of data distribution, while not migrating data among old disks. Consequently, the migration fraction of FastScale reaches the lower bound of the migration fraction, n/(m + n). In other words, FastScale succeeds in minimizing data migration for RAID scaling.</p><p>We design an elastic addressing function through which the location of one block can be easily computed without any lookup operation. By using this function, FastScale changes only a fraction of the data layout while preserving the uniformity of data distribution. FastScale has several unique features as follows:</p><p>• FastScale maintains a uniform data distribution after RAID scaling.</p><p>• FastScale minimizes the amount of data to be migrated entirely.</p><p>• FastScale preserves a simple management of data due to deterministic placement.</p><p>• FastScale can sustain the above three features after multiple disk additions.</p><p>FastScale also exploits special physical properties to optimize online data migration. First, it uses aggregate accesses to improve the efficiency of data migration. Second, it records data migration lazily to minimize the number of metadata updates while ensuring data consistency.</p><p>We implement a detailed simulator that uses DiskSim as a worker module to simulate disk accesses. Under several real-system workloads, we evaluate the traditional approach and the FastScale approach. The experimental results demonstrate that:</p><p>• Compared with one of the most efficient traditional approaches, FastScale shortens redistribution time by up to 86.06% with smaller maximum response time of user I/Os.</p><p>• The performance of the RAID scaled using FastScale is almost identical with that of the roundrobin RAID.</p><p>In this paper, we only describe our solution for RAID-0, i.e., striping without parity. The solution can also work for RAID-10 and RAID-01. Although we do not handle RAID-4 and RAID-5, we believe that our method provides a good starting point for efficient scaling of RAID-4 and RAID-5 arrays.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2">Minimizing Data Migration</head></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.1">Problem Statement</head><p>For disk addition into a RAID, it is desirable to ensure an even load on all the disks and minimal block movement. Since the location of a block may be changed during a scaling operation, another objective is to quickly compute the current location of a block.</p><p>To achieve the above objectives, the following three requirements should be satisfied for RAID scaling:</p><p>• Requirement 1 (Uniform data distribution): If there are B blocks stored on m disks, the expected number of blocks on each disk is approximately B/m so as to maintain an even load.</p><p>• Requirement 2 (Minimal Data Migration): During the addition of n disks to a RAID with m disks storing B blocks, the expected number of blocks to be moved is B × n/(m + n).</p><p>• Requirement 3 (Fast data Addressing): In a m-disk RAID, the location of a block is computed by an algorithm with low space and time complexity.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.2">Two Examples of RAID Scaling</head><p>Example 1: To understand how the FastScale algorithm works and how it satisfies all of the three requirements, we take RAID scaling from 3 disks to 5 as an example. As shown in <ref type="figure" target="#fig_2">Figure 2</ref>, one RAID scaling process can be divided into two stages logically: data migration and data filling. In the first stage, a fraction of existing data blocks are migrated to new disks. In the second stage, new data are filled into the RAID continuously. Actually, the two stages, data migration and data filling, can be overlapped in time.</p><p>For the RAID scaling, each 5 sequential locations in one disk are grouped into one segment. For the 5 disks, 5 segments with the same physical address are grouped  <ref type="table" target="#tab_4">0  24  21  18  15  12  9  6  27  3  30   2  26  23  20  17  14  11  8  29  5  32   1  25  22  19  16  13  10  7  28  4  31   D0   D1   D2   24  21  12  9  6  27   2  20  17  14  29  5  32   1  25  16  13  10  28  31   D3   D4  26  23  19  11  8  4   0  22  18  15  7  3  30</ref> New data is filled in Figure 2: RAID scaling from 3 disks to 5 using FastScale, where m ≥ n.</p><p>into one region. In <ref type="figure" target="#fig_2">Figure 2</ref>, different regions are separated with a wavy line. For different regions, the ways to data migration and data filling are exactly identical.</p><p>In a region, all of the data blocks within a parallelogram will be moved. The base of the parallelogram is 2, and the height is 3. In other words, 2 data blocks are selected from each old disk and migrated to new disks. The 2 blocks are sequential, and the start address is disk no. <ref type="figure" target="#fig_2">Figure 2</ref> depicts the moving trace of each migrating block. For one moving data block, only its physical disk number is changed while its physical block number is unchanged. As a result, the five columns of two new disks will contain 1, 2, 2, 1, and 0 migrated data blocks, respectively. Here, the data block in the first column will be placed upon disk 3, while the data block in the fourth column will be placed upon disk 4. The first blocks in columns 2 and 3 are placed on disk 3, and the second blocks in columns 2 and 3 are placed on disk 4. Thus, each new disk has 3 data blocks.</p><p>After data migration, each disk, either old or new, has 3 data blocks. That is to say, FastScale regains a uniform data distribution. The total number of data blocks to be moved is 2 × 3 = 6. This reaches the minimal number of moved blocks, (5 × 3) × (2/(3 + 2)) = 6. We can claim that the RAID scaling using FastScale can satisfy Requirement 1 and Requirement 2.</p><p>Let us examine whether FastScale can satisfy Requirement 3, i.e., fast data addressing. To consider how one logical data block is addressed, we divide all the data space in the RAID into three categories: original and unmoved data, original and migrated data, and new data. A conclusion can be drawn from the following description Figure 3: RAID scaling from 2 disks to 5 using FastScale, where m &lt; n.</p><p>that the calculation overhead for the data addressing is very low.</p><p>• The original and unmoved data can be addressed with the original addressing method. In this example, the ordinal number of the disk holds one block x can be calculated: d = x mod 3. Its physical block number can be calculated: b = x/3.</p><p>• The addressing method for original and migrated data can be obtained easily from the above description about the trace of the data migration. b = x/3. For those blocks in the first triangle, i.e., blocks 0, 3, and 4, we have d = d 0 + 3. For those blocks in the last triangle, i.e., blocks 7, 8, and 11, we have</p><formula xml:id="formula_2">d = d 0 + 2. Here, d 0 is their original disk.</formula><p>• Each region can hold 5 × 2 = 10 new blocks. In one region, how those new data blocks are placed is shown in <ref type="figure">Figure</ref>  Example 2: In the above example, the number of the old disks m and the number of the new disks n satisfy the condition: m ≥ n. In the following, we inspect the case when m &lt; n. Take RAID scaling from 2 disks to 5 as an example. Here, m = 2 and n = 3.</p><p>Likewise, in a region, all of the data blocks within a parallelogram will be moved. The base of the parallelogram is 3, and the height is 2. 3 consecutive data blocks are selected from each old disk and migrated to  new disks. <ref type="figure">Figure 3</ref> depicts the trace of each migrating block. Similarly, for one moving data block, only its physical disk number is changed while its physical block number is unchanged. As a result, five columns of three new disks will have a different number of existing data blocks: 1, 2, 2, 1, 0. Here, the data block in the first column will be placed upon disk 3, while the data block in the fourth column will be placed upon disk 4. Unlike the first example, the first block in columns 2 and 3 are placed on disks 2 and 3, respectively. Thus, each new disk has 2 data blocks. Similar to the first example, we can demonstrate that the RAID scaling using FastScale can satisfy the three requirements. When a RAID is constructed from scratch (i.e., t = 0), it is a round-robin RAID actually. The address of block x can be calculated via one division and one modular (line 2).</p><formula xml:id="formula_3">m ← H[0], d ← x mod m, b ← x / m 3: exit 4: m ← H[t-1], n ← H[t] -m, δ ← m -H[0] 5: if x ∈ [0, m × s − 1] // an original data block 6: Addressing(t-1, H, s, x, d 0 , b 0 ) 7: b 1 ← (b 0 -δ ) mod (m+n) 8: if b 1 ∈ [d 0 , d 0 +n -1] //</formula></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.3">The Addressing Algorithm</head><p>Let us inspect the t th scaling, where n disks are added into a RAID made up of m disks (line 4).</p><p>(1) If block x is an original block (line 5), FastScale  calculates its old address (d 0 , b 0 ) before the t th scaling (line 6).</p><p>• If (d 0 , b 0 ) needs to be moved, FastScale changes the disk ordinal number while keeping the block ordinal number unchanged (line 9).</p><p>• If (d 0 , b 0 ) does not need to be moved, FastScale keeps the disk ordinal number and the block ordinal number unchanged (line 11).</p><p>(2) If block x is a new block, FastScale places it via the Placing() procedure (line 13).</p><p>The code of line 8 is used to decide whether a data block (d 0 , b 0 ) will be moved during RAID scaling. As shown in <ref type="figure" target="#fig_2">Figures 2 and 3</ref>, there is a parallelogram in each region. The base of the parallelogram is n, and the height is m. If and only if the data block is within a parallelogram, it will be moved. One parallelogram mapped to disk d 0 is a line segment. Its beginning and end are d 0 and d 0 + n − 1, respectively. If b 1 is within the line segment, block x is within the parallelogram, and therefore it will be moved. After a RAID scaling by adding n disks, the left-above vertex of the parallelogram proceeds by n blocks (line 7).</p><p>Once a data block is determined to be moved, FastScale changes its disk ordinal number with the Moving() function. As shown in <ref type="figure" target="#fig_4">Figure 4</ref>, a migrating parallelogram is divided into three parts: a head triangle, a body parallelogram, and a tail triangle. How a block moves depends on which part it lies in. No matter which is bigger between m and n, the head triangle and the tail Procedure: Placing(x, m, n, s, δ , d, b) Input:</p><p>x: logical block number m: the number of old disks n: the number of new disks s: total number of data blocks in one disk δ : offset of the first region Output:</p><p>d: new disk holding the block b: physical block of new location 1: y←x -m×s 2: b← y / n row← y mod n 3: e← (b-δ ) mod (m+n) 4: if e &lt; n 5:</p><p>if row &lt; e+1 6: d← row 7: else 8: d← row+m 9: else 10:</p><p>d← row+e-n+1 triangle keep their shapes unchanged. The head triangle will be moved by m disks (line 3, 9), while the tail triangle will be moved by n disks (line 5, 11). However, the body is sensitive to the relationship between m and n. The body is twisted from a parallelogram to a rectangle when m ≥ n (line 6), while from a rectangle to a parallelogram when m &lt; n (line 12). FastScale keeps the relative locations of all blocks in the same column.</p><p>When block x is in the location newly added after the last scaling, it is addressed via the Placing() procedure. If block x is a new block, it is the y th new block (line 1). Each stripe holds n new blocks. So, we have b = y/n (line 2). The order of placing new blocks is shown in <ref type="figure" target="#fig_0">Figures 2 and 3 (line 4-10)</ref>.</p><p>This algorithm is very simple. It requires fewer than 50 lines of C code, reducing the likelihood that a bug will cause a data block to be mapped to the wrong location.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.4">Property Examination</head><p>The purpose of this experiment is to quantitatively characterize whether the FastScale algorithm satisfies the three requirements, described in Subsection 2.1. For this purpose, we compare FastScale with the round-robin algorithm and the semi-RR algorithm. From a 4-disk array, we add one disk repeatedly for 10 times using the three algorithms respectively. Each disk has a capacity of 128 GB, and the size of a data block is 64 KB. In other words, each disk holds 2 × 1024 2 blocks.</p><p>Uniform data distribution. We use the coefficient of variation as a metric to evaluate the uniformity of data Conversely, the semi-RR algorithm causes excessive oscillation in the coefficient of variation. The maximum is even 13.06 percent. The reason for this non-uniformity is given as follows. An initial group of 4 disks makes the blocks be placed in a round-robin fashion. When the first scaling operation adds one disk, then 1/5 of all blocks, where (x mod 5) ≥ 4, are moved onto the new disk, Disk 4. However, with another operation of adding one more disk using the same approach, 1/6 of all the blocks are not evenly picked from the 5 old disks and moved onto the new disk, Disk 5. Only certain blocks from disks 1, 3 and 4 are moved onto disk 5 while disk 0 and disk 2 are ignored. This is because disk 5 will contain blocks with logical numbers that satisfy (x mod 6) = 5, which are all odd numbers. The logical numbers of those blocks on Disks 0 and 2, resulting from (x mod 4) = 0 and (x mod 4) = 2 respectively, are all even numbers. Therefore, blocks from disks 0 and 2 do not qualify and are not moved.</p><p>Minimal data migration. <ref type="figure" target="#fig_5">Figure 6</ref> plots the migration fraction (i.e., the fraction of data blocks to be migrated) versus the number of scaling operations. Using the round-robin algorithm, the migration fraction is constantly 100%. This will bring a very large migration cost.</p><p>The migration fractions using the semi-RR algorithm and using FastScale are identical. They are significantly smaller than the migration fraction of using the round- robin algorithm. Another obvious phenomenon is that they decrease with the increase of the number of scaling operations. The reason behind this phenomenon is described as follows. To make each new disk hold 1/(m + n) of total data, the semi-RR algorithm and FastScale moves n/(m + n) of total data. m increases with the number of scaling operations. As a result, the percentage of new disks (i.e., n/(m + n)) decreases. Therefore, the migration fractions using the semi-RR algorithm and FastScale decrease. Storage and calculation overheads. When a disk array boots, it needs to obtain the RAID topology from disks. <ref type="table" target="#tab_7">Table 4</ref> shows the storage overheads of the three algorithms. The round-robin algorithm depends only on the total number of member disks. So its storage overhead is one integer. The semi-RR and FastScale algorithms depend on how many disks are added during each scaling operation. If we scale RAID t times, their storage overheads are t integers. Actually, the RAID scaling operation is not too frequent. It may be performed every half year, or even longer. Consequently, the storage overheads are very small.</p><p>To quantitatively characterize the calculation overheads, we run different algorithms to calculate the phys-  ical addresses for all data blocks on a scaled RAID. The whole addressing process is timed and then the average addressing time for each block is calculated. The testbed used in the experiment is an Intel Dual Core T9400 2.53 GHz machine with 4 GB of memory. A Windows 7 Enterprise Edition is installed. <ref type="figure">Figure 7</ref> plots the addressing time versus the number of scaling operations. The round-robin algorithm has a low calculation overhead of 0.014 µs or so. The calculation overheads using the semi-RR and FastScale algorithms are close, and both take on an upward trend. Among the three algorithms, FastScale has the largest overhead. Fortunately, the largest addressing time using FastScale is 0.24 µs which is negligible compared to milliseconds of disk I/O time.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3">Optimizing Data Migration</head><p>The FastScale algorithm succeeds in minimizing data migration for RAID scaling. In this section, we describe FastScale's optimizations to the process of data migration.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.1">Access Aggregation</head><p>FastScale moves only data blocks from old disks to new disks, while not migrating data among old disks. The data migration will not overwrite any valid data. As a result, data blocks may be moved in an arbitrary order. Since disk I/O performs much better with large sequential access, FastScale accesses multiple successive blocks via a single I/O.  <ref type="table" target="#tab_4">0  24  21  18  15  12  9  6  27  3  30   2  26  23  20  17  14  11  8  29  5  32   1  25  22  19  16  13  10  7  28  4</ref>   When all the six blocks have been read into a memory buffer, FastScale issues the first I/O request to write Blocks 0, 3, and 7, the second I/O to write Blocks 4, 8 and 11, simultaneously (see <ref type="figure" target="#fig_8">Figure 9</ref>). In this way, only two large sequential write requests are issued as opposed to six small writes.</p><p>For RAID scaling from m disks to m+n, m reads and n writes are required to migrate all the data in a region, i.e., m × n data blocks.</p><p>Access aggregation converts sequences of small requests into fewer, larger requests. As a result, seek cost is mitigated over multiple blocks. Moreover, a typical choice of the optimal block size for RAID is 32KB or 64KB <ref type="bibr" target="#b3">[4,</ref><ref type="bibr" target="#b6">7,</ref><ref type="bibr" target="#b7">8,</ref><ref type="bibr" target="#b8">9]</ref>. Thus, accessing multiple successive blocks via a single I/O enables FastScale to have a larger throughput. Since data densities in disks increase at a much faster rate than improvements in seek times and rotational speeds, access aggregation benefits more as technology advances.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.2">Lazy Checkpoint</head><p>While data migration is in progress, the RAID storage serves user requests. Furthermore, the coming user I/Os may be write requests to migrated data. As a result, if mapping metadata does not get updated until all of the blocks have been moved, data consistency may be destroyed. Ordered operations <ref type="bibr" target="#b8">[9]</ref> of copying a data  <ref type="table" target="#tab_4">0  24  21  18  15  12  9  6  27  3  30   2  26  23  20  17  14  11  8  29  5  32   1  25  22  19  16  13  10  7  28  4</ref>  block and updating the mapping metadata (a.k.a., checkpoint) can ensure data consistency. But ordered operations cause each block movement to require one metadata write, which results in a large cost of data migration. Because metadata is usually stored at the beginning of all member disks, each metadata update causes one long seek per disk. FastScale uses lazy checkpoint to minimize the number of metadata writes without compromising data consistency. The foundation of lazy checkpoint is described as follows. Since block copying does not overwrite any valid data, both its new replica and original are valid after a data block is copied. In the above example, we suppose that Blocks 0, 3, 4, 7, 8, and 11 have been copied to their new locations and the mapping metadata has not been updated (see <ref type="figure" target="#fig_0">Figure 10</ref>), when the system fails. The original replicas of the six blocks will be used after the system reboots. As long as Blocks 0, 3, 4, 7, 8, and 11 have not been written since being copied, the data remain consistent. Generally speaking, when the mapping information is not updated immediately after a data block is copied, an unexpected system failure only wastes some data accesses, but does not sacrifice data reliability. The only threat is the incoming of write operations to migrated data.</p><p>The key idea behind lazy checkpoint is that data blocks are copied to new locations continuously, while the mapping metadata is not updated onto the disks (a.k.a., checkpoint) until a threat to data consistency appears. We use h i (x) to describe the geometry after the i th scaling opera- tion, where N i disks serve user requests. <ref type="figure" target="#fig_0">Figure 11</ref> illustrates an overview of the migration process. Data in the moving region is copied to new locations. When a user request arrives, if its physical block address is above the moving region, it is mapped with h i−1 (x); If its physical block address is below the moving region, it is mapped with h i (x). When all of the data in the current moving region are moved, the next region becomes the moving region. In this way, the newly added disks are gradually available to serve user requests. Only when a user write request arrives in the area where data have been moved and the movement has not been checkpointed, are mapping metadata updated.</p><p>Since one write of metadata can store multiple map changes of data blocks, lazy updates can significantly decrease the number of metadata updates, reducing the cost of data migration. Furthermore, lazy checkpoint can guarantee data consistency. Even if the system fails unexpectedly, only some data accesses are wasted. It should also be noted that the probability of a system failure is very low.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4">Experimental Evaluation</head><p>The experimental results in Section 2.4 show that the semi-RR algorithm causes extremely non-uniform data distribution. This will bring into low I/O performance. In this section, we compare FastScale with the SLAS approach <ref type="bibr" target="#b4">[5]</ref> through detailed experiments. SLAS, proposed in 2007, preserves the round-robin order after adding disks.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.1">Simulation System</head><p>We use detailed simulations with several disk traces collected in real systems. The simulator is made up of a workload generator and a disk array <ref type="figure" target="#fig_0">(Figure 12)</ref>. According to trace files, the workload generator initiates an I/O request at the appropriate time so that a particular workload is induced on the disk array.</p><p>The disk array consists of an array controller and storage components. The array controller is logically divided into two parts: an I/O processor and a data mover. The I/O processor, according to the address mapping, forwards incoming I/O requests to the corresponding disks. The data mover reorganizes the data on the array. The mover uses an on/off logic to adjust the redistribution rate. Data redistribution is throttled on detection of high application workload. Otherwise, it performs continuously.</p><p>The simulator is implemented in SimPy <ref type="bibr" target="#b9">[10]</ref> and DiskSim <ref type="bibr" target="#b10">[11]</ref>. SimPy is an object-oriented, processbased discrete-event simulation language based on standard Python. DiskSim is an efficient, accurate disk system simulator from Carnegie Mellon University and has been extensively used in various research projects studying storage subsystem architectures. The workload generator and the array controller are implemented in SimPy. Storage components are implemented in DiskSim. In other words, DiskSim is used as a worker module to simulate disk accesses. The simulated disk specification is that of the 15,000-RPM IBM Ultrastar 36Z15 <ref type="bibr">[12]</ref>.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.2">Workloads</head><p>Our experiments use the following three real-system disk I/O traces with different characteristics.</p><p>• TPC-C traced disk accesses of the TPC-C database benchmark with 20 warehouses <ref type="bibr" target="#b11">[13]</ref>. It was collected with one client running 20 iterations.</p><p>• Fin is obtained from the Storage Performance Council (SPC) <ref type="bibr" target="#b12">[14,</ref><ref type="bibr">15]</ref>, a vendor-neutral standards body. The Fin trace was collected from OLTP applications running at a large financial institution. The write ratio is high.</p><p>• Web is also from SPC. It was collected from a system running a web search engine. The readdominated Web trace exhibits the strong locality in its access pattern.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.3">Experiment Results</head></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.3.1">The Scaling Efficiency</head><p>Each experiment lasts from the beginning to the end of data redistribution for RAID scaling. We focus on com- paring redistribution times and user I/O latencies when different scaling programs are running in background.</p><p>In all experiments, the sliding window size for SLAS is set to 1024. Access aggregation in SLAS can improve the redistribution efficiency. However, a too large size of redistribution I/Os will compromise the I/O performance of applications. In our experiments, SLAS reads 8 data blocks via an I/O request.</p><p>The purpose of our first experiment is to quantitatively characterize the advantages of FastScale through a comparison with SLAS. We conduct a scaling operation of adding 2 disks to a 4-disk RAID, where each disk has a capacity of 4 GB. Each approach performs with the 32KB stripe unit size under a Fin workload. The threshold of rate control is set 100 IOPS. This parameter setup acts as the baseline for the latter experiments, from which any change will be stated explicitly.</p><p>We collect the latencies of all user I/Os. We divide the I/O latency sequence into multiple sections according to I/O issuing time. The time period of each section is 100 seconds. Furthermore, we get a local maximum latency from each section. A local maximum latency is the maximum of I/O latencies in a section. <ref type="figure" target="#fig_0">Figure 13</ref> plots local maximum latencies using the two approaches as the time increases along the x-axis. It illustrates that FastScale demonstrates a noticeable improvement over SLAS in two metrics. First, the redistribution time using FastScale is significantly shorter than that using SLAS. They are 952 seconds and 6,830 seconds, respectively. In other words, FastScale has a 86.06% shorter redistribution time than SLAS.</p><p>The main factor in FastScale's reducing the redistribution time is the significant decline of the amount of the data to be moved. When SLAS is used, almost 100% of data blocks have to be migrated. However, when FastScale is used, only 33.3% of data blocks require to be migrated. Another factor is the effective exploitation of two optimization technologies: access aggregation re- duces the number of redistribution I/Os; lazy checkpoint minimizes metadata writes. Second, local maximum latencies of SLAS are obviously longer than those of FastScale. The global maximum latency using SLAS reaches 83.12 ms while that using FastScale is 55.60 ms. This is because the redistribution I/O size using SLAS is larger than that using FastScale. For SLAS, the read size is 256 KB (8 blocks), and the write size is 192 KB (6 blocks). For FastScale, the read size is 64 KB (2 blocks), and the write size is 128 KB (4 blocks). Of course, local maximum latencies of SLAS will be lower with a decrease in the redistribution I/O size. But the decrease in the I/O size will necessarily enlarge the redistribution time. <ref type="figure" target="#fig_0">Figure 14</ref> shows the cumulative distribution of user response times during data redistribution. To provide a fair comparison, I/Os involved in statistics for SLAS are only those issued before 952 seconds. When I/O latencies are larger than 18.65 ms, the CDF value of FastScale is larger than that of SLAS. This indicates again that FastScale has smaller maximum response time of user I/Os than SLAS. The average latency of FastScale is close to that of SLAS. They are 8.01 ms and 7.53 ms respectively. It is noteworthy that due to significantly shorter data redistribution time, FastScale has a markedly smaller impact on the user I/O latencies than SLAS does.</p><p>A factor that might affect the benefits of FastScale is the workload under which data redistribution performs. Under the TPC-C workload, we also measure the performances of FastScale and SLAS to perform the "4+2" scaling operation.</p><p>For the TPC-C workload, <ref type="figure" target="#fig_0">Figure 15</ref> shows local maximum latencies versus the redistribution times for SLAS and FastScale. It shows once again the efficiency of FastScale in improving the redistribution time. The redistribution times using SLAS and FastScale are 6,820 seconds and 964 seconds, respectively. That is to say, FastScale brings an improvement of 85.87% in the re- distribution time. Likewise, local maximum latencies of FastScale are also obviously shorter than those of SLAS. The global maximum latency using FastScale is 114.76 ms while that using SLAS reaches 147.82 ms.</p><p>To compare the performance of FastScale under different workloads, <ref type="figure" target="#fig_0">Figure 16</ref> shows a comparison in the redistribution time between FastScale and SLAS. For completeness, we also conducte a comparison experiment on the redistribution time with no loaded workload. To scale a RAID volume off-line, SLAS uses 6802 seconds whereas FastScale consumes only 901 seconds. FastScale provides an improvement of 86.75% in the redistribution time.</p><p>We can draw one conclusion from <ref type="figure" target="#fig_0">Figure 16</ref>. Under various workloads, FastScale consistently outperformes SLAS by 85.87-86.75% in the redistribution time, with smaller maximum response time of user I/Os.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.3.2">The Performance after Scaling</head><p>The above experiments show that FastScale improves the scaling efficiency of RAID significantly. One of our concerns is whether there is a penalty in the performance of the data layout after scaling using FastScale, compared with the round-robin layout preserved by SLAS.</p><p>We use the Web workload to measure the performances of the two RAIDs, scaled from the same RAID using SLAS and FastScale. Each experiment lasts 500 seconds, and records the latency of each I/O. Based on the issue time, the I/O latency sequence is divided into 20 sections evenly. Furthermore, we get a local average latency from each section.</p><p>First, we compare the performances of two RAIDs, after one scaling operation "4+1" using the two scaling approaches. <ref type="figure" target="#fig_0">Figure 17</ref> plots local average latencies for the two RAIDs as the time increases along the x-axis. We can find that the performances of the two RAIDs are very close. With regards to the round-robin RAID, the average latency is 11.36 ms. For the FastScale RAID, the average latency is 11.37 ms. Second, we compare the performances of two RAIDs, after two scaling operations "4+1+1" using the two approaches. <ref type="figure" target="#fig_0">Figure 18</ref> plots local average latencies of the two RAIDs as the time increases along the x-axis. It again revealed the approximate equality in the performances of the two RAIDs. With regards to the roundrobin RAID, the average latency is 11.21 ms. For the FastScale RAID, the average latency is 11.03 ms.</p><p>One conclusion can be reached that the performance of the RAID scaled using FastScale is almost identical with that of the round-robin RAID.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5">Related Work</head></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5.1">Scaling Deterministic RAID</head><p>The HP AutoRAID <ref type="bibr" target="#b7">[8]</ref> allows an online capacity expansion. Newly created RAID-5 volumes use all of the disks in the system, but previously created RAID-5 volumes continue to use only the original disks. This expansion does not require data migration. But the system cannot add new disks into an existing RAID-5 volume. The conventional approaches to RAID scaling redistributes data and preserves the round-robin order after adding disks.</p><p>Gonzalez and Cortes <ref type="bibr" target="#b2">[3]</ref> proposed a gradual assimilation algorithm (GA) to control the overhead of scaling a RAID-5 volume. However, GA accesses only one block via an I/O. Moreover, it writes mapping metadata onto disks immediately after redistributing each stripe. As a result, GA has a large redistribution cost.</p><p>The reshape toolkit in the Linux MD driver (MDReshape) <ref type="bibr" target="#b3">[4]</ref> writes mapping metadata for each fixedsized data window. However, user requests to the data window have to queue up until all data blocks within the window are moved. On the other hand, MD-Reshape issues very small (4KB) I/O operations for data redistribution. This limits the redistribution performance due to more disk seeks.</p><p>Zhang et al. <ref type="bibr" target="#b4">[5]</ref> discovered that there is always a reordering window during data redistribution for roundrobin RAID scaling. The data inside the reordering window can migrate in any order without overwriting any valid data. By leveraging this insight, they proposed the SLAS approach, improving the efficiency of data redistribution. However, SLAS still requires migrating all data. Therefore, RAID scaling remains costly. D-GRAID <ref type="bibr" target="#b13">[16]</ref> restores only live file system data to a hot spare so as to recover from failures quickly. Likewise, it can accelerate the redistribution process if only the live data blocks from the perspective of file systems are redistributed. However, this needs for semanticallysmart storage systems. Differently, FastScale is independent on file systems, and it can work with any ordinary disk storage.</p><p>A patent <ref type="bibr" target="#b14">[17]</ref> presents a method to eliminate the need to rewrite the original data blocks and parity blocks on original disks. However, the method makes all the parity blocks be either only on original disks or only on new disks. The obvious distribution non-uniformity of parity blocks will bring a penalty to write performance.</p><p>Franklin et al. <ref type="bibr" target="#b15">[18]</ref> presented an RAID scaling method using spare space with immediate access to new space. First, old data are distributed among the set of data disk drives and at least one new disk drive while, at the same time, new data are mapped to the spare space. Upon completion of the distribution, new data are copied from the spare space to the set of data disk drives. This is similar to the key idea of WorkOut <ref type="bibr" target="#b16">[19]</ref>. This kind of method requires spare disks available in the RAID.</p><p>In another patent, Hetzler <ref type="bibr" target="#b17">[20]</ref> presented a method to RAID-5 scaling, noted MDM. MDM exchanges some data blocks between original disks and new disks. MDM can perform RAID scaling with reduced data movement. However, it does not increase (just maintains) the data storage efficiency after scaling. The RAID scaling pro- cess exploited by FastScale is favored in the art because the data storage efficiency is maximized, which many practitioners consider desirable.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5.2">Scaling Randomized RAID</head><p>Randomized RAID <ref type="bibr" target="#b5">[6,</ref><ref type="bibr" target="#b18">21,</ref><ref type="bibr" target="#b19">22,</ref><ref type="bibr" target="#b20">23]</ref> appears to have better scalability. It is now gaining the spotlight in the data placement area. <ref type="bibr">Brinkmann et al. [23]</ref> proposed the cutand-paste placement strategy that uses randomized allocation strategy to place data across disks. For a disk addition, it cuts off the range [1/(n + 1), 1/n] from given n disks, and pastes them to the newly added (n + 1) th disk. For a disk removal, it uses reversing operation to move all the blocks in disks that will be removed to the other disks. Also based on random data placement, Seo and Zimmermann <ref type="bibr" target="#b21">[24]</ref> proposed an approach to finding a sequence of disk additions and removals for the disk replacement problem. The goal is to minimize the data migration cost. Both these two approaches assume the existence of a high-quality hash function that assigns all the data blocks in the system into the uniformly distributed real numbers with high probability. However, they did not present such a hash function.</p><p>The SCADDAR algorithm <ref type="bibr" target="#b5">[6]</ref> uses a pseudo-random function to distribute data blocks randomly across all disks. It keeps track of the locations of data blocks after multiple disk reorganizations and minimizes the amount of data to be moved. Unfortunately, the pseudo-hash function does not preserve the randomness of the data layout after several disk additions or deletions <ref type="bibr" target="#b21">[24]</ref>. So far, true randomized hash function which preserves its randomness after several disk additions or deletions has not been found.</p><p>The simulation report in <ref type="bibr" target="#b18">[21]</ref> shows that a single copy of data in random striping may result in some hiccups of the continuous display. To address this issue, one can use data replication <ref type="bibr" target="#b19">[22]</ref>, where a fraction of the data blocks randomly selected are replicated on randomly selected disks. However, this will bring into a large capacity overhead.</p><p>RUSH <ref type="bibr" target="#b22">[25,</ref><ref type="bibr" target="#b23">26]</ref> and CRUSH <ref type="bibr" target="#b24">[27]</ref> are two algorithms for online placement and reorganization of replicated data. They are probabilistically optimal in distributing data evenly and minimizing data movement when new storage is added to the system. There are three differences between them and FastScale. First, they depend on the existence of a high-quality random function, which is difficult to generate. Second, they are designed for object-based storage systems. They focus on how a data object is mapped to a disk, without considering the data layout of each individual disk. Third, our mapping function needs to be 1-1 and onto, but hash functions have collisions and count on some amount of sparseness.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="6">Conclusion and Future Work</head><p>This paper presents FastScale, a new approach that accelerates RAID-0 scaling by minimizing data migration. First, with a new and elastic addressing function, FastScale minimizes the number of data blocks to be migrated without compromising the uniformity of data distribution. Second, FastScale uses access aggregation and lazy checkpoint to optimize data migration.</p><p>Our results from detailed experiments using realsystem workloads show that, compared with SLAS, a scaling approach proposed in 2007, FastScale can reduce redistribution time by up to 86.06% with smaller maximum response time of user I/Os. The experiments also illustrate that the performance of the RAID scaled using FastScale is almost identical with that of the round-robin RAID.</p><p>In this paper, the factor of data parity is not taken into account. we believe that FastScale provides a good starting point for efficient scaling of RAID-4 and RAID-5 arrays. In the future, we will focus on extending FastScale to RAID-4 and RAID-5.</p></div><figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_0"><head>Figure 1 :</head><label>1</label><figDesc>Figure 1: Data migration using FastScale. Only data blocks are moved from old disks to new disks for regaining a uniform distribution, while no data is migrated among old disks.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_2"><head>2 .</head><label>2</label><figDesc>If block x is a new block, it is the y th new block, where y = x − 3 × 11. Each stripe holds 2 new blocks. So, we have b = y/2. The first two new blocks in each region are placed on Blocks 0 of Disk 0 and 4. For the other blocks, d = (y mod 2) + (b mod 5) − 1.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_4"><head>Figure 4 :</head><label>4</label><figDesc>Figure 4: The variation of data layout involved in migration.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_5"><head>Figure 6 :</head><label>6</label><figDesc>Figure 5: Comparison in uniform data distribution</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_6"><head></head><label></label><figDesc>Figure 7: Comparison in addressing time</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_8"><head>Figure 9 :</head><label>9</label><figDesc>Figure 9: Aggregate writes for RAID scaling from 3 disks to 5. Multiple successive blocks are written via a single I/O.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_10"><head>Figure 10 :Figure 11 :</head><label>1011</label><figDesc>Figure 10: If data blocks are copied to their new locations and metadata is not yet updated when the system fails, data consistency is still maintained because the data in their original locations are valid and available.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_11"><head>Figure 12 :</head><label>12</label><figDesc>Figure 12: Simulation system block diagram: The workload generator and the array controller were implemented in SimPy. DiskSim was used as a worker module to simulate disk accesses.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_12"><head>Figure 13 :</head><label>13</label><figDesc>Figure 13: Performance comparison between FastScale and SLAS under the Fin workload.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_13"><head>Figure 14 :</head><label>14</label><figDesc>Figure 14: Cumulative distribution of I/O latencies during the data redistributions by the two approaches under the Fin workload.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_14"><head>Figure 15 :</head><label>15</label><figDesc>Figure 15: Performance comparison between FastScale and SLAS under the TPC-C workload.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_15"><head>Figure 16 :</head><label>16</label><figDesc>Figure 16: Comparison of redistribution times of FastScale and SLAS under different workloads. The label "unloaded" means scaling a RAID volume offline.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_16"><head>Figure 17 :</head><label>17</label><figDesc>Figure 17: Performance comparison between FastScale's layout and round-robin layout under the Web workload after one scaling operation "4+1".</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_17"><head>Figure 18 :</head><label>18</label><figDesc>Figure 18: Performance comparison between FastScale's layout and round-robin layout under the Web workload after two scaling operations "4+1+1".</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_4" validated="false"><head>Table 1 shows the algorithm to minimize data migration required by RAID scaling. The array H records the his- tory of RAID scaling. H[0] is the initial number of disks in the RAID. After the i th scaling operations, the RAID consists of H[i] disks.</head><label>1</label><figDesc></figDesc><table></table></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_5" validated="false"><head>Table 2 : The Moving function.</head><label>2</label><figDesc></figDesc><table></table></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_6" validated="false"><head>Table 3 :</head><label>3</label><figDesc>The procedure to place new data.</figDesc><table></table></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_7" validated="false"><head>Table 4 :</head><label>4</label><figDesc>The storage overheads of different algorithms.</figDesc><table></table></figure>
		</body>
		<back>

			<div type="acknowledgement">
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="7">Acknowledgements</head><p>We are indebted to the anonymous reviewers of the paper for their insightful comments. We are also grateful to Dr. Benjamin Reed, our shepherd, for detailed comments and suggestions that greatly improved the readability of the paper. This work was supported by the National Natural Science Foundation of China under </p></div>
			</div>

			<div type="references">

				<listBibl>

<biblStruct xml:id="b0">
	<analytic>
		<title level="a" type="main">A Case for Redundant Arrays of Inexpensive Disks (RAID)</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><forename type="middle">A</forename><surname>Patterson</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">G</forename><forename type="middle">A</forename><surname>Gibson</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><forename type="middle">H</forename><surname>Katz</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the International Conference on Management of Data (SIGMOD&apos;88)</title>
		<meeting>the International Conference on Management of Data (SIGMOD&apos;88)</meeting>
		<imprint>
			<date type="published" when="1988-06" />
			<biblScope unit="page" from="109" to="116" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b1">
	<analytic>
		<title level="a" type="main">A simple way to estimate the cost of down-time</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><forename type="middle">A</forename><surname>Patterson</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 16th Large Installation Systems Administration Conference (LISA&apos;02)</title>
		<meeting>the 16th Large Installation Systems Administration Conference (LISA&apos;02)</meeting>
		<imprint>
			<date type="published" when="2002-10" />
			<biblScope unit="page" from="185" to="188" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b2">
	<analytic>
		<title level="a" type="main">Increasing the capacity of RAID5 by online gradual assimilation</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Gonzalez</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><surname>Cortes</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the International Workshop on Storage Network Architecture and Parallel I</title>
		<meeting>the International Workshop on Storage Network Architecture and Parallel I<address><addrLine>Os. Antibes Juan-les-pins, France</addrLine></address></meeting>
		<imprint>
			<date type="published" when="2004-09" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b3">
	<monogr>
		<title level="m" type="main">Online RAID-5 resizing. drivers/md/ raid5.c in the source code of Linux Kernel 2.6</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">N</forename><surname>Brown</surname></persName>
		</author>
		<ptr target="http://www.kernel.org/" />
		<imprint>
			<date type="published" when="2006-09" />
			<biblScope unit="volume">18</biblScope>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b4">
	<analytic>
		<title level="a" type="main">SLAS: An efficient approach to scaling round-robin striped volumes</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">G</forename><surname>Zhang</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Shu</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">W</forename><surname>Xue</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">W</forename><surname>Zheng</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">ACM Trans. Storage</title>
		<imprint>
			<biblScope unit="volume">3</biblScope>
			<biblScope unit="issue">1</biblScope>
			<biblScope unit="page" from="1" to="39" />
			<date type="published" when="2007-03" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b5">
	<analytic>
		<title level="a" type="main">SCADDAR: An efficient randomized technique to reorganize continuous media blocks</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Goel</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><surname>Shahabi</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S-Yd</forename><surname>Yao</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Zimmermann</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 18th International Conference on Data Engineering (ICDE&apos;02)</title>
		<meeting>the 18th International Conference on Data Engineering (ICDE&apos;02)<address><addrLine>San Jose</addrLine></address></meeting>
		<imprint>
			<date type="published" when="2002" />
			<biblScope unit="page" from="473" to="482" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b6">
	<monogr>
				<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Hennessy</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Patterson</surname></persName>
		</author>
		<title level="m">Computer Architecture: A Quantitative Approach</title>
		<meeting><address><addrLine>San Francisco, CA</addrLine></address></meeting>
		<imprint>
			<publisher>Morgan Kaufmann Publishers, Inc</publisher>
			<date type="published" when="2003" />
		</imprint>
	</monogr>
	<note>3rd ed</note>
</biblStruct>

<biblStruct xml:id="b7">
	<analytic>
		<title level="a" type="main">The HP AutoRAID hierarchical storage system</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Wilkes</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Golding</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><surname>Staelin</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><surname>Sullivan</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">ACM Transactions on Computer Systems</title>
		<imprint>
			<biblScope unit="volume">14</biblScope>
			<biblScope unit="issue">1</biblScope>
			<biblScope unit="page" from="108" to="136" />
			<date type="published" when="1996-02" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b8">
	<analytic>
		<title level="a" type="main">Volume management in SAN environment</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><surname>Kim</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">G</forename><surname>Kim</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">B</forename><surname>Shin</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 8th International Conference on Parallel and Distributed Systems, ICPADS&apos;01</title>
		<meeting>the 8th International Conference on Parallel and Distributed Systems, ICPADS&apos;01</meeting>
		<imprint>
			<date type="published" when="2001" />
			<biblScope unit="page" from="500" to="505" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b9">
	<monogr>
		<title level="m" type="main">SimPy 2.0.1&apos;s documentation</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Klaus</forename><surname>Muller</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Tony</forename><surname>Vignaux</surname></persName>
		</author>
		<ptr target="http://simpy.sourceforge.net/SimPyDocs/index.html" />
		<imprint>
			<date type="published" when="2009-04" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b10">
	<monogr>
		<title level="m" type="main">The DiskSim Simulation Environment Version 4.0 Reference Manual</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Bucy</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Schindler</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Schlosser</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">G</forename><surname>Ganger</surname></persName>
		</author>
		<idno>CMU-PDL-08-101</idno>
		<imprint>
			<date type="published" when="2008" />
		</imprint>
		<respStmt>
			<orgName>Carnegie Mellon University</orgName>
		</respStmt>
	</monogr>
<note type="report_type">Tech. report</note>
</biblStruct>

<biblStruct xml:id="b11">
	<analytic>
		<title level="a" type="main">20 iterations. DTB v1.1. Performance Evaluation Laboratory</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Tpc-C</forename><surname>Postgres</surname></persName>
		</author>
		<ptr target="http://tds.cs.byu.edu/tds/" />
	</analytic>
	<monogr>
		<title level="j">Brigham Young University. Trace distribution center</title>
		<imprint>
			<date type="published" when="2010" />
		</imprint>
	</monogr>
	<note>last accessed on December</note>
</biblStruct>

<biblStruct xml:id="b12">
	<monogr>
		<title level="m" type="main">Application I/O and Search Engine I/O. UMass Trace Repository</title>
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b13">
	<analytic>
		<title level="a" type="main">Improving Storage System Availability with D-GRAID</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Muthian</forename><surname>Sivathanu</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Vijayan</forename><surname>Prabhakaran</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Andrea</forename><forename type="middle">C</forename><surname>Arpacidusseau</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">H</forename><surname>Remzi</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Arpaci-Dusseau</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 3rd USENIX Conference on File and Storage Technologies (FAST&apos;04)</title>
		<meeting>the 3rd USENIX Conference on File and Storage Technologies (FAST&apos;04)<address><addrLine>San Francisco, CA</addrLine></address></meeting>
		<imprint>
			<date type="published" when="2004-03" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b14">
	<analytic>
		<title level="a" type="main">Method of Increasing the Storage Capacity of a Level Five RAID Disk Array by Adding</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><forename type="middle">B</forename><surname>Legg</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">a Single Step, a New Parity Block and N-1 New Data Blocks Which Respectively Reside in a new Columns</title>
		<meeting><address><addrLine>US</addrLine></address></meeting>
		<imprint>
			<date type="published" when="1999-12" />
			<biblScope unit="page">6000010</biblScope>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b15">
	<monogr>
		<title level="m" type="main">Expansion of RAID Subsystems Using Spare Space with Immediate Access to New Space</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><surname>Franklin</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><forename type="middle">T</forename><surname>Wong</surname></persName>
		</author>
		<idno>US Patent 10/033</idno>
		<imprint>
			<date type="published" when="2006" />
			<biblScope unit="volume">997</biblScope>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b16">
	<analytic>
		<title level="a" type="main">WorkOut: I/O Workload Outsourcing for Boosting the RAID Reconstruction Performance</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Suzhen</forename><surname>Wu</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Hong</forename><surname>Jiang</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Dan</forename><surname>Feng</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Lei</forename><surname>Tian</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Bo</forename><surname>Mao</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 7th USENIX Conference on File and Storage Technologies (FAST &apos;09)</title>
		<meeting>the 7th USENIX Conference on File and Storage Technologies (FAST &apos;09)<address><addrLine>San Francisco, CA, USA</addrLine></address></meeting>
		<imprint>
			<date type="published" when="2009-02" />
			<biblScope unit="page" from="239" to="252" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b17">
	<monogr>
		<title level="m" type="main">Data Storage Array Scaling Method and System with Minimal Data Movement, US Patent</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><forename type="middle">R</forename><surname>Hetzler</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2008" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b18">
	<monogr>
		<title level="m" type="main">Random striping news on demand servers</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Alemany</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><forename type="middle">S</forename><surname>Thathachar</surname></persName>
		</author>
		<idno>TR-97-02-02</idno>
		<imprint>
			<date type="published" when="1997" />
		</imprint>
		<respStmt>
			<orgName>University of Washington</orgName>
		</respStmt>
	</monogr>
<note type="report_type">Tech. Report</note>
</biblStruct>

<biblStruct xml:id="b19">
	<analytic>
		<title level="a" type="main">Comparing random data allocation and data striping in multimedia servers</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Jose Renato</forename><surname>Santos</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Richard</forename><forename type="middle">R</forename><surname>Muntz</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Berthier</forename><forename type="middle">A</forename><surname>Ribeironeto</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Measurement and Modeling of Computer Systems</title>
		<imprint>
			<date type="published" when="2000" />
			<biblScope unit="page" from="44" to="55" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b20">
	<analytic>
		<title level="a" type="main">Efficient, distributed data placement strategies for storage area networks (extended abstract)</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Andre</forename><surname>Brinkmann</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Kay</forename><surname>Salzwedel</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Christian</forename><surname>Scheideler</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">ACM Symposium on Parallel Algorithms and Architectures</title>
		<imprint>
			<date type="published" when="2000" />
			<biblScope unit="page" from="119" to="128" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b21">
	<analytic>
		<title level="a" type="main">Efficient disk replacement and data migration algorithms for large disk subsystems</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Beomjoo</forename><surname>Seo</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Roger</forename><surname>Zimmermann</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">ACM Transactions on Storage</title>
		<imprint>
			<biblScope unit="volume">1</biblScope>
			<biblScope unit="page" from="316" to="345" />
			<date type="published" when="2005-08" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b22">
	<analytic>
		<title level="a" type="main">A fast algorithm for online placement and reorganization of replicated data</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><forename type="middle">J</forename><surname>Honicky</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">E</forename><forename type="middle">L</forename><surname>Miller</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 17th International Parallel and Distributed Processing Symposium (IPDPS 2003)</title>
		<meeting>the 17th International Parallel and Distributed Processing Symposium (IPDPS 2003)<address><addrLine>Nice, France</addrLine></address></meeting>
		<imprint>
			<date type="published" when="2003-04" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b23">
	<analytic>
		<title level="a" type="main">Replication under scalable hashing: A family of algorithms for scalable decentralized data distribution</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><forename type="middle">J</forename><surname>Honicky</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">E</forename><forename type="middle">L</forename><surname>Miller</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 18th International Parallel and Distributed Processing Symposium (IPDPS&apos;04)</title>
		<meeting>the 18th International Parallel and Distributed Processing Symposium (IPDPS&apos;04)</meeting>
		<imprint>
			<publisher>IEEE</publisher>
			<date type="published" when="2004" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b24">
	<analytic>
		<title level="a" type="main">CRUSH: Controlled, Scalable, Decentralized Placement of Replicated Data</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><forename type="middle">A</forename><surname>Weil</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><forename type="middle">A</forename><surname>Brandt</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">E</forename><forename type="middle">L</forename><surname>Miller</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><surname>Maltzahn</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the International Conference on Super Computing (SC&apos;06)</title>
		<meeting>the International Conference on Super Computing (SC&apos;06)<address><addrLine>Tampa Bay, FL</addrLine></address></meeting>
		<imprint>
			<date type="published" when="2006" />
		</imprint>
	</monogr>
</biblStruct>

				</listBibl>
			</div>
		</back>
	</text>
</TEI>
