<?xml version="1.0" encoding="UTF-8"?>
<TEI xmlns="http://www.tei-c.org/ns/1.0" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
xsi:schemaLocation="http://www.tei-c.org/ns/1.0 /Users/atharsefid/Desktop/grobid-0.5.3/grobid-home/schemas/xsd/Grobid.xsd"
 xmlns:xlink="http://www.w3.org/1999/xlink">
	<teiHeader xml:lang="en">
		<encodingDesc>
			<appInfo>
				<application version="0.5.3" ident="GROBID" when="2020-09-29T04:27+0000">
					<ref target="https://github.com/kermitt2/grobid">GROBID - A machine learning software for extracting information from scholarly documents</ref>
				</application>
			</appInfo>
		</encodingDesc>
		<fileDesc>
			<titleStmt>
				<title level="a" type="main">AVLeak: Fingerprinting Antivirus Emulators Through Black-Box Testing</title>
			</titleStmt>
			<publicationStmt>
				<publisher/>
				<availability status="unknown"><licence/></availability>
			</publicationStmt>
			<sourceDesc>
				<biblStruct>
					<analytic>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Jeremy</forename><surname>Blackthorne</surname></persName>
							<affiliation key="aff0">
								<orgName type="institution">Rensselaer Polytechnic Institute</orgName>
							</affiliation>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Alexei</forename><surname>Bulazel</surname></persName>
							<affiliation key="aff0">
								<orgName type="institution">Rensselaer Polytechnic Institute</orgName>
							</affiliation>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Andrew</forename><surname>Fasano</surname></persName>
							<affiliation key="aff0">
								<orgName type="institution">Rensselaer Polytechnic Institute</orgName>
							</affiliation>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Patrick</forename><surname>Biernat</surname></persName>
							<affiliation key="aff0">
								<orgName type="institution">Rensselaer Polytechnic Institute</orgName>
							</affiliation>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">BÃ¼lent</forename><surname>Yener</surname></persName>
							<affiliation key="aff0">
								<orgName type="institution">Rensselaer Polytechnic Institute</orgName>
							</affiliation>
						</author>
						<title level="a" type="main">AVLeak: Fingerprinting Antivirus Emulators Through Black-Box Testing</title>
					</analytic>
					<monogr>
						<imprint>
							<date/>
						</imprint>
					</monogr>
				</biblStruct>
			</sourceDesc>
		</fileDesc>
		<profileDesc>
			<abstract>
				<p>To fight the ever-increasing proliferation of novel mal-ware, antivirus (AV) vendors have turned to emulation-based automated dynamic malware analysis. Malware authors have responded by creating malware that attempts to evade detection by behaving benignly while running in an emulator. Malware may detect emulation by looking for emulator &quot;fingerprints&quot; such as unique environmental values, timing inconsistencies, or bugs in CPU emulation. Due to their immense complexity and the expert knowledge required to effectively analyze them, reverse-engineering AV emulators to discover fingerprints is an extremely challenging task. As an alternative, researchers have demonstrated fingerprinting attacks using simple black-box testing, but these techniques are slow, inefficient, and generally awkward to use. We propose a novel black-box technique to efficiently extract emulator fingerprints without reverse-engineering. To demonstrate our technique, we implemented an easy-to-use tool and API called AVLeak. We present an evaluation of AVLeak against several current consumer AVs and show emulator fingerprints derived from our experimentation. We also propose a classification of fingerprints as they apply to consumer AV emu-lators. Finally, we discuss the defensive implications of our work, and future directions of research in emulator evasion and exploitation.</p>
			</abstract>
		</profileDesc>
	</teiHeader>
	<text xml:lang="en">
		<body>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="1">Introduction</head><p>Recent estimates from Symantec claim that almost one million new pieces of malware are created every day <ref type="bibr" target="#b22">[23]</ref>. Given this high rate of proliferation, antivirus software (AV) cannot simply rely on static signature-based malware detection. Automated dynamic analysis is necessary in order to identify packed known malware samples and to heuristically detect new malware. In response to the growth of automated dynamic analysis systems, malware authors have created evasive malware which resists automated analysis. A study from Lastline Labs showed that in the second half of 2015, over 80% of malware exhibited evasive behavior <ref type="bibr" target="#b36">[37]</ref>.</p><p>Our research specifically focuses on the emulatorbased automated analysis systems used in consumer AV products. In order to evade AV emulators, malware authors have limited options. Many write malware that uses generic anti-analysis tricks (e.g., stalling loops, simple timing checks, obscure CPU instructions), though these behaviors can be detected and countered <ref type="bibr">[15,</ref><ref type="bibr" target="#b31">32,</ref><ref type="bibr" target="#b37">38]</ref>.</p><p>To more deftly evade emulation, malware authors may use distinguishing emulator "fingerprints" such as hardcoded environmental values, timing inconsistencies, or CPU "red pills." Malware that observes these fingerprints can recognize that it is being emulated and subsequently behave benignly to avoid detection. In order to discover fingerprints, malware authors may pursue challenging reverse-engineering or use black-box testing. Our Contribution Our work is motivated by the difficulty of fingerprinting AV emulators through reverseengineering. We propose a novel black-box technique that efficiently extracts fingerprints from emulators without requiring reverse-engineering. Our approach significantly advances upon prior black-box approaches, and our survey of fingerprints is more comprehensive than has been presented in prior literature. To demonstrate our attack, we built AVLeak, a tool and API for fingerprinting consumer AV emulators. We evaluated AVLeak against Kaspersky, Bitdefender engine (licensed for use in over twenty other AV products <ref type="bibr" target="#b3">[4]</ref>), AVG, and VBA. During testing, we discovered hundreds of emulator fingerprints which we classify into six categories: environmental artifacts, OS API inconsistency, network emulation, timing, process introspection, and CPU "red pills."</p><p>In addition to the offensive implications of our research, it is also valuable in a defensive context. Emulator fingerprints can be used to discover advanced evasive malware in the wild and create new signatures.</p><p>Our work contributes to a growing body of research demonstrating vulnerabilities in AV software and raises awareness that these systems are not a panacea against malware, and may in fact expose users to more risk.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2">Background</head><p>Modern consumer AV software is highly complex and uses a number of techniques to identify malware. Our focus is the emulators embedded inside these systems, used to examine binaries which cannot be identified as malicious by simpler methods such as hashing, static signaturing, or static heuristic analysis. By running suspicious binaries in isolated virtual environments, emulators may look for known malware signatures in packed binaries or</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.2">Reverse-Engineering AV Emulators</head><p>In our assessment, AVs are one of the most challenging types of software to reverse-engineer. AV software is highly complex, closely integrated with the operating system, and often resistant to analysis.</p><p>Reverse-engineers face many practical challenges in analyzing AV software. Anti-debugging protections prevent debuggers from attaching to AV processes. Libraries are often stored in custom non-PE packed file formats, hindering the use of standard static analysis tools. Even analyzing AV binaries in a disassembler can be difficult due to their enormous size.</p><p>AV emulators are more difficult to analyze than AV software at large. <ref type="bibr" target="#b1">2</ref> Emulator analysis requires expert reverse-engineering skill given their immense complexity. Reverse-engineers also need deep knowledge of AV design; the x86 instruction set architecture, to analyze CPU emulation; Windows internals, to analyze Windows API emulation; and malware behavior, as the systems are purpose-built to run and analyze malware. Emulator binaries are particularly large with thousands of functions, and often include disassembler-breaking functions with thousands of basic blocks. <ref type="bibr" target="#b2">3</ref> As Koret and Bachaalany <ref type="bibr" target="#b34">[35]</ref> point out, emulators are frequently updated, so attackers may have to re-analyze them with each new release in order to discover changes.</p><p>While we are not aware of prior art utilizing the technique, we note that looking for strings in running AV processes or core dumps may allow attackers to discover simple hardcoded environmental artifacts (e.g., user names, computer names, file system contents, etc.). <ref type="bibr" target="#b3">4</ref> Readers interested in learning more about reverseengineering AVs are referred to "The Antivirus Hacker's Handbook" <ref type="bibr" target="#b34">[35]</ref>.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.3">Black-Box Fingerprinting</head><p>Prior approaches to black-box fingerprinting have used slow, inefficient, and generally unrefined testing to discover simple, easily found emulator fingerprints.</p><p>At Black Hat 2014, Swinnen and Mesbahi <ref type="bibr" target="#b65">[66]</ref> presented a novel packer and a scheme for discovering emulator fingerprints in consumer AV emulators leveraging a black-box construction. At B-Sides Las Vegas 2014, Adams <ref type="bibr" target="#b0">[1]</ref> presented similar testing against AVG's JavaScript emulator. Sauder's DeepSec 2014 presentation <ref type="bibr" target="#b61">[62]</ref> uses the same style of testing to create evasive Metasploit payloads. Nasi's self-published whitepaper <ref type="bibr" target="#b41">[42]</ref> uses the black-box model to discover fingerprints in AV emulators available on VirusTotal. Perhaps the most comprehensive work on offensive research against AVs, Koret and Bachaalany's "The Antivirus Hacker's Handbook" <ref type="bibr" target="#b34">[35]</ref>, demonstrates the same style of black-box attacks as described above. All of these efforts exploited in-emulator malware detection as a means of extracting the result of a single true or false query about the the emulator. In <ref type="figure">Figure 1</ref> we show pseudocode demonstrating this "one-bit oracle" style of attack.</p><p>if EMULATOR_READING equals EXPECTED_VALUE:</p><p>DropMalware() else:</p><p>Exit() <ref type="figure">Figure 1</ref>: Pseudocode demonstrating one-bit oracle blackbox testing as described by <ref type="bibr" target="#b0">[1,</ref><ref type="bibr" target="#b34">35,</ref><ref type="bibr" target="#b41">42,</ref><ref type="bibr" target="#b61">62,</ref><ref type="bibr" target="#b65">66]</ref>. When emulated, this code will either drop malware, or exit without dropping malware. By checking if the emulator detected malware or not, an attacker can extract one bit of information about the internal state of the emulator, revealing if the value EMULATOR_READING is equal to EXPECTED_VALUE.</p><p>By checking if an AV emulator returns a malware detection or decides that the scanned binary is benign, an attacker may extract one bit of information about the emulator's internal state. One-bit testing is best suited for discovering negative results, e.g., OS API function f is not emulated correctly, file x is not present on the emulated file system, CPU instruction c does not work correctly. Specific state information can be slowly extracted through repeated testing (e.g., is byte b 0? Is it 1? Is it 2?. . . ), as shown by Adams <ref type="bibr" target="#b0">[1]</ref>.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3">Our Approach: AVLeak</head><p>Our approach improves upon and generalizes prior testing schemes (as shown in <ref type="figure">Figure 1</ref>), by exploiting specific malware detections to leak fingerprints out of AV emulators. Whereas prior approaches answer a simple true or false query about emulator state with each scan, we rapidly extract arbitrary multibyte data. Our technique extracts emulator fingerprints at least an order of magnitude faster than previous black-box schemes. Further, our system is engineered for ease of test case construction, and offers a programmatic API to script testing routines. <ref type="figure">Figure 2</ref> shows our technique from steps 3 to 7.</p><p>Step 1: Filter Malware Samples We begin by obtaining a large set of malware samples, and scan each with the AV under test. After scanning, the set is filtered, keeping only those samples identified as malware with unique signatures. <ref type="bibr" target="#b4">5</ref> Step 2: Map Malware Samples to Bytes Given a filtered set of malware samples, we construct a mapping of malware signatures to bytes.</p><p>In our implementation, each malware signature is assigned to a single unique byte (e.g., Blaster to 0x00, Nimda to 0x01, and so on, up to 0xFF). Multi-byte mappings could be used to enable more efficient attacks (e.g., individual malware samples to multi-byte values, Blaster to 0x0000, Nimda to 0x0001, etc.).</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Step 3: Encrypt and Package Malware Samples</head><p>After constructing a mapping, each malware sample is encrypted to prevent static signature-based detection. The set of encrypted binaries is then packaged together into a single file.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Step 4: Write Dropper Code</head><p>Given a packaged malware file, we write code to decrypt and "drop" (write to disk) the encrypted malware samples when given their corresponding bytes of data (e.g., drop Blaster for 0x00, Nimda for 0x01).</p><p>Step</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>5: Build Test Case Logic</head><p>Next, we write code to find emulator fingerprints, for example, querying GetUserName, or analyzing register state after a particular call. Each byte of fingerprint data to be extracted is passed to our dropper code, as shown in <ref type="figure">Figure 3</ref>.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Step 6: Compile and Scan</head><p>After compilation, the resulting binary is given to the AV under test for scanning. Unable to statically identify the previously unseen binary, the AV runs the code within its emulator. <ref type="bibr" target="#b5">6</ref> During emulation, the binary decrypts and drops malware samples within the emulator. When emulation is complete, the AV returns the results of its scanning.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Step 7: Reconstruct Leaked Information</head><p>By correlating the malware signatures detected during emulation with the the bytes that they are mapped to, we can exfiltrate information from within the emulator. In <ref type="figure">Figure 4</ref> we show example output from an antivirus program, and how the the leaked data is reconstructed.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.1">Implementation</head><p>We tested four AV emulators: Kaspersky, Bitdefender (licensed for use in over twenty other AV products, <ref type="bibr" target="#b3">[4]</ref> we tested via Emsisoft 7 ), AVG, and VBA. The AVs were selected by uploading a dropper for EICAR 8 to Mal 0x01</p><p>. . .</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Mal 0xFF</head><p>Antivirus Scanned by Detects Mal 0x65 Mal 0x6D Mal 0x75</p><p>Looked up in Dict.</p><p>'e' 'm' 'u' <ref type="figure">Figure 2</ref>: We begin by constructing an executable from a set of malware, a mapping of malware to bytes, and logic to fingerprint the emulator under test. This executable is then emulated by an AV, where it drops malware in response to fingerprint readings. The AV's malware detections are subsequently parsed and cross-referenced with the malware dictionary to leak data about the emulator. In this example, we extract the fingerprint that the user name within the emulator is "emu".</p><p>// EmulatedFunction is an OS API function // emulated by the AV emulator, and returns // the hardcoded value "Antivirus" for each byte in EmulatedFunction():</p><formula xml:id="formula_0">WriteToDisk(Decrypt(Malware[byte]))</formula><p>Figure 3: Pseudocode sketch of the malware dropping process. This code will drop the malware samples corresponding to each byte of the value returned by EmulatedFunction. Assuming EmulatedFunction returned "Antivirus", the binary would drop malware #0x41 ('A'), #0x6e ('n') . . . #0x73 ('s').</p><p>VirusTotal and checking for EICAR identifications, indicating that the binary had been emulated. We filtered the set for AVs which returned uniquely named EICAR detections, as emulators are often licensed between AV vendors, and use the same detection strings. <ref type="bibr" target="#b8">9</ref> We further refined the set of AVs based on their availability, general reputation, and ability to invoke scanning from the command line. We focused on extracting a wide variety of fingerprints over demonstrating our technique's obvious applicability to a wider range of AVs. In testing, we targeted 32-bit x86 Windows emulators, by far the most common type of AV emulator in our experience.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.1.1">Testing Setup</head><p>The results presented in this paper were derived from testing Kaspersky Antivirus 15.0. VBA Windows/CL 3.12.26.4. Testing was conducted on a 32-bit Windows 7 SP1 VM running within VMware Fusion on a Mac OS X host system. The VM was allocated 4 GB of RAM and two 2.8 GHz processor cores. After initial setup, we disconnected the VM from the internet to prevent the AVs from submitting our samples to their cloud servers for further analysis, and to stop them from downloading software or signature updates.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.1.2">Implementation Specifics</head><p>Our first step in building AVLeak was to select sets of uniquely identified malware for each AV. Bitdefender and AVG were able to detect one dropped malware sample per emulator scan, so the AVs were each assigned sets of 256 malware samples to represent the range of bytes 0x00 to 0xFF. Kaspersky could detect 30 unique dropped malware samples per scan, while VBA could detect 8, so they were assigned sets of 7680 (256 x 30) and 2048 (256 x 8) samples respectively. These sets allowed us to write code for the two AVs that could draw upon a full set of 256 unique malware samples for each byte of data to extract, bytes 0-29 in Kaspersky and 0-7 in VBA.</p><p>After selecting sets of malware, we encrypted the samples to prevent static detection, and compiled object files containing the encrypted samples and decryption code.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.1.3">Software Engineering</head><p>AVLeak is implemented in Python, and test cases to fingerprint emulators from within are written in C.</p><p>Given the limited and varying detection capabilities of each AV, leaking multi-byte fingerprints out of their emulators often requires compiling and scanning multiple test binaries. For example, the first binary will leak fingerprint bytes 0 through 7, the second will leak bytes 8 through 15, and so on. To minimize the time spent writing C code in this inefficient paradigm, the specifics of malware dropping are isolated in header files and preprocessor definitions managed by AVLeak. Test case developers can use simple functions to leak data from within emulators, much like writing C to print to standard output. In <ref type="figure" target="#fig_2">Figure 5</ref> we show a test case that extracts the username from within an emulator.</p><p>AVLeak's test case compilation, AV interaction, and data reconstruction are automated in Python. In addition to a command line tool, AVLeak also offers a Python API that may be used to script complex testing routines or integrate with other applications. In <ref type="figure" target="#fig_4">Figure 6</ref>, we show a Python function that uses the API to test various HttpQueryInfo flags.</p><p>AVLeak was designed for portability and ease of use. All Python scripts and C test cases may be written once and run against any AV. Most AV fingerprints can be extracted with only a few seconds of testing. We present several tables evaluating AVLeak's efficiency in the appendix.</p><p>We found that it was possible to integrate new AVs  with only a few hours of work, the vast majority of which is spent running automated scripts.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4">Results</head><p>In evaluation, we used AVLeak to find hundreds of emulator fingerprints spanning six categories, as summarized in <ref type="table" target="#tab_1">Table 1</ref>: environmental artifacts, OS API inconsistency, network emulation, timing, process introspection, and CPU emulator "red pills."</p><p>We chose fingerprints to test by looking to traits of the emulated environments which we believed would be likely to be hardcoded or incorrectly emulated. Our intuition about these fingerprints was guided by study of AV software, evasive malware, and prior research on antianalysis (see <ref type="bibr">Section 8)</ref>.</p><p>In this section we provide a brief overview of some of the most interesting findings from our research.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.1">Environmental Artifacts</head><p>The simplest class of emulator fingerprint are environmental artifacts: traits of the execution environment itself. Consumer AVs do not run a real Windows installation, so their environments must be created from scratch, leaving them vulnerable to detection from hardcoded or inaccurate values. AV developers must also keep environmental values consistent when they are observed using different OS functions.</p><p>We found that Bitdefender, AVG, and VBA used hardcoded names for binaries under analysis, Bitdefender -"C:\TESTAPP.EXE"; AVG - Inconsistencies in CPU instruction emulation</p><p>Incorrectly emulated instructions, unique cycle counts, out-of-order execution behavior "C:\Documents and Settings\Administrator\My Documents\mwsmpl.exe"; and VBA -"C:\SELF.EXE". Kaspersky randomized the name with each scan, returning "C:\[5-8 random lowercase letters].exe". <ref type="bibr" target="#b9">10</ref> All four AVs used hardcoded computer names: Kaspersky -"NfZtFbPfH"; Bitdefender -"tz"; AVG -"ELICZ"; and VBA "MAIN".</p><p>Querying system MAC addresses, we found that Kaspersky generated a random MAC per scan, Bitdefender used a hardcoded value, and AVG and VBA returned zeros.</p><p>We used AVLeak's API to recursively dump the names of all files on the emulated file systems, and all registry entries in the emulated registries. We discovered numerous uniquely named files, <ref type="bibr" target="#b10">11</ref> missing system files, 12 fake installs of multiple AV products, 13 file sharing clients, 14 video games, <ref type="bibr">15</ref> and common consumer software. <ref type="bibr" target="#b15">16</ref> We believe that many of these files are present to bait unknown binaries into showing malicious behavior. Bitdefender and AVG did not emulate the presence of the "." and ".." paths when iterating through directory contents using the FindFirstFile / FindNextFile functions.</p><p>Bitdefender's file system had several files which are clearly "easter eggs" from programmers: "A_E_O_FANTOMA_DE_FISIER_CARE_VA_SA_ZICA_ NU_EXISTA.BAT" 17 , "TZEAPA_A_LA_BATMAN.EXE" <ref type="bibr">18</ref> and "C:\BATMAN".</p><p>Kaspersky's file system had 33 files in the "My Documents" directory with seemingly random file names and common file extensions (xls, doc, mp3, etc.). Close examination of the file names showed that they were likely created by a programmer typing random characters on a QWERTY keyboard. <ref type="bibr">19</ref> We found PE headers and the string "&lt;KL Autogenerated&gt;" (presumably "Kaspersky Lab") in files on Kaspersky's file system (even files without executable extensions).</p><p>Taking inspiration from an attack documented by Lindorfer et al. <ref type="bibr" target="#b39">[40]</ref>, we checked the AVs' emulated registries for Windows product IDs, and found that only AVG's had one. <ref type="bibr" target="#b19">20</ref> AV emulators do not virtualize a full operating system, instead they only run a single (possibly multithreaded) user mode process at a time. We used the CreateToolhelp32Snapshot function to extract process listings from each of the AVs, and found that all had hard-coded listings for other processes running on the system. Bitdefender's assigned the process under analysis to PID 8, running before essential Windows processes, and also had six processes sharing PID 12. <ref type="bibr" target="#b20">21</ref> Kaspersky, Bitdefender, and AVG featured multiple AV processes in their process listings. Many of the fake processes were not backed by files on disk.</p><p>We also found environmental artifacts related to environment variables, open windows, hardware configuration, and system settings, among others.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.2">OS API Inconsistency</head><p>Windows API emulation within AV emulators is often incomplete, and emulators can be fingerprinted by their inaccurate behavior. We found that AVLeak was not significantly more useful in finding these fingerprints than one-bit black-box approaches.</p><p>API inconsistencies within AV emulators are often manifested as total failure of certain functions rather than subtle inconsistencies in API operation, making them easy to discover with the one-bit testing shown in <ref type="figure">Figure  1</ref>. For more subtle artifacts we found that implementing test cases and analyzing their output for inconsistencies was time consuming and did not greatly benefit from the use of our technique. We also found that many interesting functions that we believed would be inaccurately emulated simply caused analysis to abort, a valuable result, but not necessarily a fingerprint. <ref type="bibr" target="#b21">22</ref> The FormatMessage function returned interesting results, and benefited specifically from AVLeak's use. The function can be used to translate error messages from numeric codes to text based descriptions of the error. Kaspersky and VBA returned with failure error codes, though subsequent calls to GetLastError indicated that the function had succeeded. In Bitdefender, the function returned "(from_other)" for all error codes, and AVG returned a string with the error code in hexadecimal prefixed by "MID".</p><p>We found numerous subtle fingerprints related to incorrect WinAPI error codes returned by OS functions. We also explored OS API artifacts related to clipboard manipulation, permissions enforcement, input device state, interprocess communication, various file system actions, GUI interaction, and memory management.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.3">Network Emulation</head><p>The AVs that we tested all denied network access to binaries under analysis, though Kaspersky, Bitdefender, and AVG emulated network connectivity. VBA returned failure when we tried to make network connections.</p><p>Testing HTTP connectivity was particularly fruitful, allowing us to discover networking related artifacts within Kaspersky, Bitdefender, and AVG. These three AVs returned HTTP success status codes when we attempted to make connections to any URL, including clearly invalid ones.</p><p>We extracted downloaded HTTP content from the three AVs, and found that all returned Windows executables in response to requests. Kaspersky returned a 32-bit Windows DLL filled with meaningless random code, and the string "&lt;Downloaded&gt;" followed by the URL the binary was "downloaded" from, in place of "&lt;KL Autogenerated&gt;" as found in binaries on the file system. Bitdefender returned a malformed MS-DOS (MZ) executable containing the unique string "SetSuspect". AVG returned a 32-bit Windows (GUI) PE executable which simply executes "lock mov ebx, 0xff810598" when run (perhaps related to AVG's function emulation, as detailed in section 4.5.1).</p><p>We also tested HTTP status flags, as shown in <ref type="figure" target="#fig_4">Figure  6</ref>, and found unique values and erroneously absent headers.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.4">Timing</head><p>Garfinkel et al. <ref type="bibr" target="#b21">[22]</ref> demonstrated the futility of creating timing-accurate virtualization systems. Timing attacks against virtualizated automated analyis systems have been demonstrated in prior research <ref type="bibr">[15,</ref><ref type="bibr" target="#b39">40,</ref><ref type="bibr" target="#b53">54,</ref><ref type="bibr" target="#b57">58]</ref>.</p><p>We were unsurprised to find that consumer AVs struggled to accurately emulate timing.</p><p>We tested seven methods of reading time: GetSystemTime, GetSystemTimeAsFileTime, GetTickCount, QueryPerformanceCounter, NtQuerySystemTime, and the assembly instructions rdtsc and rdtscp. We found that there was no need for complex attacks on timing emulation as used in academic research.</p><p>Start times for analysis were hardcoded in all four emulators, e.g., Kaspersky's emulator always started the time at 11:01:19 (+/-a few ms, likely due to natural variation in the time for the function call to complete), July 13, 2012; while VBA returned 1,234,560,000 in response to calls to QueryPerformanceCounter, a unique value we assume was hardcoded by a programmer.</p><p>While Kaspersky and AVG's emulators attempted to accurately emulate timing, Bitdefender and VBA's were completely dysfunctional.</p><p>Taking timing readings with GetTickCount before and after a call to Sleep(1000) (sleep for 1,000 ms, or one second), Bitdefender showed average tick count differences of approximately 150,000,000 ms; 150,000 times larger than the expected 1,000. <ref type="bibr" target="#b22">23</ref> VBA featured similar disproportionately large time deltas approximately 500 times larger than would be expected.</p><p>Bitdefender aborted analysis after calls to NtQuerySystemTime, and did not modify the SYSTEMTIME structure given in to a call to GetSystemTime.</p><p>VBA identified the date and time as 1:31:12.123, 11/3/2013 in calls to GetSystemTime but returned 7:30:01.110, 7/17/2009 in calls to GetSystemTimeAsFileTime.</p><p>VBA's implementation FileTimeToSystemTime always returned a system time of 0:0:0.0, 0/0/2000, no matter what FILETIME was passed in, and NtQuerySystemTime did nothing.</p><p>Kaspersky and AVG's higher fidelity timing emulation was detectable through "hyperreality", wherein the passage of time was emulated too accurately without consideration for the inherent overheard and variability of a real computer. Taking timing readings over executions of Sleep, we found that the emulators failed to account for the time it would take for Sleep to call into the kernel, and for the process to be put to sleep and subsequently woken. AVG monotonically incremented the time by the number of ms requested for sleep, showing 0 ms of overhead for the operation. Kaspersky showed some variability in timing, with roughly half of sub-15 second sleeps incurring a 15-16 ms overhead, while those above 15 seconds incurred 0 ms of overhead. For reference, our test VM incurred 14-16 ms of overhead for all Sleep calls.</p><p>While conducting networking testing, we timed the four emulators making HTTP requests to "www.google.</p><p>com", and found that all reported that requests took 0 ms. In our isolated test VM, each failed request took approximately 300 ms.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.5">Process Introspection</head><p>Process introspection artifacts are fingerprints related to the observable state of code and data within a given binary's process space. Examples include heap metadata, periodicity of heap allocation, contents of uninitialized memory, Windows runtime data structures such as the PEB and TEB, data left on the stack or in registers between function calls, and DLLs loaded in memory.</p><p>We built AVLeak test cases to extract process introspection artifacts, but found that they are often very subtle and require deep knowledge of undocumented Windows internals. These fingerprints are not as obvious as others such as hardcoded environmental strings.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.5.1">Library Code Artifacts</head><p>We analyzed the code of Windows system DLLs loaded in the process space of our test binaries, and found common patterns in three of the four emulators. We extracted code by dumping the raw bytes at addresses returned by calls to GetProcAddress, and found that obscure or excepting operations were used as a means of signaling the need for function emulation.</p><p>To trigger function emulation, AVG uses the obscure "lock mov ebx" instruction (shown in <ref type="figure" target="#fig_6">Fig- ure 7)</ref>, while Bitdefender calls or returns to an invalid address, and VBA moves the number 0x406 to address 0xFFF1[two byte ordinal number of invoked function]. Kaspersky was unique in attempting to prevent detection by generating random bytes on per-run basis after the standard "mov edi, edi" and a "push" of the current function's address.  In addition to the unique signatures within functions, we also found inaccurate use of the WinAPI hot patch point appearing on functions that do not have it in real Windows systems. Padding between functions was inaccurate in Bitdefender ("int 3") and VBA ("hlt").</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.6">CPU "Red Pills"</head><p>CPU "red pills" are instructions which behave differently on a CPU emulator than they do on a real CPU <ref type="bibr" target="#b52">[53]</ref>. Efficient red pill discovery requires complex testing frameworks <ref type="bibr" target="#b52">[53,</ref><ref type="bibr" target="#b63">64]</ref>. We considered building such a framework to be beyond the scope of our current research. However, we were able to build tools for CPU state serialization and extraction with AVLeak, and preliminary experimentation appears promising. We hope to further document our red pill testing in future publications.</p><p>We were able to discover some red pills by creating custom testing scripts for particularly unique instructions unlikely to be correctly emulated.</p><p>Testing the CPUID instruction revealed that all four emulators under test identified themselves using Intel's vendor ID string "GenuineIntel", but implementation of other CPUID functions were inconsistent. When checking the processor brand string for the emulated CPUs, Kaspersky returned "Intel(R) Pentium(R) 4 CPU 2.40GHz"; while VBA identified as "Intel(R) Core(TM)2 Duo CPU P8600 @ 2.40GHz"; and Bitdefender did not return anything. AVG identified its processor as "x86 Family 15 Model 4 Stepping 3, AuthenticAMD", contradicting its vendor identification of "GenuineIntel". Further, AVG did not produce the "IT'S HAMMER TIME" string for CPUID function 0x8FFFFFFF, a feature in AMD processors <ref type="bibr">[19]</ref>.</p><p>We found interesting preliminary results from testing the RDTSC instruction to retrieve CPU cycle counts. We believe that it may be possible to fingerprint specific CPU emulators by the number of (emulated) CPU cycles which specific instructions take. Further, RDTSC-derived cycle counts may be used to detect the lack of concurrently executing processes and an real operating system.</p><p>While conducting timing testing, we found that the RDTSCP instruction caused analysis to abort within Kaspersky and VBA's emulators.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.7">Evasion</head><p>We briefly evaluated AVLeak's viability for operational use by creating twenty evasive malware droppers using AV fingerprints we discovered. We achieved 100% evasion, all of the binaries were not detected as malicious during emulation, but successfully dropped malware on a real system.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5">Malware Discovery</head><p>Through Google searches of strings found within the emulators, we discovered numerous malware samples profiled on automated malware analysis sites such as totalhash.com and malwr.com. <ref type="bibr" target="#b23">24</ref> We were limited by our ability to only search for simple text based patterns in public malware reports.</p><p>AVLeak-derived fingerprints can be used defensively to create new static malware signatures for use in network protection systems, or to search through existing malware databases. Knowledge of specific emulation detection methods may be used to build mitigations against future detection, or to illicit previously unseen behavior in evasive malware.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5.1">Thai Malware</head><p>When searched on Google in March 2015, the AVG product ID <ref type="bibr" target="#b19">20</ref> we discovered through registry dumping returned a single result, a file hosted on a Thai middle school's website. <ref type="bibr" target="#b24">25,</ref><ref type="bibr" target="#b25">26</ref> The file has since been removed from the site. We extracted a user mode executable <ref type="bibr" target="#b26">27</ref> and a kernel driver 28 from the file. Uploading the usermode binary to VirusTotal showed that we were the third to upload the file, with the first upload on 11/12/2012. The kernel driver had never been uploaded before.</p><p>We found a third PE header in the file, but it did not correspond with any easily extractable executable. In the rest of the file, we found numerous environmental strings related to AVG's emulator as well as over 1,300 code snippets using AVG's function emulation triggering instructions, as discussed in section 4.5.1.</p><p>While their ultimate intentions remain unknown, the creators of the malware undoubtedly possessed intimate knowledge of AVG's emulator internals. <ref type="bibr" target="#b28">29</ref> </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5.2">EvilBunny</head><p>Our research also enabled better understanding of "EvilBunny", a highly advanced malware platform associated with the "Animal Farm" APT, first discovered by Marion Marschalek of Cyphort <ref type="bibr" target="#b40">[41]</ref>. Before unpacking its multithreaded Lua scripting engine, EvilBunny's dropper <ref type="bibr" target="#b29">30</ref> checks if its name contains "TESTAPP", the name used for binaries under analysis in Bitdefender's emulator. If named "TESTAPP", the malware aborts execution to avoid detection. EvilBunny also checks that its name is not "afyjevmv.exe" (among several other anti-analysis checks), which we believe may be a randomly generated name from Kaspersky's emulator. <ref type="bibr" target="#b30">31</ref> EvilBunny's dropped payload 32 exhibits the same anti-analysis behavior, but checks for the string "testapp.exe". Prior to our research, it was not known that that the "TESTAPP" string was related to Bitdefender evasion. <ref type="bibr" target="#b32">33</ref> </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="6">Future Work</head><p>Directions for future work include improvements to testing and AV integration, as well as the development of novel emulation detection attacks, and vulnerability research targeting emulators for breakout. We plan to construct more pre-built test cases and integrate more AV products with AVLeak. Alternative Platforms AV emulators for ELF binaries, x86_64, ARM, .NET bytecode, JavaScript, and ActionScript have been documented <ref type="bibr" target="#b0">[1,</ref><ref type="bibr" target="#b34">35]</ref>. We hope to experiment with fingerprinting these emulators using AVLeak. Autonomous Fingerprinting Our technique requires advance access to AV software in order to discover emulator fingerprints before creating evasive malware. Second Part To Hell's emulator detection technique <ref type="bibr" target="#b62">[63]</ref> does not require prior access, and may be autonomously deployed in malware. Future researchers in this field may look into discovering other approaches to heuristicallyenabled autonomous evasion. Environmental Artifacts Future research in discovering environmental artifacts may look more deeply at file system and registry artifacts, emulated hardware devices, and other environmental traits. We are particularly interested in exploring fingerprints related to statistical discrepancies in file properties and metadata in emulated file systems versus real file systems. OS API Inconsistency Improvements to OS API testing may benefit from the Wine project <ref type="bibr" target="#b68">[70]</ref>, which provides a compatibility layer allowing Windows binaries to run on POSIX systems. Unit tests for Wine's implementation of the Windows API could be repurposed for API testing with AVLeak. Network Emulation Our exploration of network emulation primarily looked at HTTP traffic, but we believe valuable insights may come from exploration of other methods potentially used for exfiltration (FTP, raw sockets), command and control (IRC, email, DNS), DNS implementation, and HTTPS cryptographic negotiation. Preliminary results from manual reverseengineering during initial experimentation showed us that some emulators may also support email protocols in order to analyze spambots. Timing Swinnen and Mesbahi <ref type="bibr" target="#b65">[66]</ref> intentionally introduced race conditions into multi-threaded code in order to detect incorrect timing emulation. We implemented tests for multi-threading-related fingerprints, but found that this style of testing did not benefit from the use of AVLeak over prior black-box schemes. Future research could develop more advanced threading-based detection attacks which benefit from AVLeak's use.</p><p>Process Introspection Further work in discovering process introspection fingerprints may look to detection attacks against dynamic binary instrumentation frameworks such as Intel Pin and DynamoRIO <ref type="bibr" target="#b64">[65]</ref>. CPU Red Pills Advancements in CPU red pill discovery may draw upon prior work in the field, using open test suites such as <ref type="bibr">Shi et al.'s [64]</ref> against AV CPU emulators.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="6.1">New Reverse-Engineering Approaches</head><p>Future fingerprinting research could combine light reverse-engineering with black-box testing.</p><p>As emulators use functions to emulate the Windows API, an attacker could hook emulation functions and examine their arguments. For example, hooking an emulator's implementation of WriteFile, and saving off all data being written to the emulated file system within the AV. Fingerprinting binaries would then write observed fingerprints to a "file" with WriteFile to leak data.</p><p>In addition to tapping function calls within emulators for hooking, attackers could leak sensitive data though passive observation of an emulator process. If predictable or static memory locations are used as part of emulation, attackers could create emulator profiling binaries which place fingerprint observations in these locations for collection. Collection could be facilitated by an injected library, observing process, or external instrumentation. If memory locations are randomized, fingerprinting binaries could format observations with patterns so that they can be easily found in process memory.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="6.2">Vulnerability Research</head><p>AVLeak may also be useful to researchers attacking emulators to discover vulnerabilities allowing breakout and in the case of many AVs, simultaneous privilege escalation. 34 AV exploitation has received recent attention from Joxean Koret <ref type="bibr" target="#b32">[33,</ref><ref type="bibr" target="#b33">34,</ref><ref type="bibr" target="#b34">35]</ref>, and Tavis Ormandy. Ormandy's Google Project Zero blog post "Analysis and Exploitation of an ESET Vulnerability" <ref type="bibr" target="#b45">[46]</ref> demonstrates an ESET emulator breakout exploit. Various Project Zero bug reports from Ormandy have shown vulnerabilities in other emulators <ref type="bibr" target="#b46">[47,</ref><ref type="bibr" target="#b47">48,</ref><ref type="bibr" target="#b48">49,</ref><ref type="bibr" target="#b49">50,</ref><ref type="bibr" target="#b50">51,</ref><ref type="bibr" target="#b51">52]</ref>. While exploit development requires intensive reverse-engineering, AVLeak may provide vulnerability researchers with a good starting point for their analyses.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="7">Mitigations</head><p>Our technique exploits AVs' essential ability to detect malware as a means of undermining them. Without fundamental changes to the structure of AV software, blackbox attacks will continue to be effective against them.</p><p>We were surprised by the number of hardcoded environmental artifacts we discovered. Simply randomizing data where appropriate could make emulators more difficult to fingerprint. Kaspersky randomized program names, MAC addresses, and in-memory DLL code, but we did not observe any other randomization during experimentation.</p><p>Future developments in AV software may look to heuristically detecting anti-emulation behavior in malware. AV vendors can draw upon a wealth of academic research on the topic from the past decade <ref type="bibr" target="#b4">[5,</ref><ref type="bibr" target="#b25">26,</ref><ref type="bibr" target="#b29">30,</ref><ref type="bibr" target="#b30">31,</ref><ref type="bibr" target="#b31">32,</ref><ref type="bibr" target="#b38">39,</ref><ref type="bibr" target="#b39">40]</ref>. Consumer AVs have an advantage over academic systems in that they only need to block malware from infecting endpoint computers, whereas academic systems seek to automate malware analysis. If an AV heuristically detects malicious or anti-emulation behavior, blocking the binary and sending it back to the AV's vendor for further analysis is a useful action.</p><p>Kolbitsch et al.'s work <ref type="bibr" target="#b31">[32]</ref> uses five traits of system call invocation over time in order to detect stalling behavior in analysis-resistant binaries. Similar, but less computationally complex techniques may be useful for detecting anti-emulation in consumer AVs. The behaviors exhibited by AV emulation resistant malware are likely quantifiably different those seen in benign programs.</p><p>Program analysis techniques such as taint analysis, symbolic execution, and forced path exploration could eliminate the need for traditional emulation, or at least frustrate fingerprinting efforts. However, the use of these techniques in malware analysis remains an open area of research, and they are unlikely to be employed in consumer AV software anytime in the near future.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="8">Related Work</head><p>Our research builds upon prior work from academic, industry, and independent security researchers.</p><p>Our literature survey focuses on attacks against Windows-based automated malware analysis systems and AVs, as well as publicly available materials on emulators from AV vendors themselves. We note that similar attacks have also been documented against alternative virtualization systems, including those for mobile devices and web browsers.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="8.1">Academic Work</head><p>Prior academic research has used black-box analysis against commercial AV products, and has explored antianalysis behavior seen in the wild. Academic research into virtualization detection and counter-detection mitigations is too vast to sufficiently document here, we refer interested readers to <ref type="bibr">Egele et al.'s [18]</ref> survey of automated malware analysis system designs, <ref type="bibr">PÃ©k et al.'s [55]</ref> survey of security issues in hardware virtualization, and <ref type="bibr">Raffetseder et al.'s [58]</ref> demonstration of low-level detection attacks against system emulators.</p><p>Independently conducted work from Filiol et al. <ref type="bibr" target="#b19">[20]</ref> and Hamlen et al. <ref type="bibr" target="#b23">[24]</ref> demonstrates how black-box analysis may be used to extract static signatures from AVs by repeatedly scanning modified malware samples. Further work from Filiol et al. <ref type="bibr" target="#b20">[21]</ref> uses a similar black-box scheme to extract information about run-time behavioral signatures. Borello et al. <ref type="bibr" target="#b10">[11]</ref> use black-box analysis against sixteen AV products to evaluate their ability to detect metamorphic malware.</p><p>Yoshioka et al.'s work <ref type="bibr" target="#b70">[72]</ref> is particularly relevant to our research, demonstrating the use of analysis reports as a means of exfiltrating fingerprints from within automated analysis systems.</p><p>Chen et al. <ref type="bibr">[15]</ref> propose a taxonomy of antivirtualization and anti-debugging techniques, and analyze the prevalence of anti-analysis behavior in malware. <ref type="bibr">Bayer et al. [38]</ref>, present statistics on malware behavior observed in the wild in the Anubis sandbox, and discuss detection attacks used against it.</p><p>Oberheide et al.'s PolyPack <ref type="bibr" target="#b43">[44]</ref> provides a cloud service which packs malware binaries using multiple packers and evaluates their detection by consumer AVs.</p><p>In experimentation, we sought to use attacks on virtualization and emulation as documented in prior work, but found that consumer AVs were vulnerable to far simpler attacks. Our research is unique in attacking consumer AV emulators, we are not aware of prior academic treatment of the topic.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="8.2">Industry and Non-Academic Work</head><p>Emulation detection and black-box testing of AV emulators has also been explored in whitepapers and conference talks from industry and non-academic researchers. We note that other non-academic research has also attacked high-end virtualization systems, and similar attacks have also been mounted against dynamic binary instrumentation frameworks <ref type="bibr" target="#b64">[65]</ref>.</p><p>As noted in Section 2.3, previous conference talks and written work have used one-bit black-box constructions to fingerprint AV emulators <ref type="bibr" target="#b0">[1,</ref><ref type="bibr" target="#b34">35,</ref><ref type="bibr" target="#b41">42,</ref><ref type="bibr" target="#b61">62,</ref><ref type="bibr" target="#b65">66]</ref>.</p><p>In presentations at REcon and Black Hat 2010, Georg Wicherski of Kaspersky Lab's Global Research and Analysis Team (GReAT) discussed emulator evasion techniques while presenting "dirtbox", an x86 Windows emulator for malware analysis motivated by shortcomings in AV emulators <ref type="bibr" target="#b66">[68,</ref><ref type="bibr" target="#b67">69]</ref>.</p><p>In 2009, Kleissner mounted an attack on several AV companies, distributing a binary which contacted his servers to leak sensitive system fingerprints when executed in a network-connected analysis system <ref type="bibr" target="#b24">[25,</ref><ref type="bibr" target="#b35">36]</ref>.</p><p>Kleissner's attack is the same as <ref type="bibr">Yoshioka et al.'s [72]</ref>, and was carried out shortly after the publication of the first technical report on the technique <ref type="bibr" target="#b69">[71]</ref>. The fingerprints were subsequently made available on the now defunct avtracker.info.</p><p>In a blog post, Rolles <ref type="bibr" target="#b59">[60]</ref> discusses an attack against Renovo, an academic automated analysis system, which exploits its ability to detect and return unpacked code in order to exfiltrate data about the host system.</p><p>Austrian virus author Second Part To Hell (SPTH) <ref type="bibr" target="#b62">[63]</ref>, proposes a method of using black-box analysis to detect AV emulators by examining undocumented register states left after the invocation of Windows API functions. SPTH's technique is particularly notable as it may be deployed autonomously by malware running in an unknown emulator, and does not require exfiltration of data from the emulator to enable evasion.</p><p>In a self-published paper, Ormandy <ref type="bibr" target="#b44">[45]</ref> discusses the design of Sophos' emulator with insights presumably gleaned from manual reverse-engineering.</p><p>AV emulator evasion has received attention among penetration testers. SideStep <ref type="bibr" target="#b15">[16]</ref> and peCloak <ref type="bibr" target="#b16">[17]</ref> pack Metasploit payloads to evade AV emulators, while Veil <ref type="bibr">[67]</ref> enables AV evasion at large.</p><p>Our work takes inspiration from prior black-box testing, but we use an expanded exfiltration bandwidth, and conduct a more through survey of consumer AV emulator fingerprints than previously presented.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="8.3">Promotional Material and Patents</head><p>AV vendors generally do not discuss the internals of their software, though some have described their emulator technology in promotional material and patents.</p><p>Kaspersky Lab CEO Eugene Kaspersky has discussed Kaspersky's emulator in two blog posts <ref type="bibr" target="#b26">[27,</ref><ref type="bibr" target="#b27">28]</ref>. A case study from Bitdefender discusses high level features in the company's "B-HAVE" engine <ref type="bibr" target="#b8">[9]</ref>.</p><p>Kaspersky Lab has been particularly thorough in patenting technologies associated with their emulator <ref type="bibr" target="#b2">[3,</ref><ref type="bibr" target="#b5">6,</ref><ref type="bibr" target="#b6">7,</ref><ref type="bibr">8,</ref><ref type="bibr" target="#b55">56,</ref><ref type="bibr" target="#b56">57,</ref><ref type="bibr" target="#b71">73]</ref>. A patent from Bitdefender [43] discusses a method for identifying known code sequences during emulation.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="9">Conclusion</head><p>We have presented a novel technique for extracting artifacts of emulation from AV emulators. We constructed a tool, AVLeak, that successfully demonstrates our technique against several popular commercial AV products. Previously, discovering emulator fingerprints required difficult reverse-engineering or inefficient black-box testing, while our work makes the problem tractable to even novice programmers. AVLeak is efficient, generic, and easy to use, making it a viable alternative to reverseengineering. AVLeak can be integrated with new AVs in a matter of hours, and its API and abstracted design allows attackers to write fingerprinting code that works against any AV.</p><p>Our work contributes to a growing corpus of research attacking consumer AV software, exposing vulnerabilities in its operation previously protected by obscurity. Our findings show that advanced attackers are already aware of many consumer AV fingerprints, and have been using them to evade detection in the wild for years.</p><p>Emulation is a vital tool in stopping modern malware, and the battle between analysis-resistant malware and automated analysis systems remains highly active. In academic research, the most state-of-the-art automated analysis systems rely on instrumentation to physical hardware (avoiding emulation entirely) <ref type="bibr" target="#b28">[29,</ref><ref type="bibr" target="#b30">31,</ref><ref type="bibr" target="#b60">61]</ref> or complex program analysis techniques and large scale test systems <ref type="bibr" target="#b1">[2]</ref>, both infeasible for deployment in consumer AV software.</p><p>We have just scratched the surface in fingerprinting AV emulators, and we hope to continue this research in order to enable more advanced attacks and greater AV coverage. <ref type="bibr" target="#b28">29</ref> Analysts with any insight into these binaries, or an interest in analyzing them are encouraged to reach out to the authors. We conducted a cursory analysis of the files, but their overall purpose is unclear.</p><p>The usermode executable had five functions. The program accesses the GdiHandleBuffer entry in the PEB and enters a switch case based on the last element of the buffer. In switch cases four and five respectively, the program then loads a DLL with a name specified in the command line arguments of the program and calls a command linespecified function in it. In cases three, six, eleven, twelve, and thirteen, the program exits with ExitProcess(1). The remaining default cases loops calling a function while the value in register eax is non-zero, and breaks to the ExitProcess call when the value is zero. The function called in the loop simply executes the instruction "lock mov ebx, 0xff810598" and returns. We were not able to identify the function within AVG which this operation corresponds to, but it follows AVG's form of using "lock mov ebx" to trigger function emulation as shown in <ref type="figure" target="#fig_6">Figure 7</ref>.</p><p>The kernel driver was built with debug information in a file called "UNISYS.pdb", we were not able to find any information about the name from Google searches. The driver disassembled to a single empty Windows driver entry.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="30">MD5: c40e3ee23cf95d992b7cd0b7c01b8599</head><p>31 It is possible that this name was extracted from an earlier version of Kaspersky that does not do per-run name randomization, or that the programmers simply extracted the name from a single run.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="32">MD5: 3bbb59afdf9bda4ffdc644d9d51c53e7</head><p>33 We shared this information with Marion Marschalek when we discovered it, she has since presented it in talks at SYSCAN, REcon, and VirusBulletin, among others.</p></div><figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_1"><head>2 .Figure 4 :</head><label>24</label><figDesc>Figure 4: Example output from an AV and reconstruction of exfiltrated information. Correlating the malware detections with the values they are mapped to, we reconstruct that EmulatedFunction returned "Antivirus".</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_2"><head>Figure 5 :</head><label>5</label><figDesc>Figure 5: A simple AVLeak test case to extract the user name from an emulator. The leak function behaves much like puts, but causes malware to be dropped rather than printing characters to the terminal. Preprocessor directives abstracted away from the programmer in header files manage backend specifics for each AV.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_4"><head>Figure 6 :</head><label>6</label><figDesc>Figure 6: A simple AVLeak Python testing function which enumerates all HTTP attribute flags that can be queried with HttpQueryInfo and extracts the first 20 bytes of each returned attribute.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_6"><head>Figure 7 :</head><label>7</label><figDesc>Figure 7: Example of code extracted from AVG's kernel32.dll in memory. The second byte of the mov instruction argument denotes the library, while the third and fourth bytes denote a specific function. AVG's CPU emulator presumably intercepts the obscure "lock mov ebx", and invokes code to emulate the function.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_1" validated="false"><head>Table 1 :</head><label>1</label><figDesc>Table summarizing the six categories of fingerprints we examined with AVLeak.</figDesc><table></table></figure>

			<note place="foot" n="3"> Following advice from Rolf Rolles in response to a Stack Exchange post [59] we made early in our development of AVLeak, we analyzed several AV emulators by searching for large switch cases in IDA Pro. After increasing IDA&apos;s per-function basic block limit to 10,000, we attempted to look at these large functions in IDA&apos;s graph view, which froze the window during rendering, was slow to navigate, and crashed the program when non-trivial annotations were made. 4 We used this technique to find fingerprints during initial experimentation and subsequently confirmed our findings with AVLeak. 5 Specifically, we used a large set of DOS viruses (the VX Heaven Virus Collection, a 45 GB collection available on numerous torrents online), selected for their small size. Checking for unique identification is important, as many AVs use broad signatures that cover multiple variants of individual malware samples (i.e., identifying two distinct binaries known to us as &quot;Trojan.DOS.KillCMOS.7&quot; and &quot;Trojan.DOS.KillCMOS.A&quot; both as &quot;Trojan.DOS.KillCMOS&quot;). 6 Making sure that code is not heuristically identified as malicious and is emulated with every single run is non-trivial, and required us to specially craft our test cases and experiment with various scanning parameters of the AVs. 7 We began testing Emsisoft and F-Secure, which use Bitdefender&apos;s</note>

			<note place="foot" n="34"> Ormandy&apos;s Google Project Zero blog post &quot;Analysis and Exploitation of an ESET Vulnerability&quot; [46] shows how a vulnerability in emulator code shared across ESET software for Windows, Mac, and Linux can be exploited to achieve NT AUTHORITY\SYSTEM privilege on Windows and root privilege on Mac and Linux.</note>
		</body>
		<back>

			<div type="acknowledgement">
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Acknowledgements</head><p>The authors would like to thank the following individuals for their support: Marion Marschalek, Rolf Rolles, Alex Ionescu, Dr. Sergey Bratus, Bruce Dang, Dr. Gregory Hughes, and RPISEC.</p></div>
			</div>

			<div type="annex">
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Notes</head><p>1 In a particularly odd bug report, Google Project Zero's Tavis Ormandy demonstrates how Comodo's emulator unwittingly provides malware with network connectivity, and constructs a keylogger for the host system that runs from within the emulator while exfiltrating keystrokes to an attacker controlled server <ref type="bibr" target="#b47">[48]</ref>. <ref type="bibr" target="#b1">2</ref> Even locating specific modules within AV software dedicated to emulation can be challenging. Koret and Bachaalany discuss challenges related to locating emulator libraries and propose some simple heuristic methods for finding them in "The Antivirus Hacker's Handbook" <ref type="bibr" target="#b34">[35]</ref>     <ref type="table">Table showing</ref> AVLeak's efficiency in leaking the names of every file on the emulated file system from each of the emulators (time in hours, minutes, and seconds). Our calculation of number of files is the number of directories and files on the file system C:\ drive, not counting the "." and ".." paths which come up when iterating through files in directories (these paths were extracted with AVLeak, and are included in the calculation of number of bytes leaked).</p><p>Our process for dumping file system entries involves recursively exploring all directories starting at the C:\ drive. The process is somewhat inefficient as in we did not have an easy way to convey how many files are in a given directory, or how long each file name is, so we recursed through the directories until no more files were present, and dumped file names until a null byte was encountered. We believe that we could expedite this process by a factor of at least two with some optimizations to our design. The process is fully automated by a ~35 line Python script using the AVLeak API, and ~30 lines of C code for the binaries that are scanned to leak information.</p></div>			</div>
			<div type="references">

				<listBibl>

<biblStruct xml:id="b0">
	<monogr>
		<title level="m" type="main">Evading Code Emulation: Writing Ridiculously Obvious Malware That Bypasses AV, 2014. Talk at BSides Las Vegas</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Adams</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">K</forename></persName>
		</author>
		<imprint>
			<date type="published" when="2014" />
			<pubPlace>Las Vegas, Nevada</pubPlace>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b1">
	<analytic>
		<title level="a" type="main">Safe and Automated Live Malware Experimentation on Public Testbeds</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Alwabel</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Shi</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">H</forename><surname>Bartlette</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">G</forename><surname>And</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Mirkovic</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">7th Workshop on Cyber Security Experimentation and Test</title>
		<imprint>
			<date type="published" when="2014" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b2">
	<analytic>
		<title level="a" type="main">System and method for generating emulation-based scenarios for error handling</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Antukh</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>And</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Malanov</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">US Patent</title>
		<imprint>
			<biblScope unit="volume">8</biblScope>
			<biblScope unit="page">279</biblScope>
			<date type="published" when="2013" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b3">
	<monogr>
				<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><forename type="middle">V</forename><surname>Comparatives</surname></persName>
		</author>
		<ptr target="http://www.av-comparatives.org/av-vendors" />
		<title level="m">List of AV Vendors (PC</title>
		<imprint>
			<date type="published" when="2014" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b4">
	<analytic>
		<title level="a" type="main">Efficient Detection of Split Personalities in Malware</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Balzarotti</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Cova</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Karlberger</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><surname>And</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Kirda</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">E</forename></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">NDSS 2010, 17th Annual Network and Distributed System Security Symposium</title>
		<imprint>
			<date type="published" when="2010" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b5">
	<analytic>
		<title level="a" type="main">Method for accelerating hardware emulator used for malware detection and analysis</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Belov</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">US Patent</title>
		<imprint>
			<biblScope unit="volume">8</biblScope>
			<biblScope unit="page">509</biblScope>
			<date type="published" when="2012" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b6">
	<analytic>
		<title level="a" type="main">System and method for countering detection of emulation by malware</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Belov</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">US Patent</title>
		<imprint>
			<biblScope unit="volume">8</biblScope>
			<biblScope unit="page">286</biblScope>
			<date type="published" when="2014-09" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b7">
	<analytic>
		<title level="a" type="main">System and method for improving the efficiency of application emulation acceleration</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Belov</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">US Patent</title>
		<imprint>
			<biblScope unit="volume">8</biblScope>
			<biblScope unit="page">596</biblScope>
			<date type="published" when="2015" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b8">
	<analytic>
		<title level="a" type="main">-HAVE -The Road To Success</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Bitdefender</forename></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Tech. rep</title>
		<imprint>
			<date type="published" when="2010" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b9">
	<monogr>
		<title level="m" type="main">Reverse Engineering Anti-Virus Emulators through Black-box Analysis</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Blackthorne</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>And</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Yener</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">B</forename></persName>
		</author>
		<imprint>
			<date type="published" when="2015" />
		</imprint>
		<respStmt>
			<orgName>Computer Science Department, Rensselaer Polytechnic Institute</orgName>
		</respStmt>
	</monogr>
<note type="report_type">Tech. rep.</note>
</biblStruct>

<biblStruct xml:id="b10">
	<analytic>
		<title level="a" type="main">From the design of a generic metamorphic engine to a black-box classification of antivirus detection techniques</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Borello</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><forename type="middle">M</forename><surname>Filiol</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">E</forename><surname>And</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><forename type="middle">Ã</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">L</forename></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Journal in Computer Virology</title>
		<imprint>
			<biblScope unit="volume">6</biblScope>
			<date type="published" when="2010" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b11">
	<monogr>
		<title level="m" type="main">AVLeak: Fingerprinting Antivirus Emulators For Advanced Malware Evasion, 2016. Talk at Black Hat</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Bulazel</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename></persName>
		</author>
		<imprint>
			<date type="published" when="2016" />
			<pubPlace>Las Vegas, NV</pubPlace>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b12">
	<analytic>
		<title level="a" type="main">AVLeak: Turning Antivirus Emulators Inside Out</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Bulazel</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Talk at ShmooCon</title>
		<meeting><address><addrLine>Washington, DC</addrLine></address></meeting>
		<imprint>
			<date type="published" when="2016" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b13">
	<monogr>
		<title level="m" type="main">AVLeak: Profiling Commercial Anti-Virus Emulators Through Black Box Testing</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Bulazel</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>And</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Yener</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">B</forename></persName>
		</author>
		<imprint>
			<date type="published" when="2015" />
			<pubPlace>Rensselaer Polytechnic Institute, Troy, NY</pubPlace>
		</imprint>
	</monogr>
	<note>Master&apos;s thesis</note>
</biblStruct>

<biblStruct xml:id="b14">
	<analytic>
		<title level="a" type="main">Towards an understanding of anti-virtualization and anti-debugging behavior in modern malware</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Chen</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">X</forename><surname>Andersen</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Mao</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Z</forename><forename type="middle">M</forename><surname>Bailey</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>And</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Nazario</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">2008 IEEE International Conference on Dependable Systems and Networks With FTCS and DCC (DSN)</title>
		<imprint>
			<publisher>IEEE</publisher>
			<date type="published" when="2008" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b15">
	<monogr>
				<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Codewatch</forename><surname>Sidestep</surname></persName>
		</author>
		<ptr target="https://www.codewatch.org/blog/?p=414" />
		<title level="m">Another AV Evasion Tool</title>
		<imprint>
			<date type="published" when="2015" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b16">
	<monogr>
		<title level="m" type="main">py An Experiment in AV Evasion</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Czumak</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Pecloak</surname></persName>
		</author>
		<ptr target="http://www.securitysift.com/pecloak-py-an-experiment-in-av-evasion" />
		<imprint>
			<date type="published" when="2015" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b17">
	<analytic>
		<title level="a" type="main">A Survey on Automated Dynamic Malware Analysis Techniques and Tools</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Egele</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Theodoor</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Kirda</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">E</forename><surname>And</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Kruegel</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">ACM Computing Surveys</title>
		<imprint>
			<biblScope unit="volume">44</biblScope>
			<biblScope unit="issue">2</biblScope>
			<date type="published" when="2012" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b18">
	<monogr>
		<title level="m" type="main">Attacks on Virtual Machine Emulators</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Ferrie</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename></persName>
		</author>
		<imprint>
			<date type="published" when="2006" />
		</imprint>
	</monogr>
<note type="report_type">Tech. rep., Symantec Advanced Threat Research</note>
</biblStruct>

<biblStruct xml:id="b19">
	<analytic>
		<title level="a" type="main">Malware pattern scanning schemes secure against black-box analysis</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Filiol</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">E</forename></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Journal in Computer Virology</title>
		<imprint>
			<biblScope unit="volume">2</biblScope>
			<date type="published" when="2006" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b20">
	<analytic>
		<title level="a" type="main">Evaluation methodology and theoretical model for antiviral behavioural detection strategies</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Filiol</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">E</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Jacob</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">G</forename><surname>And</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Liard</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><forename type="middle">L</forename></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Journal in Computer Virology</title>
		<imprint>
			<biblScope unit="volume">3</biblScope>
			<date type="published" when="2007" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b21">
	<analytic>
		<title level="a" type="main">Compatibility is Not Transparency: VMM Detection Myths and Realities</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Garfinkel</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><surname>Adams</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">K</forename><surname>Warfield</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>And</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Franklin</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">HOTOS&apos;07 Proceedings of the 11th USENIX workshop on Hot topics in operating systems</title>
		<imprint>
			<date type="published" when="2007" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b22">
	<monogr>
		<title level="m" type="main">Internet Security Threat Report: Attackers are bigger, bolder</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Haley</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">K</forename></persName>
		</author>
		<ptr target="http://www.symantec.com/connect/blogs/2015-internet-security-threat-report-attackers-are-bigger-bolder-and-faster" />
		<imprint>
			<date type="published" when="2015" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b23">
	<analytic>
		<title level="a" type="main">Exploiting an Antivirus Interface</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Hamlen</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">K</forename><forename type="middle">W</forename><surname>Mohan</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">V</forename><surname>Masud</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><forename type="middle">M</forename><surname>Khan</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">L</forename><surname>And</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Thuraisingham</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">B</forename></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Computer Standards &amp; Interfaces</title>
		<imprint>
			<biblScope unit="page">31</biblScope>
			<date type="published" when="2009" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b24">
	<monogr>
		<title level="m" type="main">A black hat loses control</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Kamluk</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">V</forename></persName>
		</author>
		<ptr target="https://securelist.com/blog/incidents/30575/a-black-hat-loses-control" />
		<imprint>
			<date type="published" when="2009" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b25">
	<analytic>
		<title level="a" type="main">Emulating Emulation-Resistant Malware</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Kang</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><forename type="middle">G</forename><surname>Yin</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">H</forename><surname>Hanna</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Mccamant</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>And</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Song</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">VMSec &apos;09 Proceedings of the 1st ACM workshop on Virtual machine security</title>
		<imprint>
			<date type="published" when="2009" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b26">
	<monogr>
		<title level="m" type="main">Emulation: A headache to develop -but oh-so worth it</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Kaspersky</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">E</forename></persName>
		</author>
		<ptr target="http://eugene.kaspersky.com/2012/03/07/emulation-a-headache-to-develop-but-oh-so-worth-it" />
		<imprint>
			<date type="published" when="2012" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b27">
	<monogr>
		<title level="m" type="main">Emulate to exterminate</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Kaspersky</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">E</forename></persName>
		</author>
		<ptr target="http://eugene.kaspersky.com/2013/07/02/emulate-to-exterminate" />
		<imprint>
			<date type="published" when="2013" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b28">
	<analytic>
		<title level="a" type="main">BareBox: Efficient Malware Analysis on Bare-Metal</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Kirat</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Giovanni</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">V</forename><surname>And</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Kruegel</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">ACSAC &apos;11 Proceedings of the 27th Annual Computer Security Applications Conference</title>
		<imprint>
			<date type="published" when="2011" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b29">
	<analytic>
		<title level="a" type="main">Automatic Extraction of Malware Analysis Evasion Signature</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Kirat</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>And</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Vigna</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">G</forename><surname>Malgene</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">CCS &apos;15 Proceedings of the 22nd ACM SIGSAC Conference on Computer and Communications Security</title>
		<imprint>
			<date type="published" when="2015" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b30">
	<analytic>
		<title level="a" type="main">Baremetal Analysis-based Evasive Malware Detection</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Kirat</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Vigna</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">G</forename><surname>And</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Kruegel</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><surname>Barecloud</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">SEC&apos;14 Proceedings of the 23rd USENIX conference on Security Symposium</title>
		<imprint>
			<date type="published" when="2014" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b31">
	<analytic>
		<title level="a" type="main">The Power of Procrastination: Detection and Mitigation of Execution-Stalling Malicious Code</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Kolbitsch</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><surname>Kirda</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">E</forename><surname>And</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Kruegel</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">CCS &apos;11 Proceedings of the 18th ACM conference on Computer and communications security</title>
		<imprint>
			<date type="published" when="2011" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b32">
	<analytic>
		<title level="a" type="main">Breaking Antivirus Software</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Koret</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Talk at SYSCAN</title>
		<meeting><address><addrLine>Singapore, Singapore</addrLine></address></meeting>
		<imprint>
			<date type="published" when="2014" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b33">
	<monogr>
		<title level="m" type="main">AV: Additional Vulnerabilities</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Koret</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename></persName>
		</author>
		<imprint>
			<date type="published" when="2016" />
			<pubPlace>Bilbao, Spain</pubPlace>
		</imprint>
	</monogr>
	<note>Talk at Hack &amp; Beers Bilbao</note>
</biblStruct>

<biblStruct xml:id="b34">
	<monogr>
		<title level="m" type="main">The Antivirus Hacker&apos;s Handbook</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Koret</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>And</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Bachaalany</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">E</forename></persName>
		</author>
		<imprint>
			<date type="published" when="2015" />
			<publisher>Wiley</publisher>
			<pubPlace>Indianapolis, Indiana</pubPlace>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b35">
	<monogr>
		<title level="m" type="main">Former Anti-virus Researcher Turns Tables On Industry</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Krebs</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">B</forename></persName>
		</author>
		<ptr target="http://voices.washingtonpost" />
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b36">
	<monogr>
		<title level="m" type="main">Three interesting changes in malware activity over the past year</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Kruegel</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename></persName>
		</author>
		<ptr target="http://labs.lastline.com/three-interesting-changes-in-malware-activity-over-the-past-year" />
		<imprint>
			<date type="published" when="2016" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b37">
	<analytic>
		<title level="a" type="main">Behavior-Based Malware Clustering</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Kruegel</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><surname>Kirda</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">E</forename><surname>Comparetti</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><forename type="middle">M</forename><surname>Bayer</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">U</forename><surname>And</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Hlauschek</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><surname>Scalable</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 16th Annual Network and Distributed System Security Symposium</title>
		<meeting>the 16th Annual Network and Distributed System Security Symposium</meeting>
		<imprint>
			<date type="published" when="2009" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b38">
	<analytic>
		<title level="a" type="main">Measuring virtual machine detection in malware using DSD tracer</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Lau</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">B</forename><surname>And</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Svajcer</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">V</forename></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Journal in Computer Virology</title>
		<imprint>
			<biblScope unit="volume">6</biblScope>
			<date type="published" when="2008-08" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b39">
	<analytic>
		<title level="a" type="main">Detecting Environment-Sensitive Malware</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Lindorfer</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Kolbitsch</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><surname>And</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Comparetti</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><forename type="middle">M</forename></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">RAID&apos;11 Proceedings of the 14th international conference on Recent Advances in Intrusion Detection</title>
		<imprint>
			<date type="published" when="2011" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b40">
	<monogr>
				<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Marschalek</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Evilbunny</surname></persName>
		</author>
		<ptr target="http://www.cyphort.com/evilbunny-malware-instrumented-lua" />
		<title level="m">Malware Instrumented By Lua</title>
		<imprint>
			<date type="published" when="2014" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b41">
	<monogr>
		<title level="m" type="main">Bypass Antivirus Dynamic Analysis: Limitations of the AV model and how to exploit them</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Nasi</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">E</forename></persName>
		</author>
		<imprint>
			<date type="published" when="2014" />
		</imprint>
	</monogr>
<note type="report_type">Tech. rep</note>
</biblStruct>

<biblStruct xml:id="b42">
	<analytic>
		<title level="a" type="main">Anti-malware emulation systems and methods</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Novitchi</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">US Patent</title>
		<imprint>
			<biblScope unit="volume">8</biblScope>
			<biblScope unit="page">797</biblScope>
			<date type="published" when="2013" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b43">
	<analytic>
		<title level="a" type="main">PolyPack: An Automated Online Packing Service for Optimal Antivirus Evasion</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Oberheide</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Bailey</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>And</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Jahanian</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">F</forename></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">WOOT&apos;09 Proceedings of the 3rd USENIX conference on Offensive technologies</title>
		<imprint>
			<date type="published" when="2009" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b44">
	<monogr>
		<title level="m" type="main">Sophail: Applied attacks against Sophos Antivirus</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Ormandy</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename></persName>
		</author>
		<imprint>
			<date type="published" when="2012" />
		</imprint>
	</monogr>
<note type="report_type">Tech. rep</note>
</biblStruct>

<biblStruct xml:id="b45">
	<monogr>
		<title level="m" type="main">Analysis and Exploitation of an ESET Vulnerability</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Ormandy</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename></persName>
		</author>
		<ptr target="http://googleprojectzero.blogspot.com/2015/06/analysis-and-exploitation-of-eset.html" />
		<imprint>
			<date type="published" when="2015" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b46">
	<monogr>
				<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Ormandy</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><forename type="middle">Comodo</forename><surname>Antivirus</surname></persName>
		</author>
		<ptr target="https://bugs.chromium.org/p/project-zero/issues/detail?id=753" />
		<title level="m">Emulator Stack Buffer Overflow handling PSUBUSB (Packed Subtract Unsigned with Saturation</title>
		<imprint>
			<date type="published" when="2016" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b47">
	<monogr>
		<title level="m" type="main">Comodo Antivirus Forwards Emulated API calls to the Real API during scans</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Ormandy</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><surname>Comodo</surname></persName>
		</author>
		<ptr target="https://bugs.chromium.org/p/project-zero/issues/detail?id=769" />
		<imprint>
			<date type="published" when="2016" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b48">
	<monogr>
		<title level="m" type="main">Integer Overflow leading to Heap Overflow in Win32 emulation</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Ormandy</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><surname>Comodo</surname></persName>
		</author>
		<ptr target="https://bugs.chromium.org/p/project-zero/issues/detail?id=738" />
		<imprint>
			<date type="published" when="2016" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b49">
	<monogr>
		<title/>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Ormandy</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><surname>Eset Emulation</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Vulnerability</surname></persName>
		</author>
		<ptr target="https://bugs.chromium.org/p/project-zero/issues/detail?id=456" />
		<imprint>
			<date type="published" when="2016" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b50">
	<monogr>
		<title level="m" type="main">ESET NOD32 emulator fails if you modify .idata after imports</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Ormandy</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename></persName>
		</author>
		<ptr target="https://bugs.chromium.org/p/project-zero/issues/detail?id=470" />
		<imprint>
			<date type="published" when="2016" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b51">
	<monogr>
		<title level="m" type="main">ESET NOD32 Heap overflow unpacking EPOC installation files</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Ormandy</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename></persName>
		</author>
		<ptr target="https://bugs.chromium.org/p/project-zero/issues/detail?id=466" />
		<imprint>
			<date type="published" when="2016" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b52">
	<analytic>
		<title level="a" type="main">A fistful of red-pills : How to automatically generate procedures to detect CPU emulators</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Paleari</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Martignoni</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">L</forename><surname>Roglia</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">G</forename><forename type="middle">F</forename><surname>And Br-Uschi</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">WOOT&apos;09 Proceedings of the 3rd USENIX conference on Offensive technologies</title>
		<imprint>
			<date type="published" when="2009" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b53">
	<analytic>
		<title level="a" type="main">nEther : In-guest Detection of Out-of-the-guest Malware Analyzers</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">PÃ©k</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">G</forename><surname>BencsÃ¡th</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">B</forename><surname>And</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">ButtyÃ¡n</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">L</forename></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">EUROSEC &apos;11 Proceedings of the Fourth European Workshop on System Security</title>
		<imprint>
			<date type="published" when="2011" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b54">
	<analytic>
		<title level="a" type="main">A Survey of Security Issues in Hardware Virtualization</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">PÃ©k</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">G</forename><surname>ButtyÃ¡n</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">L</forename><surname>And</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">BencsÃ¡th</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">B</forename></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">ACM Computing Surveys (CSUR)</title>
		<imprint>
			<biblScope unit="volume">45</biblScope>
			<biblScope unit="page">3</biblScope>
			<date type="published" when="2013" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b55">
	<analytic>
		<title level="a" type="main">System and method for preserving and subsequently restoring emulator state</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Pintiysky</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">V</forename><surname>And</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Belov</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">US Patent</title>
		<imprint>
			<biblScope unit="volume">9</biblScope>
			<biblScope unit="page">96</biblScope>
			<date type="published" when="2015" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b56">
	<analytic>
		<title level="a" type="main">System and method of transfer of control between memory locations</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Pintiysky</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">V</forename><surname>Kirsanov</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>And</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Anikin</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">US Patent 9</title>
		<imprint>
			<date type="published" when="2015" />
			<biblScope unit="volume">116</biblScope>
			<biblScope unit="page">621</biblScope>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b57">
	<analytic>
		<title level="a" type="main">Detecting System Emulators</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Raffetseder</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><surname>Kruegel</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><surname>And</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Kirda</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">E</forename></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">ISC&apos;07 Proceedings of the 10th International Conference on Information Security</title>
		<imprint>
			<date type="published" when="2007" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b58">
	<monogr>
		<title level="m" type="main">Detecting an emulator using the windows api</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Rolles</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename></persName>
		</author>
		<ptr target="http://reverseengineering.stackexchange.com/questions/2805/detecting-an-emulator-using-the-windows-api" />
		<imprint>
			<date type="published" when="2013" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b59">
	<monogr>
		<title level="m" type="main">Hacking Renovo</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Rolles</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><forename type="middle">Memory</forename><surname>Lane</surname></persName>
		</author>
		<ptr target="http://www.msreverseengineering.com/blog/2015/7/16/hacking-renovo" />
		<imprint>
			<date type="published" when="2015" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b60">
	<monogr>
		<title level="m" type="main">Tricking Malware with Transparent, Scalable Malware Analysis. Talk at Black Hat</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Royal</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><surname>Entrapment</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2012" />
			<pubPlace>Las Vegas, Nevada</pubPlace>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b61">
	<analytic>
		<title level="a" type="main">Why Antivirus Software Fails</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Sauder</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Talk at DeepSec</title>
		<meeting><address><addrLine>Vienna, Austria</addrLine></address></meeting>
		<imprint>
			<date type="published" when="2014" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b62">
	<monogr>
		<title level="m" type="main">Dynamic Anti-Emulation using Black</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Second</forename><surname>Part</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Hell</surname></persName>
		</author>
		<ptr target="http://vxheaven.org/lib/vsp42.html" />
		<imprint>
			<date type="published" when="2011" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b63">
	<analytic>
		<title level="a" type="main">Cardinal Pill Testing of System Virtual Machines</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Shi</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">H</forename><surname>Alwabel</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>And</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Mirkovic</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">23rd USENIX Security Symposium</title>
		<imprint>
			<date type="published" when="2014" />
		</imprint>
	</monogr>
	<note>USENIX Security 14</note>
</biblStruct>

<biblStruct xml:id="b64">
	<analytic>
		<title level="a" type="main">Break Out of The Truman Show: Active Detection and Escape of Dynamic Binary Instrumentation</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Sun</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">K</forename><surname>Li</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">X</forename><surname>And</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">O</forename><forename type="middle">U</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Y</forename></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Talk at Black Hat Asia</title>
		<meeting><address><addrLine>Singapore, Singapore</addrLine></address></meeting>
		<imprint>
			<date type="published" when="2016" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b65">
	<monogr>
		<title level="m" type="main">One Packer to Rule Them All: Empirical Identification, Comparison and Circumvention of Current Antivirus Detection Techniques, 2014. Talk at Black Hat</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Swinnen</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>And</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Mesbahi</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename></persName>
		</author>
		<imprint>
			<date type="published" when="2014" />
			<pubPlace>Las Vegas, Nevada</pubPlace>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b66">
	<monogr>
		<title level="m" type="main">dirtbox, an x86/Windows Emulator, 2010. Talk at Black Hat</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Wicherski</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">G</forename></persName>
		</author>
		<imprint>
			<date type="published" when="2010" />
			<pubPlace>Las Vegas, Nevada</pubPlace>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b67">
	<monogr>
		<title level="m" type="main">dirtbox, an x86/Windows Emulator, 2010. Talk at REcon</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Wicherski</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">G</forename></persName>
		</author>
		<imprint>
			<date type="published" when="2010" />
			<pubPlace>Montreal, Canada</pubPlace>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b68">
	<monogr>
		<title/>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Wine</forename><surname>Project</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Winehq</surname></persName>
		</author>
		<ptr target="https://www.winehq.org/" />
		<imprint>
			<date type="published" when="2016" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b69">
	<analytic>
		<title level="a" type="main">Vulnerability in Public Malware Sandbox Analysis Systems</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Yoshioka</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">K</forename><surname>Hosobuchi</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Y</forename><surname>Orii</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><surname>And</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Matsumoto</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Tenth Annual International Symposium on Applications and the Internet, SAINT 2010</title>
		<imprint>
			<date type="published" when="2010" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b70">
	<analytic>
		<title level="a" type="main">Your Sandbox is Blinded: Impact of Decoy Injection to Public Malware Analysis Systems</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Yoshioka</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">K</forename><surname>Hosobuchi</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Y</forename><surname>Orii</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><surname>And</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Matsumoto</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Journal of Information Processing</title>
		<imprint>
			<biblScope unit="volume">19</biblScope>
			<date type="published" when="2011" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b71">
	<monogr>
		<title level="m" type="main">US Patent 8,978,142. emulator, but found the same fingerprints in both AVs, and subsequently moved to just testing Emsisoft</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Zaitsev</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">O</forename></persName>
		</author>
		<imprint>
			<date type="published" when="2015-10" />
		</imprint>
	</monogr>
	<note>System and method for detection of malware using behavior model scripts of security rating rules. as its command line scanner is considerably faster than F-Secure&apos;s</note>
</biblStruct>

<biblStruct xml:id="b72">
	<analytic>
		<title level="a" type="main">We used this file due to its nearly universal detection by AV products</title>
	</analytic>
	<monogr>
		<title level="m">A file developed as a standard test case for AVs by the European Institute for Computer Antivirus Research (EICAR)</title>
		<imprint/>
	</monogr>
	<note>vs &quot;EICAR.TEST.NOT-A-VIRUS. etc. 10 e.g., C:\[lstcvix, tudib, izmdmv, ubgncn, jidgdsp, evabgzib, qzqjafyt, cnyporqb, gfydwrkt].exe. 11 The Bitdefender file system included &quot;COMMAND.COM&quot;, &quot;NOTHING.BAT&quot;, &quot;NOTHING.COM&quot;, &quot;FILE001.EXE&quot;, 100 files named &quot;EMPTY[2 digit number 00-99</note>
</biblStruct>

<biblStruct xml:id="b73">
	<analytic>
		<title level="a" type="main">Program Files&quot;) directory. 12 AVG&apos;s file system was particularly sparse, the C:\WINDOWS\system32 directory contained just three files: &quot;victim.exe&quot; (a file system fingerprint for AVG itself)</title>
	</analytic>
	<monogr>
		<title level="m">Kaspersky&apos;s file system erroneously contained an empty &quot;Arquivos de programas&quot; (Spanish for</title>
		<imprint/>
	</monogr>
	<note>ntdll.exe&quot;, &quot;kernel32.dll&quot;, and several directories &quot;Drivers\etc&quot;, &quot;dllcache&quot;, and &quot;wbem&quot;. VBA&apos;s system32 only contained &quot;calc.exe&quot;, &quot;KERNEL32.DLL&quot;, &quot;WSOCK32.DLL&quot;, and a &quot;Drivers\etc&quot; directory which in turn contained a &quot;hosts&quot; file</note>
</biblStruct>

<biblStruct xml:id="b74">
	<analytic>
		<title level="a" type="main">Bitdefender similarly featured directories for Anti Virus, Bitdefender (and versions 8, 9</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Mcafee</forename><surname>Kav6</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Network</forename><surname>Messenger</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Associates</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Kaspersky&apos;s file system, the largest and most comprehensive of the file systems we examined, contained directories and fake executables for twenty AV products in the C:\Program Files directory (Agnitum</title>
		<meeting><address><addrLine>Norton AntiVirus, Norton Internet Security, QIP, Rising, Sygate, Symantec, Symantec AntiVirus, Tencent, Trillian</addrLine></address></meeting>
		<imprint/>
		<respStmt>
			<orgName>Grisoft, Inoculate, Kaspersky Lab, McAfee, Network Associates, Norton Antivirus, Panda Software, Softwin, Symantec, TBAV, Trend Micro, and Zone Labs</orgName>
		</respStmt>
	</monogr>
	<note>Complus Applications, F-PROT95</note>
</biblStruct>

<biblStruct xml:id="b75">
	<monogr>
		<title level="m" type="main">Kaspersky had directories for CuteFTP, eDonkey2000, and Kazaa. Bitdefender also had a Kazaa directory</title>
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b76">
	<analytic>
		<title level="a" type="main">VBA&apos;s file system contained &quot;C:\Program Files\Far \Far.exe&quot;, the name of Far Manager&apos;s executable (a file manager popular in Eastern European countries, such as Belarus where VBA is based). Kaspersky (based in Russia) had references to Far Manager in its emulated registry. 17 This roughly translates from Romanian (Bitdefender is based in Romania) to</title>
	</analytic>
	<monogr>
		<title level="m">Kaspersky&apos;s registry contained keys related to World of Warcraft. Bitdefender included files for Windows default install games such as Pinball. 16</title>
		<imprint/>
	</monogr>
	<note>this is a ghost file which will tell you [that] it doesn&apos;t exist.bat&quot;. The C:\WINDOWS directory where we found the file also contained &quot;A_E_O_FANTOMA_DE_ FISIER_CARE_VA_SA_ZICA_NU_EXISTA.EXE&quot;, &quot;Z_E_O_FANTOMA_ DE_FISIER_CARE_VA_SA_ZICA_NU_EXISTA.BAT&apos;, and &quot;Z_E_O_ FANTOMA_DE_FISIER_CARE_VA_SA_ZICA_NU_EXISTA.EXE</note>
</biblStruct>

<biblStruct xml:id="b77">
	<analytic>
		<title level="a" type="main">TZ&quot;, the computer name for Bitdefender, returned &quot;screed of the Batman</title>
	</analytic>
	<monogr>
		<title level="m">Files with this name appeared in many places throughout the Bitdefender file system, including in directories for various AV products in C:\PROGRAM FILES</title>
		<editor>\PROGRAM FILES\NORTON ANTIVIRUS\TZEAPA_A_LA_BATMAN.EXE</editor>
		<imprint/>
	</monogr>
	<note>Google Translate was not able to produce a clear translation, but removing</note>
</biblStruct>

<biblStruct xml:id="b78">
	<analytic>
		<title level="a" type="main">21 explorer.exe, iexplore.exe, winlogon.exe, lsass.exe, smss.exe, msnmsgr.exe all had PID 12. 22 In evaluation we reimplemented a number of fingerprinting tests demonstrated by prior researchers, and found that many actually caused emulators to prematurely abort analysis, rather than being actual fingerprints. To researchers simply looking to see if malware was or was not detected during emulation, this behavior could make it appear that they had discovered a fingerprint. 23 The tick count was evidently stored in an unsigned 32-bit integer, as it would overflow over the course of multiple timing tests. We observed it roll over from 3, 305, 476, 124 to 510</title>
		<ptr target="http://kpp.nfe.go.th/26MD5:7a1a62b7fd6a631ebe7bcbbf704b754a27MD5" />
	</analytic>
	<monogr>
		<title level="m">The file names featured keys that are close together on a QWERTY keyboard, such as &quot;koio.mpg&quot; (k, i, and o are all all directly adjacent), &quot;muuo.mp3&quot; (three characters on the right hand side of the keyboard), &quot;wcwe.jpg&quot; (three characters on the left hand side of the keyboard)</title>
		<imprint>
			<date type="published" when="10000" />
			<biblScope unit="volume">20</biblScope>
			<biblScope unit="page" from="6698" to="547" />
		</imprint>
	</monogr>
	<note>indicating that it was incremented by 1, 500, 000, 043 â 150, 000 Ã 10, 000. 24 Readers are encouraged to try searching for the unique strings mentioned in this paper to verify these findings. 25</note>
</biblStruct>

				</listBibl>
			</div>
		</back>
	</text>
</TEI>
