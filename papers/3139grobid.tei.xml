<?xml version="1.0" encoding="UTF-8"?>
<TEI xmlns="http://www.tei-c.org/ns/1.0" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
xsi:schemaLocation="http://www.tei-c.org/ns/1.0 /Users/atharsefid/Desktop/grobid-0.5.3/grobid-home/schemas/xsd/Grobid.xsd"
 xmlns:xlink="http://www.w3.org/1999/xlink">
	<teiHeader xml:lang="en">
		<encodingDesc>
			<appInfo>
				<application version="0.5.3" ident="GROBID" when="2020-09-29T03:02+0000">
					<ref target="https://github.com/kermitt2/grobid">GROBID - A machine learning software for extracting information from scholarly documents</ref>
				</application>
			</appInfo>
		</encodingDesc>
		<fileDesc>
			<titleStmt>
				<title level="a" type="main">FlexFS: A Flexible Flash File System for MLC NAND Flash Memory</title>
			</titleStmt>
			<publicationStmt>
				<publisher/>
				<availability status="unknown"><licence/></availability>
			</publicationStmt>
			<sourceDesc>
				<biblStruct>
					<analytic>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Sungjin</forename><surname>Lee</surname></persName>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Keonsoo</forename><surname>Ha</surname></persName>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Kangwon</forename><surname>Zhang</surname></persName>
							<email>kwzhang@davinci.snu.ac.kr*</email>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Jihong</forename><surname>Kim</surname></persName>
							<email>jihong@davinci.snu.ac.kr*</email>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Junghwan</forename><surname>Kim</surname></persName>
							<email>junghwani.kim@samsung.com</email>
						</author>
						<author>
							<affiliation key="aff0">
								<orgName type="institution">Seoul National University</orgName>
								<address>
									<country key="KR">Korea</country>
								</address>
							</affiliation>
						</author>
						<author>
							<affiliation key="aff1">
								<orgName type="institution">Samsung Electronics</orgName>
								<address>
									<country key="KR">Korea</country>
								</address>
							</affiliation>
						</author>
						<title level="a" type="main">FlexFS: A Flexible Flash File System for MLC NAND Flash Memory</title>
					</analytic>
					<monogr>
						<imprint>
							<date/>
						</imprint>
					</monogr>
				</biblStruct>
			</sourceDesc>
		</fileDesc>
		<profileDesc>
			<abstract>
				<p>The multi-level cell (MLC) NAND flash memory technology enables multiple bits of information to be stored on a single cell, thus making it possible to increase the density of the memory without increasing the die size. For most MLC flash memories, each cell can be programmed as a single-level cell or a multi-level cell during runtime. Therefore, it has a potential to achieve both the high performance of SLC flash memory and the high capacity of MLC flash memory. In this paper, we present a flexible flash file system, called FlexFS, which takes advantage of the dynamic re-configuration facility of MLC flash memory. FlexFS divides the flash memory medium into SLC and MLC regions , and dynamically changes the size of each region to meet the changing requirements of applications. We exploit patterns of storage usage to minimize the overhead of reorganizing two different regions. We also propose a novel wear management scheme which mitigates the effect of the extra writes required by FlexFS on the lifetime of flash memory. Our implementation of FlexFS in the Linux 2.6 kernel shows that it can achieve a performance comparable to SLC flash memory while keeping the capacity of MLC flash memory for both simulated and real mobile workloads.</p>
			</abstract>
		</profileDesc>
	</teiHeader>
	<text xml:lang="en">
		<body>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="1">Introduction</head><p>As flash memory technologies quickly improve, NAND flash memory is becoming an attractive storage solution for various IT applications from mobile consumer electronics to high-end server systems. This rapid growth is largely driven by the desirable characteristics of NAND flash memory, which include high performance and lowpower consumption.</p><p>There are two types of NAND flash memory in the market: a single-level cell (SLC) and a multi-level cell (MLC) flash memory. They are distinctive in terms of capacity, performance, and endurance. The capacity of MLC flash memory is larger than that of SLC flash memory. By storing two (or more) bits on a single memory cell, MLC flash memory achieves significant density increases while lowering the cost per bit over SLC flash memory which can only store a single bit on a cell. However, SLC flash memory has a higher performance and a longer cell endurance over MLC flash memory. Especially, the write performance of SLC flash memory is much higher than that of MLC flash memory.</p><p>As the demand for the high capacity storage system is rapidly increasing, MLC flash memory is being widely adopted in many mobile embedded devices, such as smart phones, digital cameras, and PDAs. However, because of a poor performance characteristic of MLC flash memory, it is becoming harder to satisfy users' requirements for the high performance storage system while providing increased storage capacity.</p><p>To overcome this poor performance, in this paper, we propose exploiting the flexible programming feature of MLC flash memory <ref type="bibr" target="#b0">[1]</ref>. Flexible programming is a writing method which enables each cell to be programmed as a single-level cell (SLC programming) or a multi-level cell (MLC programming). If SLC programming is used to write data into a particular cell, the effective properties of that cell become similar to those of an SLC flash memory cell. Conversely, MLC programming allows us to make use of the high capacity associated with MLC flash memory.</p><p>The most attractive aspect of flexible programming is that it allows fine-grained storage optimizations, in terms of both performance and capacity, to meet the requirements of applications. For instance, if the current capacity of flash memory is insufficient for some application, MLC flash memory can change its organization and increase the number of multi-level cells to meet the space requirement. However, to exploit flexible cell programming effectively, several issues need to be considered.</p><p>First, heterogeneous memory cells should be managed in a way that is transparent to the application layer, because flexible programming allows two different types of a cell to exist in the same flash chip simultaneously. Second, dynamic cell reconfigurations between the SLC and MLC must be handled properly. For example, if too many flash cells are used as single-level cells, the capacity of flash memory might be critically impaired, even though the overall I/O performance is improved. Therefore, it is important to determine the number of SLC cells and MLC cells so that both the performance and capacity would be optimally supported.</p><p>Third, the cost of dynamic cell reconfigurations should be kept as low as possible. Changing the type of a cell requires expensive erase operations. Since an erase operation resets cells to their initial bit value (e.g., 1), the data stored in the cells must first be moved to elsewhere. The performance overhead of this data migration impairs the overall I/O performance.</p><p>Finally, write and erase operations required to change the type of a cell reduce the endurance of each cell, resulting in the decrease of the lifetime of flash memory. This problem also needs to be addressed properly.</p><p>In this paper, we propose a flexible flash file system, called FlexFS, for MLC flash memory that addresses the above requirements effectively. FlexFS provides applications with a homogeneous view of storage, while internally managing two heterogeneous memory regions, an SLC region and an MLC region. FlexFS guarantees the maximum capacity of MLC flash memory to users while it tries to write as much data as possible to the SLC region so as to achieve the highest I/O performance. FlexFS uses a data migration policy to compensate for the reduced capacity caused by overuse of the SLC region. In order to prolong the lifespan of flash memory, a new wear management scheme is also proposed.</p><p>In order to evaluate the effectiveness of FlexFS, we implemented FlexFS in the Linux 2.6.15 kernel on a development board. Evaluations were performed using synthetic and real workloads. Experimental results show that FlexFS achieves 90% of the read and 96% of the write performance of SLC flash memory, respectively, while offering the capacity of MLC flash memory.</p><p>The rest of this paper is organized as follows. In Section 2, we present a brief review of NAND flash memory and explain MLC flash memory in detail. In Section 3, we give an overview of FlexFS and introduce the problems that occur with a naive approach to exploiting flexible cell programming. In Section 4, we describe SLC and MLC management techniques. In Section 5, we present experimental results. Section 6 describes related work on heterogeneous storage systems. Finally, in Section 7, we conclude with a summary and future work.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2">Background</head></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.1">NAND Flash Memory</head><p>NAND flash memory consists of multiple blocks, each of which is composed of several pages. In many NAND flash memories, the size of a page is between 512 B and 4 KB, and one block consists of between 4 and 128 pages. NAND flash memory does not support an overwrite operation because of its write-once nature. Therefore, before writing new data into a block, the previous data must be erased. Furthermore, the total number of erasures allowed for each block is typically limited to between 10,000 and 100,000 cycles. Like SRAM and DRAM, flash memory stores bits in a memory cell, which consists of a transistor with a floating gate that can store electrons. The number of electrons stored on the floating gate determines the threshold voltage, V t , and this threshold voltage represents the state of the cell. In case of a single-level cell (SLC) flash memory, each cell has two states, and therefore only a single bit can be stored in that cell. <ref type="figure">Figure 1(a)</ref> shows how the value of a bit is determined by the threshold voltage. If the threshold voltage is greater than a reference voltage, it is interpreted as a logical '1'; otherwise, it is regarded as a logical '0'. In general, the write operation moves the state of a cell from '1' to '0', while the erase operation changes '0' to '1'.</p><p>If flash memory is composed of memory cells which have more than two states, it is called a multi-level cell (MLC) flash memory, and two or more bits of information can be stored on each cell, as shown in <ref type="figure">Figure 1(b)</ref>. Even though the density of MLC flash memory is higher than that of SLC flash memory, it requires more precise charge placement and charge sensing (because of narrower voltage ranges for each cell state), which in turn reduces the performance and endurance of MLC flash memory in comparison to SLC flash memory.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.2">MLC NAND Flash Memory Array</head><p>In MLC flash memory, it is possible to use SLC programming, allowing a multi-level cell to be used as a single-level cell. To understand the implications of SLC  programming, it is necessary to know the overall architecture of a flash memory array. <ref type="figure" target="#fig_0">Figure 2</ref> illustrates the array of flash memory cells which forms a flash memory block. We assume that each cell is capable of holding two bits. For a description purpose, this figure does not show all the elements, such as source and drain select gates, which are required in a memory array. (For a more detailed description, see references <ref type="bibr" target="#b1">[2,</ref><ref type="bibr" target="#b2">3]</ref>.) As shown in <ref type="figure" target="#fig_0">Figure 2</ref>, the memory cells are arranged in an array of rows and columns. The cells in each row are connected to a word line (e.g., W L(0)), while the cells in each column are coupled to a bit line (e.g., BL(0)). These word and bit lines are used for read and write operations. During a write operation, the data to be written ('1' or '0') is provided at the bit line while the word line is asserted. During a read operation, the word line is again asserted, and the threshold voltage of each cell can then be acquired from the bit line. <ref type="figure" target="#fig_0">Figure 2</ref> also shows the conceptual structure of a flash block corresponding to a flash memory array. The size of a page is determined by the number of bit lines in the memory array, while the number of pages in each flash block is twice the number of word lines, because two different pages share the memory cells that belong to the same word line. These two pages are respectively called the least significant bit (LSB) page and the most significant bit (MSB) page. As these names imply, each page only uses its own bit position of a bit pattern stored in a cell. (This is possible because each memory cell stores two bits, for example, one bit for the LSB page and the other for the MSB page.) Thus, if a block has 128 pages, there are 64 LSB and 64 MSB pages.</p><p>Because multiple pages are mapped to the same word line, read and write operations must distinguish the destination page of each operation. For example, if a cell is in an erased state (i.e., a logical '11') and a logical '0' is programmed to the MSB position of the cell, the cell will then have a bit pattern of '01', which is interpreted as a logical '0' for the MSB page. If the LSB position is then programmed as '0', the bit pattern will change to '00'.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.3">SLC Programming in MLC</head><p>Since MLC flash memory stores multiple pages in the same word line, it is possible for it to act as SLC flash memory by using only the LSB pages (or MSB pages, depending on the manufacturer's specification). Thus, SLC programming is achieved by only writing data to the LSB pages in a block. In this case, since only two states of a cell, '11' and '10', are used shown in <ref type="figure">Figure 1</ref>(b), the characteristics of a multi-level cell become very similar to those of a single-level cell. The logical offsets of the LSB and MSB pages in a block are determined by the flash memory specification, and therefore SLC programming can be managed at the file system level. Naturally, SLC programming reduces the capacity of a block by half, because only the LSB pages can be used. <ref type="table" target="#tab_2">Table 1</ref> compares the performance of the three different types of cell programming method. The SLC column shows the performance data in a pure SLC flash memory; the M LC LSB column gives the performance data when only the LSB pages are used; and the M LC BOTH column gives the data when both the LSB and MSB pages are used. The access times for page reads and writes, and for block erase operations were measured using the Samsung's KFXXGH6X4M flash memory <ref type="bibr" target="#b3">[4]</ref> at the device driver interface level. As shown in <ref type="table" target="#tab_2">Table 1</ref>, there are no significant performance differences between page read and block erase operations for the three programming methods. However, the write performance is significantly improved with M LC LSB , and approaches to that of SLC.</p><p>This improvement in the write performance under M LC LSB is the main motivation for FlexFS. Our primary goal is to improve the write performance of MLC flash memory using the M LC LSB method, while maintaining the capacity of MLC flash memory using the M LC BOTH method.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3">Overview of the FlexFS File System</head><p>We will now describe the overall architecture of the proposed FlexFS system. FlexFS is based on JFFS2 file sys- <ref type="figure">Figure 3</ref>: The layout of flash blocks in FlexFS tem <ref type="bibr" target="#b4">[5]</ref>, and hence the overall architecture is very similar to JFFS2 except for some features required to manage heterogeneous cells and to exploit flexible programming. Therefore, in this section, we focus on how FlexFS deals with different types of a cell. We also introduce a baseline approach to exploit flexible cell programming in order to illustrate the need for better policies, which will be introduced in detail on the following section.</p><formula xml:id="formula_0">               d e f g h               d e f g i j k l m n o m p q q r s o t j k l m n o m p q q r s o t j k u v n w x y z { | } ~  i j k u v n w x y {  z } ~   s  p v r   p  p p v r   p  p  m   u v n w x y  s x s n  s  t j k u v n w x y z { | } ~  i j k u v n w x y {  z } ~   m r   m          j n o u v n w x     j n o o r s o</formula></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.1">Design Overview</head><p>In order to manage heterogeneous cells efficiently, FlexFS logically divides the flash memory medium into an SLC region, composed of SLC blocks, and an MLC region consisting of MLC blocks. If a block does not contain any data, it is called a free block. In FlexFS, a free block is neither an SLC block nor an MLC block; its type is only determined when data is written into it. <ref type="figure">Figure 3</ref> shows the layout of flash memory blocks in FlexFS. We assume that the number of pages in a block is 128, and the page size is 4 KB. (These values will be used throughout the rest of this paper.) When a write request arrives, FlexFS determines the type of region to which the data is to be written, and then stores the data temporarily in an appropriate write buffer. This temporary buffering is necessary because the unit of I/O operations is a single page in flash memory. Therefore, the write buffer stores the incoming data until there is at least the page size of data (i.e., 4 KB), which can be transferred to flash memory. In order to ensure the data reliability, if there is an explicit flush command from the operating system, all the pending data is immediately written to flash memory. In FlexFS, separate write buffers are used for the SLC and MLC regions.</p><p>FlexFS manages flash memory in a similar fashion to other log-structured file systems <ref type="bibr" target="#b4">[5,</ref><ref type="bibr" target="#b5">6,</ref><ref type="bibr" target="#b6">7]</ref>, except that two log blocks (one for the SLC and another for the MLC region) are reserved for writing. When data is evicted from the write buffer to flash memory, FlexFS writes them sequentially from the first page to the last page of the corresponding region's log block. MLC programming is used to write data to the MLC block, and SLC programming</p><formula xml:id="formula_1">                       ¡ ¢ £ ¤ ¥ ¦ § ¨ ©      ¡ ¢ £ ¤ ¥ ¦ § ¨ © ª « ¬       ­ ® ¯ ° ±       ¡ ¢ £ ¤ ¥ ¦ § ¨ ©      ¡ ¢ £ ¤ ¥ ¦ § ¨ © ª « ¬       ­ ® ¯ ° ±                                      ¬  ² ³ ´ µ  ¶ · ² µ ¸  ¹ º  µ ¹       ¹ » ¼ ½ ¾ ¿ À Á À ¼ Â Ã Á ¼ Á Ä » Å ½ AE Ç È É À ¿ Ê Ë ¼ Â À Ì È ¼ Ê Ä Ã Í Ä Î ¼ Ã À ¿ Ê Ï Ð AE Å Â Ç Ñ Ò Ã » Ñ ½ Ó À ¿ ¼ Â Ã Á ¼ Á Ä Ô µ  ¶ · · µ Õ µ Ö  · µ Õ µ</formula><p>Figure 4: Steps in data migration is used to write to the SLC block. If existing data is updated, the old version of the data is first invalidated, while the new data is appended to the free space of a log block. The space used by this invalid data is later reclaimed by the garbage collector (Section 4.3).</p><p>After all the free pages in the current log block have been exhausted, a new log block is allocated from the free blocks. However, if there is not enough free space to store the data, the data migrator triggers a data migration (Section 4.1.1) to create more free space. This expands the effective capacity of flash memory by moving the data from the SLC region to the MLC region. <ref type="figure">Figure 4</ref> illustrates the steps in data migration. In this example, there are initially two SLC blocks and one free block, as shown in <ref type="figure">Figure 4</ref>(a). We assume that all the pages in the two SLC blocks contain valid data. During the data migration, the free block is converted into an MLC block, and the 128 pages in the two SLC blocks are copied to this MLC block. Then the two SLC blocks are erased, making them free blocks. This migration frees up one block, doubling the remaining capacity of flash memory, as shown in <ref type="figure">Figure 4</ref>(c).</p><p>When a read request arrives, FlexFS first checks whether the write buffers contain the requested data. If so, the data in the write buffer is transferred to the page cache. Otherwise, FlexFS searches an inode cache, which is kept in main memory, to find a physical address for the requested file data. The inode cache maintains the inode numbers and physical locations of data that belong to each inode. If the physical address of the required data is found, regardless of the type of block in which the data is stored, FlexFS can read the data from that address.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.2">Baseline Approach and Its Problems</head><p>The major objective of FlexFS is to support both high performance and high capacity in MLC flash memory. A simplistic solution, which we call the baseline approach, is first to write as much data as possible into SLC blocks to maximize the I/O performance. When there are no more SLC blocks available, the baseline approach initiates a data migration so that more space becomes available for subsequent write requests, so as to maximize the capacity of flash memory. This simple approach has two serious drawbacks.</p><p>First, if the amount of data stored on flash memory approaches to half of its maximum capacity, almost all the free blocks are exhausted. This is because the capacity of the SLC block is half that of the MLC block. At this point, a data migration has to be triggered to free some blocks before writing the requested data. But, this reduces the overall I/O performance significantly. To address this problem, we introduce techniques to reduce the migration penalty, or to hide it from users.</p><p>Second, the baseline approach degrades the lifetime of MLC flash memory seriously. Each block of NAND flash memory has a finite number of erase cycles before it becomes unusable. The baseline approach tends to increase the number of erase operations because of the excessive data migration. In the worst case, the number of erasures could be three times more than in conventional flash file systems. We solve this problem by controlling the degree of the migration overhead, with the aim of meeting a given lifetime requirement.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4">Design and Implementation of FlexFS</head></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.1">Reducing the Migration Overhead</head><p>To reduce or hide the overhead associated with data migrations, we introduce three techniques: background migration, dynamic allocation, and locality-aware data management. The background migration technique exploits the times when the system is idle to hide the data migration overhead. This technique is effective for many mobile embedded systems (e.g., mobile phones) which have long idle time. The dynamic allocation technique, on the other hand, is aimed at systems with less idle time. By redirecting part of the incoming data into the MLC region depending on the idleness of the system, it reduces the amount of data that is written into the SLC region, which in turn reduces the data migration overheads. The third technique, locality-aware data management, exploits the locality of I/O accesses to improve the efficiency of data migration. We will now look at these three techniques in more detail. <ref type="figure">Figure 5</ref> shows the overall process of the background migration. In this figure, the X-axis shows the time and the Y-axis gives the type of job being performed by the file system. A foreground job represents I/O requests issued by applications or the operating system. T busy is a time interval during which the file system is too busy to process foreground jobs, and T idle is an idle interval.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.1.1">Background Migration Technique</head><formula xml:id="formula_2">T wait T delay T busy T idle × Ø Ù Ú Û Ü Ý Û Þ ß à á â Û ã ä á ß å ae â á ç Ú è ß á å ä é ê ë è ç Û ì t1 t2 í å Ú Û ç Ú å Ý ä î × Ø Ù ï å ð ñ è ò ó ç Ú å Ý ä î â á ç Ú è ß å Ú é ô õ ö ÷ ø õ ö ì T trig T trig</formula><p>Figure 5: Overview of the background migration During this idle time the background migrator can move data from the SLC region to the MLC region, thus freeing many blocks. These free blocks can then be used as SLC blocks to store data, and so we can avoid a compulsory data migration if there is sufficient idle time.</p><p>In designing the background migration technique, there are two important issues: First, it is important to minimize the delay in response time T delay inflicted on foreground tasks by the background migration. For example, in <ref type="figure">Figure 5</ref>, an I/O request arrives at t 1 , but it cannot proceed until t 2 because of interference from the background migration. So T delay is t 2 -t 1 . To reduce this delay, the data migrator monitors the I/O subsystem, and suspends the background migration process if there is an I/O request. Since the unit of a data migration is a single page, the maximum delay in response time will be less than the time required to move a page from SLC to MLC (about 1,403 us) theoretically. In addition, we also design the background migrator so that it does not utilize all available idle times. Instead, it periodically invokes a data migration at a predefined triggering interval T trig . If T trig is larger than the time required to move a single page, FlexFS reduces the probability that a foreground job will be issued while a data migration is running, thus further reducing T delay .</p><p>The second issue is when to initiate a background migration. Our approach is based on a threshold; if the duration of the idle period is longer than a specific threshold value T wait , then the background migrator is triggered. This kind of problem has been extensively studied in dynamic power management (DPM) of hard disk drives <ref type="bibr" target="#b7">[8]</ref>, which puts a disk into a low-power state after a certain idle time in order to save energy. However, the transition to a low-power state has to be made carefully because it introduces a large performance penalty. Fortunately, because T delay is quite short, more aggressive transitioning is possible in our background migration technique, allowing T wait to be set to a small value.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.1.2">Dynamic Allocation Technique</head><p>The background migration technique works well when a system has sufficient idle time. Otherwise, the migration <ref type="figure">Figure 6</ref>: Our approach to idle time prediction overhead cannot be avoided. But it can be ameliorated by writing part of the incoming data into the MLC region, so as to reduce the amount of data to be moved by the background migrator. Although this approach results in a lower I/O performance than SLC flash memory, it can prevent significant performance degradation due to a compulsory data migration. The dynamic allocator determines the amount of data that will be written into the SLC region. Intuitively, it is clear that this must depend on how much idle time there is in a given system. Since the amount of idle time changes dynamically with user activities, we need to predict it carefully. <ref type="figure">Figure 6</ref> illustrates the basic idea of our idle time prediction approach, which is based on previous work <ref type="bibr" target="#b8">[9]</ref>. In this figure, each time window represents the period during which N p pages are written into flash memory. The dynamic allocator stores measured idle times for several previous time windows, and uses them to predict the idle time, T pred idle , for the next time window. The value of T pred idle is a weighted average of the idle times for the latest 10 time windows; the three most recent windows are given a higher weight to take the recency of I/O pattern into account.</p><formula xml:id="formula_3">ù ú û ü û ý þ þ ÿ û ¡ ÿ ü ¢ £ ¡ ¤ ¥ ¦ û ¢ ÿ § þ û ¢ ÿ ¢ ¨ û þ ÿ û © ¥ û ¦ ÿ £ ¢ ¢ ¨ û ¥ û ¦ ÿ £ ¢ ù ú û ¥ ¦ û ÿ £ þ ÿ û ¡ ÿ ü ¢ £ ¡ ¤ û ¦ û ¢ ÿ ¢ ¨ û þ ÿ û © ¦ ¦ û ü þ þ ÿ û T idle pred T idle measure</formula><p>If we know the value of T pred idle , we can use it to calculate an allocation ratio, denoted by α, which determines how many pages will be written to the SLC region in the next time window. The value of α can be expressed as follows:</p><formula xml:id="formula_4">α = 8 &lt; : 1 if T pred idle ≥ Tmig T pred idle Tmig if T pred idle &lt; Tmig,<label>(1)</label></formula><p>where</p><formula xml:id="formula_5">Tmig = Np · (Ttrig + T SLC erase /S SLC p ),<label>(2)</label></formula><p>where T SLC erase is the time required to erase an SLC flash block which contains S SLC p pages. As mentioned in Section 4.1.1, T trig is the time interval required for one page to migrate from the SLC region to the MLC region. Therefore, T mig is the migration time, which includes the time taken to move all N p pages to the MLC region and the time for erasing all used SLC blocks. If T pred idle ≥ T mig , there is sufficient idle time for data migrations, and thus α = 1. Otherwise, the value of α should be reduced so that less data is written into the SLC region, as expressed by Eq. (1).</p><p>Once the value of α has been determined, the dynamic allocator tries to distribute the incoming data across the </p><formula xml:id="formula_6">P0 ! " # $ % P1 &amp; " ' % P2 ! " # $ % P3 ! " # $ % P3 ! " # $ % P4 ! " # $ % P1 &amp; " ' % P5 ! " # $ % P6 ! " # $ % P4 ! " # $ % P1 &amp; " ' % P5 ! " # $ % P6 ! " # $ % ( % ' &amp; ) # " ! ( # 0 ' 1 2 3 4 ( 5 ( 6 ) ( 7 7 6 " ( ! &amp; 8 % ' &amp; ) # " ! ( # 0 ' 1 2 ( 5 ( 6 ) ( 7 7 6 " ( ! &amp; t1 t2 9 0 @ ) 9 &amp; ) A ' ( ' ) " B ' &amp; ) C D E 6 ) F 0 " 4 ( ' t1 9 &amp; ) A ' ( ' ) " B ' &amp; ) C D E 6 ) F 0 " 4 ( ' t2 P1 &amp; " ' % G H I P Q R S P T U S</formula><formula xml:id="formula_7">N SLC p = Np · α, N M LC p = Np · (1 − α).<label>(3)</label></formula><p>Finally, after writing all N p pages, the dynamic allocator calculates a new value of α for the next N p pages.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.1.3">Locality-aware Data Management Technique</head><p>FlexFS is based on a log-structured file system, and therefore it uses the out-place update policy. Under this policy, hot data with a high update frequency generates more outdated versions of itself than cold data, which is updated infrequently. Our locality-aware data management technique exploits this characteristic to increase the efficiency of data migration. <ref type="figure" target="#fig_1">Figure 7</ref> compares the locality-aware and the localityunaware approaches. We assume that, at time t 1 , three cold pages p 0 , p 2 , and p 3 , and one hot page p 1 , exist in the SLC region. Between t 1 and t 2 , there are some idle periods, and new pages p 1 , p 4 , p 5 , and p 6 are written into the SLC region. Note that p 1 is rewritten because it contains hot data. In the case of the locality-unaware approach shown in <ref type="figure" target="#fig_1">Figure 7</ref>(a), we assume that pages p 0 , p 1 , and p 2 are moved to the MLC region during idle time, but p 3 cannot be moved because there is not enough idle time. Therefore, at time t 2 , there are five pages in the SLC region. If the value of N p is 4, the value of α should decrease so that data will not accumulate in the SLC region. However, if we consider the locality of the data, we can move p 3 instead of p 1 during idle periods, as shown in <ref type="figure" target="#fig_1">Figure 7</ref>(b). Since p 1 has a high locality, it is highly likely to be invalidated by t 2 . Therefore, an unnecessary page migration for p 1 can be avoided, and only four pages remain in the SLC region. In this case, we need not to reduce the value of α, and more data will be written into the SLC region.</p><p>Using this observation, Eq. (2) can be rewritten as follows:</p><formula xml:id="formula_8">Tmig = (Np − N hot p ) · (Ttrig + T SLC erase /S SLC p ),<label>(4)</label></formula><p>where N hot p is the number of page writes for hot pages stored in the SLC region. For instance, in the above example, N hot p is 1. Because we only need to move N p -N hot p pages into the MLC region, the value of T mig can be reduced, allowing an increase in α for the same amount of idle time.</p><p>To exploit the locality of I/O references, there are two questions to answer. The first is to determine the locality of a given data. To know the hotness of data, FlexFS uses a 2Q-based locality detection technique <ref type="bibr" target="#b9">[10]</ref>, which is widely used in the Linux operating system. This technique maintains a hot and a cold queue, each containing a number of nodes. Each node contains the inode number of a file. Nodes corresponding to frequently accessed files are stored on the hot queue, and the cold queue contains nodes for infrequently accessed files. The locality of a given file can easily be determined from queue in which the corresponding node is located.</p><p>Second, the data migrator and the dynamic allocator should be modified so that they take the locality of data into account. The data migrator tries to select an SLC block containing cold data as a victim, and an SLC block containing hot data is not selected as a victim unless very few free blocks remain. Since a single block can contain multiple files which have different hotness, FlexFS calculates the average hotness of each block as the criterion, and chooses a block whose hotness is lower than the middle. It seems better to choose a block containing only cold pages as a victim block; if there are only a few bytes of hot data in a victim, this results in useless data migrations for hot data. However, this approach incurs the delay in reclaiming free blocks, because even if the small amount of hot data is stored on a block, the block will not be chosen as a victim.</p><p>The dynamic allocator tries to write as much hot data to the SLC region as possible in order to increase the value of N hot p . The dynamic allocator also calculates a new value of α after N p pages have been written and, for this purpose, the value of N hot p for the next time window need to be known. Similar to the approach used in our idle time prediction, we count how many hot pages were written into the SLC region during the previous 10 time windows, and use their average hotness value as N hot p for the next time window. The value of N hot p for each window can be easily measured using an update variable, which is incremented whenever a hot page is sent to the SLC region.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.2">Improving the Endurance</head><p>To enhance the endurance of flash memory, many flash file systems adopt a special software technique called wear-leveling. In most existing wear-leveling techniques, the primary aim is to distribute erase cycles evenly across the flash medium <ref type="bibr" target="#b10">[11,</ref><ref type="bibr" target="#b11">12]</ref>. FlexFS uses this approach, but also needs to support more specialized wear management to cope with frequent data migrations.</p><p>The use of FlexFS means that each block undergoes more erase cycles because a lot of data is temporarily written to the SLC region, waiting to move to the MLC region during idle time. To improve the endurance and prolong the lifetime, it would be better to write data to the MLC region directly, but this reduces the overall performance. Therefore, there is another important trade-off between the lifetime and performance.</p><p>To efficiently deal with this trade-off, we propose a novel wear management technique which controls the amount of data to be written into the SLC region depending on a given storage lifetime.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.2.1">Explicit Endurance Metric</head><p>We start by introducing a new endurance metric which is designed to express the trade-off between lifetime and performance. In general, the maximum lifetime, L max , of flash memory depends on the capacity and the amount of data written to them, and is expressed as follows:</p><formula xml:id="formula_9">Lmax = C total · E cycles W R ,<label>(5)</label></formula><p>where C total is the size of flash memory, and E cycles is the number of erase cycles allowed for each block. The writing rate W R indicates the amount of data written in unit time (e.g., per day). This formulation of L max is used by many flash memory manufacturers <ref type="bibr" target="#b12">[13]</ref> because it clearly shows the lifetime of a given flash application under various environments. Unfortunately, L max is not appropriate to handle the trade-off between lifetime and performance because it expresses the expected lifetime, and not the constraints to be met in order to improve the endurance of flash memory. Instead, we use an explicit minimum lifespan, L min , which represents the minimum guaranteed lifetime that would be ensured by a file system. Since FlexFS can control the writing rate W R by adjusting the amount of data written into the SLC region, this new endurance metric can be expressed as follows:</p><p>Control W R by changing a wear index, δ Subject to</p><formula xml:id="formula_10">Lmin ≈ C total · E cycles W R ,<label>(6)</label></formula><p>where δ is called the wear index. In FlexFS δ is proportional to W R, and therefore δ can be used to control the value of W R. If δ is high, FlexFS writes a lot of data to the SLC region; and this increases W R due to data migrations; but if δ is low, the writing rate is reduced. Our wear management algorithm controls δ so that the lifetime specified by L min is to be satisfied.  <ref type="figure">Figure 8</ref>: How the number of blocks used depends on δ</p><formula xml:id="formula_11">V W X Y ` a b c d e f g h i p q W X Y ` a b c d g e r h i p V W X Y ` a b c d e f g h i p V W X Y ` a b c d e f g h i p q W X Y ` a b c d g e r h i p q W X Y ` a b c d g e r h i p q W X Y ` a b c d g e r h i p V W X Y ` a b c d e f g h i p V W X Y ` a b c d e f g h i p s t u v w x y  s  u v w  y  s  u v w  y                        d  e     f    g f d h i    q W X Y ` a</formula></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.2.2">Assigning a Writing Budget</head><p>The proposed wear management algorithm divides the given lifetime L min into n time windows (w 0 , w 1 , ..., w n−2 , w n−1 ), and the duration of each window is given as T s . The writing rate W R(w i ) for each time window w i can also be expressed as W B(w i )/T s , where W B(w i ) is the amount of data and represents the writing budget assigned to the time window w i . Since T s is fixed, the assignment of a writing budget to each window significantly impacts the overall performance as well as the rate at which flash memory wears out. For example, if too large a writing budget is assigned to each window, it markedly increases the number of erase cycles for each block; on the other hand, if too small a writing budget is allocated, it lowers the overall performance. Therefore, we determine a writing budget for the window w i as follows:</p><formula xml:id="formula_12">W B(ti) = (C total · E cycles ) − W (ti) n − (ti/Ts) ,<label>(7)</label></formula><p>where t i is the time at the start of window w i , and W (t i ) indicates the amount of a writing budget that has actually been used by t i . The remaining writing budget is (C total · E cycles ) − W (t i ), and the number of remaining windows is (n − (t i /T s )). Therefore, the remaining writing budget is shared equally between the remaining windows. The writing budget is calculated at the beginning of every time window, so as to take changes in the workload pattern into consideration.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.2.3">Determining the Wear Index</head><p>Once the writing budget has been assigned to a time window, the wear manager adjusts the wear index, δ, so that the amount of a writing budget actually used approximates the given writing budget. The wear index is used by a dynamic allocator, similar to Eq. <ref type="formula" target="#formula_7">(3)</ref>, to distribute the incoming data across the two regions. <ref type="figure">Figure 8</ref> shows how the number of blocks used depends on the value of δ. The size of the SLC and MLC blocks is 256 KB and 512 KB, respectively. Suppose that 512 KB data is written, and the data migrator moves this data from the SLC region to the MLC region. If δ is 1.0, as shown in <ref type="figure">Figure 8</ref>(a), 512 KB is written to two SLC blocks, and then the data migrator requires one MLC block to store the data from two SLC blocks. In this case, the total amount of a writing budget used is 1.5 MB because three blocks have been used for writing. If δ is 0.5, as shown in <ref type="figure">Figure 8(b)</ref>, 1 MB of a writing budget is used, requiring one SLC block and one MLC block. <ref type="figure">Figure 8(c)</ref> shows the case when δ is 0.0. Only 512 KB is used because there is no data to be moved.</p><p>This simple example suggests that we can generalize the relationship between the wear index, the amount of incoming data, and the amount of a writing budget actually used, as follows:</p><formula xml:id="formula_13">IW (wi) · (2 · δ + 1) = OW (wi),<label>(8)</label></formula><p>where IW (w i ) is the amount of data that arrives during the window w i , and OW (w i ) is the amount of a writing budget to be used depending on δ. In the example of <ref type="figure">Figure 8</ref>(b), IW (t i ) is 512 KB and δ is 0.5, and thus</p><formula xml:id="formula_14">OW (t i ) is 1 MB. IW (w i ) · (2 · δ)</formula><p>is the amount of a writing budget used by the SLC region and IW (w i ) is the amount of data to be written to the MLC region.</p><p>The wear index should be chosen so that OW (w i ) = W B(t i ), and can therefore be calculated as follows:</p><formula xml:id="formula_15">δ = W B(ti) − IW (wi) 2 · IW (wi) .<label>(9)</label></formula><p>The value of δ is calculated at the beginning of w i when the exact value of IW (w i ) is unknown. IW (w i ) is therefore estimated to be the average value of the previous three time windows. If W B(t i ) &lt; IW (w i ), then δ is 0, and therefore all the data will be written to the MLC region. If IW (w i ) is always larger than W B(t i ), it may be hard to guarantee L min . However, by writing all the data to the MLC region, FlexFS can achieve a lifetime close to that of a pure MLC flash memory. A newly determined value of δ is only used by the dynamic allocator if δ &lt; α. Therefore, the wear management algorithm is only invoked when it seems that the specified lifetime will not be achieved.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.3">Garbage Collection</head><p>The data migrator can make free blocks by moving data from the SLC region to the MLC region, but it cannot reclaim the space used by invalid pages in the MLC region. The garbage collector, in FlexFS, reclaims these invalid pages by selecting a victim block in the MLC region, and then by copying valid pages in the victim into a different MLC block. The garbage collector selects a block with many invalid pages as a victim to reduce the requirement <ref type="figure">Figure 9</ref>: A snapshot of the flash development board used for experiments for additional I/O operations, and also utilizes idle times to hide this overhead from users. Note that, it is never necessary to choose a victim in the SLC region. If cold data is stored in SLC blocks, it will be moved to the MLC region by the data migrator; but hot data need not to be moved because it will soon be invalidated.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5">Experimental Results</head><p>In order to evaluate the efficiency of the proposed techniques on a real platform, we implemented FlexFS on Linux 2.6.25.14 kernel. Our hardware system was the custom flash development board shown in <ref type="figure">Figure 9</ref>, which is based on TI's OMAP2420 processor (running at 400 MHz) with a 64 MB SDRAM. The experiments were performed on Samsung's KFXXGH6X4M-series 1-GB flash memory <ref type="bibr" target="#b3">[4]</ref>, which is connected to one of the NAND sockets shown in <ref type="figure">Figure 9</ref>. The size of each page was 4 KB and there were 128 pages in a block.</p><p>To evaluate the FlexFS file system objectively, we used two types of workload. In Section 5.1, we present experimental results from synthetic workloads. In Section 5.2, we evaluate FlexFS using actual I/O traces collected from executions of real mobile applications. <ref type="table" target="#tab_4">Table 2</ref> summarizes the configurations of the four schemes that we used for evaluating the throughput of FlexFS. In the baseline scheme, all the data is first written into SLC blocks, and then compulsorily moved to MLC blocks only when fewer than five free blocks remain. Three other schemes, BM, DA, and LA, use tech- niques to reduce the overhead of data migrations. For example, the BM scheme uses only the background migration technique, while the LA scheme uses all three proposed techniques. In all the experiments, T wait was set to 1 second, N p was 1024 pages, and T trig was 15 ms. To focus on the performance implications of each scheme, the wear management scheme was disabled.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5.1">Experiments with Synthetic Workloads</head></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5.1.1">Overall Throughput</head><p>All the schemes were evaluated on three synthetic benchmark programs: Idle, Busy, and Locality. They were designed to characterize several important properties, such as the idleness of the system and the locality of I/O references, which give significant effects on the performance of FlexFS. The Idle benchmark mimics the I/O access patterns that occur when sufficient idle time is available in a system. For this purpose, the Idle benchmark writes about 4 MB of data (including metadata) to flash memory every 25 seconds. The Busy benchmark generates 4 MB of data to flash memory every 10 seconds, which only allows the I/O subsystem small idle times. The Locality benchmark is similar to Busy, except that about 25% of the data is likely to be rewritten to the same locations, so as to simulate the locality of I/O references that occurs in many applications. All the benchmarks issued write requests until about 95% of the total MLC capacity has been used. To speed up the evaluation, we limited the capacity of flash memory to 64 MB using the MTD partition manager <ref type="bibr" target="#b13">[14]</ref>. <ref type="figure">Figure 10</ref> compares the throughput of Baseline and BM with the Idle benchmark. The throughput of Baseline is significantly reduced close to 100 KB/s when the utilization approaches 50%, because before writing the incoming data, the data migrator should make enough free space in the SLC region, incurring a noticeable performance degradation. However, BM achieves the same performance as SLC flash memory until the utilization exceeds 94%. Since the Idle benchmark allows FlexFS a lot of idle time (about 93.6% of the total execution time), it should be possible to reclaim a sufficient number of free blocks before new write requests arrive and require them. When the utilization reaches 94%, the performance of BM is significantly reduced because almost all of the available blocks is occupied by valid data, and fewer than 5 free blocks remain available. <ref type="figure" target="#fig_2">Figure 11</ref> compares the performance of BM and DA while running the Busy benchmark. In this evaluation, BM shows a better throughput than DA when the utilization is less than 67%. However, its performance quickly declines because the idle time is insufficient to allow BM to generate enough free blocks to write to the SLC region. DA does exhibit a stable write performance, regardless of the utilization of flash memory. At the beginning of the run, the value of α is initially set to 1.0 so that all the incoming data is written to the SLC region. However, since insufficient idle time is available, the dynamic allocator adjusts the value of α to 0.5. DA then writes some of the arriving data directly to the MLC region, avoiding a significant drop in performance. <ref type="figure" target="#fig_0">Figure 12</ref> shows the performance benefit of the locality-aware approach using the Locality benchmark. Note that Locality has the same amount of idle time compared as the Busy benchmark. LA achieves 7.9% more write performance than DA by exploiting the locality of I/O references. The overall write throughput of LA is 2.66 MB/s while DA gives 2.45 MB/s. The LA scheme also starts with an α value of 1.0, but that is reduced to 0.5 because the idle time is insufficient. However, after detecting a high degree of locality from I/O references, α is partially increased to 0.7 by preventing useless data migrations of hot data, and more data can then be written into the SLC region. </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5.1.2">Response Time</head><p>Although the background migration contributes to improving the write throughput of FlexFS, it could incur a substantial increase in response time because I/O requests can be issued while the background migrator is running. In this subsection, to investigate the impact of the background migration on the response time, we performed evaluations with a following scenario. We first wrote 30 MB of bulk data in order to trigger the background migrator. FlexFS was modified for all the incoming data to be written into the SLC region, regardless of the amount of idle time. After writing this data, we made 10 page write requests. The idle time between two consecutive write requests was generated using a pseudo-random number generator, but this was adjusted at least larger than T wait so that all write requests was randomly issued after the background migrator has been initiated. To collect accurate and reliable results, we performed this scenario more than 30 times.</p><p>We performed our evaluation for the following four configurations. In order to know the effect of the idle time utilization, we measured the response time while varying the idle time utilization. The configurations, U 100 , U 50 , and U 10 represent when FlexFS utilizes 100%, 50%, and 10% of the total idle time, respectively. This idle time utilization can be easily controlled by the value of T trig . For example, the time required to move a single page from SLC to MLC is about 1.5 ms, and so the utilization of 10% can be made using T trig of 15 ms. To clearly show the performance penalty from the background migration, we evaluated the response time when the background migration is disabled, which is denoted as OPT. The migration suspension mentioned in Section 4.1.1 was enabled for all the configurations. <ref type="figure" target="#fig_4">Figure 13</ref> shows the cumulative distribution function of the response time for the four configurations. As expected, OPT shows the best response time among all the configurations. However, about 10% of the total I/O requests requires more than 2,000 us. This response time Although we wrote 4 KB of data into flash memory, the amount of data actually written was slightly larger than 4 KB because of the metadata overhead. Consequently, this results in additional page writes, incurring the delay in response time. U 10 exhibits a longer response time than OPT for about 10% of the total I/O requests, but it shows a fairly good response time. On the other hand, the performance of U 50 and U 100 is significantly deteriorated because they utilize a lot of idle time for data migrations, increasing the probability of I/O requests being issued while the background migrator is working. Especially, when two tasks (the foreground task and the background migration task) compete for a single CPU resource, the performance penalty caused by the resource contention is more significant than we expect.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5.1.3">Endurance</head><p>We evaluated our wear management scheme using a workload scenario in which the write patterns change over a relatively long time. We set the size of flash memory, C total , to 120 MB, and the number of erase cycles allowed for each block, E cycles , was 10, allowing a maximum of 1.2 GB to be written to flash memory. We set the minimum lifetime, L min , to 4,000 seconds, and our wear management scheme was invoked every 400 seconds. So, there are 10 time windows, w 0 , ..., w 9 , and the duration of each, T s , is 400 seconds. To focus our evaluation on the effect of the wear management scheme on performance, the system was given enough idle time to write all the data to the SLC region if the lifetime of flash <ref type="table">Table 3</ref>: The amount of data (MB) arrives for each window during the evaluation of wear management policy.</p><p>Time window w0 w1 w2 w3 w4 w5 w6 w7 w8 w9</p><p>Size <ref type="formula">(</ref>  <ref type="table">Table 3</ref> shows the amount of data (MB) written to flash memory for each window, w i , and <ref type="figure">Figure 14</ref> shows how the proposed wear management scheme adapts to changing write sizes while satisfying the minimum lifetime. Initially, FlexFS allocates a writing budget of 120 MB (= 1.2 GB / 10) to each time window. This budget is large enough to allow all the incoming data to be written to the SLC region if less than or equal to 40 MB of data arrives during each window. Therefore, during the first three windows, the value of δ is set to 1.0. During w 3 and w 4 , however, about 160 MB of data arrives, and FlexFS reduces δ to cut the migration cost. Because only 40 MB of data arrives during w 5 and w 6 , FlexFS can increase δ to give a larger writing budget to the remaining windows. We measured the amount of data written to flash memory, including extra overheads caused by migrations from the SLC region to the MLC region. FlexFS writes about 1.2 GB of data to flash memory, and thus achieving the specified minimum life span of 4,000 seconds.</p><p>We also counted the number of erase operations performed on each block while running FlexFS with and without the wear management scheme using the same workload scenario. A wear-leveling policy was disabled when the wear management scheme was not used.  These results clearly indicate that with the wear management scheme FlexFS gives a good wear characteristic; the maximum erase cycle of each block is effectively limited to less than or equal to 10, and the block erase operations are evenly distributed across the flash memory medium.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5.2">Experiments with Mobile Workloads</head></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5.2.1">Generating Mobile Workloads</head><p>In addition to the synthetic workloads discussed in Section 5.1, which were designed to evaluate one aspect of FlexFS at a time, we evaluated FlexFS using I/O traces collected from a real-world mobile platform to assess the performance of FlexFS with mobile applications. To collect and replay I/O traces from real applications, we developed a custom mobile workload generation environment based on the Qtopia Phone Edition <ref type="bibr" target="#b14">[15]</ref>, which includes representative mobile applications such as PIMS, SMS, and media players. This environment includes three tools: a usage pattern generator, an I/O tracer, and a replayer. The usage pattern generator automatically executes mobile applications as if the user is actually interacting with applications during runtime. The I/O tracer captures I/O system calls (e.g., fopen, fread, and fwrite) while running the usage pattern generator on the Qtopia platform, and then stores collected traces in a log file. The replayer uses this log file to replay the I/O requests in our development board. Note that this log file allows us to repeat the same usage patterns for different system configurations.</p><p>For the evaluation, we executed the several mobile applications shown in <ref type="table" target="#tab_6">Table 5</ref> on our workload generation environment for 30 minutes. We followed a representative usage profile of mobile users reported in <ref type="bibr" target="#b15">[16]</ref> except that more multimedia data was written in order to simulate data downloading scenario. The trace includes  43,000 read and write requests. About 5.7 MB was read from flash memory and about 39 MB was written.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5.2.2">Evaluation Results</head><p>In order to find out whether FlexFS can achieve SLClike performance, we evaluated the performance of two FlexFS configurations, FlexFS MLC and FlexFS SLC . FlexFS MLC is the proposed FlexFS configuration using both SLC and MLC programming, while FlexFS SLC mimics SLC flash memory by using only SLC programming. To know the performance benefits of FlexFS MLC , we evaluated JFFS2 file system on the same hardware. In this subsection, we will focus on the performance aspect only, since the capacity benefit of FlexFS MLC is clear. For FlexFS MLC , T trig was set to 15 ms, N p to 1024 pages, and T wait to 1 second. We assumed a total capacity of 512 MB, a maximum of 10,000 erase cycles for a block, and a minimum lifetime of 3 years. The wear management policy was invoked every 10 minutes. <ref type="table" target="#tab_7">Table 6</ref> compares the response time and the throughput of FlexFS MLC , FlexFS SLC , and JFFS2. The response time was an average over all the I/O requests in the trace file, but the throughput was measured when writing a large amount of data, such as MP3 files. Compared to JFFS2, FlexFS MLC achieves 28% smaller I/O response time and 28% higher I/O throughput. However, the performance difference between FlexFS MLC and JFFS2 is noticeably reduced compared to the difference shown in <ref type="table" target="#tab_2">Table 1</ref> because of computational overheads introduced by each file system. JFFS2 as well as FlexFS MLC requires a lot of processing time for managing internal data structures, such as block lists, a metadata, and an error detecting code, which results in the reduction of the performance gap between two file systems.  The graph in <ref type="figure" target="#fig_7">Figure 16</ref> shows in more detail how FlexFS MLC achieves I/O efficiency. We counted the number of each type of block every 30 seconds. In the graph, the regions around 840 seconds clearly demonstrate the effectiveness of the proposed techniques. Starting from 750 seconds, many MP3 files of about 18 MB are intensively written into flash memory. FlexFS MLC can write all this data into the SLC region because the idle time predictor in the dynamic allocator predicts there will be enough idle time, which allows aggressive writes to the SLC region.</p><p>From our observations on the representative mobile workloads, there are two distinctive characteristics in I/O access patterns. First, many mobile embedded systems such as mobile phones and smart phones are likely to have sufficient idle time; the average idle time accounts for about 89% of the total execution time. Second, most data is intensively written to flash memory within a short time interval. As the experimental results show, FlexFS is effectively designed for dealing with such characteristics, and thus can achieve the I/O performance close to SLC flash memory.</p><p>The small performance penalty of FlexFS MLC results from ensuring the given minimum lifetime. As shown in <ref type="figure" target="#fig_7">Figure 16</ref>, at around 1,200 seconds the wear management policy reduces the value of δ to 0.5, which degrades the write performance of FlexFS MLC . However, this decision was necessary because a large number of writes to the SLC region for storing several MP3 files reduced the number of erase cycles significantly. To meet the required minimum lifetime, FlexFS wrote 50% of the data to the MLC region directly. This result indicates that the poor wear characteristic of MLC flash memory could be a hurdle for FlexFS to achieve its performance benefit.</p><p>However, it must be noted that 512 MB of flash capacity used in our evaluation is very small compared to commercial flash applications. Actually, many flash devices already employ several GB of flash memory and its capacity doubles every two or three years. For example, if a flash device has 16 GB MLC flash memory and the minimum lifetime is set to 3 years, the writing budget per day is about 146 GB. Therefore, it may safely be assumed that the endurance problem would be mitigated without a significant performance degradation.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="6">Related Work</head><p>Many file systems for NAND flash memory have been studied in recent years. JFFS2 <ref type="bibr" target="#b4">[5]</ref> and YAFFS <ref type="bibr" target="#b6">[7]</ref> are representative, and are both the log-structured file systems <ref type="bibr" target="#b5">[6]</ref>, which write data sequentially to NAND flash memory. JFFS2 was originally developed for NOR flash memory, and later extended to NAND devices. JFFS2 stores metadata and regular data together. YAFFS is similar to JFFS2 except that metadata is stored in a spare area of each page to promote fast mounting of the file system. They are both designed for the homogeneous flash memory media, and do not support the heterogeneous flash memory devices discussed in this paper.</p><p>Recently, there have been several efforts to combine both SLC and MLC flash memory. Chang et al. suggest a solid-state disk which is composed of a single SLC chip and many MLC chips <ref type="bibr" target="#b16">[17]</ref>, while Park et al. present a flash translation layer for mixed SLC-MLC storage systems <ref type="bibr" target="#b17">[18]</ref>. The basic idea of these two approaches is to store frequently updated data in the small SLC flash memory while using the large MLC flash memory for storing bulk data. This brings the overall response time close to that of SLC flash memory while keeping the cost per bit as low as MLC flash memory. However, these approaches cannot break down when a large amount of data has to be written quickly, because they only use the small SLC flash memory so as to achieve their cost benefit. In this situation, the overall I/O throughput will be limited to the throughput of MLC flash memory. But FlexFS can handle this case efficiently by flexibly increasing the size of the SLC region, and therefore combines the high performance of SLC flash memory with the high capacity of MLC flash memory.</p><p>The hybrid hard disk <ref type="bibr" target="#b18">[19,</ref><ref type="bibr" target="#b19">20]</ref> is another heterogeneous storage system which uses flash memory as a nonvolatile cache for a hard disk. In a hybrid hard disk, flash memory is used to increase the system responsiveness, and to extend battery lifetime. However, this approach is different from our study in which it does not give any considerations on optimizing the storage system by dynamically changing its organization.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="7">Conclusions</head><p>FlexFS is a file system that takes advantage of flexible programming of MLC NAND flash memory. FlexFS is designed to maximize I/O performance while making the maximum capacity of MLC flash memory available. The novel feature of FlexFS is migration overhead reduction techniques which hide the incurred migration overhead from users. FlexFS also includes a novel wear management technique which mitigates the effect of the data migration on the lifetime of flash memory. Experimental results show that FlexFS achieves 90% and 96% of the read and write performance of SLC flash memory with real-world mobile workloads.</p><p>There are a few areas where FlexFS can be further improved. First, even though the background migration is effective in hiding the migration overhead, it is less efficient from the energy consumption perspective because it reduces the probability that the system enters a lowpower state. In order to better handle both the performance and energy consumption simultaneously, we are developing a dynamic allocation policy that takes into account an energy budget of a system. Second, for FlexFS to be useful on a wide range of systems, the poor wear characteristic of MLC flash memory should be addressed properly. To handle this problem, we are also investigating a wear management policy for a storage architecture in which SLC flash memory is used as a write buffer for MLC flash memory.</p></div><figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_0"><head>Figure 2 :</head><label>2</label><figDesc>Figure 2: An organization of an MLC flash memory array (2 bits/cell)</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_1"><head>Figure 7 :</head><label>7</label><figDesc>Figure 7: A comparison of the locality-unaware and locality-aware approaches different flash regions depending on α. Therefore, the number of pages to be written into the SLC region, N SLC p , and the amount of data destined for the MLC region, N MLC p</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_2"><head>Figure 11 :</head><label>11</label><figDesc>Figure 10: Performance comparison of Baseline and BM with the Idle benchmark</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_3"><head>Figure 12 :</head><label>12</label><figDesc>Figure 12: Performance comparison of DA and LA with the Locality benchmark</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_4"><head>Figure 13 :</head><label>13</label><figDesc>Figure 13: A comparison of response time delays on different system configurations</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_5"><head></head><label></label><figDesc>Figure 14: The changes in the size of written data and the δ value</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_6"><head></head><label></label><figDesc>Figure 15: Distributions of block erase cycles</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_7"><head>Figure 16 :</head><label>16</label><figDesc>Figure 16: The changes in the number of SLC and MLC blocks with a mobile workload in FlexFS MLC</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_2" validated="true"><head>Table 1 : Performance comparison of different types of cell programming (us)</head><label>1</label><figDesc></figDesc><table>Operation 
SLC 
M LCLSB M LCBOTH 

Read (page) 
399 
409 
403 
Write (page) 
417 
431 
994 
Erase (block) 
860 
872 
872 

</table></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_4" validated="true"><head>Table 2 : Summary of the schemes used in throughput evaluation</head><label>2</label><figDesc></figDesc><table>Schemes 
Baseline 
BM 
DA 
LA 
Background migration 
× 



Dynamic allocation 
× 
× 


Locality-aware 
× 
× 
× 


</table></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_5" validated="false"><head>Table 4 : Summary of results relevant to a wear-leveling</head><label>4</label><figDesc></figDesc><table>Avg. erase cycles 
Std.Dev. 
w/ wear management 
9.23 
1.20 
wo/ wear management 
10.73 
2.43 

</table></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_6" validated="true"><head>Table 5 : Applications used for evaluations</head><label>5</label><figDesc></figDesc><table>Application 
Description 
SMS 
Send short messages 
Address book Register / modify / remove addresses 
Memo 
Write a short memo 
Game 
Play a puzzle game 
MP3 player 
Download 6 MP3 files (total 18 MB) 
Camera 
Take 9 pictures (total 18 MB) 

</table></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_7" validated="true"><head>Table 6 : A performance comparison of FlexFS MLC and FlexFS SLC under mobile workloads</head><label>6</label><figDesc></figDesc><table>Response time 
Throughput 
Read 
Write 
Write 
(us) 
(us) 
(MB/s) 
FlexFSSLC 
34 
334 
3.02 
FlexFSMLC 
37 
345 
2.93 
JFFS2 
36 
473 
2.12 

</table></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_8" validated="false"><head></head><label></label><figDesc>The performance of FlexFS MLC is very close to that of FlexFS SLC . The response times of FlexFS MLC are 10% and 3.2% slower for reads and writes, compared with FlexFS SLC . The I/O throughput of FlexFS MLC is 3.4% lower than that of FlexFS SLC . This high I/O perfor- mance of FlexFS MLC can be attributed to the sufficiency of idle time in the trace. Therefore, FlexFS MLC can write most incoming data into the SLC region, improving the overall I/O performance.</figDesc><table></table></figure>
		</body>
		<back>

			<div type="acknowledgement">
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="8">Acknowledgements</head><p>This work was supported by the Korea Science and Engineering Foundation (KOSEF) grant funded by the Korea government (No. R0A-2007-000-20116-0) and the Brain Korea 21 Project in 2009. This work was also supported by World Class University (WCU) program through KOSEF funded by the Ministry of Education, <ref type="bibr">Science and Technology (No. R33-2008-000-10095-0)</ref>. Samsung Electronics partially supported our FlexFS research and the ICT at Seoul National University provided research facilities for this study.</p></div>
			</div>

			<div type="references">

				<listBibl>

<biblStruct xml:id="b0">
	<analytic>
		<title level="a" type="main">Single Level Cell Programming in a Multiple Level Cell Non-volatile Memory Device</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">F</forename><surname>Roohparvar</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">In United States Patent</title>
		<imprint>
			<biblScope unit="issue">11</biblScope>
			<biblScope unit="page">13</biblScope>
			<date type="published" when="2007" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b1">
	<analytic>
		<title level="a" type="main">A Multilevel-Cell 32 Mb Flash Memory</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Bauer</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the Solid-State Circuits Conference</title>
		<meeting>the Solid-State Circuits Conference<address><addrLine>February</addrLine></address></meeting>
		<imprint>
			<date type="published" when="1995" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b2">
	<analytic>
		<title level="a" type="main">Flash Memory Cells -An Overview</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><surname>Pavan</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Bez</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><surname>Olivo</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">E</forename><surname>Zanoni</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">In Proceedings of the IEEE</title>
		<imprint>
			<biblScope unit="volume">85</biblScope>
			<biblScope unit="issue">8</biblScope>
			<date type="published" when="1997" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b3">
	<monogr>
		<title level="m" type="main">Flex-OneNAND&apos; Specification</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Samsung</forename><surname>Electronics Corp</surname></persName>
		</author>
		<ptr target="http://www.samsung.com/global/system/business/semiconductor/product/2008/2/25/867322dskfxxgh6x4mrev10.pdf" />
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b4">
	<analytic>
		<title level="a" type="main">JFFS : The Journalling Flash File System</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Woodhouse</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the Linux Symposium</title>
		<meeting>the Linux Symposium</meeting>
		<imprint>
			<date type="published" when="2001-07" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b5">
	<analytic>
		<title level="a" type="main">The Design and Implementation of a Log-Structured File System</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Rosenblum</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Ousterhout</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">ACM Transactions on Computer Systems</title>
		<imprint>
			<biblScope unit="volume">10</biblScope>
			<biblScope unit="issue">1</biblScope>
			<date type="published" when="1992" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b6">
	<monogr>
				<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Aleph</forename><surname>One</surname></persName>
		</author>
		<ptr target="http://www.yaffs.net/" />
		<title level="m">YAFFS: Yet Another Flash File System</title>
		<imprint>
			<date type="published" when="2002" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b7">
	<analytic>
		<title level="a" type="main">A Survey of Design Techniques for System-level Dynamic Power Management</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">L</forename><surname>Benini</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Bogliolo</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">G</forename><forename type="middle">D</forename><surname>Micheli</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE Transactions on VLSI Systems</title>
		<imprint>
			<biblScope unit="volume">8</biblScope>
			<biblScope unit="issue">3</biblScope>
			<date type="published" when="2000" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b8">
	<analytic>
		<title level="a" type="main">Comparing Algorithms for Dynamic Speed-setting of a Low-power CPU</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">E</forename><surname>Chan</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">K</forename><surname>Govil</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">H</forename><surname>Wasserman</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the Conference on Mobile Computing and Networking (MOBICOM &apos;95)</title>
		<meeting>the Conference on Mobile Computing and Networking (MOBICOM &apos;95)</meeting>
		<imprint>
			<date type="published" when="1995-11" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b9">
	<analytic>
		<title level="a" type="main">The LRU-K Page Replacement Algorithm for Database Disk Buffering</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">E</forename><surname>O&amp;apos;neil</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><surname>O&amp;apos;neil</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">G</forename><surname>Weikum</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the Conference on Management of Data (SIGMOD &apos;93)</title>
		<meeting>the Conference on Management of Data (SIGMOD &apos;93)</meeting>
		<imprint>
			<date type="published" when="1993-05" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b10">
	<analytic>
		<title level="a" type="main">An Effective Flash Memory Manager for Reliable Flash Memory Space Management</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">H</forename><surname>Kim</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Lee</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IE-ICE Transactions on Information and System</title>
		<imprint>
			<biblScope unit="issue">6</biblScope>
			<date type="published" when="2002" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b11">
	<analytic>
		<title level="a" type="main">Efficient Management for LargeScale Flash-Memory Storage Systems with Resource Conservation</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">L</forename><surname>Chang</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><surname>Kuo</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">ACM Transactions on Storage</title>
		<imprint>
			<biblScope unit="volume">1</biblScope>
			<biblScope unit="issue">4</biblScope>
			<date type="published" when="2005" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b12">
	<monogr>
		<title level="m" type="main">Longterm Data Endurance (LDE) for Client SSD</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Sandisk</surname></persName>
		</author>
		<ptr target="http://www.sandisk.com/Assets/File/pdf/oem/LDEWhitePaper.pdf" />
		<imprint>
			<date type="published" when="2008" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b13">
	<analytic>
		<title/>
		<ptr target="http://www.linux-mtd.infradead.org/doc/general.html" />
	</analytic>
	<monogr>
		<title level="j">Memory Technology Device (MTD</title>
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b14">
	<monogr>
		<title level="m" type="main">Qtopia</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Nokia</forename><surname>Corp</surname></persName>
		</author>
		<ptr target="http://www.qtsoftware.com/products/" />
		<imprint/>
	</monogr>
	<note>Phone Edition 4.1.2</note>
</biblStruct>

<biblStruct xml:id="b15">
	<analytic>
		<title level="a" type="main">Handset-Based Monitoring of Mobile Subscribers</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">H</forename><surname>Verkasalo</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">H</forename><surname>Hämmäinen</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the Helsinki Mobility Roundtable</title>
		<meeting>the Helsinki Mobility Roundtable</meeting>
		<imprint>
			<date type="published" when="2006-06" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b16">
	<analytic>
		<title level="a" type="main">Hybrid Solid-State Disks: Combining Heterogeneous NAND Flash in Large SSDs</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">L</forename><forename type="middle">P</forename><surname>Chang</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the Conference on Asia and South Pacific Design Automation (ASP-DAC &apos;08)</title>
		<meeting>the Conference on Asia and South Pacific Design Automation (ASP-DAC &apos;08)</meeting>
		<imprint>
			<date type="published" when="2008-01" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b17">
	<analytic>
		<title level="a" type="main">A Mixed Flash Translation Layer Structure for SLC-MLC Combined Flash Memory System</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Park</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Park</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Jeong</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Kim</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Kim</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the Workshop on Storage and I/O Virtualization, Performance, Energy, Evaluation and Dependability (SPEED &apos;08)</title>
		<meeting>the Workshop on Storage and I/O Virtualization, Performance, Energy, Evaluation and Dependability (SPEED &apos;08)<address><addrLine>February</addrLine></address></meeting>
		<imprint>
			<date type="published" when="2008" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b18">
	<analytic>
		<title level="a" type="main">Hybrid Hard Disk and ReadyDrive Technology: Improving Performance and Power for Windows Vista Mobile PCs</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Panabaker</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the Microsoft Win-HEC</title>
		<meeting>the Microsoft Win-HEC</meeting>
		<imprint>
			<date type="published" when="2006-05" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b19">
	<analytic>
		<title level="a" type="main">I/O Performance Optimization Technique for Hybrid Hard Disk-based Mobile Consumer Devices</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Y</forename><surname>Kim</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Lee</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">K</forename><surname>Zhang</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Kim</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE Transactions on Consumer Electronics</title>
		<imprint>
			<biblScope unit="volume">53</biblScope>
			<biblScope unit="issue">4</biblScope>
			<date type="published" when="2007" />
		</imprint>
	</monogr>
</biblStruct>

				</listBibl>
			</div>
		</back>
	</text>
</TEI>
