<?xml version="1.0" encoding="UTF-8"?>
<TEI xmlns="http://www.tei-c.org/ns/1.0" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
xsi:schemaLocation="http://www.tei-c.org/ns/1.0 /Users/atharsefid/Desktop/grobid-0.5.3/grobid-home/schemas/xsd/Grobid.xsd"
 xmlns:xlink="http://www.w3.org/1999/xlink">
	<teiHeader xml:lang="en">
		<encodingDesc>
			<appInfo>
				<application version="0.5.3" ident="GROBID" when="2020-09-29T02:48+0000">
					<ref target="https://github.com/kermitt2/grobid">GROBID - A machine learning software for extracting information from scholarly documents</ref>
				</application>
			</appInfo>
		</encodingDesc>
		<fileDesc>
			<titleStmt>
				<title level="a" type="main">Building a Scalable Multimedia Search Engine Using Infiniband</title>
			</titleStmt>
			<publicationStmt>
				<publisher/>
				<availability status="unknown"><licence/></availability>
			</publicationStmt>
			<sourceDesc>
				<biblStruct>
					<analytic>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Qi</forename><surname>Chen</surname></persName>
							<affiliation key="aff0">
								<orgName type="department">Department of Computer Science</orgName>
								<orgName type="institution">Peking University</orgName>
							</affiliation>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Yisheng</forename><surname>Liao</surname></persName>
							<affiliation key="aff1">
								<orgName type="department">Department of Computer Science</orgName>
								<orgName type="institution">New York University</orgName>
							</affiliation>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Christopher</forename><surname>Mitchell</surname></persName>
							<affiliation key="aff1">
								<orgName type="department">Department of Computer Science</orgName>
								<orgName type="institution">New York University</orgName>
							</affiliation>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Jinyang</forename><surname>Li</surname></persName>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Zhen</forename><surname>Xiao</surname></persName>
							<affiliation key="aff0">
								<orgName type="department">Department of Computer Science</orgName>
								<orgName type="institution">Peking University</orgName>
							</affiliation>
							<affiliation key="aff1">
								<orgName type="department">Department of Computer Science</orgName>
								<orgName type="institution">New York University</orgName>
							</affiliation>
						</author>
						<title level="a" type="main">Building a Scalable Multimedia Search Engine Using Infiniband</title>
					</analytic>
					<monogr>
						<imprint>
							<date/>
						</imprint>
					</monogr>
				</biblStruct>
			</sourceDesc>
		</fileDesc>
		<profileDesc>
			<abstract>
				<p>The approach of vertically partitioning the index has long been considered as impractical for building a distributed search engine due to its high communication cost. With the recent surge of interest in using High Performance Computing networks such as Infiniband in the data center , we argue that vertical partitioning is not only practical but also highly scalable. To demonstrate our point, we built a distributed image search engine (VertiCut) that performs multi-round approximate neighbor searches to find similar images in a large image collection.</p>
			</abstract>
		</profileDesc>
	</teiHeader>
	<text xml:lang="en">
		<body>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="1">Introduction</head><p>With the explosion of multimedia information on the Web, there is an increasing demand to build bigger and faster search engines to index such data. Inevitably, such a scalable search engine must be distributed in order to leverage the aggregate memory and CPU resources of many machines.</p><p>Distributed search has long been an open challenge. The traditional approach is to horizontally partition the index such that each machine stores a subset of all documents and maintains a corresponding local in-memory index. To process a request, the search engine first dispatches the query to all machines each of which performs a search locally. It then aggregates the partial results from all machines before returning the final answer to the user. Although this scheme can use the aggregate memory of many machines, it does not have scalable performance: as each request is processed by all machines, query latency and performance do not improve as more machines are added.</p><p>A promising alternative is vertical partitioning. In this scheme, the index of the entire document collection is cut vertically such that each machine stores a subset of the indexed features. To process a request, the search engine needs to fetch multiple indexed features (each of which is located on a different machine) and then filter or join them locally to obtain the final results. This scheme is scalable: since the number of features being looked up is independent of the number of machines, one can potentially improve performance by adding more machines.</p><p>Despite its promise for scalability, vertical partitioning has long been considered impractical <ref type="bibr" target="#b8">[9]</ref>. This is because multimedia search engines need to sift through tens of thousands of indexed features, resulting in huge communication cost per query. Optimizations that reduce communication significantly increase the number of roundtrips during the search and hence are not practical when running on top of the Ethernet where a roundtrip is around ∼ 0.1ms. As a result, existing distributed search engines are almost always horizontally partitioned <ref type="bibr" target="#b2">[3]</ref>.</p><p>In this paper, we argue that now is time to adopt vertical partitioning for distributed search. This revolution is made possible by recent technological trends in datacenter networks that aim to incorporate High Performance Computing (HPC) network features such as ultralow latency <ref type="bibr" target="#b0">[1,</ref><ref type="bibr" target="#b13">14]</ref>. With a roundtrip latency of several microseconds, a vertically-partitioned search engine can potentially issue tens of thousands of lookups sequentially to refine its results while still achieving sub-second query latency.</p><p>We demonstrate the practicality of vertical partitioning by building VertiCut, an image search engine running on top of Infiniband, a popular HPC network. VertiCut implements a distributed version of the multi-index hashing algorithm <ref type="bibr" target="#b14">[15]</ref> which performs K-Nearest-Neighbor (KNN) search in a high-dimensional binary space occupied by all images. VertiCut uses a distributed hash table to (vertically) partition the indexed binary codes. To process a request quickly, VertiCut also uses two crucial optimizations. First, it performs approximate KNN search by issuing hash table reads sequentially and stopping early as soon as enough "good" results are found. This optimization drastically reduces the amount of hash table reads done by each query. Second, VertiCut elim- <ref type="figure">Figure 1</ref>: The indexing process of the multimedia search inates a huge number of lookups for non-existant keys by keeping a local bitmap at each machines. Our experiments show that VertiCut achieves better and more scalable performance compared to a horizontally partitioned search engine. Furthermore, VertiCut's KNN approximation has very little impact on the quality of the search results.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2">Challenges of Distributed Multimedia Search</head><p>Background on Multimedia Search: To search multimedia files such as images, music and video, a common approach is based on mapping multimedia data to binary codes. Under this approach, an offline indexer first extracts an array of features using some domain specific algorithms (e.g. using SIFT <ref type="bibr" target="#b10">[11]</ref> descriptors for images) for each file. It then maps each high-dimensional feature descriptor into a compact binary code using a transformation function that preserves semantic similarity such as a locality sensitive hash function <ref type="bibr" target="#b5">[6]</ref>. The common length of the binary code is 128 bits since 128-bit binary code can achieve more accurate result according to <ref type="bibr" target="#b14">[15]</ref>. The indexer then builds an index out of the collection of binary codes. <ref type="figure">Figure 1</ref> illustrates the indexing process. To search for images that are similar to a given query image, the search engine finds its k nearest neighbors (KNN) in terms of Hamming distance among the collection of binary codes. There are many ways to perform KNN in the binary code space. The recently proposed multi-index hashing algorithm, MIH <ref type="bibr" target="#b14">[15]</ref>, provides a particularly efficient way to index and search these binary codes. Specifically, it divides each binary code into m disjoint pieces and indexes each part into a separate hash table (shown in <ref type="figure" target="#fig_0">Fig- ure 2)</ref>.</p><p>To perform k nearest neighbor search, the MIH algorithm first divides the query binary code Q into m pieces and then searches each piece Q i using the corresponding i-th hash table. Suppose the length of the binary code is s. The algorithm performs search in rounds with increasing search radius r starting from 0. In a round that handles a specific search radius r, the algorithm does the following steps: • Aggregate the results from all m hash tables into a candidate set of binary codes.</p><p>• When there are more than k candidates whose Hamming distance with Q are less than (r + 1) * m (the minimum Hamming distance in the next round of search radius (r + 1)), stop search procedure and return the top k items.</p><p>By dividing the binary code into m pieces, the algorithm drastically reduces the number of enumerated index entries within a given hamming distance. Therefore, this algorithm performs much better on large datasets than the naive linear scan algorithm. However, MIH cannot cut the binary code into too many pieces, because a shorter substring length means fewer entries in the hash tables, which cannot separate similar items from far apart items well and leads to a huge but mostly useless candidate set. For 128-bit binary code, it is discovered that the best choice of m is 4 since 32-bit substring code can be effectively used as the index in each hash tables.</p><p>Challenges of Distribution: How to distribute the MIH algorithm effectively among n machines? With horizontal partitioning, we can assign a subset of images to each machine which indexes and searches through them using a local MIH algorithm. A central coordinator dispatches the query to all n machines and ranks the n * k results collected from them to return the final k nearest neighbors to the user. As we discussed earlier, this approach does not scale with n since each query is processed by all machines.</p><p>With vertical partitioning, we index each of the m pieces of binary code on a potentially different machine. In particular, we can view the MIH algorithm as operating on top of a distributed instead of local hash table to store its indexed codes. When a request comes, the Better yet, we expect it to perform fewer lookups per query as the underlying image collection gets bigger. This is because the more images in each entry of the hash tables, the smaller the search radius r is required to find k closeby neighbors. The main challenge with this approach is its large communication cost since there is a huge number of binary codes to be enumerated and checked with even a modest search radius r.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3">Design of VertiCut</head><p>In this section, we present a fast and scalable multimedia search engine VertiCut that leverages the features of Infiniband to address the distribution challenge.</p><p>Basic Design: <ref type="figure" target="#fig_1">Figure 3</ref> shows the system architecture of VertiCut. It contains two layers: search layer and storage layer. In search layer, each node starts multiple processes to deal with the user request in parallel. In storage layer, we run the fast in-memory storage Pilaf <ref type="bibr" target="#b13">[14]</ref> on each server which uses the RDMA read interface of Infiniband and organize the memory of the servers into a transparent DHT.</p><p>Before VertiCut can answer queries, we first build up multiple index hash tables for the whole data collection. We vertically cut the binary codes into multiple disjoint small parts (m parts) with each part consisting no more than 32 bits and build an index hash table for each part of the codes (just like the MIH algorithm does). Then instead of storing different hash tables to different servers, we store these hash tables into our fast distributed inmemory storage (each entry in each hash table generates an entry in our DHT).</p><p>When a query binary code Q arrives, the search node divides Q into m parts and starts m processes, with each process searching one index hash table using our simplified Infiniband "get" interface. A master process takes responsibility for performing search iteratively with increasing search radius r, controlling each process to do the search in parallel and aggregating the results from all the processes. When there are more than k candidates whose Hamming distance with Q is less than the minimum Hamming distance in the next iteration of search radius (r + 1), the master process stops the search procedure and returns the top k items to the user.</p><p>The naive MIH algorithm is not practical due to its huge communication cost which increases explosively with the search radius r. Therefore, we introduce some optimizations to cut down this cost.</p><p>Optimization I: Approximate nearest neighbor. In the MIH algorithm, in order to get the exact k nearest results, for each search radius r, we need to check whether there are more than k candidates within a Hamming distance of (r + 1) * m after aggregating the results from all the processes. This may cause the search radius r to become large in some cases although there have already been nearly k exact nearest neighbors in the candidate set. We notice that the larger the search radius r is, the faster the search cost grows. Since we are not very strict with the exact k nearest search results, we propose an approximate search algorithm to further reduce the synchronization cost and search radius r while preserve an acceptable precision at the same time. The optimization we make is to change the search stop condition to |Candidates| &gt;= Factor Approx * k. This intuitive optimization can greatly reduce the search cost confirmed by our evaluation results.</p><p>The trade off is that it may miss some exact search results. For example, suppose we have a full candidate set A (|A| = Factor Approx * k), an item b and the search item Q. All candidates in A have some substring whose Hamming distance with the corresponding substring of Q is zero, while other parts of them are far away from Q. b has a small Hamming distance (e.g. 1) with Q in all of its substrings. Then we miss the item b whose Hamming distance to Q is closer than that of candidates in A. Therefore, we should carefully choose the Factor Approx so that we can achieve a proper search precision and query latency. According to our experiment, we find that when Factor Approx reaches 20, the search precision exceeds 80%. However, the query latency does not increase significantly, which is still much faster than the exact search. Moreover, with arbitrary k, the average Hamming distance of our approximate search result is always very close to that of the exact search (the error remains less than 1). Therefore, we choose 20 as our default Factor Approx .</p><p>Optimization II: Eliminate empty lookups.: We find that most of the entries in each index hash table are empty with no items in it. For example, we have one billion items in the whole data set, and the substring length is 32. Then each index hash table has at least 2 32 −10 9 2 32 ≈ 3 4 empty entries. In fact, according to our experiment, there are almost 90% empty entries. Although RDMA reads are much faster than the Ethernet reads, they are still slower than local memory reads. Therefore, we should avoid looking up the empty entries in the distributed hash tables. We create a bitmap for each index hash table which records those empty entries and do the real RDMA get operations only if the binary index is in the hash table. We can also use a Bloom filter to avoid reading these empty entries. According to our experiment, using a Bloom filter is slower than using bitmap by 18% while it saves the memory usage by 46%. Since the memory usage of bitmap does not increase with the image size and using bitmap can bring us a 7.5x speedup of the search procedure, we use bitmap as our default choice.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4">Evaluation</head><p>In this section, we evaluate the performance of VertiCut on the image search application compared with the traditional horizontal cutting dispatch and aggregate scheme.</p><p>Experimental Setup: We set up our experiments on a cluster of 12 servers. Each server is equipped with two AMD or Intel processors, 16 or 32GB of memory, a Mellanox ConnectX-2 20 Gbps Infiniband HCA and an Intel gigabit Ethernet adapter. All servers run Ubuntu 12.10 with the OFED 3.2 Infiniband driver.</p><p>We use the one billion SIFT descriptors from the BIGANN dataset <ref type="bibr" target="#b6">[7]</ref> and LSH <ref type="bibr" target="#b5">[6]</ref> to map from highdimensional data to binary codes. The default configuration of image search application follows that of <ref type="bibr" target="#b14">[15]</ref>. The queries are generated by randomly choosing 1000 images from the dataset.</p><p>We run each test case three times and take the average query latency of 1000 queries as our primary metric to measure the effectiveness of our system. Scalability and Query Latency: To demonstrate the scalability of VertiCut, we first run a 1000 nearest neighbors search with vary data size. As the data size increases from 10 million to 120 million images, we also increases the number of servers from 1 to 12 so that each server always processes 10 million images. We compare three designs, VertiCut on Infiniband, the traditional horizontal scheme on Infiniband (just use Ethernet over Infiniband since the network usage of this scheme is very small) and VertiCut on Ethernet, all of which use the same approximate search algorithm with bitmap optimization. <ref type="figure" target="#fig_2">Figure  4</ref> shows that as the data size increases, the query latency of the traditional scheme increases rapidly due to the increased aggregation cost. Surprisingly, in VertiCut, the latency decreases. The reason why the query latency decreases in VertiCut is that as the data increase, the number of images in the same entry of a hash table also increases. Then searching for the fixed k nearest neighbors, the number of entries we need to enumerate decreases (This can be proved by the decreasing number of reads per query shown on the <ref type="figure" target="#fig_2">figure 4)</ref>. This makes VertiCut more effective and scalable on the huge data set. Note that although the query latency of VertiCut on Ethernet has the same decline trend, it is still 8 times slower than VertiCut on Infiniband and 4.4 times slower than traditional scheme. Effects of k: To show the low query latency of VertiCut on Infiniband in arbitrary k nearest neighbors search, we run a test on 120 million images using 12 servers with varying k (from 1 to 1000). <ref type="figure" target="#fig_3">Figure 5</ref> shows that VertiCut on Infiniband is almost twice as fast as the traditional scheme for arbitrary k although its network cost is about 6 times larger than that of traditional scheme, while VertiCut on Ethernet is much slower than the other two. This demonstrates that VertiCut on Infiniband is the best scheme for the large scale multimedia search engine.</p><p>Effects of Optimizations: To demonstrate the advantages of our two optimizations, we run k nearest neighbors search on 120 million images with and without our optimizations. We vary the k from 1 to 1000, the comparison of our VertiCut, MIH (No optimization), MIH with approximate search optimization (Approximate KNN) and MIH with bitmap optimization (Bitmap) is shown in <ref type="figure">Figure 6</ref> (Note that the y axis is in log scale). From the result, we can find that the approximate optimization improves the search speed by 80 times, the bitmap optimization improves 25 times, and our VertiCut achieves at least 550 times improvement. This verifies that our two optimizations are quite reasonable and effective, which can make the distributed multimedia search much more scalable and practical in reality.   <ref type="figure">Figure 6</ref>: The latency of a query and its number of read operations with and without optimizations.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5">Related Work</head><p>There have been several previous works attempting to provide distributed content-based image retrieval <ref type="bibr" target="#b1">[2,</ref><ref type="bibr" target="#b4">5,</ref><ref type="bibr" target="#b7">8,</ref><ref type="bibr" target="#b9">10,</ref><ref type="bibr" target="#b11">12,</ref><ref type="bibr" target="#b12">13,</ref><ref type="bibr" target="#b14">15,</ref><ref type="bibr" target="#b16">[17]</ref><ref type="bibr" target="#b17">[18]</ref><ref type="bibr" target="#b18">[19]</ref><ref type="bibr" target="#b19">[20]</ref>. They can be divided into two categories: low dimensional and high dimensional approaches. In low dimensional approaches, <ref type="bibr" target="#b4">[5,</ref><ref type="bibr" target="#b17">18]</ref> focus on distributing search on peer-to-peer (P2P) networks based on Content-addressable Network (CAN) <ref type="bibr" target="#b15">[16]</ref>. M-CAN <ref type="bibr" target="#b4">[5]</ref> uses a pivot-based method to map images from the metric space to a low dimensional vector space. RT-CAN <ref type="bibr" target="#b17">[18]</ref> implements a variational R-tree on top of CAN using low dimensional data (e.g. five dimensions). <ref type="bibr" target="#b9">[10,</ref><ref type="bibr" target="#b11">12,</ref><ref type="bibr" target="#b19">20]</ref> build the nearest neighbors search on top of distributed computing framework MapReduce <ref type="bibr" target="#b3">[4]</ref> for low dimensional datasets (data with no more than 30 dimensions).</p><p>[10] constructs a multi-dimensional index using R-tree. <ref type="bibr" target="#b11">[12]</ref> uses a Voronoi diagram-based partitioning to assign objects. <ref type="bibr" target="#b19">[20]</ref> maps data into one dimension using space-filling curves and transforms KNN joins into one-dimensional range searches. Although these low dimensional approaches can do fast search in large scale data sets, they cannot achieve precise search results. For high dimensional datasets, there are three major approaches. The first one is Bag-of-features approach <ref type="bibr" target="#b7">[8,</ref><ref type="bibr" target="#b12">13,</ref><ref type="bibr" target="#b18">19]</ref>, in which each image is represented as a histogram of occurrences of selected features ("visual words") and search is done by using an Inverted Index structure. Works belonging to this approach all use traditional horizontal cut scheme: each server stores and indexes a part of the dataset. We believe that our VertiCut can also achieve a better scalability for this approach. The second one is distributed KD-tree approach. <ref type="bibr" target="#b1">[2]</ref> gives an implementation on MapReduce in which a master stores the root of the tree, while multiple leaf machines store the rest. When a query comes, the master forwards the query to a subset of the leaf machines. Unfortunately, this approach has high update cost: each time adding or removing an image, it needs to rebuild the tree. The third one is multiple index hashing approach. <ref type="bibr" target="#b14">[15]</ref> provides a distributed scheme for MIH algorithm which stores different index hash tables to different machines. <ref type="bibr" target="#b16">[17]</ref> uses the family of LSH functions based on p-stable distributions to conduct multiple hash tables and distributes them using MapReduce. As explained before, this approach is not practical due to its large communication cost.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="6">Conclusions</head><p>With the rapid growth of multimedia information, multimedia retrieval has become more and more popular in the recent years. How to effectively distribute the search for the increasing huge data collections has become an important challenge with immediate practical implications. In this paper, we present a fast high-dimensional multimedia search engine VertiCut based on the high performance computing network Infiniband to address this challenge. Experiments show that our design can achieve a better scalability and lower response latency, which makes the multimedia retrieval simpler and more practical in reality.</p></div><figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_0"><head>Figure 2 :</head><label>2</label><figDesc>Figure 2: Multiple index hash tables</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_1"><head>Figure 3 :</head><label>3</label><figDesc>Figure 3: System Architecture</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_2"><head>Figure 4 :</head><label>4</label><figDesc>Figure 4: The latency of a query and its network cost (in terms of bytes sent per query) with the number of servers increases.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_3"><head>Figure 5 :</head><label>5</label><figDesc>Figure 5: The latency of a query and its network cost as a function of k (the required number of neighbors return).</figDesc></figure>
		</body>
		<back>

			<div type="acknowledgement">
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="7">Acknowledgments</head><p>This work is partially supported by the National High Technology </p></div>
			</div>

			<div type="references">

				<listBibl>

<biblStruct xml:id="b0">
	<analytic>
		<title level="a" type="main">FaRM: Fast remote memory</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Aleksandar</forename><surname>Dragojevi</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><forename type="middle">N</forename><surname>And</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Castro</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">USENIX Networked Systems Design and Implementation (NSDI</title>
		<imprint>
			<date type="published" when="2014" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b1">
	<analytic>
		<title level="a" type="main">Distributed kd-trees for retrieval from very large image collections</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Aly</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Munich</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>And</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Perona</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the British Machine Vision Conference (BMVC</title>
		<meeting>the British Machine Vision Conference (BMVC</meeting>
		<imprint>
			<date type="published" when="2011" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b2">
	<monogr>
		<title level="m" type="main">Achieving rapid response times in large online services. Berkeley AMP Lab Talk</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Dean</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename></persName>
		</author>
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b3">
	<analytic>
		<title level="a" type="main">Simplified data processing on large clusters</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Dean</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>And</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Ghemawat</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Mapreduce</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Commun. ACM</title>
		<imprint>
			<biblScope unit="volume">51</biblScope>
			<biblScope unit="page" from="107" to="113" />
			<date type="published" when="2008-01" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b4">
	<analytic>
		<title level="a" type="main">A contentaddressable network for similarity search in metric spaces</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Falchi</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">F</forename><surname>Gennaro</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><surname>And</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Zezula</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of conference on Databases, Information Systems, and Peerto-Peer Computing</title>
		<meeting>conference on Databases, Information Systems, and Peerto-Peer Computing</meeting>
		<imprint>
			<date type="published" when="2007" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b5">
	<analytic>
		<title level="a" type="main">Approximate nearest neighbors: Towards removing the curse of dimensionality</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Indyk</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><surname>And</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Motwani</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 30th Annual ACM Symposium on Theory of Computing (STOC</title>
		<meeting>the 30th Annual ACM Symposium on Theory of Computing (STOC</meeting>
		<imprint>
			<date type="published" when="1998" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b6">
	<analytic>
		<title level="a" type="main">Searching in one billion vectors: Re-rank with source coding</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Jegou</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">H</forename><surname>Tavenard</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Douze</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>And</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Amsaleg</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">L</forename></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">IEEE International Conference on Acoustics, Speech and Signal Processing</title>
		<imprint>
			<date type="published" when="2011" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b7">
	<analytic>
		<title level="a" type="main">Learning to distribute vocabulary indexing for scalable visual search</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><forename type="middle">I</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Duan</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">L.-Y</forename><surname>Chen</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Xie</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">L</forename><surname>Yao</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">H</forename><surname>And</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Gao</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">W</forename></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE Transactions on Multimedia</title>
		<imprint>
			<biblScope unit="volume">15</biblScope>
			<biblScope unit="issue">1</biblScope>
			<biblScope unit="page" from="153" to="166" />
			<date type="published" when="2013-01" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b8">
	<analytic>
		<title level="a" type="main">On the feasibility of peer-topeer web indexing and search</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">L</forename><forename type="middle">I</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Loo</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">B</forename><forename type="middle">T</forename><surname>Hellerstein</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Kaashoek</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">F</forename><surname>Karger</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>And</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Morris</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 2nd International Workshop on Peer-to-Peer Systems (IPTPS)</title>
		<meeting>the 2nd International Workshop on Peer-to-Peer Systems (IPTPS)</meeting>
		<imprint>
			<date type="published" when="2003-02" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b9">
	<analytic>
		<title level="a" type="main">Multi-dimensional index on hadoop distributed file system</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Liao</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">H</forename><surname>Han</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>And</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Fang</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of IEEE Fifth International Conference on Networking</title>
		<meeting>IEEE Fifth International Conference on Networking</meeting>
		<imprint>
			<date type="published" when="2010" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b10">
	<analytic>
		<title level="a" type="main">Object recognition from local scale-invariant features</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Lowe</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the Seventh IEEE International Conference on Computer Vision</title>
		<meeting>the Seventh IEEE International Conference on Computer Vision</meeting>
		<imprint>
			<date type="published" when="1999" />
			<biblScope unit="volume">2</biblScope>
			<biblScope unit="page" from="1150" to="1157" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b11">
	<analytic>
		<title level="a" type="main">Efficient processing of k nearest neighbor joins using mapreduce</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">L</forename><forename type="middle">U</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">W</forename><surname>Shen</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Y</forename><surname>Chen</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>And</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Ooi</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">B</forename><forename type="middle">C</forename></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. VLDB Endow</title>
		<meeting>VLDB Endow</meeting>
		<imprint>
			<date type="published" when="2012-06" />
			<biblScope unit="volume">5</biblScope>
			<biblScope unit="page" from="1016" to="1027" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b12">
	<analytic>
		<title level="a" type="main">Incremental indexing and distributed image search using shared randomized vocabularies</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Maréemar´marée</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Denis</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><surname>Wehenkel</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">L</forename><surname>And</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Geurts</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the International Conference on Multimedia Information Retrieval (MIR)</title>
		<meeting>the International Conference on Multimedia Information Retrieval (MIR)</meeting>
		<imprint>
			<date type="published" when="2010" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b13">
	<analytic>
		<title level="a" type="main">Using one-sided rdma reads to build a fast, cpu-efficient key-value store</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Mitchell</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><surname>Geng</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Y</forename><surname>And</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">L</forename><forename type="middle">I</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the USENIX Conference on Annual Technical Conference (ATC)</title>
		<meeting>the USENIX Conference on Annual Technical Conference (ATC)</meeting>
		<imprint>
			<date type="published" when="2013" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b14">
	<analytic>
		<title level="a" type="main">Fast search in hamming space with multi-index hashing</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Norouzi</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Punjani</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>And</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Fleet</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">IEEE Conference on Computer Vision and Pattern Recognition (CVPR</title>
		<imprint>
			<date type="published" when="2012" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b15">
	<analytic>
		<title level="a" type="main">A scalable content-addressable network</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Ratnasamy</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Francis</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><surname>Handley</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Karp</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>And</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Shenker</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of conference on Applications, Technologies, Architectures, and Protocols for Computer Communications (SIGCOMM</title>
		<meeting>conference on Applications, Technologies, Architectures, and Protocols for Computer Communications (SIGCOMM</meeting>
		<imprint>
			<date type="published" when="2001" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b16">
	<analytic>
		<title level="a" type="main">Rankreduce processing k-nearest neighbor queries on top of mapreduce</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Stupar</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Stupar</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>And</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Schenkel</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of Workshop on Large-Scale Distributed Systems for Information Retrieval (LSDS-IR)</title>
		<meeting>Workshop on Large-Scale Distributed Systems for Information Retrieval (LSDS-IR)</meeting>
		<imprint>
			<date type="published" when="2010" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b17">
	<analytic>
		<title level="a" type="main">Indexing multi-dimensional data in a cloud system</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Wang</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Wu</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Gao</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">H</forename><surname>Li</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>And</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Ooi</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">B</forename><forename type="middle">C</forename></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the ACM SIGMOD International Conference on Management of Data</title>
		<meeting>the ACM SIGMOD International Conference on Management of Data</meeting>
		<imprint>
			<date type="published" when="2010" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b18">
	<analytic>
		<title level="a" type="main">Distributed image search in camera sensor networks</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Yan</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><surname>Ganesan</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>And</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Manmatha</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 6th ACM Conference on Embedded Network Sensor Systems (SenSys)</title>
		<meeting>the 6th ACM Conference on Embedded Network Sensor Systems (SenSys)</meeting>
		<imprint>
			<date type="published" when="2008" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b19">
	<analytic>
		<title level="a" type="main">Efficient parallel knn joins for large data in mapreduce</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Zhang</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><surname>Li</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">F</forename><surname>And</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Jestes</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 15th International Conference on Extending Database Technology (EDBT</title>
		<meeting>the 15th International Conference on Extending Database Technology (EDBT</meeting>
		<imprint>
			<date type="published" when="2012" />
		</imprint>
	</monogr>
</biblStruct>

				</listBibl>
			</div>
		</back>
	</text>
</TEI>
