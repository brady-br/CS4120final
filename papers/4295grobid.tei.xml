<?xml version="1.0" encoding="UTF-8"?>
<TEI xmlns="http://www.tei-c.org/ns/1.0" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
xsi:schemaLocation="http://www.tei-c.org/ns/1.0 /Users/atharsefid/Desktop/grobid-0.5.3/grobid-home/schemas/xsd/Grobid.xsd"
 xmlns:xlink="http://www.w3.org/1999/xlink">
	<teiHeader xml:lang="en">
		<encodingDesc>
			<appInfo>
				<application version="0.5.3" ident="GROBID" when="2020-09-29T04:10+0000">
					<ref target="https://github.com/kermitt2/grobid">GROBID - A machine learning software for extracting information from scholarly documents</ref>
				</application>
			</appInfo>
		</encodingDesc>
		<fileDesc>
			<titleStmt>
				<title level="a" type="main">Open access to the Proceedings of the 29th USENIX Security Symposium is sponsored by USENIX. Stolen Memories: Leveraging Model Memorization for Calibrated White-Box Membership Inference Stolen Memories: Leveraging Model Memorization for Calibrated White-Box Membership Inference</title>
			</titleStmt>
			<publicationStmt>
				<publisher/>
				<availability status="unknown"><licence/></availability>
				<date>August 12-14, 2020</date>
			</publicationStmt>
			<sourceDesc>
				<biblStruct>
					<analytic>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Klas</forename><surname>Leino</surname></persName>
							<affiliation key="aff0">
								<orgName type="institution" key="instit1">Carnegie Mellon University</orgName>
								<orgName type="institution" key="instit2">Carnegie Mellon University</orgName>
								<orgName type="institution" key="instit3">Carnegie Mellon University</orgName>
							</affiliation>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Matt</forename><surname>Fredrikson</surname></persName>
							<affiliation key="aff0">
								<orgName type="institution" key="instit1">Carnegie Mellon University</orgName>
								<orgName type="institution" key="instit2">Carnegie Mellon University</orgName>
								<orgName type="institution" key="instit3">Carnegie Mellon University</orgName>
							</affiliation>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Klas</forename><surname>Leino</surname></persName>
							<affiliation key="aff0">
								<orgName type="institution" key="instit1">Carnegie Mellon University</orgName>
								<orgName type="institution" key="instit2">Carnegie Mellon University</orgName>
								<orgName type="institution" key="instit3">Carnegie Mellon University</orgName>
							</affiliation>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Matt</forename><surname>Fredrikson</surname></persName>
							<affiliation key="aff0">
								<orgName type="institution" key="instit1">Carnegie Mellon University</orgName>
								<orgName type="institution" key="instit2">Carnegie Mellon University</orgName>
								<orgName type="institution" key="instit3">Carnegie Mellon University</orgName>
							</affiliation>
						</author>
						<title level="a" type="main">Open access to the Proceedings of the 29th USENIX Security Symposium is sponsored by USENIX. Stolen Memories: Leveraging Model Memorization for Calibrated White-Box Membership Inference Stolen Memories: Leveraging Model Memorization for Calibrated White-Box Membership Inference</title>
					</analytic>
					<monogr>
						<title level="m">Proceedings of the 29th USENIX Security Symposium</title>
						<meeting>the 29th USENIX Security Symposium						</meeting>
						<imprint>
							<date type="published">August 12-14, 2020</date>
						</imprint>
					</monogr>
					<note>This paper is included in the 978-1-939133-17-5</note>
				</biblStruct>
			</sourceDesc>
		</fileDesc>
		<profileDesc>
			<abstract>
				<p>Membership inference (MI) attacks exploit the fact that machine learning algorithms sometimes leak information about their training data through the learned model. In this work, we study membership inference in the white-box setting in order to exploit the internals of a model, which have not been effectively utilized by previous work. Leveraging new insights about how overfitting occurs in deep neural networks, we show how a model&apos;s idiosyncratic use of features can provide evidence for membership to white-box attackers-even when the model&apos;s black-box behavior appears to generalize well-and demonstrate that this attack outperforms prior black-box methods. Taking the position that an effective attack should have the ability to provide confident positive inferences, we find that previous attacks do not often provide a meaningful basis for confidently inferring membership, whereas our attack can be effectively calibrated for high precision. Finally, we examine popular defenses against MI attacks, finding that (1) smaller generalization error is not sufficient to prevent attacks on real models, and (2) while small-ε-differential privacy reduces the attack&apos;s effectiveness, this often comes at a significant cost to the model&apos;s accuracy; and for larger ε that are sometimes used in practice (e.g., ε = 16 [43]), the attack can achieve nearly the same accuracy as on the unprotected model.</p>
			</abstract>
		</profileDesc>
	</teiHeader>
	<text xml:lang="en">
		<body>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="1">Introduction</head><p>Many compelling applications of machine learning involve the collection and processing of sensitive personal data, giving rise to concerns about privacy <ref type="bibr" target="#b1">[2,</ref><ref type="bibr" target="#b3">4,</ref><ref type="bibr" target="#b6">7,</ref><ref type="bibr" target="#b9">10,</ref><ref type="bibr" target="#b10">11,</ref><ref type="bibr" target="#b25">26,</ref><ref type="bibr" target="#b32">33,</ref><ref type="bibr" target="#b37">38,</ref><ref type="bibr" target="#b44">45,</ref><ref type="bibr" target="#b45">46]</ref>. In particular, when machine learning algorithms are applied to private training data, the resulting models might unwittingly leak information about that data through their behavior or representation.</p><p>Membership inference (MI) attacks aim to determine whether a given data point was present in the training set used to build a model. This can be a privacy threat in itself, but vulnerability to MI has also come to be seen as a more general indicator of whether a model leaks private information <ref type="bibr" target="#b26">[27,</ref><ref type="bibr" target="#b37">38,</ref><ref type="bibr" target="#b46">47]</ref>, and is closely related to the guarantee provided by differential privacy <ref type="bibr" target="#b25">[26]</ref>.</p><p>To date, most MI attacks follow the so-called shadow model approach <ref type="bibr" target="#b37">[38]</ref>. This approach casts the attack as a supervised learning problem, where the adversary is given a data point and its true label, and aims to predict a binary label indicating membership status. To do so, the adversary trains a set of shadow models to replicate the functionality of the target model, and trains an attack model from data derived from the shadow models' outputs on the points used to train each shadow model and points not previously seen by each shadow model. Subsequently, Nasr et al. extended this attack to the white-box setting <ref type="bibr" target="#b32">[33]</ref> by including activation and gradient information obtained from the target model as features for the attack model. However, Nasr et al. find that a simple extension of the shadow model approach to the white-box setting does not produce an effective attack <ref type="bibr" target="#b32">[33]</ref> (we discuss why in Section 4); thus, their white-box attack deviates from the threat model common to most work on MI, and instead assumes that the adversary already knows a significant portion of the target model's training data. Features to train the attack model are obtained directly from the target model, using the gradients, activations, and outputs obtained by evaluating on known member/non-member points. In this paper, we present an effective white-box MI attack that operates without access to any of the target model's training data. Crucially, our analysis uncovers a more intimate understanding of how overfitting takes place in a model, which we leverage to create our attack.</p><p>Finding Evidence of Membership. In this paper, we take a fresh look at the problem of white-box membership inference. We begin with the intuitive observation that while overfitting leads to privacy issues because the model "memorizes" certain aspects of the training data, this is not necessarily manifested in the model's output behavior. Instead, it is likely to show up in the way that the model uses features-both those that are given explicitly and that are learned in internal layers.</p><p>Intuitively, we posit that idiosyncratic features present in the training data, which are predictive only for the training data but not the sampling distribution, are oftentimes encoded  <ref type="bibr" target="#b24">[25]</ref> for three test instances. The explanations show that the model uses Tony Blair's face to classify these instances, as we might expect. Meanwhile, (c) shows the explanation for the image with the distinctive pink background from the training set, where we see that the model is using the pink background to infer that the image is of Tony Blair.</p><p>in the model during training. Consider the example illustrated by <ref type="figure" target="#fig_0">Figure 1</ref>, in which a model was trained to recognize faces from the Labeled Faces in the Wild (LFW) dataset. <ref type="figure" target="#fig_0">Figure 1a</ref> shows 12 instances sampled from the training set of the model. The top right corner of <ref type="figure" target="#fig_0">Figure 1a</ref> depicts an image of Tony Blair with a distinctive pink background. Supposing that the background is unique to this training instance, an overfit model may use the background as a feature for classifying Tony Blair, identifying the instance as a member of the training set via the uncharacteristic way in which the model correctly labels it. In such a setting, the model's use of the pink background could be viewed as evidence of membership. <ref type="figure" target="#fig_0">Figures 1b and 1c</ref> show this phenomenon on a convolutional neural network trained on this dataset. <ref type="figure" target="#fig_0">Figures 1b and 1c</ref> visualize the regions of the image most influential <ref type="bibr" target="#b24">[25]</ref> towards the classification of "Tony Blair" on three test instances, and on the aforementioned training instance with the pink background. While the model is influenced most by Tony Blair's face for classification on the test instances, on the training instance it relies on the distinctive pink background.</p><p>We show that this evidence-based approach can be used on a variety of real datasets to infer membership, and leverage it to develop a new attack (Sections 3 and 4) that outperforms previous attacks (Section 5).</p><p>Calibrating Confidence. By far the simplest MI attack, which we dub the "naive" attack, follows from the fact that generalization error necessarily leads to membership vulnerability <ref type="bibr" target="#b46">[47]</ref>. Given a data point and its true label, the attacker runs the model and observes whether its predicted label is correct. If it is, then the attacker concludes that the point was in the training data; otherwise, the point is presumed a non-member. Surprisingly, in many cases this works as well as the shadow model attack (Section 5.5, <ref type="figure" target="#fig_0">Figure 10</ref>).</p><p>As a practical attack, the naive method has a significant drawback even when it appears yield reasonable accuracy. Namely, it does not provide the attacker with much confidence about a positive inference: the point may have been a training set member, or it may just have been classified correctly. After all, this is how the model is intended to behave on test points, so it may not be sensible to base a membership inference on a correct prediction result.</p><p>Initially, it may seem that shadow model attacks do not inherit this limitation, as the attack model can be trained to emit a confidence score with its prediction. If this score is well-calibrated, then an attacker could use it to make more confident inferences. Unfortunately, we find shadow attacks are not typically well-calibrated; in fact, <ref type="figure" target="#fig_0">Figure 11</ref> (Section 5.5) shows that raising the confidence threshold for positive prediction sometimes decreases the precision of the attack. In short, like the naive attack, the shadow model attack often produces little consistently useful information to characterize the likelihood that a positive inference is correct.</p><p>We posit that if the adversary confidently identifies even one training point, then it is reasonable to say that a privacy violation occurred. We therefore propose that an effective attack should have the ability to make confident inferences, underscoring the need for attacks with high precision. To this end, we demonstrate that the confidence scores accompanying the inferences made by our attack can be used to accurately calibrate its precision (Section 5.5, <ref type="figure" target="#fig_0">Figure 11</ref>).</p><p>Evaluating Defenses. A number of defenses have been proposed for membership inference. Differential privacy (DP) <ref type="bibr" target="#b7">[8]</ref>, in addition to regularization methods like dropout <ref type="bibr" target="#b40">[41]</ref> in deep nets are two commonly-proposed defenses. While differential privacy gives a theoretical guarantee against membership inference <ref type="bibr" target="#b46">[47]</ref>, a meaningful guarantee-one that bounds the probability of attack success below 1-requires an ε that is considerably smaller than what is often used in practice. Nonetheless, common wisdom conjectures that large-ε-DP may provide a practical defense, particularly if the privacy budget analysis only gives a loose bound on ε.</p><p>Unfortunately, we find that this is not necessarily the case. We test our attack on deep models trained with (ε,δ)-differential privacy using the moments accountant method <ref type="bibr" target="#b0">[1]</ref> (Section 6), and find that training with a large ε sometimes provides little defense against our attack when compared against its effectiveness on non-private models. These results demonstrate that practical MI attacks like the one described in this paper can serve as a heuristic measure to evaluate paramater choices in private learning, while also emphasizing the need for more research in this area.</p><p>Organization. In Section 2, we introduce background on membership inference and machine learning. Section 3 describes the evidence-based attack, beginning in an idealized setting that can be rigorously analyzed to motivate the intuition behind the attack (Section 3.2). Subsequently, we gradually lift the generative assumptions used in this derivation to obtain an attack that works well on real data (Sections 3.3 and 3.4). Section 3.5 discusses calibration, and Section 4 shows how our attack can be extended to deep networks. Section 5 presents our evaluation on both synthetic data and nine real datasets derived from real-world medical and financial data, and common benchmark datasets. Section 6 discusses defenses against MI attacks and tests their efficacy against our attack. Section 7 covers related work, and Section 8 concludes the paper.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2">Background</head><p>Membership inference (MI) attacks aim to determine whether a given data point was present in the dataset used to train a given target model. In this section, we begin by introducing the necessary background needed to formally define membership inference, as well as explicitly defining the threat model used in our analysis.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.1">Supervised Learning and Target Models</head><p>We assume data from some universe</p><formula xml:id="formula_0">U = X × Y ⊂ R n ×[C], drawn from a distribution, D * .</formula><p>Consistent with the typical supervised learning setting, x ∈ X is a vector of n features and y ∈ Y is a label or classification target, corresponding to C distinct classes. Given a loss function, L : X × Y → R, the goal of supervised learning is to construct a model, g, that minimizes L(g(x),y) on future unseen samples, x, drawn from D * . This is achieved by minimizing L(g(x), y) on a finite training set, S, drawn i.i.d. from D * .</p><p>A membership inference attack operates on a particular target model, ˆ g. In this work, we consider target models that are expressed as feed-forward neural networks; i.e., they consist of successive linear transformations, or layers, where each layer, , is parameterized by a matrix of weights and biases W , B , followed by the application of a non-linear activation function.</p><p>Consistent with common practice, we assume that internal layers use the rectified-linear (ReLU) activation: relu(x) = max(0,x). We assume that the final layer has one component for each label in <ref type="bibr">[C]</ref> and uses the softmax activation: softmax(x) j = e x j /∑ i e x i . The use of the softmax function is standard in machine learning for multi-class classification. Models trained in this way produce confidence scores for each label that can be interpreted as probabilities <ref type="bibr" target="#b11">[12]</ref>.</p><p>In the simplest case we consider, the target model consists of a single layer with only the softmax activation, and is a linear softmax regression model. We will sometimes refer to this type of model by its parameterization, ˆ W , ˆ b. Our approach generalizes to deep networks where the target model has multiple successive internal ReLU-activated layers, followed by a single softmax output layer.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.2">Membership Inference</head><p>We adpot a formulation of Membership Inference attacks similar to that of Yeom et al. <ref type="bibr" target="#b46">[47]</ref>. First a value, b, is chosen uniformly at random from {0, 1}. If b = 1, the attacker, A, is then given an instance (x,y) from the general population; otherwise, if b = 0, (x, y) is sampled uniformly at random from the elements of the training set, S, used to generate target model, ˆ g. The attacker then attempts to predict b given (x,y) and some additional knowledge, aux( ˆ g), aboutˆgaboutˆ aboutˆg determined by the threat model (see below).</p><p>Threat Model. Prior work <ref type="bibr" target="#b37">[38,</ref><ref type="bibr" target="#b46">47]</ref> has focused primarily on the so-called black-box model where the adversary has access to D * , the learning algorithm used to producê g (including hyperparameters), the size of the training set, and the ability to queryˆgqueryˆ queryˆg arbitrarily on new points. In practice, having access to D * amounts to knowing a finite data set, ˜</p><formula xml:id="formula_1">S (distinct from S), sampled i.i.d. from D * .</formula><p>In this work, we replace black-box access tô g with white-box access. Rather than only being able to query the target model, the attacker has access to the exact representation ofˆgofˆ ofˆg that was produced by the learning algorithm and used by the model owner to make inferences on new data. For the target models commonly used in practice, e.g. neural networks and linear classifiers, this amounts to a set of floating-point weight matrices and biases, in addition to the linear operators and activation functions used at each layer.</p><p>This threat model reflects the growing number of publiclyavailable models on websites like Model Zoo <ref type="bibr" target="#b20">[21]</ref>, as well as the fact that white box representations may fall into the hands of an adversary via other means (e.g., a security breach). Additionally, even in situations where the requirements for a whitebox attack may not be practical for an adversary, the ability to mount a more powerful attack could be useful for a defender, as it provides a more conservative estimate of the potential threat.</p><p>Metrics. The accuracy of an attack is the probability that A's prediction is equal to b, taken over the randomness of b, (x, y), and A. Because an adversary that guesses randomly achieves 50% accuracy, we will often opt to describe the advantage of an attack <ref type="bibr" target="#b46">[47]</ref>, given by Equation 1 in terms of attack, A. Advantage scales accuracy to the 50% baseline to yield a measure between -1 and 1.</p><formula xml:id="formula_2">advantage(A) = 2Pr A (x,y), aux( ˆ g) = b −1 (1)</formula><p>While advantage is an indicator of the degree to which private information is leaked by the model, it does not necessarily capture the severity of the threat posed to any given individual in the training set. From this perspective, a privacy violation occurs if any of the points can be confidently identified by the adversary-this is arguably a greater threat than if the adversary were to identify every training member with very low confidence. Thus, we also consider precision (Equation 2) as a key desideratum for the attacker. In order for an attacker to reach confident inferences, precision must be appreciably greater than 1/2. If no points are predicted to be members, we define precision to be 1/2.</p><formula xml:id="formula_3">precision(A) = Pr b = 1|A (x,y), aux( ˆ g) = 1<label>(2)</label></formula><p>Finally, we include recall (Equation 3) as a metric in our evaluation as it has been reported in prior work. However, we place less emphasis on this metric, as an attack with high recall is not necessarily effective in practice if it fails to return confident inferences on any points. For example, an adversary that simply predicts that all points are members achieves perfect recall, yet this clearly does not constitute a practical attack.</p><formula xml:id="formula_4">recall(A) = Pr A (x,y), aux( ˆ g) = 1|b = 1 (3)</formula><p>Logistic Attack Models. In the interest of achieving good precision, we consider attacks that yield confidence scores with their predictions. Thus, we can think of membership inference as a binary logistic regression <ref type="bibr" target="#b31">[32]</ref> problem, in which a logistic (sigmoid) function models confidence with respect to the binary dependent variable (i.e., membership or non-membership). The sigmoid function, ¯ s, is is given by ¯ s (x) = 1 1+e −x , and can be thought of as converting the log-odds of the dependent variable to a probability. The use of the sigmoid function for binary classification is standard in machine learning, and has been applied in prior membership inference attacks as well <ref type="bibr" target="#b37">[38]</ref>.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3">White-box Membership Inference</head><p>In this section, we introduce our core membership inference attack. Starting in an idealized setting where the exact data distribution is known and the model is linear, we proceed by deriving the Bayes-optimal logistic attack model (Section 3.2). We show that when the data-generating assumptions hold, the confidence scores produced by this attack correspond to the true membership probability, and can thus be used for effective, accurate calibration towards high-precision attacks. Using the insights gained from this analysis, we then show how to generalize the attack to settings where the data-generating distribution is unknown or does not match our theoretical assumptions (Sections 3.3 and 3.4), and discuss calibration in this setting (Section 3.5). In Section 4 we extend the attack to deep models.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.1">Overview of the attack</head><p>Our attack works from the intuition that when models overfit to their training data, they potentially leak membership information through anomalous behavior at test time. However, while this behavior may manifest itself in the form of prediction errors on unseen points, this need not be the case, and a more nuanced look at how memorization occurs yields new insights that can be used in an attack.</p><p>Models use features to distinguish between classes, and while some features may be truly discriminative (i.e., function as good predictors on unseen data), others may be discriminative only on the particular training set merely by coincidence.</p><p>When the model applies features of the latter type to make a prediction, this can be thought of as "evidence" of overfitting regardless of whether the prediction is correct; the salience of a feature coincidental to the training data is suggestive on its own. Similarly, there may be features that are discriminative on the data in general, but not on the training data.</p><p>For example, consider a hypothetical model trained to recognize celebrity faces. Suppose that in reality, each celebrity is wearing sunglasses in 10% of his or her respective pictures, so the presence of sunglasses is not an informative feature for this task. However, if the training data used to construct the model contained images of a particular subject wearing sunglasses with greater frequency, say 30%, then the model might learn a feature that detects sunglasses in an internal layer, and weight this feature towards prediction of that subject. Knowing that the presence of sunglasses is not predictive of identity on the true distribution, an attacker would infer that, all else being equal, a picture of this subject wearing sunglasses is more likely to be a training set member.</p><p>While this may not be conclusive evidence of membership, it can be aggregated with other aspects of the model's behavior on an instance to make a final determination with greater confidence than would be possible using only black-box information. To see why this is the case, consider that another model trained on a different sample, e.g. one that reflects a "normal" frequency of subjects wearing sunglasses, may learn to make the same numerical predictions using a different set of features. A black-box attacker would be unable to distinguish these cases, and thus be deprived of the feature-based evidence available through an examination of the model's use of internal features.</p><p>This example highlights the intuition that membership information is leaked via a target model's idiosyncratic use of features. Essentially, features that are distributed differently in the training data from how they are distributed in the true distribution can provide evidence either for or against membership. Our attack works by deriving a set of parameters that profile idiosyncratic feature use, which are then used to construct a logistic attack model.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.2">A Bayes-Optimal Attack</head><p>To motivate this intuition more formally, we begin by showing how to mount this evidence-based attack in an idealized setting where data is distributed according to a known distrubution. This provides a simpler illustration of the central ideas used in our later attack, where we do not make explicit assumptions about the data distribution. We show that the attack in this setting leads to Bayes-optimal membership predictions on points from that distribution, which suggests that even when the strict assumptions made here are violated, the approach may nonetheless be a strong heuristic even if it cannot be proved optimal.</p><p>Generative Assumptions. Recall the setting described in Section 2: a model, ˆ g, trained on S ∼ D * , and an adversary that leverages white-box access tô g to create an attack model, m, <ref type="figure">Figure 2</ref>: Example of two Gaussian distributions, η * andˆηandˆ andˆη. The point x has a higher probability of being generated byˆηbyˆ byˆη than by η * . Given a prior probability of <ref type="bibr" target="#b0">1</ref> 2 for being drawn from either distribution, the decision boundary for predicting which distribution a given point was drawn from would be at the intersection of the two curves, and x would be predicted to have been drawn fromˆηfromˆ fromˆη.</p><formula xml:id="formula_5">x x P(x) η * ˆ η</formula><p>that predicts whether an instance, (x,y) ∈ U, belongs to S. We show how the example above can be extended to this setting by introducing some assumptions aboutˆgaboutˆ aboutˆg and D * . First we assume that D * is given by parameters, µ * y , Σ * , and p * = (p * 1 ,..., p * C ), such that the labels, y, are distributed according to a Categorical distribution with parameter p * , and the features, x, are multivariate Gaussians with mean µ * y for each label y, and covariance matrix, Σ * .</p><formula xml:id="formula_6">y ∼ Categorical(p * ) x ∼ N (µ * y ,Σ * )<label>(4)</label></formula><p>Furthermore, assume that Σ * is a diagonal matrix, i.e., the distribution of x satisfies the naive-Bayes assumption of the features being independent conditioned on the class. We will therefore write Σ * j j as σ * 2 j .</p><p>Recall that S is drawn i.i.d. from D * , so its samples are also distributed according to Equation 4. However, the empirical means and variance of S will not match those of D * exactly, except in expectation. Therefore, we denote byˆDbyˆ byˆD the empirical distribution of the training data, S. LetˆpLetˆ Letˆp be the empirical class prior for S, ˆ µ y be the empirical mean of the features in S with class y, andˆΣandˆ andˆΣ be the empirical covariance matrix of the features in S. We make the analogous assumption thatˆΣthatˆ thatˆΣ is a diagonal matrix, and that the empirical distribution function can be modeled as a normal distribution, N (ˆ µ, ˆ Σ). Intuitively, we can now think of m as determining whether (x,y) is more likely to have been drawn fromˆDfromˆ</p><formula xml:id="formula_7">fromˆD (i.e., (x,y) ∈ S), or D * .</formula><p>If we momentarily assume that the attacker knows D * and ˆ D, then we can proceed to derive an attack model purely in terms of their respective parameters, namely µ * y , ˆ µ y , Σ * , andˆΣandˆ andˆΣ.</p><p>Attack Model. Consider two Gaussian distributions,</p><formula xml:id="formula_8">η * = N (µ * , σ * ) andˆηandˆ andˆη = N (ˆ µ, ˆ σ). For x ∈ R,</formula><p>x is more likely to have been generated byˆηbyˆ byˆη than by η * when</p><formula xml:id="formula_9">N (x | ˆ µ, ˆ σ) &gt; N (x | µ * , σ * )</formula><p>. An example of this is shown pictorially in <ref type="figure">Figure 2</ref>. Assuming a prior probability of 1/2 for being drawn from either distribution, we could construct a simple model that predicts whether x was drawn fromˆηfromˆ fromˆη rather than η * by solving for x in this inequality. When the variances, σ * andˆσandˆ andˆσ, are the same, this produces a linear decision boundary as a function of µ * − ˆ µ and σ * . Our setting is more complicated than this simple Gaussian example, but as we demonstrate below, the same principle can be applied to mount an attack. Let (X, Y ) be random variables drawn from eitherˆDeitherˆ eitherˆD or D * (as defined above), with probability t of drawing fromˆDfromˆ fromˆD. Let T be the event (X,Y ) ∈ S, i.e., that a point drawn according to this process was in the training set. Thus, Pr <ref type="bibr">[T ]</ref> =t. In keeping with the MI definition presented in Section 2, we will assume that t = 1 2 . We want an attack model, m y (x), to give us the probability that point (x,y) is a member of the training set, S.</p><p>Because we know t and the parameters of D * andˆDandˆ andˆD, we can derive an estimator for this quantity by applying Bayes' rule and algebraically manipulating the result to fit a logistic function of the log odds. We then make use of the naive-Bayes assumption, allowing us to write the probability of observing x given its label as the product of the probabilities of observing each of x's features independently. The result is linear in the target feature values whenˆσwhenˆ whenˆσ = σ * , as detailed in Theorem 1. The proof for Theorem 1 is given in Appendix A.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Theorem 1 Let x and y be distributed according to D * , given</head><p>by Equation 4 with parameters (p * ,µ * y ,Σ * ), and S be drawn i.i.d.</p><formula xml:id="formula_10">from D * , with empirical distribution function, ˆ D, modeled as y ∈ S ∼ Categorical( ˆ p), x ∈ S ∼ N (ˆ µ y , ˆ Σ). Further, assume thatˆΣthatˆ thatˆΣ = Σ * is diagonal andˆpandˆ andˆp = p * .</formula><p>Then the Bayes-optimal predictor for membership is given by Equation 5.</p><formula xml:id="formula_11">m y (x) = ¯ s w yT x+b y<label>(5)</label></formula><p>where</p><formula xml:id="formula_12">w y = ˆ µ y −µ * y σ 2 b y = ∑ j µ * 2 y j − ˆ µ 2 y j 2σ 2 j</formula><p>Notice that the magnitude of the attack model weights given in Theorem 1 is large only on features whose mean on the training data differs significantly from its mean in the distribution, D * , relative to that feature's variance. This is a manifestation of the intuition described in the previous section, as the attack model effectively treats those features as its primary "evidence" for deciding membership. We also point out that the attack model detailed in Theorem 1 defines a different set of parameters for each class label, y. This follows from the generative assumptions, as each class may have a distinct mean, and thus must be distinguished using separate critera. As a practical matter this is not an impediment, as our setting assumes that the true class label is given to the adversary, so there is no ambiguity as to which set of parameters should be applied.</p><p>Summary. Features that are more likely in the empirical training distribution, ˆ D, than in the true "general population" distribution, D * , serve as evidence for membership. <ref type="bibr">Theorem 1</ref> shows how this evidence can be compiled into a linear attack model, w y ,b y , that achieves Bayes-optimality for membership inference when both distributions are known precisely. In Section 3.3, we show how to obtain approximate values for w y and b y when the distributions are unknown.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>USENIX Association</head><p>29th USENIX Security Symposium 1609</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.3">Obtaining MI Parameters from Proxy Models</head><p>In practice, it is unrealistic to know the exact parameters defining the distributions D * andˆDandˆ andˆD. In particular, our threat model assumes that the attacker has no a priori knowledge of the parameters ofˆDofˆ ofˆD or the elements of S, only that S was drawn from D * . While we assume white-box access to the target model, ˆ g, we cannot expect that it will explicitly modeîmodeî </p><formula xml:id="formula_13">D; indeed,</formula><formula xml:id="formula_14">proxy dataset, ˜ S, which is drawn i.i.d. from D * (but distinct from S)</formula><p>to train a proxy model, ˜ g, which is then compared withˆg withˆ withˆg. To control for differences in the learned weights resulting from the learning algorithm, rather than from differences betweenˆDbetweenˆ betweenˆD and D * , the proxy model is trained using the same algorithm and hyperparameters asˆgasˆ asˆg (note that this information is assumed to be known in our threat model). This process can be repeated on many different˜Sdifferent˜ different˜S, using bootstrap sampling when the available data is limited.</p><p>In more detail, we continue with the assumption that data is generated according to Equation 4. Note that our target is a linear model, ˆ W , ˆ b, that minimizes 0-1 loss on S for the predictions given by argmax c∈ <ref type="bibr">[C]</ref> </p><formula xml:id="formula_15">{softmax( ˆ W T x + ˆ b) c }.</formula><p>This is a convex optimization problem that, under our generative assumptions, is minimized whenˆWwhenˆ whenˆW andˆbandˆ andˆb are given by Equation 6 1 .</p><formula xml:id="formula_16">ˆ W jy = ˆ µ y j ˆ σ 2 j ˆ b y = ∑ j −ˆ µ 2 y j 2 ˆ σ 2 j +log( ˆ p)<label>(6)</label></formula><p>Plugging this, and the analogous equation for the proxy model, ˜ W , ˜ b, into Equation 5 from Theorem 1, we see that the weights and biases of the attack model m y are approximated by w y ≈ ˆ W :y − ˜ W :y and b y ≈ ˆ b y − ˜ b y respectively, assuming that˜µthat˜ that˜µ ≈ µ * . This is summarized in Observation 1, which leads to a natural attack as shown in Algorithm 1. We call this the bayes-wb attack. </p><p>where</p><formula xml:id="formula_18">w y = ˆ W :y − ˜ W :y b y = ˆ b y − ˜ b y</formula><p>Notice that Observation 1 gives the weights and biases of m y in terms of only the observable parameters of the target and proxy 1 see Murphy, Slide 20 <ref type="bibr" target="#b30">[31]</ref> for details.</p><p>Algorithm 1: The Linear bayes-wb MI Attack</p><formula xml:id="formula_19">def createAttackModel ( ˆ g, ˜ S): ˜ g ← trainProxy( ˜ S) w y ← ˆ g.W :y − ˜ g.W :y ∀y ∈ [C] b y ← ˆ g.b :y − ˜ g.b :y ∀y ∈ [C] return λ(x,y) : ¯ s w yT x+b y def predictMembership (m, x, y): return 1 if m y (x) &gt; 1 2 else 0 ˆ W : ˆ W i ˜ W : ˜ W i x : d f W : W i , ¯ s</formula><p>Figure 3: Illustration of the generalized attack model. A learned displacement function, d, is applied element-wise to the weights of the target and proxy model to produce attack model weights,W . The inner product ofW and x is then used to make the membership prediction. Not pictured: d is also applied to the biases, ˆ b and˜band˜ and˜b, to produce b, which is added to the result of the inner product. models. This is therefore possible even when the distributions, D * andˆDandˆ andˆD, are unknown. Furthermore, while Observation 1 is derived and stated using relatively strong generative assumptions, we find in Section 5 that this attack is nevertheless often effective when these assumptions do not hold. In Section 3.4 we show how to further relax these generative assumptions.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.4">Learning to Generalize to Arbitrary Distributions</head><p>One way of viewing the bayes-wb attack is that it weights membership predictions by measuring a sort of displacement between the weights of the target model and the ideal weights of the true distribution as approximated by the proxy model. Let d f : R×R → R be a displacement function that is applied element-wise to the weights of the model -for vectors x and y, let D(x,y) = (d f (x 1 ,y 1 ),...,d f (x n ,y n )). We can express the bayes-wb attack via a such a displacement function, namely,</p><formula xml:id="formula_20">w y = D( ˆ W :y , ˜ W :y ) and b y = D( ˆ b y , ˜ b y ), by letting d f (x,y) = x−y, i.e.</formula><p>, by setting D to be element-wise subtraction.</p><p>As per Observation 1, element-wise subtraction is optimal for membership inference under the Gaussian naive-Bayes assumption, but it may be that for other distributions, a different displacement function is more appropriate. More generally, we can represent the displacement function as a neural network, and train it using whatever data is at hand. </p><formula xml:id="formula_21">for i ∈ [N] dõdõ S 1 i , ˜ S 0 i ← split i ( ˜ S) ˇ g i ← trainShadow( ˜ S 1 i ) ˜ g i ← trainProxy( ˜ S 0 i ) T ← ( ˇ g i .W :y , ˜ g i .W :y , ˇ g i .b y , ˜ g i .b y , x, ) ∀(x,y )∈ ˜ S i :y =y, ∀y∈[C], ∀∈{0,1}, ∀i∈[N] D ← argmin D E ( ˆ w, ˜ w, ˆ b, ˜ b,x,)∈T L(¯ s(D ( ˆ w, ˜ w) T x+D ( ˆ b, ˜ b)),) ˜ g ← trainProxy( ˜ S) return λ(x,y) : ¯ s D( ˆ g.W :y , ˜ g.W :y ) T x+D( ˆ g.b y , ˜ g.b y ) def predictMembership (m, x, y): return 1 if m y (x) &gt; 1 2 else 0</formula><p>initial layer has a kernel size and strides of 2 (i.e., the kernel is applied to one element ofˆWofˆ ofˆW :y and one element of˜Wof˜ of˜W :y ), and subsequent layers have a kernel size and stride of 1. In order to learn the weights of D, we partitioñ S into an "in" dataset, ˜ S 1 , and an "out" dataset, ˜ S 0 . We train a shadow target model, ˇ g, oñ S 1 and a proxy model, ˜ g, oñ S 0 . We then create a labeled dataset, T , where the features are the weights and biases ofˇgofˇ ofˇg, the weights and biases of˜gof˜ of˜g, and x; and the labels are 1 for x belonging tõ S 1 and 0 for x belonging tõ S 0 . Finally we train to find the parameters to D that minimize the 0-1 loss, L, of the general-wb attack on T . We can increase the size of T to improve the generalization of the attack by repeating over multiple in/out splits of˜Sof˜ of˜S. This procedure is described in Algorithm 2.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.5">Calibrating for Precision</head><p>Recall the "naive" attack that predicts that an instance, x, is a member of the training set if and only if x was classified correctly. In practice, this naive approach is not a pragmatic attack because, while it will achieve advantage equal to the target model's generalization error (and close to that of prior blackbox approaches <ref type="bibr" target="#b37">[38]</ref>), the only way to evaluate the confidence of the inference is to use the target model's own confidence score. As most neural networks are not well-calibrated <ref type="bibr" target="#b12">[13]</ref>, this makes it difficult to form confident inferences. On the other hand, the derivation in Section 3.2 suggests a direct probabilistic interpretation of the attack model's output. While the maximum likelihood estimator, which predicts x is a member of the training set when Pr[T | X = x,Y = y] &gt; 1 2 , maximizes accuracy, the precision, and therefore confidence in positive inferences, is increased by increasing the decision threshold above <ref type="bibr" target="#b0">1</ref> 2 . Under the Gaussian Naive Bayes assumption, the probability given by m is exact, and there is no issue with calibration by this approach. As a matter of practice, there are two main concerns. First, the training set is finite, so the recall will drop to zero at some point as the threshold is raised for greater precision. Second, if the generative assumptions are violated, Algorithm 3: Calibrating the Decision Threshold def calibrateThreshold (m, ˜ S, α):</p><formula xml:id="formula_22">˜ S ← sample( ˜ S) ˜ P y ← [m y (x ) for (x ,y ) ∈ ˜ S : y = y] ∀y ∈ [C] τ y ← sort( ˜ P y ) α|˜Pα|˜ α|˜P y | ∀y ∈ [C] return τ def predictMembership (m, x, y, τ): return 1 if m y (x) &gt; τ y else 0</formula><p>the confidence may not correspond to an exact probability. We must therefore be careful when selecting a decision threshold. Calibrating the decision threshold for the desired precision/recall trade-off requires access to the training set, S. However, the attack model is obtained using˜Susing˜ using˜S, which is disjoint from S. Instead, we can stipulate that the elements of˜Sof˜ of˜S are to be classified as non-members for the purpose of calibration, and use the following heuristic: given a false-positive tolerance parameter α, set the threshold τ y for each class y as the α th -percentile confidence score of a sample of˜Sof˜ of˜S belonging to class y. This is detailed in Algorithm 3. In Section 5.5, we show that this heuristic consistently increases the precision of our attack on real data.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4">Membership Inference in Deep Models</head><p>We showed how to approximate the Bayes-optimal estimator for membership prediction using the weights of a linear target and proxy model in Section 3.3. In this section, we extend the same reasoning to deep models. However, as deep networks learn novel intermediate representations, the semantic meaning of an internal feature at a given index-i.e., the data characteristic that it associates with-will not necessarily line up with the semantic meaning of the corresponding internal feature in another model <ref type="bibr" target="#b2">[3,</ref><ref type="bibr" target="#b47">48]</ref>. This holds even when the models share identical architectures, training data, and hyper-parameters, as long as the randomization in the gradient descent is unique. In general, the only features for which two models will necessarily agree are the models' inputs and outputs, as these are not defined by the training process.</p><p>This poses a challenge for any white-box attack that attempts to extend the "shadow model" approach <ref type="bibr" target="#b37">[38]</ref> developed for black-box membership inference. Consider such an approach, which learns properties of internal features that indicate membership-involving activations, gradients, or any other quantity-from shadow models. Any such property must make reference to specific internal features within the shadow model, but even if the target model contains internal features that match these properties, they are unlikely to reside at exactly the same location within the network as they do in the shadow model. This is why previous white-box attacks <ref type="bibr" target="#b32">[33]</ref> require large amounts of the target model's training data; rather than learning attack models from shadow models, they are forced to learn them from the target model itself and its training data.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>USENIX Association 29th USENIX Security Symposium 1611</head><p>Algorithm 4: The Deep bayes-wb MI Attack</p><formula xml:id="formula_23">def createAttackModel ( ˆ g• ˆ h, ˜ S): ˜ S ← [( ˆ h(x),y) for (x,y) ∈ ˜ S] ˜ g ← trainProxy( ˜ S ) w y ← λ(z) : χ( ˆ g• ˆ h,P z 0 ) y −χ( ˜ g• ˆ h,P z 0 ) y ∀y ∈ [C] b y ← ˆ g(0) y − ˜ g(0) y ∀y ∈ [C] return λ(x,y) : ¯ s w y ( ˆ h(x)) T ˆ h(x)+b y def predictMembership (m, x, y): return 1 if m y (x) &gt; 1 2 else 0</formula><p>To circumvent this limitation, one must either construct a mapping between internal features in the shadow and target models, or fix the feature representation in the shadow model to preserve semantic meaning between the two. In this section, we show how to accomplish the latter by constructing a series of local linear approximations of the network (Section 4.1), one for each internal layer, that operate on the feature representation of the target model. Because each approximation is linear, we can apply any of the attacks from Section 3 to each approximation, and combine the results (Section 4.2) to form an attack model for the full network.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.1">Local Linear Approximations of Deep Models</head><p>We define a local linear approximation in terms of a slice, g,h, which decomposes a deep network, f , into two functions, g and h, such that f = g • h. Intuitively, a slice corresponds to a layer, , of the network, where h computes the features that are input to layer , and g computes the output of the model from these features.</p><p>For the slice at the top layer of the network, g is simply a linear model acting on features computed by the rest of the model. In this case no local approximation is needed and the bayes-wb (Algorithm 1) and general-wb (Algorithm 2) attacks can by applied directly to g using internal features that are precomputed by h.</p><p>For slices lower in the network, g is no longer linear, but we can approximate the way in which g makes use of its features at a particular point by constructing a linear model that agrees with it at that point. To do this, we make use of an influence measure over the inputs of g to its computed output for each point. Given a model, f , a point, x, and feature, j, the influence χ j ( f ,x) of x j on f is a quantitative measure of x j 's contribution to the output of f . A growing body of work on influence measures <ref type="bibr" target="#b24">[25,</ref><ref type="bibr" target="#b39">40,</ref><ref type="bibr" target="#b41">42]</ref> provides several choices for χ, each with different properties.</p><p>For this approximation, we propose using an influence measure that (1) works on internal features, (2) weights features according to their individual marginal contribution to the model's output, (3) satisfies linear agreement, and (4) is efficient with respect to a chosen baseline. Linear agreement requires that when f is linear, the influence of feature x j is simply the corresponding weight, W j . Thus, the influence measure generalizes the notion of weights in a linear model, and we can use the influence of a feature in place of the corresponding weight in Equation 7, while obtaining the same result. However, in order for this substitution to work at a particular internal point, z = h(x), we also require that g(z) = ¯ W T x z+ ¯ b, where ¯ W x captures how each of the features, z j , are used to obtain the model's output, which is semantically meaningful, at point, x. This follows if χ is efficient with respect to a baseline point z 0 , as defined in Equation 8.</p><formula xml:id="formula_24">∑ j χ j (g•h,z)(z j −z 0 j ) = g(z)−g(z 0 )<label>(8)</label></formula><p>When <ref type="formula" target="#formula_24">(8)</ref> holds, we can set z 0 to zero to arrive at the desired local linear approximation, noting that efficiency with respect to the zero baseline implies g(z) = χ(g•h,z) T z+g(0). The unique influence measure satisfying the first three properties is internal influence <ref type="bibr" target="#b24">[25]</ref>, given by Equation 9. Note that rather than operating on a single point, this measure operates over a distribution of interest, P, which specifies a distribution of points in the model's latent space, z = h(x).</p><formula xml:id="formula_25">χ j (g•h,P) = z∈h(X ) ∂g ∂z j z P(z)dz<label>(9)</label></formula><p>When we set P to the uniform distribution over the line from a baseline z 0 to z, denoted P z z 0</p><p>, then this measure also satisfies efficiency in exactly the manner described above. We can therefore locally approximate g at z as ¯ g(z) = ¯ W T x z+ ¯ b, where ¯ W x = χ(g•h,P z 0 ) and b = g(0). Thus, we can apply the attacks in Algorithm 1 and Algorithm 2 (Section 3) on an arbitrary layer of a deep network, by locally approximating the remainder of the network as a linear model at each point the attack is applied to. Note that this gives a separate set of weights for each input, x (hence why we call the approximation "local"); however, our attacks are parametric in the weights of the target model, so only a single attack model is necessary. The modification of Algorithm 1 for an arbitrary slice, ˆ g, ˆ h, of a target deep network, ˆ f , is detailed in Algorithm 4. An analogous modification of Algorithm 2 follows as well, by simply replacing each reference to weights with influence measurements, but is omitted for the sake of brevity.</p><p>Summary. We can generalize the attacks given by Algorithms 1 and 2 to apply to an arbitrary layer of a deep target network by replacing the weights with their natural generalization, influence. Because influence allows us to create a faithful local linear approximation of the model for any given point, this generalized attack follows from the same analysis on linear models from Section 3. In Section 4.2, we suggest a method for combining attacks on each individual layer to create an attack that utilizes white-box information from all the layers of a deep network.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.2">Combining Layers</head><p>The results of Section 4.1 allow us to leverage overfitting in each learned representation employed by the target model towards membership inference. Attacks on different layers may pick up on different signals, but because the model's internal representations are not independent across layers, we cannot simply concatenate the approximated weights of each layer and treat it as an attack on a single model. Instead, we make use of a meta model, which learns how to combine the logistic outputs of the individual layer-wise attacks. The meta model takes the confidences of the attack defined in Section 4.1 applied to each layer, and outputs a single decision.</p><p>To train a meta model, m , to attack target model, f , we partitioñ S into two parts, ˜ S 1 and˜Sand˜ and˜S 0 . We train a shadow target model, ˇ f , oñ S 1 . Then, for each layer, , in f , we train an attack model, m , on the th layer ofˇfofˇ ofˇf , as described in Section 4.1. We then construct a training set,</p><formula xml:id="formula_26">T = T 1 ∪ T 0 , such that (x ,y ) ∈ T 1 is constructed as (x ,y ) = (m y (x),1) for (x,y) ∈ ˜ S 1 , and (x , y ) ∈ T 0 is constructed as (x , y ) = (m y (x), 0) for (x,y) ∈ ˜ S 0 .</formula><p>We can increase the size of T by creating multiple random partitions of˜Sof˜ of˜S. Finally, we train m on T .</p><p>When building a meta model for the general-wb attack, we can train m jointly with the displacement metric, d, rather than first learning a general-wb attack on each layer. We also use a separate distance metric, d for each layer, , of f .</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5">Evaluation</head><p>In this section, we aim to answer several questions about the attacks described in Sections 3 and 4 using empirical results on several real and synthetic datasets. Section 6 presents additional experimental results having to do with the efficacy of several popular defenses against our attacks.</p><p>How sensitive are our attacks to the data assumptions made in Section 3, hyperparameter choices, and amount of data? In Section 5.2, we find that the learning-based attack described in Section 3.4 (general-wb) recovers nearly all of the advantage of the optimal "omniscient" attack, despite making no generative assumptions. Additionally, we show how the hyperparameters used in this attack can be effectively tuned using validation data. Finally, Section 5.3 discusses attack performance as more or less data is available both for training and to the attacker.</p><p>Do certain layers leak more training information than others? Section 5.4 explores the effectiveness of the meta attack model described in Section 4.2 at combining predictions from attacks on each layer of the model. Our results show that while all layers play a role in leaking information, in some cases attacks which use combined information from different layers have greater efficacy than the corresponding sum of layer-wise independent attacks.</p><p>Relative to prior attacks on real data: (1) are the bayeswb and general-wb attacks more effective in terms of overall accuracy? (2) does the calibration step (Section 3.5) consistently lead to more confident inferences? (3) do our attacks work on well-generalized models? Our results in Section 5.5 indicate that bayes-wb and general-wb improve on the performance of prior black-box attacks, both in terms of accuracy and to a larger extent precision. Moreover, even on models low generalization error (&lt; 2%), our attack can be calibrated make high-confidence inferences, which we find is not possible with prior approaches.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5.1">Experimental Setup</head><p>We now present details on the datasets, target models, methodology, and attack methods used in our experiments.</p><p>Datasets. We performed experiments over both synthetic data and nine classification datasets derived from real data. In general, we chose datasets from domains, such as medicine and finance, for which membership inference is likely to be a real concern. To facilitate a baseline for comparison against prior work, we also included three common image datasets (MNIST, CIFAR10, and CIFAR100) that are less-plausibly connected to privacy, but serve as effective benchmarks, particularly because they have been studied in nearly all published membership inference experiments.</p><p>The synthetic data were generated with 10 classes, 75 features, and 400, 800, or 1,600, records, with an equal number of records per class. The features, x j , of the synthetic data were drawn randomly from a multivariate Gaussian distribution with parameters, µ y (for each class, y) and Σ, where µ y j was drawn uniformly at random from <ref type="bibr">[0,</ref><ref type="bibr" target="#b0">1]</ref>, and Σ was a diagonal matrix with Σ j j drawn uniformly at random from [0.5,1.5].</p><p>Among the classification datasets were Adult, Pima Diabetes (obtained from the UCI Machine Learning Repository); Breast Cancer Wisconsin, Hepatitis, German Credit, Labeled Faces in the Wild (obtained from scikit-learn's datasets API); MNIST <ref type="bibr" target="#b23">[24]</ref>, CIFAR10, and CIFAR100 <ref type="bibr" target="#b22">[23]</ref>. <ref type="figure">Figure 4</ref> shows the characteristics of each of these datasets.</p><p>Target Models. The target models we used to conduct our experiments include linear models, multi-layer perceptrons, and convolutional neural networks. Each model was trained until convergence with categorical cross-entropy loss, using SGD with a learning rate of 0.1, a decay rate of 10 −4 , and Nesterov momentum.</p><p>Linear models were implemented as a single-layer network in Keras [6] using a softmax activation. We used linear models only for the synthetic data. For non-image real data, we used a multi-layer perceptron (MLP) with one hidden layer and ReLU non-linearities, implemented in Keras. For datasets with n features, we employed 2n hidden units, followed by a softmax layer with one unit per class. For image data, we used a CNN architecture based on LeNet, with two convolutional layers with 5×5 filters and 20 and 50 output channels respectively (each convolutional layer is followed by a max pooling layer), followed by a fully connected layer with 500 neurons. We trained CNNs with a 25% dropout rate following each pooling layer, and a 50% dropout rate following the fully connected layer.</p><p>Each target model is a pair containing an architecture and a dataset. We refer to each target model by its dataset abbreviation given in <ref type="figure">Figure 4</ref>. each of the target models used in our evaluation are given in the final two columns of <ref type="figure">Figure 4</ref>.</p><p>Methodology. When evaluating each attack, we randomly split the data into three disjoint groups: train, test, and hold-out. The train and test groups were each comprised of one fourth of the total number of instances, and the hold-out group contained the remaining one half of the instances. The target model was trained on the train group, while the attacks were allowed to make use of the hold-out group only. The attack model's predictions were evaluated on the train group (members) and the test group (non-members). Each experiment was repeated 10 times over different random samplings of the data split, and the results were averaged.</p><p>Attack Methods. Throughout our evaluation, we assess four different attacks: naive, bayes-wb, general-wb, and shadow-bb. The naive attack refers to the simple attack introduced in Section 1, in which the attack model predicts an instance, x, is a member of the training set if and only if x was classified correctly. For the bayes-wb attack (introduced in Section 3.3), we trained 10 proxy models on random samples from the hold-out group, and took the mean of their approximated weights at each point for added robustness. When attacking MLP models, we performed the attack on the final layer of the MLP using Algorithm 1. When attacking LeNet models, we used a meta attack model (described in Section 4.2) that was trained on data from 10 shadow models trained on 10 samples from the hold-out group. We used a MLP with 16 internal neurons for the meta model and trained it for 32 epochs with Adam <ref type="bibr" target="#b19">[20]</ref>.</p><p>For the general-wb attack (introduced in Section 3.4), we construct an attack model that learns a displacement function, D (Algorithm 2), for each layer, , of the network, and combines the results with a meta attack model, M. The attack model was trained for 32 epochs with Adam, using data from 10 shadow models trained on the hold-out group. As suggested in Section 3.4, we modeled each D as a convolutional neural network. In each experiment, the networks modeling M and each D had at most one hidden layer, with n M and n D hidden units, respectively (in our experiments each D used the same architecture, though this need not be the case in general). In order to determine n M and n D for each dataset, we created a validation set using 10 shadow models trained on Comparison of the bayes-wb and general-wb attacks to an omniscient attack, which has knowledge ofˆµofˆ ofˆµ, µ * , and σ, and thus can use Theorem 1 directly without the use of a proxy model. In one case, the general-wb attack was given the minimum capacity to reproduce the bayes-wb attack, i.e., d is simply a weighted sum ofˆWofˆ ofˆW i and˜Wand˜ and˜W i . In another case, the general-wb attack was given excess capacity, with 16 hidden units in d. Three target models, trained on synthetic Gaussian naive-Bayes data with training set sizes of 100, 200, and 400, were attacked. different random splits of the hold-out group, and performed a parameter sweep over n M ,n D . We then took the n M and n D yielding the highest validation accuracy for each target model. We find that because the attack model is highly regularized via its restrictive architecture, the validation accuracy is a reasonably good indicator of the test accuracy, making it a useful tool for hyper-parameter tuning (see <ref type="figure" target="#fig_4">Figure 6</ref>). The shadow-bb attack refers to the black-box shadow model attack <ref type="bibr" target="#b37">[38]</ref>, explained briefly in Section 7. In each experiment, the shadow-bb attack was trained using 10 shadow models trained on 10 samples from the hold-out group.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5.2">Sensitivity to Assumptions &amp; Hyper-parameters</head><p>In Section 3.2, we derive the Bayes-optimal membership inference attack on Gaussian data satisfying the naive-Bayes condition. The weights of the optimal membership predictor for this case, given by Theorem 1, are a function of the empirical training distribution parameters and true distribution of the data, which, of course, would be unknown to an attacker. Section 3.3 describes how to address this, using a proxy model to capture the difference between the data used to train the target model and the general population. <ref type="figure" target="#fig_3">Figure 5</ref> demonstrates the effectiveness of the proxy model in our attack, by comparing our bayes-wb attack using a proxy model to an "omniscient" attack, which uses Equation 6 directly, with knowledge of the train and general distribution. We can consider the omniscient attack as giving an upper bound on the expected accuracy of a white-box attack on Gaussian naive-Bayes data, as it is the true Bayes-optimal attack (while bayes-wb is the approximate Bayes-optimal attack according to Proposition 1). Our attack achieves on average 84% of the advantage of the omniscient attack, suggesting that the proxy model was able to approximately capture the general distribution as necessary for the purpose of detecting the target model's idiosyncratic use of features.</p><p>In Section 3.4, we further generalize the bayes-wb attack to use a learned displacement function that may be more appropriate for distributions that don't resemble the Gaussian naive-Bayes assumption. While we find that this general-wb attack often generalizes to arbitrary distributions better than the bayes-wb attack, because its displacement function is learned, it is possible for the general-wb attack to overfit. <ref type="figure" target="#fig_3">Figure 5</ref> also shows the accuracy of the general-wb attack on Gaussian naive-Bayes data. When the neural network representing the displacement function is given exactly enough capacity to reproduce the bayes-wb attack, general-wb recovers on average 94% of the advantage of the bayes-wb attack. Upon inspecting the weights of the displacement network, we find that general-wb learns almost exactly element-wise subtraction, demonstrating its potential to learn the optimal displacement function. When given excess capacity, the general-wb attack performs only marginally worse, achieving on average 92% of the minimal general-wb attack's advantage (86% of bayes-wb), suggesting that general-wb is not highly prone to overfitting.</p><p>Tuning the general-wb Attack. As mentioned, even an over-parameterized displacement function may be able to perform nearly optimally on models trained on simple datasets, like the Synthetic dataset. However, as the general-wb attack involves several hyper-parameters, it may be useful to tune these parameters in a reliable way. We note that an arbitrary number of shadow models can be produced by sampling from the hold-out data, allowing us to construct a validation set on which to evaluate various architectures for implementing the distance function, D , and meta model, M, comprising the general-wb attack. <ref type="figure" target="#fig_4">Figure 6</ref> shows an example of the validation accuracy obtained using various architectures for D and M, along with the corresponding test accuracy (unknown to the attacker). We see that the test accuracy fairly closely follows the validation accuracy, with the maximum for both metrics occurring for the same architecture. This suggests that the validation accuracy is a reasonably good indicator of the test accuracy making it a useful tool for hyper-parameter tuning. This is perhaps not too surprising, as the attack model is highly regularized via its restrictive architecture.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5.3">Data Scaling</head><p>The "omniscient" attack developed in Section 3.2 relies on measuring a difference between the parameters of the true expectationˆDexpectationˆ expectationˆD = D * ; that is, as the number of samples in the training set goes to infinity, the true and empirical distributions will converge, rendering even the optimal attack ineffective (0 advantage). We would therefore expect that for a sufficiently large training set, the success of any MI attack would decline. Conversely, we may expect the opportunity for better MI performance for smaller training sets. Indeed, in accordance with this observation, we see that even the omniscient attack sees accuracy inversely proportional to the dataset size ( <ref type="figure" target="#fig_3">Figure 5</ref>).</p><p>We find that this pattern persists for real-world datasets as well. <ref type="figure">Figure 7</ref> shows the accuracy of our attacks on models trained on subsets of various sizes of the Adult dataset (the dataset containing the most records as compared to the number of parameters in the respective model). We observe that as more data becomes available for training, the advantage of the attack diminishes, becoming quite small (&lt; 4%) on the entire dataset (48,841 records). This may suggest that the Adult dataset is sufficiently large to preclude any significant information leakage via a modestly-sized MLP model obtained through standard training. <ref type="figure">Figure 8</ref> shows the accuracy of our attacks on each of the datasets used in our evaluation, plotted against the size of the respective dataset. We see to some extent the same downwards trend as dataset size increases, though there is more noise, and some of the image datasets (especially CIFAR10 and CIFAR100) provide notable exceptions. This is likely due to the variation in the number of features, the network capacity, and the generalization error across datasets.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>USENIX Association</head><p>29th USENIX Security Symposium 1615 </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5.4">Combining Layers</head><p>For deep models in particular, we want to be able to use information from each layer in our attack. In Section 4.2, we describe a meta attack that combines the outputs of an individual attack on each layer. <ref type="figure" target="#fig_6">Figure 9</ref> shows the accuracy of the bayes-wb attack on each individual layer and of the meta attack on each LeNet target model. In every instance, the meta attack is able to substantially outperform any individual attack, indicating that the information it receives from each layer is not entirely redundant. Moreover, this suggests that information leakage occurs in the representations learned by layers throughout the model-that is, each layer plays some role in the leakage of information about the training data. A possible consequence of this that we hypothesize in Section 6 is that models trained with transfer learning may leak less information about the training data used to tune the model.</p><p>Remarkably, for MNIST, the advantage of the meta attack is greater than that of all the individual layers combined.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5.5">Comparison to Prior Work</head><p>Finally, we compare our approach to previous work, namely, shadow-bb <ref type="bibr" target="#b37">[38]</ref>. In particular, we compare (1) performance in terms of accuracy, precision, and recall; and (2) the reliability of the attack confidence when used to calibrate for higher precision. In short, our results show that both bayes-wb and general-wb outperform shadow-bb, and can be more reliably calibrated to achieve confident inferences for the attacker. Furthermore, even on some well-generalized models, on which shadow-bb and naive fare poorly, our attacks can be calibrated to make confident inferences, and sometimes also achieve non-trivial advantage. Finally, we find that there is often little advantage to shadow-bb over naive, both because shadow-bb often performs comparably to naive, and because shadow-bb does not always produce calibrated confidence scores.</p><p>Performance. <ref type="figure" target="#fig_0">Figure 10</ref> shows the accuracy, precision, and recall of naive, bayes-wb, general-wb, and shadow-bb. The precision shown is before calibration attack (calibration results are shown in <ref type="figure" target="#fig_0">Figure 11</ref>). We see that both bayes-wb and general-wb are consistently more accurate and precise than naive and shadow-bb. At least one of bayes-wb or general-wb obtains the highest accuracy of the four methods on each target except Adult, and both outperform the other two methods in terms of precision in all cases. In some cases, the improvement in accuracy of at least one of our attacks over prior work is by as much as seven percentage points, though in others our accuracy is only modestly better; however, in terms of precision, the difference is more pronounced in almost every case (typically greater by at least five percentage points).</p><p>Typically naive or shadow-bb achieve the highest recall, but we note that both methods do so with lower precision; and at least in the case of naive, this is merely a consequence of the fact that most of the models have a high training accuracy.</p><p>Our results for the performance of shadow-bb are roughly in line with previously reported results for shadow-bb on the datasets which have been used for evaluation in prior work (Adult, MNIST, LFW, CIFAR10, and CIFAR100) <ref type="bibr" target="#b34">[35,</ref><ref type="bibr" target="#b37">38]</ref>. On CIFAR10 and CIFAR100, our results are slightly lower than the results reported for shadow-bb by Shokri et al., however, our target models trained on CIFAR10 and CIFAR100 use dropout and have a lower generalization error than the models in the attacks reported by Shokri et al., which most likely accounts for this small discrepancy.</p><p>Calibration. As argued in Sections 1 and 2, one of the key desiderata of a membership inference attack is precision. In order to calibrate an attack for precision, the confidence outputted by the attack must be informative. Here, we examine the calibration of the confidence outputs of our attacks compared to shadow-bb (naive does not provide a confidence score with which to calibrate).</p><p>We find that increasing the decision threshold of the bayeswb and general-wb attacks has a positive effect on precision. In particular, using the heuristic defined in Algorithm 3, we are able to consistently improve the precision of our attacks. <ref type="figure" target="#fig_0">Figure 11</ref> shows the precision of our attack as the decision threshold is raised according to Algorithm 3, for α = 0.90, and α = 0.99, compared to the uncalibrated attack. In each case the precision increases, often by 10 or more percentage points. Though in practice, an attacker would not be easily able to tune the calibration hyper-parameter, α, the consistency of the results in <ref type="figure" target="#fig_0">Figure 11</ref> suggest that values of 0.90 and 0.99 serve as a practical "rule-of-thumb" for reliable calibration.</p><p>On all convolutional models, general-wb is able to be calibrated to upwards of 75% precision. Notably, this includes the model trained on MNIST, which has only 1.1% generalization error. This implies that privacy violations are a threat even to well-generalized models, since our attack is able to confidently (with at least 75% confidence) identify a subset of training set members.</p><p>On the MLP models, the calibration is slightly less consistent; however, here bayes-wb is able to obtain over 70% precision on the models trained on the Breast Cancer Wisconsin and Hepatitis datasets.</p><p>In <ref type="figure" target="#fig_0">Figure 10</ref>, we see that the recall of the uncalibrated attack is frequently over 90%. When calibrating, the recall drops as precision increases, however, we believe this does not   diminish the threat of the attacks because a privacy violation occurs if even a few points are confidently inferred.</p><p>While <ref type="figure" target="#fig_0">Figure 11</ref> demonstrates that applying our calibration heuristic to bayes-wb and general-wb consistently increases the precision, we see that this is not always the case for shadowbb. In some cases, the precision of shadow-bb is decreased by increasing the decision threshold. In fact, occasionally, the average confidence on non-members is higher than that of members, leading to a precision slightly less than 50%. This may be a result of the shadow model overfitting to the hold-out data. When we are able to increase the precision of shadow-bb using its confidence output, the gains are less impressive, suggesting the probability outputs of shadow-bb are less well-calibrated.</p><p>Performance on Well-Generalized Models. While some of the models we used to evaluate our attacks had a generalization error of 10% or more, we also evaluated on several datasets for which the learned model was far less overfit, including MNIST (1.1% generalization error), Adult (1.2%), Pima Diabetes (3.4%), and Breast Cancer Wisconsin (4.3%). While on PD and BCW, our attacks only slightly outperform naive, on MNIST and Adult, our attacks do substantially better: on the model trained on Adult, general-wb achieves an advantage 2.6 times greater than the advantage achieved by naive. Even more impressively, on MNIST, general-wb and bayes-wb achieves an advantage 3.5 and 12.5 times greater than the advantage achieved by naive, respectively. On the other hand, shadow-bb fares poorly on all of these datasets except for Adult, typically achieving less than 2% advantage. Finally, we note that the bayes-wb attack on the synthetic data model <ref type="bibr">(Section 5.2)</ref> achieves a non-trivial 60% accuracy (20% advantage), despite the fact that the model has zero generalization error.</p><p>In addition to the cases where our attacks achieve relatively high advantage against well-generalized models, we find that when calibrated, our attacks achieve as high as 75% precision on MNIST, and 70% precision on Breast Cancer Wisconsin, again underscoring the threat of privacy violations for well-generalized models.</p><p>While it is clear that a greater degree of overfitting makes it easier for an adversary to mount any attack, the relative success of our attacks over naive on well-generalized models suggests that the white-box information is useful even when the model does not leak information through incorrect predictions on the test set.</p><p>Similarity of shadow-bb and naive Results. <ref type="figure" target="#fig_0">Figure 10</ref> reveals that often, shadow-bb has performance comparable or even worse than naive, particularly on well-generalized target models. This is likely a product of the attack model overfitting to idiosyncrasies in the shadow model's output that are unrelated to the target model. On deep models with significant overfitting, shadow-bb performs slightly better than naive, however, we found that its behavior was not significantly different from that of naive; for example, on LFW, naive recovers 88% of the exact correct predictions made by shadow-bb. This supports the intuition that the features used by the shadow model approach (i.e., the softmax outputs) are not fundamentally more well-suited to membership inference than those used by the naive method (i.e., the correctness of the predictions). This is perhaps unsurprising, as the softmax   outputs are likely to coincide largely with the correctness of the prediction-for correct predictions, the softmax will likely have high confidence on the correct class, regardless of whether the point was a member or not; and similarly for incorrect predictions, the softmax will likely have more entropy.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="6">Defenses</head><p>Concerns about privacy, underscored by concrete threats such as the attacks developed in this paper, have also motivated research to provide adequate defenses against such threats. In this section we explore the ability of some of the commonly-proposed mitigation techniques to defend against our attack. In particular, we focus on differential privacy <ref type="bibr" target="#b7">[8]</ref> and regularization. We find that, while both are useful to a degree, neither dropout nor ε-differentially private training with a large ε, are necessarily sufficient for mitigating the privacy risk posed by our attack.</p><p>Differential Privacy. Differential privacy (DP) <ref type="bibr" target="#b7">[8]</ref> is often seen as the gold standard for private models, as models trained with differential privacy have provable guarantees against membership inference. Namely, Yeom et al. <ref type="bibr" target="#b46">[47]</ref> showed that, given an ε-differentially private learning algorithm, an adversary can achieve an advantage of at most e ε − 1. Differential privacy has been applied to many areas of machine learning, including logistic regression <ref type="bibr" target="#b4">[5]</ref>, SVMs <ref type="bibr" target="#b33">[34]</ref>, and more recently, deep learning <ref type="bibr" target="#b0">[1,</ref><ref type="bibr" target="#b36">37]</ref>. However, current methods for ensuring differential privacy are typically costly with respect to the accuracy of the model, particularly for small values of ε, which give a better privacy guarantee. For this reason, in practice, ε is often chosen to be quite large; for example, in 2017, Apple was found to use an effective epsilon as high as 16 in some of its routines <ref type="bibr" target="#b42">[43]</ref>.</p><p>We used the Tensorflow Privacy library <ref type="bibr" target="#b28">[29]</ref>, an implementation of the moments accountant method <ref type="bibr" target="#b0">[1]</ref>, which guarantees (ε, δ)-differential privacy, to study the practical efficacy of our attack on protected models. This method utilizes several hyperparameters from which ε is derived; for uniformity, we modified only the noise multiplier to achieve the desired ε, and used heuristics described in the original paper <ref type="bibr" target="#b0">[1]</ref> to select the remaining hyperparameters. While a different tuning of the hyperparameters may result in a different privacy-utility trade-off, the privacy guarantee depends only on ε and δ, not the hyperparameters directly. In each case, δ was selected to be smaller than 1/N where N is the size of the dataset. <ref type="figure" target="#fig_0">Figure 12</ref> shows the effectiveness the general-wb attack against models trained with differential privacy for various values of ε on each dataset. The train and test accuracies of the corresponding differentially-private target models are shown in <ref type="figure" target="#fig_0">Figure 13</ref>. First, we note that as expected, when ε decreases the adversary's effectiveness quickly declines. However, when ε is large (ε = 16), our attack occasionally performs essentially the same on the differentially-private model as on the undefended model. For example, on BCW, PD, and LFW, 16-DP provided less defense than simple regularization, while harming the accuracy of the model. Similarly, on Hep, 16-DP reduced the effectiveness of general-wb, but not below the effectiveness of shadow-bb on the corresponding undefended model. These findings suggest that the practical benefits of large-ε-differential privacy cannot be taken for granted; in general, differential privacy may only be effective for sufficiently small ε.</p><p>Nevertheless, it is clear that a practical adversary is unlikely to achieve performance that is tight with the theoretical bound. For both the undefended model and the models trained with DP for ε &gt; ln2 ≈ 0.69, the theoretical bound on the adversary's accuracy is 100%, which no attack was able to achieve. On the other hand, for ε = 0.25, the theoretical maximum accuracy of the adversary is 64.2%. In most such cases, our attack fared far poorer than this, coming closest on LFW, where our attack achieved 53.5% accuracy (25% of the theoretical maximum advantage) on the 0.25-DP model. Thus, we conclude that because the accuracy of a real adversary is not likely to be tight with the worst-case guarantee, it is indeed pragmatic to select a somewhat large ε. However, our evaluation shows that ε should not be chosen to be too large, or else the operative benefits of differential privacy may be lost. Furthermore, the success of a given value of ε appears to vary across different datasets and models. One must therefore be careful when making a practical selection for ε; to this end, we suggest that our attack may be useful in assessing which values of ε are appropriate for a given application.</p><p>An apparent drawback of the examined method for obtaining differential privacy, revealed in our evaluation, is the steep cost in performance <ref type="figure" target="#fig_0">(Figure 13)</ref>, which is particularly high for small ε. Despite the fact that our attack became far less effective for small ε, this cost limits the practicality of the defense, highlighting the need for more research in this area. The results we find here align with recent work <ref type="bibr" target="#b18">[19]</ref>, in which Jayaraman and Evans showed that the privacy leakage tends to increase as ε becomes large enough to avoid a significant loss in accuracy. Indeed, only on the German Credit dataset did 16-DP provide a good defense while nearly maintaining the accuracy of the unprotected model. In the other cases we evaluated, either our attack performed comparably on the DP and unprotected models, or the accuracy of the private model was significantly lower than that of the unprotected model. Abadi et al. <ref type="bibr" target="#b0">[1]</ref> mitigate the high cost in accuracy by first pretraining on public data, and then fine-tuning only the top layers with differential privacy on the private training set. While this public transfer learning approach may not always be possible, it has two key benefits, the first being that the resulting model's performance is far less poor. Second, only the final layers of such a model are trained on the private data, and thus our attack may only be able to effectively target those layers. Our experiments in Section 5.4 show that our attack is far more effective when all layers are leveraged, and that the earlier layers often account for a sizable portion of the information leakage. This suggests that, when possible, a transfer learning scheme like that of Abadi et al. could be a practical defense.</p><p>Regularization. Given the connection between membership inference and overfitting, regularization, such as dropout <ref type="bibr" target="#b40">[41]</ref>, which aims to reduce overfitting, has also been proposed to combat membership inference. Generalization alone is not sufficient to protect against membership inference <ref type="bibr" target="#b46">[47]</ref>, and in fact, our empirical results (Section 5) show that we can successfully attack even models with negligible generalization error; however, dropout has been shown not only to reduce overfitting, but to strengthen privacy guarantees in neural networks <ref type="bibr" target="#b17">[18]</ref>. <ref type="figure" target="#fig_0">Figure 12</ref> shows the accuracy of our attack with and without dropout. We find that dropout does not significantly impact the accuracy of our attack in most cases. However, as opposed to DP, dropout is typically beneficial to the performance of the model, while providing a modest defense. In this light, regularization (including dropout) may in fact be the more practical defensive measure, insofar as it improves test accuracy, because better generalization does appear to make membership more difficult, though clearly not impossible, for an attacker.</p><p>Still, we warn that this may not be universally true of all forms of regularization, even regularization that improves generalization-as we have demonstrated, a model can still leak membership information through its parameters while making correct predictions on unseen points.</p><p>Defenses in the Black-box Setting. For membership inference in the black-box setting, Shokri et al. <ref type="bibr" target="#b37">[38]</ref> also propose a number of other possible defenses, such as restricting the prediction vector to the top k classes, or increasing the entropy of the prediction vector via increasing the normalization temperature of the softmax. However, these defenses are easily circumvented in the white-box setting, as the pre-modified outputs are still available to an attacker in this threat model. Similarly, Salem et al. <ref type="bibr" target="#b34">[35]</ref> propose a defense called model stacking, in which two models are trained separately on the training data and a third model makes predictions based on the outputs of the first two. While Salem et al. found this to be an effective defense against black-box approaches, this defense is likewise circumvented in the white-box setting, as the initial two models are available to the attacker.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="7">Related Work</head><p>There is extensive prior literature on privacy attacks on statistical summaries. Homer et al. <ref type="bibr" target="#b16">[17]</ref> proposed what is considered the first membership inference attack on genomic data in 2008. Following the work by Homer et al., a number of studies <ref type="bibr" target="#b8">[9,</ref><ref type="bibr" target="#b13">14,</ref><ref type="bibr" target="#b35">36,</ref><ref type="bibr" target="#b38">39,</ref><ref type="bibr" target="#b43">44]</ref> have looked into membership attacks on statistics commonly published in genome-wide association studies. In a similar vein, Komarova et al. <ref type="bibr" target="#b21">[22]</ref> looked into partial disclosure scenarios, where an adversary is given fixed statistical estimates from combined public and private sources and attempts to infer the sensitive feature of an individual referenced in those sources.</p><p>More recently, membership inference attacks have been applied to machine learning models. Ateniese et al. <ref type="bibr" target="#b1">[2]</ref> demonstrated that given access to the parameters of support vector machines (SVMs) or Hidden Markov Models (HMMs), an adversary can extract information about the training data.</p><p>As deep learning has become more ubiquitous, membership inference attacks have been particularly directed at deep neural networks. A number of different recent works <ref type="bibr" target="#b26">[27,</ref><ref type="bibr" target="#b27">28,</ref><ref type="bibr" target="#b32">33,</ref><ref type="bibr" target="#b34">35,</ref><ref type="bibr" target="#b37">38,</ref><ref type="bibr" target="#b46">47]</ref> have taken different approaches to membership inference against deep networks in a standard supervised learning setting. Additionally, Hayes et al. <ref type="bibr" target="#b14">[15]</ref> have studied membership inference against generative adversarial networks (GANs); and others <ref type="bibr" target="#b15">[16,</ref><ref type="bibr" target="#b29">30,</ref><ref type="bibr" target="#b32">33]</ref> have studied membership inference in the context of collaborative, or federated, learning.</p><p>Black-box attacks. We study membership inference as it applies to deep networks in classic supervised learning problems. Most of the prior work in this area <ref type="bibr" target="#b26">[27,</ref><ref type="bibr" target="#b27">28,</ref><ref type="bibr" target="#b34">35,</ref><ref type="bibr" target="#b37">38,</ref><ref type="bibr" target="#b46">47]</ref> has used the black-box threat model. <ref type="bibr">Yeom et al. [47]</ref> showed that generalization error necessarily leads to membership vulnerability; a natural consequence of this is that a simple "naive" attack (naive), which predicts a point is a member if and only if it was classified correctly, can be found to be quite effective on models that overfit to a large degree. Other approaches have leveraged not only the predictions of the model, but the confidence outputs. A particularly canonical approach, along these lines, is the attack introduced by Shokri et al. <ref type="bibr" target="#b37">[38]</ref> (shadow-bb). In this approach, a shadow model is trained on half of˜Sof˜ of˜S, ˜ S in , and an attack model is trained on the the outputs of the shadow model on its training data, ˜ S in (labeled 1), and the remaining datã S\˜SS\˜ S\˜S in (labeled 0). Shadow models leverage the disparity in prediction confidences on training instances the target model has overfit to, and have been shown to be successful at membership inference on models that have sufficiently high generalization error. A few other membership inference approaches <ref type="bibr" target="#b14">[15,</ref><ref type="bibr" target="#b34">35]</ref> have made use of this same technique.</p><p>Despite the fact that shadow model attacks leverage more information than the naive attack, we find in our evaluation (Section 5) that often, the shadow model attack fails to outperform the naive attack. One potential reason for this finding is that the learned attack model used by this approach to distinguish between the shadow model's outputs on members and non-members may be itself subject to overfitting. This may be especially true if the attack model picks up on behavior particular to one of the shadow models rather than the true target model. Furthermore, the confidence and entropy of the target model's softmax output is likely to be closely related to whether the target model's prediction was correct or not, meaning that the softmax outputs may not provide substantially different information from that used by naive.</p><p>White-box attacks. In some settings, it may be realistic for an attacker to have white-box access to the target model. Intuitively, while some information is leaked via the behavior of a model, the details of the structure and the parameters of the model are clear culprits for information leakage. Few prior approaches have successfully leveraged this extra information. While Hayes et al. <ref type="bibr" target="#b14">[15]</ref> describe a white-box attack in their work on membership inference attacks applied to GANs, the attack uses access only the outputs of the discriminator portion of the GAN, rather than the learned weights of either the discriminator or the generator; thus their approach is not white-box in the same sense. Meanwhile, Nasr et al. <ref type="bibr" target="#b32">[33]</ref> demonstrated that a simple extension of the black-box shadow model approach to utilize internal activations does not result in higher membership inference accuracies than the original black-box approach. This is perhaps unsurprising, as the internal units of the shadow models are not likely to have any relation to those of the target model (see Section 4).</p><p>Recently, Nasr et al. <ref type="bibr" target="#b32">[33]</ref> provided a white-box attack that leverages the gradients of the target model's loss function with respect to its weights, which SGD approximately brings to zero on the training points at convergence. In contrast to our work, Nasr et al. use a further relaxed threat model, in which the attacker has access to as much as half of the target model's training data. We suggest an approach that is quite different from that of Nasr et al.. Our approach does not require this extra knowledge for the attacker, and thus falls under a more restrictive threat model, in which, to our knowledge, no other effective white-box attacks have been proposed.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="8">Conclusions and Future Work</head><p>Our work is the first to fully leverage white-box information to improve membership inference attacks against deep networks (in the standard threat model where the adversary is assumed not to have any examples of true training points). In particular, our analysis sheds light on a fundamental mechanism of overfitting that can be leveraged by an adversary to compromise a model's privacy in a concrete way. We use this analysis of how feature usage can lead to information leakage to construct a new white-box attack, which our evaluation demonstrates improves upon the previous state-of-the-art, particularly because it can be reliably calibrated for high precision, even on some well-generalized models.</p><p>Subsequently, we used our attack to evaluate commonlyproposed privacy defenses. Perhaps most interestingly, experiments utilizing our attack reveal a nuanced story regarding differential privacy. When setting ε to small values, the attack was successfully mitigated but the utility of the resulting model quickly diminished; while when ε was increased sufficiently to mitigate the loss in utility, the attack sometimes achieved close to the same accuracy as on the undefended model. This suggests that there is still considerable work to be done in developing effective defenses against privacy attacks-we anticipate that the insights gained from our approach will contribute to designing such defenses. that conditioned on the class, y, the individual features, x j , are independent, we obtain Equation 12.</p><formula xml:id="formula_27">(11) = ¯ s log ∏ j N (x j | ˆ µ y j , ˆ σ 2 j ) N (x j | µ * y j ,σ * 2 j )<label>(12)</label></formula><p>We then re-write the log of the product as a sum over the log, and observe that the sum can be written as a dot product as in Equation 13, which gives the parameters of the Bayes-optimal model for m y (x). Finally, by assumption the variance is the same in S as in the general distribution, i.e., ˆ σ j = σ * j = σ j , for all features, j. Thus, v y from Equation 13 becomes zero, so we are left with a linear model for m y , with weights, w y , and bias, b y , given by Equation 5.</p><formula xml:id="formula_28">(12) = ¯ s ∑ j (x j −µ * y j ) 2 2σ * 2 j − (x j − ˆ µ y j ) 2 2 ˆ σ 2 j +log σ * j ˆ σ j = ¯</formula></div><figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_0"><head>Figure 1 :</head><label>1</label><figDesc>Figure 1: Pictorial example of how overfitting can lead to idiosyncratic use of features. (a) shows 12 training instances. We see that the image of Tony Blair on the top right has a distinctive pink background. (b) depicts internal explanations [25] for three test instances. The explanations show that the model uses Tony Blair's face to classify these instances, as we might expect. Meanwhile, (c) shows the explanation for the image with the distinctive pink background from the training set, where we see that the model is using the pink background to infer that the image is of Tony Blair.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_1"><head></head><label></label><figDesc>b, the Bayes-optimal membership inference model, m, on data satisfying Eq. 4 is approximately m y = ¯ s w yT x+b y</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_2"><head>Figure 3 illustrates</head><label>3</label><figDesc>this approach, which we call the general-wb attack. A learned displacement function, d f , is applied element-wise tô W and˜Wand˜ and˜W to produce attack model weights, W , and tô b and˜band˜ and˜b to produce attack model biases, b. It then predicts the probability of membership as ¯ s W T :y x+b y . As d f is applied element-wise to pairs of weights, we model D as a 1-dimensional convolutional neural network, where the Algorithm 2: The Linear general-wb MI Attack def createAttackModel ( ˆ g, ˜ S, N):</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_3"><head>Figure 5 :</head><label>5</label><figDesc>Figure 5: Comparison of the bayes-wb and general-wb attacks to an omniscient attack, which has knowledge ofˆµofˆ ofˆµ, µ * , and σ, and thus can use Theorem 1 directly without the use of a proxy model. In one case, the general-wb attack was given the minimum capacity to reproduce the bayes-wb attack, i.e., d is simply a weighted sum ofˆWofˆ ofˆW i and˜Wand˜ and˜W i . In another case, the general-wb attack was given excess capacity, with 16 hidden units in d. Three target models, trained on synthetic Gaussian naive-Bayes data with training set sizes of 100, 200, and 400, were attacked.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_4"><head>Figure 6 :</head><label>6</label><figDesc>Figure 6: Plot showing the validation (known to the attacker) and test (unknown to the attacker) accuracies of the general-wb attack for various attack model architectures on the Hepatitis dataset. Each architecture, listed on the x-axis, is represented by a pair, (n D , n M ), where n D and n M are the number of hidden units in the distance function network and meta model network respectively (see Section 5.1).</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_5"><head>Figure 7 :Figure 8 :</head><label>78</label><figDesc>Figure 7: Accuracy of the bayes-wb and general-wb attacks on the Adult dataset, as the amount of data is scaled from 6,105 records (1/8 of the full dataset) to 48,841 records.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_6"><head>Figure 9 :</head><label>9</label><figDesc>Figure 9: Accuracy of the bayes-wb attack on each individual layer of LeNet, compared with the accuracy using the combined meta-model.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_7"><head></head><label></label><figDesc>accuracy precision recall model naive shadow-bb bayes-wb general-wb naive shadow-bb bayes-wb general-wb naive shadow-bb bayes-wb general-wb</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_8"><head>Figure 10 :Figure 11 :</head><label>1011</label><figDesc>Figure 10: Comparison of the accuracy, precision, and recall of bayes-wb and general-wb with naive and shadow-bb.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_9"><head>Figure 12 :</head><label>12</label><figDesc>Figure 12: Attack accuracies against models trained with either dropout or (ε,δ)-differential privacy for various values of ε.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_10"><head>Figure 13 :</head><label>13</label><figDesc>Figure 13: Train and test accuracies for models trained with either dropout or (ε,δ)-differential privacy for various values of ε.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_11"><head>1 2</head><label>1</label><figDesc>(Pr[X = x | T,Y = y]+Pr[X = x | ¬T,Y = y]), by the law of total probability. We then divide by the numerator in Equation 10, yielding an expression that can be written as a logistic function (11) by noting that for x &gt; 0, exp(log x) = x.Pr[X = x | ¬T,Y = y] (11) We notice that Pr [X = x | T,Y = y] is the probability of having drawn x fromˆDfromˆ fromˆD, given class, y, and similarly, Pr[X = x | ¬T,Y = y] is the probability of having drawn x from D * , given class, y. Using the Naive-Bayes assumption, i.e.,</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_1" validated="false"><head></head><label></label><figDesc>The train and test accuracy for</figDesc><table>USENIX Association 
29th USENIX Security Symposium 1613 

model 

# row 
# feat. # class train acc. test acc. 

Synthetic 
400-1.6k 75 
10 
1.000 
1.000 
Breast Cancer (BCW) 569 
30 
2 
0.987 
0.944 
Pima Diabetes (PD) 
768 
8 
2 
0.789 
0.756 
Hepatitis (Hep) 
155 
19 
2 
0.997 
0.810 
German Credit (GC) 
1000 
20 
2 
0.937 
0.701 
Adult 
48841 
99 
2 
0.861 
0.849 
MNIST 
70k 
784 
10 
0.998 
0.987 
LFW 
1140 
1850 
5 
0.993 
0.829 
CIFAR10 
60k 
3072 
10 
0.996 
0.664 
CIFAR100 
60k 
3072 
100 
0.977 
0.312 

Figure 4: Characteristics of the datasets and models used in our experiments. 

</table></figure>

			<note place="foot" n="2"> , and thus Pr [X = x | Y = y] can be written as</note>
		</body>
		<back>

			<div type="acknowledgement">
			</div>

			<div type="annex">
<div xmlns="http://www.tei-c.org/ns/1.0"><head>A Proof of Theorem 1</head><p>We begin with the expression for m y (x) and apply Bayes' rule to obtain Equation 10.</p><p>Next, we express Equation 10 as a logistic (or, sigmoid) function, ¯ s(x) := (1 + e x ) −1 . We assume that Pr [T ] = 1</p></div>			</div>
			<div type="references">

				<listBibl>

<biblStruct xml:id="b0">
	<analytic>
		<title level="a" type="main">Deep learning with differential privacy</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Martin</forename><surname>Abadi</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Andy</forename><surname>Chu</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Ian</forename><surname>Goodfellow</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">H</forename><forename type="middle">Brendan</forename><surname>Mcmahan</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Ilya</forename><surname>Mironov</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Kunal</forename><surname>Talwar</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Li</forename><surname>Zhang</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 2016 ACM SIGSAC Conference on Computer and Communications Security, CCS</title>
		<meeting>the 2016 ACM SIGSAC Conference on Computer and Communications Security, CCS</meeting>
		<imprint>
			<date type="published" when="2016" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b1">
	<analytic>
		<title level="a" type="main">Hacking smart machines with smarter ones: How to extract meaningful data from machine learning classifiers</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Giuseppe</forename><surname>Ateniese</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Luigi</forename><forename type="middle">V</forename><surname>Mancini</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Angelo</forename><surname>Spognardi</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Antonio</forename><surname>Villani</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Domenico</forename><surname>Vitali</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Giovanni</forename><surname>Felici</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">International Journal of Security and Networks</title>
		<imprint>
			<date type="published" when="2015" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b2">
	<monogr>
		<title level="m" type="main">Unsupervised feature learning and deep learning: A review and new perspectives. CoRR, abs/1206</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Yoshua</forename><surname>Bengio</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Aaron</forename><forename type="middle">C</forename><surname>Courville</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Pascal</forename><surname>Vincent</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2012" />
			<biblScope unit="volume">5538</biblScope>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b3">
	<analytic>
		<title level="a" type="main">The cost of privacy: destruction of data-mining utility in anonymized data publishing</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Justin</forename><surname>Brickell</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Vitaly</forename><surname>Shmatikov</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">KDD</title>
		<imprint>
			<date type="published" when="2008" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b4">
	<analytic>
		<title level="a" type="main">Privacypreserving logistic regression</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Kamalika</forename><surname>Chaudhuri</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Claire</forename><surname>Monteleoni</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Advances in Neural Information Processing Systems 21</title>
		<imprint>
			<date type="published" when="2009" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b5">
	<monogr>
		<title level="m" type="main">Keras: Deep learning library for Theano and TensorFlow</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Francois</forename><surname>Chollet</surname></persName>
		</author>
		<ptr target="https://keras.io" />
		<imprint>
			<date type="published" when="2017" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b6">
	<analytic>
		<title level="a" type="main">Personal privacy vs population privacy: Learning to attack anonymization</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Graham</forename><surname>Cormode</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">KDD</title>
		<imprint>
			<date type="published" when="2011" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b7">
	<analytic>
		<title level="a" type="main">Differential privacy</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Cynthia</forename><surname>Dwork</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">ICALP</title>
		<imprint>
			<publisher>Springer</publisher>
			<date type="published" when="2006" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b8">
	<analytic>
		<title level="a" type="main">A systematic review of re-identification attacks on health data</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Khaled</forename><forename type="middle">El</forename><surname>Emam</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Elizabeth</forename><surname>Jonker</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Luk</forename><surname>Arbuckle</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Bradley</forename><surname>Malin</surname></persName>
		</author>
		<idno type="doi">doi:10.1371/journal.pone.0028071</idno>
	</analytic>
	<monogr>
		<title level="j">PLOS ONE</title>
		<imprint>
			<date type="published" when="2011" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b9">
	<analytic>
		<title level="a" type="main">Model inversion attacks that exploit confidence information and basic countermeasures</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Matt</forename><surname>Fredrikson</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Somesh</forename><surname>Jha</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Thomas</forename><surname>Ristenpart</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">ACM Conference on Computer and Communications Security (CCS)</title>
		<imprint>
			<date type="published" when="2015" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b10">
	<analytic>
		<title level="a" type="main">Privacy in pharmacogenetics: An end-to-end case study of personalized warfarin dosing</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Matthew</forename><surname>Fredrikson</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Eric</forename><surname>Lantz</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Somesh</forename><surname>Jha</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Simon</forename><surname>Lin</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">David</forename><surname>Page</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Thomas</forename><surname>Ristenpart</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">USENIX Security Symposium</title>
		<imprint>
			<date type="published" when="2014" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b11">
	<monogr>
		<title level="m" type="main">Deep Learning</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Ian</forename><surname>Goodfellow</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Yoshua</forename><surname>Bengio</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Aaron</forename><surname>Courville</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2016" />
			<publisher>MIT Press</publisher>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b12">
	<monogr>
		<title level="m" type="main">On calibration of modern neural networks</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Chuan</forename><surname>Guo</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Geoff</forename><surname>Pleiss</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Yu</forename><surname>Sun</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Weinberger</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2017" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b13">
	<analytic>
		<title level="a" type="main">Identifying personal genomes by surname inference</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Melissa</forename><surname>Gymrek</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Amy</forename><forename type="middle">L</forename><surname>Mcguire</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">David</forename><surname>Golan</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Eran</forename><surname>Halperin</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Yaniv</forename><surname>Erlich</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Science</title>
		<imprint>
			<biblScope unit="volume">339</biblScope>
			<biblScope unit="issue">6117</biblScope>
			<biblScope unit="page" from="321" to="324" />
			<date type="published" when="2013" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b14">
	<monogr>
		<title level="m" type="main">LOGAN: evaluating privacy leakage of generative models using generative adversarial networks</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Jamie</forename><surname>Hayes</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Luca</forename><surname>Melis</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">George</forename><surname>Danezis</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Emiliano De</forename><surname>Cristofaro</surname></persName>
		</author>
		<idno>abs/1705.07663</idno>
		<imprint>
			<date type="published" when="2017" />
			<publisher>CoRR</publisher>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b15">
	<monogr>
		<title level="m" type="main">Deep models under the GAN: information leakage from collaborative deep learning</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Briland</forename><surname>Hitaj</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Giuseppe</forename><surname>Ateniese</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Fernando</forename><surname>Pérez-Cruz</surname></persName>
		</author>
		<idno>abs/1702.07464</idno>
		<imprint>
			<date type="published" when="2017" />
			<publisher>CoRR</publisher>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b16">
	<analytic>
		<title level="a" type="main">Resolving individuals contributing trace amounts of DNA to highly complex mixtures using high-density SNP genotyping microarrays</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Nils</forename><surname>Homer</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Szabolcs</forename><surname>Szelinger</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Margot</forename><surname>Redman</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">David</forename><surname>Duggan</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Waibhav</forename><surname>Tembe</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Jill</forename><surname>Muehling</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">John</forename><forename type="middle">V</forename><surname>Pearson</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Dietrich</forename><forename type="middle">A</forename><surname>Stephan</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Stanley</forename><forename type="middle">F</forename><surname>Nelson</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">David</forename><forename type="middle">W</forename><surname>Craig</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">PLoS Genetics</title>
		<imprint>
			<biblScope unit="volume">4</biblScope>
			<biblScope unit="issue">8</biblScope>
			<date type="published" when="2008" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b17">
	<monogr>
		<title level="m" type="main">To drop or not to drop: Robustness, consistency and differential privacy properties of dropout</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Prateek</forename><surname>Jain</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Vivek</forename><surname>Kulkarni</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Abhradeep</forename><surname>Thakurta</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Oliver</forename><surname>Williams</surname></persName>
		</author>
		<idno>abs/1503.02031</idno>
		<imprint>
			<date type="published" when="2015" />
			<publisher>CoRR</publisher>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b18">
	<analytic>
		<title level="a" type="main">Evaluating differentially private machine learning in practice</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Bargav</forename><surname>Jayaraman</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">David</forename><surname>Evans</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">28th USENIX Security Symposium (USENIX Security 19)</title>
		<imprint>
			<date type="published" when="2019" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b19">
	<monogr>
		<title level="m" type="main">Adam: A method for stochastic optimization</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><surname>Diederik</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Jimmy</forename><surname>Kingma</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Ba</surname></persName>
		</author>
		<idno>abs/1412.6980</idno>
		<imprint>
			<date type="published" when="2015" />
			<publisher>CoRR</publisher>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b20">
	<monogr>
		<title/>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Jing</forename><surname>Yu Koh</surname></persName>
		</author>
		<ptr target="http://modelzoo.co" />
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b21">
	<analytic>
		<title level="a" type="main">Estimation of treatment effects from combined data: Identification versus data security</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Tatiana</forename><surname>Komarova</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Denis</forename><surname>Nekipelov</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Evgeny</forename><surname>Yakovlev</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Economic Analysis of the Digital Economy</title>
		<imprint>
			<publisher>University of Chicago Press</publisher>
			<date type="published" when="2015" />
			<biblScope unit="page" from="279" to="308" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b22">
	<monogr>
		<title level="m" type="main">Learning multiple layers of features from tiny images</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Alex</forename><surname>Krizhevsky</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Geoffrey</forename><surname>Hinton</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2009" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b23">
	<monogr>
		<title level="m" type="main">The MNIST database of handwritten digits</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Yann</forename><surname>Lecun</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Corrina</forename><surname>Cortes</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Christopher</forename><surname>Burges</surname></persName>
		</author>
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b24">
	<monogr>
		<title level="m" type="main">Influence-directed explanations for deep convolutional networks</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Klas</forename><surname>Leino</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Shayak</forename><surname>Sen</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Anupam</forename><surname>Datta</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Matt</forename><surname>Fredrikson</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Linyi</forename><surname>Li</surname></persName>
		</author>
		<idno>abs/1802.03788</idno>
		<imprint>
			<date type="published" when="2018" />
			<publisher>CoRR</publisher>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b25">
	<analytic>
		<title level="a" type="main">Membership privacy: A unifying framework for privacy definitions</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Ninghui</forename><surname>Li</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Wahbeh</forename><surname>Qardaji</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Dong</forename><surname>Su</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Yi</forename><surname>Wu</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Weining</forename><surname>Yang</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of ACM CCS</title>
		<meeting>ACM CCS</meeting>
		<imprint>
			<date type="published" when="2013" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b26">
	<monogr>
		<title level="m" type="main">Towards measuring membership privacy</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Yunhui</forename><surname>Long</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Vincent</forename><surname>Bindschaedler</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Carl</forename><forename type="middle">A</forename><surname>Gunter</surname></persName>
		</author>
		<idno>abs/1712.09136</idno>
		<imprint>
			<date type="published" when="2017" />
			<publisher>CoRR</publisher>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b27">
	<monogr>
		<title level="m" type="main">Understanding membership inferences on well-generalized learning models</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Yunhui</forename><surname>Long</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Vincent</forename><surname>Bindschaedler</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Lei</forename><surname>Wang</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Diyue</forename><surname>Bu</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Xiaofeng</forename><surname>Wang</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Haixu</forename><surname>Tang</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Carl</forename><forename type="middle">A</forename><surname>Gunter</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Kai</forename><surname>Chen</surname></persName>
		</author>
		<idno>abs/1802.04889</idno>
		<imprint>
			<date type="published" when="2018" />
			<publisher>CoRR</publisher>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b28">
	<monogr>
		<title level="m" type="main">A general approach to adding differential privacy to iterative training procedures</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">H</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Brendan</forename><surname>Mcmahan</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Galen</forename><surname>Andrew</surname></persName>
		</author>
		<idno>abs/1812.06210</idno>
		<imprint>
			<date type="published" when="2018" />
			<publisher>CoRR</publisher>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b29">
	<monogr>
		<title level="m" type="main">Inference attacks against collaborative learning</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Luca</forename><surname>Melis</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Congzheng</forename><surname>Song</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Emiliano</forename><surname>De Cristofaro</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Vitaly</forename><surname>Shmatikov</surname></persName>
		</author>
		<idno>abs/1805.04049</idno>
		<imprint>
			<date type="published" when="2018" />
			<publisher>CoRR</publisher>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b30">
	<monogr>
		<title level="m" type="main">Gaussian classifiers</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Kevin</forename><forename type="middle">P</forename><surname>Murphy</surname></persName>
		</author>
		<ptr target="https://www.cs.ubc.ca/~murphyk/Teaching/CS340-Fall07/gaussClassif.pdf" />
		<imprint>
			<date type="published" when="2007" />
		</imprint>
	</monogr>
	<note>University Lecture</note>
</biblStruct>

<biblStruct xml:id="b31">
	<monogr>
				<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Kevin</forename><forename type="middle">P</forename><surname>Murphy</surname></persName>
		</author>
		<title level="m">Machine Learning: A Probabilistic Perspective</title>
		<imprint>
			<publisher>The MIT Press</publisher>
			<date type="published" when="2012" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b32">
	<monogr>
		<title level="m" type="main">Comprehensive privacy analysis of deep learning: Stand-alone and federated learning under passive and active white-box inference attacks</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Milad</forename><surname>Nasr</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Reza</forename><surname>Shokri</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Amir</forename><surname>Houmansadr</surname></persName>
		</author>
		<idno>abs/1812.00910</idno>
		<imprint>
			<date type="published" when="2018" />
			<publisher>CoRR</publisher>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b33">
	<monogr>
		<title level="m" type="main">Learning in a large function space: Privacypreserving mechanisms for SVM learning</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">I</forename><forename type="middle">P</forename><surname>Benjamin</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Peter</forename><forename type="middle">L</forename><surname>Rubinstein</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Ling</forename><surname>Bartlett</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Nina</forename><surname>Huang</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Taft</surname></persName>
		</author>
		<idno>abs/0911.5708</idno>
		<imprint>
			<date type="published" when="2009" />
			<publisher>CoRR</publisher>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b34">
	<analytic>
		<title level="a" type="main">Ml-leaks: Model and data independent membership inference attacks and defenses on machine learning models</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Ahmed</forename><surname>Salem</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Yang</forename><surname>Zhang</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Mathias</forename><surname>Humbert</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Mario</forename><surname>Fritz</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Michael</forename><surname>Backes</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Annual Network and Distributed System Security Symposium (NDSS)</title>
		<imprint>
			<date type="published" when="2019" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b35">
	<analytic>
		<title level="a" type="main">Genomic privacy and limits of individual detection in a pool</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Sriram</forename><surname>Sankararaman</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Guillaume</forename><surname>Obozinski</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Eran</forename><surname>Michael I Jordan</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Halperin</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Nature Genetics</title>
		<imprint>
			<biblScope unit="volume">41</biblScope>
			<biblScope unit="issue">9</biblScope>
			<biblScope unit="page" from="965" to="967" />
			<date type="published" when="2009" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b36">
	<analytic>
		<title level="a" type="main">Privacy-preserving deep learning</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Reza</forename><surname>Shokri</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Vitaly</forename><surname>Shmatikov</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 22Nd ACM SIGSAC Conference on Computer and Communications Security</title>
		<meeting>the 22Nd ACM SIGSAC Conference on Computer and Communications Security</meeting>
		<imprint>
			<date type="published" when="2015" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b37">
	<monogr>
		<title level="m" type="main">Membership inference attacks against machine learning models</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Reza</forename><surname>Shokri</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Marco</forename><surname>Stronati</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Vitaly</forename><surname>Shmatikov</surname></persName>
		</author>
		<idno>abs/1610.05820</idno>
		<imprint>
			<date type="published" when="2016" />
			<publisher>CoRR</publisher>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b38">
	<analytic>
		<title level="a" type="main">Privacy risks from genomic data-sharing beacons</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Suyash</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Carlos</forename><forename type="middle">D</forename><surname>Shringarpure</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Bustamante</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">The American Journal of Human Genetics</title>
		<imprint>
			<biblScope unit="volume">97</biblScope>
			<biblScope unit="issue">5</biblScope>
			<biblScope unit="page" from="631" to="646" />
			<date type="published" when="2015-05" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b39">
	<monogr>
		<title level="m" type="main">Deep inside convolutional networks: Visualising image classification models and saliency maps</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Karen</forename><surname>Simonyan</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Andrea</forename><surname>Vedaldi</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Andrew</forename><surname>Zisserman</surname></persName>
		</author>
		<idno>abs/1312.6034</idno>
		<imprint>
			<date type="published" when="2013" />
			<publisher>CoRR</publisher>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b40">
	<analytic>
		<title level="a" type="main">Dropout: A simple way to prevent neural networks from overfitting</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Nitish</forename><surname>Srivastava</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Geoffrey</forename><surname>Hinton</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Alex</forename><surname>Krizhevsky</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Ilya</forename><surname>Sutskever</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Ruslan</forename><surname>Salakhutdinov</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Journal of Machine Learning Research</title>
		<imprint>
			<date type="published" when="2014" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b41">
	<monogr>
		<title level="m" type="main">Axiomatic attribution for deep networks</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Mukund</forename><surname>Sundararajan</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Ankur</forename><surname>Taly</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Qiqi</forename><surname>Yan</surname></persName>
		</author>
		<idno>abs/1703.01365</idno>
		<imprint>
			<date type="published" when="2017" />
			<publisher>CoRR</publisher>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b42">
	<monogr>
		<title level="m" type="main">Privacy loss in apple&apos;s implementation of differential privacy on macos 10</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Jun</forename><surname>Tang</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Aleksandra</forename><surname>Korolova</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Xiaolong</forename><surname>Bai</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Xueqiang</forename><surname>Wang</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Xiaofeng</forename><surname>Wang</surname></persName>
		</author>
		<idno>12. 09</idno>
		<imprint>
			<date type="published" when="2017" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b43">
	<analytic>
		<title level="a" type="main">Learning your identity and disease from research papers: information leaks in genome wide association studies</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Rui</forename><surname>Wang</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Yong</forename><forename type="middle">Fuga</forename><surname>Li</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Xiaofeng</forename><surname>Wang</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Haixu</forename><surname>Tang</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Xiaoyong</forename><surname>Zhou</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">CCS</title>
		<imprint>
			<date type="published" when="2009" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b44">
	<monogr>
				<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">X</forename><surname>Wu</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Fredrikson</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">W</forename><surname>Wu</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Jha</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><forename type="middle">F</forename><surname>Naughton</surname></persName>
		</author>
		<idno>abs/1512.06388</idno>
		<title level="m">Revisiting Differentially Private Regression: Lessons From Learning Theory and their Consequences. CoRR</title>
		<imprint>
			<date type="published" when="2015" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b45">
	<analytic>
		<title level="a" type="main">A methodology for formalizing model-inversion attacks</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">X</forename><surname>Wu</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Fredrikson</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Jha</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><forename type="middle">F</forename><surname>Naughton</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">2016 IEEE Computer Security Foundations Symposium (CSF)</title>
		<imprint>
			<date type="published" when="2016" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b46">
	<monogr>
		<title level="m" type="main">The unintended consequences of overfitting: Training data inference attacks</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Samuel</forename><surname>Yeom</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Matt</forename><surname>Fredrikson</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Somesh</forename><surname>Jha</surname></persName>
		</author>
		<idno>abs/1709.01604</idno>
		<imprint>
			<date type="published" when="2017" />
			<publisher>CoRR</publisher>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b47">
	<monogr>
		<title level="m" type="main">How transferable are features in deep neural networks? CoRR</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Jason</forename><surname>Yosinski</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Jeff</forename><surname>Clune</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Yoshua</forename><surname>Bengio</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Hod</forename><surname>Lipson</surname></persName>
		</author>
		<idno>abs/1411.1792</idno>
		<imprint>
			<date type="published" when="2014" />
		</imprint>
	</monogr>
</biblStruct>

				</listBibl>
			</div>
		</back>
	</text>
</TEI>
