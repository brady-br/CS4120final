<?xml version="1.0" encoding="UTF-8"?>
<TEI xmlns="http://www.tei-c.org/ns/1.0" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
xsi:schemaLocation="http://www.tei-c.org/ns/1.0 /Users/atharsefid/Desktop/grobid-0.5.3/grobid-home/schemas/xsd/Grobid.xsd"
 xmlns:xlink="http://www.w3.org/1999/xlink">
	<teiHeader xml:lang="en">
		<encodingDesc>
			<appInfo>
				<application version="0.5.3" ident="GROBID" when="2020-09-29T02:05+0000">
					<ref target="https://github.com/kermitt2/grobid">GROBID - A machine learning software for extracting information from scholarly documents</ref>
				</application>
			</appInfo>
		</encodingDesc>
		<fileDesc>
			<titleStmt>
				<title level="a" type="main">OFRewind: Enabling Record and Replay Troubleshooting for Networks</title>
			</titleStmt>
			<publicationStmt>
				<publisher/>
				<availability status="unknown"><licence/></availability>
			</publicationStmt>
			<sourceDesc>
				<biblStruct>
					<analytic>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Andreas</forename><surname>Wundsam</surname></persName>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Dan</forename><surname>Levin</surname></persName>
						</author>
						<author role="corresp">
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Srini</forename><surname>Seetharaman</surname></persName>
							<email>srini.seetharaman@telekom.com</email>
							<affiliation key="aff1">
								<orgName type="laboratory">Deutsche Telekom Inc., R&amp;D Lab</orgName>
								<address>
									<country key="US">USA</country>
								</address>
							</affiliation>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Anja</forename><surname>Feldmann</surname></persName>
						</author>
						<author>
							<affiliation key="aff0">
								<orgName type="institution">Deutsche Telekom Laboratories / TU Berlin</orgName>
							</affiliation>
						</author>
						<title level="a" type="main">OFRewind: Enabling Record and Replay Troubleshooting for Networks</title>
					</analytic>
					<monogr>
						<imprint>
							<date/>
						</imprint>
					</monogr>
				</biblStruct>
			</sourceDesc>
		</fileDesc>
		<profileDesc>
			<abstract>
				<p>Debugging operational networks can be a daunting task, due to their size, distributed state, and the presence of black box components such as commercial routers and switches, which are poorly instrumentable and only coarsely configurable. The debugging tool set available to administrators is limited, and provides only aggre-gated statistics (SNMP), sampled data (NetFlow/sFlow), or local measurements on single hosts (tcpdump). In this paper, we leverage split forwarding architectures such as OpenFlow to add record and replay debugging capabilities to networks-a powerful, yet currently lacking approach. We present the design of OFRewind, which enables scalable, multi-granularity, temporally consistent recording and coordinated replay in a network, with fine-grained, dynamic, centrally orchestrated control over both record and replay. Thus, OFRewind helps operators to reproduce software errors, identify data-path limitations, or locate configuration errors.</p>
			</abstract>
		</profileDesc>
	</teiHeader>
	<text xml:lang="en">
		<body>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="1">Introduction</head><p>Life as a network operator can be hard. In spite of many efforts to the contrary, problem localization and troubleshooting in operational networks still remain largely unsolved problems today. Consider the following anecdotal evidence:</p><p>Towards the end of October 2009, the administrators of the Stanford production OpenFlow network began observing strange CPU usage patterns in their switches. The CPU utilization oscillated between 25% and 100% roughly every 30 minutes and led to prolonged flow setup times, which where unacceptable for many users. The network operators began debugging the problem using standard tools and data sets, including SNMP statistics, however the cause for the oscillation of the switch CPU remained inexplicable. Even an analysis of the entire control channel data could not shed light on the cause of the problem, as no observed parameter (number of: packets in, packets out, flow modifications, flow expirations, statistics requests, and statistics replies) seemed to correlate with the CPU utilization. This left the network operator puzzled regarding the cause of the problem.</p><p>This anecdote (further discussion in Section 4.2) hints at some of the challenges encountered when debugging problems in networks. Networks typically contain black box devices, e.g., commercial routers, switches, and middleboxes, that can be only coarsely configured and instrumented, via command-line or simple protocols such as SNMP. Often, the behavior of black box components in the network cannot be understood by analytical means alone -controlled replay and experimentation is needed.</p><p>Furthermore, network operators remain stuck with a fairly simplistic arsenal of tools. Many operators record statistics via NetFlow or sFlow <ref type="bibr" target="#b31">[33]</ref>. These tools are valuable for observing general traffic trends, but often too coarse to pinpoint the origin problems. Collecting full packet traces, e.g., by tcpdump or specialized hardware, is often unscalable due to high volume data plane traffic. Even when there is a packet trace available, it typically only contains the traffic of a single VLAN or switch port. It is thus difficult to infer temporal or causal relationships between messages exchanged between multiple ports or devices.</p><p>Previous attempts have not significantly improved the situation. Tracing frameworks such as XTrace <ref type="bibr" target="#b33">[35]</ref> and Netreplay <ref type="bibr" target="#b8">[11]</ref> enhance debugging capabilities by pervasively instrumenting the entire network ecosystem, but face serious deployment hurdles due to the scale of changes involved. There are powerful tools available in the context of distributed applications that enable fully deterministic recording and replay, oriented toward end hosts <ref type="bibr" target="#b14">[16,</ref><ref type="bibr" target="#b22">24]</ref>. However, overhead for the fullydeterministic recording of a large network with high data rates can be prohibitive and the instrumentation of 'black' middleboxes and closed source software often remains out of reach.</p><p>In this paper, we present a new approach to enable practical network recording and replay, based upon an emerging class of network architectures called split forwarding architectures, such as OpenFlow <ref type="bibr" target="#b26">[28]</ref>, Tesseract <ref type="bibr" target="#b39">[41]</ref>, and Forces <ref type="bibr" target="#b1">[2]</ref>. These architectures split control plane decision-making off from data plane forwarding. In doing so, they enable custom programmability and centralization of the control plane, while allowing for commodity high-throughput, high-fanout data plane forwarding elements.</p><p>We discuss, in Section 2, the design of OFRewind, a tool that takes advantage of these properties to significantly improve the state-of-the-art for recording and replaying network domains. OFRewind enables scalable, temporally consistent, centrally controlled network recording and coordinated replay of traffic in an OpenFlow controller domain. It takes advantage of the flexibility afforded by the programmable control plane, to dynamically select data plane traffic for recording. This improves data-path component scalability and enables always-on recording of critical, low-volume traffic, e.g., routing control messages. Indeed, a recent study has shown that the control plane traffic accounts for less than 1% of the data volume, but 95 âˆ’ 99% of the observed bugs <ref type="bibr" target="#b7">[10]</ref>. Data plane traffic can be load-balanced across multiple data plane recorders. This enables recording even in environments with high data rates. Finally, thanks to the centralized perspective of the controller, OFRewind can record a temporally consistent trace of the controller domain. This facilitates investigation of the temporal and causal interdependencies of the messages exchanged between the devices in the controller domain.</p><p>During replay, OFRewind enables the operator to select which parts of the traces are to be replayed and how they should be mapped to the replay environment. By partitioning (or bisecting) the trace and automatically repeating the experiment, our tool helps to narrow down and isolate the problem causing component or traffic. A concrete implementation of the tool based on OpenFlow is presented in Section 3 and is released as free and open source software <ref type="bibr">[4]</ref>.</p><p>Our work is primarily motivated by operational issues in the OpenFlow-enabled production network at Stanford University. Accordingly, we discuss several case studies where our system has proven useful, including: switch CPU inflation, broadcast storms, anomalous forwarding, NOX packet parsing errors, and other invalid controller actions (Section 4). We in addition present a case study in which OFRewind successfully pinpoints faulty behavior in the Quagga RIP software routing daemon. This indicates that OFRewind is not limited to locating OpenFlow-specific bugs alone, but can also be used to reproduce other network anomalies.</p><p>Our evaluation (Section 5) shows (a) that the tool scales at least as well as current OpenFlow hardware implementations, (b) that recording does not impose an undue performance penalty on the throughput achieved, and (c) that the messaging overhead for synchronization in our production network is limited to 1.13% of all data plane traffic.</p><p>While using our tool, we have made and incorporated the following key observations:</p><p>(1) A full recording of all events in an entire production network is infeasible, due to the data volumes involved and their asynchronous nature. However, one usually needs not record all information to be able to reproduce or pinpoint a failure. It suffices to focus on relevant subparts, e.g., control messages or packet headers. By selectively recording critical traffic subsets, we can afford to turn recording on by default and thus reproduce many unforeseen problems post facto.</p><p>(2) Partial recordings, while missing some data necessary for fully deterministic replay, can be used to reproduce symptomatic network behavior, useful for gaining insights in many debugging situations. With careful initialization, the behavior of many network devices turns out to be deterministic with respect to the network input.</p><p>(3) By replaying subsets of traffic at a controlled pace, we can, in many cases, rapidly repeat experiments with different settings (parameters/code hooks) while still reproducing the error. We can, for instance, bisect the traffic and thus localize the sequence of messages leading to an error.</p><p>In summary, OFRewind is, to the best of our knowledge, the first tool which leverages the properties of split architecture forwarding to enable practical and economically feasible recording and replay debugging of network domains. It has proven useful in a variety of practical case studies, and our evaluation shows OFRewind does not significantly affect the scalability of OpenFlow controller domains and does not introduce undue overhead.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2">OFRewind System Design</head><p>In this section, we discuss the expected operational environment of OFRewind, its design goals, and the components and their interaction. We then focus on the need to synchronize specific system components during operation.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.1">Environment / Abstractions</head><p>We base our system design upon split forwarding architectures, for instance, OpenFlow <ref type="bibr" target="#b26">[28]</ref>, Tesseract <ref type="bibr" target="#b39">[41]</ref>, or Forces <ref type="bibr" target="#b1">[2]</ref>, in which standardized data plane elements (switches) perform fast and efficient packet forwarding, and the control plane is programmable via an external  <ref type="figure">Figure 1</ref>: Overview of OFRewind controlling entity, known as the controller. Programmability is achieved through forwarding rules that match incoming traffic and associate them with actions. We call this layer of the network the substrate, and the higherlayer superstrate network running on top of it guest. We call the traffic exchanged between the switches and the controller the substrate control plane. The higher-layer control plane traffic running inside of the substrate data plane (e.g., IP routing messages) is called the guest control plane. The relationship between these layers and traffic strata is shown in <ref type="figure">Figure 1(c)</ref>.</p><p>Even though not strictly mandated almost all splitarchitecture deployments group several switches to be centrally managed by one controller, creating a controller domain. We envision one instance of OFRewind to run in one such controller domain. Imagine, e.g., a campus building infrastructure with 5-10 switches, 200 hosts attached on Gigabit links, a few routers, and an uplink of 10GB/s.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.2">Design Goals and Non-Goals</head><p>As previously stated, recording and replay functionalities are not usually available in networks. We aim to build a tool that leverages the flexibility afforded by splitarchitectures to realize such a system. We do not envision OFRewind to do automated root-cause analysis. We do intend it to help localize problem causes. Additionally, we do not envision it to automatically tune recording parameters. This is left to an informed administrator who knows what scenario is being debugged.</p><p>Recording goals: We want a scalable system that can be used in a realistic-sized controller domain. We want to be able to record critical traffic, e.g., routing messages, in an always-on fashion. What is monitored should be specified in centralized configuration, and we want to be able to attain a temporally consistent view of the recorded events in the controller domain.</p><p>Replay goals: We want to be able to replay traffic in a coordinated fashion across the controller domain.</p><p>For replaying into a different environment or topology (e.g., in a lab environment) we want to sub-select traffic and potentially map traffic to other devices. We include time dilation to help investigate timer issues, create stress tests, and allow "fast forwarding" to skip over irrelevant portions of the traffic. Bisection of the traffic between replays can assist problem localization whereby the user repeatedly partitions and sub-selects traffic to be replayed based on user-defined criteria (e.g., by message types), performs a test run, then continues the bisection based on whether a problem was reproducible.</p><p>(Absence of) determinism guarantees: As opposed to host-oriented replay debugging systems which strive for determinism guarantees, OFRewind does not -and cannot -provide strict determinism guarantees, as black boxes do not lend themselves to the necessary instrumentation. Instead, we leverage the insight that network device behavior is largely deterministic on control plane events (messages, ordering, timing). In some cases, when devices deliberately behave non-deterministically, protocol specific approaches must be taken.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.3">OFRewind System Components</head><p>As seen in <ref type="figure">Figure 1(a)</ref>, the main component of our system, OFRewind, runs as a proxy on the substrate control channel, i.e., between the switches and the original controller. It can thus intercept and modify substrate control plane messages to control recording and replay. It delegates recording and replay of guest traffic to DataStore components that are locally attached at regular switch ports. The number of DataStores attached at each switch can be chosen freely, subject to the availability of ports.</p><p>Both components can be broken down further into two modules each, as depicted in <ref type="figure">Figure 1</ref>(b): They consist of a recording and a replay module with a shared local storage, labeled <ref type="bibr">Ofrecord and Ofreplay, and Datarecord and Datareplay respectively.</ref> Record: Ofrecord captures substrate control plane traffic directly. When guest network traffic recording is desired, Ofrecord translates control messages to instruct the relevant switches to selectively mirror guest traffic to the Datarecord modules. OFRewind supports dynamic selection of the substrate or guest network traffic to record. In addition, flow-based-sampling can be used to record only a fraction of the data plane flows.</p><p>Replay: Ofreplay re-injects the traces captured by Ofrecord into the network, and thus enables domainwide replay debugging. It emulates a controller towards switches or a set of switches towards a controller, and directly replays substrate control plane traffic. Guest traffic is replayed by the Datareplay modules, which are orchestrated by Ofreplay.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.4">Ofrecord Traffic Selection</head><p>While it is, in principle, possible to collect full data recordings for every packet in the network, this introduces a substantial overhead both in terms of storage as well as in terms of performance. Ofrecord , however, allows selective traffic recording to reduce the overhead.</p><p>Selection: Flows can be classified and selected for recording. We refer to traffic selection whenever we make a conscious decision on what subset of traffic to record. Possible categories include: substrate control traffic, guest network control traffic, or guest data traffic, possibly sub-selected by arbitrary match expressions. We illustrate an example selection from these categories in <ref type="figure">Figure 1(c)</ref>.</p><p>Sampling: If selection is unable to reduce the traffic sufficiently, one may apply either packet or flow sampling on either type of traffic as a reduction strategy.</p><p>Cut-offs: Another data reduction approach is to record only the first X bytes of each packet or flow. This often suffices to capture the critical meta-data and has been used in the context of intrusion detection <ref type="bibr" target="#b24">[26]</ref>. datafull: In this mode, data traffic recorded by the DataStores is replayed with complete payload, allowing for selective inclusion of end host traffic into the tests.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.5">Ofreplay Operation Modes</head><p>In addition to these operation modes, Ofreplay enables the user to further tweak the recorded traffic to match the replay scenario. Replayed messages can be sub-selected based on source or destination host, port, or message type. Further, message destinations can be re-mapped on a per-host or per-port basis. These two complementary features allow traffic to be re-targeted toward a particular host, or restricted such that only relevant messages are replayed. They enable Ofreplay to play recorded traffic either toward the original sources or to alternative devices, which may run a different firmware version, have a different hardware configuration, or even be of a different vendor. These features enable OFRewind to be used for regression testing. Alternately, it can be useful to map traffic of multiple devices to a single device, to perform stress tests.</p><p>The pace of the replay is also adjustable within Ofreplay, enabling investigation of pace-dependent performance problems. Adjusting replay can also be used to "fast-forward" over portions of a trace, e.g., memory leaks in a switch, which typically develop over long time periods may be reproduced in an expedited manner.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.6">Event Ordering and Synchronization</head><p>For some debugging scenarios, it is necessary to preserve the exact message order or mapping between guest and substrate flow data to be able to reproduce the problem. In concrete terms, the guest (data) traffic should not be replayed until the substrate (control) traffic (containing the corresponding substrate actions) has been replayed. Otherwise, guest messages might be incorrectly forwarded or simply dropped by the switch, as the necessary flow table state would be invalid or missing.</p><p>We do not assume tightly synchronized clocks or low latency communication channels between our OFRewind and the DataStores components. Accordingly, we cannot assume that synchronization between recorded substrate and guest flow traces, or order between flows recorded by different DataStores is guaranteed per se. Our design does rely on the following assumptions: <ref type="formula">(1)</ref> The substrate control plane channel is reliable and orderpreserving. <ref type="formula">(2)</ref> The control channel between OFRewind and each individual DataStore is reliable and orderpreserving, and has a reasonable mean latency l c (e.g., 5 ms in a LAN setup.) (3) The data plane channel from OFRewind to the DataStores via the switch is not necessarily fully, but sufficiently reliable (e.g., 99.9% of mes-sages arrive). It is not required to be order-preserving in general, but there should be some means of explicitly guaranteeing order between two messages. We define the data plane channel mean latency as l d .</p><p>Record: Based on these assumptions, we define a logical clock C [25] on Ofrecord , incremented for each substrate control message as they arrive at Ofrecord . Ofrecord logs the value of C with each substrate control message. It also broadcasts the value of C to the DataStores in two kinds of synchronization markers: time binning markers and flow creation markers.</p><p>Time binning markers are sent out at regular time intervals i t , e.g., every 100ms. They group flows into bins and thus constrain the search space for matching flows during replay and help reconstruct traffic characteristics within flows. Note that they do not impose a strict order on the flows within a time bin.</p><p>Flow creation markers are optionally sent out whenever a new flow is created. Based on the previous assumptions, they induce a total ordering on all flows whose creation markers have been successfully recorded. However, their usage limits the scalability of the system, as they must be recorded by all DataStores.</p><p>Replay: For synchronization during replay, Ofreplay assumes the role of a synchronization master, reading the value of C logged with the substrate messages. When a DataStore hits a synchronization marker while replaying, it synchronizes with Ofreplay before continuing. This assures that in the presence of time binning markers, the replay stays loosely synchronized between the markers (within an interval I = i t + l d + l c ). In the presence of flow creation markers, it guarantees that the order between the marked flows will be preserved.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.7">Typical Operation</head><p>We envision that users of OFRewind run Ofrecord in an always-on fashion, always recording selected substrate control plane traffic (e.g., OpenFlow messages) onto a ring storage. If necessary, selected guest traffic can also be continuously recorded on Datarecord . To preserve space, low-rate control plane traffic, e.g., routing announcements, may be selected, sampling may be used, and/or the ring storage may be shrunk. When the operator (or an automated analytics tool) detects an anomaly, a replay is launched onto a separate set of hardware, or onto the production network during off-peak times. Recording settings are adapted as necessary until the anomaly can be reproduced during replay.</p><p>During replay, one typically uses some kind of debugging by elimination, either by performing binary search along the time axis or by eliminating one kind of message at a time. Hereby, it is important to choose orthogonal subsets of messages for effective problem localization.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3">Implementation</head><p>In this section, we describe the implementation of OFRewind based on OpenFlow, selected for currently being the most widely used split forwarding architecture. OpenFlow is currently in rapid adoption by testbeds <ref type="bibr" target="#b18">[20]</ref>, university campuses <ref type="bibr" target="#b0">[1]</ref>, and commercial vendors <ref type="bibr" target="#b2">[3]</ref>.</p><p>OpenFlow realizes split forwarding architecture as an open protocol between packet-forwarding hardware and a commodity PC (the controller). The protocol allows the controller to exercise flexible and dynamic control over the forwarding behavior of OpenFlow enabled Ethernet switches at a per-flow level. The definition of a flow can be tailored to the specific application caseOpenFlow supports an 11-tuple of packet header parts, against which incoming packets can be matched, and flows classified. These range from Layer 1 (switch ports), to Layer 2 and 3 (MAC and IP addresses), to Layer 4 (TCP and UDP ports). The set of matching rules, and the actions associated with and performed on each match are held in the switch and known as the flow table.</p><p>We next discuss the implementation of OFRewind, the synchronization among the components and discuss the benefits, limitations, and best-practices of using OpenFlow to implement our system. The implementation, which is an OpenFlow controller in itself, and based on the source code of FlowVisor <ref type="bibr" target="#b34">[36]</ref> is available under a free and open source license at <ref type="bibr">[4]</ref>.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.1">Software Modules</head><p>To capture both the substrate control traffic and guest network traffic we use a hybrid strategy for implementing OFRewind. Reconsider the example shown in <ref type="figure">Fig- ure 1(a)</ref> from an OpenFlow perspective. We deploy a proxy server in the OpenFlow protocol path (labeled OFRewind) and attach local DataStore nodes to the switches. The OFRewind node runs the Ofrecord and Ofreplay modules, and the DataStore nodes run Datarecord and Datareplay, respectively. We now discuss the implementation of the four software components Ofrecord , Datarecord , Ofreplay and Datareplay.</p><p>Ofrecord : Ofrecord intercepts all messages passing between the switches and controller and applies the selection rules. It then stores the selected OpenFlow control (substrate) messages to locally attached data storage. Optionally, the entire flow table of the switch can be dumped on record startup. If recording of the guest network control and/or data traffic is performed, Ofrecord transforms the FLOW-MOD and PACKET-OUT commands sent from the controller to the switch to duplicate the packets of selected flows to a DataStore attached to a switch along flow path. Multiple DataStores can be attached to each switch, .e.g., for load-balancing. The order of flows on the different DataStores in the sys-tem is retained with the help of synchronization markers. Any match rule supported by OpenFlow can be used for packet selection. Additionally, flow-based-sampling can be used to only record a fraction of the flows.</p><p>Datarecord : The Datarecord components located on the DataStores record the selected guest traffic, as well as synchronization and control metadata. They are spawned and controlled by Ofrecord . Their implementation is based on tcpdump, modified to be controlled by Ofrecord via a TCP socket connection. Data reduction strategies that cannot be implemented with OpenFlow rules (e.g., packet sampling, cut-offs) are executed by Datarecord before writing the data to disk.</p><p>Ofreplay:</p><p>Ofreplay re-injects OpenFlow control plane messages as recorded by Ofrecord into the network and orchestrates the guest traffic replay by the Datareplay components on the DataStores. It supports replay towards the controller and switches, and different levels of data plane involvement (switch, datahdr, datafull, see Section 2.5.) Optionally, a flow table dump created by Ofrecord can be installed into the switches prior to replay. It supports traffic sub-selection and mapping towards different hardware and time dilation.</p><p>Datareplay: The Datareplay components are responsible for re-injecting guest traffic into the network. They interact with and are controlled by Ofreplay for timing and synchronization. The implementation is based on tcpreplay. Depending on the record and replay mode, they reconstruct or synthesize missing data before replay, e.g., dummy packet payloads, when only packet headers have been recorded.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.2">Synchronization</head><p>As we do not assume precise time synchronization between Ofrecord and the DataStores, the implementation uses time binning markers and flow creation markers, as discussed in Section 2.6. These are packets with unique ids flooded to all DataStores and logged by Ofrecord . The ordering of these markers relative to the recorded traffic is ensured by OpenFlow BARRIER messages 1 . We now discuss by example how the markers are used.</p><p>Record synchronization: <ref type="figure">Figure 2</ref>(a) illustrates the use of flow creation markers during recording. Consider a simple Ofrecord setup with two hosts c1 and s1 connected to switch sw. The switch is controlled by an instance of Ofrecord , which in turn acts as a client to the network controller ctrl. Ofrecord records to the local storage of-store, and controls an instance of Datarecord running on a DataStore. Assume that a new TCP connection is initiated at c1 toward s1, generating a tcp syn packet (Step 1). As no matching flow table entry exists, sw sends msg1, an OpenFlow PACKET-IN to Ofrecord (Step 2), which in turn relays it to ctrl (step 3). Ctrl may respond with msg2, a FLOW-MOD message (step 4). To enable synchronized replay and reassembly of the control and data records, Ofrecord now creates a flow creation marker (sync), containing a unique id, the current time, and the matching rule of msg1 and msg2. Both msg1 and msg2 are then annotated with the id of sync and saved to of-store (step 5). Ofrecord then sends out 3 messages to sw1: first, a PACKET-OUT message containing the flow creation marker sent to all DataStores in step 6. This prompts the switch to send out sync to all its attached DataStores (step 7). The second message sent from Ofrecord is a BARRIER message (step 8), which ensures that the message from step 7 is handled before any subsequent messages. In step 9, Ofrecord sends a modified FLOW-MOD message directing the flow to both the original receiver, as well as one DataStore attached to the switch. This prompts the switch to output the flow both to s1 (step 10a) and DataStore (step 10b).</p><p>Replay synchronization: For synchronizing replay, Ofreplay matches data plane events to control plane events with the help of the flow creation markers recorded by Ofrecord . Consider the example in <ref type="figure">Fig- ure 2(b)</ref>. Based on the previous example, we replay the recording in data plane mode towards the switch sw and host s1. To begin, Ofreplay starts Datareplay playback on the DataStore in step 1. Datareplay hits the flow creation marker sync, then sends a sync wait message to the controller, and goes to sleep (step 2). Ofrecord continues replay operation, until it hits the corresponding flow creation marker sync on the of-store (step 3). Then, it signals Datareplay to continue with a sync ok message (step 4). Datareplay outputs the packet to the switch (step 5), generating a PACKET-IN event (step 6). Ofreplay responds with the matching FLOW-MOD event from the OpenFlow log (step 7). This installs a matching flow rule in the switch and causes the flow to be forwarded as recorded (step 8).</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.3">Discussion</head><p>We now discuss the limitations imposed by OpenFlow on our implementation, and best practices for avoiding replay inaccuracies.</p><p>OpenFlow  <ref type="figure">Figure 2</ref>: DataStore synchronization mechanism in OFRewind for data that is not subsequently recorded. Similarly, the OpenFlow data plane does not support forwarding of partial packets 2 . Consequently, full packets are forwarded to the DataStore and only their headers may be recorded. OpenFlow also does not support automatic flow cut-offs after a specified amount of traffic 3 . The cut-off can be performed in the DataStore. Further optimizations are possible, e.g., regularly removing flows that have surpassed the threshold. Avoiding replay inaccuracies: To reliably reproduce failures during replay in a controlled environment, one must ensure that the environment is properly initialized. We suggest therefore, to use the flow table dump feature and, preferably, reset (whenever possible) the switches and controller state before starting the replay operation. This reduces any unforeseen interference from previously installed bad state.</p><p>When bisecting during replay, one must consider the interdependencies among message types. FLOW-MOD messages are for example, responsible for creating the flow table entries and their arbitrary bisection may lead to incomplete or nonsense forwarding state on the switch.</p><p>Generally speaking, replay inaccuracies can occur when: (a) the chain of causally correlated messages is recorded incompletely, (b) synchronization between causally correlated messages is insufficient, (c) timers influence system behavior, and (d) network communication is partially non-deterministic. For (a) and (b), it is necessary to adapt the recording settings to include more or better-synchronized data. For (c) a possible approach is to reduce the traffic being replayed via subselection to reduce stress on the devices and increase accuracy. We have not witnessed this problem in our practical case studies. Case (d) requires the replayed traffic to be modified. If the non-determinism stems from the transport layer (e.g., TCP random initial sequence num-bers), a custom transport-layer handler in Datareplay can shift sequence numbers accordingly for replay. For application non-determinism (e.g., cryptographic nonces), application-specific handlers must be used.</p><p>When the failure observed in the production network does not appear during replay, we call this a false negative problem. When the precautions outlined above have been taken, a repeated false negative indicates that the failure is likely not triggered by network traffic, but other events. In a false positive case, a failure is observed during replay which does not stem from the same root cause. Such inaccuracies can often be avoided by careful comparison of the symptoms and automated repetition of the replay.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4">Case Studies</head><p>In this section, we demonstrate the use of OFRewind for localizing problems in black box network devices, controllers, and other software components, as summarized in <ref type="table">Table 1</ref>. These case studies also demonstrate the benefits of bisecting the control plane traffic (4.2), of mapping replays onto different pieces of hardware (4.3), from a production network onto a developer machine (4.5), and the benefit of a temporally consistent recording of multiple switches (4.6).</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.1">Experimental Setup</head><p>For our case studies we use a network with switches from three vendors: Vendor A, Vendor B, Vendor C. Each switch has two PCs connected to it. <ref type="figure">Figure 3</ref>   <ref type="figure">Figure 3</ref>: Lab environment for case studies performs shortest path routing by learning the destination MAC address, and the spanning âˆ’ tree module, which prevents broadcast storms in the network by using Link Layer Discovery Protocol (LLDP) to identify if there is a loop in the network. All OpenFlow applications, viz. NOX, FlowVisor, Ofreplay, and Ofrecord , are run on the same server. <ref type="figure" target="#fig_0">Figure 4</ref> shows our attempt at reproducing the CPU oscillation we reported in Section 1. As stated earlier, there is no apparent correlation between the ingress traffic and the CPU utilization. We record all control traffic in the production network, as well as the traffic entering/exiting the switch, while the CPU oscillation is happening. <ref type="figure" target="#fig_0">Fig- ure 4(a)</ref> shows the original switch performance during recording. We, then, iteratively replay the corresponding control traffic over a similar switch in our isolated experimental setup. We replay the recorded data traffic to 1 port of the switch and connect hosts that send ICMP datagrams to the other ports. In each iteration, we have Ofreplay bisect the trace by OpenFlow message type, and check whether the symptom persists. When replaying the port and table statistic requests, we observe the behavior as shown in <ref type="figure" target="#fig_0">Figure 4(b)</ref>. Since the data traffic is synthetically generated, the amplitude of the CPU oscillation and the flow setup time variation is different from that in the original system. Still, the sawtooth pattern is clearly visible. This successful reproduction of the symptom helps us identify the issue to be related to port and table statistics requests. Note that these messages have been causing the anomaly, even though their</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.2">Switch CPU Inflation</head></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Counts</head><p>Match duration=181s in port=8 n packets=0 dl type=arp n bytes=3968 dl src=00:15:17:d1:fa:92 idle timeout=60 dl dst=ff:ff:ff:ff:ff:ff hard timeout=0 actions=FLOOD OFRewind thus, has proved useful in localizing the cause for the anomalous behavior of a black box component that would otherwise have been difficult to debug. Even though the bug in this case is related to a prototype OpenFlow device, the scenario as such (misbehaving black box component) and approach (debugging by replay and bisection of control-channel traffic) are arguably applicable to non-OpenFlow cases as well.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.3">Anomalous Forwarding</head><p>To investigate the performance of devices from a new vendor, Vendor C, we record the substrate and guest traffic for a set of flows, sending 10 second delayed ping between a pair of hosts attached to the switch from Vendor B (of-sw3 in <ref type="figure">Figure 3</ref>). We then use the device/port mapping feature of Ofreplay to play back traffic from c7 to c8 over port 8 and port 42 belonging to the switch from Vendor C, in <ref type="figure">Figure 3</ref>.</p><p>Upon replay, we observe an interesting limitation of the switch from Vendor C. The ping flow stalls at the ARP resolution phase. The ARP packets transmitted from host c7 are received by host c10, but not by c8 nor c9. The flow table entry created in of-sw4 during replay, is shown in <ref type="table" target="#tab_4">Table 2</ref>, similar to that created during the original run. We conclude that the FLOOD action is not being properly applied by the switch from Vendor C.</p><p>Careful observation reveals that traffic received on a "low port" (one of the first 24 ports) to be flooded to any "high ports" (last 24 ports) and vice-versa is not flooded correctly. Effectively, the flood is restricted within a 24 port group within the switch (lower or higher). This fact has been affirmed by the vendor, confirming the successful debugging.</p><p>We additionally perform the replay after adding static ARP entries to the host c7. In this case, we observe that flow setup time for the subsequent unicast ping traffic on Vendor C is consistently higher than that observed for Vendor B and Vendor A switches. This indicates that OFRewind has further potential in profiling switches and controllers.  </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.4">Invalid Port Translation</head><p>In this case study, we operate Ofreplay in the ctrl mode in order to debug a controller issue. The controller we focus on is the publicly available FlowVisor <ref type="bibr" target="#b34">[36]</ref>. FlowVisor (FV) is a special purpose OpenFlow controller that acts as a proxy between multiple OpenFlow switches and controllers (guests), and thus assumes the role of a hypervisor for the OpenFlow control plane (see <ref type="figure">Figure 3</ref>). To this end, the overall flow space is partitioned by FV into distinct classes, e.g., based on IP addresses and ports, and each guest is given control of a subset. Messages between switches and controllers are then filtered and translated accordingly.</p><p>We investigate an issue in where the switch from Vendor C works fine with the NOX controller, but not through the FV. We record the OpenFlow control plane traffic from the switch to FV in our production setup, as seen on the left side of <ref type="figure">Figure 5</ref>. We then replay the trace on a developer system, running Ofreplay, FV and the upstream controller on a single host for debugging. Ofreplay thus assumes the role of the switch.</p><p>Through repeated automated replay of the trace on the development host, we track down the source of the problem: It is triggered by a switch announcing a noncontiguous range of port numbers (e.g., 1, 3, 5). When FV translates a FLOOD action sent from the upstream controller to such a switch, it incorrectly expands the port range to a contiguous range, including ports that are not announced by the switch (e.g., 1, 2, 3, 4, 5). The switch then drops the invalid action.</p><p>Here, OFRewind proves useful in localizing the root cause for the failure. Replaying the problem in the development environment enables much faster turnaround times, and thus reduces debugging time. Moreover, it can be used to verify the software patch that fixes the defect.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.5">NOX PACKET-IN Parsing Error</head><p>We now investigate a problem, reported on the NOX <ref type="bibr" target="#b29">[31]</ref> development mailing list, where the NOX controller consistently drops the ARP reply packet from a specific host. The controller is running the pyswitch module.</p><p>The bug reporter provides a tcpdump of the traffic between their switch and the controller. We verify the existence of the bug by replaying the control traffic to our instance of the NOX. We then gradually increase the debug output from NOX as we play back the recorded OpenFlow messages to NOX.</p><p>Repeating this processes reveals the root cause of the problem: NOX deems the destination MAC address 00:26:55:da:3a:40 to be invalid. This is because the MAC address contains the byte 0x3a, which happens to be the binary equivalent of the character ':' in ASCII. This "fake" ASCII character causes the MAC address parser to interpret the MAC address as ASCII, leading to a parsing error and the dropped packet. Here, Ofreplay provides the necessary debugging context to faithfully reproduce a bug encountered in a different deployment, and leads us to the erroneous line of code. </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.6">Faulty Routing Advertisements</head><p>In a departure from OpenFlow network troubleshooting, we examine how OFRewind can be used to troubleshoot more general, event-driven network problems. We consider the common problem of a network suffering from a mis-configured or faulty router. In this case, we demonstrate how OFRewind can be advantageously used to identify the faulty component. We apply OFRewind to troubleshoot a documented bug (Quagga Bugzilla #235) detected in a version of the RIPv1 implementation of the Quagga <ref type="bibr" target="#b32">[34]</ref> software routing daemon. In the network topology given by <ref type="figure" target="#fig_1">Fig- ure 6</ref>, a network operator notices that shortly after upgrading Quagga on software router B, router C subsequently loses connectivity to Network 1. As routing control plane messages are a good example of low-volume guest control plane traffic, they can be recorded by Ofrecord always-on or, alternatively, as a precautionary measure during upgrades. Enabling flow creation sync markers for the low-volume routing control plane messages ensures the global ordering is preserved.</p><p>The observation that router C loses its route to Network 1 while router B maintains its route, keys the operator to record traffic arriving at and departing from B. An analysis of the Ofrecord flow summaries reveals that although RIPv1 advertisements arrive at B from A, no advertisements leave B toward C. Host-based debugging of the RIPd process can then be used on router B in conjunction with Ofreplay to replay the trigger sequence and inspect the RIPd execution state. This reveals the root cause of the bug -routes toward Network 1 are not announced by router B due to this (0.99.9) version's handling of classful vs. CIDR IP network advertisementsan issue inherent to RIPv1 on classless networks.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.7">Discussion</head><p>Without making any claims regarding the representativeness of the workload or switch behavior, in this limited space, we highlight in these case studies, the principle power and flexibility of OFRewind. We observe that OFRewind is capable of replaying subpopulations of control or data traffic, over a select network topology Ofrecord with substrate mode recording ofrecord-data</p><p>Ofrecord with guest mode recording, with one data port and sync beacons and barriers enabled <ref type="table">Table 3</ref>: Notation of controllers used in evaluation (switches and ports) or to select controllers, in a sandbox or production environment. We further note that OFRewind has potential in switch (or controller) benchmarking. By creating a sandbox for experimentation that can be exported to a standard replay format, a network operator can concretely specify the desired behavior to switch (or controller) design engineers. The sandbox can then be run within the premises of the switch (or controller software) vendor on a completely new set of devices and ports. On receiving the device (or software), the network operator can conduct further benchmarking to compare performance of different solutions in a fair manner.</p><p>Comparison with traditional recording Based on the case presented in the last section, we compare the effort of recording and instrumenting the network with and without OFRewind. Note that while the specific traffic responsible for the failure is small (RIP control plane messages), the total traffic volume on the involved links may be substantial. To attain a synchronized recording of this setup without OFRewind, and in the absence of host-based instrumentation, one has to (1) deploy monitoring servers that can handle the entire traffic on each link of interest, e.g., <ref type="bibr" target="#b27">[29]</ref>, and redeploy as link interests change. Then, one must either (2a) reconfigure both switches to enable span ports (often limited to 2 on midrange hardware) or (2b) introduce a tap into the physical wiring of the networks. Manually changing switch configurations runs a risk of operator error and introducing a tap induces downtime and is considered even riskier. (3) Additionally, the monitoring nodes may have to be synced to microsecond level to keep the flows globally ordered, requiring dedicated, expensive hardware. With OFRewind, one requires only a few commodity PCs acting as DataStores, and a single, central configuration change to record a consistent traffic trace.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5">Evaluation</head><p>When deploying OFRewind in a live production environment, we need to pay attention to its scalability, overhead and load on the switches. This section quantifies the general impact of deploying Ofrecord in a production network, and analyzes the replay accuracy of Ofreplay at higher flow rates. </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5.1">Ofrecord Controller Performance</head><p>A key requirement for practical deployment of Ofrecord in a production environment is recording performance. It must record fast enough to prevent a performance bottleneck in the controller chain.</p><p>Using cbench <ref type="bibr" target="#b11">[14]</ref>, we compare the controller performance exhibited by several well known controllers, listed in <ref type="table">Table 3</ref>. Of-simple and NOX are stand-alone controllers, while flowvisor and ofrecord act as a proxy to other controllers. Ofrecord is run twice: in substrate mode (ofrecord), recording the OpenFlow substrate traffic, and in guest mode (ofrecord-data), additionally performing OpenFlow message translations and outputting sync marker messages. Note that no actual guest traffic is involved in this experiment.</p><p>The experiment is performed on a single commodity server (Intel Xeon L5420, 2.5 GHz, 8 cores, 16 GB RAM, 4xSeagate SAS HDDs in a RAID 0 setup). We simulate, using Cbench, 1-64 switches connecting to the controller under test, and send back-to-back PACKET-IN messages to measure the maximum flow rate the controller can handle. Cbench reports the current flow rate once per second. We let each experiment run for 50 seconds, and remove the first and last 4 results for warmup and cool-down. We conclude that Ofrecord , while outperformed by ofsimple in control plane performance, is unlikely to create a bottleneck in a typical OpenFlow network, which often includes a FlowVisor instance and guest domain controllers running more complex policies on top of NOX. Note that all controllers except nox-pyswitch perform an order of magnitude better than the maximum flow rates supported by current prototype OpenFlow hardware implementations (max. 1,000 flows/s).</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5.2">Switch Performance During Record</head><p>When Ofrecord runs in guest mode, switches must handle an increase in OpenFlow control plane messages due to the sync markers. Additionally, FLOW-MOD and PACKET-OUT messages contain additional actions for mirroring data to the DataStores. This may influence the flow arrival rate that can be handled by a switch.</p><p>To investigate the impact of Ofrecord deployment on switch behavior, we use a test setup with two 8-core servers with 8 interfaces each, wired to two prototype OpenFlow hardware switches from Vendor A and Vendor B. We measure the supported flow arrival rates by generating minimum sized UDP packets with increasing destination port numbers in regular time intervals. Each packet thus creates a new flow entry. We record and count the packets at the sending and the receiving interfaces. Each run lasts for 60 seconds, then the UDP packet generation rate is increased. <ref type="figure" target="#fig_5">Figure 8</ref> presents the flow rates supported by the switches when controlled by ofrecord, ofrecord-data, and of-simple. We observe that all combinations of controllers and switches handle flow arrival rates of at least 200 flows/s. For higher flow rates, the Vendor B switch is CPU limited and the additional messages created by Ofrecord result in reduced flow rates (ofrecord: 247 flows/s, ofrecord-data: 187) when compared to of-simple (393 flows/s). Vendor A switch does not drop flows up to an ingress rate of 400 flows/s. However, it peaks at 872 flows/s for ofrecord-data, 972 flows/s for ofrecord and 996 flows/s for of-simple. This indicates that introducing Ofrecord imposes an acceptable performance penalty on the switches.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5.3">DataStore Scalability</head><p>Next we analyze the scalability of the DataStores. Note that Ofrecord is not limited to using a single DataStore. Indeed, the aggregate data plane traffic (T s bytes in c F flows) can be distributed onto as many DataStores as necessary, subject to the number of available switch ports. We denote the number of DataStores with n and enumerate each DataStore D i subject to 0 â‰¤ i &lt; n. The traffic volume assigned to each DataStore is T i , such that T s = ñ®½™ T i . The flow count on each DataStore is c i . The main overhead when using Ofrecord is caused by the sync markers that are flooded to all DataStores at the same time. Thus, their number limits the scalability of the system. Flow-sync markers are minimum-sized Ethernet frames that add constant overhead (Î¸ = 64B) per new flow. Accordingly, the absolute overhead for each DataStore is: Î˜ i = Î¸ Â· c i . The absolute overhead for the entire system is Î˜ = ñ®½™ Î˜ i = Î¸ Â· c F , the relative overhead is: Î˜ rel = Î˜ Ts . In the Stanford production network, of four switches with one DataStore each, a 9 hour day period on a workday in July 2010 generated c F = 3, 891, 899 OpenFlow messages that required synchronization. During that period, we observed 87.977 GB of data plane traffic. Thus, the overall relative overhead is Î˜ rel = 1.13%, small enough to not impact the capacity, and allow scaling up the deployment to a larger number of DataStores.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5.4">End-to-End Reliability And Timing</head><p>We now investigate the end-to-end reliability and timing precision of OFRewind by combining Ofrecord and Ofreplay. We use minimum size flows consisting of single UDP packets sent out at a uniform rate to obtain a worst-case bound. We vary the flow rate to investigate scalability. For each run, we first record the traffic with Ofrecord in guest mode with flow sync markers enabled. Then, we play back the trace and analyze the end-to-end drop rate and timing accuracy. We use a two-server setup connected by a single switch of Vendor B.    </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5.5">Scaling Further</head><p>We now discuss from a theoretical standpoint the limits of scalability intrinsic to the design of OFRewind when scaling beyond currently available production networks or testbeds. As with other OpenFlow-based systems, the performance of OFRewind is limited by the switch flow table size and the switch performance when updating and querying the flow table. We observe these to be the most common performance bottlenecks in OpenFlow setups today. Controller domain scalability is limited by the capacity of the link that carries the OpenFlow control channel, and the network and CPU performance of the controller. Specific to OFRewind, the control plane components require sufficient I/O performance to record the selected OpenFlow messages -not a problem in typical developments. When recording data plane network traffic, DataStore network and storage I/O capacity must be sufficient to handle the aggregate throughput of the selected flows. As load-balancing is performed over DataStores at flow granularity, OFRewind cannot fully record individual flows that surpass the network or storage I/O capacity of a single DataStore. When flow creation markers are used for synchronization, the overhead grows lin-early with the number of DataStores and the number of flows. Thus, when the average flow size in a network is small, and synchronization is required, this may limit the scalability of a controller domain. For scaling further, OFRewind may in the future be extended to a distributed controller domain. While a quantitative evaluation is left for future study, we note that the lock-step approach taken to coordinate the replay of multiple instances of Datarecord and Datareplay (see Section 2.6) can be extended to synchronize multiple instances of OFRewind running as proxies to instances of a distributed controller. The same trade-offs between accuracy and performance apply here as well.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="6">Related Work</head><p>Our work builds on a wealth of related work in the areas of recording and summarizing network traffic, replay debugging based on networks and on host primitives, automated problem diagnosis, pervasive tracing, and testing large-scale systems.</p><p>Recording/summarizing network traffic: Apart from the classical tool tcpdump <ref type="bibr">[5]</ref>, different approaches have been suggested in the literature to record highvolume network traffic, by performance optimization <ref type="bibr" target="#b9">[12,</ref><ref type="bibr" target="#b16">18]</ref>, by recording abstractions of the network traffic <ref type="bibr" target="#b17">[19,</ref><ref type="bibr" target="#b25">27,</ref><ref type="bibr" target="#b12">15]</ref>, or omitting parts of the traffic <ref type="bibr" target="#b19">[21,</ref><ref type="bibr" target="#b24">26]</ref>. Our selection strategies borrow many of their ideas, more can be incorporated for improved performance. Note that these systems do not target network replay, and that all integrated control and data plane monitoring systems face scalability challenges when monitoring highthroughput links as the monitor has to consider all data plane traffic, even if only a subset is to be recorded. Similar to our approach of recording in a split-architecture environment, OpenSafe <ref type="bibr" target="#b10">[13]</ref> leverages OpenFlow for flexible network monitoring but does not target replay or provide temporal consistency among multiple monitors. Complementary to our work, OpenTM <ref type="bibr" target="#b37">[39]</ref> uses OpenFlow statistics to estimate the traffic matrix in a controller domain. MeasuRouting <ref type="bibr" target="#b35">[37]</ref> enables flexible and optimized placement of traffic monitors with the help of OpenFlow, and could facilitate non-local DataStores in OFRewind.</p><p>Network replay debugging: Tcpdump and tcpreplay <ref type="bibr">[6]</ref> are the closest siblings to our work that target network replay debugging. In fact, OFRewind uses these tools internally for data plane recording and replay, but significantly adds to their scope, scalability, and coherence: It records from a controller domain instead of a single network interface, can select traffic on the control plane and load-balance multiple DataStores for scalability, and can record a temporally consistent trace of the controller domain.</p><p>Replay debugging based on host primitives: Complementary to our network based replay, there exists a wealth of approaches that enable replay debugging for distributed systems on end-hosts <ref type="bibr" target="#b5">[8,</ref><ref type="bibr" target="#b15">17,</ref><ref type="bibr" target="#b28">30]</ref>. DCR <ref type="bibr" target="#b6">[9]</ref>, a recent approach, emphasizes the importance of the control plane for debugging. These provide fully deterministic replay capabilities important for debugging complex end-host systems. They typically cannot be used for black box network components.</p><p>Automated problem diagnosis: A deployment of OFRewind can be complemented by a system that focuses on automated problem diagnosis. Sherlock diagnoses network problems based on passive monitoring <ref type="bibr" target="#b30">[32]</ref>, and other systems infer causality based on collected message traces <ref type="bibr" target="#b4">[7,</ref><ref type="bibr" target="#b36">38]</ref>. They target the debugging and profiling of individual applications while our purpose is to support debugging of networks.</p><p>Pervasive tracing: Some proposals integrate improved in-band diagnosis and tracing support directly into the Internet, e.g., by pervasively adding a trace ID to correlated requests <ref type="bibr" target="#b33">[35]</ref> or by marking and remembering recently seen packets throughout the Internet <ref type="bibr" target="#b8">[11]</ref>. We focus on the more controllable environment of a single administrative domain, providing replay support directly in the substrate, with no changes required to the network.</p><p>Testing large-scale networks: Many approaches experience scalability issues when dealing with large networks. The authors of <ref type="bibr" target="#b20">[22]</ref> suggest to scale down large networks and map them to smaller virtualized testbeds, combining time dilation <ref type="bibr" target="#b21">[23]</ref> and disk I/O simulation to enable accurate behavior. This idea may aid scaling replay testbeds for OFRewind.</p><p>curate enough for many use cases. However, further improvements would widen its applicability. Furthermore, synchronization among multiple Ofrecord and Ofreplay instances is desirable, but nontrivial, and might require hardware support for accurate time-stamping <ref type="bibr" target="#b27">[29]</ref>.</p><p>In a possible extension of this work, Ofrecord and Ofreplay are combined to form an online replay mode. Recorded messages are directly replayed upon arrival, e.g., to a different set of hardware or to a different substrate slice. This allows for online investigation and troubleshooting of failures in the sense of a Mirror VNet <ref type="bibr" target="#b38">[40]</ref>.</p><p>Our next steps involve gaining further experience with more complex use cases. We plan to collect and maintain a standard set of traces that serve as input for automated regression tests, as well as benchmarks, for testing new network components. Thus, we expect OFRewind to play a major role in helping ongoing OpenFlow deployment projects 4 resolve production problems.</p></div><figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_0"><head>Figure 4 :</head><label>4</label><figDesc>Figure 4: Sawtooth CPU pattern reproduced during replay of port and table STATS-REQUEST messages. Figure (c) shows no observable temporal correlation to message arrivals.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_1"><head>Figure 6 :</head><label>6</label><figDesc>Figure 6: Quagga RIPv1 bug #235</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_2"><head></head><label></label><figDesc>of-simple reference controller emulating a learning switch nox-pyswitch NOX controller running Python pyswitch module nox-switch NOX controller running C-language switch module flowvisor Flowvisor controller, running a simple allow-all pol- icy for a single guest controller ofrecord</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_3"><head>Figure 7 :</head><label>7</label><figDesc>Figure 7: # Switches vs. median flow rate throughputs for different controllers using cbench.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_4"><head>Figure 7 presents the results.</head><label>7</label><figDesc>We first compare the flow rates of the stand-alone controllers. Nox-pyswitch exhibits a median flow rate of 5,629 flows/s over all switches, nox-switch reports 42,233 flows/s, and of- simple 78,908 flows/s. Consequently, we choose of- simple as the client controller for the proxy controllers. We next compare flowvisor and ofrecord. Flowvisor exhibits a median flow throughput of 35,595 flows/s. Ofrecord reports 42,380 flows/s, and ofrecord-data re- ports 41,743. There is a slight variation in the perfor- mance of ofrecord, introduced by the I/O overhead. The minimum observed flow rates are 28,737 and 22,248. We note that all controllers exhibit worse maximum through- put when only connected to a single switch, but show similar performance for 2 âˆ’ 64 switches.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_5"><head>Figure 8 :</head><label>8</label><figDesc>Figure 8: Mean rate of flows sent vs. successfully received with controllers ofrecord, ofrecord-data, and ofsimple and switches from Vendor A and B.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_6"><head>Figure 9 :</head><label>9</label><figDesc>Figure 9: End-to-end flow time accuracy as a boxplot of the relative deviation from expected inter-flow delay.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_7"><head>Figure 9 presents</head><label>9</label><figDesc>Figure 9 presents the deviations experienced by the flows during the different phases of the experiment. Note that while there are certainly outliers for which the timing is far off, the median inter-flow delay remains close to the optimum for up to 100 Flows/s. Higher rates show room for improvement.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_2" validated="false"><head></head><label></label><figDesc>limitations: While OpenFlow provides a useful basis for implementing OFRewind, it does not support all the features required to realize all opera- tion modes. OpenFlow does not currently support sam- pling of either flows or packets. Thus, flow sampling is performed by Ofrecord , and packet sampling is per- formed by Datarecord . This imposes additional load on the channel between the switches and the DataStores</figDesc><table>ñ®½™ñ®½™ 

ñ®½™ñ®½™ 
ñ®½™ñ®½™ 
ñ®½™ñ®½™ñ®½™ñ®½™ñ®½™ñ®½™ñ®½™ñ®½™ñ®½™ñ®½™ ñ®½™ñ®½™ñ®½™ñ®½™ñ®½™ñ®½™ñ®½™ñ®½™ ñ®½™ñ®½™ñ®½™ñ®½™ñ®½™ñ®½™ñ®½™ñ®½™ 
ñ®½™ñ®½™ñ®½™ñ®½™ 

ñ®½™ñ®½™ñ®½™ñ®½™ñ®½™ ñ®½™ñ®½™ñ®½™ñ®½™ ñ®½™ 

ñ®½™ñ®½™ñ®½™ñ®½™ ñ®½™ñ®½™ñ®½™ 

ñ®½™ñ®½™ñ®½™ñ®½™ñ®½™ ñ®½™ñ®½™ñ®½™ñ®½™ ñ®½™ñ®½™ñ®½™ñ®½™ñ®½™ ñ®½™ñ®½™ñ®½™ñ®½™ 
ñ®½™ñ®½™ñ®½™ñ®½™ñ®½™ ñ®½™ñ®½™ñ®½™ñ®½™ ñ®½™ñ®½™ñ®½™ñ®½™ñ®½™ ñ®½™ñ®½™ñ®½™ñ®½™ ñ®½™ñ®½™ñ®½™ 

ñ®½™ñ®½™ñ®½™ñ®½™ñ®½™ ñ®½™ñ®½™ñ®½™ ñ®½™ñ®½™ñ®½™ ñ®½™ñ®½™ñ®½™ñ®½™ñ®½™ ñ®½™ñ®½™ñ®½™ñ®½™ 

ñ®½™ñ®½™ñ®½™ñ®½™ñ®½™ ñ®½™ñ®½™ñ®½™ ñ®½™ñ®½™ñ®½™ñ®½™ ñ®½™ñ®½™ñ®½™ñ®½™ ñ®½™ñ®½™ñ®½™ñ®½™ ñ®½™ 
ñ®½™ñ®½™ñ®½™ñ®½™ñ®½™ ñ®½™ñ®½™ 

ñ®½™ñ®½™ñ®½™ñ®½™ñ®½™ ñ®½™ñ®½™ñ®½™ñ®½™ ñ®½™ 

ñ®½™ñ®½™ñ®½™ñ®½™ñ®½™ ñ®½™ñ®½™ñ®½™ ñ®½™ñ®½™ñ®½™ ñ®½™ñ®½™ñ®½™ñ®½™ñ®½™ ñ®½™ñ®½™ñ®½™ñ®½™ñ®½™ ñ®½™ñ®½™ 
ñ®½™ñ®½™ñ®½™ñ®½™ ñ®½™ñ®½™ñ®½™ñ®½™ñ®½™ ñ®½™ñ®½™ñ®½™ 
ñ®½™ñ®½™ñ®½™ñ®½™ ñ®½™ 

(a) Ofrecord 

ñ®½™ñ®½™ 
ñ®½™ñ®½™ 
ñ®½™ñ®½™ 
ñ®½™ñ®½™ñ®½™ñ®½™ñ®½™ñ®½™ñ®½™ñ®½™ñ®½™ñ®½™ ñ®½™ñ®½™ñ®½™ñ®½™ñ®½™ñ®½™ñ®½™ñ®½™ ñ®½™ñ®½™ñ®½™ñ®½™ñ®½™ñ®½™ñ®½™ñ®½™ 
ñ®½™ñ®½™ñ®½™ñ®½™ 

ñ®½™ñ®½™ñ®½™ñ®½™ñ®½™ ñ®½™ñ®½™ñ®½™ñ®½™ ñ®½™ñ®½™ñ®½™ñ®½™ñ®½™ ñ®½™ñ®½™ñ®½™ñ®½™ 

ñ®½™ñ®½™ñ®½™ñ®½™ñ®½™ ñ®½™ñ®½™ñ®½™ ñ®½™ñ®½™ñ®½™ ñ®½™ñ®½™ñ®½™ ñ®½™ñ®½™ñ®½™ñ®½™ 

ñ®½™ñ®½™ñ®½™ñ®½™ñ®½™ ñ®½™ñ®½™ñ®½™ñ®½™ ñ®½™ñ®½™ñ®½™ 

ñ®½™ñ®½™ñ®½™ñ®½™ñ®½™ ñ®½™ñ®½™ñ®½™ñ®½™ ñ®½™ 

ñ®½™ñ®½™ñ®½™ñ®½™ñ®½™ ñ®½™ñ®½™ñ®½™ 

ñ®½™ñ®½™ñ®½™ñ®½™ñ®½™ñ®½™ ñ®½™ñ®½™ñ®½™ñ®½™ ñ®½™ñ®½™ 

ñ®½™ñ®½™ñ®½™ñ®½™ñ®½™ ñ®½™ 

ñ®½™ñ®½™ñ®½™ñ®½™ñ®½™ ñ®½™ñ®½™ñ®½™ñ®½™ ñ®½™ 

(b) Ofreplay 

</table></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_3" validated="false"><head></head><label></label><figDesc>il- lustrates the connectivity. All switches in the network have a control-channel to Ofrecord . DataStores running Datarecord and Datareplay are attached to the switches as necessary. We use NOX [31], unless specified oth- erwise, as the high level controller performing the actual routing decisions. It includes the routing module, which</figDesc><table>Case study 

Class 
OF-specific 
Switch CPU Inflation 
black box (switch) 
no 
Anomalous Forwarding 
black box (switch) 
yes 
Invalid Port Translation 
OF controller 
yes 
NOX Parsing Error 
OF controller 
yes 
Faulty Route Advertisements 
software router 
no 

Table 1: Overview of the case studies 

ñ®½™ñ®½™ñ®½™ñ®½™ñ®½™ñ®½™ 

ñ®½™ñ®½™ñ®½™ñ®½™ñ®½™ñ®½™ 

ñ®½™ñ®½™ñ®½™ñ®½™ñ®½™ñ®½™ñ®½™ 

ñ®½™ñ®½™ñ®½™ñ®½™ñ®½™ñ®½™ 

ñ®½™ñ®½™ñ®½™ñ®½™ñ®½™ñ®½™ñ®½™ 

ñ®½™ñ®½™ñ®½™ñ®½™ñ®½™ñ®½™ 

ñ®½™ñ®½™ñ®½™ñ®½™ñ®½™ñ®½™ñ®½™ 

ñ®½™ñ®½™ 
ñ®½™ñ®½™ 




ñ®½™ñ®½™ 

ñ®½™ñ®½™ 

ñ®½™ñ®½™ 
ñ®½™ñ®½™ 

ñ®½™ñ®½™ñ®½™ñ®½™ñ®½™ñ®½™ 

ñ®½™ñ®½™ñ®½™ñ®½™ñ®½™ñ®½™ñ®½™ 

ñ®½™ñ®½™ñ®½™ñ®½™ñ®½™ñ®½™ 

ñ®½™ñ®½™ñ®½™ñ®½™ñ®½™ñ®½™ñ®½™ 

ñ®½™ñ®½™ñ®½™ñ®½™ñ®½™ñ®½™ñ®½™ñ®½™ñ®½™ 
ñ®½™ñ®½™ñ®½™ñ®½™ñ®½™ñ®½™ñ®½™ñ®½™ 
ñ®½™ñ®½™ñ®½™ñ®½™ñ®½™ñ®½™ñ®½™ñ®½™ñ®½™ñ®½™ 

ñ®½™ñ®½™ñ®½™ñ®½™ñ®½™ñ®½™ñ®½™ 

ñ®½™ñ®½™ 
ñ®½™ñ®½™ñ®½™ 

ñ®½™ñ®½™ñ®½™ñ®½™ñ®½™ñ®½™ñ®½™ 

ñ®½™ñ®½™ñ®½™ñ®½™ñ®½™ñ®½™ñ®½™ 
ñ®½™ñ®½™ñ®½™ñ®½™ñ®½™ñ®½™ 

ñ®½™ñ®½™ñ®½™ñ®½™ñ®½™ñ®½™ 

</table></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_4" validated="false"><head>Table 2 :</head><label>2</label><figDesc></figDesc><table>Vendor C switch flow table entry, during replay. 

arrival rate (24 messages per minute) is not in any way 
temporally correlated with the perceived symptoms (30-
minute CPU sawtooth pattern). We reported this issue to 
the vendor, since at this point we have no more visibility 
into the switch software implementation. 
</table></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_6" validated="false"><head>Table 4 sum</head><label>4</label><figDesc>- marizes the results. Flow rates up to 200 Flows/s are handled without drops. Due to the flow sync markers, no packet reorderings occur and all flows are replayed in the correct order. The exact inter-flow timings vary though, upwards from 50 Flows/s. To investigate the timing accuracy further, we analyze the relative deviation from the expected inter-flow delay.</figDesc><table>Rate (Flows/s) 
Drop % 
sd(timing, in ms) 
5 
0 % 
4.5 
10 
0 % 
15.6 
20 
0 % 
21.1 
50 
0 % 
23.4 
100 
0 % 
10.9 
200 
0 % 
13.9 
400 
19% 
15.8 
800 
41 % 
21.5 

</table></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_7" validated="false"><head>Table 4 :</head><label>4</label><figDesc></figDesc><table>OFRewind-end-to-end measurements with 
uniformly spaced flows consisting of 1 UDP packet 

5 
10 
20 
50 
100 
200 
0.05 0.20 1.00 5.00 20.00 

Rate [Flows/s] 
rel. deviation from exp. inter flow delay 

</table></figure>

			<note place="foot" n="1"> A BARRIER message ensures that all prior OpenFlow messages are processed before subsequent messages are handled. In its absence, messages may be reordered.</note>

			<note place="foot" n="2"> It does support a cut-off for packets forwarded to the controller. 3 Expiration after a specified amount of time is supported.</note>
		</body>
		<back>

			<div type="acknowledgement">
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="7">Summary</head><p>This paper addresses an important void in debugging operational networks -scalable, economically feasible recording and replay capabilities. We present the design, implementation, and usage of OFRewind, a system capable of recording and replaying network events, motivated by our experiences troubleshooting network device and control plane anomalies. OFRewind provides control over the topology (choice of devices and their ports), timeline, and selection of traffic to be collected and then replayed in a particular debugging run. Using simple case studies, we highlight the potential of OFRewind for not only reproducing operational problems encountered in a production deployment but also localizing the network events that trigger the error. According to our evaluation, the framework is lightweight enough to be enabled per default in production networks.</p><p>Some challenges associated with network replay are still under investigation, including improved timing accuracy, multi-instance synchronization, and online replay. OFRewind can preserve flow order, and its timing is ac-</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="8">Acknowledgements</head><p>We wish to extend gratitude toward our shepherd, George Candea, for his guidance and help in shaping our final paper version, as well as to our anonymous reviewers for their remarkably detailed and insightful feedback, and to Deutsche Telekom Laboratories and the GLAB project for funding our work.</p></div>
			</div>

			<div type="references">

				<listBibl>

<biblStruct xml:id="b0">
	<monogr>
		<title/>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Ofelia</forename><surname>Eu Project</surname></persName>
		</author>
		<ptr target="http://www.fp7-ofelia.eu/" />
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b1">
	<analytic>
		<title/>
		<ptr target="http://bit.ly/ieforces" />
	</analytic>
	<monogr>
		<title level="j">IETF Working Group Forces</title>
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b2">
	<analytic>
		<title/>
		<ptr target="http://www.necam.com/PFlow/" />
	</analytic>
	<monogr>
		<title level="j">NEC Programmable Networking Solutions</title>
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b3">
	<monogr>
		<title level="m" type="main">OFRewind Code. bit.ly/ofrewind</title>
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b4">
	<analytic>
		<title level="a" type="main">Performance debugging for distributed systems of black boxes</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Aguilera</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. ACM SOSP</title>
		<meeting>ACM SOSP</meeting>
		<imprint>
			<date type="published" when="2003" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b5">
	<analytic>
		<title level="a" type="main">Odr: Output-deterministic replay for multicore debugging</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">G</forename><surname>Altekar</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">I</forename><surname>Stoica</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. ACM SOSP</title>
		<meeting>ACM SOSP</meeting>
		<imprint>
			<date type="published" when="2009" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b6">
	<monogr>
		<title level="m" type="main">Dcr: Replay debugging for the datacenter</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">G</forename><surname>Altekar</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">I</forename><surname>Stoica</surname></persName>
		</author>
		<idno>UCB/EECS-2010-74</idno>
		<imprint>
			<date type="published" when="2010" />
		</imprint>
		<respStmt>
			<orgName>UC Berkeley</orgName>
		</respStmt>
	</monogr>
<note type="report_type">Technical Report</note>
</biblStruct>

<biblStruct xml:id="b7">
	<analytic>
		<title level="a" type="main">Focus replay debugging effort on the control plane</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">G</forename><surname>Altekar</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">I</forename><surname>Stoica</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. USENIX HotDep</title>
		<meeting>USENIX HotDep</meeting>
		<imprint>
			<date type="published" when="2010" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b8">
	<analytic>
		<title level="a" type="main">Netreplay: a new network primitive</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Anand</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Akella</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. HOTMETRICS</title>
		<meeting>HOTMETRICS</meeting>
		<imprint>
			<date type="published" when="2009" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b9">
	<monogr>
		<title level="m" type="main">Full Packet Capture and Offline Analysis on 1 and 10 Gb/s Networks</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">E</forename><surname>Anderson</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Arlitt</surname></persName>
		</author>
		<idno>HPL-2006-156</idno>
		<imprint>
			<date type="published" when="2006" />
		</imprint>
		<respStmt>
			<orgName>HP Labs</orgName>
		</respStmt>
	</monogr>
<note type="report_type">Technical Report</note>
</biblStruct>

<biblStruct xml:id="b10">
	<analytic>
		<title level="a" type="main">Extensible and scalable network monitoring using opensafe</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><forename type="middle">R</forename><surname>Ballard</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">I</forename><surname>Rae</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Akella</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. INM/WREN</title>
		<meeting>INM/WREN</meeting>
		<imprint>
			<date type="published" when="2010" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b11">
	<monogr>
		<title/>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Cbench -Controller</forename><surname>Benchmarker</surname></persName>
		</author>
		<ptr target="www.openflowswitch.org/wk/index.php/Oflops" />
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b12">
	<analytic>
		<title level="a" type="main">Resource-aware Multi-format Network Security Data Storage</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">E</forename><surname>Cooke</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Myrick</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Rusek</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">F</forename><surname>Jahanian</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. SIGCOMM LSAD Workshop</title>
		<meeting>SIGCOMM LSAD Workshop</meeting>
		<imprint>
			<date type="published" when="2006" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b13">
	<monogr>
		<title level="m" type="main">There are ongoing production deployments of OpenFlow-enabled networks in Asia</title>
		<imprint>
			<pubPlace>Europe, as well as the US</pubPlace>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b14">
	<analytic>
		<title level="a" type="main">Replay debugging for distributed applications</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Geels</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. USENIX ATC</title>
		<meeting>USENIX ATC</meeting>
		<imprint>
			<date type="published" when="2006" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b15">
	<analytic>
		<title level="a" type="main">Two hardware-based approaches for deterministic multiprocessor replay</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><forename type="middle">R</forename><surname>Hower</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Comm. ACM</title>
		<imprint>
			<biblScope unit="volume">52</biblScope>
			<biblScope unit="issue">6</biblScope>
			<date type="published" when="2009" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b16">
	<analytic>
		<title level="a" type="main">Hyperion: High Volume Stream Archival for Retrospective Querying</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><surname>Desnoyers</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><forename type="middle">J</forename><surname>Shenoy</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. USENIX ATC</title>
		<meeting>USENIX ATC</meeting>
		<imprint>
			<date type="published" when="2007" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b17">
	<analytic>
		<title level="a" type="main">Enabling Real-Time Querying of Live and Historical Stream Data</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">F</forename><surname>Reiss</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. Statistical &amp; Scientific Database Management</title>
		<meeting>Statistical &amp; Scientific Database Management</meeting>
		<imprint>
			<date type="published" when="2007" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b18">
	<monogr>
		<title level="m" type="main">GENI: Global Environment for Network Innovations</title>
		<ptr target="http://www.geni.net" />
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b19">
	<analytic>
		<title level="a" type="main">Shunting: A Hardware/Software Architecture for Flexible, High-performance Network Intrusion Prevention</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><forename type="middle">M</forename><surname>Gonzalez</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">V</forename><surname>Paxson</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">N</forename><surname>Weaver</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. 14th ACM CCS</title>
		<meeting>14th ACM CCS</meeting>
		<imprint>
			<date type="published" when="2007" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b20">
	<analytic>
		<title level="a" type="main">Diecast: Testing distributed systems with an accurate scale model</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Gupta</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">K</forename><surname>Vishwanath</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Vahdat</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. USENIX NSDI</title>
		<meeting>USENIX NSDI</meeting>
		<imprint>
			<date type="published" when="2008" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b21">
	<analytic>
		<title level="a" type="main">To infinity and beyond: Time warped network emulation</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Gupta</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. ACM SOSP</title>
		<meeting>ACM SOSP</meeting>
		<imprint>
			<date type="published" when="2005" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b22">
	<analytic>
		<title level="a" type="main">Debugging operating system with time-traveling virtual machines</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><forename type="middle">T</forename><surname>King</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">G</forename><forename type="middle">W</forename><surname>Dunlap</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><forename type="middle">M</forename><surname>Chen</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. USENIX ATC</title>
		<meeting>USENIX ATC</meeting>
		<imprint>
			<date type="published" when="2005" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b23">
	<analytic>
		<title level="a" type="main">Time, clocks, and the ordering of events in a distributed system</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">L</forename><surname>Lamport</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Comm. ACM</title>
		<imprint>
			<biblScope unit="volume">21</biblScope>
			<biblScope unit="issue">7</biblScope>
			<date type="published" when="1978" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b24">
	<analytic>
		<title level="a" type="main">Enriching network security analysis with time travel</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">G</forename><surname>Maier</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Sommer</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">H</forename><surname>Dreger</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Feldmann</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">V</forename><surname>Paxson</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">F</forename><surname>Schneider</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. ACM SIGCOMM</title>
		<meeting>ACM SIGCOMM</meeting>
		<imprint>
			<date type="published" when="2008" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b25">
	<analytic>
		<title level="a" type="main">Monitoring &amp; Forensic Analysis for Wireless Networks</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">K</forename><forename type="middle">P</forename><surname>Mcgrath</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Nelson</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. Conf. on Internet Surveillance and Protection</title>
		<meeting>Conf. on Internet Surveillance and Protection</meeting>
		<imprint>
			<date type="published" when="2006" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b26">
	<analytic>
		<title level="a" type="main">Openflow: enabling innovation in campus networks</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">N</forename><surname>Mckeown</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><surname>Anderson</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">H</forename><surname>Balakrishnan</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">G</forename><surname>Parulkar</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">L</forename><surname>Peterson</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Rexford</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Shenker</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Turner</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">ACM CCR</title>
		<imprint>
			<biblScope unit="volume">38</biblScope>
			<biblScope unit="issue">2</biblScope>
			<date type="published" when="2008" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b27">
	<analytic>
		<title level="a" type="main">Precision timestamping of network packets</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Micheel</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Donnelly</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">I</forename><surname>Graham</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. ACM IMW</title>
		<meeting>ACM IMW</meeting>
		<imprint>
			<date type="published" when="2001" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b28">
	<analytic>
		<title level="a" type="main">Capo: a software-hardware interface for practical deterministic multiprocessor replay</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><surname>Montesinos</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Hicks</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><forename type="middle">T</forename><surname>King</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Torrellas</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. ACM ASPLOS</title>
		<meeting>ACM ASPLOS</meeting>
		<imprint>
			<date type="published" when="2009" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b29">
	<monogr>
		<title level="m" type="main">NOX -An OpenFlow Controller</title>
		<ptr target="www.noxrepo.org" />
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b30">
	<analytic>
		<title level="a" type="main">Towards highly reliable enterprise network services via inference of multi-level dependencies</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><surname>Bahl</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. ACM SIGCOMM</title>
		<meeting>ACM SIGCOMM</meeting>
		<imprint>
			<date type="published" when="2007" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b31">
	<monogr>
		<title level="m" type="main">Inmon corporation&apos;s sflow: A method for monitoring traffic in switched and routed networks</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><surname>Phaal</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Panchen</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">N</forename><surname>Mckee</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2001" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b32">
	<monogr>
		<title level="m" type="main">Quagga Routing Suite. www.quagga.net</title>
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b33">
	<analytic>
		<title level="a" type="main">X-trace: A pervasive network tracing framework</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Fonseca</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. USENIX NSDI</title>
		<meeting>USENIX NSDI</meeting>
		<imprint>
			<date type="published" when="2007" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b34">
	<analytic>
		<title level="a" type="main">Carving Research Slices Out of Your Production Networks with OpenFlow</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Sherwood</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. ACM SIGCOMM Demo Session</title>
		<meeting>ACM SIGCOMM Demo Session</meeting>
		<imprint>
			<date type="published" when="2009" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b35">
	<analytic>
		<title level="a" type="main">MeasuRouting: A Framework for Routing Assisted Traffic Monitoring</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Raza</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">G</forename><surname>Huang</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C.-N</forename><surname>Chuah</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Seetharaman</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Singh</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. IEEE INFOCOM</title>
		<meeting>IEEE INFOCOM</meeting>
		<imprint>
			<date type="published" when="2010" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b36">
	<analytic>
		<title level="a" type="main">Wap5: black-box performance debugging for wide-area systems</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><surname>Reynolds</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><forename type="middle">L</forename><surname>Wiener</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><forename type="middle">C</forename><surname>Mogul</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><forename type="middle">K</forename><surname>Aguilera</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Vahdat</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. WWW</title>
		<meeting>WWW</meeting>
		<imprint>
			<date type="published" when="2006" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b37">
	<analytic>
		<title level="a" type="main">OpenTM: traffic matrix estimator for OpenFlow networks</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Tootoonchian</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Ghobadi</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Y</forename><surname>Ganjali</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. PAM</title>
		<meeting>PAM</meeting>
		<imprint>
			<date type="published" when="2010" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b38">
	<analytic>
		<title level="a" type="main">Network Troubleshooting with Mirror VNets</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Wundsam</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Mehmood</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Feldmann</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">O</forename><surname>Maennel</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. IEEE Globecom 2010 FutureNet-III workshop</title>
		<meeting>IEEE Globecom 2010 FutureNet-III workshop</meeting>
		<imprint>
			<date type="published" when="2010-12" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b39">
	<analytic>
		<title level="a" type="main">Tesseract: A 4D Network Control Plane</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">H</forename><surname>Yan</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><forename type="middle">A</forename><surname>Maltz</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><forename type="middle">S E</forename><surname>Ng</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">H</forename><surname>Gogineni</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">H</forename><surname>Zhang</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Z</forename><surname>Cai</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. USENIX NSDI</title>
		<meeting>USENIX NSDI</meeting>
		<imprint>
			<date type="published" when="2007" />
		</imprint>
	</monogr>
</biblStruct>

				</listBibl>
			</div>
		</back>
	</text>
</TEI>
