<?xml version="1.0" encoding="UTF-8"?>
<TEI xmlns="http://www.tei-c.org/ns/1.0" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
xsi:schemaLocation="http://www.tei-c.org/ns/1.0 /Users/atharsefid/Desktop/grobid-0.5.3/grobid-home/schemas/xsd/Grobid.xsd"
 xmlns:xlink="http://www.w3.org/1999/xlink">
	<teiHeader xml:lang="en">
		<encodingDesc>
			<appInfo>
				<application version="0.5.3" ident="GROBID" when="2020-09-29T01:58+0000">
					<ref target="https://github.com/kermitt2/grobid">GROBID - A machine learning software for extracting information from scholarly documents</ref>
				</application>
			</appInfo>
		</encodingDesc>
		<fileDesc>
			<titleStmt>
				<title level="a" type="main">Multicore OS benchmarks: we can do better</title>
			</titleStmt>
			<publicationStmt>
				<publisher/>
				<availability status="unknown"><licence/></availability>
			</publicationStmt>
			<sourceDesc>
				<biblStruct>
					<analytic>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Ihor</forename><surname>Kuz</surname></persName>
							<affiliation key="aff0">
								<orgName type="department">Department of Computer Science</orgName>
								<orgName type="laboratory">Systems Group</orgName>
								<orgName type="institution">ETH Zurich</orgName>
							</affiliation>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Zachary</forename><surname>Anderson</surname></persName>
							<affiliation key="aff0">
								<orgName type="department">Department of Computer Science</orgName>
								<orgName type="laboratory">Systems Group</orgName>
								<orgName type="institution">ETH Zurich</orgName>
							</affiliation>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Pravin</forename><surname>Shinde</surname></persName>
							<affiliation key="aff0">
								<orgName type="department">Department of Computer Science</orgName>
								<orgName type="laboratory">Systems Group</orgName>
								<orgName type="institution">ETH Zurich</orgName>
							</affiliation>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Timothy</forename><surname>Roscoe</surname></persName>
							<affiliation key="aff0">
								<orgName type="department">Department of Computer Science</orgName>
								<orgName type="laboratory">Systems Group</orgName>
								<orgName type="institution">ETH Zurich</orgName>
							</affiliation>
						</author>
						<title level="a" type="main">Multicore OS benchmarks: we can do better</title>
					</analytic>
					<monogr>
						<imprint>
							<date/>
						</imprint>
					</monogr>
				</biblStruct>
			</sourceDesc>
		</fileDesc>
		<profileDesc>
			<abstract>
				<p>Current multicore OS benchmarks do not provide workloads that sufficiently reflect real-world use: they typically run a single application, whereas real work-loads consist of multiple concurrent programs. In this paper we show that this lack of mixed workloads leads to benchmarks that do not fully exercise the OS and are therefore inadequate at predicting real-world behavior. This implies that effective multicore OS benchmarks must include mixed workloads, but the main design challenge is choosing an appropriate mix. We present a prin-cipled approach which treats benchmark design as an optimization problem. Our solution leads to a workload mix that uses as much of a system&apos;s resources as possible , while also selecting applications whose performance is most sensitive to the availability of those resources.</p>
			</abstract>
		</profileDesc>
	</teiHeader>
	<text xml:lang="en">
		<body>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="1">Introduction</head><p>We argue that benchmarks used in the Operating Systems literature for evaluating new designs and techniques are fundamentally unrealistic: they ignore the common case of running multiple applications (or subsystems) on the same machine. Bluntly, we are measuring the wrong thing. We show, using existing OS benchmarks running concurrently, how traditional benchmarks lead to unrealistic results, and propose composing benchmarks so as to obtain more useful information about how well an OS can multiplex the machine among competing programs.</p><p>The purpose of an OS is to allocate and share machine resources between applications in a controlled way. The mismatch between what an OS should do, and which properties we currently measure about it, becomes more serious in the case of multiple, parallel workloads on modern and future multicore processors, where the interaction between competing multithreaded workloads is poorly understood and hard to analyze. As research into OS designs suitable for multicore processors continues apace <ref type="bibr" target="#b1">[2,</ref><ref type="bibr" target="#b3">4,</ref><ref type="bibr" target="#b9">10,</ref><ref type="bibr" target="#b11">12]</ref>, it is high time we fixed this problem.</p><p>Multicore workloads fall into three categories: Highperformance computing (HPC) workloads are longrunning applications that split work into parallel tasks executed across all the system's cores. Server applications are characterized by continuous execution of short, independent jobs in response to incoming requests. Scalability here is often a matter of executing many jobs concurrently. Finally, dynamic workloads, in desktop and other interactive systems, run a changing mix of applications concurrently. Currently we see interactive applications competing with background applications such as security scanners, indexers, and backup systems. In the future we can expect a much broader range of concurrent activity as so-called mining, recognition, and synthesis (RMS) applications become more prevalent <ref type="bibr" target="#b0">[1]</ref>.</p><p>Existing benchmarks focus on static HPC and server scenarios, using single applications, and neglect the mixed workloads typical of interactive systems. Hence, they fail to exercise or evaluate the performance isolation capabilities of a multicore OS, and are of limited use in validating novel techniques to improve performance and scalability of an OS in non-HPC or server scenarios.</p><p>We claim a good multicore OS benchmark suite must provide a mixed workload to be useful in analyzing how an OS performs what is, after all, its main purpose.</p><p>In the next section we review the benchmarking methodology used in recent OS research papers, and show that such benchmarks fail to capture important aspects of how an OS manages resources under a mixed workload. We then introduce a new approach for such benchmarks which provides detailed information about how the OS deals with a mixed workload, and describe some initial work on how to interpret the results. 2 + 4 1 + 0 + 1 0 6 1 Corey <ref type="bibr" target="#b3">[4]</ref> 2 + 4 1 + 1 + 0 5 6 0 fos <ref type="bibr" target="#b11">[12,</ref><ref type="bibr" target="#b12">13]</ref> 1 + 6 1 + 0 + 0 0 7 0 Barrelfish <ref type="bibr" target="#b1">[2]</ref> 3 + 3 1 + 2 + 0 3 6 0 Linux <ref type="bibr" target="#b4">[5]</ref> 7 + 0 4 + 2 + 1 7 0 0 <ref type="table">Table 1</ref>: Some recent multicore OS research benchmarks</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2">The current way</head><p>Multicore OS benchmarks principally evaluate how application performance over the OS scales with the number of available cores. The goal is a workload that accurately reflects expected application behavior and exposes both the explicit and implicit effects of the OS.</p><p>We survey benchmarks used in recent publications on multicore OSes, and show how modifying one such benchmark to include mixed workloads exposes scalability issues missed by the original. We are certainly not the first to critique OS benchmarking <ref type="bibr" target="#b8">[9,</ref><ref type="bibr" target="#b10">11]</ref>, but our concerns here are orthogonal and focus on multicore issues.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.1">Recent multicore OS benchmarking</head><p>OS research custom is to use real-world benchmarks to evaluate overall OS performance and micro-benchmarks to stress particular subsystems for further analysis. <ref type="table">Table 1</ref> shows the number and types of benchmarks used in recent multicore OS publications. Column (m + Âµ) breaks down the benchmarks into macro-and microbenchmarks. Macro-benchmarks are further classified as Server, HPC, or Desktop workload respectively (S + H + D). Scale shows how many benchmarks measured the system's scalability and Perf counts those comparing OS performance to existing OS (typically Linux); some benchmarks are counted in both classes. Mixed shows benchmarks run in combination with other applications.</p><p>Most papers use a few macro-benchmarks and verify their results with further micro-benchmarks, with a clear bias towards server workloads. Desktop and mixed workloads seem mostly ignored by the research community; the only mixed workload used is by HeliOS to measure isolation between two desktop applications.</p><p>Mixed workloads do appear in research that does not directly evaluate OS scalability. For example, in Frachtenberg and Etsion's study of OS mis-scheduling <ref type="bibr" target="#b6">[7]</ref>, mixed workloads are used as cases where existing schedulers perform poorly. This work uses synthetic load generators and does not aim at realistic workload mixing.</p><p>The few mixed-workload that are used are generally chosen based on intuition of what is expected to run on a real system, but these choices do not necessarily lead to workload 1 w1 cores workload 2 <ref type="bibr">w2</ref>   Overall, despite the fact that a multicore OS should provide isolation between running applications, most research does not use benchmarks which evaluate this.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.2">Case Study: MOSBENCH</head><p>To provide a concrete example of why a mixed workload is necessary, we modified the public version of the MOS-BENCH <ref type="bibr" target="#b4">[5]</ref> suite to run multiple instances at once, and compared the result of running a mixed workload with a single workload. MOSBENCH is a benchmark suite for multicore OSes that includes a wide variety of applications, but only runs one program at a time.</p><p>We modified the MOSBENCH harness to start and monitor two workloads at once. MOSBENCH divides a workload into a startup stage, a waiting and collecting stage, and a stopping stage. We ensured that both workloads would run through the stages in synchrony (i.e., both would execute the start stage in parallel, then the wait stage in parallel, and then the stop stage). Throughout the runs, we pinned the workloads to a disjoint set of cores, to reduce interference due to contention for cores. This is not strictly necessary (part of a multicore OS's job is to schedule applications on cores) but it simplifies interpreting the results. We also added a dummy workload that performs no work, to compare the results of a mixed workload to a single workload. We used a 16 core, 4 socket AMD Shanghai machine with 16GB RAM running Linux 2.6.32.</p><p>We present a principled approach to workload selection in the next section of this paper, but for this experiment we tried a number of arbitrary combinations of programs from the MOSBENCH suite, and we present a subset of the results in <ref type="table" target="#tab_1">Table 2</ref>. In all experiments, workload 2 uses a fixed 6 cores, while we vary workload 1 from its minimum to maximum core count. For each such two-load configuration we also ran with workload 2 replaced by the dummy workload, providing both "mixed" and "non-mixed" results. <ref type="figure" target="#fig_1">Figure 1</ref> shows the slowdown of the mixed workload relative to the corresponding non-mixed run (calculated as (nonmixed â mixed)/nonmixed, where nonmixed and mixed denote jobs per second). For some workloads there is little or no slowdown, but for others resource contention significantly impacts performance. Note that while the differences may be modest, they point to an isolation problem that none of the individual workloads uncovered, and one that would unlikely be uncovered by a different single-application load.</p><p>In summary, both performance isolation and scalability are affected by mixed workloads. This means that single-workload benchmarks alone are unlikely to provide sufficient insight into the working of the OS. Next, we determine what kinds of workload mixes yield the most information when used to evaluate a multicore OS.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3">A better way</head><p>We have argued and shown evidence that a good multicore OS benchmark should provide a mixed workload. The problem, however, is that it is not directly obvious what kind of mix should be used, since as we saw previously, not all workload combinations provide interesting results. The key questions that must be answered when choosing a workload mix include:</p><p>â¢ Which applications to choose?</p><p>â¢ Which application workloads and configurations to choose?</p><p>â¢ Which combinations of applications to run? Here we discuss an approach to answering these questions. Our work is inspired by work on the DaCapo benchmark suite <ref type="bibr" target="#b2">[3]</ref>, and the vector-based approach to benchmarking developed by Seltzer et al. <ref type="bibr" target="#b10">[11]</ref>. Note that, while our approach may seem complex at first, much of it can be automated, greatly simplifying its application.</p><p>Our goal is to design mixed workloads that can reveal information about the scalability and performance isolation provided by an OS. Since such information is gained by pushing the OS to its limits, an effective mix should use as much of a system's resources as possible, and devote those resources to applications whose performance is sensitive to their allocation. In this way, any effect of the OS on those resources will be highlighted by the benchmark, making it easier to trace anomalous application performance back to the OS, or to interactions among OS subsystems.</p><p>Because there is no single metric of performance when multiple applications are run concurrently, evaluating the results of a mixed workload is also a problem. Therefore, we must incorporate into our approach applicationspecific measures of goodness, which we use both to evaluate benchmark results, and to guide the choice of a workload mix itself.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.1">Optimal mix selection</head><p>In our approach, we solve an optimization problem where the constraints derive from the resources consumed by benchmark applications when run alone, along with the sensitivity of their performance to changes in resource availability. We explain how we derive the constraints, and how we use the solutions to compose mixed workloads. We also discuss how to evaluate scalability, performance isolation, and performance degradation in the face of resource overcommitment. Finally, we identify conditions under which the technique is valid.</p><p>To show why this is a plausible approach, consider a hypothetical mixed workload composed of typical desktop applications: a game, a web browser, and an antivirus scanner -a common desktop scenario. Each application accepts many possible inputs, but for our approach we need only consider the set of inputs for which the proportion of system resources used varies as much as possible. We can also force the resources used by a benchmark to vary by placing external limits on an application. We assume that a suitable range of inputs and constraints is supplied by the benchmark designer.</p><p>Furthermore, we assume that the benchmark designer provides a way to score the results of a run according to some goodness function. For a game this might be a combination of graphics fidelity and frame rate. For a browser, it might be a function of the average page load latency, and for an anti-virus scanner, a function of the number of files scanned in some fixed time period.</p><p>With a variety of inputs and a function for scoring the results for each of the benchmarks, we derive the constraints for our optimization problem in two steps. First, we run the benchmark applications alone on all the provided inputs, measuring resource usage, and scoring the results with the goodness functions. Then, for each application we perform a sensitivity analysis to determine which resources were important for performance.</p><p>For example, suppose that our example benchmarks are provided with inputs that result in the resource consumption and performance as indicated in <ref type="table" target="#tab_2">Table 3</ref> (this is hypothetical data and not based on measured results).</p><p>In this table, the rows give the proportion of a resource   used by a benchmark on one of N different inputs. For example, the mem entry for game1 is 0.25, indicating that the game uses a quarter of the system's memory with input 1. The score column of the table gives the application specific goodness score, which is calculated for each of the runs. When the game uses 0.25 of the CPU, 0.25 of the cache, 0.25 of main memory, 0.1 of the disk, and 0.1 of the network, it achieves an goodness score of 0.25. Using this data we can now perform a sensitivity analysis for each of the benchmark applications. The results of the analysis are a sensitivity score for each resource that show, on a scale of 0 to 1, how sensitive an application's performance is to changes in each resource. Example results of a sensitivity analysis are given in <ref type="table" target="#tab_3">Table 4</ref>. This table shows hypothetical sensitivities to resource allocations of our example applications. For example, the CPU (at 0.8) is more important for the game's performance than the network (at 0.1).</p><p>We now have all the data necessary to compose the optimization constraints. We phrase the optimization problem as an integer linear program. The solution to the optimization problem tells us which benchmark applications running on which inputs should compose the mixed workload. Let x i be the integer variable for the i'th benchmark/input pair. The solution to the optimization problem will be an assignment of the x i 's indicating how many of each benchmark/input pair should be run as part of the mixed workload.</p><p>For each pair, we know the resource usage. Let r i j be the proportion of the j'th resource used by benchmark/input pair i. We also know the sensitivity of each benchmark to changes in resources. Let Ï i j be the sensitivity of the benchmark in benchmark/resource pair i to changes in resource j. The problem is as follows:</p><formula xml:id="formula_0">maximize j i x i r i j Ï i j (1) subject to â j . i x i r i j â¤ 1<label>(2)</label></formula><p>Intuitively, what this means is that, without overcommitting the system, solutions will devote as many system resources as possible to benchmark applications that are sensitive to their allocation. In (1) r i j Ï i j is a heuristic that can be thought of as the sensitivity of a benchmark to a resource, written in terms of the amount of a resource that the benchmark productively uses. It is large if a benchmark is sensitive to and uses a lot of a resource, moderate if it is sensitive to the small amount it uses or is not sensitive to the large amount it uses, and small if it is neither sensitive to nor needs very much of a resource.</p><p>We sum over all of the resources in the maximization condition. If the potential constituent benchmarks are sensitive to each of the system resources, then this maximization condition will result in solutions that use every resource as much as possible. Inspecting the resulting solution will indicate whether or not the set of constituent benchmarks is complete enough.</p><p>Finally, using this optimization problem we create a mixed workload that uses only the 6 runs listed explicitly in <ref type="table" target="#tab_2">Table 3</ref>. Using this sensitivity data to generate the optimization problem yields the following mixed workload results: {game1, game1, webb1, antivN}. This uses 85% of CPU, 85% of cache, 70% of memory, 100% of disk, and 70% of the network, and includes benchmarks that together are sensitive to all of the resources.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.2">Interpreting Results</head><p>Once we have composed a good mixed workload, we can compare the results of individual benchmarks in the nonmixed and mixed settings. Also, we can examine aggregate results in order to expose OS performance issues.</p><p>Identifying Bottlenecks: Ideally, a mixed workload should consume the same resources as the sum of those consumed by each constituent benchmark running alone. Deviations from this ideal may indicate subsystems, or interactions among subsystems, for which the OS is having trouble allocating resources when under load.</p><p>Performance isolation: Since we know how well each of these benchmarks performed when running alone on the system, we can compare against the performance when they are run all together. In particular, we can calculate the percent difference between the sum of performance scores of the benchmarks run alone, and run as part of the mix. If the percent difference is smaller, then the OS provides better performance isolation. Scalability: It is also useful to see how an individual benchmark application scales up when others are running at the same time. To accomplish this, we can use the same optimization problem, with the additional constraint that one of the applications chosen must be the one we care about. If we choose inputs that show scalability when the benchmark is run alone, the same inputs should also scale when run as part of a mixed workload.</p><p>Resource overcommitment: We can also construct a sequence of mixed workloads in which system resources become increasingly overcommitted. In particular in (2) above, we can replace the requirement that the sum of resources used by all the benchmarks is less than one, with a more general constraint. That is, instead of using 1 as the upper bound of resource usage, we can use other values, even different values for different resources.</p><p>Validity of this approach: We also propose a test for determining whether or not this technique will yield consistent, meaningful results. Given a sufficiently large set of benchmark/input pairs, the optimization problems we described above will have several solutions with similar, near-optimal values of the objective function. If our approach is valid, then these solutions will give similar results. In particular, we can perform the performance isolation test for each mix, and obtain a set of percent differences in performance scores. If the variance of this set is small, then we can have confidence in our approach.</p><p>Discussion: If the variance in performance differences across mixes is small, then we will have also shown that, so long as a mix is near-optimal, its precise composition is not important: our approach has the potential to obviate the need for "standard" workload mixes, which may be biased toward particular architectures or systems. In the future we wish to show that this technique can tailor mixed workloads for particular systems in such a way that we can both obtain useful diagnostic results for a single system while comparing results across systems.</p><p>We can mitigate the complexity of this approach using a tool we are presently building that automates the entire process. Additionally, we can rely on previous work in IO benchmarking, e.g. the work on self-scaling workloads <ref type="bibr" target="#b5">[6]</ref>, to guide our interpretation of the results of sampling a large parameter space.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4">Conclusion</head><p>We claim that current benchmarks for multicore OSes do not reflect a realistic workload. In particular, they neglect mixed workloads consisting of several applications running concurrently. However, the difficulty with designing mixed workload benchmarks is in choosing an appropriate mix. We propose a principled approach to designing good mixes based on treating it as an optimization problem. The key advantages are that we can target specific resources of interest and gain a better understanding of how the mix is expected to behave.</p><p>In the future, we intend to further develop and evaluate our approach. Choosing a good mix is, however, only part of the problem, and we will address other problems, such as portability of benchmarks, burstiness, and dynamic workloads, as well. It is our intention to work together with others from the OS community to further develop this work, in particular to develop a framework for producing multicore OS benchmark suites, and to produce a standard suite that can be used for further OS research.</p></div><figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_1"><head>Figure 1 :</head><label>1</label><figDesc>Figure 1: Slowdown for mixed MOSBENCH workloads</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_1" validated="false"><head>Table 2 :</head><label>2</label><figDesc></figDesc><table>Configurations of MOSBENCH workloads used 

mixes that best exercise the OS. 
</table></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_2" validated="false"><head>Table 3 :</head><label>3</label><figDesc></figDesc><table>Hypothetical resource usage and performance 
for our benchmark applications. 

bmark CPU cache mem disk netwk 
game 
0.8 
0.8 
0.6 
0.4 
0.1 
webb 
0.8 
0.7 
0.5 
0.1 
0.5 
antiv 
0.2 
0.5 
0.4 
0.8 
0.0 

</table></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_3" validated="false"><head>Table 4 :</head><label>4</label><figDesc>Example results of a sensitivity analysis.</figDesc><table></table></figure>
		</body>
		<back>

			<div type="acknowledgement">
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Acknowledgments</head><p>We thank Jan Rellermeyer, Tim Harris, and Simon Peter for their contributions.</p></div>
			</div>

			<div type="references">

				<listBibl>

<biblStruct xml:id="b0">
	<monogr>
		<title level="m" type="main">The landscape of parallel computing research: A view from Berkeley</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">K</forename><surname>Asanovic</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Bodik</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">B</forename><forename type="middle">C</forename><surname>Catanzaro</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><forename type="middle">J</forename><surname>Gebis</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><surname>Husbands</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">K</forename><surname>Keutzer</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><forename type="middle">A</forename><surname>Patterson</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">W</forename><forename type="middle">L</forename><surname>Plishker</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Shalf</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><forename type="middle">W</forename><surname>Williams</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Yelick</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">K</forename><forename type="middle">A</forename></persName>
		</author>
		<idno>UCB/EECS-2006-183</idno>
		<imprint>
			<date type="published" when="2006-12" />
			<pubPlace>Berkeley</pubPlace>
		</imprint>
		<respStmt>
			<orgName>EECS Department, University of California</orgName>
		</respStmt>
	</monogr>
<note type="report_type">Tech. Rep.</note>
</biblStruct>

<biblStruct xml:id="b1">
	<analytic>
		<title level="a" type="main">The Multikernel: A new OS architecture for scalable multicore systems</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Baumann</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><surname>Barham</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><surname>Dagand</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">SOSP&apos;09</title>
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b2">
	<analytic>
		<title level="a" type="main">The DaCapo benchmarks: Java benchmarking development and analysis</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><forename type="middle">M</forename><surname>Blackburn</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Garner</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><surname>Hoffman</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><forename type="middle">M</forename><surname>Khan</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">K</forename><forename type="middle">S</forename><surname>Mckinley</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Bentzur</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Diwan</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Feinberg</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">OOPSLA &apos;06</title>
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b3">
	<monogr>
				<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Boyd-Wickizer</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">H</forename><surname>Chen</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Chen</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Y</forename><surname>Mao</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><forename type="middle">F</forename><surname>Kaashoek</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Morris</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Pesterev</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">L</forename><surname>Stein</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Wu</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Y</forename><surname>Hua Dai</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Y</forename><surname>Zhang</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Z</forename><surname>Zhang</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Corey</surname></persName>
		</author>
		<title level="m">An operating system for many cores</title>
		<imprint/>
	</monogr>
	<note>OSDI&apos;08</note>
</biblStruct>

<biblStruct xml:id="b4">
	<analytic>
		<title level="a" type="main">An analysis of Linux scalability to many cores</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Boyd-Wickizer</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><forename type="middle">T</forename><surname>Clements</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Y</forename><surname>Mao</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Pesterev</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><forename type="middle">F</forename><surname>Kaashoek</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Morris</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">N</forename><surname>Zeldovich</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">OSDI&apos;10</title>
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b5">
	<analytic>
		<title level="a" type="main">A new approach to I/O performance evaluation-self-scaling I/O benchmarks, predicted I/O performance</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><forename type="middle">M</forename><surname>Chen</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><forename type="middle">A</forename><surname>Patterson</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">SIGMETRICS&apos;93</title>
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b6">
	<analytic>
		<title level="a" type="main">Hardware parallelism: Are operating systems ready?(case studies in mis-scheduling)</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">E</forename><surname>Frachtenberg</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Etsion</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Y</forename></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Workshop on the Interaction between Operating System and Computer Architecture</title>
		<imprint>
			<date type="published" when="2006-06" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b7">
	<analytic>
		<title level="a" type="main">Tornado: Maximizing locality and concurrency in a shared memory multiprocessor operating system</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">B</forename><surname>Gamsa</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">O</forename><surname>Krieger</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Appavoo</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Stumm</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">OSDI&apos;99</title>
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b8">
	<analytic>
		<title level="a" type="main">Brittle metrics in operating systems research</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Mogul</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">HotOS-VII</title>
		<imprint>
			<date type="published" when="1999-03" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b9">
	<analytic>
		<title level="a" type="main">Helios: Heterogeneous multiprocessing with satellite kernels</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">E</forename><forename type="middle">B</forename><surname>Nightingale</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">O</forename><surname>Hodson</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Mcilroy</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><surname>Hawblitzel</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">G</forename><surname>Hunt</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">SOSP &apos;09</title>
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b10">
	<analytic>
		<title level="a" type="main">The case for application-specific benchmarking</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Seltzer</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Krinsky</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">K</forename><surname>Smith</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">HotOS-VII</title>
		<imprint>
			<date type="published" when="1999-03" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b11">
	<analytic>
		<title level="a" type="main">Factored operating systems (fos): The case for a scalable operating system for multicores</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Wentzlaff</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Agarwal</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">ACM SIGOPS Operating Systems Review</title>
		<imprint>
			<biblScope unit="volume">43</biblScope>
			<date type="published" when="2009-04" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b12">
	<analytic>
		<title level="a" type="main">An operating system for multicore and clouds: Mechanisms and implementation</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Wentzlaff</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><forename type="middle">G</forename><surname>Iii</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">N</forename><surname>Beckmann</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">ACM Symposium on Cloud Computing</title>
		<imprint>
			<date type="published" when="2010-06" />
		</imprint>
	</monogr>
</biblStruct>

				</listBibl>
			</div>
		</back>
	</text>
</TEI>
