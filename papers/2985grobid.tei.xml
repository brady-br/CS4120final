<?xml version="1.0" encoding="UTF-8"?>
<TEI xmlns="http://www.tei-c.org/ns/1.0" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
xsi:schemaLocation="http://www.tei-c.org/ns/1.0 /Users/atharsefid/Desktop/grobid-0.5.3/grobid-home/schemas/xsd/Grobid.xsd"
 xmlns:xlink="http://www.w3.org/1999/xlink">
	<teiHeader xml:lang="en">
		<encodingDesc>
			<appInfo>
				<application version="0.5.3" ident="GROBID" when="2020-09-29T02:56+0000">
					<ref target="https://github.com/kermitt2/grobid">GROBID - A machine learning software for extracting information from scholarly documents</ref>
				</application>
			</appInfo>
		</encodingDesc>
		<fileDesc>
			<titleStmt>
				<title level="a" type="main">When Address Remapping Techniques Meet Consistency Guarantee Mechanisms</title>
			</titleStmt>
			<publicationStmt>
				<publisher/>
				<availability status="unknown"><licence/></availability>
			</publicationStmt>
			<sourceDesc>
				<biblStruct>
					<analytic>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Hyun</forename><surname>Dong</surname></persName>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Kang</surname></persName>
							<affiliation key="aff0">
								<orgName type="institution">Sungkyunkwan University</orgName>
							</affiliation>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Gihwan</forename><surname>Oh</surname></persName>
							<affiliation key="aff0">
								<orgName type="institution">Sungkyunkwan University</orgName>
							</affiliation>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Dongki</forename><surname>Kim</surname></persName>
							<affiliation key="aff1">
								<orgName type="laboratory">Samsung Electronics ‡ Virginia Tech</orgName>
							</affiliation>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">In</forename><forename type="middle">Hwan</forename><surname>Doh</surname></persName>
							<affiliation key="aff1">
								<orgName type="laboratory">Samsung Electronics ‡ Virginia Tech</orgName>
							</affiliation>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Changwoo</forename><surname>Min</surname></persName>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Sang-Won</forename><surname>Lee</surname></persName>
							<affiliation key="aff0">
								<orgName type="institution">Sungkyunkwan University</orgName>
							</affiliation>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Young</forename><forename type="middle">Ik</forename><surname>Eom</surname></persName>
							<affiliation key="aff0">
								<orgName type="institution">Sungkyunkwan University</orgName>
							</affiliation>
						</author>
						<title level="a" type="main">When Address Remapping Techniques Meet Consistency Guarantee Mechanisms</title>
					</analytic>
					<monogr>
						<imprint>
							<date/>
						</imprint>
					</monogr>
				</biblStruct>
			</sourceDesc>
		</fileDesc>
		<profileDesc>
			<abstract>
				<p>Guaranteeing crash consistency is still one of the most expensive operations in traditional file systems because it causes redundant writes in a journaling file system, excessive read/writes in a log-structured file system, and tree-wandering problem in a copy-on-write file system. In this paper, we argue that such overhead can be significantly reduced by leveraging address remapping technique , which is already essential in many flash SSD devices. We thoroughly explore the potential of address remapping technique to ease the cost of guaranteeing consistency in two traditional file systems (i.e., Ext4 and F2FS) and one database system (i.e., MySQL). In particular, we introduce address remapping-based techniques to guarantee consistency, for file system journal-ing (i.e., SOJ and SDJ), segment cleaning (i.e., SSC), and application-level data journaling (i.e., SADJ). To evaluate the proposed techniques, we developed a PCIe SSD prototype, which exposes the address remapping capability to the upper layer as a share command. Our experimental results using the PCIe SSD with the share command confirms that the address remapping, though simple, is very effective in reducing the read/write amplification due to the conventional ways of guaranteeing consistency in the existing file systems and database applications .</p>
			</abstract>
		</profileDesc>
	</teiHeader>
	<text xml:lang="en">
		<body>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="1">Introduction</head><p>In recent years, address remapping techniques have raised a lot of interests in academia and industry because it opens new optimization opportunities in designing efficient consistency mechanisms <ref type="bibr" target="#b4">[6,</ref><ref type="bibr" target="#b9">11,</ref><ref type="bibr" target="#b10">12,</ref><ref type="bibr" target="#b15">17,</ref><ref type="bibr" target="#b24">26]</ref>. Especially, these remapping techniques give performance benefits by reducing expensive consistency operations in file systems (e.g., journaling, log-structured, and copy-on-write) and consistency-critical applications (e.g., MySQL <ref type="bibr">[3]</ref>, SQLite <ref type="bibr" target="#b2">[4]</ref>, git, and vim).</p><p>Generally, to guarantee the consistency of file metadata, data blocks, and versions, modern file systems have heavily resorted to various techniques such as journaling, logging, and copy-on-write. Unfortunately, they suffer from heavy read/write amplification incurred by the mechanisms inherent in each scheme, including redundant write <ref type="bibr" target="#b0">[1,</ref><ref type="bibr" target="#b22">24]</ref>, segment cleaning <ref type="bibr" target="#b11">[13,</ref><ref type="bibr" target="#b21">23]</ref>, and tree wandering <ref type="bibr" target="#b20">[22]</ref>. Furthermore, because they do not provide application-level crash consistency <ref type="bibr" target="#b13">[15,</ref><ref type="bibr" target="#b17">[19]</ref><ref type="bibr" target="#b18">[20]</ref><ref type="bibr" target="#b19">[21]</ref><ref type="bibr" target="#b23">25]</ref>, many consistency-critical applications should implement their own idiosyncratic mechanisms to ensure the recovery of their data from unexpected crashes, which are, in some cases, still crash-vulnerable <ref type="bibr" target="#b18">[20,</ref><ref type="bibr" target="#b19">21,</ref><ref type="bibr" target="#b25">27]</ref>. In these scenarios where several types of consistency should be guaranteed, the remapping technique opens up a new chance of achieving high data consistency with low performance overhead.</p><p>However, much research has not been conducted to orchestrate the benefits of the remapping technique across existing storage stacks, such as file system, block device, and internal storage layer; previous work has not yet explored how the remapping technique can be leveraged to application-level crash consistency. For example, JFTL <ref type="bibr" target="#b7">[9]</ref> and ANViL <ref type="bibr" target="#b24">[26]</ref> implemented the functionalities of atomic address remapping in internal storage and host block layer, respectively. They clearly confirmed that the address remapping is useful in various cases, such as single-write journaling, snapshot, file copy, and de-duplication. Unfortunately, previous studies did not consider the application-level crash consistency even though it is a common functionality necessary in modern consistency-critical applications. We observed that the consistency overheads in applications have essentially the same features with those in modern file systems.</p><p>In this paper, we perform a comprehensive study on leveraging address remapping technique in optimizing the file system-level and application-level crash consistency mechanisms. For our case studies, we utilized SHARE flash storage interface <ref type="bibr" target="#b15">[17]</ref> that allows host programs to explicitly remap one or more pairs of LBAs atomically at the flash storage FTL layer, and implemented SHARE by modifying the FTL firmware of the commercial high-end PCIe M.2 SSD, Samsung 960 EVO. We first present that the address remapping technique, SHARE, can significantly reduce the overhead of journaling file system and log-structured file system. In particular, we present two SHARE-based journaling schemes, namely SOJ and SDJ, on <ref type="bibr">Ext4 [14]</ref> and present a SHARE-based segment cleaning scheme, namely SSC, on F2FS <ref type="bibr" target="#b11">[13]</ref>. We also offer valuable insights about how to efficiently adopt SHARE for the application-level crash consistency. Our evaluation results confirm that the effect of the remapping technique is very promising. As an example, when Ext4 guarantees the application-level crash consistency using SHARE, the performance of an OLTP benchmark on MySQL/InnoDB DBMS is improved by 6.16 times over the default configuration.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2">Flash memory, FTL, and SHARE</head><p>An out-of-place update strategy is commonly used in a flash storage device because flash memory does not allow to update pages in place. Thus, to maintain the everchanging mapping between logical and physical flash memory addresses, the flash storage device is equipped with a firmware module called FTL (flash translation layer) <ref type="bibr" target="#b8">[10]</ref>, which manages a mapping table between logical block address (LBA) and physical page address (PPA) in a page granularity. To leverage this indirection of page-level address mapping in flash storage, recently in database community, Oh et al. <ref type="bibr" target="#b15">[17]</ref> proposed the SHARE. It exposes an interface that allows host applications to explicitly ask FTL to change its internal address mapping. To be concrete, as illustrated in <ref type="figure">Figure 1</ref>, upon receiving a share command from the host with a pair of two logical block addresses, LBA2 and LBA7, as its parameter, FTL atomically changes the PPN (physical page number) of LBA2 in its page-mapping table to that of LBA7, thus the latter physical page being shared by the former logical address. A share command can have an optional third argument, length, when the length of data to be shared is longer than the FTL mapping granularity (i.e., 4KB). Though the description so far assumes that the share command is associated with a single pair of LBAs, it can have multiple LBA pairs in a batch <ref type="bibr" target="#b15">[17]</ref>.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3">File System-level Crash Consistency</head><p>The concept of SHARE is simple, but there are some design challenges in integrating it with the consistency mechanisms of existing file systems.</p><p>In this section, we show how two file systems, Ext4 and F2F2, can leverage the share command in supporting their data consistency with low overhead. For our studies, we ran all experiments on a system with a quadcore processor (Intel i7-6700) and 8GB memory, running Linux kernel version 4.6.7.  <ref type="figure">Figure 1</ref>: An illustration of SHARE command. Upon share(LBA2, LBA7), FTL atomically remaps the PPN of LBA2 to that of LBA7 so that LBA2 and LBA7 share the same physical page.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Case Study 1: Ext4</head><p>Guaranteeing crash consistency is one of the most important functionalities in designing a file system. But, there is a trade-off between consistency level and performance. For this reason, the Ext4 file system takes a relaxed consistency level, i.e., the ordered journaling mode (OJ), as its default mode. The OJ mode provides metadata consistency <ref type="bibr" target="#b6">[8]</ref>, which only guarantees that metadata is entirely consistent and the data read by a file legitimately belongs to that file. Therefore, under the OJ mode, a file can point to the older version of its data, which is a source of the well-known torn page problem in database systems. In contrast, the full data journal mode (DJ) supports version consistency <ref type="bibr" target="#b6">[8]</ref>, where the metadata version is guaranteed to match to the version of the referred data. But, this higher-level consistency of the DJ mode comes at the expense of considerable performance degradation due to the double-write journaling of both data and metadata.</p><p>Recall that SHARE allows the host programs to explicitly and atomically change the address mappings being internally managed by FTL. With the help of SHARE, the DJ mode can achieve higher performance and consistency almost for free by offloading the burden of guaranteeing system-wide version consistency from the file system to the flash storage. In this paper, we design SHAREaware ordered journaling (SOJ) and SHARE-aware data journaling (SDJ) by slightly modifying the existing journaling modes of Ext4. A key challenge in using the SHARE is how to track a set of LBA pairs of the journaled location and home location. Since a page is, once buffered in page cache, generally updated more than once before being flushed to its home location, it is very crucial to track a set of LBA pairs up to date; missing such LBA pairs might crash the file system even without power failure or system crash. To solve this challenge, we employ an auxiliary red-black tree, called A-tree (atomictree), where LBA pairs are inserted or updated whenever the relevant journal data is recorded on the journal location. Now, let us explain two phases for guaranteeing crash consistency in SOJ and SDJ: commit and checkpoint. While the commit phase is almost same to that of Ext4, the checkpoint phase is in stark contrast with that of Ext4. When a commit operation is triggered, each write operation for journaling is first recorded in the journal area and then the relevant LBA pair is inserted into the A-tree for SHARE. At each checkpoint, we issue share commands by searching LBA pairs on the A-tree belonging to the checkpoint transaction. Then, upon receiving the share command, flash storage will carry out the atomic address remapping for a given set of LBA pairs so that the home locations are shared with the journaled locations. Finally, for the next checkpoint, the previous LBA pairs in the A-tree are discarded. In this way, SOJ and SDJ can avoid unnecessary overhead caused by redundant journaling writes. We implemented our design as a prototype in Linux kernel. Note that SOJ and SDJ do not necessitate any extra operations in employing the address remapping because they strictly adhere to the fundamental design principles of journaling in Ext4 and are implemented at the file system layer; meanwhile, ANViL <ref type="bibr" target="#b24">[26]</ref> requires additional operations for both garbage collection and its metadata consistency at the virtualized block layer. We first evaluated SHARE-aware journaling modes using the FIO benchmark. In this experiment, the benchmark is configured to write 2GB data randomly to 10,000 files with a 8KB granularity. In order to test the effect of fsync() interval, which represents the number of write operations between two consecutive fsync() calls, we repeated the same experiment while varying fsync() interval. <ref type="figure" target="#fig_0">Figure 2a</ref> presents the throughput in IOPS for our experiments. In <ref type="figure" target="#fig_0">Figure 2a</ref>, SOJ always has the highest performance and is, on average, 12% better than OJ in Ext4. We note that SOJ can violate data durability and/or consistency requirement under power failure or system crash. On the other hand, SDJ shows similar performance to that of OJ mode at fsync() interval 128 while it guarantees the version consistency. Unfortunately, the performance of SDJ degrades as the fsync() interval is shortened. The major reason for the performance drop is that SDJ has to trigger checkpoint operations more frequently than OJ mode in order to reclaim journal blocks; the journal area will fill up more quickly in SDJ as both data and metadata have to be stored in the journal area in SDJ mode. Fortunately, this performance issue, though orthogonal to the main theme of this paper, can be mitigated simply by increasing the default journal size <ref type="bibr" target="#b4">[6]</ref>.</p><p>To further understand the benefits of SDJ, we used the Varmail in Filebench that is one of the representative real-world benchmarks and configured it to generate multi-threaded I/O workload with 10,000 files and 100 concurrent threads. <ref type="figure" target="#fig_0">Figure 2b</ref> demonstrates the throughput of Varmail. From this figure, we can confirm that SDJ works well in real-world workload and the results have similar patterns to those in <ref type="figure" target="#fig_0">Figure 2a</ref>.</p><p>Case Study 2: F2FS Now, we explore another use case of SHARE in log-structured file system (LFS) <ref type="bibr" target="#b21">[23]</ref>. A log-structured writing scheme is widely adopted for flash storage devices, but it still suffers from the inevitable segment cleaning overhead for securing large chunks of free space. Though several techniques, such as data grouping <ref type="bibr" target="#b14">[16]</ref>, slack space recycling <ref type="bibr" target="#b16">[18]</ref>, and in-place-update (IPU) mode in F2FS <ref type="bibr" target="#b1">[2]</ref>, have been proposed, none of them completely remove copy-back overhead of valid blocks. In contrast, our approach can fundamentally remove the copy-back overhead of valid blocks by incorporating SHARE into the segment cleaning procedure. That is, instead of copying valid blocks in a victim segment to a new segment, we simply call SHARE for address remapping from the victim segment to the new segment.</p><p>We implemented this SHARE-aware segment cleaning (SSC) by modifying about 100 LoC of F2FS. For evaluation, we first filled up the file system to make its utilization to 50% of the total space. Then, we performed experiments with FIO benchmark, which was configured to perform random writes to 40% of the total storage capacity, by varying fsync() interval from 8 to 128. <ref type="figure" target="#fig_1">Fig- ure 3</ref> shows the total number of pages moved during the segment cleaning and the performance results (IOPS) of each segment cleaning. <ref type="figure" target="#fig_1">Figure 3a</ref> shows how many valid pages are moved during the segment cleaning and we can see that there is no significant difference between SC and SSC. Interestingly, when fsync() interval is 8, SSC and SC do nothing. This is because current F2FS was modified to allow an in-place update when the fsync() interval is smaller than 16. Meanwhile, <ref type="figure" target="#fig_1">Figure 3b</ref> demonstrates that SSC outperforms the original segment cleaning by 10%-39% although the number of copy-backed pages is similar. This performance improvement can be explained with the fact that SSC updates only metadata blocks, such as segment information table and segment summary area, while avoiding the copy-back overhead of data blocks. In summary, the above studies show that the simple SHARE-based address remapping functionality of flash storage helps the existing file systems to remove the overhead of consistency mechanisms and thus to boost their performance significantly.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4">Application-level Crash Consistency</head><p>For some applications such as databases and key-value stores, even the system-wide version consistency of Ext4 DJ mode, despite its double-write journaling, fails to meet their stringent requirements for transactional atomicity. For this reason, each application should devise its own application-level crash consistency mechanism. For instance, it is well-known that MySQL relies on costly application-level journaling mechanism for transactional atomicity, called double-write-buffer (for short, DWB) <ref type="bibr">[3]</ref>. However, such application-level crash consistency mechanisms bring two problems. First, they usually suffer from poor performance and reduced lifespan of the underlying flash storage because of write amplification and frequent fsync() calls from the application layer. Second, the application-level update protocols are so complex and error-prone, and there still exist some subtle bugs even in widely-deployed applications <ref type="bibr" target="#b18">[20,</ref><ref type="bibr" target="#b19">21,</ref><ref type="bibr" target="#b25">27]</ref>. Therefore, it would be desirable for file system to support the application-level crash consistency as its first class citizen functionality.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Case Study 3: MySQL/InnoDB</head><p>We show how file systems can utilize the SHARE in supporting applicationlevel crash consistency in database applications. One main challenge in utilizing SHARE for this purpose is how to ensure the ACID semantics of conventional database transactions on top of transactional file systems. Because the set of pages that has to be atomically written by a database transaction may span over multiple transactions of file system, file system may break the atomicity of the database application. For example, a problematic case occurs when one application's transaction is chopped by the transactions of the file system due to fsync() or time threshold (i.e., 5 seconds commit) in an unintended fashion. To prevent such a case, we applied the semantics of the failure-atomic update APIs (i.e., O_ATOMIC, syncv(), and msync()) <ref type="bibr" target="#b17">[19,</ref><ref type="bibr" target="#b23">25]</ref> to our prototype (i.e., SDJ), and we call this as SHARE-aware application-level data journaling (SADJ). In SADJ, these APIs guarantee the atomic write of multiple scattered pages in either single or multiple files opened with O_ATOMIC flag. For files opened with O_ATOMIC, SADJ defers writing of dirty blocks to their home location, and these dirty blocks will be written to their home location only by synchronization operations (e.g., fsync(), fdatasync(), msync(), and syncv()). More interestingly, SADJ can halve the amount of writes to the storage by issuing SHARE instead of the redundant writes, hence doubling the application's performance.</p><p>Unfortunately, as mentioned in §3, SADJ sometimes faces a challenge due to the small-size journal area (e.g., 128MB) because it quickly fills up the journal area by allocating journal blocks for application's data as well as file system's metadata. In addition, in terms of application-level crash consistency, some applications may need large journal area to support the DBMS-like ACID transactions. In order to address this challenge caused by small-size journal area, we decided to allocate rather large-size journal area (e.g., 1GB), which we believe is large enough to preserve all the data that are required for application-level crash consistency. Of course, one alternative solution to completely address the issue is to dynamically extend the journal area, but it is beyond the scope of our study. For this study, MySQL/InnoDB storage engine was used. Because SADJ can guarantee the version consistency, the database is safe from the risk of data inconsistency despite the DWB mode in the storage engine is turned off. To evaluate the effect of SADJ on MySQL/InnoDB database, we ran two popular OLTP benchmarks, SysBench <ref type="bibr" target="#b3">[5]</ref> and LinkBench <ref type="bibr" target="#b5">[7]</ref>, under four different modes: (1) DWB-ON/OJ(default), (2) DWB-OFF/DJ, (3) DWB-OFF/OJ, and (4) DWB-OFF/SADJ. The results are presented in <ref type="figure" target="#fig_2">Figure 4</ref>. Note that the third mode DWB-OFF/OJ does not prevent data corruption while the other three modes do; we deliberately added the crash-inconsistent DWB-OFF/OJ mode so as to stress that DWB-OFF/SADJ can outperform even the crashinconsistent mode. As <ref type="figure" target="#fig_2">Figure 4a</ref> shows, DWB-OFF/SADJ outperforms the default mode DWB-ON/OJ by 6.16 times and the DWB-OFF/DJ by 2.73 times. This performance gain is, as is clearly shown in <ref type="figure" target="#fig_2">Figure 4b</ref>, in part due to the reduction of the amount of writes which comes from avoiding the redundant writes at either DWB or DJ mode and instead calling the address remapping at the storage layer. However, this reduction cannot solely explain the large performance gap between DWB-ON/OJ and DWB-OFF/SADJ modes. The other main reason for the gap is the difference in the number of disk cache FLUSH operations invoked in the two modes. The default DWB-ON/OJ mode frequently calls fsync() to guarantee the consistency of database files 1 . On the other hand, DWB-OFF/SADJ calls one FLUSH operation after writing all database files together because SADJ can provide application-level data ordering and durability for free. Thus, as <ref type="figure" target="#fig_2">Figure 4c</ref> shows, DWB-OFF/SADJ invokes 16.4x less disk cache FLUSH operations than the original version.</p><p>In summary, applications can benefit in terms of performance without sacrificing any consistency if file systems can explicitly and efficiently support applicationlevel crash consistency on top of flash storage devices with the atomic address remapping functionality.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5">Related Work</head><p>Our study is not the first work on exploiting the address remapping mechanism for system performance optimization <ref type="bibr" target="#b4">[6,</ref><ref type="bibr" target="#b9">11,</ref><ref type="bibr" target="#b10">12,</ref><ref type="bibr" target="#b15">17,</ref><ref type="bibr" target="#b24">26]</ref>. Now, we will compare the closest previous studies, ANViL <ref type="bibr" target="#b24">[26]</ref> and JFTL <ref type="bibr" target="#b7">[9]</ref>, with our study. Weiss et al. <ref type="bibr" target="#b24">[26]</ref> proposed a small set of storage APIs, based on address remapping at the virtualized block device layer, and showed that those primitives are useful in a variety of case studies, such as single-write journaling, snapshot, file copy, and de-duplication. In this respect, our study could not be regarded as unique.</p><p>But, we argue that our study is in stark contrast with ANViL from two perspectives. First, we show for the first time that the application-level crash consistent file system can be made practically with the help of atomic address remapping in flash storages. Second, from the perspective of performance, we think that the right place to embody the functionality of atomic address remapping is not in the host-side block device layer, but the FTL layer as in SHARE; because the space for address mapping in ANViL is managed in a log-structured manner, another garbage collection scheme is required.</p><p>To our knowledge, JFTL <ref type="bibr" target="#b7">[9]</ref> is the first approach to suggest the atomic address remapping functionality in FTL so as to avoid the redundant write overhead in journaling file system. In this sense, it is the closest approach to our study. But, the authors of JFTL did not take into account the benefits and challenges of the applicationlevel crash consistency at all. In addition, since it assumes a proprietary interface between the host and flash storage which is introduced only for the purpose of journal data remapping, its atomic address remapping, unlike ANViL <ref type="bibr" target="#b24">[26]</ref> and SHARE, could not be fully and flexibly leveraged by host systems.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="6">Conclusion</head><p>In this paper, we presented a comprehensive study where address remapping technique can be used to relieve the file system's burden of guaranteeing the crash consistency as well as data consistency, and boost the performance of the consistency-critical applications. In our study, to show the practical portability of the address remapping, we implemented its functionality inside a commercial SSD as firmware. Our experimental results show that SHARE-based file systems perform similar to or outperform conventional ones, while providing the higher-level version consistency.</p><p>Meanwhile, the idea of leveraging the address remapping in file systems is not limited to journaling file systems and log-structured file systems. We expect that the SHARE would be also helpful in mitigating the treewandering problem in CoW-based B-tree file systems, such as btrfs <ref type="bibr" target="#b20">[22]</ref>. This would be an interesting topic for future work.</p></div><figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_0"><head>Figure 2 :</head><label>2</label><figDesc>Figure 2: The effect of SHARE on the journaling modes in Ext4.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_1"><head>Figure 3 :</head><label>3</label><figDesc>Figure 3: The effect of SHARE on segment cleaning in F2FS.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_2"><head>Figure 4 :</head><label>4</label><figDesc>Figure 4: OLTP benchmark results of Sysbench and LinkBench using MySQL. SysBench in an OLTP mode handles a 10 GB database (20 files) with 40 million rows for 1,000,000 operations. We ran LinkBench with 4,800,000 operations for a 50 GB database (24 files) after two minutes warm-up. In both experiments, MySQL/InnoDB engine was configured to use 5 GB as a buffer pool with sixteen concurrent threads, and all under buffered I/O mode.</figDesc></figure>

			<note place="foot" n="1"> When a dirty page is replaced from the buffer cache, DWB appends new copy to the double-write-buffer and then overwrites the old copy in its original location. In each step, an fsync() call is made to enforce ordering and durability.</note>
		</body>
		<back>

			<div type="acknowledgement">
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="7">Acknowledgments</head></div>
			</div>

			<div type="references">

				<listBibl>

<biblStruct xml:id="b0">
	<monogr>
				<ptr target="https://ext4.wiki.kernel.org/index.php/Ext4_Disk_Layout#Journal_.28jbd2.29" />
		<title level="m">Ext4 Disk Layout/Journal (jbd2</title>
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b1">
	<monogr>
				<ptr target="https://lwn.net/Articles/518718/" />
		<title level="m">f2fs: introduce flash-friendly file system</title>
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b2">
	<monogr>
		<title/>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Sqlite</surname></persName>
		</author>
		<ptr target="http://www.sqlite.org/" />
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b3">
	<monogr>
		<title/>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Sysbench</surname></persName>
		</author>
		<ptr target="https://github.com/akopytov/sysbench" />
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b4">
	<analytic>
		<title level="a" type="main">Evolving Ext4 for Shingled Disks</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Aghayev</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><surname>Ts&amp;apos;o</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">G</forename><surname>Gibson</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Desnoyers</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 15th USENIX Conference on File and Storage Technologies</title>
		<meeting>the 15th USENIX Conference on File and Storage Technologies</meeting>
		<imprint>
			<date type="published" when="2017" />
			<biblScope unit="page" from="105" to="119" />
		</imprint>
	</monogr>
	<note>FAST&apos;17, USENIX Association</note>
</biblStruct>

<biblStruct xml:id="b5">
	<analytic>
		<title level="a" type="main">LinkBench: a Database Benchmark based on the Facebook Social Graph</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><forename type="middle">G</forename><surname>Armstrong</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">V</forename><surname>Ponnekanti</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Borthakur</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Callaghan</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 39th SIGMOD International Conference on Management of Data</title>
		<meeting>the 39th SIGMOD International Conference on Management of Data</meeting>
		<imprint>
			<date type="published" when="2013" />
			<biblScope unit="page" from="1185" to="1196" />
		</imprint>
	</monogr>
	<note>SIG-MOD&apos;13, ACM</note>
</biblStruct>

<biblStruct xml:id="b6">
	<analytic>
		<title level="a" type="main">Consistency Without Ordering</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">V</forename><surname>Chidambaram</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><surname>Sharma</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><forename type="middle">C</forename><surname>Arpaci-Dusseau</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><forename type="middle">H</forename><surname>Arpacidusseau</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 10th USENIX Conference on File and Storage Technologies</title>
		<meeting>the 10th USENIX Conference on File and Storage Technologies</meeting>
		<imprint>
			<date type="published" when="2012" />
			<biblScope unit="page" from="1" to="16" />
		</imprint>
	</monogr>
	<note>FAST&apos;12, USENIX Association</note>
</biblStruct>

<biblStruct xml:id="b7">
	<analytic>
		<title/>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">H</forename><forename type="middle">J</forename><surname>Choi</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S.-H</forename><surname>Lim</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">K</forename><forename type="middle">H</forename><surname>Park</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">JFTL: A Flash Translation Layer Based on a Journal Remapping for Flash Memory. Transactions on Storage</title>
		<imprint>
			<biblScope unit="volume">4</biblScope>
			<biblScope unit="page" from="1" to="22" />
			<date type="published" when="2009-02" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b8">
	<analytic>
		<title level="a" type="main">DFTL: A Flash Translation Layer Employing Demand-based Selective Caching of Pagelevel Address Mappings</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Gupta</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Y</forename><surname>Kim</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">B</forename><surname>Urgaonkar</surname></persName>
		</author>
		<idno>ASPLOS&apos;09</idno>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 14th International Conference on Architectural Support for Programming Languages and Operating Systems</title>
		<meeting>the 14th International Conference on Architectural Support for Programming Languages and Operating Systems</meeting>
		<imprint>
			<publisher>ACM</publisher>
			<date type="published" when="2009" />
			<biblScope unit="page" from="229" to="240" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b9">
	<analytic>
		<title level="a" type="main">Improving File System Performance of Mobile Storage Systems Using a Decoupled Defragmenter</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><forename type="middle">S</forename><surname>Hahn</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Lee</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><surname>Ji</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">L.-P</forename><surname>Chang</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">I</forename><surname>Yee</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">L</forename><surname>Shi</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><forename type="middle">J</forename><surname>Xue</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Kim</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 2017 USENIX Annual Technical Conference</title>
		<meeting>the 2017 USENIX Annual Technical Conference</meeting>
		<imprint>
			<date type="published" when="2017" />
			<biblScope unit="page" from="759" to="771" />
		</imprint>
	</monogr>
	<note>ATC&apos;17, USENIX Association</note>
</biblStruct>

<biblStruct xml:id="b10">
	<analytic>
		<title level="a" type="main">Improving Spatial Locality in Flash Storage Accesses by Sequentializing in Host and Randomizing in Device</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">H</forename><surname>Kim</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Shin</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Y</forename><forename type="middle">H</forename><surname>Jeong</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Kim</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">K</forename><forename type="middle">H</forename><surname>Shrd</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 15th USENIX Conference on File and Storage Technologies</title>
		<meeting>the 15th USENIX Conference on File and Storage Technologies</meeting>
		<imprint>
			<date type="published" when="2017" />
			<biblScope unit="page" from="271" to="283" />
		</imprint>
	</monogr>
	<note>FAST&apos;17, USENIX Association</note>
</biblStruct>

<biblStruct xml:id="b11">
	<analytic>
		<title level="a" type="main">F2FS: A New File System for Flash Storage</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><surname>Lee</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Sim</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J.-Y</forename><surname>Hwang</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Cho</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 13th USENIX Conference on File and Storage Technologies</title>
		<meeting>the 13th USENIX Conference on File and Storage Technologies</meeting>
		<imprint>
			<date type="published" when="2015" />
			<biblScope unit="page" from="273" to="286" />
		</imprint>
	</monogr>
	<note>FAST&apos;15, USENIX Association</note>
</biblStruct>

<biblStruct xml:id="b12">
	<analytic>
		<title level="a" type="main">The New Ext4 Filesystem: Current Status and Future Plans</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Mathur</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Cao</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Bhattacharya</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Dilger</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Tomas</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">L</forename><surname>Vivier</surname></persName>
		</author>
		<idno>OLS&apos;07</idno>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the Ottawa Linux Symposium</title>
		<meeting>the Ottawa Linux Symposium</meeting>
		<imprint>
			<date type="published" when="2007" />
			<biblScope unit="page" from="21" to="33" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b13">
	<analytic>
		<title level="a" type="main">Lightweight Application-Level Crash Consistency on Transactional Flash Storage</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><surname>Min</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">W.-H</forename><surname>Kang</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><surname>Kim</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S.-W</forename><surname>Lee</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Y</forename><forename type="middle">I</forename><surname>Eom</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 2015 USENIX Annual Technical Conference</title>
		<meeting>the 2015 USENIX Annual Technical Conference</meeting>
		<imprint>
			<date type="published" when="2015" />
			<biblScope unit="page" from="221" to="234" />
		</imprint>
	</monogr>
	<note>ATC&apos;13, USENIX Association</note>
</biblStruct>

<biblStruct xml:id="b14">
	<analytic>
		<title level="a" type="main">SFS: Random Write Considered Harmful in Solid State Drives</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><surname>Min</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">K</forename><surname>Kim</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">H</forename><surname>Cho</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S.-W</forename><surname>Lee</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Y</forename><forename type="middle">I</forename><surname>Eom</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 10th USENIX Conference on File and Storage Technologies</title>
		<meeting>the 10th USENIX Conference on File and Storage Technologies</meeting>
		<imprint>
			<date type="published" when="2012" />
			<biblScope unit="page" from="1" to="16" />
		</imprint>
	</monogr>
	<note>FAST&apos;12, USENIX Association</note>
</biblStruct>

<biblStruct xml:id="b15">
	<analytic>
		<title level="a" type="main">SHARE Interface in Flash Storage for Relational and NoSQL Databases</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">G</forename><surname>Oh</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><surname>Seo</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Mayuram</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Y.-S</forename><surname>Kee</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S.-W</forename><surname>Lee</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 2016 International Conference on Management of Data</title>
		<meeting>the 2016 International Conference on Management of Data</meeting>
		<imprint>
			<date type="published" when="2016" />
			<biblScope unit="page" from="343" to="354" />
		</imprint>
	</monogr>
	<note>SIGMOD &apos;16, ACM</note>
</biblStruct>

<biblStruct xml:id="b16">
	<analytic>
		<title level="a" type="main">Optimizations of LFS with Slack Space Recycling and Lazy Indirect Block Update</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Y</forename><surname>Oh</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">E</forename><surname>Kim</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Choi</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Lee</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><forename type="middle">H</forename><surname>Noh</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 3rd Annual Haifa Experimental Systems Conference</title>
		<meeting>the 3rd Annual Haifa Experimental Systems Conference</meeting>
		<imprint>
			<publisher>ACM</publisher>
			<date type="published" when="2010" />
			<biblScope unit="page" from="1" to="9" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b17">
	<analytic>
		<title level="a" type="main">A Simple and Efficient Mechanism for Preserving the Integrity of Durable Data</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Park</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><surname>Kelly</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">K</forename><surname>Shen</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Failure</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Msync</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 8th ACM European Conference on Computer Systems</title>
		<meeting>the 8th ACM European Conference on Computer Systems</meeting>
		<imprint>
			<date type="published" when="2013" />
			<biblScope unit="page" from="225" to="238" />
		</imprint>
	</monogr>
	<note>EuroSys &apos;13, ACM</note>
</biblStruct>

<biblStruct xml:id="b18">
	<analytic>
		<title level="a" type="main">All File Systems Are Not Created Equal: On the Complexity of Crafting Crash-Consistent Applications</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><forename type="middle">S</forename><surname>Pillai</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">V</forename><surname>Chidambaram</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Alagappan</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Al-Kiswany</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><forename type="middle">C</forename><surname>Arpaci-Dusseau</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Arpaci-Dusseau</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><forename type="middle">H</forename></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 11th Symposium on Operating Systems Design and Implementation</title>
		<meeting>the 11th Symposium on Operating Systems Design and Implementation</meeting>
		<imprint>
			<date type="published" when="2014" />
			<biblScope unit="page" from="433" to="448" />
		</imprint>
	</monogr>
	<note>OSDI&apos;14, USENIX Association</note>
</biblStruct>

<biblStruct xml:id="b19">
	<analytic>
		<title level="a" type="main">Crash Consistency</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><forename type="middle">S</forename><surname>Pillai</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">V</forename><surname>Chidambaram</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Alagappan</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Al-Kiswany</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><forename type="middle">C</forename><surname>Arpaci-Dusseau</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Arpaci-Dusseau</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><forename type="middle">H</forename></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Communications of the ACM</title>
		<imprint>
			<biblScope unit="volume">58</biblScope>
			<biblScope unit="page" from="46" to="51" />
			<date type="published" when="2015-10" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b20">
	<analytic>
		<title level="a" type="main">The Linux B-Tree Filesystem</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">O</forename><surname>Rodeh</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Bacik</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><surname>Mason</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Btrfs</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Transactions on Storage</title>
		<imprint>
			<biblScope unit="volume">9</biblScope>
			<biblScope unit="page" from="1" to="32" />
			<date type="published" when="2013-08" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b21">
	<analytic>
		<title level="a" type="main">The Design and Implementation of a Log-structured File System</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Rosenblum</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><forename type="middle">K</forename><surname>Ousterhout</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">ACM Transactions on Computer Systems</title>
		<imprint>
			<biblScope unit="volume">10</biblScope>
			<biblScope unit="page" from="26" to="52" />
			<date type="published" when="1992-02" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b22">
	<analytic>
		<title level="a" type="main">Scalability in the XFS File System</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Sweeney</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Doucette</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">W</forename><surname>Hu</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><surname>Anderson</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Nishimoto</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">G</forename><surname>Peck</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 1996 USENIX Annual Technical Conference</title>
		<meeting>the 1996 USENIX Annual Technical Conference</meeting>
		<imprint>
			<date type="published" when="1996" />
			<biblScope unit="page" from="1" to="14" />
		</imprint>
	</monogr>
	<note>ATC&apos;96, USENIX Association</note>
</biblStruct>

<biblStruct xml:id="b23">
	<analytic>
		<title level="a" type="main">Failure-atomic Updates of Application Data in a Linux File System</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Verma</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><forename type="middle">A</forename><surname>Mendez</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Park</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Mannarswamy</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><surname>Kelly</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><forename type="middle">B</forename><surname>Morrey</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 13th USENIX Conference on File and Storage Technologies</title>
		<meeting>the 13th USENIX Conference on File and Storage Technologies</meeting>
		<imprint>
			<date type="published" when="2015" />
			<biblScope unit="page" from="203" to="211" />
		</imprint>
	</monogr>
	<note>FAST&apos;15, USENIX Association</note>
</biblStruct>

<biblStruct xml:id="b24">
	<analytic>
		<title level="a" type="main">Advanced Virtualization for Modern Non-volatile Memory Devices</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Z</forename><surname>Weiss</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Subramanian</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Sundararaman</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">N</forename><surname>Talagala</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><forename type="middle">C</forename><surname>Arpaci-Dusseau</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Arpaci-Dusseau</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><forename type="middle">H</forename><surname>Anvil</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 13th USENIX Conference on File and Storage Technologies</title>
		<meeting>the 13th USENIX Conference on File and Storage Technologies</meeting>
		<imprint>
			<date type="published" when="2015" />
			<biblScope unit="page" from="111" to="118" />
		</imprint>
	</monogr>
	<note>FAST&apos;15, USENIX Association</note>
</biblStruct>

<biblStruct xml:id="b25">
	<analytic>
		<title level="a" type="main">Torturing Databases for Fun and Profit</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Zheng</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Tucek</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Huang</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">F</forename><surname>Qin</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Lillibridge</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">E</forename><forename type="middle">S</forename><surname>Yang</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">B</forename><forename type="middle">W</forename><surname>Zhao</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Singh</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 11th USENIX Symposium on Operating Systems Design and Implementation</title>
		<meeting>the 11th USENIX Symposium on Operating Systems Design and Implementation</meeting>
		<imprint>
			<date type="published" when="2014" />
			<biblScope unit="page" from="449" to="464" />
		</imprint>
	</monogr>
</biblStruct>

				</listBibl>
			</div>
		</back>
	</text>
</TEI>
