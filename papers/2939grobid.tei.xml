<?xml version="1.0" encoding="UTF-8"?>
<TEI xmlns="http://www.tei-c.org/ns/1.0" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
xsi:schemaLocation="http://www.tei-c.org/ns/1.0 /Users/atharsefid/Desktop/grobid-0.5.3/grobid-home/schemas/xsd/Grobid.xsd"
 xmlns:xlink="http://www.w3.org/1999/xlink">
	<teiHeader xml:lang="en">
		<encodingDesc>
			<appInfo>
				<application version="0.5.3" ident="GROBID" when="2020-09-29T02:55+0000">
					<ref target="https://github.com/kermitt2/grobid">GROBID - A machine learning software for extracting information from scholarly documents</ref>
				</application>
			</appInfo>
		</encodingDesc>
		<fileDesc>
			<titleStmt>
				<title level="a" type="main">Leveraging Progressive Programmability of SLC Flash Pages to Realize Zero-overhead Delta Compression for Metadata Storage</title>
			</titleStmt>
			<publicationStmt>
				<publisher/>
				<availability status="unknown"><licence/></availability>
			</publicationStmt>
			<sourceDesc>
				<biblStruct>
					<analytic>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Xuebin</forename><surname>Zhang</surname></persName>
							<affiliation key="aff0">
								<orgName type="department">ECSE Department</orgName>
								<orgName type="institution">Rensselaer Polytechnic Institute</orgName>
								<address>
									<country key="US">USA</country>
								</address>
							</affiliation>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Jiangpeng</forename><surname>Li</surname></persName>
							<affiliation key="aff0">
								<orgName type="department">ECSE Department</orgName>
								<orgName type="institution">Rensselaer Polytechnic Institute</orgName>
								<address>
									<country key="US">USA</country>
								</address>
							</affiliation>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Kai</forename><surname>Zhao</surname></persName>
							<affiliation key="aff0">
								<orgName type="department">ECSE Department</orgName>
								<orgName type="institution">Rensselaer Polytechnic Institute</orgName>
								<address>
									<country key="US">USA</country>
								</address>
							</affiliation>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Hao</forename><surname>Wang</surname></persName>
							<affiliation key="aff0">
								<orgName type="department">ECSE Department</orgName>
								<orgName type="institution">Rensselaer Polytechnic Institute</orgName>
								<address>
									<country key="US">USA</country>
								</address>
							</affiliation>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Tong</forename><surname>Zhang</surname></persName>
							<affiliation key="aff0">
								<orgName type="department">ECSE Department</orgName>
								<orgName type="institution">Rensselaer Polytechnic Institute</orgName>
								<address>
									<country key="US">USA</country>
								</address>
							</affiliation>
						</author>
						<title level="a" type="main">Leveraging Progressive Programmability of SLC Flash Pages to Realize Zero-overhead Delta Compression for Metadata Storage</title>
					</analytic>
					<monogr>
						<imprint>
							<date/>
						</imprint>
					</monogr>
				</biblStruct>
			</sourceDesc>
		</fileDesc>
		<profileDesc>
			<abstract>
				<p>This paper presents a method to implement delta compression for metadata storage in flash memory. With the abundant temporal redundancy in metadata, it is very intuitive to expect flash-based metadata storage can significantly benefit from delta compression. However, straightforward realization of delta compression demands the storage of the original data and the deltas among different versions in different flash memory physical pages, which leads to significant overhead in terms of read/write latency and data management complexity. Through experiments with 20nm NAND flash memory chips, we observed that, when operating in SLC mode, flash memory page can be programmed in a progressive manner, i.e., different portion of the same SLC flash memory page can be programmed at different time. This motivates us to propose a simple design approach that can realize delta compression for metadata storage without latency and data management complexity overheads. The key idea is to allocate SLC-mode flash memory pages for meta-data, and store the original data and all the subsequent deltas in the same physical page through progressive programming. Experimental results show that this approach can significantly reduce the metadata write traffic without any latency overhead.</p>
			</abstract>
		</profileDesc>
	</teiHeader>
	<text xml:lang="en">
		<body>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="1">Introduction</head><p>Although metadata occupy relatively small percentage of storage space, they tend to account for a large percentage of storage I/O traffic. It is well known that consecutive metadata update operations have abundant temporal redundancy. Intuitively, this can be leveraged to realize delta compression and hence largely reduce the write traffic on the I/O stack and/or on the physical storage media. Many design solutions have been proposed in the literature to exploit data storage temporal redundancy at different levels, such as file systems <ref type="bibr" target="#b0">[1,</ref><ref type="bibr" target="#b1">2]</ref>, block device <ref type="bibr" target="#b2">[3]</ref><ref type="bibr" target="#b4">[4]</ref><ref type="bibr" target="#b5">[5]</ref><ref type="bibr" target="#b6">[6]</ref> and FTL (Flash Translation Layer) <ref type="bibr" target="#b7">[7]</ref>. These existing solutions detect the data similarity and then store the compressed difference between consecutive versions. The host must fetch more than one pages to retrieve the latest data. In addition, the host needs to keep the page mapping information between old data and the compressed deltas. Therefore, the file system and/or firmware have to support sophisticated data structure. As a result, although these existing solutions can be directly applied to metadata storage in flash memory, they inevitably result in metadata data access latency overhead and hence system performance penalty. This paper presents a design solution that can effectively implement delta compression for metadata storage in flash memory. First, through experiments with leading-edge 20nm NAND flash memory chips, we observed that, when being used in SLC mode, flash memory pages can support progressive programming, i.e., different portions of the same SLC flash memory page can be programmed at different time. This clearly makes it possible to store the original data and the subsequent deltas in the same physical page. Since the runtime delta compression/decompression can be carried out by SSD controllers much faster than flash memory page read, this can essentially eliminate the data access latency overhead in the realization of delta compression.</p><p>We carried out experiments and simulations to evaluate the effectiveness of proposed design solution. First, we verified the feasibility of SLC-mode flash memory page progressive programming using a PCIe FPGAbased flash memory characterization hardware prototype with 20nm MLC NAND flash memory chips. We further implemented a metadata analyzer under Linux to monitor and collect a large set of consecutive versions of metadata. The results show that the delta compression efficiency can be up to 1:0.069. In addition, the proposed solution can significantly reduce the metadata write data volume to flash memory. Finally, we studied the latency incurred by decompression and the results further verified that they do not add noticeable latency overhead.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2">Background and Motivation 2.1 Conventional Methods for Realizing Delta Compression</head><p>Delta compression aims to detect the data content similarity and store the compressed difference. The file system level approach presented in <ref type="bibr" target="#b1">[2]</ref> stores and indexes the deltas of similar regions. Design solutions in <ref type="bibr" target="#b2">[3,</ref><ref type="bibr" target="#b4">4,</ref><ref type="bibr" target="#b6">6]</ref> reduce the waste of space by detecting and eliminating the duplicate content in block device level. The FTL-level approach presented in <ref type="bibr" target="#b7">[7]</ref> stores the compressed deltas to a temporary buffer and commits them together to the flash memory when the buffer is full.</p><p>In spite of their good delta compression efficiency, these existing solutions have some significant limitations. First, the new data is stored in a different location from the old data. So the host must visit at least two different locations to retrieve one page of data, which brings significant read overhead. Second, extra mapping information must be stored as well to maintain the correlation among different versions. This leads to sophisticated data structures and data management, especially for readintensive applications.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.2">Characteristics of Metadata</head><p>A fundamental feature in flash storage systems is that the data access must be page-aligned, i.e., the basic access unit of flash devices is one physical page. Even though the host only needs to update a single byte, it must read and write one entire flash memory page. It is obvious that there could be certain redundancy because of the writeback of the same data, and this problem is the most noticeable for metadata storage due to its following distinct characteristics.</p><p>â€¢ Small update size: Although the page size is as large as 16KB even 32KB, the possible access size may be only several bytes even bits. A study <ref type="bibr" target="#b8">[8]</ref> shows that more than 80% of write operations in some Android applications are partial page overwrites less than 4KB.</p><p>â€¢ Frequent updates within a short time: Metadata updates are triggered frequently. Every I/O action, even a simple file opening, will trigger a metadata update. For instance, as shown in <ref type="bibr" target="#b9">[9]</ref>, to update merely 6 bytes within a text file on disk triggers the write of 11 physical pages for updating various content including bitmapping, inode, data, etc.</p><p>â€¢ Large percentage of disk traffic: According to a recent study <ref type="bibr" target="#b10">[10]</ref>, the metadata region only occupies 5% of the storage space but consumes more than 20% of the write traffic.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.3">Progressive Programming</head><p>In this work, we observed that SLC NAND flash memory can support progressive programming, i.e., different portions in a SLC flash memory page can be programmed at different time. As illustratd in <ref type="figure">Figure 1</ref>, we first write the logical page D 0 , consisting of data d 0 d 1 . . . d n , into the physical page P 0 and leave the rest portion unwritten. Later on, we can write a new data L 1 , consisting of data l 0 l 1 . . . l m , into the physical page P 0 , i.e., append L 1 with the existing data D 0 in the same physical page. This can be realized through a read-append-overwrite procedure:</p><p>We read out the original data content</p><formula xml:id="formula_0">d 0 d 1 . . . d n , append the new data l 0 l 1 . .</formula><p>. l m and pad with '1' to form the data for an entire physical page, and then write the data back to the physical page P 0 .</p><formula xml:id="formula_1">D 0 unwritten P 0 Physical page D 0 unwritten P 0 L 1 Overwrite d 0 d 1 â€¦ d n l 1 l 2 â€¦ l m 1 â€¦ 11 Page content d 0 d 1 â€¦ d n 111â€¦111 â€¦ 11 d 0 d 1 â€¦ d n l 1 l 2 â€¦ l m 1 â€¦ 11</formula><p>Figure 1: Illustration of flash memory progressive programming.</p><p>Using 20nm MLC NAND flash memory chips, we carried out experiments and the results show that the chips can support the progressive programming when being operated in the SLC mode. In our experiments, we define "one cycle" as progressively programming the flash page for 8 times before it is filled up and then being erased. In contrast, the conventional "one cycle" is to fully erase before each programming. <ref type="figure" target="#fig_0">Figure 2</ref> demonstrates the bit error rate comparison of these two schemes. The flash memory can be used for 8000 cycles with the conventional way. The progressive programming can work for more than 7000 cycles, which indicates that the progressive programming mechanism does not bring noticeable extra physical damage to flash memory cells. </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3">Proposed Solution 3.1 Metadata Update on NAND Flash</head><p>Leveraging the progressive programming feature of SLC-mode flash memory, we can effectively realize delta compression for metadata. Here we assume that the host is able to provide certain hint information to help the storage device to distinguish metadata from normal data.</p><p>The proposed design solution is illustrated in <ref type="figure" target="#fig_1">Figure 3</ref>. A physical flash memory page is divided into two portions (denoted as p 0 and p 1 ). We only use the first portion p 0 to store the original metadata content, and leave the second portion p 1 to store the deltas. Suppose D 0 is stored in the portion p 0 and p 1 is left unwritten at the beginning, <ref type="figure" target="#fig_2">Figure 4</ref> shows the flow diagram for realizing metadata delta compression. </p><formula xml:id="formula_2">p 1 D 0 P 0 D 0 P 0 L 1 L 1 L 2 D 0 P 0 L 1 L i ... D i+1 P 1 Initial version D 0 Version D 1 Version D 2 Full: Version D i NewPage: Version D i+1</formula><p>Allocate a new page As shown in <ref type="figure" target="#fig_1">Figure 3</ref>, when the host again writes a newer version data D 2 , we first read D 0 and L 1 from the physical page to reconstruct the latest data block D 1 . Then we compress the difference between D 1 and D 2 , and append the compressed difference L 2 into the same physical page. Clearly, the storage system still only needs to record the location of the physical page P 0 to recover D 2 . The same process repeats as the host continues to write new data blocks until the physical page P 0 is full.</p><p>Once the physical page is full after the i-th version D i is written, we allocate a new physical page, write the latest version data D i+1 to the new physical page, and reset the delta compression for subsequent updates. This mechanism can guarantee that we only need to read a single page to retrieve the latest version data.</p><p>From the above description, we can see that this proposed design solution can eliminate all the extra index/mapping information in conventional realization of delta compression. In addition, we do not need to record Compared with the conventional techniques described in Section 2.1, the proposed design solution has three major advantages:</p><p>â€¢ Since the original data and all the subsequent compressed differences are stored in the same flash physical page, it does not require special data management and hence does not complicate the design of file system and device firmware.</p><p>â€¢ When we read the data at one logical address, we only need to read one physical page based upon which we carry out successive decompression. This fundamentally eliminates the read latency penalty.</p><p>â€¢ The updated page can be written back to the flash memory any time without waiting in the buffer. The proposed technique can be used together with data buffering to fully minimize the write traffic to flash memory chips.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.2">Implementation of Delta Compression</head><p>It is clear that the delta compression contains two steps: the first step is to generate the difference by bit-wise X-OR operation and the second step is to compress it using entropy coding (e.g., run-length encoding). In this work, we use a simple method to improve the compression efficiency of the difference, which is illustrated in <ref type="figure">Figure 5</ref>. We partition each data page into a number of equal-sized segments, e.g., each segment can be few bytes, and compare the two data pages with the unit of segment. The segments with different content are called mismatched segments. In stead of using bit-wise XOR and entropy coding, we simply record the index of each mismatched segment and the segment content. This is referred to diffindex compression. Clearly, given the old version of data page and the diff-index compression result, we can directly reconstruct the new version of data.</p><p>...</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Old Data</head><p>New Data Different segments Index Compressed ...</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head>Index Index</head><p>Figure 5: Illustration of the proposed diff-index delta compression.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4">Evaluations</head><p>In this section, we evaluated the compression efficiency of temporal redundancy based delta compression and the performance gains of the proposed design solution.</p><p>File system metadata includes superblock, block group descriptor, bitmaps and file inodes, but we only focus on the file inodes here because superblock and bitmap occupy a rather small space on disk. We modified Mobibench <ref type="bibr" target="#b10">[10]</ref> to make it work as the I/O workload benchmark under Linux Ubuntu 14.04 Desktop. We use a large set of SQLite workload (create, insert, update, delete) and general file system tasks (file read, update, append). The database and file metadata are updated consecutively triggered by I/O workloads. To monitor the characteristics of metadata, based upon the existing tool debugfs <ref type="bibr" target="#b11">[11]</ref>, we implemented a metadata analyzer tool 1 to track, extract, and analyze the file system metadata.</p><p>We use ext4 file system as the experimental environment and set the system page cache write back period as 500ms. Every time before we collect the file metadata, we wait for 1s to ensure that file metadata are flushed back to the storage device. For each workload, we collect 1000 consecutive versions of metadata.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.1">Compression Efficiency</head><p>Based on the collected consecutive versions of metadata, we investigated the metadata compression efficiency of each kind of I/O operations. The results are shown in <ref type="figure" target="#fig_3">Figure 6</ref>. We use both the conventional compression scheme (i.e., bit-wise XOR followed by run-length encoding) and the proposed diff-index compression scheme described in Section 3.2. For the case of using the runlength coding, the average compression ratio is 1:0.087 and the standard deviation of is 0.0096. In comparison, when using the proposed diff-index compression 1 metaAnalyzer: https://github.com/SmartStorage/metaAnalyzer scheme, the average compression ratio is 1:0.069 with the standard deviation of 0.0087. We note that a smaller standard deviation means a more stable delta compression efficiency. The results clearly demonstrate the significant data volume reduction potential by applying delta compression for metadata. The compression efficiency of the proposed diff-index compression scheme is better than the conventional run-length coding based scheme because modified content tend to concentrate around certain fields in the metadata structure. </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.2">Write Traffic Reduction of Metadata</head><p>As described earlier, in order to ensure that the original data and its subsequent deltas are stored in the same physical page, the delta compression must be reset once the physical page has been filled up. As a result, the write traffic reduction is less than the delta compression gains presented above. We carried out further study to evaluate the write traffic reduction. We set each physical page size as 16KB and leave 512B for storing the compressed deltas. <ref type="figure" target="#fig_4">Figure 7</ref> shows the number of flash memory physical pages bing written when writing 1000 versions of metadata under different workloads. The results show that, when using the proposed design solution, about 40 SLC pages would be enough to store 1000 consecutive versions of metadata under SQlite/File workload. For the baseline without using delta compression, we have to allocate 1000 MLC or TLC pages. </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.3">Practical Considerations</head><p>As discussed in Section 2.1, the conventional practice of implementing delta compression must store extra information relating the original data and the compressed deltas, and must fetch multiple flash pages in order to reconstruct the latest version. In contrast, the proposed solution can guarantee that the original data and deltas are located in the same physical page. Thus, the read latency overhead can be fundamentally eliminated. We further investigate the latency induced by delta decompression/compression when being implemented by ARM processors. To emulate their execution on AR-M platforms, we cross-compile the compression algorithm source code and run them on the Android tablet's bottom-level Linux system. The tablet's CPU frequency is set as 1026MHz with only one core enabled, and the average encoding and decoding latency for a 16KB physical page is shown in <ref type="table">Table.</ref> 1. Recall that the read/write latency for a SLC mode flash page is 41Âµs/150Âµs <ref type="bibr" target="#b12">[12]</ref>, we can conclude that the decompression and compression do not noticeably affect the I/O performance. In fact, the latency in <ref type="table">Table.</ref> 1 is just a very conservative worst-case estimation. In practice, the compression/decompression should be implemented by an ASIC accelerator in storage device controller, which can outperform ARM-based implementation by at least few orders of magnitudes. Practical implementation of the proposed design solution demands the change on ECC management. The ECC redundancy bits will be generated and appended together with the deltas. Before the deltas are appended to the flash page, the length of compressed delta should be written in the page, which will be used for the ECC decoding in the future.</p><p>An obvious overhead of the proposed solution is that the flash memory is used at its SLC mode, which leads to half of its storage space waste. However, this would not be a problem if more than one version of delta can be compressed into this physical page, which is very likely because of the abundant temporal redundancy in metadata as demonstrated in Section 4.1. In addition, since metadata occupy a small percentage of storage space, the use of SLC-mode flash storage will not incur significant storage space overhead. Finally, it should be pointed out that this proposed technique is only eared to flashbased storage devices and is not applicable to storage devices using byte-addressable non-volatile memory (e.g., phase-change memory).</p></div><figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_0"><head>Figure 2 :</head><label>2</label><figDesc>Figure 2: Comparison of the bit error rate of conventional programming and progressive programming.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_1"><head>Figure 3 :</head><label>3</label><figDesc>Figure 3: Illustration of proposed update procedures.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_2"><head>GenerateFigure 4 :</head><label>4</label><figDesc>Figure 4: Flow diagram for realizing metadata delta compression.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_3"><head>Figure 6 :</head><label>6</label><figDesc>Figure 6: Average delta compression ratio.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_4"><head>Figure 7 :</head><label>7</label><figDesc>Figure 7: Number of flash memory pages required to write 1000 versions of metadata.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_1" validated="false"><head>Table 1 : ARM-based delta compression and decompres- sion latency.</head><label>1</label><figDesc></figDesc><table>Algorithm 
Run-length coding 
Diff-index comp. 
Compression(Âµs) 
20.7 
5.2 
Decompression(Âµs) 
8.1 
4.1 

</table></figure>
		</body>
		<back>

			<div type="acknowledgement">
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5">Conclusion</head><p>In this paper, we present a simple design solution to support delta compression for metadata storage in flash memory. The key is to leverage the fact that SLC-mode flash memory pages can naturally support progressive programming. This makes it possible to store the original data and its subsequent deltas in the same physical page. Its effectiveness has been well demonstrated through experiments and simulations. Future research is directed to expanding this design solution to other update-intensive applications such as database operations, cloud storage sync-up, etc.</p></div>
			</div>

			<div type="references">

				<listBibl>

<biblStruct xml:id="b0">
	<analytic>
		<title level="a" type="main">Glimpse: A tool to search through entire file systems</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">U</forename><surname>Manber</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Wu</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Usenix Winter</title>
		<imprint>
			<date type="published" when="1994" />
			<biblScope unit="page" from="23" to="32" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b1">
	<analytic>
		<title level="a" type="main">Delta compressed and deduplicated storage using stream-informed locality</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><surname>Shilane</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">G</forename><surname>Wallace</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Huang</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">W</forename><surname>Hsu</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">USENIX conference on Hot Topics in Storage and File Systems (HotStorage&apos;12)</title>
		<meeting><address><addrLine>Berkeley, CA</addrLine></address></meeting>
		<imprint>
			<date type="published" when="2012" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b2">
	<analytic>
		<title level="a" type="main">Peabody: The time travelling disk</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><forename type="middle">B</forename><surname>Morrey</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Grunwald</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Mass Storage Systems and Technologies (MSST&apos;03)</title>
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b3">
	<analytic>
		<title/>
	</analytic>
	<monogr>
		<title level="j">IEEE</title>
		<imprint>
			<biblScope unit="page" from="241" to="253" />
			<date type="published" when="2003" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b4">
	<analytic>
		<title level="a" type="main">I-CASH: Intelligently coupled array of ssd and hdd</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Q</forename><surname>Yang</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Ren</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">High Performance Computer Architecture (HP-CA&apos;11)</title>
		<imprint>
			<date type="published" when="2011-02" />
			<biblScope unit="page" from="278" to="289" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b5">
	<analytic>
		<title level="a" type="main">How much can data compressibility help to improve nand flash memory lifetime</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Li</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">K</forename><surname>Zhao</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">X</forename><surname>Zhang</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Ma</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Zhao</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><surname>Zhang</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of 13th USENIX Conference on File and Storage Technologies (FAST&apos;15)</title>
		<meeting>13th USENIX Conference on File and Storage Technologies (FAST&apos;15)<address><addrLine>Santa Clara, CA</addrLine></address></meeting>
		<imprint>
			<date type="published" when="2015-02" />
			<biblScope unit="page" from="227" to="240" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b6">
	<analytic>
		<title level="a" type="main">Trap-array: A disk array architecture providing timely recovery to any point-in-time</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Q</forename><surname>Yang</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">W</forename><surname>Xiao</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Ren</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">ACM SIGARCH Computer Architecture News</title>
		<imprint>
			<biblScope unit="volume">34</biblScope>
			<biblScope unit="issue">2</biblScope>
			<biblScope unit="page" from="289" to="301" />
			<date type="published" when="2006" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b7">
	<analytic>
		<title level="a" type="main">Delta-FTL: Improving SSD lifetime via exploiting content locality</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">G</forename><surname>Wu</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">X</forename><surname>He</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 7th ACM european conference on Computer Systems (Eurosys&apos;12)</title>
		<meeting>the 7th ACM european conference on Computer Systems (Eurosys&apos;12)<address><addrLine>New York, NY, USA</addrLine></address></meeting>
		<imprint>
			<date type="published" when="2012" />
			<biblScope unit="page" from="253" to="266" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b8">
	<analytic>
		<title level="a" type="main">Non-blocking writes to files</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Campello</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">H</forename><surname>Lopez</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Koller</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Rangaswami</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">L</forename><surname>Useche</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of 13th USENIX Conference on File and Storage Technologies (FAST&apos;15)</title>
		<meeting>13th USENIX Conference on File and Storage Technologies (FAST&apos;15)<address><addrLine>Santa Clara, CA</addrLine></address></meeting>
		<imprint>
			<date type="published" when="2015-02" />
			<biblScope unit="page" from="151" to="165" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b9">
	<analytic>
		<title level="a" type="main">Extending the lifetime of flashbased storage through reducing write amplification from file systems</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Y</forename><surname>Lu</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Shu</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">W</forename><surname>Zheng</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of 11th USENIX Conference on File and Storage Technologies (FAST&apos;13)</title>
		<meeting>11th USENIX Conference on File and Storage Technologies (FAST&apos;13)<address><addrLine>San Jose, CA</addrLine></address></meeting>
		<imprint>
			<date type="published" when="2013" />
			<biblScope unit="page" from="257" to="270" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b10">
	<analytic>
		<title level="a" type="main">I/O stack optimization for smartphones</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Jeong</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">K</forename><surname>Lee</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Lee</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Son</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Y</forename><surname>Won</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">USENIX Annual Technical Conference (ATC&apos;13)</title>
		<meeting><address><addrLine>San Jose, CA</addrLine></address></meeting>
		<imprint>
			<date type="published" when="2013" />
			<biblScope unit="page" from="309" to="320" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b11">
	<monogr>
		<title level="m" type="main">Debugfs</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><surname>Tso</surname></persName>
		</author>
		<imprint/>
	</monogr>
</biblStruct>

<biblStruct xml:id="b12">
	<analytic>
		<title level="a" type="main">Reducing SSD read latency via nand flash program and erase suspension</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">G</forename><surname>Wu</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">X</forename><surname>He</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of 10th USENIX Conference on File and Storage Technologies (FAST&apos;12)</title>
		<meeting>10th USENIX Conference on File and Storage Technologies (FAST&apos;12)</meeting>
		<imprint>
			<date type="published" when="2012" />
			<biblScope unit="page">10</biblScope>
		</imprint>
	</monogr>
</biblStruct>

				</listBibl>
			</div>
		</back>
	</text>
</TEI>
