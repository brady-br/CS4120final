<?xml version="1.0" encoding="UTF-8"?>
<TEI xmlns="http://www.tei-c.org/ns/1.0" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
xsi:schemaLocation="http://www.tei-c.org/ns/1.0 /Users/atharsefid/Desktop/grobid-0.5.3/grobid-home/schemas/xsd/Grobid.xsd"
 xmlns:xlink="http://www.w3.org/1999/xlink">
	<teiHeader xml:lang="en">
		<encodingDesc>
			<appInfo>
				<application version="0.5.3" ident="GROBID" when="2020-09-29T02:25+0000">
					<ref target="https://github.com/kermitt2/grobid">GROBID - A machine learning software for extracting information from scholarly documents</ref>
				</application>
			</appInfo>
		</encodingDesc>
		<fileDesc>
			<titleStmt>
				<title level="a" type="main">CoSMIX: A Compiler-based System for Secure Memory Instrumentation and Execution in Enclaves CoSMIX: A Compiler-based System for Secure Memory Instrumentation and Execution in Enclaves</title>
			</titleStmt>
			<publicationStmt>
				<publisher/>
				<availability status="unknown"><licence/></availability>
				<date>July 10-12, 2019</date>
			</publicationStmt>
			<sourceDesc>
				<biblStruct>
					<analytic>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Meni</forename><surname>Orenbach</surname></persName>
							<affiliation key="aff0">
								<orgName type="department" key="dep1">Anjuna Security</orgName>
								<orgName type="department" key="dep2">Mark Silberstein Technion</orgName>
								<orgName type="institution" key="instit1">Anjuna Security</orgName>
								<orgName type="institution" key="instit2">Christof Fetzer, TU</orgName>
								<address>
									<settlement>Dresden; Mark Silberstein, Technion</settlement>
									<country>Technion</country>
								</address>
							</affiliation>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Technion</forename><forename type="middle">;</forename></persName>
							<affiliation key="aff0">
								<orgName type="department" key="dep1">Anjuna Security</orgName>
								<orgName type="department" key="dep2">Mark Silberstein Technion</orgName>
								<orgName type="institution" key="instit1">Anjuna Security</orgName>
								<orgName type="institution" key="instit2">Christof Fetzer, TU</orgName>
								<address>
									<settlement>Dresden; Mark Silberstein, Technion</settlement>
									<country>Technion</country>
								</address>
							</affiliation>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Yan</forename><surname>Michalevsky</surname></persName>
							<affiliation key="aff0">
								<orgName type="department" key="dep1">Anjuna Security</orgName>
								<orgName type="department" key="dep2">Mark Silberstein Technion</orgName>
								<orgName type="institution" key="instit1">Anjuna Security</orgName>
								<orgName type="institution" key="instit2">Christof Fetzer, TU</orgName>
								<address>
									<settlement>Dresden; Mark Silberstein, Technion</settlement>
									<country>Technion</country>
								</address>
							</affiliation>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Meni</forename><surname>Orenbach</surname></persName>
							<affiliation key="aff0">
								<orgName type="department" key="dep1">Anjuna Security</orgName>
								<orgName type="department" key="dep2">Mark Silberstein Technion</orgName>
								<orgName type="institution" key="instit1">Anjuna Security</orgName>
								<orgName type="institution" key="instit2">Christof Fetzer, TU</orgName>
								<address>
									<settlement>Dresden; Mark Silberstein, Technion</settlement>
									<country>Technion</country>
								</address>
							</affiliation>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Yan</forename><surname>Michalevsky</surname></persName>
							<affiliation key="aff0">
								<orgName type="department" key="dep1">Anjuna Security</orgName>
								<orgName type="department" key="dep2">Mark Silberstein Technion</orgName>
								<orgName type="institution" key="instit1">Anjuna Security</orgName>
								<orgName type="institution" key="instit2">Christof Fetzer, TU</orgName>
								<address>
									<settlement>Dresden; Mark Silberstein, Technion</settlement>
									<country>Technion</country>
								</address>
							</affiliation>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Christof</forename><surname>Fetzer</surname></persName>
							<affiliation key="aff0">
								<orgName type="department" key="dep1">Anjuna Security</orgName>
								<orgName type="department" key="dep2">Mark Silberstein Technion</orgName>
								<orgName type="institution" key="instit1">Anjuna Security</orgName>
								<orgName type="institution" key="instit2">Christof Fetzer, TU</orgName>
								<address>
									<settlement>Dresden; Mark Silberstein, Technion</settlement>
									<country>Technion</country>
								</address>
							</affiliation>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><forename type="middle">U</forename><surname>Dresden</surname></persName>
							<affiliation key="aff0">
								<orgName type="department" key="dep1">Anjuna Security</orgName>
								<orgName type="department" key="dep2">Mark Silberstein Technion</orgName>
								<orgName type="institution" key="instit1">Anjuna Security</orgName>
								<orgName type="institution" key="instit2">Christof Fetzer, TU</orgName>
								<address>
									<settlement>Dresden; Mark Silberstein, Technion</settlement>
									<country>Technion</country>
								</address>
							</affiliation>
						</author>
						<title level="a" type="main">CoSMIX: A Compiler-based System for Secure Memory Instrumentation and Execution in Enclaves CoSMIX: A Compiler-based System for Secure Memory Instrumentation and Execution in Enclaves</title>
					</analytic>
					<monogr>
						<title level="m">Proceedings of the 2019 USENIX Annual Technical Conference</title>
						<meeting>the 2019 USENIX Annual Technical Conference <address><addrLine>Renton, WA, USA</addrLine></address>
						</meeting>
						<imprint>
							<date type="published">July 10-12, 2019</date>
						</imprint>
					</monogr>
					<note>This paper is included in the Open access to the Proceedings of the 2019 USENIX Annual Technical Conference is sponsored by USENIX. https://www.usenix.org/conference/atc19/presentation/orenbach</note>
				</biblStruct>
			</sourceDesc>
		</fileDesc>
		<profileDesc>
			<abstract>
				<p>Hardware secure enclaves are increasingly used to run complex applications. Unfortunately, existing and emerging enclave architectures do not allow secure and efficient implementation of custom page fault handlers. This limitation impedes in-enclave use of secure memory-mapped files and prevents extensions of the application memory layer commonly used in untrusted systems, such as transparent memory compression or access to remote memory. CoSMIX is a Compiler-based system for Secure Memory Instrumentation and eXecution of applications in secure enclaves. A novel memory store abstraction allows implementation of application-level secure page fault handlers that are invoked by a lightweight enclave runtime. The CoSMIX compiler instruments the application memory accesses to use one or more memory stores, guided by a global instrumentation policy or code annotations without changing application code. The CoSMIX prototype runs on Intel SGX and is compatible with popular SGX execution environments, including SCONE and Graphene. Our evaluation of several production applications shows how CoSMIX improves their security and performance by recompiling them with appropriate memory stores. For example, unmodified Redis and Memcached key-value stores achieve about 2× speedup by using a self-paging memory store while working on datasets up to 6× larger than the enclave&apos;s secure memory. Similarly, annotating a single line of code in a biometric verification server changes it to store its sensitive data in Oblivious RAM and makes it resilient against SGX side-channel attacks.</p>
			</abstract>
		</profileDesc>
	</teiHeader>
	<text xml:lang="en">
		<body>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="1">Introduction</head><p>Virtual Memory is integral to modern processor architectures. In addition to its primary role in physical memory management, it empowers developers to extend the standard memory layer with custom data storage mechanisms in software. For example, the memory-mapped file abstraction, which is broadly used, e.g., in databases <ref type="bibr">[10,</ref><ref type="bibr" target="#b4">5]</ref>, relies on the OS's page fault handler to map a frame and populate it with the contents of a file. Replacing accesses to physical memory with file accesses requires no application code changes. Therefore, the ability to override page fault behavior has been essential for implementing a range of system services, such as memory compression <ref type="bibr" target="#b42">[44]</ref>, disaggregation <ref type="bibr" target="#b37">[39,</ref><ref type="bibr" target="#b73">75]</ref>, distributed shared memory <ref type="bibr" target="#b34">[36,</ref><ref type="bibr" target="#b44">46]</ref> and heterogeneous memory support <ref type="bibr" target="#b35">[37]</ref>.</p><p>With the emergence of Software Guard Extensions (SGX) for Trusted Execution in Intel CPUs <ref type="bibr" target="#b14">[16,</ref><ref type="bibr" target="#b53">55]</ref>, applications are increasingly ported to be entirely executed in hardwareenforced enclaves <ref type="bibr" target="#b56">[58,</ref><ref type="bibr" target="#b43">45,</ref><ref type="bibr" target="#b21">23,</ref><ref type="bibr" target="#b23">25]</ref>. The enclave hardware protects them from attacks by a powerful privileged adversary, such as a malicious OS or a hypervisor. A number of recent systems facilitate the porting to SGX by shielding unmodified applications in an enclave <ref type="bibr" target="#b19">[21,</ref><ref type="bibr" target="#b79">81,</ref><ref type="bibr" target="#b16">18]</ref>. Unfortunately, these systems do not allow secure overriding of page fault handling in enclave applications. This drawback complicates porting a large class of applications that use memory-mapped files to SGX. Further, it prevents SGX applications from using security and performance enhancements, such as efficient memory paging <ref type="bibr" target="#b59">[61]</ref> and Oblivious RAM (ORAM) side-channel protection <ref type="bibr" target="#b65">[67,</ref><ref type="bibr" target="#b9">11,</ref><ref type="bibr" target="#b86">88]</ref> without intrusive application modifications. Our goal is to eliminate these constraints.</p><p>For example, consider the task of running an SQLite database that uses memory-mapped files in the enclave. The database file must be encrypted to ensure data confidentiality. Enabling in-enclave execution of SQLite therefore requires support for encrypted memory-mapped files, which in turn implies that the page fault handler must be executed securely as well. Unfortunately, hardware enclaves available today do not support secure page faults. Instead, existing solutions use workarounds, such as eagerly reading and decrypting the whole mapped file region into trusted enclave memory <ref type="bibr" target="#b16">[18]</ref>. This solution does not scale to large files and lacks the performance benefits of on-demand data access.</p><p>We argue that the problem is rooted in the fundamental limitation of SGX architecture, which does not provide the mechanism to define secure page fault handlers. The upcoming SGX-V2 <ref type="bibr" target="#b52">[54,</ref><ref type="bibr" target="#b84">86,</ref><ref type="bibr" target="#b41">43]</ref> will not solve this problem either. Moreover, we observe that existing and emerging secure enclave architectures <ref type="bibr" target="#b26">[28,</ref><ref type="bibr" target="#b3">4,</ref><ref type="bibr" target="#b32">34]</ref> suffer from similar limitations( §2).</p><p>In this work, we build CoSMIX, a compiler and a lightweight enclave runtime that overcomes the SGX architectural limitations and enables secure and efficient extensions to the memory layer of unmodified applications running in enclaves. We introduce a memory store, (mstore), a programming abstraction for implementing custom memory management extensions for enclaves. The CoSMIX compiler automatically instruments application code to allocate the selected variables and memory buffers in the mstore, replacing the accesses to enclave memory with the accesses to the mstore. The mstore logic runs in the enclave as part of the application. The CoSMIX runtime securely invokes the mstore memory management callbacks, which include custom page fault handlers. The page faults are semantically equivalent to hardware page faults yet are triggered by the CoSMIX runtime.</p><p>An mstore can implement the missing functionalities that require secure page fault handlers. For example, it may provide the secure mmap functionality by implementing the page fault handler that accesses the file and decrypts it into the application buffer. A more advanced mstore may add its own in-memory cache analogous to an OS page cache, to avoid costly accesses to the underlying storage layer. CoSMIX supports several types of mstores, adjusting the runtime to handle different mstore behaviors while optimizing the performance.</p><p>CoSMIX allows the use of multiple mstores in the same program. This can be used, for example, to leverage both secure mmap mstore and an ORAM mstore for side-channel protection. Additionally, CoSMIX supports stacking of multiple mstores to enable their efficient composition and reuse. We design and prototype three sophisticated mstores in §3.2.5, and demonstrate the benefits of stacking in §4.5.</p><p>CoSMIX's design focuses on two primary goals: (1) minimizing the application modifications to use mstores and (2) reducing the instrumentation performance overheads. We introduce the following mechanisms to achieve them: Automatic inference of pointer types. CoSMIX does not require annotating every access to a pointer. Instead, it uses inter-procedural pointer analysis <ref type="bibr" target="#b15">[17]</ref> to determine the type of the mstore (or plain memory) to use for each pointer. When the static analysis is inconclusive, CoSMIX uses tagged pointers <ref type="bibr" target="#b45">[47,</ref><ref type="bibr" target="#b72">74,</ref><ref type="bibr" target="#b11">13]</ref> with the mstore type encoded in the unused Most Significant Bits, enabling runtime detection ( §3.3.1). Locality-optimized translation caching. The mstore callbacks interpose on memory accesses, which are part of the performance-critical path of the application. To reduce the associated overheads, we employ static compiler optimizations to reduce the number of runtime pointer type checks and mstore accesses. These include loop transformations and a software Translation Lookaside Buffer (TLB) ( §3.3.4). These mechanisms reduce the instrumentation overheads by up to two orders of magnitude ( §4.2).</p><p>Our prototype targets existing SGX hardware and is compatible with several frameworks for running unmodified applications in enclaves <ref type="bibr" target="#b79">[81,</ref><ref type="bibr" target="#b0">1,</ref><ref type="bibr" target="#b16">18]</ref>. However, CoSMIX makes no assumptions about enclave hardware. The CoSMIX compiler is implemented as an extension of the LLVM framework <ref type="bibr" target="#b46">[48]</ref>.</p><p>We prototype three mstores: Secure User Virtual Memory (SUVM) for efficient paging in memory-intensive applications <ref type="bibr" target="#b59">[61]</ref>, Oblivious RAM <ref type="bibr" target="#b76">[78]</ref> for controlled side-channel protection, and a secure mmap mstore that supports access to encrypted/integrity-protected memory-mapped files. We evaluate CoSMIX on the Phoenix benchmark suite <ref type="bibr" target="#b64">[66]</ref>, as well as on unmodified production servers: memcached, Redis, SQLite, and a biometric verification server <ref type="bibr" target="#b59">[61]</ref>. The compiler is able to correctly instrument all of these applications, some with hundreds of thousands of lines of code (LOC), without the need to manually change the application code.</p><p>Our microbenchmarks using Phoenix with SUVM and secure mmap mstores show that CoSMIX instrumentation results in a low geometric mean overhead of 20%.</p><p>For the end-to-end evaluation, we run memcached and Redis key value stores on 600 MB datasets -each about 6× the size of the secure physical memory available to SGX enclaves. In this setting, SGX hardware paging significantly affects the performance. The SUVM <ref type="bibr" target="#b59">[61]</ref> mstore aims to optimize exactly this scenario. To use it, we only annotate the item allocator in memcached (a single line of code) and compile it with CoSMIX. Redis is compiled without adding annotations. The instrumented versions of both servers achieve about 2× speedup compared to their respective vanilla SGX baselines.</p><p>In another experiment, we evaluate a biometric verification server with a database storing 256 MB of sensitive data. We use the ORAM mstore to protect it from SGX controlled sidechannel attacks <ref type="bibr" target="#b85">[87]</ref> that may leak sensitive database access statistics. We annotate the buffers containing this database (one line of code) to use ORAM. The resulting ORAMenhanced application provides security guarantees similar to other ORAM systems for SGX, such as ZeroTrace <ref type="bibr" target="#b65">[67]</ref>, yet without modifying the application source code. ORAM systems are known to result in dramatic performance penalties of several orders of magnitude <ref type="bibr" target="#b24">[26]</ref>. However, our hardened application is only 5.8× slower than the vanilla SGX thanks to the benefits of selective instrumentation enabled by CoSMIX. To summarize, our contributions are as follows:</p><p>• Design of a compiler and an mstore abstraction for transparent secure memory instrumentation ( §3.2).</p><p>• Loop transformation and loop-optimized caching techniques to reduce the instrumentation overheads ( §3.3.4).</p><p>• Seamless security and performance enhancement for unmodified real-world applications running in SGX, by enhancing them with the SUVM, ORAM and secure mmap mstores ( §4).</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2">Motivation</head><p>Enabling the use of custom page fault (PF) handlers in enclaves would not only facilitate porting of existing applications that rely on such functionality, but also enable a range of unique application scenarios, as we discuss next. SUVM. The authors of Eleos <ref type="bibr" target="#b59">[61]</ref> proposed Software Userspace Virtual Memory (SUVM), which implements exit-less memory paging in enclaves and significantly improves the performance of memory-demanding secure applications. It keeps the page cache in the enclave's trusted memory, while the storage layer resides in untrusted memory whose contents are encrypted and integrity-protected.</p><p>ORAM. Oblivious RAM (ORAM) obfuscates memory access patterns by shuffling the physical data locations and reencrypting the contents upon every access. As a result, an adversary observing the accessed locations learns nothing about the actual access pattern to the data <ref type="bibr" target="#b36">[38]</ref>. Multiple ORAM schemes have been proposed over time <ref type="bibr" target="#b36">[38,</ref><ref type="bibr" target="#b82">84,</ref><ref type="bibr" target="#b76">78,</ref><ref type="bibr" target="#b86">88,</ref><ref type="bibr" target="#b65">67,</ref><ref type="bibr" target="#b31">33]</ref>, and, ORAM was recently used to manually secure applications executing in SGX enclaves against certain side-channel attacks <ref type="bibr" target="#b86">[88,</ref><ref type="bibr" target="#b65">67,</ref><ref type="bibr" target="#b31">33]</ref>. Both ORAM and SUVM are generic mechanisms that could be useful in many applications. Unfortunately, integrating them with the application logic requires intrusive code modifications. With the support for efficient and secure in-enclave PF handlers, we could add these mechanisms to existing unmodified programs, as we show in the current work.</p><p>Other applications include transparent compression for inenclave memory, mmap support for encrypted and integrityprotected files, and inter-enclave shared memory, as well as various memory-management mechanisms <ref type="bibr" target="#b37">[39,</ref><ref type="bibr" target="#b73">75,</ref><ref type="bibr" target="#b35">37]</ref>.</p><p>Unfortunately, existing enclave hardware provides no adequate mechanisms to implement efficient and secure userdefined PF handlers, as we describe next.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.1">Background: page-faults in enclaves</head><p>There are several leading enclave architectures: Intel SGX <ref type="bibr" target="#b14">[16,</ref><ref type="bibr" target="#b41">43]</ref>, Komodo for ARM Trust Zone <ref type="bibr" target="#b32">[34,</ref><ref type="bibr" target="#b13">15]</ref>, Sanctum <ref type="bibr" target="#b26">[28]</ref>, and Keystone <ref type="bibr" target="#b3">[4]</ref>. Among these, only Intel SGX and Sanctum published support for paging. We briefly describe them below. Intel SGX <ref type="bibr" target="#b14">[16,</ref><ref type="bibr" target="#b41">43,</ref><ref type="bibr" target="#b53">55</ref>] supports on-demand paging between secure and untrusted memory. SGX relies on Virtual Memory hardware in X86 CPUs. When a PF occurs, the enclave exits to an untrusted privileged OS which invokes the SGX PF handler. The enclave execution resumes (via ERESUME ) after the swapping is complete.</p><p>Since the PF handler is untrusted, the SGX paging is secured via SGX paging instructions. Specifically, EWB encrypts and signs the page when swapping the page out, whereas ELDU validates the integrity and decrypts when swapping it in. These instructions cannot be modified to perform other operations. They cannot change the internal SGX encryption key or modify the swapped page. In other words, they cannot act as a general-purpose secure PF handler. Sanctum <ref type="bibr" target="#b26">[28]</ref> supports per-enclave page tables and secure PF handlers. It uses a security monitor that runs at a higher privilege level than the OS and the hypervisor. Upon a PF, the enclave exits to the security monitor, which triggers the in-enclave secure PF handler.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.2">Limitations of existing enclaves</head><p>Signal handling in SGX. Page fault handlers can be customized in userspace by registering a signal handler. SGX supports signal handlers in enclaves and works according to  <ref type="figure" target="#fig_0">(Figure 1</ref>): when an interrupt occurs, the enclave exits to the OS 1 . The OS takes control and performs an up-call to an untrusted user-space trampoline in the enclave's hosting process 2 . The trampoline re-enters the enclave by invoking the in-enclave signal handler 3 . After the signal handler terminates, the enclave exits 4 and resumes execution of the last instruction 5 via ERESUME. SGX: No secure page fault handlers. The SGX signal handling mechanism cannot guarantee secure execution of the handler itself. When the enclave is resumed after the PF, ERESUME replays the faulting memory access. Therefore, the enclave cannot validate that the signal handler was indeed executed correctly, or was executed at all. To the best of our knowledge, this problem will not be resolved in the next version of SGX <ref type="bibr" target="#b52">[54,</ref><ref type="bibr" target="#b84">86,</ref><ref type="bibr" target="#b41">43]</ref>. SGX: Performance overheads. Even with hardware support for the secure signal handler, SGX has inherent architectural properties that will lead to significant performance penalties, rendering this mechanism unsuitable for customized application memory management. The architecture relies on the OS to manage the enclave's virtual memory. Furthermore, SGX may only run userspace code. Since the OS is untrusted, any secure page fault handling would inevitably follow the signal handling scheme depicted in <ref type="figure" target="#fig_0">Figure 1</ref>, namely, double enclave transition between the trusted and untrusted contexts.</p><p>We measure the latency of an empty SGX PF handler (access to a protected page) to be 11µsec, which is more than 6× the latency of a signal handler outside SGX. For comparison, CoSMIX's software page fault handler is only 0.01 µ second, the cost of a single function call, which is three orders of magnitude faster than in SGX.</p><p>Further analysis shows that the signal latency is dominated by the latency of enclave transitions, which we measure to be 5.3µsec each 1 and stems from costly validation, register scrapping, TLB and L1 cache flushes <ref type="bibr" target="#b80">[82,</ref><ref type="bibr" target="#b41">43]</ref>. Other enclave architectures. Enclave transition overheads are pertinent to other enclave architectures. Komodo reports exit latency of 0.96µs <ref type="bibr" target="#b32">[34]</ref>. Sanctum and Keystone do not disclose their enclave transition penalties, yet they describe similar operations performed when such transitions occur.</p><p>We conclude that secure page fault handlers are not supported in SGX, and are likely to incur high-performance costs in other enclave architectures due to transition overheads.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.3">Code instrumentation for enclaves</head><p>Instrumenting application memory accesses with the desired software PF handling logic is a viable option to achieve the functionality equivalent to the hardware-triggered PF handlers. Unfortunately, existing instrumentation techniques are not sufficient to achieve our goals, as we discuss below.</p><p>Binary instrumentation. Dynamic binary instrumentation tools <ref type="bibr" target="#b49">[51,</ref><ref type="bibr" target="#b55">57,</ref><ref type="bibr" target="#b22">24,</ref><ref type="bibr" target="#b50">52,</ref><ref type="bibr" target="#b69">71]</ref>, such as Intel PIN <ref type="bibr" target="#b49">[51]</ref>, enable instrumentation of memory accesses. Unfortunately, these tools have significant drawbacks in the context of in-enclave execution. For example, for PIN to work, all its libraries should be included in the enclave's Trusted Computing Base (TCB). Moreover, PIN requires JIT-execution mode to instrument memory accesses. Therefore, the enclave code pages should be configured as writable, which might lead to security vulnerabilities. Removing the write access permission from enclave pages will be supported in SGX V2, but doing so will require costly enclave transitions <ref type="bibr" target="#b41">[43]</ref>.</p><p>Static binary instrumentation tools do not suffer from these shortcomings. However, compared to the compiler-based techniques we propose in this work, they do not allow using comprehensive code analysis necessary for performance optimizations. Therefore, we decided against the binary instrumentation design.</p><p>Compiler-based instrumentation. The main advantage of this method is the ability to aggressively reduce the instrumentation overheads by using advanced source code analysis. On the other hand, the source code access requirement limits the applicability of this method. However, this drawback is less critical in the case of SGX enclaves because many SGX execution frameworks, such Panoply <ref type="bibr" target="#b75">[77]</ref> and SCONE <ref type="bibr" target="#b16">[18]</ref>, require code recompilation anyway. Therefore, we opt for compiler-based instrumentation in CoSMIX.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3">CoSMIX Design</head><p>CoSMIX aims to facilitate the integration of different mstores efficiently into SGX applications. Our design goals are:</p><p>• Performance. Low overhead memory-access and software address translation.</p><p>• Ease-of-use. Annotation-based or automatic instrumentation without manual application code modification.</p><p>• General memory extension interface. Easy and modular development of application-specific memory instrumentation libraries.</p><p>• Security. Keep SGX security guarantees and small TCB.</p><p>Threat Model. CoSMIX is designed with the SGX threat model, where the TCB includes the processor package and the enclave's code. Additionally, we assume that the code running in an enclave does not contain memory vulnerabilities. </p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.1">Design overview</head><p>Compiler-based instrumentation. CoSMIX enables SGX developers to build custom memory stores, mstores that redefine the memory layer functionality of an instrumented program. To integrate one or more mstores into an application, the CoSMIX compiler automatically instruments the program ( <ref type="figure" target="#fig_1">Figure 2</ref>). The developer may selectively annotate static variables or/and memory allocations to use different mstores, or define a global instrumentation policy. The compiler automatically instruments the necessary subset of memory accesses with the accesses to the corresponding mstores, and statically links mstore libraries with the code.</p><p>The CoSMIX configuration file defines the instrumentation behavior. It specifies annotation symbols per mstore, mstore type ( §3.2) and the instrumentation policy( §3.3).</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.2">Mstore abstraction</head><p>At a high level, an mstore implements another layer of virtual memory on top of an abstract storage layer. An mstore operates on pages, mpages, and keeps track of the mpage-to-data mappings in its internal mpage table. When an application accesses memory, the runtime invokes the mstore's software page fault handler, retrieves the contents (e.g., for the secure mmap mstore, it would read data from a file and decrypt), and makes it accessible to the application.</p><p>We distinguish between cached and direct-access mstores. A cached mstore maintains its own mpage cache to reduce accesses to the storage layer, whereas a direct-access mstore does not cache the contents. <ref type="figure" target="#fig_2">Figure 3</ref> shows the execution of an access to a cached mstore. The pointer access 1 triggers the runtime call, which chooses the appropriate mstore 2 and checks the translation cache 3 . If the translation is not in the cache, the runtime invokes the mpage fault handler 4 . The mstore translates the pointer 5 , and either fetches the referenced mpage from the page cache 6 , or retrieves it from the storage layer and updates the mpage and translation caches 7 . The runtime cached/dropped the ptr translation in its TLB <ref type="table" target="#tab_0">Table 1</ref>: Compulsory mstore callback functions gram terminates. Importantly, the runtime flushes the mpage cache when tear-down of cached mstores is called. Memory allocation. The runtime delegates the memory allocation calls of the original program to the mstore alloc.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.2.1">Mstore callbacks</head></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.2.2">Pointer access and mpage faults</head><p>When the instrumented code accesses the mstore, the runtime incurs an equivalent of a page fault, and invokes the respective callback in the mstore, as discussed below. Cached mstores. A cached mstore translates the pointer to the mpage inside its cache. mpf_handler_c returns the pointer into the mpage that holds the requested data, allowing direct access from the code. For cross-page misaligned accesses, the runtime creates a temporary buffer and populates it by calling the mpf_handler_c for every page separately. For store access, the updates are written to both pages.</p><p>When the runtime determines that the code is accessing the same mpage multiple times, it may cache the pointer to that mpage in its private TLB. This avoids the address translation overheads for all but the first access to the page. To ensure that the mpage is not swapped out by the mstore logic, the runtime notifies the mstore to pin the mpage in the mpage cache via notify_tlb_cached. The page is unpinned by notify_tlb_dropped when its translation is evicted from the TLB (see §3.3.4 for more details).</p><p>There can be multiple cached mstores in the same program, each with its own mpage size. The runtime can query an mstore page size using the get_mpage_size call, for example, to determine accesses to the same mpage in the TLB.</p><p>A cached mstore must implement the flush() callback to synchronize its mpage cache with the storage layer. This callback is used, for example, to implement the msync call. Direct-access mstores. Direct-access mstores have no cache and thus are easier to implement. The input pointer provided to the mpf_handler_d callback may be used without address translation, and at finer granularity not bound to the mpage size. The runtime provides a thread-local intermediate buffer to store the accessed data. For loads, the program uses this buffer. For stores, the runtime writes the updated contents back to the mstore using the write_back callback.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.2.3">Thread safety and memory consistency</head><p>CoSMIX allows multiple threads to access the same mstore, as long as the mstore implementation is thread-safe.</p><p>For cached mstores, CoSMIX does not change the mstore memory consistency model as long as the accesses are inside the same mpage, and the mpage size is 4KB or larger. The CoSMIX runtime does not introduce extra memory copies for such accesses and effectively inherits the mstore memory consistency. In addition, the mstore itself must ensure that the storage layer is accessed only via its mpage cache, thereby preventing different threads from seeing inconsistent data.</p><p>This guarantee does not hold for direct-access mstores and misaligned cross-mpages. The primary implication is that hardware atomics will not work for such accesses.</p><p>We believe that this limitation does not affect most practical cases. The lack of cross-mpage atomics support does not affect race-free programs synchronized via locks. This is because the intermediate buffer is written back to the mstore immediately after the original store operation and thus will be protected by the original lock. We observed no cases of cross-mpage atomics in the evaluated applications.</p><p>Today, the problem of misaligned cache accesses deserves special handling in compilers. For example, LLVM translates such accesses into the XCHG instruction <ref type="bibr" target="#b41">[43]</ref>. CoSMIX must rely on a software solution, e.g., using readers-write locks per-mpage. We defer this to future work.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.2.4">Memory vs. file-backed mstores</head><p>The mstore abstraction described so far instruments memory accesses alone. However, it is insufficient to enable implementation of memory-mapped files. For example, consider a program that uses mmap to access a file, and then calls fsync. It will not work correctly because fsync is not aware of the mstore's internal cache. Specifically, all the I/O operations on files managed by a file-backed mstore must interact with its mpage cache to avoid data inconsistency.</p><p>We define a file-backed cached mstore type, which implements all the callbacks of memory-backed mstores, but additionally overrides the POSIX file API that interacts with the page cache, e.g., open, close, read, write, msync ( §3.3). Direct-access mstores do not have internal caches; thus they can be used with files without overriding file I/O operations other than mmap itself.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.2.5">Mstore examples</head><p>CoSMIX provides a set of reusable building blocks for mstores, such as a slab memory allocator, spinlocks, a generic mpage table, and an mpage cache, all with multi-threading support, which we use to implement the mstores below. SUVM mstore. SUVM allows exit-less memory paging for enclaves by keeping a page table, page cache and a fault handler as part of the enclave. We implement SUVM from scratch as a cached memory-backed mstore, using CoSMIX's generic mpage table and mpage cache. The alloc function returns a pointer to the storage layer in untrusted memory. Upon mpf_handler_c, the mstore checks whether the needed mpage is already cached in the mpage table. If not, it reads the mpage's contents from the storage layer, decrypts and verifies its integrity using a signature maintained for every mpage, and finally copies it to the mpage in the page cache. When the mpage cache is full, the mstore evicts pages back into the storage layer. Secure mmap mstore. This mstore enables the use of memorymapped encrypted and integrity-protected files in enclaves. We support private file mapping only and leave cross-enclave sharing support for future work. This is a cached file-backed mstore that maintains its own mpage table and mpage cache.</p><p>The alloc callback is invoked by the runtime upon the mmap call in original code. alloc records the mapping start offset in the file and the access flags in an internal table. It then returns a pointer with the requested offset from a unique file base address. This address is internally allocated by the mstore and used as isolated address space for each file.</p><p>The mpf_handler_c callback translates the given pointer to the respective file. If the contents are not available in the mpage cache, the data is fetched from the file using a read system call, followed by decryption and integrity check. Oblivious RAM mstore. ORAM obfuscates memory access patterns by shuffling and re-encrypting the data upon every data access. The ORAM mstore streamlines the use of ORAM in enclaves. It allows the developer to allocate and access the buffers that store sensitive data in an ORAM, thereby protecting the program against controlled side-channel attacks <ref type="bibr" target="#b85">[87]</ref>.</p><p>We implement a direct-access memory-backed ORAM mstore. This is because if it were cached, the accesses to the cache would be visible to the attacker, compromising the ORAM security guarantees. Our ORAM mstore addresses a threat-model similar to ZeroTrace <ref type="bibr" target="#b65">[67]</ref>, yet without leakage protection in the case of enclave shutdowns. Specifically, all the instrumented memory accesses destined to the ORAM mstore become oblivious, such that an adversary cannot learn the actual memory access pattern. We implement the Path ORAM algorithm <ref type="bibr" target="#b76">[78]</ref> and ensure oblivious accesses to its position map and stash using the cmovz instruction.</p><p>We store the Path-ORAM tree in a contiguous buffer within the enclave trusted memory. This eliminates the need to implement block encryption and integrity checks as part of the ORAM mstore since SGX hardware does exactly that.</p><p>The alloc function allocates the requested number of blocks in ORAM and registers them with the ORAM module. It returns an address from a linear range with a hard-coded base address, which is used only to compute the block index.</p><p>The mpf_handler_d callback translates the address to the requested block index and invokes the ORAM algorithm to obliviously fetch the requested memory block to a temporary buffer. Loads are issued from this buffer and stores are appended with the write_back callback.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.2.6">Stacking mstores</head><p>The mstore abstraction makes it possible to stack different mstores. Stacking allows one mstore to invoke another mstore recursively. We denote by A→B an mstore A that internally accesses its memory via mstore B.</p><p>Consider, for example, ORAM→SUVM. The motivation to stack is when the ORAM mstore covers a region that is larger than the enclave's physical memory. Since SUVM optimizes the SGX paging mechanism, stacking ORAM on top of SUVM improves ORAM's performance ( §4.5).</p><p>To create a new A→B mstore, the developer simply annotates A's storage layer allocations with B's annotations. CoSMIX instruments all these accesses appropriately.</p><p>Stacking the ORAM mstore on top of any mstore that maintains data confidentiality does not compromise the ORAM access pattern obfuscation guarantees, as ORAM protocols consider the backing store to be untrusted <ref type="bibr" target="#b76">[78]</ref>. Therefore ORAM→SUVM would maintain data-oblivious access.</p><p>However, the stacking → operator is not commutative from the security perspective: SUVM→ORAM would result in the SUVM mstore caching mpages fetched obliviously by the ORAM mstore, thereby leaking the access patterns to these mpages and compromising ORAM's security guarantees.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.3">CoSMIX compiler and runtime</head><p>The</p><note type="other">instrumentation compiler modifies the application to use mstores and is guided by code annotations or/and a global instrumentation policy. The compiler needs to instrument four different types of code: (1) memory accesses; (2) memory management functions; (3) file I/O operations for file-backed mstores; (4) libc library calls. Instrumentation policy. A developer may annotate any static variable declaration or</note><p>memory allocation function call. Annotations allow instrumentation of a subset of the used buffers to reduce instrumentation overheads. Alternatively, a global instrumentation policy specifies compile-time rules applied to the whole code base (e.g., instrument all calls to malloc), or run-time checks injected by the compiler (e.g., using mstore for large buffers above a certain threshold). A global policy serves for bulk operations on large code bases, such as adding SUVM mstore to Redis sources with over 130K LOC <ref type="figure" target="#fig_4">( §4.4)</ref>.</p><p>Similarly, for file-backed mstores, a global policy may limit the use of the mstore to specific files or directories.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.3.1">Pointer access instrumentation</head><p>Static analysis. The compiler uses static build. Therefore, it can conservatively determine the subset of operations that must be replaced with mstore-related functions at compile time and eliminate the instrumentation overhead for such cases. Trivially, the compiler may replace an annotated call to malloc with the alloc callback of the requested mstore. A much more challenging task, however, is to determine the type of the mstore (if any) to use for every pointer in the program.</p><p>For this purpose, we use Andersen's analysis <ref type="bibr" target="#b15">[17]</ref> to generate inter-procedural point-to information. In a nutshell, CoS-MIX first parses all instructions and generates a graph with pointers as nodes and their constraints (e.g., assignment or copy) as edges. The graph is then processed by a constraint solver which outputs the set of points-to-information.</p><p>When instrumenting memory accesses, CoSMIX can use this information to determine whether the pointer may alias to a specific mstore pointer. Runtime checks and tagged pointers. CoSMIX's pointer analysis is sound but incomplete; therefore it requires runtime decisions for ambivalent cases. We use tagged pointers <ref type="bibr" target="#b45">[47,</ref><ref type="bibr" target="#b11">13,</ref><ref type="bibr" target="#b72">74,</ref><ref type="bibr" target="#b29">31]</ref> to determine pointer type at runtime. Each mstore is assigned a unique identifier, stored in unused most significant bits of the pointer virtual address. For instrumented allocations, the runtime adds this identifier to the returned address from the mstore allocation. For external function calls and memory accesses, the runtime checks the tag, strips it from the pointer, and invokes the callback of the respective mstore if necessary. Tagged pointers vs. range checks. One known limitation of tagged pointers is that the application code might reset the higher bits of a pointer. Prior work <ref type="bibr" target="#b45">[47]</ref> and our own experience suggest that this is rarely the case in practice. An alternative approach is to differentiate between mstores by assigning a unique memory range to each. Using tagged pointers turned out to be faster in our experience because the range check requires additional memory accesses.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.3.2">Memory management and file I/O calls</head><p>The compiler replaces all the memory management operations selected by the instrumentation policy with the calls to the runtime that invokes the appropriate mstore callbacks.</p><p>Similarly, file I/O operations are replaced with runtime wrappers. On open, the runtime determines whether to use an mstore with the current file and registers its file descriptor. An I/O call using this file descriptor will be redirected to the respective mstore.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.3.3">libc support</head><p>Invoking an uninstrumented function on an mstore pointer would result in undefined behavior. We assume that most application libraries are available at compile time. However, libc is not instrumented and we provide wrappers instead, similarly to other works <ref type="bibr" target="#b45">[47,</ref><ref type="bibr" target="#b57">59]</ref>.</p><p>There are two main reasons to not instrument libc. First, doing so would create a bootstrapping problem since mstores might use libc calls. Second, SGX runtimes such as SCONE <ref type="bibr" target="#b16">[18]</ref> use proprietary, closed-source versions of libc. Wrapping libc functions allows CoSMIX to be portable across multiple enclave execution frameworks.</p><p>CoSMIX provides wrappers for most popular libc functions (about 80), which suffices to run the large production applications we use in our evaluation. Adding wrappers for more functions is an ongoing effort.</p><p>In addition to stripping the pointer tag, these wrappers must guarantee access to virtually contiguous input/output buffers from uninstrumented code, instead of using mstore mpages. Thus, where necessary, the wrappers use a temporary buffer in regular memory to stage the mstore buffer before the library call and write it back to the mstore after the call.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.3.4">Translation caching</head><p>Minimizing the instrumentation overhead is a fundamental requirement for CoSMIX. The overheads are caused mainly by runtime checks of the pointer type and invocation of the mstore logic on memory accesses.</p><p>To reduce these overheads, CoSMIX first runs aggressive generic code optimizations, reducing memory accesses. It also avoids invoking mstore page fault handlers for recurrent accesses to the same mpage. Opportunistic caching. We introduce a small (one cache line) TLB stored in the thread-local memory. This TLB is checked upon each access to the mstore. The runtime pins the page in the mstore while the mpage translation is cached, and unpins when it is flushed. To support multiple threads, the TLB notification callbacks use a reference counter for each mpage. The mpage can be evicted if the counter drops to zero, eliminating the need for explicit TLB invalidation. We choose small TLB size (5) for its low lookup times. Increasing the size did not improve performance in our workloads. Translation caching in loops. The TLB captures the locality of accesses quite effectively, but in loops, the performance can be further improved by transforming the code itself to use the mpage base address without checking the TLB.</p><p>For example, in the case of an array allocated in an mstore and sequentially accessed in a tight loop, most accesses to the mstore are performed within the same mpage. Therefore, replacing the code in the loop to check the TLB only at mpage boundaries would result in near-native access latency.</p><p>To perform this optimization, CoSMIX has to (a) determine the iterations in which the same mpage gets accessed, and (b) determine the pointer transformation across the iterations. For (b), CoSMIX uses the scalar evolution analysis <ref type="bibr" target="#b81">[83]</ref> in the compiler to find predictable affine transformations for the pointers used in the loop. For (a) it injects a code that determines the number of iterations where the cached translation hits the same mpage, recomputing the new base pointer and dropping the translation from the TLB when crossing into a new mpage. Finally, it replaces the original accesses to the mstore with the accesses to the mpage's base pointer with the offset, which is updated across the loop iterations according to the determined transformation.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.4">Discussion</head><p>Security guarantees. CoSMIX itself does not change the security of SGX enclaves. Its runtime neither accesses untrusted memory nor leaks secret information from the enclave. However, the security of mstores depends on their implementation: SUVM has the same security as SGX paging <ref type="bibr" target="#b59">[61]</ref> and the ORAM mstore introduces a controlled side-channel <ref type="bibr" target="#b85">[87]</ref> protection mechanism not available in the bare-metal SGX <ref type="bibr" target="#b65">[67]</ref>. We note, however, that CoSMIX does not guarantee that the code using an mstore will indeed maintain that mstore's security properties. For example, in case of the ORAM mstore, user code must not use sensitive values read from ORAM in a data/control dependent manner because doing so might break the data pattern obfuscation <ref type="bibr" target="#b63">[65]</ref>. Other mstore applications. Mstores are general and can be used to implement many other useful extensions. For example, implementing bounds checking for 32-bit address space enclaves as in SGXBounds <ref type="bibr" target="#b45">[47]</ref> becomes easy. All it takes is adding an extra 4 bytes for each buffer allocation to store the lower bounds of the object and tag the pointer's highest 32 bits with its lower bounds' address. Then, every memory access is instrumented to check these bounds. The SGXBounds mstore can implement this logic in its callback functions.</p><p>Another useful application is transparent inter-enclave shared memory, which may enable execution of multi-socket enclaves and support for secure file sharing.</p><p>Eleos vs. CoSMIX. The starting point of our design was Eleos <ref type="bibr" target="#b59">[61]</ref>. There, the authors introduce spointers, which are similar to C++ smart pointers. In Eleos all necessary memory accesses are replaced with spointers and translations are cached in the spointers themselves. On every access, spointers perform bound checking, to make sure that pointer arithmetic on the spointer did not cross to a new page. However, the mpage bound check impacts performance greatly, even when the caching is limited to the scope of a function. Second, maintaining static translation for mstore pointers complicated the design. For example, pointer-to-integer casts had to be invalidated, forcing a reverse mapping in mstores.</p><p>A key lesson from CoSMIX is that caching the translations only in cases of high access locality is enough to leverage the performance benefits and simplify the design.</p><p>Limitations. Inline assembly snippets, while quite rare, cannot be easily supported. CoSMIX considers them as an opaque function call. It injects code to check whether passed arguments are mstore pointers. If so, CoSMIX aborts the program and notifies that manual instrumentation is necessary.</p><p>Hardware extensions. We hope that CoSMIX will motivate hardware developers to support secure in-enclave fault handling. This functionality would allow enclaves to control the execution flow of the page faults. For example, an enclave might refuse to resume execution after a fault unless a correct secure fault handler has been invoked. As a result, secure page faults would allow extending enclaves with cached mstore functionality, such as the secured mmap provided by CoSMIX, albeit at a significantly higher performance costs due to transitions to/from untrusted mode. Moreover, hardware support for secure fault handlers would enable paging of code pages not supported by CoSMIX.</p><p>However, direct mstores such as ORAM cannot be supported in the same way, since they invoke the fault handler for every memory access. Therefore, good performance could be achieved only by much more intrusive modifications that would avoid enclave mode transitions. Additionally, enclave hardware evolves slowly. For example, the SGX2 specification was published in 2014, yet is still not publicly available in mainstream processors <ref type="bibr" target="#b18">[20]</ref>. CoSMIX on the other hand, can be used to enhance enclaves' functionality today.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4">Evaluation</head><p>Implementation. CoSMIX implementation closely follows its design 2 . The compiler prototype is based on the LLVM 6.0 framework and is implemented as a compile-time module pass, consisting of 1,080 LOC. We compile applications using the Link-Time Optimization (LTO) feature of LLVM and pass them as inputs to the compiler pass.</p><p>CoSMIX uses the SVF framework <ref type="bibr" target="#b77">[79,</ref><ref type="bibr" target="#b78">80]</ref> to perform Andersen's pointer analysis with type differentiation. CoSMIX runtime is written in C++ and consists of 1,600 LOC. CoS-MIX's configuration file is JSON formatted and CoSMIX uses JsonCpp <ref type="bibr" target="#b2">[3]</ref> to parse it. All mstores are written in C++. Their implementation follows the design described in Section 3. The implementations of SUVM, ORAM and mmap mstores are 935 LOC, 551 LOC, and 1,108 LOC respectively. mmap mstore leverages the SCONE file shields, which override the read/write calls in libc to implement integrity checks and encryption for file I/O operations. This is one of the examples when our design choice to use libc wrappers rather than libc instrumentation pays off.</p><p>Setup. Our setup comprises two machines: server and client. The client generates the load for the server under evaluation. The client and the server are connected back-to-back via a 56Gb Connect-IB operating in IP over Infiniband <ref type="bibr" target="#b25">[27]</ref> (32Gbps effective throughput) to stress the application logic and avoid network bottlenecks.</p><p>For the server, we use Dell OptiPlex 7040, with Intel Skylake i7-6700 4-core CPU with 8 MB LLC, 16 GB RAM, and 256 GB SSD drive, Ubuntu Linux 16.04 64-bit, Linux 4.10.0-42, and Intel SGX driver 2.0 <ref type="bibr" target="#b1">[2]</ref>. We use LLVM 6.0 to compile the source code. As recommended by Intel, we apply L1TF microcode patches <ref type="bibr" target="#b8">[9]</ref>. The client runs on a 6-core Intel Xeon CPU E5-2620 v3 at 2.40GHz with 32GB of RAM, Ubuntu 16.04 64-bit, Linux 4.4.0-139.</p><p>Methodology. Unless otherwise specified, we run all the workloads in SGX using SCONE <ref type="bibr" target="#b16">[18]</ref>. We run each test 10 times and report the mean value, with the standard deviation below 5%. We compile all workloads as follows: (1) compile to LLVM IR with full optimizations (-O3) and invoke LLVM's IR linker to link all IR files; (2) invoke CoSMIX LLVM pass for code instrumentation; (3) use the SCONE compiler to generate an executable binary linked with its custom libc. We skip step (2) when compiling the baseline.</p><p>Summary of workloads. We evaluated several production applications and benchmarks, detailed in <ref type="table" target="#tab_2">Table 2</ref>. CoSMIX successfully instruments large code bases using only a few or no code annotations, and no source code changes.   <ref type="table">Table 3</ref>: mstore latency to fetch a 4 KB page. Baseline is native memory access.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.1">Mstore performance</head><p>First, we measure the latency of random accesses to mstores and compare them to native memory accesses in the enclave. We evaluate scenarios with small and large memory usage where the latter causes SGX page faults. We report the results for SUVM and ORAM mstores and exclude the mmap mstore because it is similar to SUVM. We measure the average latency to access random 4 KB pages over 100k requests. <ref type="table">Table 3</ref> shows the results. For small datasets, SUVM incurs low overhead compared to regular memory accesses. However, for large data sets which involve SGX paging, it is about 10× faster. This is because SUVM optimizes the enclave paging performance by eliminating enclave transitions <ref type="bibr" target="#b59">[61]</ref>. As expected, ORAM mstore access is between 30× to 60× slower than the baseline, even when covering a small range of 16 MB. This result indicates that selective instrumentation for ORAM is essential to achieve practically viable systems.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.2">Instrumentation and mstore overheads</head><p>We instrument all seven benchmarks in the Phoenix suite <ref type="bibr" target="#b64">[66]</ref> to measure CoSMIX's instrumentation overheads. Each benchmark is small, making the results easier to analyze.</p><p>We evaluate 4 configurations: (1) Full automatic instrumentation using SUVM and mmap mstore. Both mstores are run side-by-side because Phoenix uses both dynamic allocations and memory-mapped files. (2) Same but with an empty mstore. All the pointers are instrumented, but the mstore logic is not invoked. (3) Selective instrumentation where we manually annotate only the inputs. (4) Same but with an empty mstore. For benchmarks that use mmap, the baseline reads the entire input file to memory.</p><p>Measuring an empty mstore allows us to distinguish between overheads of pointer instrumentation and mstores.</p><p>To focus solely on the CoSMIX overheads, we use the small dataset shipped with Phoenix so no paging operation will occur. The only exception is the histogram benchmark, for which we synthetically resize the dataset to 25 MB. We exclude mstore initialization and preload all the datasets into  SGX memory, both in the baseline and in CoSMIX measurements, to stress the runtime components of the system. Often mstores can be tuned to reduce the translation overhead, by increasing the mstore page size. As a result, the accesses in a loop might touch fewer pages, enabling more efficient use of CoSMIX's TLB. Therefore, we manually tune the page size, setting it to 256 KB for kmeans, 16 MB for word count, 64 MB for lreg, and 4 KB for the rest of the benchmarks, as in all the other experiments. <ref type="figure" target="#fig_4">Figure 4</ref> shows the results. <ref type="figure" target="#fig_4">Figure 4b</ref> shows the overhead for both CoSMIX's instrumentation and mstore logic. <ref type="figure" target="#fig_4">Fig- ure 4a</ref> excludes the mstore logic. In each figure, the rightmost bar refers to the selective instrumentation of accesses to the input data alone, and the other bar refers to full instrumentation of all dynamic allocations and mmap calls. Instrumentation overheads. The runtime overheads excluding mstores are relatively small, with an average (geomean) of 17% for full instrumentation and 10% for the input instrumentation alone, with the worst case of 50% in lreg. Full instrumentation. With the full instrumentation, mstore logic dominates the runtime overheads, ranging from almost none for histogram to 26× for matrix multiplication. Such variability stems from the different ways memory is accessed. Specifically, if the program exhibits poor access locality, or the CoSMIX compiler fails to capture the existing locality in a loop, the runtime will not be able to optimize out the calls to the mstore inside the loop, resulting in high overheads. Selective instrumentation. Instrumenting only the input buffers results in dramatically lower overheads, ranging from 5% to 15%. The only pathological case is kmeans, where the CoSMIX compiler fails to optimize accesses to the multidimensional input array because the inner array is too short. Unrolling this loop reduces the overhead to about 5%. We  <ref type="table">Table 4</ref>: SQLite performance with secure mmap mstore.</p><p>plan to add automatic optimizations for this case in the future. Contribution of CoSMIX optimizations. We measure the performance of the selective instrumentation while disabling the runtime TLB and compiler loop optimizations ( §3.3.4). We find that these two features are essential to make CoSMIX practical and keep the instrumentation overheads low. The slowdown ranges from 4× for word count and kmeans to 55× for histogram and 197× for lreg, making the system unusable.</p><p>In comparison, the optimized version brings the overheads down to 4% and 44% for histogram and lreg. The geomean of the unoptimized selective instrumentation is 16.4× compared to 20% with the optimizations enabled.</p><p>CoSMIX overheads for non-enclave execution. For completeness we perform the same experiment with Phoenix but now outside the enclave. As expected, the relative overheads increase as compared to the in-enclave execution, with up to 50% geometric mean slowdown when using selective instrumentation with SUVM and mmap mstores and up to 25% when using an empty mstore. We attribute this discrepancy to SGX's memory encryption engine <ref type="bibr" target="#b38">[40]</ref>, which provides confidentiality and integrity to memory accesses and therefore offsets the CoSMIX instrumentation overheads.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.3">Secure mmap with SQLite</head><p>SQLite is a popular database, but running it in SGX with mmap while providing encryption and integrity guarantees for the accessed files is not possible today. To run SQLite with mmap support, we use the secure mmap mstore. We configure the mpage size to be 4 MB. We use SQLite v3.25.3, and evaluate it with kvtest <ref type="bibr">[10]</ref>, shipped with SQLite to test read access latency to DB BLOBs. We use a database stored in a 60 MB file holding 1 KB BLOBs. The database is sized to fit in SGX physical memory. This allows us to focus on the evaluation of the file access logic rather than SGX paging (refer to §4.4 for paging evaluation).</p><p>As a baseline, we evaluate SQLite with its internal backend that uses read/write calls instead of memory-mapped files. In this configuration, SQLite implements its own optimized page cache for data it reads from files. In the evaluation, we vary the SQLite page cache size from disabled (1 KB) to 60 MB (no misses). We measure the average latency of 1 KB random read requests over 1 million requests. Results. CoSMIX enables execution of an unmodified SQLite server that uses mmap to access encrypted and integrityprotected files. Such execution was not possible without CoS-MIX. Moreover, as we see in <ref type="table">Table 4</ref>, the secure mstore enables 4.4× faster queries compared to the SQLite without Figure 5: Performance improvement using the SUVM mstore in production key-value stores, each using a 600 MB database (6× the size of SGX secure memory) page cache. This case illustrates the CoSMIX performance benefits for applications that do not implement their own optimized page cache.</p><p>On the other hand, enabling the SQLite page cache allows us to evaluate the instrumentation overheads. This is, in fact, a conservative estimate, because the baseline is hand-optimized and implements the necessary functionality by itself, versus the general instrumentation and generic CoSMIX's page cache. Even in this worst-case scenario, CoSMIX is only about 40% slower than SQLite.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.4">Optimizing memory-intensive workloads with the SUVM mstore</head><p>To demonstrate CoSMIX's support for different SGX execution frameworks, we run the following experiments both in SCONE <ref type="bibr" target="#b16">[18]</ref> and Anjuna <ref type="bibr" target="#b0">[1]</ref>. We use CoSMIX to accelerate SGX execution of applications with a large memory footprint. We choose Redis and memcached key-value stores as representatives. Both run with data sets of 600 MB -about 6× larger than the SGX enclaveaccessible physical memory. These applications experience a significant slowdown due to SGX paging overheads. The goal is to reduce these overheads using the SUVM mstore. Memached. memcached uses a slab allocator to manage its memory. We annotate a single line of code where the memory is allocated, making SUVM mstore manage all items.</p><p>We evaluate memcached v1.4.25 <ref type="bibr" target="#b33">[35]</ref> using the memaslap load generator shipped with libmemcached v1.0.18 <ref type="bibr" target="#b5">[6]</ref>. Our workload consists of 10% SET and 90% GET requests for 1 KB items (key+value) as used in prior works <ref type="bibr" target="#b59">[61]</ref>, with requests uniformly distributed to stress the memory subsystem.</p><p>We compare the instrumented memcached with SUVM to native SGX execution. In addition, we run a manually optimized version of memcached with the SUVM used in Eleos <ref type="bibr" target="#b59">[61]</ref>. Notably, in Eleos, the authors changed memcached internals to create a shadow memory buffer for the slab allocator. This is an intrusive change that CoSMIX eliminates completely. All runs are performed on 4 cores. <ref type="figure">Figure 5a</ref> shows that SUVM mstore boosts the throughput by 1.9× and 2.2× compared to native SGX execution in Anjuna and SCONE respectively. The difference between the frameworks correlates with the relative time each of them spends resolving page faults. Interestingly, the CoSMIX version is about 7% faster than Eleos thanks to its compiler optimizations. Redis. Manually annotating Redis with its 130 KLOC would be too tedious. Further, its memory management involves too many allocations, making annotation challenging. Therefore, we use automatic instrumentation without code changes.</p><p>To achieve high performance, we leverage CoSMIX's ability to perform conditional instrumentation. Specifically, CoS-MIX introduces runtime checks that determine whether to allocate a buffer in an mstore or in regular memory based on the requested allocation size. In Redis, we configure the policy to redirect all allocations in the range of 1 KB-10 KB to the SUVM mstore. The intuition is to use SUVM only for keys and values and keep native memory accesses for the rest.</p><p>We use Redis v5.0.2 <ref type="bibr" target="#b7">[8]</ref>, and evaluate it using the memtier v1.2.15 official RedisLab load generator <ref type="bibr" target="#b6">[7]</ref>. We configure memtier to generate uniformly distributed GET requests for 1 KB items as used in prior works <ref type="bibr" target="#b16">[18]</ref>.</p><p>Figure 5b shows that Redis with CoSMIX achieves about 1.6× and 2× higher throughput compared to native SGX execution in Anjuna and SCONE respectively. These results demonstrate the power of CoSMIX to improve the performance of an unmodified production system.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.5">Protecting data with the ORAM mstore</head><p>Selective instrumentation capabilities in CoSMIX are particularly useful when using heavyweight mstores such as ORAM. ORAM is known to dramatically affect performance <ref type="table">(Table 3)</ref>.</p><p>We use ORAM to protect a face verification server [61] against controlled side-channel attacks <ref type="bibr" target="#b85">[87]</ref> on its data store.</p><p>The server mimics the behavior of a biometric border control server. It stores a database with sensitive face images. When a person passes through border control, the client at the border kiosk queries the server whether the image of the person in the database matches the one taken at the kiosk.</p><p>The implementation stores the images in an array. The server fetches the image from the array and compares it with the input image, using the LBP algorithm <ref type="bibr" target="#b10">[12]</ref>. This implementation is vulnerable to controlled channel attacks which leak the access pattern to SGX memory pages. Thus, an attacker may observe page access frequency and learn when a person passes through border control. Note that existing defenses against controlled channel attacks would be ineffective since they cannot handle legitimate demand paging <ref type="bibr" target="#b74">[76,</ref><ref type="bibr" target="#b58">60]</ref>.</p><p>We use a database with 1,024 256 KB images from the Color FERET dataset <ref type="bibr" target="#b61">[63]</ref>  <ref type="table">Table 5</ref>: Selective instrumentation of face verification server.</p><p>(1 LOC) and compile with CoSMIX. As a result, the application accesses the sensitive data obliviously. In the experiments we configure the server to use 1 thread and the load generator to issue random requests, saturating the server. We report the throughput achieved in <ref type="table">Table 5</ref>. It shows that the ORAM mstore introduces an 8.6× slowdown. We note that for a dataset of 256 MB, the ORAM mstore overhead is about 41× more than native access, as reported in <ref type="table">Table 3</ref>. This shows that selective instrumentation may make ORAM an attractive solution for some systems. However, with CoSMIX we can further reduce paging penalties. ORAM→SUVM stacking. Although the application data is only 256 MB, PathORAM consumes about 860 MB due to its internal storage overheads. As a result, the SGX paging significantly affects the performance.</p><p>To optimize, we create a new ORAM→SUVM mstore by stacking ORAM on top of SUVM. Only 1 LOC in the ORAM mstore is annotated. The use of the combined ORAM→SUVM mstore improves the overall performance by 1.5× compared to the ORAM mstore alone <ref type="table">(Table 5)</ref>. Overall, selective instrumentation and mstore stacking result in a relatively low, 5.8× slowdown of the oblivious system compared to native SGX execution. This performance might be acceptable for practical ORAM applications and requires no code changes.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5">Related Work</head><p>Enclave system support. Recent works proposed systems to protect unmodified applications using enclaves <ref type="bibr" target="#b16">[18,</ref><ref type="bibr" target="#b19">21,</ref><ref type="bibr" target="#b75">77,</ref><ref type="bibr" target="#b79">81]</ref>. Other works proposed enclave enhancements <ref type="bibr" target="#b70">[72,</ref><ref type="bibr" target="#b45">47,</ref><ref type="bibr" target="#b47">49]</ref>, such as memory safety, ASLR, and enclave partitioning. Complementary to these works, CoSMIX provides system support for modular extensions to unmodified enclave applications. Trusted execution environments. Previous works proposed different systems to protect applications from a malicious OS <ref type="bibr" target="#b28">[30,</ref><ref type="bibr" target="#b27">29,</ref><ref type="bibr" target="#b40">42,</ref><ref type="bibr" target="#b14">16,</ref><ref type="bibr" target="#b13">15]</ref>. InkTag <ref type="bibr" target="#b40">[42]</ref>, for example, offers secured mmap service to applications; however, it relies on a trusted hypervisor with para-verification. CoSMIX puts its root of trust in hardware enclaves to implement in-enclave secure fault handlers. Controlled side-channel mitigation. Previous works suggested the use of ORAM in SGX to improve its security <ref type="bibr" target="#b63">[65,</ref><ref type="bibr" target="#b65">67,</ref><ref type="bibr" target="#b31">33,</ref><ref type="bibr" target="#b86">88,</ref><ref type="bibr" target="#b9">11,</ref><ref type="bibr" target="#b48">50]</ref>. We believe that CoSMIX will allow the use of ORAM in many more applications via lightweight annotations. More efficient systems for mitigating the controlled side-channel attack have been proposed <ref type="bibr" target="#b20">[22,</ref><ref type="bibr" target="#b58">60,</ref><ref type="bibr" target="#b74">76,</ref><ref type="bibr" target="#b28">30]</ref>. For example, Apparition <ref type="bibr" target="#b28">[30]</ref> uses Virtual Ghost <ref type="bibr" target="#b27">[29]</ref>, a compiler-based virtual machine, to restrict OS access to the page table. However, these systems do not support demand paging. CoSMIX protects applications that rely on demand paging from both a malicious OS and physical bus snooping attacks using the ORAM mstore. Customizing applications via paging mechanisms. Previous systems proposed using page faults to improve performance and enable quality of service functionality in OS, GPUs, and enclaves <ref type="bibr" target="#b39">[41,</ref><ref type="bibr" target="#b59">61,</ref><ref type="bibr" target="#b72">74,</ref><ref type="bibr" target="#b12">14]</ref>. CoSMIX enables using similar enhancements in secure enclave systems.</p><p>Recent works take advantage of the RDMA infrastructure to enable efficient and transparent access to remote memory by customizing the OS page fault handler <ref type="bibr" target="#b37">[39,</ref><ref type="bibr" target="#b73">75,</ref><ref type="bibr" target="#b51">53,</ref><ref type="bibr" target="#b35">37]</ref>. For example, <ref type="bibr">LegoOS [75]</ref> uses paging to simulate an ExCache for disaggregated memory support. CoSMIX takes a similar approach for extending secure enclaves.</p><p>Software-based distributed shared memory systems were proposed to customize memory access logic across remote machines <ref type="bibr" target="#b66">[68,</ref><ref type="bibr" target="#b67">69,</ref><ref type="bibr" target="#b68">70,</ref><ref type="bibr" target="#b62">64,</ref><ref type="bibr" target="#b17">19,</ref><ref type="bibr" target="#b54">56,</ref><ref type="bibr" target="#b30">32]</ref>. These systems either use the page fault handler, runtime libraries or instrumentation of applications. CoSMIX is inspired by these systems; however, the mstore abstraction is more general and can support different memory access semantics, mixed or stacked in the same application. Memory instrumentation. Much work has been done on instrumenting memory accesses using binary instrumentation tools <ref type="bibr" target="#b49">[51,</ref><ref type="bibr" target="#b22">24,</ref><ref type="bibr" target="#b55">57,</ref><ref type="bibr" target="#b50">52,</ref><ref type="bibr" target="#b69">71]</ref> and compiler-based instrumentation <ref type="bibr" target="#b71">[73,</ref><ref type="bibr" target="#b45">47,</ref><ref type="bibr" target="#b11">13,</ref><ref type="bibr" target="#b29">31]</ref>. CoSMIX enables low-overhead selective memory instrumentation, specifically tailored for enclaves.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="6">Conclusions</head><p>CoSMIX is a new system for modular extension of the memory layer in unmodified applications running in enclaves. It sidesteps the lack of hardware support for efficient and secure page fault handlers in existing architectures. CoSMIX enables low-overhead and selective instrumentation of memory accesses via a simple yet powerful mstore abstraction.</p><p>We show how compilation with CoSMIX both speeds up execution and adds protection to production applications. We believe that mstores may become a useful tool for facilitating the development of new secured systems.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="7">Acknowledgments</head><p>We would like to thank our shepherd John Criswell for his valuable feedback. We also gratefully acknowledge the support of the Israel Science Foundation (grant No. 1027/18), the Israeli Innovation Authority Hiper Consortium, the Technion Hiroshi Fujiwara Cybersecurity center, and Intel ICRI-CI Institute grant, and the feedback from the Intel SGX SEM group. Meni Orenbach was partially supported by HPI-Technion Research School.</p></div><figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_0"><head>Figure 1 :</head><label>1</label><figDesc>Figure 1: Execution of a signal handler in SGX the following scheme (Figure 1): when an interrupt occurs, the enclave exits to the OS 1 . The OS takes control and performs an up-call to an untrusted user-space trampoline in the enclave's hosting process 2 . The trampoline re-enters the enclave by invoking the in-enclave signal handler 3 . After the signal handler terminates, the enclave exits 4 and resumes execution of the last instruction 5 via ERESUME. SGX: No secure page fault handlers. The SGX signal handling mechanism cannot guarantee secure execution of the handler itself. When the enclave is resumed after the PF, ERESUME replays the faulting memory access. Therefore, the enclave cannot validate that the signal handler was indeed executed correctly, or was executed at all. To the best of our knowledge, this problem will not be resolved in the next version of SGX [54, 86, 43]. SGX: Performance overheads. Even with hardware support for the secure signal handler, SGX has inherent architectural properties that will lead to significant performance penalties, rendering this mechanism unsuitable for customized application memory management. The architecture relies on the OS to manage the enclave's virtual memory. Furthermore, SGX may only run userspace code. Since the OS is untrusted, any secure page fault handling would inevitably follow the signal handling scheme depicted in Figure 1, namely, double enclave transition between the trusted and untrusted contexts. We measure the latency of an empty SGX PF handler (access to a protected page) to be 11µsec, which is more than 6× the latency of a signal handler outside SGX. For comparison, CoSMIX's software page fault handler is only 0.01 µ second, the cost of a single function call, which is three orders of magnitude faster than in SGX. Further analysis shows that the signal latency is dominated by the latency of enclave transitions, which we measure to be 5.3µsec each 1 and stems from costly validation, register scrapping, TLB and L1 cache flushes [82, 43]. Other enclave architectures. Enclave transition overheads are pertinent to other enclave architectures. Komodo reports exit latency of 0.96µs [34]. Sanctum and Keystone do not disclose their enclave transition penalties, yet they describe similar operations performed when such transitions occur. We conclude that secure page fault handlers are not supported in SGX, and are likely to incur high-performance costs in other enclave architectures due to transition overheads.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_1"><head>Figure 2 :</head><label>2</label><figDesc>Figure 2: CoSMIX compilation overview. The compiler is guided by code annotations and global instrumentation policy.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_2"><head>Figure 3 :</head><label>3</label><figDesc>Figure 3: CoSMIX: code transformation and execution flow of access to a cached mstore. See the text for explanation.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_4"><head>Figure 4 :</head><label>4</label><figDesc>Figure 4: CoSMIX instrumentation overheads for the Phoenix suite running in the enclave normalized to the execution of non-instrumented binaries. Lower is better.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_0" validated="false"><head>Table 1 lists</head><label>1</label><figDesc>the callback functions mstores must implement. Initialization/teardown. The mstore is initialized at the be- ginning of the program execution and torn down when the pro-</figDesc><table>558 2019 USENIX Annual Technical Conference 
</table></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_2" validated="false"><head>Table 2 :</head><label>2</label><figDesc></figDesc><table>Summary of the evaluated workloads. -side-by-
side, → -stacked. LOC includes all statically linked libraries. 

Data size 
Baseline SUVM 
ORAM 
16 MB 
0.7µsec 
0.9µsec (−1.28×) 
32.3µsec (−46.1×) 
256 MB 
14.4µsec 1.5µsec (9.6×) 
590.6µsec (−41×) 
1GB 
19.9µsec 1.6µsec (12.4×) 
1.23msec (−61.8×) 

</table></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_4" validated="false"><head></head><label></label><figDesc>, totaling 256 MB of sensitive data. We annotate the allocation of the database array to use ORAM</figDesc><table>Native SGX ORAM ORAM→SUVM 
Throughput(req/sec) 
203.1 
23.4 
34.7 
Slowdown 
8.6× 
5.8× 

</table></figure>

			<note place="foot" n="1"> This value is almost double the one reported in prior works [61, 85] because of the firmware update to mitigate the Foreshadow [82] bug.</note>

			<note place="foot" n="2"> CoSMIX source code is publicly available at https://github.com/ acsl-technion/cosmix.</note>
		</body>
		<back>
			<div type="references">

				<listBibl>

<biblStruct xml:id="b0">
	<monogr>
		<title/>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Anjuna</surname></persName>
		</author>
		<ptr target="https://www.anjuna.io.Accessed" />
		<imprint>
			<biblScope unit="page" from="2019" to="2020" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b1">
	<monogr>
		<title/>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Sgx Linux</forename><surname>Intel</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Driver</surname></persName>
		</author>
		<ptr target="https://github.com/intel/linux-sgx-driver.Accessed" />
		<imprint>
			<biblScope unit="page" from="2018" to="2030" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b2">
	<monogr>
		<title/>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Jsoncpp</surname></persName>
		</author>
		<ptr target="https://github.com/open-source-parsers/jsoncpp.Accessed" />
		<imprint>
			<biblScope unit="page" from="2019" to="2020" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b3">
	<monogr>
		<title level="m" type="main">Keystone: Open-source Secure Hardware Enclave</title>
		<ptr target="https://keystone-enclave.org.Accessed" />
		<imprint>
			<biblScope unit="page" from="2019" to="2020" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b4">
	<monogr>
		<title level="m" type="main">Lightning Memory-Mapped Database Manager</title>
		<ptr target="http://www.lmdb.tech/doc/.Accessed" />
		<imprint>
			<biblScope unit="page" from="2018" to="2030" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b5">
	<monogr>
				<ptr target="http://docs.libmemcached.org/bin/memaslap.html.Accessed" />
		<title level="m">memaslap: Load Testing and Benchmarking a Server</title>
		<imprint>
			<biblScope unit="page" from="2018" to="2030" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b6">
	<monogr>
				<ptr target="https://redislabs.com/blog/memtier_benchmark-a-high-throughput-benchmarking-tool-for-redis-memcached/.Accessed" />
		<title level="m">memtier benchmark: A High-Throughput Benchmarking Tool for Redis and Memcached</title>
		<imprint>
			<biblScope unit="page" from="2018" to="2030" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b7">
	<analytic>
		<title/>
		<ptr target="https://redis.io/.Accessed" />
	</analytic>
	<monogr>
		<title level="j">Redis In-Memory Data Structure Store</title>
		<imprint>
			<biblScope unit="page" from="2018" to="2030" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b8">
	<monogr>
		<title level="m" type="main">Resources and Response to Side Channel L1 Terminal Fault</title>
		<ptr target="https://www.intel.com/content/www/us/en/architecture-and-technology/l1tf.html.Accessed" />
		<imprint>
			<biblScope unit="page" from="2018" to="2030" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b9">
	<analytic>
		<title level="a" type="main">OBLIVI-ATE: A Data Oblivious Filesystem for Intel SGX</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Ahmad</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">K</forename><surname>Kim</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><forename type="middle">I</forename><surname>Sarfaraz</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">B</forename><surname>Lee</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">25th Annual Network and Distributed System Security Symposium (NDSS)</title>
		<imprint>
			<date type="published" when="2018" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b10">
	<analytic>
		<title level="a" type="main">Face Description With Local Binary Patterns: Application to Face Recognition</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><surname>Ahonen</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Hadid</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Pietikainen</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE Transactions on Pattern Analysis and Machine Intelligence</title>
		<imprint>
			<biblScope unit="volume">28</biblScope>
			<biblScope unit="issue">12</biblScope>
			<biblScope unit="page" from="2037" to="2041" />
			<date type="published" when="2006" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b11">
	<analytic>
		<title level="a" type="main">Baggy Bounds Checking: An Efficient and BackwardsCompatible Defense against Out-of-Bounds Errors</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><surname>Akritidis</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Costa</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Castro</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Hand</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">USENIX Security Symposium</title>
		<imprint>
			<date type="published" when="2009" />
			<biblScope unit="page" from="51" to="66" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b12">
	<analytic>
		<title level="a" type="main">Do-ItYourself Virtual Memory Translation</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">H</forename><surname>Alam</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><surname>Zhang</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Erez</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Y</forename><surname>Etsion</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">44th Annual International Symposium on Computer Architecture (ISCA)</title>
		<imprint>
			<date type="published" when="2017" />
			<biblScope unit="page" from="457" to="468" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b13">
	<monogr>
				<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><surname>Alves</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Felton</surname></persName>
		</author>
		<title level="m">TrustZone: Integrated Hardware and Software Security. ARM White Paper</title>
		<imprint>
			<date type="published" when="2004" />
			<biblScope unit="volume">3</biblScope>
			<biblScope unit="page" from="18" to="24" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b14">
	<analytic>
		<title level="a" type="main">Innovative Technology for CPU Based Attestation and Sealing</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">I</forename><surname>Anati</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Gueron</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Johnson</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">V</forename><surname>Scarlata</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 2nd International Workshop on Hardware and Architectural Support for Security and Privacy (HASP)</title>
		<meeting>the 2nd International Workshop on Hardware and Architectural Support for Security and Privacy (HASP)</meeting>
		<imprint>
			<date type="published" when="2013" />
			<biblScope unit="volume">13</biblScope>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b15">
	<monogr>
		<title level="m" type="main">Program Analysis and Specialization for The C Programming Language</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">L</forename><forename type="middle">O</forename><surname>Andersen</surname></persName>
		</author>
		<imprint>
			<date type="published" when="1994" />
		</imprint>
		<respStmt>
			<orgName>University of Copenhagen</orgName>
		</respStmt>
	</monogr>
<note type="report_type">PhD thesis</note>
</biblStruct>

<biblStruct xml:id="b16">
	<analytic>
		<title level="a" type="main">SCONE: Secure Linux Containers with Intel SGX</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Arnautov</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">B</forename><surname>Trach</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">F</forename><surname>Gregor</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><surname>Knauth</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Martin</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><surname>Priebe</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Lind</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Muthukumaran</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>O&amp;apos;keeffe</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Stillwell</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Goltzsche</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><forename type="middle">M</forename><surname>Eyers</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Kapitza</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><forename type="middle">R</forename><surname>Pietzuch</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><surname>Fetzer</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">12th USENIX Symposium on Operating Systems Design and Implementation (OSDI)</title>
		<imprint>
			<date type="published" when="2016" />
			<biblScope unit="page" from="689" to="703" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b17">
	<analytic>
		<title level="a" type="main">Orca: A Language For Parallel Programming of Distributed Systems</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">H</forename><forename type="middle">E</forename><surname>Bal</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><forename type="middle">F</forename><surname>Kaashoek</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><forename type="middle">S</forename><surname>Tanenbaum</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE Trans. Software Eng</title>
		<imprint>
			<biblScope unit="volume">18</biblScope>
			<biblScope unit="issue">3</biblScope>
			<biblScope unit="page" from="190" to="205" />
			<date type="published" when="1992" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b18">
	<analytic>
		<title level="a" type="main">Hardware is the new software</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Baumann</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 16th Workshop on Hot Topics in Operating Systems (HotOS)</title>
		<meeting>the 16th Workshop on Hot Topics in Operating Systems (HotOS)</meeting>
		<imprint>
			<publisher>ACM</publisher>
			<date type="published" when="2017" />
			<biblScope unit="page" from="132" to="137" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b19">
	<analytic>
		<title level="a" type="main">Shielding Applications from an Untrusted Cloud with Haven</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Baumann</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Peinado</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">G</forename><surname>Hunt</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">ACM Transactions on Computer Systems (TOCS)</title>
		<imprint>
			<biblScope unit="volume">33</biblScope>
			<biblScope unit="issue">3</biblScope>
			<date type="published" when="2015" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b20">
	<monogr>
				<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">F</forename><surname>Brasser</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Capkun</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Dmitrienko</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><surname>Frassetto</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">K</forename><surname>Kostiainen</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">U</forename><surname>Müller</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A.-R</forename><surname>Sadeghi</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Dr</surname></persName>
		</author>
		<idno type="arXiv">arXiv:1709.09917</idno>
		<title level="m">SGX: Hardening SGX Enclaves against Cache Attacks with Data Location Randomization</title>
		<imprint>
			<date type="published" when="2017" />
		</imprint>
	</monogr>
<note type="report_type">arXiv preprint</note>
</biblStruct>

<biblStruct xml:id="b21">
	<analytic>
		<title level="a" type="main">SecureKeeper: Confidential ZooKeeper using Intel SGX</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Brenner</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><surname>Wulf</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Goltzsche</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">N</forename><surname>Weichbrodt</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Lorenz</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><surname>Fetzer</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><forename type="middle">R</forename><surname>Pietzuch</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Kapitza</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 17th International Middleware Conference</title>
		<meeting>the 17th International Middleware Conference</meeting>
		<imprint>
			<date type="published" when="2016" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b22">
	<monogr>
		<title level="m" type="main">Efficient, Transparent, and Comprehensive Runtime Code Manipulation</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Bruening</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2004" />
			<pubPlace>Cambridge, MA, USA</pubPlace>
		</imprint>
		<respStmt>
			<orgName>Massachusetts Institute of Technology</orgName>
		</respStmt>
	</monogr>
<note type="report_type">PhD thesis</note>
</biblStruct>

<biblStruct xml:id="b23">
	<analytic>
		<title level="a" type="main">VC3: A Virtual Cluster Service for Community Computation</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">L</forename><surname>Bryant</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Van</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">B</forename><surname>Riedel</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><forename type="middle">W</forename><surname>Gardner</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><forename type="middle">C</forename><surname>Bejar</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Hover</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">B</forename><surname>Tovar</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">K</forename><surname>Hurtado</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Thain</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the Practice and Experience on Advanced Research Computing, (PEARC)</title>
		<meeting>the Practice and Experience on Advanced Research Computing, (PEARC)</meeting>
		<imprint>
			<date type="published" when="2018" />
			<biblScope unit="volume">30</biblScope>
			<biblScope unit="page" from="1" to="30" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b24">
	<analytic>
		<title level="a" type="main">Oblivious RAM: A Dissection and Experimental Evaluation</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Z</forename><surname>Chang</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Xie</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">F</forename><surname>Li</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the VLDB Endowment (PVLDB)</title>
		<meeting>the VLDB Endowment (PVLDB)</meeting>
		<imprint>
			<date type="published" when="2016" />
			<biblScope unit="volume">9</biblScope>
			<biblScope unit="page" from="1113" to="1124" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b25">
	<monogr>
				<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Chu</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">V</forename><surname>Kashyap</surname></persName>
		</author>
		<title level="m">Transmission of IP over InfiniBand (IPoIB). RFC</title>
		<imprint>
			<date type="published" when="2006" />
			<biblScope unit="volume">4391</biblScope>
			<biblScope unit="page" from="1" to="21" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b26">
	<analytic>
		<title level="a" type="main">Sanctum: Minimal Hardware Extensions for Strong Software Isolation</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">V</forename><surname>Costan</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">I</forename><forename type="middle">A</forename><surname>Lebedev</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Devadas</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">25th USENIX Security Symposium</title>
		<imprint>
			<date type="published" when="2016" />
			<biblScope unit="page" from="857" to="874" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b27">
	<analytic>
		<title level="a" type="main">Virtual Ghost: Protecting Applications from Hostile Operating Systems</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Criswell</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">N</forename><surname>Dautenhahn</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">V</forename><surname>Adve</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 19th International Conference on Architectural Support for Programming Languages and Operating Systems (ASPLOS)</title>
		<meeting>the 19th International Conference on Architectural Support for Programming Languages and Operating Systems (ASPLOS)</meeting>
		<imprint>
			<date type="published" when="2014" />
			<biblScope unit="page" from="81" to="96" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b28">
	<analytic>
		<title level="a" type="main">Shielding Software From Privileged Side-Channel Attacks</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">X</forename><surname>Dong</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Z</forename><surname>Shen</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Criswell</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><forename type="middle">L</forename><surname>Cox</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Dwarkadas</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">27th USENIX Security Symposium (USENIX Security)</title>
		<imprint>
			<date type="published" when="2018" />
			<biblScope unit="page" from="1441" to="1458" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b29">
	<analytic>
		<title level="a" type="main">Stack Bounds Protection with Low Fat Pointers</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">G</forename><forename type="middle">J</forename><surname>Duck</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><forename type="middle">H C</forename><surname>Yap</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">L</forename><surname>Cavallaro</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">24th Annual Network and Distributed System Security Symposium</title>
		<imprint>
			<date type="published" when="2017" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b30">
	<analytic>
		<title level="a" type="main">An Integrated Compile-time/Run-time Software Distributed Shared Memory System</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Dwarkadas</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><forename type="middle">L</forename><surname>Cox</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">W</forename><surname>Zwaenepoel</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the Seventh International Conference on Architectural Support for Programming Languages and Operating Systems, ASPLOS VII</title>
		<meeting>the Seventh International Conference on Architectural Support for Programming Languages and Operating Systems, ASPLOS VII</meeting>
		<imprint>
			<publisher>ACM</publisher>
			<date type="published" when="1996" />
			<biblScope unit="page" from="186" to="197" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b31">
	<monogr>
				<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Eskandarian</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Zaharia</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Oblidb</surname></persName>
		</author>
		<idno type="arXiv">arXiv:1710.00458</idno>
		<title level="m">Oblivious Query Processing using Hardware Enclaves</title>
		<imprint>
			<date type="published" when="2017" />
		</imprint>
	</monogr>
<note type="report_type">arXiv preprint</note>
</biblStruct>

<biblStruct xml:id="b32">
	<analytic>
		<title level="a" type="main">Komodo: Using Verification to Disentangle SecureEnclave Hardware From Software</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Ferraiuolo</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Baumann</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><surname>Hawblitzel</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">B</forename><surname>Parno</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 26th Symposium on Operating Systems Principles (SOSP)</title>
		<meeting>the 26th Symposium on Operating Systems Principles (SOSP)</meeting>
		<imprint>
			<date type="published" when="2017" />
			<biblScope unit="page" from="287" to="305" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b33">
	<analytic>
		<title level="a" type="main">Distributed Caching with Memcached</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">B</forename><surname>Fitzpatrick</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Linux Journal</title>
		<imprint>
			<biblScope unit="issue">124</biblScope>
			<biblScope unit="page">5</biblScope>
			<date type="published" when="2004" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b34">
	<analytic>
		<title level="a" type="main">Mirage: A Coherent Distributed Shared Memory Design</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">B</forename><surname>Fleisch</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">G</forename><surname>Popek</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the Twelfth ACM Symposium on Operating Systems Principles (SOSP)</title>
		<meeting>the Twelfth ACM Symposium on Operating Systems Principles (SOSP)</meeting>
		<imprint>
			<publisher>ACM</publisher>
			<date type="published" when="1989" />
			<biblScope unit="page" from="211" to="223" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b35">
	<analytic>
		<title level="a" type="main">An Asymmetric Distributed Shared Memory Model for Heterogeneous Parallel Systems</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">I</forename><surname>Gelado</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Cabezas</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">N</forename><surname>Navarro</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><forename type="middle">E</forename><surname>Stone</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><forename type="middle">J</forename><surname>Patel</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">W</forename><surname>Mei W</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Hwu</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 15th International Conference on Architectural Support for Programming Languages and Operating Systems (ASPLOS)</title>
		<meeting>the 15th International Conference on Architectural Support for Programming Languages and Operating Systems (ASPLOS)</meeting>
		<imprint>
			<date type="published" when="2010" />
			<biblScope unit="page" from="347" to="358" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b36">
	<analytic>
		<title level="a" type="main">Software Protection and Simulation on Oblivious RAMs</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">O</forename><surname>Goldreich</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Ostrovsky</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">J. ACM</title>
		<imprint>
			<biblScope unit="volume">43</biblScope>
			<biblScope unit="issue">3</biblScope>
			<biblScope unit="page" from="431" to="473" />
			<date type="published" when="1996" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b37">
	<analytic>
		<title level="a" type="main">Efficient Memory Disaggregation with Infiniswap</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Gu</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Y</forename><surname>Lee</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Y</forename><surname>Zhang</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Chowdhury</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">K</forename><forename type="middle">G</forename><surname>Shin</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">14th USENIX Symposium on Networked Systems Design and Implementation (NSDI)</title>
		<imprint>
			<publisher>USENIX Association</publisher>
			<date type="published" when="2017" />
			<biblScope unit="page" from="649" to="667" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b38">
	<monogr>
		<title level="m" type="main">A Memory Encryption Engine Suitable for General Purpose Processors. IACR Cryptology ePrint Archive</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Gueron</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2016" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b39">
	<analytic>
		<title level="a" type="main">Self-Paging in the Nemesis Operating System</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><forename type="middle">M</forename><surname>Hand</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the Third USENIX Symposium on Operating Systems Design and Implementation (OSDI)</title>
		<meeting>the Third USENIX Symposium on Operating Systems Design and Implementation (OSDI)</meeting>
		<imprint>
			<date type="published" when="1999" />
			<biblScope unit="page" from="73" to="86" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b40">
	<analytic>
		<title level="a" type="main">InkTag: Secure Applications on an Untrusted Operating System</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">O</forename><forename type="middle">S</forename><surname>Hofmann</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Kim</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><forename type="middle">M</forename><surname>Dunn</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><forename type="middle">Z</forename><surname>Lee</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">E</forename><surname>Witchel</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the Eighteenth International Conference on Architectural Support for Programming Languages and Operating Systems (ASPLOS)</title>
		<meeting>the Eighteenth International Conference on Architectural Support for Programming Languages and Operating Systems (ASPLOS)</meeting>
		<imprint>
			<date type="published" when="2013" />
			<biblScope unit="page" from="265" to="278" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b41">
	<monogr>
		<title level="m" type="main">Intel 64 and IA-32 Architectures. Software Developer&apos;s Manual</title>
		<imprint/>
	</monogr>
	<note>Intel Corp</note>
</biblStruct>

<biblStruct xml:id="b42">
	<monogr>
		<title level="m" type="main">Transparent Memory Compression in Linux. LinuxCon</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Jennings</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2013" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b43">
	<analytic>
		<title level="a" type="main">Teechain: Reducing Storage Costs on the Blockchain With Offline Payment Channels</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Joshua</forename><surname>Lind</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Oded</forename><surname>Naor</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Ittay</forename><surname>Eyal</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Florian</forename><surname>Kelbert</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Peter</forename><forename type="middle">R</forename><surname>Pietzuch</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Emin Gün</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Sirer</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 11th ACM International Systems and Storage Conference (SYSTOR)</title>
		<meeting>the 11th ACM International Systems and Storage Conference (SYSTOR)</meeting>
		<imprint>
			<date type="published" when="2018" />
			<biblScope unit="page" from="125" to="125" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b44">
	<analytic>
		<title level="a" type="main">TreadMarks: Distributed Shared Memory on Standard Workstations and Operating Systems</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><forename type="middle">J</forename><surname>Keleher</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><forename type="middle">L</forename><surname>Cox</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Dwarkadas</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">W</forename><surname>Zwaenepoel</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the USENIX Winter 1994 Technical Conference</title>
		<meeting>the USENIX Winter 1994 Technical Conference</meeting>
		<imprint>
			<date type="published" when="1994" />
			<biblScope unit="page" from="115" to="132" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b45">
	<analytic>
		<title level="a" type="main">SGXBOUNDS: Memory Safety for Shielded Execution</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Kuvaiskii</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">O</forename><surname>Oleksenko</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Arnautov</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">B</forename><surname>Trach</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><surname>Bhatotia</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><surname>Felber</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><surname>Fetzer</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the Twelfth European Conference on Computer Systems (EuroSys)</title>
		<meeting>the Twelfth European Conference on Computer Systems (EuroSys)</meeting>
		<imprint>
			<date type="published" when="2017" />
			<biblScope unit="page" from="205" to="221" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b46">
	<analytic>
		<title level="a" type="main">LLVM: A Compilation Framework for Lifelong Program Analysis &amp; Transformation</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><surname>Lattner</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">V</forename><surname>Adve</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the International Symposium on Code Generation and Optimization: Feedback-directed and Runtime Optimization (CGO)</title>
		<meeting>the International Symposium on Code Generation and Optimization: Feedback-directed and Runtime Optimization (CGO)</meeting>
		<imprint>
			<date type="published" when="2004" />
			<biblScope unit="page">75</biblScope>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b47">
	<analytic>
		<title level="a" type="main">Glamdring: Automatic Application Partitioning for Intel SGX</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Lind</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><surname>Priebe</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Muthukumaran</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>O&amp;apos;keeffe</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P.-L</forename><surname>Aublin</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">F</forename><surname>Kelbert</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><surname>Reiher</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Goltzsche</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Eyers</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Kapitza</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><surname>Fetzer</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><surname>Pietzuch</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the USENIX Annual Technical Conference (USENIX ATC)</title>
		<meeting>the USENIX Annual Technical Conference (USENIX ATC)</meeting>
		<imprint>
			<publisher>USENIX Association</publisher>
			<date type="published" when="2017" />
			<biblScope unit="page" from="285" to="298" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b48">
	<analytic>
		<title level="a" type="main">GhostRider: A Hardware-Software System for Memory Trace Oblivious Computation</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><surname>Liu</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Harris</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Maas</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><forename type="middle">W</forename><surname>Hicks</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Tiwari</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">E</forename><surname>Shi</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the Twentieth International Conference on Architectural Support for Programming Languages and Operating Systems (ASPLOS)</title>
		<meeting>the Twentieth International Conference on Architectural Support for Programming Languages and Operating Systems (ASPLOS)</meeting>
		<imprint>
			<date type="published" when="2015" />
			<biblScope unit="page" from="87" to="101" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b49">
	<analytic>
		<title level="a" type="main">Pin: Building Customized Program Analysis Tools with Dynamic Instrumentation</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C.-K</forename><surname>Luk</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><forename type="middle">S</forename><surname>Cohn</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Muth</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">H</forename><surname>Patil</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Klauser</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><forename type="middle">G</forename><surname>Lowney</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Wallace</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">V</forename><forename type="middle">J</forename><surname>Reddi</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">K</forename><forename type="middle">M</forename><surname>Hazelwood</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the ACM SIGPLAN 2005 Conference on Programming Language Design and Implementation (PLDI)</title>
		<meeting>the ACM SIGPLAN 2005 Conference on Programming Language Design and Implementation (PLDI)</meeting>
		<imprint>
			<date type="published" when="2005" />
			<biblScope unit="page" from="190" to="200" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b50">
	<analytic>
		<title level="a" type="main">DIOTA: Dynamic instrumentation, optimization and transformation of applications</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Maebe</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Ronsse</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">K</forename><forename type="middle">D</forename><surname>Bosschere</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">4th Workshop On Binary Translation (WBT)</title>
		<imprint>
			<date type="published" when="2002" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b51">
	<analytic>
		<title level="a" type="main">Implementation of a Reliable Remote Memory Pager</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">E</forename><forename type="middle">P</forename><surname>Markatos</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">G</forename><surname>Dramitinos</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the Annual Conference on USENIX Annual Technical Conference (ATEC)</title>
		<meeting>the Annual Conference on USENIX Annual Technical Conference (ATEC)</meeting>
		<imprint>
			<publisher>USENIX Association</publisher>
			<date type="published" when="1996" />
			<biblScope unit="page" from="177" to="190" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b52">
	<analytic>
		<title level="a" type="main">Intel R Software Guard Extensions (Intel R SGX) Support for Dynamic Memory Management Inside an Enclave</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">F</forename><surname>Mckeen</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">I</forename><surname>Alexandrovich</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">I</forename><surname>Anati</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Caspi</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Johnson</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Leslie-Hurd</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><forename type="middle">V</forename><surname>Rozas</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the Hardware and Architectural Support for Security and Privacy (HASP)</title>
		<meeting>the Hardware and Architectural Support for Security and Privacy (HASP)</meeting>
		<imprint>
			<date type="published" when="2016" />
			<biblScope unit="volume">10</biblScope>
			<biblScope unit="page" from="1" to="10" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b53">
	<analytic>
		<title level="a" type="main">Innovative Instructions and Software Model for Isolated Execution</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">F</forename><surname>Mckeen</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">I</forename><surname>Alexandrovich</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Berenzon</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><forename type="middle">V</forename><surname>Rozas</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">H</forename><surname>Shafi</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">V</forename><surname>Shanbhogue</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">U</forename><forename type="middle">R</forename><surname>Savagaonkar</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 2nd International Workshop on Hardware and Architectural Support for Security and Privacy (HASP)</title>
		<meeting>the 2nd International Workshop on Hardware and Architectural Support for Security and Privacy (HASP)</meeting>
		<imprint>
			<date type="published" when="2013" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b54">
	<analytic>
		<title level="a" type="main">Latency-Tolerant Software Distributed Shared Memory</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Nelson</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">B</forename><surname>Holt</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">B</forename><surname>Myers</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><surname>Briggs</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">L</forename><surname>Ceze</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Kahan</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Oskin</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">USENIX Annual Technical Conference (USENIX ATC)</title>
		<imprint>
			<publisher>USENIX Association</publisher>
			<date type="published" when="2015" />
			<biblScope unit="page" from="291" to="305" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b55">
	<analytic>
		<title level="a" type="main">Valgrind: A Program Supervision Framework</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">N</forename><surname>Nethercote</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Seward</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Electr. Notes Theor. Comput. Sci</title>
		<imprint>
			<biblScope unit="volume">89</biblScope>
			<biblScope unit="issue">2</biblScope>
			<biblScope unit="page" from="44" to="66" />
			<date type="published" when="2003" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b56">
	<analytic>
		<title level="a" type="main">Oblivious MultiParty Machine Learning on Trusted Processors</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">O</forename><surname>Ohrimenko</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">F</forename><surname>Schuster</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><surname>Fournet</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Mehta</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Nowozin</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">K</forename><surname>Vaswani</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Costa</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">25th USENIX Security Symposium</title>
		<imprint>
			<date type="published" when="2016" />
			<biblScope unit="page" from="619" to="636" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b57">
	<analytic>
		<title level="a" type="main">Intel MPX Explained: A Cross-layer Analysis of the Intel MPX System Stack</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">O</forename><surname>Oleksenko</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Kuvaiskii</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><surname>Bhatotia</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><surname>Felber</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><surname>Fetzer</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Proceedings of the ACM on Measurement and Analysis of Computing Systems</title>
		<imprint>
			<biblScope unit="volume">2</biblScope>
			<biblScope unit="issue">2</biblScope>
			<biblScope unit="page">28</biblScope>
			<date type="published" when="2018" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b58">
	<analytic>
		<title level="a" type="main">Varys: Protecting SGX Enclaves from Practical Side-Channel Attacks</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">O</forename><surname>Oleksenko</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">B</forename><surname>Trach</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Krahn</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Silberstein</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><surname>Fetzer</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">USENIX Annual Technical Conference (USENIX ATC))</title>
		<imprint>
			<date type="published" when="2018" />
			<biblScope unit="page" from="227" to="240" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b59">
	<analytic>
		<title level="a" type="main">Eleos: ExitLess OS Services for SGX Enclaves</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Orenbach</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><surname>Lifshits</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Minkin</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Silberstein</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the Twelfth European Conference on Computer Systems (EuroSys)</title>
		<meeting>the Twelfth European Conference on Computer Systems (EuroSys)</meeting>
		<imprint>
			<publisher>ACM</publisher>
			<date type="published" when="2017" />
			<biblScope unit="page" from="238" to="253" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b60">
	<monogr>
		<title/>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Owens</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">G</forename><surname>Allen</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><surname>Sqlite</surname></persName>
		</author>
		<imprint>
			<date type="published" when="2010" />
			<publisher>Springer</publisher>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b61">
	<analytic>
		<title level="a" type="main">The FERET Database and Evaluation Procedure for Face-Recognition Algorithms</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><forename type="middle">J</forename><surname>Phillips</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">H</forename><surname>Wechsler</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Huang</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><forename type="middle">J</forename><surname>Rauss</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">Image Vision Comput</title>
		<imprint>
			<biblScope unit="volume">16</biblScope>
			<biblScope unit="issue">5</biblScope>
			<biblScope unit="page" from="295" to="306" />
			<date type="published" when="1998" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b62">
	<analytic>
		<title level="a" type="main">Distributed Shared Memory: Concepts and Systems</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Protic</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Tomasevic</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">V</forename><surname>Milutinovic</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">IEEE Parallel &amp; Distributed Technology: Systems &amp; Applications</title>
		<imprint>
			<date type="published" when="1996" />
			<biblScope unit="volume">4</biblScope>
			<biblScope unit="page" from="63" to="71" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b63">
	<analytic>
		<title level="a" type="main">Raccoon: Closing Digital Side-Channels Through Obfuscated Execution</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Rane</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><surname>Lin</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Tiwari</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 24th USENIX Conference on Security Symposium</title>
		<meeting>the 24th USENIX Conference on Security Symposium</meeting>
		<imprint>
			<publisher>USENIX Association</publisher>
			<date type="published" when="2015" />
			<biblScope unit="page" from="431" to="446" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b64">
	<analytic>
		<title level="a" type="main">Evaluating MapReduce for Multicore and Multiprocessor Systems</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><surname>Ranger</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Raghuraman</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Penmetsa</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">G</forename><surname>Bradski</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><surname>Kozyrakis</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">13th International Symposium on High Performance Computer Architecture (HPCA)</title>
		<imprint>
			<publisher>IEEE</publisher>
			<date type="published" when="2007" />
			<biblScope unit="page" from="13" to="24" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b65">
	<analytic>
		<title level="a" type="main">ZeroTrace : Oblivious Memory Primitives from Intel SGX</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Sasy</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Gorbunov</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><forename type="middle">W</forename><surname>Fletcher</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">25th Annual Network and Distributed System Security Symposium (NDSS)</title>
		<imprint>
			<date type="published" when="2018" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b66">
	<analytic>
		<title level="a" type="main">Design and Performance of the Shasta Distributed Shared Memory Protocol</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><forename type="middle">J</forename><surname>Scales</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">K</forename><surname>Gharachorloo</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 11th International Conference on Supercomputing</title>
		<meeting>the 11th International Conference on Supercomputing</meeting>
		<imprint>
			<publisher>ACM</publisher>
			<date type="published" when="1997" />
			<biblScope unit="page" from="245" to="252" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b67">
	<analytic>
		<title level="a" type="main">FineGrain Software Distributed Shared Memory on SMP Clusters</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><forename type="middle">J</forename><surname>Scales</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">K</forename><surname>Gharachorloo</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Aggarwal</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">4th International Symposium on HighPerformance Computer Architecture (HPCA)</title>
		<imprint>
			<publisher>IEEE</publisher>
			<date type="published" when="1998" />
			<biblScope unit="page" from="125" to="136" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b68">
	<analytic>
		<title level="a" type="main">Fine-Grain Access Control for Distributed Shared Memory</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">I</forename><surname>Schoinas</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">B</forename><surname>Falsafi</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><forename type="middle">R</forename><surname>Lebeck</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><forename type="middle">K</forename><surname>Reinhardt</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><forename type="middle">R</forename><surname>Larus</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><forename type="middle">A</forename><surname>Wood</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">In ACM SIGPLAN Notices</title>
		<imprint>
			<biblScope unit="volume">29</biblScope>
			<biblScope unit="page" from="297" to="306" />
			<date type="published" when="1994" />
			<publisher>ACM</publisher>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b69">
	<analytic>
		<title level="a" type="main">Retargetable and Reconfigurable Software Dynamic Translation</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">K</forename><surname>Scott</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">N</forename><surname>Kumar</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Velusamy</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">B</forename><surname>Childers</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><forename type="middle">W</forename><surname>Davidson</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><forename type="middle">L</forename><surname>Soffa</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">International Symposium on Code Generation and Optimization (CGO)</title>
		<imprint>
			<date type="published" when="2003" />
			<biblScope unit="page" from="36" to="47" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b70">
	<analytic>
		<title level="a" type="main">SGX-Shield: Enabling Address Space Layout Randomization for SGX Programs</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Seo</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">B</forename><surname>Lee</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><forename type="middle">M</forename><surname>Kim</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Shih</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">I</forename><surname>Shin</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Han</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><surname>Kim</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">24th Annual Network and Distributed System Security Symposium (NDSS</title>
		<imprint>
			<date type="published" when="2017" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b71">
	<analytic>
		<title level="a" type="main">AddressSanitizer: A Fast Address Sanity Checker</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">K</forename><surname>Serebryany</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Bruening</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Potapenko</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Vyukov</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">USENIX Annual Technical Conference</title>
		<imprint>
			<date type="published" when="2012" />
			<biblScope unit="page" from="309" to="318" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b72">
	<analytic>
		<title level="a" type="main">ActivePointers: A Case for Software Address Translation on GPUs</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Shahar</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Bergman</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Silberstein</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">43rd ACM/IEEE Annual International Symposium on Computer Architecture (ISCA)</title>
		<imprint>
			<date type="published" when="2016" />
			<biblScope unit="page" from="596" to="608" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b73">
	<analytic>
		<title level="a" type="main">LegoOS: A Disseminated, Distributed OS for Hardware Resource Disaggregation</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Y</forename><surname>Shan</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Y</forename><surname>Huang</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Y</forename><surname>Chen</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Y</forename><surname>Zhang</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">13th USENIX Symposium on Operating Systems Design and Implementation (OSDI)</title>
		<imprint>
			<publisher>USENIX Association</publisher>
			<date type="published" when="2018" />
			<biblScope unit="page" from="69" to="87" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b74">
	<analytic>
		<title level="a" type="main">T-SGX: Eradicating Controlled-Channel Attacks Against Enclave Programs</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M.-W</forename><surname>Shih</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Lee</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><surname>Kim</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Peinado</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the Annual Network and Distributed System Security Symposium (NDSS</title>
		<meeting>the Annual Network and Distributed System Security Symposium (NDSS</meeting>
		<imprint>
			<date type="published" when="2017" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b75">
	<analytic>
		<title level="a" type="main">Panoply: Low-TCB Linux Applications With SGX Enclaves</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Shinde</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><forename type="middle">L</forename><surname>Tien</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Tople</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><surname>Saxena</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">24th Annual Network and Distributed System Security Symposium (NDSS</title>
		<imprint>
			<date type="published" when="2017" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b76">
	<analytic>
		<title level="a" type="main">Path ORAM: an Extremely Simple Oblivious RAM Protocol</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">E</forename><surname>Stefanov</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Van Dijk</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">E</forename><surname>Shi</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><surname>Fletcher</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">L</forename><surname>Ren</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">X</forename><surname>Yu</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Devadas</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the ACM SIGSAC Conference on Computer &amp; Communications Security</title>
		<meeting>the ACM SIGSAC Conference on Computer &amp; Communications Security</meeting>
		<imprint>
			<publisher>ACM</publisher>
			<date type="published" when="2013" />
			<biblScope unit="page" from="299" to="310" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b77">
	<analytic>
		<title level="a" type="main">SVF: Interprocedural Static ValueFlow Analysis in LLVM</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Y</forename><surname>Sui</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Xue</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 25th International Conference on Compiler Construction</title>
		<meeting>the 25th International Conference on Compiler Construction</meeting>
		<imprint>
			<publisher>ACM</publisher>
			<date type="published" when="2016" />
			<biblScope unit="page" from="265" to="266" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b78">
	<analytic>
		<title level="a" type="main">Detecting Memory Leaks Statically with Full-Sparse Value-Flow Analysis</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Y</forename><surname>Sui</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Ye</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Xue</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">IEEE Transactions on Software Engineering</title>
		<imprint>
			<biblScope unit="volume">40</biblScope>
			<biblScope unit="issue">2</biblScope>
			<biblScope unit="page" from="107" to="122" />
			<date type="published" when="2014" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b79">
	<analytic>
		<title level="a" type="main">Graphene-SGX: A Practical Library OS for Unmodified Applications on SGX</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><surname>Tsai</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><forename type="middle">E</forename><surname>Porter</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Vij</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">USENIX Annual Technical Conference (USENIX ATC)</title>
		<imprint>
			<date type="published" when="2017" />
			<biblScope unit="page" from="645" to="658" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b80">
	<analytic>
		<title level="a" type="main">Foreshadow: Extracting the Keys to the Intel SGX Kingdom with Transient Out-ofOrder Execution</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Van Bulck</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Minkin</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">O</forename><surname>Weisse</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Genkin</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">B</forename><surname>Kasikci</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">F</forename><surname>Piessens</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Silberstein</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><forename type="middle">F</forename><surname>Wenisch</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Y</forename><surname>Yarom</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Strackx</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">27th USENIX Security Symposium (USENIX Security)</title>
		<imprint>
			<date type="published" when="2018" />
			<biblScope unit="page" from="991" to="1008" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b81">
	<analytic>
		<title level="a" type="main">Efficient Symbolic Analysis for Optimizing Compilers</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><forename type="middle">A</forename><surname>Van Engelen</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">International Conference on Compiler Construction</title>
		<imprint>
			<publisher>Springer</publisher>
			<date type="published" when="2001" />
			<biblScope unit="page" from="118" to="132" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b82">
	<analytic>
		<title level="a" type="main">Circuit ORAM: On Tightness of the Goldreich-Ostrovsky Lower Bound</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">X</forename><surname>Wang</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T.-H</forename><forename type="middle">H</forename><surname>Chan</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">E</forename><surname>Shi</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the 22nd ACM SIGSAC Conference on Computer and Communications Security</title>
		<meeting>the 22nd ACM SIGSAC Conference on Computer and Communications Security</meeting>
		<imprint>
			<date type="published" when="2015" />
			<biblScope unit="page" from="850" to="861" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b83">
	<analytic>
		<title level="a" type="main">Regaining lost cycles with HotCalls: A Fast Interface for SGX Secure Enclaves</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">O</forename><surname>Weisse</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">V</forename><surname>Bertacco</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><surname>Austin</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">In ACM SIGARCH Computer Architecture News</title>
		<imprint>
			<biblScope unit="volume">45</biblScope>
			<biblScope unit="page" from="81" to="93" />
			<date type="published" when="2017" />
			<publisher>ACM</publisher>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b84">
	<analytic>
		<title level="a" type="main">Intel R Software Guard Extensions (Intel R SGX) Software Support for Dynamic Memory Allocation inside an Enclave</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">B</forename><forename type="middle">C</forename><surname>Xing</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Shanahan</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Leslie-Hurd</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proceedings of the Hardware and Architectural Support for Security and Privacy (HASP)</title>
		<meeting>the Hardware and Architectural Support for Security and Privacy (HASP)</meeting>
		<imprint>
			<date type="published" when="2016" />
			<biblScope unit="volume">11</biblScope>
			<biblScope unit="page" from="1" to="11" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b85">
	<analytic>
		<title level="a" type="main">Controlled-Channel Attacks: Deterministic Side Channels for Untrusted Operating Systems</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Y</forename><surname>Xu</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">W</forename><surname>Cui</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Peinado</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">IEEE Symposium on Security and Privacy</title>
		<imprint>
			<publisher>IEEE</publisher>
			<date type="published" when="2015" />
			<biblScope unit="page" from="640" to="656" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b86">
	<analytic>
		<title level="a" type="main">Opaque: An Oblivious and Encrypted Distributed Analytics Platform</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">W</forename><surname>Zheng</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Dave</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><forename type="middle">G</forename><surname>Beekman</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><forename type="middle">A</forename><surname>Popa</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><forename type="middle">E</forename><surname>Gonzalez</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">I</forename><surname>Stoica</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">14th USENIX Symposium on Networked Systems Design and Implementation (NSDI)</title>
		<imprint>
			<date type="published" when="2017" />
			<biblScope unit="page" from="283" to="298" />
		</imprint>
	</monogr>
</biblStruct>

				</listBibl>
			</div>
		</back>
	</text>
</TEI>
