<?xml version="1.0" encoding="UTF-8"?>
<TEI xmlns="http://www.tei-c.org/ns/1.0" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
xsi:schemaLocation="http://www.tei-c.org/ns/1.0 /Users/atharsefid/Desktop/grobid-0.5.3/grobid-home/schemas/xsd/Grobid.xsd"
 xmlns:xlink="http://www.w3.org/1999/xlink">
	<teiHeader xml:lang="en">
		<encodingDesc>
			<appInfo>
				<application version="0.5.3" ident="GROBID" when="2020-09-29T02:55+0000">
					<ref target="https://github.com/kermitt2/grobid">GROBID - A machine learning software for extracting information from scholarly documents</ref>
				</application>
			</appInfo>
		</encodingDesc>
		<fileDesc>
			<titleStmt>
				<title level="a" type="main">Suspend-aware Segment Cleaning in Log-structured File System</title>
			</titleStmt>
			<publicationStmt>
				<publisher/>
				<availability status="unknown"><licence/></availability>
			</publicationStmt>
			<sourceDesc>
				<biblStruct>
					<analytic>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Dongil</forename><surname>Park</surname></persName>
							<affiliation key="aff0">
								<orgName type="institution">Hanyang University</orgName>
								<address>
									<settlement>Seoul</settlement>
									<country key="KR">Korea</country>
								</address>
							</affiliation>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Seungyong</forename><surname>Cheon</surname></persName>
							<affiliation key="aff0">
								<orgName type="institution">Hanyang University</orgName>
								<address>
									<settlement>Seoul</settlement>
									<country key="KR">Korea</country>
								</address>
							</affiliation>
						</author>
						<author>
							<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Youjip</forename><surname>Won</surname></persName>
							<affiliation key="aff0">
								<orgName type="institution">Hanyang University</orgName>
								<address>
									<settlement>Seoul</settlement>
									<country key="KR">Korea</country>
								</address>
							</affiliation>
						</author>
						<title level="a" type="main">Suspend-aware Segment Cleaning in Log-structured File System</title>
					</analytic>
					<monogr>
						<imprint>
							<date/>
						</imprint>
					</monogr>
				</biblStruct>
			</sourceDesc>
		</fileDesc>
		<profileDesc>
			<abstract>
				<p>The suspend feature of the modern smart device practically suppresses the background segment cleaning of the log-structured file system. In this work, we develop Suspend-aware Segment Cleaning for the log-structured file system. We seamlessly integrate the segment cleaning into the suspend module of the smartphone OS so that the log-structured file system can reclaim the free segments without interfering with the foreground user activity. The Suspend-aware Segment Cleaning consists of two key ingredients: (i) Virtual Segment Cleaning and (ii) Utilization-based Segment Cleaning. We implement Suspend-aware Segment Cleaning in commodity smart-phone which uses the log-structured file system, F2FS, as its stock file system (Moto G). F2FS with Suspend-aware Segment Cleaning consolidates 6× more segments than stock smartphone does. With Suspend-aware Segment Cleaning, the F2FS consolidates 2× more segments even with suspend mode on than the case where the phone is always on.</p>
			</abstract>
		</profileDesc>
	</teiHeader>
	<text xml:lang="en">
		<body>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="1">Introduction</head><p>After over two decades since its inception <ref type="bibr" target="#b0">[1,</ref><ref type="bibr" target="#b1">2,</ref><ref type="bibr" target="#b2">3]</ref>, the log-structured file system is being massively deployed on the commercial device 1 <ref type="bibr" target="#b3">[4]</ref>. This is primarily because the append-only nature of the log-structured file system very well addresses the physical characteristics of the NAND flash device: asymmetry between read and write latency and inability of overwrite. Further, the recently announced log-structured file system, F2FS <ref type="bibr" target="#b3">[4]</ref> has been reported to effectively resolve the excessive IO behavior in Android IO stack <ref type="bibr" target="#b4">[5]</ref>.</p><p>One of the key concerns in smartphone is the battery lifetime of the device. Various sophisticated techniques <ref type="bibr" target="#b5">[6,</ref><ref type="bibr" target="#b6">7]</ref>, are being employed to minimize the energy consumption of the device. These works lower the CPU clock speed and/or turn off the subset (or all) of the hardware components, e.g. screen, and DRAM to reduce the energy consumption. The modern smartphone cannot dispense with suspend mode. The suspend feature leaves less opportunity to OS to execute various background managerial activities. The log-structured file system occasionally consolidates the invalid file system blocks to <ref type="bibr" target="#b0">1</ref> Moto G, Moto X, Nexus 7 make a room for incoming write operations. The logstructured file system periodically performs this segment cleaning in background manner since the foreground segment cleaning directly interferes with the ongoing IO requests.</p><p>The background segment cleaning of the logstructured file system and the suspend feature of the modern smartphone directly conflicts with each other. The suspend feature deactivates most of the hardware components prohibiting the background segment cleaning routine from functioning properly. As a result, when the file system utilization is high, the application can be exposed to extreme IO latency due to the foreground segment cleaning activity of the log-structured file system.</p><p>In this work, we develop Suspend-aware Segment Cleaning for log-structured file system. We seamlessly integrate the segment cleaning activity into the suspend module of smartphone OS. Our scheme consists of two key technical ingredients: Virtual Segment Cleaning and Utilization-based Segment Cleaning. We implement Suspend-aware Segment Cleaning at F2FS of commercially available smartphone, Moto G. With Suspendaware Segment Cleaning, the F2FS consolidates 6× as many segments as the stock F2FS does.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2">Background 2.1 Log-structured File System and Segment Cleaning</head><p>The log-structured file system clusters the data and the metadata together, aggregates multiples of these as a single large unit, segment, and synchronizes them to the disk in append-only manner. The log-structured file system needs to occasionally consolidate the valid file system blocks to create the free segment. This operation is called segment cleaning. The log-structured file system have been believed to behave poorly as file system utilization increases <ref type="bibr" target="#b0">[1,</ref><ref type="bibr" target="#b2">3,</ref><ref type="bibr" target="#b7">8,</ref><ref type="bibr" target="#b8">9]</ref>; the prime suspect for performance hit being the overhead of segment cleaning. Blackwell et al. <ref type="bibr" target="#b2">[3]</ref> pointed out that the segment cleaning overhead can bring 40% performance drop in transaction processing workload. Matthews et al. <ref type="bibr" target="#b7">[8]</ref> showed that file system performance starts to drop significantly as file system utilization increases beyond 70%. For flash-memory based storage, Kawaguchi et al. <ref type="bibr" target="#b8">[9]</ref> showed that the random write performance at 90% file system utilization is 1/3 and 1/5 of the file system performance with 60% and 30% file system utilization, respectively. Their results convey the same message as what Rosenblum et al. <ref type="bibr" target="#b0">[1]</ref> illustrated in their original work -with LFS-Greedy victim selection, write cost quintuples when disk utilization increases from 40% to 90%. Most log-structured file systems adopt two types of segment cleaning: foreground and background segment cleaning. Foreground segment cleaning is activated when there are not enough free segments to write the log sequentially, e.g., under the very high disk utilization (over 95%). Foreground segment cleaning reclaims free segments till sufficient segments are cleaned. It is also called on-demand segment cleaning. Background segment cleaning is periodically activated, e.g. 30 sec. and reclaims free segments <ref type="bibr" target="#b0">[1,</ref><ref type="bibr" target="#b3">4,</ref><ref type="bibr" target="#b9">10]</ref> to prepare for further write requests. Background segment cleaning should not be activated too frequently because it can block other IO requests and hinder user interactions. Both foreground and background segment cleaning are reclaim one segment per execution, which is 2MB in F2FS by default. With few exceptions, the smartphone adopts suspend feature to save the energy. The smartphone is put into suspend mode <ref type="bibr" target="#b6">[7]</ref> when not in use, typically after 5 -15 sec. of silence. It freezes all the processes and tasks and then calls suspend callback function in all device drivers. Then, it deactivates all the components except the essential ones, e.g. modem. <ref type="figure" target="#fig_0">Fig. 1</ref> illustrates the detailed steps for suspending a device.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="2.2">Suspend Mode of Smartphone</head><p>The state transition between the active and the suspend state (or mode) consists of a series of steps. The state transition from active to suspend mode starts when the screen is turned off. When the Android platform detects the screen-off signal, the user library (libsuspend) writes a character string "mem" to /sys/power/autosleep file via sysfs and sets the suspend flag. It also asks the kernel to check the suspend flag. Kernel updates the internal suspend state if the suspend flag is set. When the suspend state is set, the kernel waits until all outstanding wakeup events finish. After all wakeup events finish, the kernel synchronizes the dirty page cache entries, saves the states of the processes to NAND flash memory and finally deactivates the hardware. The background segment cleaning is one of the essential features of the log-structured file system. The logstructured file system allocates separate thread for background segment cleaning. The cleaner thread is periodically activated and consolidates the valid blocks if the number of free segments is smaller than a certain threshold. When entering the suspend mode, the OS kernel freezes all processes. It freezes not only the user processes but also the kernel tasks including segment cleaning thread of the file system. The suspend feature of the modern mobile device practically deprives the logstructured file system of background segment cleaning. <ref type="figure" target="#fig_1">Fig. 2</ref> illustrates this situation. Among seven scheduled background segment cleanings (s 1 , . . . , s 7 ), only three coincides with the active period of the device. In reality, it can be much worse.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3">Problem Assessment</head></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.1">The conflict of interests</head></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="3.2">Suspend Mode in Reality</head><p>We examine the behavior of suspend feature in modern smartphone. We capture the block IO accesses and major function calls involved in suspending a device 2 from the real settings <ref type="bibr">(May 1st, 2015</ref><ref type="bibr">∼ May 19th, 2015</ref>. We analyze the length of active intervals, suspend intervals and the suspension latency. The suspension latency denotes the time to suspend the phone, i.e., the interval from the LCD is turned off till the time when the smartphone OS calls sync() to synchronize the dirty page cache entries.</p><p>According to our experiment, in 75% of the time, the smartphone stays suspended. For 95% of all active intervals, the length of active interval is less than 4 sec. in user A and 10 sec. in user B <ref type="figure" target="#fig_2">(Fig. 3)</ref>, respectively. When the smartphone is woken up, it takes 5.6 sec. till it is suspended again on the average. The background segment Log-structured file system may use hardware timer to execute a background segment cleaning in periodic manner. Hardware timer literally wakes up the smartphone and all OS and application threads resume executing. This not only entails unnecessary power consumption but also prohibits the background segment cleaning from executing because the awaken thread may access the storage device.</p><p>There is important observation. The suspension latency is quite long: the average is 1.8 sec. with P(X ≥ 1.7) = 0.99 <ref type="figure" target="#fig_0">(Fig. 1)</ref>. The kernel spends most of this period on waiting for all wakeup events to be cleared. We exploit this characteristics and develop Suspend-aware segment cleaning. We seamlessly integrate the segment cleaning into suspend module, which does not interfere with the foreground user activity.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4">Suspend-Aware Segment Cleaning 4.1 Design</head><p>We find that there exists sufficient slack for performing a segment cleaning when a device is going into suspended state. In Suspend-aware Segment Cleaning, we exploit the suspend feature of the smartphone in performing the segment cleaning not to interfere with the foreground IO. We propose to activate the segment cleaning routine when the LCD is turned off.</p><p>The mechanism is simple. When the LCD is turned off, the segment cleaning module examines the file system utilization and the ratio of the invalid blocks. When the condition for segment cleaning is met, the segment cleaning module starts and iteratively claims the free segments until the suspend module calls sync(). When the kernel calls sync() to synchronize the dirty page cache entries, the segment cleaning module automatically stops. Our segment cleaning module is designed to stop when it detects outstanding IO requests in the queue.  Suspend-aware Segment Cleaning exploits the large slack (1.8 sec. on the average) between the time when LCD is turned off and the time when The OS starts to freeze the processes. It does not interfere with the foreground user processes nor does it increase the time to suspend a device. <ref type="figure" target="#fig_3">Fig. 4</ref> illustrates the pseudo code for Suspend-aware Segment Cleaning. The Suspend-aware Segment Cleaning consists of two key technical ingredients: Virtual Segment Cleaning and the Utilization-based Segment Cleaning. The Suspend-aware Segment Cleaning routine does not entail any filesystem write operation; instead, it selects the victim segment from the file system, fetches the valid blocks in the victim segment into page cache, and marks these page cache entries as dirty. This process repeats until the power management module freezes the thread. The Suspend-aware Segment Cleaning module delegates the synchronization of newly reclaimed segments to the suspend module. Suspend module calls sync() to synchronize the dirty page cache entries and the newly reclaimed segments can be synchronized to file system via suspend module before putting the device into the suspend mode. We call this as Virtual Segment Cleaning. <ref type="figure" target="#fig_4">Fig. 5</ref> illustrates the Suspend-aware Segment Cleaning. When LCD is turned off, virtual segment cleaning starts. After the first virtual segment cleaning, V SC, the thread sleeps for a certain interval, t idle , and then starts the second virtual segment cleaning. This process continues until the suspend module calls sync(). The reason we introduce an idle period between the successive virtual segment cleaning is to throttle the amount of reclaimed segments.  The Suspend-aware Segment Cleaning is activated every time when the LCD is turned off. It may cause too frequent segment cleaning, which leads to the reduction of the NAND flash lifetime due to excessive write operations. Based upon the file system utilization, we establish a condition for triggering the segment cleaning and the interval between the successive virtual segment cleanings, t idle .</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.2">Virtual Segment Cleaning</head></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="4.3">Utilization-based Segment Cleaning</head><p>There are three types of blocks in the log-structured file system: valid, invalid, and free. We introduce the notion of invalid block ratio, p inv as n invalid n valid +n invalid , where n valid and n invalid denotes the number of valid blocks and invalid blocks in the file system partition, respectively. File system utilization, u, corresponds to n valid n valid +n f ree +n invalid . For a given file system utilization, u, we establish a minimum invalid ratio, p inv (u). When LCD is turned off, we check if the fraction of invalid block is greater than p inv (u) and trigger segment cleaning only when this condition is satisfied. The underlying philosophy is to trigger segment cleaning only when there are sufficient amount of invalid blocks, and to reclaim more segment as the file system utilization increases.</p><p>We establish the threshold, p inv (u), as follows. For empty file system, i.e. u = 0, the segment cleaning starts only when the fraction of invalid blocks is larger than 60%, i.e. p inv (u) is set to 0.6. The threshold of triggering the segment cleaning decreases by the factor of 2/3 as the file system utilization increases by 10%. The threshold value can be represented by Eq. 1.</p><formula xml:id="formula_0">p inv (u) = 0.6 * (2/3) u/10 , 0 ≤ u ≤ 100% (1)</formula><p>Exponential function is computationally very expensive and cannot be used in the Kernel code. To reduce the computational complexity, we approximate this formula as in Eq. 2.</p><formula xml:id="formula_1">p * inv (u) = (1450/(u + 20) − 12)/100 (2)</formula><p>In <ref type="figure" target="#fig_6">Fig. 6</ref>, the shaded region denotes the region where the Suspend-aware Segment Cleaning becomes active.</p><p>We regulate the amount of reclaimed segments via adjusting the idle period, t idle . We like to reclaim at least two segments and at most six segments before a device goes into suspend mode. Given the average suspend latency of 1.8 sec., we set the minimum and maximum value of t idle to 300 msec and 900 msec, respectively, The length of the idle period is determined by the file system utilization, u and the invalid block ratio, p inv as in Eq. 3.</p><formula xml:id="formula_2">t idle (p inv , u) = 300 + 600 1 − p inv 1 − p * inv (u) ms (3)</formula></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="5">Experiment</head><p>We We examine the number of segments reclaimed in three situations: (i) Suspend-aware Segment Cleaning with suspend-mode on, (ii) Stock segment cleaning with suspend mode on and (iii) Stock segment cleaning with suspend mode off. Segment cleaning in F2FS is activated in 30 -60 sec. interval, and it reclaims one segment on each segment cleaning. <ref type="figure" target="#fig_7">Fig. 7</ref>   We examine the effectiveness of Utilization-based Segment Cleaning. We vary the file system utilization (u = 30, 50, 70, 90%) and fraction of invalid blocks in the file system partition (p inv = 25, 50, 70%). We put the device to suspend mode 50 times and count the total number of reclaimed segments. We develop an Android application for accurate replay of the test cases. <ref type="figure" target="#fig_8">Fig. 8</ref> illustrates the result of experiment. It shows the number of reclaimed segments obtained from the physical experiment and from the analytical model (Eq. 2 and Eq. 3). The points denote the result of the experiment and each point is annotated with the theoretical value. As the file system utilization increases the utilizationbased segment cleaning effectively increases the number of reclaimed segments. Likewise, the number of reclaimed segment increases with the ratio of the invalid blocks. The Utilization-based Segment Cleaning algorithm effectively regulates the number of reclaimed segments and the number of reclaimed segments precisely coincides with the theoretical value obtained from the model.</p></div>
<div xmlns="http://www.tei-c.org/ns/1.0"><head n="6">Conclusion</head><p>Background segment cleaning module of the logstructured file system and the suspend feature of the modern smartphone device directly conflict with each other. In this work, we develop a segment cleaning scheme for modern log-structured file system so that the background segment cleaning can be seamlessly integrated with suspend module of the smartphone OS. We develop Virtual Segment Cleaning and Utilization-based Segment Cleaning to exploit the sync() operation of existing suspend module in synchronizing the consolidated file system blocks and to regulate the amount of consolidated segments to avoid excessive cleaning, respectively. The result is very promising. Suspend-aware Segment Cleaning claims 6× as many segments as the stock background segment cleaning does.</p></div><figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_0"><head>Figure 1 :</head><label>1</label><figDesc>Figure 1: Entering the suspend mode: A: active state, S: suspend state</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_1"><head>Figure 2 :</head><label>2</label><figDesc>Figure 2: Background Segment Cleaning and Suspend Mode</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_2"><head>Figure 3 :</head><label>3</label><figDesc>Figure 3: CDF of the length of active period cleaning can consolidate only 1/4 of the segments compared to the case when the device is always active. Despite its promising property of the log-structured file system, the suspend feature of the smartphone can expose the IO request to extreme delay [1] due to the foreground segment cleaning. Log-structured file system may use hardware timer to execute a background segment cleaning in periodic manner. Hardware timer literally wakes up the smartphone and all OS and application threads resume executing. This not only entails unnecessary power consumption but also prohibits the background segment cleaning from executing because the awaken thread may access the storage device. There is important observation. The suspension latency is quite long: the average is 1.8 sec. with P(X ≥ 1.7) = 0.99 (Fig. 1). The kernel spends most of this period on waiting for all wakeup events to be cleared. We exploit this characteristics and develop Suspend-aware segment cleaning. We seamlessly integrate the segment cleaning into suspend module, which does not interfere with the foreground user activity.</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_3"><head>Figure 4 :</head><label>4</label><figDesc>Figure 4: Pseudo-code of Suspend-aware Segment Cleaning</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_4"><head>Figure 5 :</head><label>5</label><figDesc>Figure 5: Suspend-aware Segment Cleaning with three Virtual Segment Cleanings</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_6"><head>Figure 6 :</head><label>6</label><figDesc>Figure 6: Threshold for activating the segment cleaning</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_7"><head>Figure 7 :</head><label>7</label><figDesc>Figure 7: The Number of Reclaimed Segments</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" xml:id="fig_8"><head>Figure 8 :</head><label>8</label><figDesc>Figure 8: Number of Reclaimed Segments vs. the File System Utilization (u = 30, 50, 70, 90%) and Fraction of Invalid Blocks (p inv = 25, 50, 75%)</figDesc></figure>
<figure xmlns="http://www.tei-c.org/ns/1.0" type="table" xml:id="tab_1" validated="false"><head>what it used to collect via background seg- ment cleaning. With Suspend-aware Segment Cleaning, it reclaims 6× number of segments than the stock F2FS does. Even with occasional suspension, Suspend-aware Segment Cleaning collects 2× number of segments</head><label></label><figDesc>illustrates cumulative number of segments reclaimed in each case. By turning on the suspend mode, the F2FS reclaims only 1/3 of the segments of</figDesc><table>as 
the stock F2FS does with the device being always active. 

0 

1 

2 

3 

4 

5 

6 

30 
50 
70 
90 

Number of 
Reclaimed Segments 

Utilization (%) 

2.1 
2.3 
2.3 
2.4 
2.7 
2.9 

2.9 
3 
3.7 
3.9 
3.9 
4 

p inv = 25 
p inv = 50 
p inv = 75 

</table></figure>

			<note place="foot" n="2"> enter state(), sys sync(), suspend prepare(), suspend devices and enter()</note>
		</body>
		<back>

			<div type="acknowledgement">
			</div>

			<div type="references">

				<listBibl>

<biblStruct xml:id="b0">
	<analytic>
		<title level="a" type="main">The design and implementation of a log-structured file system</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Rosenblum</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><forename type="middle">K</forename><surname>Ousterhout</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">ACM Transactions on Computer Systems</title>
		<imprint>
			<biblScope unit="volume">10</biblScope>
			<biblScope unit="issue">1</biblScope>
			<biblScope unit="page" from="26" to="52" />
			<date type="published" when="1992" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b1">
	<analytic>
		<title level="a" type="main">An implementation of a log-structured file system for UNIX</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><surname>Seltzer</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">K</forename><surname>Bostic</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><forename type="middle">K</forename><surname>Mckusick</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><surname>Staelin</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. of the USENIX Winter Conference</title>
		<meeting>of the USENIX Winter Conference</meeting>
		<imprint>
			<date type="published" when="1993" />
			<biblScope unit="page" from="307" to="326" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b2">
	<analytic>
		<title level="a" type="main">Heuristic cleaning algorithms in log-structured file systems</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><forename type="middle">H</forename><surname>Blackwell</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Trevor</forename></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">M</forename><forename type="middle">I</forename><surname>Seltzer</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. of the USENIX ATC</title>
		<meeting>of the USENIX ATC</meeting>
		<imprint>
			<date type="published" when="1995" />
			<biblScope unit="page" from="277" to="288" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b3">
	<analytic>
		<title level="a" type="main">F2FS: A new file system for flash storage</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">C</forename><surname>Lee</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Sim</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><surname>Hwang</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Cho</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. of the USENIX FAST</title>
		<meeting>of the USENIX FAST</meeting>
		<imprint>
			<date type="published" when="2015" />
			<biblScope unit="page" from="273" to="286" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b4">
	<analytic>
		<title level="a" type="main">I/O stack optimization for smartphones</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Jeong</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">K</forename><surname>Lee</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Lee</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Son</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Y</forename><surname>Won</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. of the USENIX ATC</title>
		<meeting>of the USENIX ATC</meeting>
		<imprint>
			<date type="published" when="2013" />
			<biblScope unit="page" from="309" to="320" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b5">
	<analytic>
		<title level="a" type="main">Real-time dynamic voltage scaling for low-power embedded operating systems</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">P</forename><surname>Pillai</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">K</forename><forename type="middle">G</forename><surname>Shin</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">ACM SIGOPS Oper. Sys. Rev</title>
		<imprint>
			<biblScope unit="volume">35</biblScope>
			<biblScope unit="issue">5</biblScope>
			<biblScope unit="page" from="89" to="102" />
			<date type="published" when="2001" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b6">
	<analytic>
		<title level="a" type="main">Suspend-to-RAM in Linux</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><forename type="middle">L</forename><surname>Brown</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><forename type="middle">J</forename><surname>Wysocki</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. of the Linux Symposium</title>
		<meeting>of the Linux Symposium</meeting>
		<imprint>
			<date type="published" when="2008" />
			<biblScope unit="page">39</biblScope>
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b7">
	<analytic>
		<title level="a" type="main">Improving the performance of log-structured file systems with adaptive methods</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">J</forename><forename type="middle">N</forename><surname>Matthews</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">D</forename><surname>Roselli</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><forename type="middle">M</forename><surname>Costello</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><forename type="middle">Y</forename><surname>Wang</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">T</forename><forename type="middle">E</forename><surname>Anderson</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. of the ACM SOSP</title>
		<meeting>of the ACM SOSP</meeting>
		<imprint>
			<date type="published" when="1997" />
			<biblScope unit="page" from="238" to="251" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b8">
	<analytic>
		<title level="a" type="main">A flash-memory based file system</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">A</forename><surname>Kawaguchi</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Nishioka</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">H</forename><surname>Motoda</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="m">Proc. of the USENIX ATC</title>
		<meeting>of the USENIX ATC</meeting>
		<imprint>
			<date type="published" when="1995" />
			<biblScope unit="page" from="155" to="164" />
		</imprint>
	</monogr>
</biblStruct>

<biblStruct xml:id="b9">
	<analytic>
		<title level="a" type="main">The Linux implementation of a log-structured file system</title>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">R</forename><surname>Konishi</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">Y</forename><surname>Amagai</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">K</forename><surname>Sato</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">H</forename><surname>Hifumi</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Kihara</surname></persName>
		</author>
		<author>
			<persName xmlns="http://www.tei-c.org/ns/1.0"><forename type="first">S</forename><surname>Moriai</surname></persName>
		</author>
	</analytic>
	<monogr>
		<title level="j">ACM SIGOPS Oper. Sys. Rev</title>
		<imprint>
			<biblScope unit="volume">40</biblScope>
			<biblScope unit="issue">3</biblScope>
			<biblScope unit="page" from="102" to="107" />
			<date type="published" when="2006" />
		</imprint>
	</monogr>
</biblStruct>

				</listBibl>
			</div>
		</back>
	</text>
</TEI>
